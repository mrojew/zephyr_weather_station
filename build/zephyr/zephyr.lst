
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00010000 <_vector_table>:
   10000:	00 59 00 20 79 52 01 00 79 53 03 00 4d 52 01 00     .Y. yR..yS..MR..
   10010:	4d 52 01 00 4d 52 01 00 4d 52 01 00 00 00 00 00     MR..MR..MR......
	...
   1002c:	75 4a 01 00 4d 52 01 00 00 00 00 00 21 4a 01 00     uJ..MR......!J..
   1003c:	4d 52 01 00                                         MR..

00010040 <_irq_vector_table>:
   10040:	25 4b 01 00 49 a8 02 00 25 4b 01 00 25 4b 01 00     %K..I...%K..%K..
   10050:	25 4b 01 00 25 4b 01 00 25 4b 01 00 25 4b 01 00     %K..%K..%K..%K..
   10060:	25 4b 01 00 25 4b 01 00 25 4b 01 00 25 4b 01 00     %K..%K..%K..%K..
   10070:	25 4b 01 00 25 4b 01 00 25 4b 01 00 25 4b 01 00     %K..%K..%K..%K..
   10080:	25 4b 01 00 25 4b 01 00 25 4b 01 00 25 4b 01 00     %K..%K..%K..%K..
   10090:	25 4b 01 00 25 4b 01 00 25 4b 01 00 25 4b 01 00     %K..%K..%K..%K..
   100a0:	25 4b 01 00 25 4b 01 00 25 4b 01 00 25 4b 01 00     %K..%K..%K..%K..
   100b0:	25 4b 01 00 25 4b 01 00 25 4b 01 00 25 4b 01 00     %K..%K..%K..%K..
   100c0:	25 4b 01 00 25 4b 01 00 25 4b 01 00 25 4b 01 00     %K..%K..%K..%K..
   100d0:	25 4b 01 00 25 4b 01 00 25 4b 01 00 25 4b 01 00     %K..%K..%K..%K..
   100e0:	25 4b 01 00 25 4b 01 00 25 4b 01 00 25 4b 01 00     %K..%K..%K..%K..
   100f0:	25 4b 01 00 25 4b 01 00 25 4b 01 00 25 4b 01 00     %K..%K..%K..%K..

Disassembly of section text:

00010100 <__aeabi_ldivmod>:
   10100:	b97b      	cbnz	r3, 10122 <__aeabi_ldivmod+0x22>
   10102:	b972      	cbnz	r2, 10122 <__aeabi_ldivmod+0x22>
   10104:	2900      	cmp	r1, #0
   10106:	bfbe      	ittt	lt
   10108:	2000      	movlt	r0, #0
   1010a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   1010e:	e006      	blt.n	1011e <__aeabi_ldivmod+0x1e>
   10110:	bf08      	it	eq
   10112:	2800      	cmpeq	r0, #0
   10114:	bf1c      	itt	ne
   10116:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   1011a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1011e:	f000 b857 	b.w	101d0 <__aeabi_idiv0>
   10122:	f1ad 0c08 	sub.w	ip, sp, #8
   10126:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1012a:	2900      	cmp	r1, #0
   1012c:	db09      	blt.n	10142 <__aeabi_ldivmod+0x42>
   1012e:	2b00      	cmp	r3, #0
   10130:	db1a      	blt.n	10168 <__aeabi_ldivmod+0x68>
   10132:	f000 f84f 	bl	101d4 <__udivmoddi4>
   10136:	f8dd e004 	ldr.w	lr, [sp, #4]
   1013a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1013e:	b004      	add	sp, #16
   10140:	4770      	bx	lr
   10142:	4240      	negs	r0, r0
   10144:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10148:	2b00      	cmp	r3, #0
   1014a:	db1b      	blt.n	10184 <__aeabi_ldivmod+0x84>
   1014c:	f000 f842 	bl	101d4 <__udivmoddi4>
   10150:	f8dd e004 	ldr.w	lr, [sp, #4]
   10154:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10158:	b004      	add	sp, #16
   1015a:	4240      	negs	r0, r0
   1015c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10160:	4252      	negs	r2, r2
   10162:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   10166:	4770      	bx	lr
   10168:	4252      	negs	r2, r2
   1016a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1016e:	f000 f831 	bl	101d4 <__udivmoddi4>
   10172:	f8dd e004 	ldr.w	lr, [sp, #4]
   10176:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1017a:	b004      	add	sp, #16
   1017c:	4240      	negs	r0, r0
   1017e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10182:	4770      	bx	lr
   10184:	4252      	negs	r2, r2
   10186:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1018a:	f000 f823 	bl	101d4 <__udivmoddi4>
   1018e:	f8dd e004 	ldr.w	lr, [sp, #4]
   10192:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10196:	b004      	add	sp, #16
   10198:	4252      	negs	r2, r2
   1019a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1019e:	4770      	bx	lr

000101a0 <__aeabi_uldivmod>:
   101a0:	b953      	cbnz	r3, 101b8 <__aeabi_uldivmod+0x18>
   101a2:	b94a      	cbnz	r2, 101b8 <__aeabi_uldivmod+0x18>
   101a4:	2900      	cmp	r1, #0
   101a6:	bf08      	it	eq
   101a8:	2800      	cmpeq	r0, #0
   101aa:	bf1c      	itt	ne
   101ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   101b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   101b4:	f000 b80c 	b.w	101d0 <__aeabi_idiv0>
   101b8:	f1ad 0c08 	sub.w	ip, sp, #8
   101bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   101c0:	f000 f808 	bl	101d4 <__udivmoddi4>
   101c4:	f8dd e004 	ldr.w	lr, [sp, #4]
   101c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   101cc:	b004      	add	sp, #16
   101ce:	4770      	bx	lr

000101d0 <__aeabi_idiv0>:
   101d0:	4770      	bx	lr
   101d2:	bf00      	nop

000101d4 <__udivmoddi4>:
   101d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   101d8:	4686      	mov	lr, r0
   101da:	468c      	mov	ip, r1
   101dc:	4608      	mov	r0, r1
   101de:	9e08      	ldr	r6, [sp, #32]
   101e0:	4615      	mov	r5, r2
   101e2:	4674      	mov	r4, lr
   101e4:	4619      	mov	r1, r3
   101e6:	2b00      	cmp	r3, #0
   101e8:	f040 80c2 	bne.w	10370 <__udivmoddi4+0x19c>
   101ec:	4285      	cmp	r5, r0
   101ee:	fab2 f282 	clz	r2, r2
   101f2:	d945      	bls.n	10280 <__udivmoddi4+0xac>
   101f4:	b14a      	cbz	r2, 1020a <__udivmoddi4+0x36>
   101f6:	f1c2 0320 	rsb	r3, r2, #32
   101fa:	fa00 fc02 	lsl.w	ip, r0, r2
   101fe:	fa2e f303 	lsr.w	r3, lr, r3
   10202:	4095      	lsls	r5, r2
   10204:	ea43 0c0c 	orr.w	ip, r3, ip
   10208:	4094      	lsls	r4, r2
   1020a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1020e:	b2a8      	uxth	r0, r5
   10210:	fbbc f8fe 	udiv	r8, ip, lr
   10214:	0c23      	lsrs	r3, r4, #16
   10216:	fb0e cc18 	mls	ip, lr, r8, ip
   1021a:	fb08 f900 	mul.w	r9, r8, r0
   1021e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   10222:	4599      	cmp	r9, r3
   10224:	d928      	bls.n	10278 <__udivmoddi4+0xa4>
   10226:	18eb      	adds	r3, r5, r3
   10228:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
   1022c:	d204      	bcs.n	10238 <__udivmoddi4+0x64>
   1022e:	4599      	cmp	r9, r3
   10230:	d902      	bls.n	10238 <__udivmoddi4+0x64>
   10232:	f1a8 0702 	sub.w	r7, r8, #2
   10236:	442b      	add	r3, r5
   10238:	eba3 0309 	sub.w	r3, r3, r9
   1023c:	b2a4      	uxth	r4, r4
   1023e:	fbb3 fcfe 	udiv	ip, r3, lr
   10242:	fb0e 331c 	mls	r3, lr, ip, r3
   10246:	fb0c f000 	mul.w	r0, ip, r0
   1024a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1024e:	42a0      	cmp	r0, r4
   10250:	d914      	bls.n	1027c <__udivmoddi4+0xa8>
   10252:	192c      	adds	r4, r5, r4
   10254:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   10258:	d204      	bcs.n	10264 <__udivmoddi4+0x90>
   1025a:	42a0      	cmp	r0, r4
   1025c:	d902      	bls.n	10264 <__udivmoddi4+0x90>
   1025e:	f1ac 0302 	sub.w	r3, ip, #2
   10262:	442c      	add	r4, r5
   10264:	1a24      	subs	r4, r4, r0
   10266:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
   1026a:	b11e      	cbz	r6, 10274 <__udivmoddi4+0xa0>
   1026c:	40d4      	lsrs	r4, r2
   1026e:	2300      	movs	r3, #0
   10270:	6034      	str	r4, [r6, #0]
   10272:	6073      	str	r3, [r6, #4]
   10274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10278:	4647      	mov	r7, r8
   1027a:	e7dd      	b.n	10238 <__udivmoddi4+0x64>
   1027c:	4663      	mov	r3, ip
   1027e:	e7f1      	b.n	10264 <__udivmoddi4+0x90>
   10280:	bb92      	cbnz	r2, 102e8 <__udivmoddi4+0x114>
   10282:	1b43      	subs	r3, r0, r5
   10284:	2101      	movs	r1, #1
   10286:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1028a:	b2af      	uxth	r7, r5
   1028c:	fbb3 fcfe 	udiv	ip, r3, lr
   10290:	0c20      	lsrs	r0, r4, #16
   10292:	fb0e 331c 	mls	r3, lr, ip, r3
   10296:	fb0c f807 	mul.w	r8, ip, r7
   1029a:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   1029e:	4598      	cmp	r8, r3
   102a0:	d962      	bls.n	10368 <__udivmoddi4+0x194>
   102a2:	18eb      	adds	r3, r5, r3
   102a4:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   102a8:	d204      	bcs.n	102b4 <__udivmoddi4+0xe0>
   102aa:	4598      	cmp	r8, r3
   102ac:	d902      	bls.n	102b4 <__udivmoddi4+0xe0>
   102ae:	f1ac 0002 	sub.w	r0, ip, #2
   102b2:	442b      	add	r3, r5
   102b4:	eba3 0308 	sub.w	r3, r3, r8
   102b8:	b2a4      	uxth	r4, r4
   102ba:	fbb3 fcfe 	udiv	ip, r3, lr
   102be:	fb0e 331c 	mls	r3, lr, ip, r3
   102c2:	fb0c f707 	mul.w	r7, ip, r7
   102c6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   102ca:	42a7      	cmp	r7, r4
   102cc:	d94e      	bls.n	1036c <__udivmoddi4+0x198>
   102ce:	192c      	adds	r4, r5, r4
   102d0:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   102d4:	d204      	bcs.n	102e0 <__udivmoddi4+0x10c>
   102d6:	42a7      	cmp	r7, r4
   102d8:	d902      	bls.n	102e0 <__udivmoddi4+0x10c>
   102da:	f1ac 0302 	sub.w	r3, ip, #2
   102de:	442c      	add	r4, r5
   102e0:	1be4      	subs	r4, r4, r7
   102e2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   102e6:	e7c0      	b.n	1026a <__udivmoddi4+0x96>
   102e8:	f1c2 0320 	rsb	r3, r2, #32
   102ec:	fa20 f103 	lsr.w	r1, r0, r3
   102f0:	4095      	lsls	r5, r2
   102f2:	4090      	lsls	r0, r2
   102f4:	fa2e f303 	lsr.w	r3, lr, r3
   102f8:	4303      	orrs	r3, r0
   102fa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   102fe:	b2af      	uxth	r7, r5
   10300:	fbb1 fcfe 	udiv	ip, r1, lr
   10304:	fb0e 101c 	mls	r0, lr, ip, r1
   10308:	0c19      	lsrs	r1, r3, #16
   1030a:	fb0c f807 	mul.w	r8, ip, r7
   1030e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   10312:	4588      	cmp	r8, r1
   10314:	fa04 f402 	lsl.w	r4, r4, r2
   10318:	d922      	bls.n	10360 <__udivmoddi4+0x18c>
   1031a:	1869      	adds	r1, r5, r1
   1031c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   10320:	d204      	bcs.n	1032c <__udivmoddi4+0x158>
   10322:	4588      	cmp	r8, r1
   10324:	d902      	bls.n	1032c <__udivmoddi4+0x158>
   10326:	f1ac 0002 	sub.w	r0, ip, #2
   1032a:	4429      	add	r1, r5
   1032c:	eba1 0108 	sub.w	r1, r1, r8
   10330:	b29b      	uxth	r3, r3
   10332:	fbb1 fcfe 	udiv	ip, r1, lr
   10336:	fb0e 111c 	mls	r1, lr, ip, r1
   1033a:	fb0c f707 	mul.w	r7, ip, r7
   1033e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   10342:	429f      	cmp	r7, r3
   10344:	d90e      	bls.n	10364 <__udivmoddi4+0x190>
   10346:	18eb      	adds	r3, r5, r3
   10348:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   1034c:	d204      	bcs.n	10358 <__udivmoddi4+0x184>
   1034e:	429f      	cmp	r7, r3
   10350:	d902      	bls.n	10358 <__udivmoddi4+0x184>
   10352:	f1ac 0102 	sub.w	r1, ip, #2
   10356:	442b      	add	r3, r5
   10358:	1bdb      	subs	r3, r3, r7
   1035a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   1035e:	e792      	b.n	10286 <__udivmoddi4+0xb2>
   10360:	4660      	mov	r0, ip
   10362:	e7e3      	b.n	1032c <__udivmoddi4+0x158>
   10364:	4661      	mov	r1, ip
   10366:	e7f7      	b.n	10358 <__udivmoddi4+0x184>
   10368:	4660      	mov	r0, ip
   1036a:	e7a3      	b.n	102b4 <__udivmoddi4+0xe0>
   1036c:	4663      	mov	r3, ip
   1036e:	e7b7      	b.n	102e0 <__udivmoddi4+0x10c>
   10370:	4283      	cmp	r3, r0
   10372:	d906      	bls.n	10382 <__udivmoddi4+0x1ae>
   10374:	b916      	cbnz	r6, 1037c <__udivmoddi4+0x1a8>
   10376:	2100      	movs	r1, #0
   10378:	4608      	mov	r0, r1
   1037a:	e77b      	b.n	10274 <__udivmoddi4+0xa0>
   1037c:	e9c6 e000 	strd	lr, r0, [r6]
   10380:	e7f9      	b.n	10376 <__udivmoddi4+0x1a2>
   10382:	fab3 f783 	clz	r7, r3
   10386:	b98f      	cbnz	r7, 103ac <__udivmoddi4+0x1d8>
   10388:	4283      	cmp	r3, r0
   1038a:	d301      	bcc.n	10390 <__udivmoddi4+0x1bc>
   1038c:	4572      	cmp	r2, lr
   1038e:	d808      	bhi.n	103a2 <__udivmoddi4+0x1ce>
   10390:	ebbe 0402 	subs.w	r4, lr, r2
   10394:	eb60 0303 	sbc.w	r3, r0, r3
   10398:	2001      	movs	r0, #1
   1039a:	469c      	mov	ip, r3
   1039c:	b91e      	cbnz	r6, 103a6 <__udivmoddi4+0x1d2>
   1039e:	2100      	movs	r1, #0
   103a0:	e768      	b.n	10274 <__udivmoddi4+0xa0>
   103a2:	4638      	mov	r0, r7
   103a4:	e7fa      	b.n	1039c <__udivmoddi4+0x1c8>
   103a6:	e9c6 4c00 	strd	r4, ip, [r6]
   103aa:	e7f8      	b.n	1039e <__udivmoddi4+0x1ca>
   103ac:	f1c7 0c20 	rsb	ip, r7, #32
   103b0:	40bb      	lsls	r3, r7
   103b2:	fa22 f40c 	lsr.w	r4, r2, ip
   103b6:	431c      	orrs	r4, r3
   103b8:	fa2e f10c 	lsr.w	r1, lr, ip
   103bc:	fa20 f30c 	lsr.w	r3, r0, ip
   103c0:	40b8      	lsls	r0, r7
   103c2:	4301      	orrs	r1, r0
   103c4:	ea4f 4914 	mov.w	r9, r4, lsr #16
   103c8:	fa0e f507 	lsl.w	r5, lr, r7
   103cc:	fbb3 f8f9 	udiv	r8, r3, r9
   103d0:	fa1f fe84 	uxth.w	lr, r4
   103d4:	fb09 3018 	mls	r0, r9, r8, r3
   103d8:	0c0b      	lsrs	r3, r1, #16
   103da:	fb08 fa0e 	mul.w	sl, r8, lr
   103de:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   103e2:	459a      	cmp	sl, r3
   103e4:	fa02 f207 	lsl.w	r2, r2, r7
   103e8:	d940      	bls.n	1046c <__udivmoddi4+0x298>
   103ea:	18e3      	adds	r3, r4, r3
   103ec:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
   103f0:	d204      	bcs.n	103fc <__udivmoddi4+0x228>
   103f2:	459a      	cmp	sl, r3
   103f4:	d902      	bls.n	103fc <__udivmoddi4+0x228>
   103f6:	f1a8 0002 	sub.w	r0, r8, #2
   103fa:	4423      	add	r3, r4
   103fc:	eba3 030a 	sub.w	r3, r3, sl
   10400:	b289      	uxth	r1, r1
   10402:	fbb3 f8f9 	udiv	r8, r3, r9
   10406:	fb09 3318 	mls	r3, r9, r8, r3
   1040a:	fb08 fe0e 	mul.w	lr, r8, lr
   1040e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   10412:	458e      	cmp	lr, r1
   10414:	d92c      	bls.n	10470 <__udivmoddi4+0x29c>
   10416:	1861      	adds	r1, r4, r1
   10418:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   1041c:	d204      	bcs.n	10428 <__udivmoddi4+0x254>
   1041e:	458e      	cmp	lr, r1
   10420:	d902      	bls.n	10428 <__udivmoddi4+0x254>
   10422:	f1a8 0302 	sub.w	r3, r8, #2
   10426:	4421      	add	r1, r4
   10428:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   1042c:	fba0 9802 	umull	r9, r8, r0, r2
   10430:	eba1 010e 	sub.w	r1, r1, lr
   10434:	4541      	cmp	r1, r8
   10436:	46ce      	mov	lr, r9
   10438:	4643      	mov	r3, r8
   1043a:	d302      	bcc.n	10442 <__udivmoddi4+0x26e>
   1043c:	d106      	bne.n	1044c <__udivmoddi4+0x278>
   1043e:	454d      	cmp	r5, r9
   10440:	d204      	bcs.n	1044c <__udivmoddi4+0x278>
   10442:	ebb9 0e02 	subs.w	lr, r9, r2
   10446:	eb68 0304 	sbc.w	r3, r8, r4
   1044a:	3801      	subs	r0, #1
   1044c:	2e00      	cmp	r6, #0
   1044e:	d0a6      	beq.n	1039e <__udivmoddi4+0x1ca>
   10450:	ebb5 020e 	subs.w	r2, r5, lr
   10454:	eb61 0103 	sbc.w	r1, r1, r3
   10458:	fa01 fc0c 	lsl.w	ip, r1, ip
   1045c:	fa22 f307 	lsr.w	r3, r2, r7
   10460:	ea4c 0303 	orr.w	r3, ip, r3
   10464:	40f9      	lsrs	r1, r7
   10466:	e9c6 3100 	strd	r3, r1, [r6]
   1046a:	e798      	b.n	1039e <__udivmoddi4+0x1ca>
   1046c:	4640      	mov	r0, r8
   1046e:	e7c5      	b.n	103fc <__udivmoddi4+0x228>
   10470:	4643      	mov	r3, r8
   10472:	e7d9      	b.n	10428 <__udivmoddi4+0x254>
   10474:	0000      	movs	r0, r0
	...

00010478 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
   10478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   1047c:	4d45      	ldr	r5, [pc, #276]	; (10594 <bt_init+0x11c>)
{
   1047e:	b083      	sub	sp, #12
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   10480:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   10484:	6899      	ldr	r1, [r3, #8]
   10486:	f011 0101 	ands.w	r1, r1, #1
{
   1048a:	af00      	add	r7, sp, #0
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   1048c:	d121      	bne.n	104d2 <bt_init+0x5a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   1048e:	1d3a      	adds	r2, r7, #4
   10490:	f640 4003 	movw	r0, #3075	; 0xc03
   10494:	f006 fb0e 	bl	16ab4 <bt_hci_cmd_send_sync>
		if (err) {
   10498:	4604      	mov	r4, r0
   1049a:	2800      	cmp	r0, #0
   1049c:	d175      	bne.n	1058a <bt_init+0x112>
		hci_reset_complete(rsp);
   1049e:	6878      	ldr	r0, [r7, #4]
	uint8_t status = buf->data[0];
   104a0:	68c3      	ldr	r3, [r0, #12]
	if (status) {
   104a2:	781b      	ldrb	r3, [r3, #0]
   104a4:	b99b      	cbnz	r3, 104ce <bt_init+0x56>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   104a6:	f3bf 8f5b 	dmb	ish
   104aa:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   104ae:	f3bf 8f5b 	dmb	ish
   104b2:	f105 02cc 	add.w	r2, r5, #204	; 0xcc
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   104b6:	f003 0309 	and.w	r3, r3, #9
   104ba:	f3bf 8f5b 	dmb	ish
   104be:	e852 1f00 	ldrex	r1, [r2]
   104c2:	e842 3400 	strex	r4, r3, [r2]
   104c6:	2c00      	cmp	r4, #0
   104c8:	d1f9      	bne.n	104be <bt_init+0x46>
   104ca:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   104ce:	f01d f9c7 	bl	2d860 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   104d2:	1d3a      	adds	r2, r7, #4
   104d4:	2100      	movs	r1, #0
   104d6:	f241 0003 	movw	r0, #4099	; 0x1003
   104da:	f006 faeb 	bl	16ab4 <bt_hci_cmd_send_sync>
	if (err) {
   104de:	4604      	mov	r4, r0
   104e0:	2800      	cmp	r0, #0
   104e2:	d152      	bne.n	1058a <bt_init+0x112>
	read_local_features_complete(rsp);
   104e4:	687e      	ldr	r6, [r7, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   104e6:	482c      	ldr	r0, [pc, #176]	; (10598 <bt_init+0x120>)
   104e8:	68f1      	ldr	r1, [r6, #12]
   104ea:	2208      	movs	r2, #8
   104ec:	3101      	adds	r1, #1
   104ee:	f025 f822 	bl	35536 <memcpy>
	net_buf_unref(rsp);
   104f2:	4630      	mov	r0, r6
   104f4:	f01d f9b4 	bl	2d860 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   104f8:	4621      	mov	r1, r4
   104fa:	1d3a      	adds	r2, r7, #4
   104fc:	f241 0001 	movw	r0, #4097	; 0x1001
   10500:	f006 fad8 	bl	16ab4 <bt_hci_cmd_send_sync>
	if (err) {
   10504:	4604      	mov	r4, r0
   10506:	2800      	cmp	r0, #0
   10508:	d13f      	bne.n	1058a <bt_init+0x112>
	read_local_ver_complete(rsp);
   1050a:	6878      	ldr	r0, [r7, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   1050c:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
   1050e:	785a      	ldrb	r2, [r3, #1]
   10510:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   10514:	885a      	ldrh	r2, [r3, #2]
   10516:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   1051a:	791a      	ldrb	r2, [r3, #4]
   1051c:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   10520:	f8b3 2007 	ldrh.w	r2, [r3, #7]
   10524:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   10528:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   1052c:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   10530:	f01d f996 	bl	2d860 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   10534:	4621      	mov	r1, r4
   10536:	1d3a      	adds	r2, r7, #4
   10538:	f241 0002 	movw	r0, #4098	; 0x1002
   1053c:	f006 faba 	bl	16ab4 <bt_hci_cmd_send_sync>
	if (err) {
   10540:	4604      	mov	r4, r0
   10542:	bb10      	cbnz	r0, 1058a <bt_init+0x112>
	read_supported_commands_complete(rsp);
   10544:	687e      	ldr	r6, [r7, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
   10546:	4815      	ldr	r0, [pc, #84]	; (1059c <bt_init+0x124>)
   10548:	68f1      	ldr	r1, [r6, #12]
   1054a:	2240      	movs	r2, #64	; 0x40
   1054c:	3101      	adds	r1, #1
   1054e:	f024 fff2 	bl	35536 <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
   10552:	4812      	ldr	r0, [pc, #72]	; (1059c <bt_init+0x124>)
   10554:	f025 f8ac 	bl	356b0 <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
   10558:	4630      	mov	r0, r6
   1055a:	f01d f981 	bl	2d860 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   1055e:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   10562:	065a      	lsls	r2, r3, #25
   10564:	d422      	bmi.n	105ac <bt_init+0x134>
		LOG_ERR("Non-LE capable controller detected!");
   10566:	466c      	mov	r4, sp
   10568:	b088      	sub	sp, #32
   1056a:	466a      	mov	r2, sp
   1056c:	4b0c      	ldr	r3, [pc, #48]	; (105a0 <bt_init+0x128>)
   1056e:	6153      	str	r3, [r2, #20]
   10570:	4b0c      	ldr	r3, [pc, #48]	; (105a4 <bt_init+0x12c>)
   10572:	6193      	str	r3, [r2, #24]
   10574:	2303      	movs	r3, #3
   10576:	f842 3f10 	str.w	r3, [r2, #16]!
   1057a:	480b      	ldr	r0, [pc, #44]	; (105a8 <bt_init+0x130>)
   1057c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10580:	f025 f96a 	bl	35858 <z_log_msg_static_create.constprop.0>
   10584:	46a5      	mov	sp, r4
		return -ENODEV;
   10586:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
   1058a:	4620      	mov	r0, r4
   1058c:	370c      	adds	r7, #12
   1058e:	46bd      	mov	sp, r7
   10590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10594:	20000000 	.word	0x20000000
   10598:	20000070 	.word	0x20000070
   1059c:	20000078 	.word	0x20000078
   105a0:	0003c94e 	.word	0x0003c94e
   105a4:	0003ce56 	.word	0x0003ce56
   105a8:	000395c0 	.word	0x000395c0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   105ac:	4621      	mov	r1, r4
   105ae:	1d3a      	adds	r2, r7, #4
   105b0:	f242 0003 	movw	r0, #8195	; 0x2003
   105b4:	f006 fa7e 	bl	16ab4 <bt_hci_cmd_send_sync>
	if (err) {
   105b8:	4604      	mov	r4, r0
   105ba:	2800      	cmp	r0, #0
   105bc:	d1e5      	bne.n	1058a <bt_init+0x112>
	read_le_features_complete(rsp);
   105be:	687e      	ldr	r6, [r7, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   105c0:	48b9      	ldr	r0, [pc, #740]	; (108a8 <bt_init+0x430>)
   105c2:	68f1      	ldr	r1, [r6, #12]
   105c4:	2208      	movs	r2, #8
   105c6:	3101      	adds	r1, #1
   105c8:	f024 ffb5 	bl	35536 <memcpy>
	net_buf_unref(rsp);
   105cc:	4630      	mov	r0, r6
   105ce:	f01d f947 	bl	2d860 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   105d2:	4621      	mov	r1, r4
   105d4:	1d3a      	adds	r2, r7, #4
   105d6:	f242 0002 	movw	r0, #8194	; 0x2002
   105da:	f006 fa6b 	bl	16ab4 <bt_hci_cmd_send_sync>
		if (err) {
   105de:	4604      	mov	r4, r0
   105e0:	2800      	cmp	r0, #0
   105e2:	d1d2      	bne.n	1058a <bt_init+0x112>
		le_read_buffer_size_complete(rsp);
   105e4:	687c      	ldr	r4, [r7, #4]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   105e6:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   105e8:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   105ec:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   105f0:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   105f2:	b121      	cbz	r1, 105fe <bt_init+0x186>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   105f4:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   105f6:	48ad      	ldr	r0, [pc, #692]	; (108ac <bt_init+0x434>)
   105f8:	4611      	mov	r1, r2
   105fa:	f028 f962 	bl	388c2 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   105fe:	4620      	mov	r0, r4
   10600:	f01d f92e 	bl	2d860 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   10604:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   10608:	f016 0620 	ands.w	r6, r6, #32
   1060c:	d118      	bne.n	10640 <bt_init+0x1c8>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   1060e:	2102      	movs	r1, #2
   10610:	f640 406d 	movw	r0, #3181	; 0xc6d
   10614:	f006 f8f2 	bl	167fc <bt_hci_cmd_create>
		if (!buf) {
   10618:	4604      	mov	r4, r0
   1061a:	2800      	cmp	r0, #0
   1061c:	f000 80e3 	beq.w	107e6 <bt_init+0x36e>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   10620:	2102      	movs	r1, #2
   10622:	300c      	adds	r0, #12
   10624:	f027 fa24 	bl	37a70 <net_buf_simple_add>
		cp_le->le = 0x01;
   10628:	2301      	movs	r3, #1
   1062a:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   1062c:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   1062e:	4621      	mov	r1, r4
   10630:	4632      	mov	r2, r6
   10632:	f640 406d 	movw	r0, #3181	; 0xc6d
   10636:	f006 fa3d 	bl	16ab4 <bt_hci_cmd_send_sync>
		if (err) {
   1063a:	4604      	mov	r4, r0
   1063c:	2800      	cmp	r0, #0
   1063e:	d1a4      	bne.n	1058a <bt_init+0x112>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   10640:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   10644:	071b      	lsls	r3, r3, #28
   10646:	d512      	bpl.n	1066e <bt_init+0x1f6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   10648:	1d3a      	adds	r2, r7, #4
   1064a:	2100      	movs	r1, #0
   1064c:	f242 001c 	movw	r0, #8220	; 0x201c
   10650:	f006 fa30 	bl	16ab4 <bt_hci_cmd_send_sync>
		if (err) {
   10654:	4604      	mov	r4, r0
   10656:	2800      	cmp	r0, #0
   10658:	d197      	bne.n	1058a <bt_init+0x112>
		le_read_supp_states_complete(rsp);
   1065a:	6878      	ldr	r0, [r7, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   1065c:	68c3      	ldr	r3, [r0, #12]
   1065e:	f8d3 2001 	ldr.w	r2, [r3, #1]
   10662:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   10666:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   1066a:	f01d f8f9 	bl	2d860 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   1066e:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   10672:	069e      	lsls	r6, r3, #26
   10674:	d521      	bpl.n	106ba <bt_init+0x242>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   10676:	1cb9      	adds	r1, r7, #2
   10678:	4638      	mov	r0, r7
   1067a:	f006 fa9b 	bl	16bb4 <hci_le_read_max_data_len>
		if (err) {
   1067e:	4604      	mov	r4, r0
   10680:	2800      	cmp	r0, #0
   10682:	d182      	bne.n	1058a <bt_init+0x112>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   10684:	2104      	movs	r1, #4
   10686:	f242 0024 	movw	r0, #8228	; 0x2024
   1068a:	f006 f8b7 	bl	167fc <bt_hci_cmd_create>
		if (!buf) {
   1068e:	4606      	mov	r6, r0
   10690:	2800      	cmp	r0, #0
   10692:	f000 80a8 	beq.w	107e6 <bt_init+0x36e>
   10696:	2104      	movs	r1, #4
   10698:	300c      	adds	r0, #12
   1069a:	f027 f9e9 	bl	37a70 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   1069e:	883b      	ldrh	r3, [r7, #0]
   106a0:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   106a2:	887b      	ldrh	r3, [r7, #2]
   106a4:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   106a6:	4622      	mov	r2, r4
   106a8:	4631      	mov	r1, r6
   106aa:	f242 0024 	movw	r0, #8228	; 0x2024
   106ae:	f006 fa01 	bl	16ab4 <bt_hci_cmd_send_sync>
		if (err) {
   106b2:	4604      	mov	r4, r0
   106b4:	2800      	cmp	r0, #0
   106b6:	f47f af68 	bne.w	1058a <bt_init+0x112>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   106ba:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   106be:	065c      	lsls	r4, r3, #25
   106c0:	d52a      	bpl.n	10718 <bt_init+0x2a0>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RPA_TIMEOUT,
   106c2:	2102      	movs	r1, #2
   106c4:	f242 002e 	movw	r0, #8238	; 0x202e
   106c8:	f006 f898 	bl	167fc <bt_hci_cmd_create>
		if (!buf) {
   106cc:	4604      	mov	r4, r0
   106ce:	2800      	cmp	r0, #0
   106d0:	f000 8089 	beq.w	107e6 <bt_init+0x36e>
   106d4:	2102      	movs	r1, #2
   106d6:	300c      	adds	r0, #12
   106d8:	f027 f9ca 	bl	37a70 <net_buf_simple_add>
		cp->rpa_timeout = sys_cpu_to_le16(bt_dev.rpa_timeout);
   106dc:	f8b5 3198 	ldrh.w	r3, [r5, #408]	; 0x198
   106e0:	8003      	strh	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RPA_TIMEOUT, buf,
   106e2:	4621      	mov	r1, r4
   106e4:	2200      	movs	r2, #0
   106e6:	f242 002e 	movw	r0, #8238	; 0x202e
   106ea:	f006 f9e3 	bl	16ab4 <bt_hci_cmd_send_sync>
		if (err) {
   106ee:	4604      	mov	r4, r0
   106f0:	2800      	cmp	r0, #0
   106f2:	f47f af4a 	bne.w	1058a <bt_init+0x112>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   106f6:	4601      	mov	r1, r0
   106f8:	1d3a      	adds	r2, r7, #4
   106fa:	f242 002a 	movw	r0, #8234	; 0x202a
   106fe:	f006 f9d9 	bl	16ab4 <bt_hci_cmd_send_sync>
		if (err) {
   10702:	4604      	mov	r4, r0
   10704:	2800      	cmp	r0, #0
   10706:	f47f af40 	bne.w	1058a <bt_init+0x112>
		le_read_resolving_list_size_complete(rsp);
   1070a:	6878      	ldr	r0, [r7, #4]
	bt_dev.le.rl_size = rp->rl_size;
   1070c:	68c3      	ldr	r3, [r0, #12]
   1070e:	785b      	ldrb	r3, [r3, #1]
   10710:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
   10714:	f01d f8a4 	bl	2d860 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   10718:	2108      	movs	r1, #8
   1071a:	f242 0001 	movw	r0, #8193	; 0x2001
   1071e:	f006 f86d 	bl	167fc <bt_hci_cmd_create>
	if (!buf) {
   10722:	4604      	mov	r4, r0
   10724:	2800      	cmp	r0, #0
   10726:	d05e      	beq.n	107e6 <bt_init+0x36e>
   10728:	2108      	movs	r1, #8
   1072a:	300c      	adds	r0, #12
   1072c:	f027 f9a0 	bl	37a70 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   10730:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   10734:	f011 0f40 	tst.w	r1, #64	; 0x40
   10738:	4602      	mov	r2, r0
   1073a:	f240 2302 	movw	r3, #514	; 0x202
   1073e:	bf08      	it	eq
   10740:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   10742:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   10744:	bf4c      	ite	mi
   10746:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   1074a:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   1074e:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   10750:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   10754:	bf48      	it	mi
   10756:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   1075a:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   1075e:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   10762:	bf18      	it	ne
   10764:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   10768:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1076c:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   1076e:	bf48      	it	mi
   10770:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   10774:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   10776:	bf08      	it	eq
   10778:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   1077c:	2100      	movs	r1, #0
   1077e:	f025 f87a 	bl	35876 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   10782:	4621      	mov	r1, r4
   10784:	2200      	movs	r2, #0
   10786:	f242 0001 	movw	r0, #8193	; 0x2001
   1078a:	f006 f993 	bl	16ab4 <bt_hci_cmd_send_sync>
	if (err) {
   1078e:	4604      	mov	r4, r0
   10790:	2800      	cmp	r0, #0
   10792:	f47f aefa 	bne.w	1058a <bt_init+0x112>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   10796:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
   1079a:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1079e:	0698      	lsls	r0, r3, #26
   107a0:	d424      	bmi.n	107ec <bt_init+0x374>
	if (bt_dev.le.acl_mtu) {
   107a2:	b9c9      	cbnz	r1, 107d8 <bt_init+0x360>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   107a4:	1d3a      	adds	r2, r7, #4
   107a6:	f241 0005 	movw	r0, #4101	; 0x1005
   107aa:	f006 f983 	bl	16ab4 <bt_hci_cmd_send_sync>
	if (err) {
   107ae:	4604      	mov	r4, r0
   107b0:	2800      	cmp	r0, #0
   107b2:	f47f aeea 	bne.w	1058a <bt_init+0x112>
	if (bt_dev.le.acl_mtu) {
   107b6:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
   107ba:	687c      	ldr	r4, [r7, #4]
	if (bt_dev.le.acl_mtu) {
   107bc:	b94b      	cbnz	r3, 107d2 <bt_init+0x35a>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   107be:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   107c0:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   107c4:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   107c8:	889a      	ldrh	r2, [r3, #4]
   107ca:	4838      	ldr	r0, [pc, #224]	; (108ac <bt_init+0x434>)
   107cc:	4611      	mov	r1, r2
   107ce:	f028 f878 	bl	388c2 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   107d2:	4620      	mov	r0, r4
   107d4:	f01d f844 	bl	2d860 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   107d8:	2108      	movs	r1, #8
   107da:	f640 4001 	movw	r0, #3073	; 0xc01
   107de:	f006 f80d 	bl	167fc <bt_hci_cmd_create>
	if (!buf) {
   107e2:	4604      	mov	r4, r0
   107e4:	b9b8      	cbnz	r0, 10816 <bt_init+0x39e>
		return -ENOBUFS;
   107e6:	f06f 0468 	mvn.w	r4, #104	; 0x68
   107ea:	e6ce      	b.n	1058a <bt_init+0x112>
	else if (!bt_dev.le.acl_mtu) {
   107ec:	2900      	cmp	r1, #0
   107ee:	d1f3      	bne.n	107d8 <bt_init+0x360>
		LOG_ERR("ACL BR/EDR buffers not initialized");
   107f0:	466c      	mov	r4, sp
   107f2:	b088      	sub	sp, #32
   107f4:	466a      	mov	r2, sp
   107f6:	4b2e      	ldr	r3, [pc, #184]	; (108b0 <bt_init+0x438>)
   107f8:	6153      	str	r3, [r2, #20]
   107fa:	4b2e      	ldr	r3, [pc, #184]	; (108b4 <bt_init+0x43c>)
   107fc:	6193      	str	r3, [r2, #24]
   107fe:	2303      	movs	r3, #3
   10800:	f842 3f10 	str.w	r3, [r2, #16]!
   10804:	482c      	ldr	r0, [pc, #176]	; (108b8 <bt_init+0x440>)
   10806:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1080a:	f025 f825 	bl	35858 <z_log_msg_static_create.constprop.0>
   1080e:	46a5      	mov	sp, r4
		return -EIO;
   10810:	f06f 0404 	mvn.w	r4, #4
   10814:	e6b9      	b.n	1058a <bt_init+0x112>
   10816:	2108      	movs	r1, #8
   10818:	300c      	adds	r0, #12
   1081a:	f027 f929 	bl	37a70 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1081e:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   10822:	07d9      	lsls	r1, r3, #31
   10824:	4602      	mov	r2, r0
   10826:	d436      	bmi.n	10896 <bt_init+0x41e>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   10828:	4824      	ldr	r0, [pc, #144]	; (108bc <bt_init+0x444>)
   1082a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
	sys_put_le64(mask, ev->events);
   1082e:	f025 f822 	bl	35876 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   10832:	4621      	mov	r1, r4
   10834:	2200      	movs	r2, #0
   10836:	f640 4001 	movw	r0, #3073	; 0xc01
   1083a:	f006 f93b 	bl	16ab4 <bt_hci_cmd_send_sync>
	if (err) {
   1083e:	4604      	mov	r4, r0
   10840:	2800      	cmp	r0, #0
   10842:	f47f aea2 	bne.w	1058a <bt_init+0x112>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   10846:	4601      	mov	r1, r0
   10848:	1d3a      	adds	r2, r7, #4
   1084a:	f64f 4001 	movw	r0, #64513	; 0xfc01
   1084e:	f006 f931 	bl	16ab4 <bt_hci_cmd_send_sync>
	if (err) {
   10852:	4c1b      	ldr	r4, [pc, #108]	; (108c0 <bt_init+0x448>)
   10854:	2800      	cmp	r0, #0
   10856:	d037      	beq.n	108c8 <bt_init+0x450>
		LOG_WRN("Vendor HCI extensions not available");
   10858:	466d      	mov	r5, sp
   1085a:	b088      	sub	sp, #32
   1085c:	466a      	mov	r2, sp
   1085e:	4b19      	ldr	r3, [pc, #100]	; (108c4 <bt_init+0x44c>)
   10860:	4815      	ldr	r0, [pc, #84]	; (108b8 <bt_init+0x440>)
   10862:	e9c2 3405 	strd	r3, r4, [r2, #20]
   10866:	2303      	movs	r3, #3
   10868:	f842 3f10 	str.w	r3, [r2, #16]!
   1086c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   10870:	f024 fff2 	bl	35858 <z_log_msg_static_create.constprop.0>
   10874:	46ad      	mov	sp, r5
	err = bt_id_init();
   10876:	f007 fd7d 	bl	18374 <bt_id_init>
	if (err) {
   1087a:	4604      	mov	r4, r0
   1087c:	2800      	cmp	r0, #0
   1087e:	f47f ae84 	bne.w	1058a <bt_init+0x112>
		err = bt_conn_init();
   10882:	f009 f977 	bl	19b74 <bt_conn_init>
		if (err) {
   10886:	4604      	mov	r4, r0
   10888:	2800      	cmp	r0, #0
   1088a:	f47f ae7e 	bne.w	1058a <bt_init+0x112>
   1088e:	f006 febb 	bl	17608 <bt_init.part.0>
   10892:	4604      	mov	r4, r0
   10894:	e679      	b.n	1058a <bt_init+0x112>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   10896:	a102      	add	r1, pc, #8	; (adr r1, 108a0 <bt_init+0x428>)
   10898:	e9d1 0100 	ldrd	r0, r1, [r1]
   1089c:	e7c7      	b.n	1082e <bt_init+0x3b6>
   1089e:	bf00      	nop
   108a0:	02008890 	.word	0x02008890
   108a4:	20008000 	.word	0x20008000
   108a8:	200000d0 	.word	0x200000d0
   108ac:	20000100 	.word	0x20000100
   108b0:	0003c976 	.word	0x0003c976
   108b4:	0003ce5e 	.word	0x0003ce5e
   108b8:	000395c0 	.word	0x000395c0
   108bc:	02008810 	.word	0x02008810
   108c0:	0003ce31 	.word	0x0003ce31
   108c4:	0003c99d 	.word	0x0003c99d
	rp.info = (void *)rsp->data;
   108c8:	687b      	ldr	r3, [r7, #4]
   108ca:	68de      	ldr	r6, [r3, #12]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   108cc:	f8b6 3001 	ldrh.w	r3, [r6, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
   108d0:	2b03      	cmp	r3, #3
		return plat_str[platform];
   108d2:	bf96      	itet	ls
   108d4:	4a4f      	ldrls	r2, [pc, #316]	; (10a14 <bt_init+0x59c>)
	return "unknown";
   108d6:	4950      	ldrhi	r1, [pc, #320]	; (10a18 <bt_init+0x5a0>)
		return plat_str[platform];
   108d8:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   108dc:	46e8      	mov	r8, sp
   108de:	b08a      	sub	sp, #40	; 0x28
   108e0:	466a      	mov	r2, sp
   108e2:	484e      	ldr	r0, [pc, #312]	; (10a1c <bt_init+0x5a4>)
   108e4:	e9c2 1307 	strd	r1, r3, [r2, #28]
   108e8:	f240 3301 	movw	r3, #769	; 0x301
   108ec:	8493      	strh	r3, [r2, #36]	; 0x24
   108ee:	4b4c      	ldr	r3, [pc, #304]	; (10a20 <bt_init+0x5a8>)
   108f0:	e9c2 0405 	strd	r0, r4, [r2, #20]
   108f4:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
   108f8:	f842 3f10 	str.w	r3, [r2, #16]!
   108fc:	4849      	ldr	r0, [pc, #292]	; (10a24 <bt_init+0x5ac>)
   108fe:	f024 ffab 	bl	35858 <z_log_msg_static_create.constprop.0>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   10902:	f8b6 2001 	ldrh.w	r2, [r6, #1]
	LOG_INF("HW Variant: %s (0x%04x)",
   10906:	f8b6 3003 	ldrh.w	r3, [r6, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   1090a:	2a02      	cmp	r2, #2
   1090c:	46c5      	mov	sp, r8
   1090e:	d157      	bne.n	109c0 <bt_init+0x548>
	if (variant < ARRAY_SIZE(nordic_str)) {
   10910:	2b03      	cmp	r3, #3
   10912:	d855      	bhi.n	109c0 <bt_init+0x548>
		return nordic_str[variant];
   10914:	4a44      	ldr	r2, [pc, #272]	; (10a28 <bt_init+0x5b0>)
   10916:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Variant: %s (0x%04x)",
   1091a:	46e8      	mov	r8, sp
   1091c:	b08a      	sub	sp, #40	; 0x28
   1091e:	466a      	mov	r2, sp
   10920:	4842      	ldr	r0, [pc, #264]	; (10a2c <bt_init+0x5b4>)
   10922:	e9c2 1307 	strd	r1, r3, [r2, #28]
   10926:	f240 3301 	movw	r3, #769	; 0x301
   1092a:	8493      	strh	r3, [r2, #36]	; 0x24
   1092c:	4b3c      	ldr	r3, [pc, #240]	; (10a20 <bt_init+0x5a8>)
   1092e:	e9c2 0405 	strd	r0, r4, [r2, #20]
   10932:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
   10936:	f842 3f10 	str.w	r3, [r2, #16]!
   1093a:	483a      	ldr	r0, [pc, #232]	; (10a24 <bt_init+0x5ac>)
   1093c:	f024 ff8c 	bl	35858 <z_log_msg_static_create.constprop.0>
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   10940:	7973      	ldrb	r3, [r6, #5]
   10942:	f896 e006 	ldrb.w	lr, [r6, #6]
   10946:	f8b6 c007 	ldrh.w	ip, [r6, #7]
   1094a:	f8d6 0009 	ldr.w	r0, [r6, #9]
	if (variant < ARRAY_SIZE(var_str)) {
   1094e:	2b03      	cmp	r3, #3
   10950:	46c5      	mov	sp, r8
		return var_str[variant];
   10952:	bf96      	itet	ls
   10954:	4a36      	ldrls	r2, [pc, #216]	; (10a30 <bt_init+0x5b8>)
	return "unknown";
   10956:	4930      	ldrhi	r1, [pc, #192]	; (10a18 <bt_init+0x5a0>)
		return var_str[variant];
   10958:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   1095c:	466e      	mov	r6, sp
   1095e:	b08e      	sub	sp, #56	; 0x38
   10960:	466a      	mov	r2, sp
   10962:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 10a34 <bt_init+0x5bc>
   10966:	62d0      	str	r0, [r2, #44]	; 0x2c
   10968:	e9c2 1307 	strd	r1, r3, [r2, #28]
   1096c:	f240 3301 	movw	r3, #769	; 0x301
   10970:	8613      	strh	r3, [r2, #48]	; 0x30
   10972:	4b31      	ldr	r3, [pc, #196]	; (10a38 <bt_init+0x5c0>)
   10974:	482b      	ldr	r0, [pc, #172]	; (10a24 <bt_init+0x5ac>)
   10976:	e9c2 8405 	strd	r8, r4, [r2, #20]
   1097a:	e9c2 ec09 	strd	lr, ip, [r2, #36]	; 0x24
   1097e:	f244 41c0 	movw	r1, #17600	; 0x44c0
   10982:	f842 3f10 	str.w	r3, [r2, #16]!
   10986:	f024 ff67 	bl	35858 <z_log_msg_static_create.constprop.0>
   1098a:	46b5      	mov	sp, r6
	net_buf_unref(rsp);
   1098c:	6878      	ldr	r0, [r7, #4]
   1098e:	f01c ff67 	bl	2d860 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   10992:	1d3a      	adds	r2, r7, #4
   10994:	2100      	movs	r1, #0
   10996:	f64f 4002 	movw	r0, #64514	; 0xfc02
   1099a:	f006 f88b 	bl	16ab4 <bt_hci_cmd_send_sync>
	if (err) {
   1099e:	4680      	mov	r8, r0
   109a0:	b180      	cbz	r0, 109c4 <bt_init+0x54c>
		LOG_WRN("Failed to read supported vendor commands");
   109a2:	b088      	sub	sp, #32
   109a4:	466a      	mov	r2, sp
   109a6:	4b25      	ldr	r3, [pc, #148]	; (10a3c <bt_init+0x5c4>)
			LOG_WRN("Failed to read supported vendor features");
   109a8:	481e      	ldr	r0, [pc, #120]	; (10a24 <bt_init+0x5ac>)
   109aa:	e9c2 3405 	strd	r3, r4, [r2, #20]
   109ae:	2303      	movs	r3, #3
   109b0:	f842 3f10 	str.w	r3, [r2, #16]!
   109b4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   109b8:	f024 ff4e 	bl	35858 <z_log_msg_static_create.constprop.0>
   109bc:	46b5      	mov	sp, r6
			return;
   109be:	e75a      	b.n	10876 <bt_init+0x3fe>
		return "unknown";
   109c0:	4915      	ldr	r1, [pc, #84]	; (10a18 <bt_init+0x5a0>)
   109c2:	e7aa      	b.n	1091a <bt_init+0x4a2>
	rp.cmds = (void *)rsp->data;
   109c4:	f8d7 9004 	ldr.w	r9, [r7, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   109c8:	481d      	ldr	r0, [pc, #116]	; (10a40 <bt_init+0x5c8>)
   109ca:	f8d9 100c 	ldr.w	r1, [r9, #12]
   109ce:	2202      	movs	r2, #2
   109d0:	3101      	adds	r1, #1
   109d2:	f024 fdb0 	bl	35536 <memcpy>
	net_buf_unref(rsp);
   109d6:	4648      	mov	r0, r9
   109d8:	f01c ff42 	bl	2d860 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   109dc:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   109e0:	075b      	lsls	r3, r3, #29
   109e2:	f57f af48 	bpl.w	10876 <bt_init+0x3fe>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   109e6:	1d3a      	adds	r2, r7, #4
   109e8:	4641      	mov	r1, r8
   109ea:	f64f 4003 	movw	r0, #64515	; 0xfc03
   109ee:	f006 f861 	bl	16ab4 <bt_hci_cmd_send_sync>
		if (err) {
   109f2:	b118      	cbz	r0, 109fc <bt_init+0x584>
			LOG_WRN("Failed to read supported vendor features");
   109f4:	b088      	sub	sp, #32
   109f6:	466a      	mov	r2, sp
   109f8:	4b12      	ldr	r3, [pc, #72]	; (10a44 <bt_init+0x5cc>)
   109fa:	e7d5      	b.n	109a8 <bt_init+0x530>
		rp.feat = (void *)rsp->data;
   109fc:	687c      	ldr	r4, [r7, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   109fe:	4812      	ldr	r0, [pc, #72]	; (10a48 <bt_init+0x5d0>)
   10a00:	68e1      	ldr	r1, [r4, #12]
   10a02:	2201      	movs	r2, #1
   10a04:	4411      	add	r1, r2
   10a06:	f024 fd96 	bl	35536 <memcpy>
		net_buf_unref(rsp);
   10a0a:	4620      	mov	r0, r4
   10a0c:	f01c ff28 	bl	2d860 <net_buf_unref>
   10a10:	e731      	b.n	10876 <bt_init+0x3fe>
   10a12:	bf00      	nop
   10a14:	00039b94 	.word	0x00039b94
   10a18:	0003c3ab 	.word	0x0003c3ab
   10a1c:	0003c9c5 	.word	0x0003c9c5
   10a20:	01000005 	.word	0x01000005
   10a24:	000395c0 	.word	0x000395c0
   10a28:	00039b84 	.word	0x00039b84
   10a2c:	0003c9e2 	.word	0x0003c9e2
   10a30:	00039b74 	.word	0x00039b74
   10a34:	0003c9fe 	.word	0x0003c9fe
   10a38:	01000008 	.word	0x01000008
   10a3c:	0003ca2f 	.word	0x0003ca2f
   10a40:	200000b9 	.word	0x200000b9
   10a44:	0003ca5c 	.word	0x0003ca5c
   10a48:	200000b8 	.word	0x200000b8
   10a4c:	00000000 	.word	0x00000000

00010a50 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
   10a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
   10a54:	e9d0 350c 	ldrd	r3, r5, [r0, #48]	; 0x30
	start_to_address_actual_us =
   10a58:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
   10a5c:	195c      	adds	r4, r3, r5
	start_to_address_expected_us = EVENT_JITTER_US +
   10a5e:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
   10a60:	45a0      	cmp	r8, r4
{
   10a62:	460f      	mov	r7, r1
   10a64:	4616      	mov	r6, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
   10a66:	d819      	bhi.n	10a9c <ull_drift_ticks_get+0x4c>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
   10a68:	4d1d      	ldr	r5, [pc, #116]	; (10ae0 <ull_drift_ticks_get+0x90>)
   10a6a:	fba3 0105 	umull	r0, r1, r3, r5
   10a6e:	a31a      	add	r3, pc, #104	; (adr r3, 10ad8 <ull_drift_ticks_get+0x88>)
   10a70:	e9d3 2300 	ldrd	r2, r3, [r3]
   10a74:	f7ff fb94 	bl	101a0 <__aeabi_uldivmod>
   10a78:	4603      	mov	r3, r0
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
   10a7a:	eba4 0008 	sub.w	r0, r4, r8
   10a7e:	fba0 0105 	umull	r0, r1, r0, r5
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
   10a82:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
   10a86:	a314      	add	r3, pc, #80	; (adr r3, 10ad8 <ull_drift_ticks_get+0x88>)
   10a88:	e9d3 2300 	ldrd	r2, r3, [r3]
   10a8c:	f7ff fb88 	bl	101a0 <__aeabi_uldivmod>
   10a90:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
   10a94:	603c      	str	r4, [r7, #0]
		*ticks_drift_minus =
   10a96:	6030      	str	r0, [r6, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
   10a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
   10a9c:	f8df 9040 	ldr.w	r9, [pc, #64]	; 10ae0 <ull_drift_ticks_get+0x90>
   10aa0:	a30d      	add	r3, pc, #52	; (adr r3, 10ad8 <ull_drift_ticks_get+0x88>)
   10aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
   10aa6:	fba8 0109 	umull	r0, r1, r8, r9
   10aaa:	f7ff fb79 	bl	101a0 <__aeabi_uldivmod>
   10aae:	4604      	mov	r4, r0
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
   10ab0:	f105 0030 	add.w	r0, r5, #48	; 0x30
   10ab4:	a308      	add	r3, pc, #32	; (adr r3, 10ad8 <ull_drift_ticks_get+0x88>)
   10ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
   10aba:	fba0 0109 	umull	r0, r1, r0, r9
   10abe:	f7ff fb6f 	bl	101a0 <__aeabi_uldivmod>
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
   10ac2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
   10ac6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
   10aca:	603c      	str	r4, [r7, #0]
		*ticks_drift_minus =
   10acc:	6030      	str	r0, [r6, #0]
}
   10ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10ad2:	bf00      	nop
   10ad4:	f3af 8000 	nop.w
   10ad8:	1afd498d 	.word	0x1afd498d
   10adc:	00000007 	.word	0x00000007
   10ae0:	3b9aca00 	.word	0x3b9aca00
   10ae4:	00000000 	.word	0x00000000

00010ae8 <ll_adv_enable>:
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint8_t hci_err;
	uint32_t ret;

	if (!enable) {
   10ae8:	2800      	cmp	r0, #0
   10aea:	f000 813f 	beq.w	10d6c <ll_adv_enable+0x284>
{
   10aee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
   10af2:	4ccb      	ldr	r4, [pc, #812]	; (10e20 <ll_adv_enable+0x338>)
   10af4:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
   10af8:	f012 0501 	ands.w	r5, r2, #1
{
   10afc:	b08d      	sub	sp, #52	; 0x34
	if (!adv || adv->is_enabled) {
   10afe:	f040 8171 	bne.w	10de4 <ll_adv_enable+0x2fc>
	ull_filter_adv_update(lll->filter_policy);
   10b02:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
	lll->rl_idx = FILTER_IDX_NONE;
   10b06:	23ff      	movs	r3, #255	; 0xff
	ull_filter_adv_update(lll->filter_policy);
   10b08:	f000 0003 	and.w	r0, r0, #3
	lll->rl_idx = FILTER_IDX_NONE;
   10b0c:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	ull_filter_adv_update(lll->filter_policy);
   10b10:	f019 fb30 	bl	2a174 <ull_filter_adv_update>
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   10b14:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
   10b18:	0742      	lsls	r2, r0, #29
   10b1a:	d427      	bmi.n	10b6c <ll_adv_enable+0x84>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   10b1c:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   10b20:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   10b24:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   10b28:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   10b2c:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   10b2e:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		pdu_adv_to_update = pdu;
	}

	if (pdu_adv_to_update) {
   10b32:	b186      	cbz	r6, 10b56 <ll_adv_enable+0x6e>
		const uint8_t *adv_addr;

		adv_addr = ull_adv_pdu_update_addrs(adv, pdu_adv_to_update);
   10b34:	48ba      	ldr	r0, [pc, #744]	; (10e20 <ll_adv_enable+0x338>)
   10b36:	4631      	mov	r1, r6
   10b38:	f013 f96a 	bl	23e10 <ull_adv_pdu_update_addrs>

		/* In case the local IRK was not set or no match was
		 * found the fallback address was used instead, check
		 * that a valid address has been set.
		 */
		if (pdu_adv_to_update->tx_addr &&
   10b3c:	7833      	ldrb	r3, [r6, #0]
   10b3e:	065b      	lsls	r3, r3, #25
   10b40:	d505      	bpl.n	10b4e <ll_adv_enable+0x66>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
   10b42:	2106      	movs	r1, #6
   10b44:	f00e fc66 	bl	1f414 <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
   10b48:	2800      	cmp	r0, #0
   10b4a:	f000 814d 	beq.w	10de8 <ll_adv_enable+0x300>
		if ((pdu->type != PDU_ADV_TYPE_EXT_IND) ||
		    (pdu->adv_ext_ind.adv_mode & BT_HCI_LE_ADV_PROP_SCAN)) {
#else
		if (1) {
#endif
			ull_adv_pdu_update_addrs(adv, pdu_scan);
   10b4e:	48b4      	ldr	r0, [pc, #720]	; (10e20 <ll_adv_enable+0x338>)
   10b50:	4641      	mov	r1, r8
   10b52:	f013 f95d 	bl	23e10 <ull_adv_pdu_update_addrs>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   10b56:	7833      	ldrb	r3, [r6, #0]
   10b58:	f013 0f0e 	tst.w	r3, #14
   10b5c:	f040 809e 	bne.w	10c9c <ll_adv_enable+0x1b4>
		if (lll->conn) {
   10b60:	6a23      	ldr	r3, [r4, #32]
   10b62:	b193      	cbz	r3, 10b8a <ll_adv_enable+0xa2>
	return BT_HCI_ERR_CMD_DISALLOWED;
   10b64:	200c      	movs	r0, #12
}
   10b66:	b00d      	add	sp, #52	; 0x34
   10b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
   10b6c:	462a      	mov	r2, r5
   10b6e:	f104 016b 	add.w	r1, r4, #107	; 0x6b
   10b72:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   10b76:	f019 fc71 	bl	2a45c <ull_filter_rl_find>
		if (lll->rl_idx != FILTER_IDX_NONE) {
   10b7a:	28ff      	cmp	r0, #255	; 0xff
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
   10b7c:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
		if (lll->rl_idx != FILTER_IDX_NONE) {
   10b80:	d0cc      	beq.n	10b1c <ll_adv_enable+0x34>
			ull_filter_rpa_update(false);
   10b82:	4628      	mov	r0, r5
   10b84:	f019 fb10 	bl	2a1a8 <ull_filter_rpa_update>
   10b88:	e7c8      	b.n	10b1c <ll_adv_enable+0x34>
		link = ll_rx_link_alloc();
   10b8a:	f011 ffad 	bl	22ae8 <ll_rx_link_alloc>
		if (!link) {
   10b8e:	4681      	mov	r9, r0
   10b90:	2800      	cmp	r0, #0
   10b92:	f000 8137 	beq.w	10e04 <ll_adv_enable+0x31c>
		node_rx = ll_rx_alloc();
   10b96:	f011 ffb3 	bl	22b00 <ll_rx_alloc>
		if (!node_rx) {
   10b9a:	4682      	mov	sl, r0
   10b9c:	2800      	cmp	r0, #0
   10b9e:	f000 812e 	beq.w	10dfe <ll_adv_enable+0x316>
		conn = ll_conn_acquire();
   10ba2:	f013 fc1d 	bl	243e0 <ll_conn_acquire>
		if (!conn) {
   10ba6:	4605      	mov	r5, r0
   10ba8:	2800      	cmp	r0, #0
   10baa:	f000 812d 	beq.w	10e08 <ll_adv_enable+0x320>
		if (!conn_lll->link_tx_free) {
   10bae:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
		conn_lll->handle = 0xFFFF;
   10bb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10bb6:	852b      	strh	r3, [r5, #40]	; 0x28
		conn_lll = &conn->lll;
   10bb8:	f105 0b1c 	add.w	fp, r5, #28
		if (!conn_lll->link_tx_free) {
   10bbc:	2800      	cmp	r0, #0
   10bbe:	f000 8119 	beq.w	10df4 <ll_adv_enable+0x30c>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
   10bc2:	f105 027c 	add.w	r2, r5, #124	; 0x7c
   10bc6:	f105 0178 	add.w	r1, r5, #120	; 0x78
   10bca:	f00e fc2f 	bl	1f42c <memq_init>
			conn_lll->phy_tx = PHY_1M;
   10bce:	f8b5 3076 	ldrh.w	r3, [r5, #118]	; 0x76
   10bd2:	f423 63ef 	bic.w	r3, r3, #1912	; 0x778
   10bd6:	f023 0307 	bic.w	r3, r3, #7
   10bda:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   10bde:	f043 0301 	orr.w	r3, r3, #1
   10be2:	f8a5 3076 	strh.w	r3, [r5, #118]	; 0x76
		conn_lll->data_chan_sel = 0;
   10be6:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
   10bea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   10bee:	f063 037f 	orn	r3, r3, #127	; 0x7f
   10bf2:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
		conn_lll->sn = 0;
   10bf6:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   10bfa:	f023 0307 	bic.w	r3, r3, #7
   10bfe:	f885 308e 	strb.w	r3, [r5, #142]	; 0x8e
		conn_lll->periph.initiated = 0;
   10c02:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   10c06:	f023 0307 	bic.w	r3, r3, #7
		conn_lll->link_tx_free = NULL;
   10c0a:	2700      	movs	r7, #0
		conn_lll->periph.initiated = 0;
   10c0c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
		conn->apto_expire = 0U;
   10c10:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
   10c14:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
		ull_llcp_init(conn);
   10c18:	4628      	mov	r0, r5
		conn_lll->periph.window_widening_event_us = 0;
   10c1a:	e9c5 7712 	strd	r7, r7, [r5, #72]	; 0x48
		conn_lll->link_tx_free = NULL;
   10c1e:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
		conn_lll->packet_tx_head_len = 0;
   10c22:	f8a5 708c 	strh.w	r7, [r5, #140]	; 0x8c
		conn_lll->event_counter = 0;
   10c26:	866f      	strh	r7, [r5, #50]	; 0x32
		conn_lll->latency_prepare = 0;
   10c28:	f8c5 702e 	str.w	r7, [r5, #46]	; 0x2e
		conn_lll->data_chan_use = 0;
   10c2c:	f885 703b 	strb.w	r7, [r5, #59]	; 0x3b
		conn_lll->periph.window_size_prepare_us = 0;
   10c30:	652f      	str	r7, [r5, #80]	; 0x50
		conn->supervision_expire = 0;
   10c32:	f8a5 7186 	strh.w	r7, [r5, #390]	; 0x186
		conn->appto_expire = 0U;
   10c36:	f8a5 717c 	strh.w	r7, [r5, #380]	; 0x17c
		ull_llcp_init(conn);
   10c3a:	f015 fdff 	bl	2683c <ull_llcp_init>
		conn->llcp_terminate.reason_final = 0;
   10c3e:	f885 7148 	strb.w	r7, [r5, #328]	; 0x148
		conn->llcp_terminate.node_rx.hdr.link = link;
   10c42:	f8c5 914c 	str.w	r9, [r5, #332]	; 0x14c
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
   10c46:	f013 fe55 	bl	248f4 <ull_conn_default_phy_tx_get>
   10c4a:	f895 318c 	ldrb.w	r3, [r5, #396]	; 0x18c
   10c4e:	f360 0302 	bfi	r3, r0, #0, #3
   10c52:	f885 318c 	strb.w	r3, [r5, #396]	; 0x18c
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   10c56:	f013 fe53 	bl	24900 <ull_conn_default_phy_rx_get>
   10c5a:	f895 318c 	ldrb.w	r3, [r5, #396]	; 0x18c
   10c5e:	f360 03c5 	bfi	r3, r0, #3, #3
   10c62:	f885 318c 	strb.w	r3, [r5, #396]	; 0x18c
		conn->pause_rx_data = 0U;
   10c66:	f895 3178 	ldrb.w	r3, [r5, #376]	; 0x178
   10c6a:	f367 0341 	bfi	r3, r7, #1, #1
   10c6e:	f885 3178 	strb.w	r3, [r5, #376]	; 0x178
		ull_dle_init(conn, phy_in_use);
   10c72:	2101      	movs	r1, #1
   10c74:	4628      	mov	r0, r5
   10c76:	f014 fb87 	bl	25388 <ull_dle_init>
		ull_tx_q_init(&conn->tx_q);
   10c7a:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
   10c7e:	f015 fbc7 	bl	26410 <ull_tx_q_init>
		adv->node_rx_cc_free = node_rx;
   10c82:	e9c4 9a18 	strd	r9, sl, [r4, #96]	; 0x60
		lll->conn = conn_lll;
   10c86:	f8c4 b020 	str.w	fp, [r4, #32]
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
	hdr->disabled_cb = hdr->disabled_param = NULL;
   10c8a:	e9c5 7705 	strd	r7, r7, [r5, #20]
	hdr->ref = 0U;
   10c8e:	702f      	strb	r7, [r5, #0]

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
   10c90:	61ed      	str	r5, [r5, #28]
		err = lll_clock_wait();
   10c92:	f01a fb33 	bl	2b2fc <lll_clock_wait>
		if (err) {
   10c96:	2800      	cmp	r0, #0
   10c98:	f040 80a8 	bne.w	10dec <ll_adv_enable+0x304>
	uint8_t ch_map = lll->chan_map;
   10c9c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
   10ca0:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
   10ca2:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
   10ca6:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
	uint8_t ch_map = lll->chan_map;
   10caa:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
   10cae:	f00e fd47 	bl	1f740 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
   10cb2:	4602      	mov	r2, r0
   10cb4:	2800      	cmp	r0, #0
   10cb6:	d05b      	beq.n	10d70 <ll_adv_enable+0x288>
	uint16_t time_us = adv_time_get(pdu_adv, pdu_scan, adv_chn_cnt, phy,
   10cb8:	f898 1001 	ldrb.w	r1, [r8, #1]
   10cbc:	4630      	mov	r0, r6
   10cbe:	f012 fe73 	bl	239a8 <adv_time_get.constprop.0.isra.0>
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
   10cc2:	4958      	ldr	r1, [pc, #352]	; (10e24 <ll_adv_enable+0x33c>)
	uint16_t interval = adv->interval;
   10cc4:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
   10cc8:	2500      	movs	r5, #0
	adv->ull.ticks_prepare_to_start =
   10cca:	2331      	movs	r3, #49	; 0x31
   10ccc:	60a3      	str	r3, [r4, #8]
	hdr->disabled_cb = hdr->disabled_param = NULL;
   10cce:	e9c4 5505 	strd	r5, r5, [r4, #20]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
   10cd2:	a351      	add	r3, pc, #324	; (adr r3, 10e18 <ll_adv_enable+0x330>)
   10cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->ref = 0U;
   10cd8:	7025      	strb	r5, [r4, #0]
	adv->ull.ticks_active_to_start = 0;
   10cda:	6065      	str	r5, [r4, #4]
	adv->ull.ticks_preempt_to_start =
   10cdc:	60e5      	str	r5, [r4, #12]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
   10cde:	fba0 0101 	umull	r0, r1, r0, r1
   10ce2:	f7ff fa5d 	bl	101a0 <__aeabi_uldivmod>
   10ce6:	6120      	str	r0, [r4, #16]
	ticks_anchor = ticker_ticks_now_get();
   10ce8:	f00f fd84 	bl	207f4 <ticker_ticks_now_get>
	ticks_anchor += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);
   10cec:	f100 0809 	add.w	r8, r0, #9
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
   10cf0:	b93f      	cbnz	r7, 10d02 <ll_adv_enable+0x21a>
   10cf2:	7835      	ldrb	r5, [r6, #0]
   10cf4:	f005 050f 	and.w	r5, r5, #15
   10cf8:	f1a5 0501 	sub.w	r5, r5, #1
   10cfc:	fab5 f585 	clz	r5, r5
   10d00:	096d      	lsrs	r5, r5, #5
   10d02:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
				   (adv->ull.ticks_slot + ticks_slot_overhead),
   10d06:	6923      	ldr	r3, [r4, #16]
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
   10d08:	f365 0000 	bfi	r0, r5, #0, #1
	if (lll->is_hdcd) {
   10d0c:	f010 0501 	ands.w	r5, r0, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
   10d10:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	if (lll->is_hdcd) {
   10d14:	d033      	beq.n	10d7e <ll_adv_enable+0x296>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   10d16:	2000      	movs	r0, #0
   10d18:	4a43      	ldr	r2, [pc, #268]	; (10e28 <ll_adv_enable+0x340>)
   10d1a:	4f44      	ldr	r7, [pc, #272]	; (10e2c <ll_adv_enable+0x344>)
   10d1c:	9304      	str	r3, [sp, #16]
		ret_cb = TICKER_STATUS_BUSY;
   10d1e:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   10d20:	ae0b      	add	r6, sp, #44	; 0x2c
   10d22:	9301      	str	r3, [sp, #4]
   10d24:	9205      	str	r2, [sp, #20]
   10d26:	2103      	movs	r1, #3
   10d28:	e9cd 0002 	strd	r0, r0, [sp, #8]
   10d2c:	9608      	str	r6, [sp, #32]
   10d2e:	9406      	str	r4, [sp, #24]
   10d30:	4643      	mov	r3, r8
   10d32:	9000      	str	r0, [sp, #0]
   10d34:	9707      	str	r7, [sp, #28]
   10d36:	462a      	mov	r2, r5
		ret_cb = TICKER_STATUS_BUSY;
   10d38:	950b      	str	r5, [sp, #44]	; 0x2c
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   10d3a:	f00f fc4b 	bl	205d4 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
   10d3e:	4631      	mov	r1, r6
   10d40:	f011 ff98 	bl	22c74 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
   10d44:	b9a0      	cbnz	r0, 10d70 <ll_adv_enable+0x288>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   10d46:	493a      	ldr	r1, [pc, #232]	; (10e30 <ll_adv_enable+0x348>)
   10d48:	9105      	str	r1, [sp, #20]
   10d4a:	f24a 33d8 	movw	r3, #41944	; 0xa3d8
   10d4e:	9300      	str	r3, [sp, #0]
   10d50:	e9cd 0003 	strd	r0, r0, [sp, #12]
   10d54:	e9cd 0001 	strd	r0, r0, [sp, #4]
   10d58:	9707      	str	r7, [sp, #28]
   10d5a:	9608      	str	r6, [sp, #32]
   10d5c:	9406      	str	r4, [sp, #24]
   10d5e:	4643      	mov	r3, r8
   10d60:	2201      	movs	r2, #1
   10d62:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
   10d64:	950b      	str	r5, [sp, #44]	; 0x2c
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   10d66:	f00f fc35 	bl	205d4 <ticker_start>
   10d6a:	e02e      	b.n	10dca <ll_adv_enable+0x2e2>
		return disable(handle);
   10d6c:	f012 bd6c 	b.w	23848 <disable.constprop.0>
	if (adv->lll.conn) {
   10d70:	6a23      	ldr	r3, [r4, #32]
   10d72:	2b00      	cmp	r3, #0
   10d74:	f43f aef6 	beq.w	10b64 <ll_adv_enable+0x7c>
		conn_release(adv);
   10d78:	f012 fd24 	bl	237c4 <conn_release.constprop.0>
   10d7c:	e6f2      	b.n	10b64 <ll_adv_enable+0x7c>
		ll_adv_ticker_ext[handle].ticks_slot_window =
   10d7e:	4a2d      	ldr	r2, [pc, #180]	; (10e34 <ll_adv_enable+0x34c>)
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   10d80:	482d      	ldr	r0, [pc, #180]	; (10e38 <ll_adv_enable+0x350>)
		ret = ticker_start_ext(
   10d82:	9304      	str	r3, [sp, #16]
			ULL_ADV_RANDOM_DELAY + ticks_slot;
   10d84:	f203 1347 	addw	r3, r3, #327	; 0x147
		ret = ticker_start_ext(
   10d88:	9406      	str	r4, [sp, #24]
   10d8a:	9502      	str	r5, [sp, #8]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   10d8c:	2191      	movs	r1, #145	; 0x91
		ll_adv_ticker_ext[handle].ticks_slot_window =
   10d8e:	6013      	str	r3, [r2, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   10d90:	fba7 0300 	umull	r0, r3, r7, r0
   10d94:	fb01 3107 	mla	r1, r1, r7, r3
		ret = ticker_start_ext(
   10d98:	4b24      	ldr	r3, [pc, #144]	; (10e2c <ll_adv_enable+0x344>)
   10d9a:	9307      	str	r3, [sp, #28]
   10d9c:	4b22      	ldr	r3, [pc, #136]	; (10e28 <ll_adv_enable+0x340>)
   10d9e:	9305      	str	r3, [sp, #20]
   10da0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10da4:	9209      	str	r2, [sp, #36]	; 0x24
		ret_cb = TICKER_STATUS_BUSY;
   10da6:	2702      	movs	r7, #2
		ret = ticker_start_ext(
   10da8:	9303      	str	r3, [sp, #12]
   10daa:	ae0b      	add	r6, sp, #44	; 0x2c
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   10dac:	a31a      	add	r3, pc, #104	; (adr r3, 10e18 <ll_adv_enable+0x330>)
   10dae:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret_cb = TICKER_STATUS_BUSY;
   10db2:	970b      	str	r7, [sp, #44]	; 0x2c
		ret = ticker_start_ext(
   10db4:	9608      	str	r6, [sp, #32]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   10db6:	f7ff f9f3 	bl	101a0 <__aeabi_uldivmod>
		ret = ticker_start_ext(
   10dba:	4643      	mov	r3, r8
   10dbc:	e9cd 5000 	strd	r5, r0, [sp]
   10dc0:	463a      	mov	r2, r7
   10dc2:	4628      	mov	r0, r5
   10dc4:	2103      	movs	r1, #3
   10dc6:	f00f fbaf 	bl	20528 <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
   10dca:	4631      	mov	r1, r6
   10dcc:	f011 ff52 	bl	22c74 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
   10dd0:	2800      	cmp	r0, #0
   10dd2:	d1cd      	bne.n	10d70 <ll_adv_enable+0x288>
	adv->is_enabled = 1;
   10dd4:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
		ull_filter_adv_scan_state_cb(BIT(0));
   10dd8:	2001      	movs	r0, #1
	adv->is_enabled = 1;
   10dda:	4303      	orrs	r3, r0
   10ddc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
		ull_filter_adv_scan_state_cb(BIT(0));
   10de0:	f019 f9aa 	bl	2a138 <ull_filter_adv_scan_state_cb>
			return 0;
   10de4:	2000      	movs	r0, #0
   10de6:	e6be      	b.n	10b66 <ll_adv_enable+0x7e>
			return BT_HCI_ERR_INVALID_PARAM;
   10de8:	2012      	movs	r0, #18
   10dea:	e6bc      	b.n	10b66 <ll_adv_enable+0x7e>
			conn_release(adv);
   10dec:	f012 fcea 	bl	237c4 <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
   10df0:	2003      	movs	r0, #3
   10df2:	e6b8      	b.n	10b66 <ll_adv_enable+0x7e>
			conn_lll->link_tx_free = &conn_lll->link_tx;
   10df4:	f105 0080 	add.w	r0, r5, #128	; 0x80
   10df8:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
   10dfc:	e6e1      	b.n	10bc2 <ll_adv_enable+0xda>
			ll_rx_link_release(link);
   10dfe:	4648      	mov	r0, r9
   10e00:	f011 fe78 	bl	22af4 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   10e04:	2007      	movs	r0, #7
   10e06:	e6ae      	b.n	10b66 <ll_adv_enable+0x7e>
			ll_rx_release(node_rx);
   10e08:	4650      	mov	r0, sl
   10e0a:	f011 fe7f 	bl	22b0c <ll_rx_release>
			ll_rx_link_release(link);
   10e0e:	4648      	mov	r0, r9
   10e10:	f011 fe70 	bl	22af4 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   10e14:	e7f6      	b.n	10e04 <ll_adv_enable+0x31c>
   10e16:	bf00      	nop
   10e18:	1afd498d 	.word	0x1afd498d
   10e1c:	00000007 	.word	0x00000007
   10e20:	200025ec 	.word	0x200025ec
   10e24:	3b9aca00 	.word	0x3b9aca00
   10e28:	00023a25 	.word	0x00023a25
   10e2c:	00022209 	.word	0x00022209
   10e30:	00023559 	.word	0x00023559
   10e34:	200025e0 	.word	0x200025e0
   10e38:	84e72a00 	.word	0x84e72a00
   10e3c:	00000000 	.word	0x00000000

00010e40 <ull_adv_time_update>:
{
   10e40:	b570      	push	{r4, r5, r6, lr}
	chan_map = lll->chan_map;
   10e42:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
   10e46:	b08a      	sub	sp, #40	; 0x28
	chan_map = lll->chan_map;
   10e48:	f3c3 0342 	ubfx	r3, r3, #1, #3
{
   10e4c:	460d      	mov	r5, r1
   10e4e:	4604      	mov	r4, r0
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   10e50:	2101      	movs	r1, #1
   10e52:	f10d 0023 	add.w	r0, sp, #35	; 0x23
{
   10e56:	4616      	mov	r6, r2
	chan_map = lll->chan_map;
   10e58:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   10e5c:	f00e fc70 	bl	1f740 <util_ones_count_get>
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
   10e60:	7871      	ldrb	r1, [r6, #1]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   10e62:	4602      	mov	r2, r0
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
   10e64:	4628      	mov	r0, r5
   10e66:	f012 fd9f 	bl	239a8 <adv_time_get.constprop.0.isra.0>
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
   10e6a:	491d      	ldr	r1, [pc, #116]	; (10ee0 <ull_adv_time_update+0xa0>)
   10e6c:	a31a      	add	r3, pc, #104	; (adr r3, 10ed8 <ull_adv_time_update+0x98>)
   10e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10e72:	fba0 0101 	umull	r0, r1, r0, r1
   10e76:	f7ff f993 	bl	101a0 <__aeabi_uldivmod>
	if (adv->ull.ticks_slot > time_ticks) {
   10e7a:	6923      	ldr	r3, [r4, #16]
   10e7c:	4298      	cmp	r0, r3
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
   10e7e:	4605      	mov	r5, r0
	if (adv->ull.ticks_slot > time_ticks) {
   10e80:	d221      	bcs.n	10ec6 <ull_adv_time_update+0x86>
		ticks_minus = adv->ull.ticks_slot - time_ticks;
   10e82:	1a1b      	subs	r3, r3, r0
		ticks_plus = 0U;
   10e84:	2200      	movs	r2, #0
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   10e86:	9201      	str	r2, [sp, #4]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   10e88:	4a16      	ldr	r2, [pc, #88]	; (10ee4 <ull_adv_time_update+0xa4>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   10e8a:	9302      	str	r3, [sp, #8]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   10e8c:	4b16      	ldr	r3, [pc, #88]	; (10ee8 <ull_adv_time_update+0xa8>)
   10e8e:	1aa2      	subs	r2, r4, r2
   10e90:	fba3 3202 	umull	r3, r2, r3, r2
	ret_cb = TICKER_STATUS_BUSY;
   10e94:	2102      	movs	r1, #2
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   10e96:	0992      	lsrs	r2, r2, #6
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   10e98:	2300      	movs	r3, #0
   10e9a:	440a      	add	r2, r1
   10e9c:	ae09      	add	r6, sp, #36	; 0x24
	ret_cb = TICKER_STATUS_BUSY;
   10e9e:	9109      	str	r1, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   10ea0:	4912      	ldr	r1, [pc, #72]	; (10eec <ull_adv_time_update+0xac>)
   10ea2:	9105      	str	r1, [sp, #20]
   10ea4:	e9cd 3303 	strd	r3, r3, [sp, #12]
   10ea8:	2103      	movs	r1, #3
   10eaa:	b2d2      	uxtb	r2, r2
   10eac:	9606      	str	r6, [sp, #24]
   10eae:	9300      	str	r3, [sp, #0]
   10eb0:	4618      	mov	r0, r3
   10eb2:	f00f fc01 	bl	206b8 <ticker_update>
	ret = ull_ticker_status_take(ret, &ret_cb);
   10eb6:	4631      	mov	r1, r6
   10eb8:	f011 fedc 	bl	22c74 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
   10ebc:	b938      	cbnz	r0, 10ece <ull_adv_time_update+0x8e>
	adv->ull.ticks_slot = time_ticks;
   10ebe:	6125      	str	r5, [r4, #16]
		return BT_HCI_ERR_SUCCESS;
   10ec0:	2000      	movs	r0, #0
}
   10ec2:	b00a      	add	sp, #40	; 0x28
   10ec4:	bd70      	pop	{r4, r5, r6, pc}
	} else if (adv->ull.ticks_slot < time_ticks) {
   10ec6:	d9fb      	bls.n	10ec0 <ull_adv_time_update+0x80>
		ticks_plus = time_ticks - adv->ull.ticks_slot;
   10ec8:	1ac2      	subs	r2, r0, r3
		ticks_minus = 0U;
   10eca:	2300      	movs	r3, #0
   10ecc:	e7db      	b.n	10e86 <ull_adv_time_update+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
   10ece:	200c      	movs	r0, #12
}
   10ed0:	b00a      	add	sp, #40	; 0x28
   10ed2:	bd70      	pop	{r4, r5, r6, pc}
   10ed4:	f3af 8000 	nop.w
   10ed8:	1afd498d 	.word	0x1afd498d
   10edc:	00000007 	.word	0x00000007
   10ee0:	3b9aca00 	.word	0x3b9aca00
   10ee4:	200025ec 	.word	0x200025ec
   10ee8:	8d3dcb09 	.word	0x8d3dcb09
   10eec:	00022209 	.word	0x00022209

00010ef0 <ull_conn_update_ticker.constprop.0>:
	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;

	return event_counter;
}
static void ull_conn_update_ticker(struct ll_conn *conn,
   10ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ef4:	4605      	mov	r5, r0
   10ef6:	b08b      	sub	sp, #44	; 0x2c
   10ef8:	468b      	mov	fp, r1
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* disable ticker job, in order to chain stop and start
	 * to avoid RTC being stopped if no tickers active.
	 */
	uint32_t mayfly_was_enabled =
		mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW);
   10efa:	2001      	movs	r0, #1
   10efc:	2102      	movs	r1, #2
static void ull_conn_update_ticker(struct ll_conn *conn,
   10efe:	469a      	mov	sl, r3
   10f00:	4614      	mov	r4, r2
		mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW);
   10f02:	f01c fa2f 	bl	2d364 <mayfly_is_enabled>

	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0U);
   10f06:	2200      	movs	r2, #0
   10f08:	2102      	movs	r1, #2
		mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW);
   10f0a:	4681      	mov	r9, r0
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0U);
   10f0c:	2001      	movs	r0, #1
   10f0e:	f00e fadd 	bl	1f4cc <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   10f12:	4939      	ldr	r1, [pc, #228]	; (10ff8 <ull_conn_update_ticker.constprop.0+0x108>)
   10f14:	f44f 72cc 	mov.w	r2, #408	; 0x198
   10f18:	4628      	mov	r0, r5
   10f1a:	f00e fa67 	bl	1f3ec <mem_index_get>
#endif /* CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO */

	/* start periph/central with new timings */
	uint8_t ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   10f1e:	1cc6      	adds	r6, r0, #3
   10f20:	b2f6      	uxtb	r6, r6
	uint32_t ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   10f22:	4b36      	ldr	r3, [pc, #216]	; (10ffc <ull_conn_update_ticker.constprop.0+0x10c>)
   10f24:	9500      	str	r5, [sp, #0]
   10f26:	4632      	mov	r2, r6
   10f28:	2101      	movs	r1, #1
   10f2a:	2000      	movs	r0, #0
   10f2c:	f00f fbdc 	bl	206e8 <ticker_stop>
				    ticker_id_conn, ticker_stop_conn_op_cb, (void *)conn);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10f30:	f010 0ffd 	tst.w	r0, #253	; 0xfd
   10f34:	d00c      	beq.n	10f50 <ull_conn_update_ticker.constprop.0+0x60>
   10f36:	4a32      	ldr	r2, [pc, #200]	; (11000 <ull_conn_update_ticker.constprop.0+0x110>)
   10f38:	4932      	ldr	r1, [pc, #200]	; (11004 <ull_conn_update_ticker.constprop.0+0x114>)
   10f3a:	4833      	ldr	r0, [pc, #204]	; (11008 <ull_conn_update_ticker.constprop.0+0x118>)
   10f3c:	f641 731a 	movw	r3, #7962	; 0x1f1a
   10f40:	f022 fa6a 	bl	33418 <assert_print>
   10f44:	4040      	eors	r0, r0
   10f46:	f380 8811 	msr	BASEPRI, r0
   10f4a:	f04f 0003 	mov.w	r0, #3
   10f4e:	df02      	svc	2
		  (ticker_status == TICKER_STATUS_BUSY));
	ticker_status = ticker_start(
		TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH, ticker_id_conn, ticks_at_expire,
		ticks_win_offset, HAL_TICKER_US_TO_TICKS(periodic_us),
   10f50:	4b2e      	ldr	r3, [pc, #184]	; (1100c <ull_conn_update_ticker.constprop.0+0x11c>)
   10f52:	fba4 4803 	umull	r4, r8, r4, r3
   10f56:	4620      	mov	r0, r4
   10f58:	a325      	add	r3, pc, #148	; (adr r3, 10ff0 <ull_conn_update_ticker.constprop.0+0x100>)
   10f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   10f5e:	4641      	mov	r1, r8
   10f60:	f7ff f91e 	bl	101a0 <__aeabi_uldivmod>
	ticker_status = ticker_start(
   10f64:	9508      	str	r5, [sp, #32]
   10f66:	9506      	str	r5, [sp, #24]
   10f68:	692b      	ldr	r3, [r5, #16]
   10f6a:	9304      	str	r3, [sp, #16]
		HAL_TICKER_REMAINDER(periodic_us),
   10f6c:	4b28      	ldr	r3, [pc, #160]	; (11010 <ull_conn_update_ticker.constprop.0+0x120>)
   10f6e:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
   10f72:	fba7 3103 	umull	r3, r1, r7, r3
   10f76:	1ae0      	subs	r0, r4, r3
	ticker_status = ticker_start(
   10f78:	4b26      	ldr	r3, [pc, #152]	; (11014 <ull_conn_update_ticker.constprop.0+0x124>)
   10f7a:	9307      	str	r3, [sp, #28]
		HAL_TICKER_REMAINDER(periodic_us),
   10f7c:	f04f 0207 	mov.w	r2, #7
	ticker_status = ticker_start(
   10f80:	4b25      	ldr	r3, [pc, #148]	; (11018 <ull_conn_update_ticker.constprop.0+0x128>)
   10f82:	9305      	str	r3, [sp, #20]
		HAL_TICKER_REMAINDER(periodic_us),
   10f84:	fb02 1107 	mla	r1, r2, r7, r1
	ticker_status = ticker_start(
   10f88:	f64f 73fe 	movw	r3, #65534	; 0xfffe
		HAL_TICKER_REMAINDER(periodic_us),
   10f8c:	eb68 0101 	sbc.w	r1, r8, r1
	ticker_status = ticker_start(
   10f90:	9303      	str	r3, [sp, #12]
		HAL_TICKER_REMAINDER(periodic_us),
   10f92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10f96:	2300      	movs	r3, #0
   10f98:	f7ff f902 	bl	101a0 <__aeabi_uldivmod>
	ticker_status = ticker_start(
   10f9c:	f8cd b000 	str.w	fp, [sp]
   10fa0:	e9cd 7001 	strd	r7, r0, [sp, #4]
   10fa4:	4653      	mov	r3, sl
   10fa6:	4632      	mov	r2, r6
   10fa8:	2101      	movs	r1, #1
   10faa:	2000      	movs	r0, #0
   10fac:	f00f fb12 	bl	205d4 <ticker_start>
		ull_periph_ticker_cb,
#else
		ull_central_ticker_cb,
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CENTRAL */
		conn, ticker_start_conn_op_cb, (void *)conn);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10fb0:	f010 0ffd 	tst.w	r0, #253	; 0xfd
   10fb4:	d00c      	beq.n	10fd0 <ull_conn_update_ticker.constprop.0+0xe0>
   10fb6:	4a12      	ldr	r2, [pc, #72]	; (11000 <ull_conn_update_ticker.constprop.0+0x110>)
   10fb8:	4912      	ldr	r1, [pc, #72]	; (11004 <ull_conn_update_ticker.constprop.0+0x114>)
   10fba:	4813      	ldr	r0, [pc, #76]	; (11008 <ull_conn_update_ticker.constprop.0+0x118>)
   10fbc:	f641 732f 	movw	r3, #7983	; 0x1f2f
   10fc0:	f022 fa2a 	bl	33418 <assert_print>
   10fc4:	4040      	eors	r0, r0
   10fc6:	f380 8811 	msr	BASEPRI, r0
   10fca:	f04f 0003 	mov.w	r0, #3
   10fce:	df02      	svc	2
		  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* enable ticker job, if disabled in this function */
	if (mayfly_was_enabled) {
   10fd0:	f1b9 0f00 	cmp.w	r9, #0
   10fd4:	d102      	bne.n	10fdc <ull_conn_update_ticker.constprop.0+0xec>
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1U);
	}
#endif /* CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO */
}
   10fd6:	b00b      	add	sp, #44	; 0x2c
   10fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1U);
   10fdc:	2201      	movs	r2, #1
   10fde:	2102      	movs	r1, #2
   10fe0:	4610      	mov	r0, r2
}
   10fe2:	b00b      	add	sp, #44	; 0x2c
   10fe4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1U);
   10fe8:	f00e ba70 	b.w	1f4cc <mayfly_enable>
   10fec:	f3af 8000 	nop.w
   10ff0:	1afd498d 	.word	0x1afd498d
   10ff4:	00000007 	.word	0x00000007
   10ff8:	200016c0 	.word	0x200016c0
   10ffc:	00024389 	.word	0x00024389
   11000:	0003a650 	.word	0x0003a650
   11004:	0003a714 	.word	0x0003a714
   11008:	00039f74 	.word	0x00039f74
   1100c:	3b9aca00 	.word	0x3b9aca00
   11010:	1afd498d 	.word	0x1afd498d
   11014:	00024331 	.word	0x00024331
   11018:	000295a9 	.word	0x000295a9
   1101c:	00000000 	.word	0x00000000

00011020 <ull_conn_update_parameters>:

void ull_conn_update_parameters(struct ll_conn *conn, uint8_t is_cu_proc, uint8_t win_size,
				uint16_t win_offset_us, uint16_t interval, uint16_t latency,
				uint16_t timeout, uint16_t instant)
{
   11020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t lazy = conn->llcp.prep.lazy;
   11024:	f8b0 9110 	ldrh.w	r9, [r0, #272]	; 0x110
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   11028:	8e46      	ldrh	r6, [r0, #50]	; 0x32
   1102a:	f8b0 b02e 	ldrh.w	fp, [r0, #46]	; 0x2e
	event_counter = ull_conn_event_counter(conn);

	instant_latency = (event_counter - instant) & 0xFFFF;


	ticks_at_expire = conn->llcp.prep.ticks_at_expire;
   1102e:	f8d0 710c 	ldr.w	r7, [r0, #268]	; 0x10c
{
   11032:	b087      	sub	sp, #28
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   11034:	444e      	add	r6, r9
{
   11036:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
   1103a:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
   1103e:	9101      	str	r1, [sp, #4]
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   11040:	445e      	add	r6, fp
   11042:	b2b6      	uxth	r6, r6
{
   11044:	e9cd 2304 	strd	r2, r3, [sp, #16]
	instant_latency = (event_counter - instant) & 0xFFFF;
   11048:	1b72      	subs	r2, r6, r5
   1104a:	b292      	uxth	r2, r2

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
	/* restore to normal prepare */
	if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
   1104c:	6883      	ldr	r3, [r0, #8]
	instant_latency = (event_counter - instant) & 0xFFFF;
   1104e:	9200      	str	r2, [sp, #0]
{
   11050:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
   11054:	9202      	str	r2, [sp, #8]
	if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
   11056:	2b00      	cmp	r3, #0
{
   11058:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   1105c:	9203      	str	r2, [sp, #12]
   1105e:	4604      	mov	r4, r0
	if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
   11060:	da09      	bge.n	11076 <ull_conn_update_parameters+0x56>
		uint32_t ticks_prepare_to_start =
   11062:	68c1      	ldr	r1, [r0, #12]
   11064:	6842      	ldr	r2, [r0, #4]
			MAX(conn->ull.ticks_active_to_start, conn->ull.ticks_preempt_to_start);

		conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
   11066:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1106a:	4291      	cmp	r1, r2
   1106c:	bf2c      	ite	cs
   1106e:	187f      	addcs	r7, r7, r1
   11070:	18bf      	addcc	r7, r7, r2
   11072:	6083      	str	r3, [r0, #8]

		ticks_at_expire -= (conn->ull.ticks_prepare_to_start - ticks_prepare_to_start);
   11074:	1aff      	subs	r7, r7, r3
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

	/* compensate for instant_latency due to laziness */
	conn_interval_old = instant_latency * lll->interval;
   11076:	9a00      	ldr	r2, [sp, #0]
   11078:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   1107a:	fb13 f302 	smulbb	r3, r3, r2
   1107e:	b29b      	uxth	r3, r3
	latency_upd = conn_interval_old / interval;
   11080:	fbb3 f2f8 	udiv	r2, r3, r8
	conn_interval_new = latency_upd * interval;
   11084:	fb18 f002 	smulbb	r0, r8, r2
   11088:	b280      	uxth	r0, r0
	if (conn_interval_new > conn_interval_old) {
   1108a:	4283      	cmp	r3, r0
	latency_upd = conn_interval_old / interval;
   1108c:	fa1f fa82 	uxth.w	sl, r2
	if (conn_interval_new > conn_interval_old) {
   11090:	d25a      	bcs.n	11148 <ull_conn_update_parameters+0x128>
		ticks_at_expire += HAL_TICKER_US_TO_TICKS((conn_interval_new - conn_interval_old) *
   11092:	1ac0      	subs	r0, r0, r3
   11094:	f240 42e2 	movw	r2, #1250	; 0x4e2
   11098:	495b      	ldr	r1, [pc, #364]	; (11208 <ull_conn_update_parameters+0x1e8>)
   1109a:	fb02 f000 	mul.w	r0, r2, r0
   1109e:	fba0 0101 	umull	r0, r1, r0, r1
   110a2:	a357      	add	r3, pc, #348	; (adr r3, 11200 <ull_conn_update_parameters+0x1e0>)
   110a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   110a8:	f7ff f87a 	bl	101a0 <__aeabi_uldivmod>
   110ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   110b0:	4407      	add	r7, r0
	} else {
		ticks_at_expire -= HAL_TICKER_US_TO_TICKS((conn_interval_old - conn_interval_new) *
							  CONN_INT_UNIT_US);
	}

	lll->latency_prepare += conn->llcp.prep.lazy;
   110b2:	44d9      	add	r9, fp

	/* calculate the window widening and interval */
	conn_interval_us = interval * CONN_INT_UNIT_US;
	periodic_us = conn_interval_us;

	switch (lll->role) {
   110b4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
	lll->latency_prepare -= (instant_latency - latency_upd);
   110b8:	444d      	add	r5, r9
   110ba:	1bad      	subs	r5, r5, r6
   110bc:	4455      	add	r5, sl
	conn_interval_us = interval * CONN_INT_UNIT_US;
   110be:	f240 46e2 	movw	r6, #1250	; 0x4e2
	switch (lll->role) {
   110c2:	09db      	lsrs	r3, r3, #7
	lll->latency_prepare -= (instant_latency - latency_upd);
   110c4:	85e5      	strh	r5, [r4, #46]	; 0x2e
	conn_interval_us = interval * CONN_INT_UNIT_US;
   110c6:	fb06 f508 	mul.w	r5, r6, r8
	switch (lll->role) {
   110ca:	d14e      	bne.n	1116a <ull_conn_update_parameters+0x14a>
		 */
		ticks_win_offset += 1U;
		break;
#endif /*CONFIG_BT_CENTRAL */
	default:
		LL_ASSERT(0);
   110cc:	4a4f      	ldr	r2, [pc, #316]	; (1120c <ull_conn_update_parameters+0x1ec>)
   110ce:	4950      	ldr	r1, [pc, #320]	; (11210 <ull_conn_update_parameters+0x1f0>)
   110d0:	4850      	ldr	r0, [pc, #320]	; (11214 <ull_conn_update_parameters+0x1f4>)
   110d2:	f641 73a5 	movw	r3, #8101	; 0x1fa5
   110d6:	f022 f99f 	bl	33418 <assert_print>
   110da:	4040      	eors	r0, r0
   110dc:	f380 8811 	msr	BASEPRI, r0
   110e0:	f04f 0003 	mov.w	r0, #3
   110e4:	df02      	svc	2
	uint32_t ticks_win_offset = 0U;
   110e6:	2600      	movs	r6, #0
	periodic_us = conn_interval_us;
   110e8:	46a9      	mov	r9, r5
		break;
	}

	lll->interval = interval;
	lll->latency = latency;
   110ea:	9b02      	ldr	r3, [sp, #8]
   110ec:	85a3      	strh	r3, [r4, #44]	; 0x2c

	conn->supervision_timeout = timeout;
   110ee:	9b03      	ldr	r3, [sp, #12]
   110f0:	f8a4 3184 	strh.w	r3, [r4, #388]	; 0x184
	ull_cp_prt_reload_set(conn, conn_interval_us);
   110f4:	4629      	mov	r1, r5
   110f6:	4620      	mov	r0, r4
	lll->interval = interval;
   110f8:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
	ull_cp_prt_reload_set(conn, conn_interval_us);
   110fc:	f015 fc14 	bl	26928 <ull_cp_prt_reload_set>

#if defined(CONFIG_BT_CTLR_LE_PING)
	/* APTO in no. of connection events */
	conn->apto_reload = RADIO_CONN_EVENTS((30U * 1000U * 1000U), conn_interval_us);
   11100:	4b45      	ldr	r3, [pc, #276]	; (11218 <ull_conn_update_parameters+0x1f8>)
	/* Dispatch LE Ping PDU 6 connection events (that peer would
	 * listen to) before 30s timeout
	 * TODO: "peer listens to" is greater than 30s due to latency
	 */
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6U)) ?
   11102:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
	conn->apto_reload = RADIO_CONN_EVENTS((30U * 1000U * 1000U), conn_interval_us);
   11104:	442b      	add	r3, r5
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6U)) ?
   11106:	1d88      	adds	r0, r1, #6
	conn->apto_reload = RADIO_CONN_EVENTS((30U * 1000U * 1000U), conn_interval_us);
   11108:	fbb3 f3f5 	udiv	r3, r3, r5
   1110c:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6U)) ?
   1110e:	4290      	cmp	r0, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30U * 1000U * 1000U), conn_interval_us);
   11110:	f8a4 217e 	strh.w	r2, [r4, #382]	; 0x17e
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6U)) ?
   11114:	d202      	bcs.n	1111c <ull_conn_update_parameters+0xfc>
					   (conn->apto_reload - (lll->latency + 6U)) :
   11116:	1a52      	subs	r2, r2, r1
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6U)) ?
   11118:	3a06      	subs	r2, #6
   1111a:	b292      	uxth	r2, r2
					   conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

	if (is_cu_proc) {
   1111c:	9b01      	ldr	r3, [sp, #4]
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6U)) ?
   1111e:	f8a4 217a 	strh.w	r2, [r4, #378]	; 0x17a
	if (is_cu_proc) {
   11122:	b113      	cbz	r3, 1112a <ull_conn_update_parameters+0x10a>
		conn->supervision_expire = 0U;
   11124:	2300      	movs	r3, #0
   11126:	f8a4 3186 	strh.w	r3, [r4, #390]	; 0x186
	}

	/* Update ACL ticker */
	ull_conn_update_ticker(conn, ticks_win_offset, ticks_slot_overhead, periodic_us,
   1112a:	463b      	mov	r3, r7
   1112c:	464a      	mov	r2, r9
   1112e:	4631      	mov	r1, r6
   11130:	4620      	mov	r0, r4
   11132:	f7ff fedd 	bl	10ef0 <ull_conn_update_ticker.constprop.0>
			       ticks_at_expire);
	/* Signal that the prepare needs to be canceled */
	conn->cancel_prepare = 1U;
   11136:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
   1113a:	f043 0301 	orr.w	r3, r3, #1
   1113e:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
}
   11142:	b007      	add	sp, #28
   11144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ticks_at_expire -= HAL_TICKER_US_TO_TICKS((conn_interval_old - conn_interval_new) *
   11148:	fb08 3112 	mls	r1, r8, r2, r3
   1114c:	482e      	ldr	r0, [pc, #184]	; (11208 <ull_conn_update_parameters+0x1e8>)
   1114e:	f240 43e2 	movw	r3, #1250	; 0x4e2
   11152:	b289      	uxth	r1, r1
   11154:	fb03 f101 	mul.w	r1, r3, r1
   11158:	fba1 0100 	umull	r0, r1, r1, r0
   1115c:	a328      	add	r3, pc, #160	; (adr r3, 11200 <ull_conn_update_parameters+0x1e0>)
   1115e:	e9d3 2300 	ldrd	r2, r3, [r3]
   11162:	f7ff f81d 	bl	101a0 <__aeabi_uldivmod>
   11166:	1a3f      	subs	r7, r7, r0
   11168:	e7a3      	b.n	110b2 <ull_conn_update_parameters+0x92>
			lll->periph.window_widening_periodic_us * instant_latency;
   1116a:	6c22      	ldr	r2, [r4, #64]	; 0x40
		lll->periph.window_widening_prepare_us -=
   1116c:	9900      	ldr	r1, [sp, #0]
   1116e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		ticks_at_expire -= HAL_TICKER_US_TO_TICKS(lll->periph.window_widening_periodic_us *
   11170:	f8df b094 	ldr.w	fp, [pc, #148]	; 11208 <ull_conn_update_parameters+0x1e8>
		lll->periph.window_widening_prepare_us -=
   11174:	fb02 3311 	mls	r3, r2, r1, r3
   11178:	64a3      	str	r3, [r4, #72]	; 0x48
			ceiling_fraction(((lll_clock_ppm_local_get() +
   1117a:	f01a f90f 	bl	2b39c <lll_clock_ppm_local_get>
   1117e:	4681      	mov	r9, r0
   11180:	f894 016c 	ldrb.w	r0, [r4, #364]	; 0x16c
   11184:	f3c0 0042 	ubfx	r0, r0, #1, #3
   11188:	f01a f90a 	bl	2b3a0 <lll_clock_ppm_get>
		lll->periph.window_size_prepare_us = win_size * CONN_INT_UNIT_US;
   1118c:	9b04      	ldr	r3, [sp, #16]
			ceiling_fraction(((lll_clock_ppm_local_get() +
   1118e:	4481      	add	r9, r0
		lll->periph.window_size_prepare_us = win_size * CONN_INT_UNIT_US;
   11190:	fb06 f303 	mul.w	r3, r6, r3
			ceiling_fraction(((lll_clock_ppm_local_get() +
   11194:	fb05 f909 	mul.w	r9, r5, r9
		lll->periph.window_size_prepare_us = win_size * CONN_INT_UNIT_US;
   11198:	6523      	str	r3, [r4, #80]	; 0x50
			ceiling_fraction(((lll_clock_ppm_local_get() +
   1119a:	f509 2974 	add.w	r9, r9, #999424	; 0xf4000
   1119e:	4b1f      	ldr	r3, [pc, #124]	; (1121c <ull_conn_update_parameters+0x1fc>)
   111a0:	f209 293f 	addw	r9, r9, #575	; 0x23f
   111a4:	fba3 3909 	umull	r3, r9, r3, r9
   111a8:	ea4f 4399 	mov.w	r3, r9, lsr #18
			lll->periph.window_widening_periodic_us * latency_upd;
   111ac:	fb03 f00a 	mul.w	r0, r3, sl
		lll->periph.window_widening_periodic_us =
   111b0:	6423      	str	r3, [r4, #64]	; 0x40
		periodic_us -= lll->periph.window_widening_periodic_us;
   111b2:	eba5 0903 	sub.w	r9, r5, r3
		lll->periph.window_widening_prepare_us +=
   111b6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		lll->periph.window_widening_max_us = (conn_interval_us >> 1U) - EVENT_IFS_US;
   111b8:	086a      	lsrs	r2, r5, #1
		lll->periph.window_widening_prepare_us +=
   111ba:	4403      	add	r3, r0
		lll->periph.window_widening_max_us = (conn_interval_us >> 1U) - EVENT_IFS_US;
   111bc:	3a96      	subs	r2, #150	; 0x96
   111be:	4293      	cmp	r3, r2
   111c0:	bf28      	it	cs
   111c2:	4613      	movcs	r3, r2
   111c4:	e9c4 2311 	strd	r2, r3, [r4, #68]	; 0x44
		conn->periph.ticks_to_offset = 0U;
   111c8:	2300      	movs	r3, #0
   111ca:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
		ticks_at_expire -= HAL_TICKER_US_TO_TICKS(lll->periph.window_widening_periodic_us *
   111ce:	fba0 010b 	umull	r0, r1, r0, fp
   111d2:	a30b      	add	r3, pc, #44	; (adr r3, 11200 <ull_conn_update_parameters+0x1e0>)
   111d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   111d8:	f7fe ffe2 	bl	101a0 <__aeabi_uldivmod>
		ticks_win_offset = HAL_TICKER_US_TO_TICKS((win_offset_us / CONN_INT_UNIT_US) *
   111dc:	4b10      	ldr	r3, [pc, #64]	; (11220 <ull_conn_update_parameters+0x200>)
   111de:	9a05      	ldr	r2, [sp, #20]
		ticks_at_expire -= HAL_TICKER_US_TO_TICKS(lll->periph.window_widening_periodic_us *
   111e0:	1a3f      	subs	r7, r7, r0
		ticks_win_offset = HAL_TICKER_US_TO_TICKS((win_offset_us / CONN_INT_UNIT_US) *
   111e2:	fba3 3002 	umull	r3, r0, r3, r2
   111e6:	0a80      	lsrs	r0, r0, #10
   111e8:	fb06 f000 	mul.w	r0, r6, r0
   111ec:	a304      	add	r3, pc, #16	; (adr r3, 11200 <ull_conn_update_parameters+0x1e0>)
   111ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   111f2:	fba0 010b 	umull	r0, r1, r0, fp
   111f6:	f7fe ffd3 	bl	101a0 <__aeabi_uldivmod>
   111fa:	4606      	mov	r6, r0
		break;
   111fc:	e775      	b.n	110ea <ull_conn_update_parameters+0xca>
   111fe:	bf00      	nop
   11200:	1afd498d 	.word	0x1afd498d
   11204:	00000007 	.word	0x00000007
   11208:	3b9aca00 	.word	0x3b9aca00
   1120c:	0003a650 	.word	0x0003a650
   11210:	0003a004 	.word	0x0003a004
   11214:	00039f74 	.word	0x00039f74
   11218:	01c9c37f 	.word	0x01c9c37f
   1121c:	431bde83 	.word	0x431bde83
   11220:	d1b71759 	.word	0xd1b71759
   11224:	00000000 	.word	0x00000000

00011228 <ull_periph_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param);

void ull_periph_setup(struct node_rx_hdr *rx, struct node_rx_ftr *ftr,
		     struct lll_conn *lll)
{
   11228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t win_offset;
	memq_link_t *link;
	uint8_t chan_sel;
	void *node;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
   1122c:	680b      	ldr	r3, [r1, #0]
	conn = lll->hdr.parent;
   1122e:	6817      	ldr	r7, [r2, #0]
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
   11230:	f8d3 9000 	ldr.w	r9, [r3]

	/* Populate the peripheral context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;

	peer_addr_type = pdu_adv->tx_addr;
   11234:	7f03      	ldrb	r3, [r0, #28]
{
   11236:	b095      	sub	sp, #84	; 0x54
   11238:	460e      	mov	r6, r1
	peer_addr_type = pdu_adv->tx_addr;
   1123a:	f3c3 1380 	ubfx	r3, r3, #6, #1
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
   1123e:	f100 011e 	add.w	r1, r0, #30
{
   11242:	4604      	mov	r4, r0
   11244:	4615      	mov	r5, r2
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
   11246:	a812      	add	r0, sp, #72	; 0x48
   11248:	2206      	movs	r2, #6
	peer_addr_type = pdu_adv->tx_addr;
   1124a:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
   1124e:	f024 f972 	bl	35536 <memcpy>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	uint8_t rl_idx = ftr->rl_idx;
   11252:	f896 8011 	ldrb.w	r8, [r6, #17]

	if (rl_idx != FILTER_IDX_NONE) {
   11256:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
		/* Get identity address */
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
   1125a:	f10d 0b40 	add.w	fp, sp, #64	; 0x40
	if (rl_idx != FILTER_IDX_NONE) {
   1125e:	d05a      	beq.n	11316 <ull_periph_setup+0xee>
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
   11260:	465a      	mov	r2, fp
   11262:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
   11266:	4640      	mov	r0, r8
   11268:	f018 fc92 	bl	29b90 <ll_rl_id_addr_get>
		/* Mark it as identity address from RPA (0x02, 0x03) */
		peer_addr_type += 2;
   1126c:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
   11270:	3302      	adds	r3, #2
   11272:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
	}

	/* Use the link stored in the node rx to enqueue connection
	 * complete node rx towards LL context.
	 */
	link = rx->link;
   11276:	4621      	mov	r1, r4
	conn->own_id_addr_type = own_id_addr_type;
	(void)memcpy(conn->own_id_addr, own_id_addr,
		     sizeof(conn->own_id_addr));
#endif /* CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN */

	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
   11278:	2203      	movs	r2, #3
	link = rx->link;
   1127a:	f851 3b2e 	ldr.w	r3, [r1], #46
   1127e:	930a      	str	r3, [sp, #40]	; 0x28
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
   11280:	f105 0008 	add.w	r0, r5, #8
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
   11284:	f105 0a04 	add.w	sl, r5, #4
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
   11288:	f024 f955 	bl	35536 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
   1128c:	f105 0318 	add.w	r3, r5, #24
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
   11290:	2204      	movs	r2, #4
   11292:	f104 012a 	add.w	r1, r4, #42	; 0x2a
   11296:	4650      	mov	r0, sl
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
   11298:	930b      	str	r3, [sp, #44]	; 0x2c
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
   1129a:	f024 f94c 	bl	35536 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
   1129e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   112a0:	2205      	movs	r2, #5
   112a2:	f104 013a 	add.w	r1, r4, #58	; 0x3a
   112a6:	4618      	mov	r0, r3
   112a8:	f024 f945 	bl	35536 <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
   112ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   112ae:	2105      	movs	r1, #5
   112b0:	4618      	mov	r0, r3
   112b2:	f00e fa45 	bl	1f740 <util_ones_count_get>
   112b6:	7f6b      	ldrb	r3, [r5, #29]
   112b8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   112bc:	f360 0305 	bfi	r3, r0, #0, #6
   112c0:	776b      	strb	r3, [r5, #29]
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
   112c2:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   112c6:	f3c3 0204 	ubfx	r2, r3, #0, #5
   112ca:	77aa      	strb	r2, [r5, #30]
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
   112cc:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   112ce:	81ea      	strh	r2, [r5, #14]
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
   112d0:	2801      	cmp	r0, #1
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
   112d2:	f003 031f 	and.w	r3, r3, #31
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
   112d6:	b292      	uxth	r2, r2
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
   112d8:	d905      	bls.n	112e6 <ull_periph_setup+0xbe>
   112da:	331b      	adds	r3, #27
   112dc:	f003 031f 	and.w	r3, r3, #31
   112e0:	2b0b      	cmp	r3, #11
   112e2:	d800      	bhi.n	112e6 <ull_periph_setup+0xbe>
	    (lll->data_chan_hop < CHM_HOP_COUNT_MIN) ||
	    (lll->data_chan_hop > CHM_HOP_COUNT_MAX) ||
   112e4:	b9ea      	cbnz	r2, 11322 <ull_periph_setup+0xfa>

static void invalid_release(struct ull_hdr *hdr, struct lll_conn *lll,
			    memq_link_t *link, struct node_rx_hdr *rx)
{
	/* Reset the advertising disabled callback */
	hdr->disabled_cb = NULL;
   112e6:	2200      	movs	r2, #0
   112e8:	f8c9 2014 	str.w	r2, [r9, #20]

	/* Let the advertiser continue with connectable advertising */
	lll->periph.initiated = 0U;
   112ec:	f895 3020 	ldrb.w	r3, [r5, #32]
		 * connection rx node.
		 */
		rx_csa = rx->rx_ftr.extra;

		/* Enqueue the connection event to be release */
		ll_rx_put(link, rx);
   112f0:	980a      	ldr	r0, [sp, #40]	; 0x28
	lll->periph.initiated = 0U;
   112f2:	f362 0300 	bfi	r3, r2, #0, #1
   112f6:	f885 3020 	strb.w	r3, [r5, #32]
		rx_csa = rx->rx_ftr.extra;
   112fa:	68e5      	ldr	r5, [r4, #12]
	rx->type = NODE_RX_TYPE_RELEASE;
   112fc:	2601      	movs	r6, #1
		ll_rx_put(link, rx);
   112fe:	4621      	mov	r1, r4
	rx->type = NODE_RX_TYPE_RELEASE;
   11300:	7126      	strb	r6, [r4, #4]
		ll_rx_put(link, rx);
   11302:	f011 fc09 	bl	22b18 <ll_rx_put>
		/* Mark for buffer for release */
		rx->type = NODE_RX_TYPE_RELEASE;
	}

	/* Enqueue connection or CSA event to be release */
	ll_rx_put_sched(link, rx);
   11306:	6828      	ldr	r0, [r5, #0]
		rx->type = NODE_RX_TYPE_RELEASE;
   11308:	712e      	strb	r6, [r5, #4]
	ll_rx_put_sched(link, rx);
   1130a:	4629      	mov	r1, r5
   1130c:	f011 fc0e 	bl	22b2c <ll_rx_put_sched>
}
   11310:	b015      	add	sp, #84	; 0x54
   11312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(peer_id_addr, peer_addr, BDADDR_SIZE);
   11316:	2206      	movs	r2, #6
   11318:	a912      	add	r1, sp, #72	; 0x48
   1131a:	4658      	mov	r0, fp
   1131c:	f024 f90b 	bl	35536 <memcpy>
   11320:	e7a9      	b.n	11276 <ull_periph_setup+0x4e>
	((struct lll_adv *)ftr->param)->conn = NULL;
   11322:	6833      	ldr	r3, [r6, #0]
   11324:	2100      	movs	r1, #0
   11326:	6059      	str	r1, [r3, #4]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
   11328:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
   1132a:	89ea      	ldrh	r2, [r5, #14]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
   1132c:	822b      	strh	r3, [r5, #16]
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
   1132e:	f240 43e2 	movw	r3, #1250	; 0x4e2
   11332:	fb03 f202 	mul.w	r2, r3, r2
   11336:	920b      	str	r2, [sp, #44]	; 0x2c
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
   11338:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1133a:	930d      	str	r3, [sp, #52]	; 0x34
	ull_cp_state_set(conn, ULL_CP_CONNECTED);
   1133c:	4638      	mov	r0, r7
   1133e:	f015 fb07 	bl	26950 <ull_cp_state_set>
	conn->periph.sca = pdu_adv->connect_ind.sca;
   11342:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
   11346:	f897 116c 	ldrb.w	r1, [r7, #364]	; 0x16c
   1134a:	0952      	lsrs	r2, r2, #5
   1134c:	f362 0143 	bfi	r1, r2, #1, #3
   11350:	f887 116c 	strb.w	r1, [r7, #364]	; 0x16c
		ceiling_fraction(((lll_clock_ppm_local_get() +
   11354:	f01a f822 	bl	2b39c <lll_clock_ppm_local_get>
   11358:	900c      	str	r0, [sp, #48]	; 0x30
   1135a:	f897 016c 	ldrb.w	r0, [r7, #364]	; 0x16c
   1135e:	f3c0 0042 	ubfx	r0, r0, #1, #3
   11362:	f01a f81d 	bl	2b3a0 <lll_clock_ppm_get>
   11366:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11368:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1136a:	4410      	add	r0, r2
   1136c:	fb01 f000 	mul.w	r0, r1, r0
   11370:	4ab9      	ldr	r2, [pc, #740]	; (11658 <ull_periph_setup+0x430>)
   11372:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
   11376:	f200 203f 	addw	r0, r0, #575	; 0x23f
   1137a:	fba2 2000 	umull	r2, r0, r2, r0
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
   1137e:	084a      	lsrs	r2, r1, #1
		ceiling_fraction(((lll_clock_ppm_local_get() +
   11380:	0c80      	lsrs	r0, r0, #18
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
   11382:	3a96      	subs	r2, #150	; 0x96
	lll->periph.window_widening_periodic_us =
   11384:	6268      	str	r0, [r5, #36]	; 0x24
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
   11386:	62aa      	str	r2, [r5, #40]	; 0x28
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
   11388:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
   1138c:	f240 43e2 	movw	r3, #1250	; 0x4e2
   11390:	fb02 f303 	mul.w	r3, r2, r3
   11394:	63ab      	str	r3, [r5, #56]	; 0x38
	conn->supervision_timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
   11396:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   11398:	f8a7 3184 	strh.w	r3, [r7, #388]	; 0x184
	ull_cp_prt_reload_set(conn, conn_interval_us);
   1139c:	4638      	mov	r0, r7
   1139e:	f015 fac3 	bl	26928 <ull_cp_prt_reload_set>
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   113a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   113a4:	4bad      	ldr	r3, [pc, #692]	; (1165c <ull_periph_setup+0x434>)
	conn->connect_accept_to = DEFAULT_CONNECTION_ACCEPT_TIMEOUT_US;
   113a6:	4aae      	ldr	r2, [pc, #696]	; (11660 <ull_periph_setup+0x438>)
   113a8:	f8c7 2188 	str.w	r2, [r7, #392]	; 0x188
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   113ac:	440b      	add	r3, r1
   113ae:	fbb3 f3f1 	udiv	r3, r3, r1
   113b2:	b29a      	uxth	r2, r3
   113b4:	f8a7 217e 	strh.w	r2, [r7, #382]	; 0x17e
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   113b8:	8a29      	ldrh	r1, [r5, #16]
   113ba:	1d88      	adds	r0, r1, #6
   113bc:	4282      	cmp	r2, r0
   113be:	dd04      	ble.n	113ca <ull_periph_setup+0x1a2>
   113c0:	f5c1 417f 	rsb	r1, r1, #65280	; 0xff00
   113c4:	31fa      	adds	r1, #250	; 0xfa
   113c6:	440a      	add	r2, r1
   113c8:	b292      	uxth	r2, r2
   113ca:	f8a7 217a 	strh.w	r2, [r7, #378]	; 0x17a
	memcpy((void *)&conn->periph.force, &lll->access_addr[0],
   113ce:	4651      	mov	r1, sl
   113d0:	2204      	movs	r2, #4
   113d2:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   113d6:	f024 f8ae 	bl	35536 <memcpy>
		chan_sel = pdu_adv->chan_sel;
   113da:	4623      	mov	r3, r4
   113dc:	f813 2f1c 	ldrb.w	r2, [r3, #28]!
   113e0:	f3c2 1240 	ubfx	r2, r2, #5, #1
   113e4:	920c      	str	r2, [sp, #48]	; 0x30
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   113e6:	07da      	lsls	r2, r3, #31
   113e8:	f100 810e 	bmi.w	11608 <ull_periph_setup+0x3e0>
	cc->status = 0U;
   113ec:	f44f 7380 	mov.w	r3, #256	; 0x100
   113f0:	83a3      	strh	r3, [r4, #28]
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
   113f2:	f899 0026 	ldrb.w	r0, [r9, #38]	; 0x26
   113f6:	f019 f94b 	bl	2a690 <ull_filter_lll_lrpa_used>
   113fa:	4601      	mov	r1, r0
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
   113fc:	2206      	movs	r2, #6
   113fe:	f104 002b 	add.w	r0, r4, #43	; 0x2b
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
   11402:	2900      	cmp	r1, #0
   11404:	f000 80e6 	beq.w	115d4 <ull_periph_setup+0x3ac>
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
   11408:	f104 0124 	add.w	r1, r4, #36	; 0x24
   1140c:	f024 f893 	bl	35536 <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
   11410:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
		memcpy(cc->peer_rpa, peer_addr, BDADDR_SIZE);
   11414:	f104 0025 	add.w	r0, r4, #37	; 0x25
	if (rl_idx != FILTER_IDX_NONE) {
   11418:	f000 80df 	beq.w	115da <ull_periph_setup+0x3b2>
		memcpy(cc->peer_rpa, peer_addr, BDADDR_SIZE);
   1141c:	a912      	add	r1, sp, #72	; 0x48
   1141e:	2206      	movs	r2, #6
   11420:	f024 f889 	bl	35536 <memcpy>
	cc->peer_addr_type = peer_addr_type;
   11424:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
   11428:	77a3      	strb	r3, [r4, #30]
	memcpy(cc->peer_addr, peer_id_addr, BDADDR_SIZE);
   1142a:	4659      	mov	r1, fp
   1142c:	2206      	movs	r2, #6
   1142e:	f104 001f 	add.w	r0, r4, #31
   11432:	f024 f880 	bl	35536 <memcpy>
	cc->interval = lll->interval;
   11436:	89eb      	ldrh	r3, [r5, #14]
   11438:	8663      	strh	r3, [r4, #50]	; 0x32
	cc->latency = lll->latency;
   1143a:	8a2b      	ldrh	r3, [r5, #16]
   1143c:	86a3      	strh	r3, [r4, #52]	; 0x34
	cc->timeout = conn->supervision_timeout;
   1143e:	f8b7 3184 	ldrh.w	r3, [r7, #388]	; 0x184
   11442:	86e3      	strh	r3, [r4, #54]	; 0x36
	cc->sca = conn->periph.sca;
   11444:	f897 316c 	ldrb.w	r3, [r7, #364]	; 0x16c
   11448:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1144c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	lll->handle = ll_conn_handle_get(conn);
   11450:	4638      	mov	r0, r7
   11452:	f012 ffd1 	bl	243f8 <ll_conn_handle_get>
   11456:	81a8      	strh	r0, [r5, #12]
	rx->handle = lll->handle;
   11458:	80e0      	strh	r0, [r4, #6]
		ll_rx_put(link, rx);
   1145a:	4621      	mov	r1, r4
   1145c:	980a      	ldr	r0, [sp, #40]	; 0x28
		rx_csa = (void *)ftr->extra;
   1145e:	6874      	ldr	r4, [r6, #4]
		ll_rx_put(link, rx);
   11460:	f011 fb5a 	bl	22b18 <ll_rx_put>
		rx->handle = lll->handle;
   11464:	89ab      	ldrh	r3, [r5, #12]
   11466:	80e3      	strh	r3, [r4, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   11468:	231c      	movs	r3, #28
   1146a:	7123      	strb	r3, [r4, #4]
		if (chan_sel) {
   1146c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		link = rx->link;
   1146e:	f8d4 8000 	ldr.w	r8, [r4]
		if (chan_sel) {
   11472:	2b00      	cmp	r3, #0
   11474:	f040 80b6 	bne.w	115e4 <ull_periph_setup+0x3bc>
   11478:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			cs->csa = 0x00;
   1147a:	7723      	strb	r3, [r4, #28]
	ll_rx_put_sched(link, rx);
   1147c:	4621      	mov	r1, r4
   1147e:	4640      	mov	r0, r8
   11480:	f011 fb54 	bl	22b2c <ll_rx_put_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
   11484:	f895 005b 	ldrb.w	r0, [r5, #91]	; 0x5b
	max_tx_time = lll->dle.eff.max_tx_time;
   11488:	f8b5 8050 	ldrh.w	r8, [r5, #80]	; 0x50
	max_rx_time = lll->dle.eff.max_rx_time;
   1148c:	f8b5 4052 	ldrh.w	r4, [r5, #82]	; 0x52
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
   11490:	2101      	movs	r1, #1
   11492:	f000 0007 	and.w	r0, r0, #7
   11496:	f019 fd91 	bl	2afbc <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   1149a:	4444      	add	r4, r8
   1149c:	f204 14a9 	addw	r4, r4, #425	; 0x1a9
   114a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 11664 <ull_periph_setup+0x43c>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
   114a4:	4682      	mov	sl, r0
	conn->ull.ticks_prepare_to_start =
   114a6:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   114a8:	1820      	adds	r0, r4, r0
	conn->ull.ticks_active_to_start = 0U;
   114aa:	2400      	movs	r4, #0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   114ac:	fba0 0108 	umull	r0, r1, r0, r8
	conn->ull.ticks_prepare_to_start =
   114b0:	60bb      	str	r3, [r7, #8]
	conn->ull.ticks_active_to_start = 0U;
   114b2:	607c      	str	r4, [r7, #4]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   114b4:	a366      	add	r3, pc, #408	; (adr r3, 11650 <ull_periph_setup+0x428>)
   114b6:	e9d3 2300 	ldrd	r2, r3, [r3]
	conn->ull.ticks_preempt_to_start =
   114ba:	60fc      	str	r4, [r7, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   114bc:	f7fe fe70 	bl	101a0 <__aeabi_uldivmod>
   114c0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn->ull.ticks_slot =
   114c4:	6138      	str	r0, [r7, #16]
	conn_interval_us -= lll->periph.window_widening_periodic_us;
   114c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   114c8:	6a6d      	ldr	r5, [r5, #36]	; 0x24
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
   114ca:	990d      	ldr	r1, [sp, #52]	; 0x34
	conn_interval_us -= lll->periph.window_widening_periodic_us;
   114cc:	1b5d      	subs	r5, r3, r5
	conn_offset_us = ftr->radio_end_us;
   114ce:	68f3      	ldr	r3, [r6, #12]
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
   114d0:	f240 42e2 	movw	r2, #1250	; 0x4e2
   114d4:	fb02 3301 	mla	r3, r2, r1, r3
	conn_offset_us -= EVENT_JITTER_US;
   114d8:	f203 41b2 	addw	r1, r3, #1202	; 0x4b2
	conn_offset_us -= ready_delay_us;
   114dc:	eba1 0a0a 	sub.w	sl, r1, sl
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
   114e0:	4622      	mov	r2, r4
   114e2:	2102      	movs	r1, #2
   114e4:	2001      	movs	r0, #1
   114e6:	f00d fff1 	bl	1f4cc <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
   114ea:	4648      	mov	r0, r9
   114ec:	f012 fc4c 	bl	23d88 <ull_adv_handle_get>
   114f0:	4602      	mov	r2, r0
			HAL_TICKER_US_TO_TICKS(conn_offset_us) -
   114f2:	fbaa 0108 	umull	r0, r1, sl, r8
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
   114f6:	4692      	mov	sl, r2
			HAL_TICKER_US_TO_TICKS(conn_offset_us) -
   114f8:	a355      	add	r3, pc, #340	; (adr r3, 11650 <ull_periph_setup+0x428>)
   114fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   114fe:	f7fe fe4f 	bl	101a0 <__aeabi_uldivmod>
	ticker_status = ticker_stop_abs(TICKER_INSTANCE_ID_CTLR,
   11502:	f8cd 9004 	str.w	r9, [sp, #4]
	ticks_at_stop = ftr->ticks_anchor +
   11506:	68b3      	ldr	r3, [r6, #8]
	ticker_status = ticker_stop_abs(TICKER_INSTANCE_ID_CTLR,
   11508:	4957      	ldr	r1, [pc, #348]	; (11668 <ull_periph_setup+0x440>)
   1150a:	9100      	str	r1, [sp, #0]
			HAL_TICKER_US_TO_TICKS(conn_offset_us) -
   1150c:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
   11510:	f10a 0202 	add.w	r2, sl, #2
	ticks_at_stop = ftr->ticks_anchor +
   11514:	3b3a      	subs	r3, #58	; 0x3a
	ticker_status = ticker_stop_abs(TICKER_INSTANCE_ID_CTLR,
   11516:	b2d2      	uxtb	r2, r2
   11518:	4620      	mov	r0, r4
   1151a:	4443      	add	r3, r8
   1151c:	2101      	movs	r1, #1
   1151e:	f00f f925 	bl	2076c <ticker_stop_abs>
}

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   11522:	2801      	cmp	r0, #1
   11524:	d07e      	beq.n	11624 <ull_periph_setup+0x3fc>
	if (adv->lll.is_hdcd) {
   11526:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
   1152a:	07db      	lsls	r3, r3, #31
   1152c:	d464      	bmi.n	115f8 <ull_periph_setup+0x3d0>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   1152e:	4638      	mov	r0, r7
   11530:	f012 ff62 	bl	243f8 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   11534:	4b4b      	ldr	r3, [pc, #300]	; (11664 <ull_periph_setup+0x43c>)
   11536:	fba5 a903 	umull	sl, r9, r5, r3
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   1153a:	4604      	mov	r4, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   1153c:	a344      	add	r3, pc, #272	; (adr r3, 11650 <ull_periph_setup+0x428>)
   1153e:	e9d3 2300 	ldrd	r2, r3, [r3]
   11542:	4650      	mov	r0, sl
   11544:	4649      	mov	r1, r9
   11546:	f7fe fe2b 	bl	101a0 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(conn_interval_us),
   1154a:	4b48      	ldr	r3, [pc, #288]	; (1166c <ull_periph_setup+0x444>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1154c:	68b6      	ldr	r6, [r6, #8]
   1154e:	4a48      	ldr	r2, [pc, #288]	; (11670 <ull_periph_setup+0x448>)
   11550:	9207      	str	r2, [sp, #28]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   11552:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
   11556:	fba5 3103 	umull	r3, r1, r5, r3
   1155a:	ebba 0003 	subs.w	r0, sl, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1155e:	4b45      	ldr	r3, [pc, #276]	; (11674 <ull_periph_setup+0x44c>)
   11560:	9305      	str	r3, [sp, #20]
   11562:	f44f 73ee 	mov.w	r3, #476	; 0x1dc
   11566:	9706      	str	r7, [sp, #24]
   11568:	9308      	str	r3, [sp, #32]
   1156a:	693b      	ldr	r3, [r7, #16]
   1156c:	f04f 0b00 	mov.w	fp, #0
   11570:	e9cd b303 	strd	fp, r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   11574:	f04f 0307 	mov.w	r3, #7
   11578:	fb03 1105 	mla	r1, r3, r5, r1
   1157c:	eb69 0101 	sbc.w	r1, r9, r1
   11580:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11584:	2300      	movs	r3, #0
   11586:	f7fe fe0b 	bl	101a0 <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   1158a:	3403      	adds	r4, #3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1158c:	3e3a      	subs	r6, #58	; 0x3a
   1158e:	b2e4      	uxtb	r4, r4
   11590:	e9cd 5001 	strd	r5, r0, [sp, #4]
   11594:	f8cd 8000 	str.w	r8, [sp]
   11598:	4633      	mov	r3, r6
   1159a:	4622      	mov	r2, r4
   1159c:	2101      	movs	r1, #1
   1159e:	4658      	mov	r0, fp
   115a0:	f00f f818 	bl	205d4 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   115a4:	f010 0ffd 	tst.w	r0, #253	; 0xfd
   115a8:	d00c      	beq.n	115c4 <ull_periph_setup+0x39c>
   115aa:	4a33      	ldr	r2, [pc, #204]	; (11678 <ull_periph_setup+0x450>)
   115ac:	4933      	ldr	r1, [pc, #204]	; (1167c <ull_periph_setup+0x454>)
   115ae:	4834      	ldr	r0, [pc, #208]	; (11680 <ull_periph_setup+0x458>)
   115b0:	f240 13dd 	movw	r3, #477	; 0x1dd
   115b4:	f021 ff30 	bl	33418 <assert_print>
   115b8:	4040      	eors	r0, r0
   115ba:	f380 8811 	msr	BASEPRI, r0
   115be:	f04f 0003 	mov.w	r0, #3
   115c2:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
   115c4:	2201      	movs	r2, #1
   115c6:	2102      	movs	r1, #2
   115c8:	4610      	mov	r0, r2
   115ca:	f00d ff7f 	bl	1f4cc <mayfly_enable>
}
   115ce:	b015      	add	sp, #84	; 0x54
   115d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
   115d4:	f023 ffba 	bl	3554c <memset>
   115d8:	e71a      	b.n	11410 <ull_periph_setup+0x1e8>
		memset(cc->peer_rpa, 0x0, BDADDR_SIZE);
   115da:	2206      	movs	r2, #6
   115dc:	2100      	movs	r1, #0
   115de:	f023 ffb5 	bl	3554c <memset>
   115e2:	e71f      	b.n	11424 <ull_periph_setup+0x1fc>
			lll->data_chan_sel = 1;
   115e4:	7f6b      	ldrb	r3, [r5, #29]
   115e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   115ea:	776b      	strb	r3, [r5, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
   115ec:	4650      	mov	r0, sl
   115ee:	f018 f8dd 	bl	297ac <lll_chan_id>
   115f2:	2301      	movs	r3, #1
   115f4:	83e8      	strh	r0, [r5, #30]
			cs->csa = 0x01;
   115f6:	e740      	b.n	1147a <ull_periph_setup+0x252>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   115f8:	2300      	movs	r3, #0
   115fa:	2201      	movs	r2, #1
   115fc:	9300      	str	r3, [sp, #0]
   115fe:	4618      	mov	r0, r3
   11600:	4611      	mov	r1, r2
   11602:	f00f f871 	bl	206e8 <ticker_stop>
   11606:	e792      	b.n	1152e <ull_periph_setup+0x306>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   11608:	4a1b      	ldr	r2, [pc, #108]	; (11678 <ull_periph_setup+0x450>)
   1160a:	491e      	ldr	r1, [pc, #120]	; (11684 <ull_periph_setup+0x45c>)
   1160c:	481c      	ldr	r0, [pc, #112]	; (11680 <ull_periph_setup+0x458>)
   1160e:	f44f 7381 	mov.w	r3, #258	; 0x102
   11612:	f021 ff01 	bl	33418 <assert_print>
   11616:	4040      	eors	r0, r0
   11618:	f380 8811 	msr	BASEPRI, r0
   1161c:	f04f 0003 	mov.w	r0, #3
   11620:	df02      	svc	2
   11622:	e6e3      	b.n	113ec <ull_periph_setup+0x1c4>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   11624:	f011 fb66 	bl	22cf4 <ull_disable_mark_get>
   11628:	4581      	cmp	r9, r0
   1162a:	f43f af7c 	beq.w	11526 <ull_periph_setup+0x2fe>
   1162e:	4a12      	ldr	r2, [pc, #72]	; (11678 <ull_periph_setup+0x450>)
   11630:	4915      	ldr	r1, [pc, #84]	; (11688 <ull_periph_setup+0x460>)
   11632:	4813      	ldr	r0, [pc, #76]	; (11680 <ull_periph_setup+0x458>)
   11634:	f240 23a6 	movw	r3, #678	; 0x2a6
   11638:	f021 feee 	bl	33418 <assert_print>
   1163c:	4040      	eors	r0, r0
   1163e:	f380 8811 	msr	BASEPRI, r0
   11642:	f04f 0003 	mov.w	r0, #3
   11646:	df02      	svc	2
		  param == ull_disable_mark_get());
}
   11648:	e76d      	b.n	11526 <ull_periph_setup+0x2fe>
   1164a:	bf00      	nop
   1164c:	f3af 8000 	nop.w
   11650:	1afd498d 	.word	0x1afd498d
   11654:	00000007 	.word	0x00000007
   11658:	431bde83 	.word	0x431bde83
   1165c:	01c9c37f 	.word	0x01c9c37f
   11660:	004c4b40 	.word	0x004c4b40
   11664:	3b9aca00 	.word	0x3b9aca00
   11668:	0002956d 	.word	0x0002956d
   1166c:	1afd498d 	.word	0x1afd498d
   11670:	0002953d 	.word	0x0002953d
   11674:	000295a9 	.word	0x000295a9
   11678:	0003ab58 	.word	0x0003ab58
   1167c:	0003a714 	.word	0x0003a714
   11680:	00039f74 	.word	0x00039f74
   11684:	0003a1b4 	.word	0x0003a1b4
   11688:	0003abb4 	.word	0x0003abb4
   1168c:	00000000 	.word	0x00000000

00011690 <lll_preempt_calc>:
	}
}

uint32_t lll_preempt_calc(struct ull_hdr *ull, uint8_t ticker_id,
		       uint32_t ticks_at_event)
{
   11690:	b510      	push	{r4, lr}
   11692:	4614      	mov	r4, r2
	uint32_t ticks_now;
	uint32_t diff;

	ticks_now = ticker_ticks_now_get();
   11694:	f00f f8ae 	bl	207f4 <ticker_ticks_now_get>
	diff = ticker_ticks_diff_get(ticks_now, ticks_at_event);
   11698:	4621      	mov	r1, r4
   1169a:	f00f f8ad 	bl	207f8 <ticker_ticks_diff_get>
   1169e:	4603      	mov	r3, r0
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   116a0:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
   116a4:	d103      	bne.n	116ae <lll_preempt_calc+0x1e>
		return 0;
	}

	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   116a6:	1cdc      	adds	r4, r3, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   116a8:	2c09      	cmp	r4, #9
   116aa:	d802      	bhi.n	116b2 <lll_preempt_calc+0x22>

		return 1U;
	}

	return 0U;
}
   116ac:	bd10      	pop	{r4, pc}
		return 0;
   116ae:	2000      	movs	r0, #0
}
   116b0:	bd10      	pop	{r4, pc}
		LL_ASSERT_MSG(false, "%s: Actual EVENT_OVERHEAD_START_US = %u",
   116b2:	4a11      	ldr	r2, [pc, #68]	; (116f8 <lll_preempt_calc+0x68>)
   116b4:	4911      	ldr	r1, [pc, #68]	; (116fc <lll_preempt_calc+0x6c>)
   116b6:	4812      	ldr	r0, [pc, #72]	; (11700 <lll_preempt_calc+0x70>)
   116b8:	f240 13d9 	movw	r3, #473	; 0x1d9
   116bc:	f021 feac 	bl	33418 <assert_print>
   116c0:	4810      	ldr	r0, [pc, #64]	; (11704 <lll_preempt_calc+0x74>)
   116c2:	2107      	movs	r1, #7
   116c4:	fba4 0300 	umull	r0, r3, r4, r0
   116c8:	fb01 3104 	mla	r1, r1, r4, r3
   116cc:	a308      	add	r3, pc, #32	; (adr r3, 116f0 <lll_preempt_calc+0x60>)
   116ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   116d2:	f7fe fd65 	bl	101a0 <__aeabi_uldivmod>
   116d6:	490c      	ldr	r1, [pc, #48]	; (11708 <lll_preempt_calc+0x78>)
   116d8:	4602      	mov	r2, r0
   116da:	480c      	ldr	r0, [pc, #48]	; (1170c <lll_preempt_calc+0x7c>)
   116dc:	f021 fe9c 	bl	33418 <assert_print>
   116e0:	4040      	eors	r0, r0
   116e2:	f380 8811 	msr	BASEPRI, r0
   116e6:	f04f 0003 	mov.w	r0, #3
   116ea:	df02      	svc	2
		return 1U;
   116ec:	2001      	movs	r0, #1
}
   116ee:	bd10      	pop	{r4, pc}
   116f0:	3b9aca00 	.word	0x3b9aca00
   116f4:	00000000 	.word	0x00000000
   116f8:	0003ae14 	.word	0x0003ae14
   116fc:	0003a004 	.word	0x0003a004
   11700:	00039f74 	.word	0x00039f74
   11704:	1afd498d 	.word	0x1afd498d
   11708:	0003af98 	.word	0x0003af98
   1170c:	0003af38 	.word	0x0003af38

00011710 <nrf_flash_sync_exe>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
	_ticker_sync_context.slot = duration;
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   11710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11714:	b08f      	sub	sp, #60	; 0x3c
			      /* (MAYFLY_CALL_ID_PROGRAM) */
			   ticker_id, /* flash ticker id */
			   ticker_ticks_now_get(), /* current tick */
			   0, /* first int. immediately */
			   /* period */
			   HAL_TICKER_US_TO_TICKS(
   11716:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 117f0 <nrf_flash_sync_exe+0xe0>
{
   1171a:	900b      	str	r0, [sp, #44]	; 0x2c
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1171c:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   11720:	f10d 0036 	add.w	r0, sp, #54	; 0x36
   11724:	f011 fa80 	bl	22c28 <ll_timeslice_ticker_id_get>
			   HAL_TICKER_US_TO_TICKS(
   11728:	4f32      	ldr	r7, [pc, #200]	; (117f4 <nrf_flash_sync_exe+0xe4>)
	ret = ticker_start(instance_index,
   1172a:	f89d a036 	ldrb.w	sl, [sp, #54]	; 0x36
   1172e:	f89d b037 	ldrb.w	fp, [sp, #55]	; 0x37
   11732:	f00f f85f 	bl	207f4 <ticker_ticks_now_get>
			   HAL_TICKER_US_TO_TICKS(
   11736:	f8d8 4000 	ldr.w	r4, [r8]
	ret = ticker_start(instance_index,
   1173a:	900a      	str	r0, [sp, #40]	; 0x28
			   HAL_TICKER_US_TO_TICKS(
   1173c:	fba4 5407 	umull	r5, r4, r4, r7
   11740:	a329      	add	r3, pc, #164	; (adr r3, 117e8 <nrf_flash_sync_exe+0xd8>)
   11742:	e9d3 2300 	ldrd	r2, r3, [r3]
	ret = ticker_start(instance_index,
   11746:	2600      	movs	r6, #0
			   HAL_TICKER_US_TO_TICKS(
   11748:	4621      	mov	r1, r4
   1174a:	4628      	mov	r0, r5
   1174c:	f7fe fd28 	bl	101a0 <__aeabi_uldivmod>
	ret = ticker_start(instance_index,
   11750:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11752:	9306      	str	r3, [sp, #24]
   11754:	e9cd 6607 	strd	r6, r6, [sp, #28]
   11758:	4b27      	ldr	r3, [pc, #156]	; (117f8 <nrf_flash_sync_exe+0xe8>)
   1175a:	9305      	str	r3, [sp, #20]
			   HAL_TICKER_US_TO_TICKS(
   1175c:	4681      	mov	r9, r0
				_ticker_sync_context.interval),
			   /* period remainder */
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
			   0, /* lazy, voluntary skips */
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
   1175e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   11762:	a321      	add	r3, pc, #132	; (adr r3, 117e8 <nrf_flash_sync_exe+0xd8>)
   11764:	e9d3 2300 	ldrd	r2, r3, [r3]
   11768:	fba0 0107 	umull	r0, r1, r0, r7
   1176c:	f7fe fd18 	bl	101a0 <__aeabi_uldivmod>
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
   11770:	4b22      	ldr	r3, [pc, #136]	; (117fc <nrf_flash_sync_exe+0xec>)
   11772:	f029 477f 	bic.w	r7, r9, #4278190080	; 0xff000000
   11776:	fba7 3103 	umull	r3, r1, r7, r3
	ret = ticker_start(instance_index,
   1177a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
   1177e:	2207      	movs	r2, #7
	ret = ticker_start(instance_index,
   11780:	e9cd 6003 	strd	r6, r0, [sp, #12]
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
   11784:	fb02 1107 	mla	r1, r2, r7, r1
   11788:	1ae8      	subs	r0, r5, r3
   1178a:	eb64 0101 	sbc.w	r1, r4, r1
   1178e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11792:	2300      	movs	r3, #0
   11794:	f7fe fd04 	bl	101a0 <__aeabi_uldivmod>
	ret = ticker_start(instance_index,
   11798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1179a:	9600      	str	r6, [sp, #0]
   1179c:	e9cd 7001 	strd	r7, r0, [sp, #4]
   117a0:	465a      	mov	r2, fp
   117a2:	2103      	movs	r1, #3
   117a4:	4650      	mov	r0, sl
   117a6:	f00e ff15 	bl	205d4 <ticker_start>
			   time_slot_callback_prepare,
			   op_desc,
			   NULL, /* no op callback */
			   NULL);

	if (ret != TICKER_STATUS_SUCCESS && ret != TICKER_STATUS_BUSY) {
   117aa:	f010 04fd 	ands.w	r4, r0, #253	; 0xfd
   117ae:	d116      	bne.n	117de <nrf_flash_sync_exe+0xce>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   117b0:	4a13      	ldr	r2, [pc, #76]	; (11800 <nrf_flash_sync_exe+0xf0>)
   117b2:	4814      	ldr	r0, [pc, #80]	; (11804 <nrf_flash_sync_exe+0xf4>)
   117b4:	2300      	movs	r3, #0
   117b6:	f020 f9b3 	bl	31b20 <z_impl_k_sem_take>
		/* Failed to enqueue the ticker start operation request */
		result = -ECANCELED;
	} else if (k_sem_take(&sem_sync, K_MSEC(FLASH_TIMEOUT_MS)) != 0) {
   117ba:	b168      	cbz	r0, 117d8 <nrf_flash_sync_exe+0xc8>
		/* Stop any scheduled jobs, from thread context */
		ret = ticker_stop(instance_index, 3U, ticker_id, NULL, NULL);
   117bc:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   117c0:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
   117c4:	9400      	str	r4, [sp, #0]
   117c6:	4623      	mov	r3, r4
   117c8:	2103      	movs	r1, #3
   117ca:	f00e ff8d 	bl	206e8 <ticker_stop>
		__ASSERT((ret == TICKER_STATUS_SUCCESS ||
			  ret == TICKER_STATUS_BUSY),
			 "Failed to stop ticker.\n");

		/* wait for operation's complete overrun*/
		result = -ETIMEDOUT;
   117ce:	f06f 0073 	mvn.w	r0, #115	; 0x73
	} else {
		result = _ticker_sync_context.result;
	}

	return result;
}
   117d2:	b00f      	add	sp, #60	; 0x3c
   117d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result = _ticker_sync_context.result;
   117d8:	f8d8 000c 	ldr.w	r0, [r8, #12]
   117dc:	e7f9      	b.n	117d2 <nrf_flash_sync_exe+0xc2>
		result = -ECANCELED;
   117de:	f06f 008b 	mvn.w	r0, #139	; 0x8b
	return result;
   117e2:	e7f6      	b.n	117d2 <nrf_flash_sync_exe+0xc2>
   117e4:	f3af 8000 	nop.w
   117e8:	1afd498d 	.word	0x1afd498d
   117ec:	00000007 	.word	0x00000007
   117f0:	20003134 	.word	0x20003134
   117f4:	3b9aca00 	.word	0x3b9aca00
   117f8:	0002f2a1 	.word	0x0002f2a1
   117fc:	1afd498d 	.word	0x1afd498d
   11800:	000b7b44 	.word	0x000b7b44
   11804:	2000311c 	.word	0x2000311c

00011808 <nrf_flash_sync_check_time_limit>:
{
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
   11808:	b538      	push	{r3, r4, r5, lr}
	uint32_t ticks_diff;

	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
   1180a:	4d0f      	ldr	r5, [pc, #60]	; (11848 <nrf_flash_sync_check_time_limit+0x40>)
{
   1180c:	4604      	mov	r4, r0
	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
   1180e:	f00e fff1 	bl	207f4 <ticker_ticks_now_get>
   11812:	68a9      	ldr	r1, [r5, #8]
   11814:	f00e fff0 	bl	207f8 <ticker_ticks_diff_get>
					   _ticker_sync_context.ticks_begin);
	if (ticks_diff + ticks_diff/iteration >
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
   11818:	6869      	ldr	r1, [r5, #4]
	if (ticks_diff + ticks_diff/iteration >
   1181a:	fbb0 f4f4 	udiv	r4, r0, r4
   1181e:	4404      	add	r4, r0
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
   11820:	480a      	ldr	r0, [pc, #40]	; (1184c <nrf_flash_sync_check_time_limit+0x44>)
   11822:	a307      	add	r3, pc, #28	; (adr r3, 11840 <nrf_flash_sync_check_time_limit+0x38>)
   11824:	e9d3 2300 	ldrd	r2, r3, [r3]
   11828:	fba1 0100 	umull	r0, r1, r1, r0
   1182c:	f7fe fcb8 	bl	101a0 <__aeabi_uldivmod>
   11830:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return true;
	}

	return false;
}
   11834:	4284      	cmp	r4, r0
   11836:	bf94      	ite	ls
   11838:	2000      	movls	r0, #0
   1183a:	2001      	movhi	r0, #1
   1183c:	bd38      	pop	{r3, r4, r5, pc}
   1183e:	bf00      	nop
   11840:	1afd498d 	.word	0x1afd498d
   11844:	00000007 	.word	0x00000007
   11848:	20003134 	.word	0x20003134
   1184c:	3b9aca00 	.word	0x3b9aca00

00011850 <mtu_updated>:
		      BT_UUID_16_ENCODE(BT_UUID_PRESSURE_VAL)),
};

void mtu_updated(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
	printk("Updated MTU: TX: %d RX: %d bytes\n", tx, rx);
   11850:	4801      	ldr	r0, [pc, #4]	; (11858 <mtu_updated+0x8>)
   11852:	f021 ba8e 	b.w	32d72 <printk>
   11856:	bf00      	nop
   11858:	0003b4e8 	.word	0x0003b4e8

0001185c <disconnected>:
	}
}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
	printk("Disconnected (reason 0x%02x)\n", reason);
   1185c:	4801      	ldr	r0, [pc, #4]	; (11864 <disconnected+0x8>)
   1185e:	f021 ba88 	b.w	32d72 <printk>
   11862:	bf00      	nop
   11864:	0003b50a 	.word	0x0003b50a

00011868 <connected>:
	if (err) {
   11868:	b111      	cbz	r1, 11870 <connected+0x8>
		printk("Connection failed (err 0x%02x)\n", err);
   1186a:	4803      	ldr	r0, [pc, #12]	; (11878 <connected+0x10>)
   1186c:	f021 ba81 	b.w	32d72 <printk>
		printk("Connected\n");
   11870:	4802      	ldr	r0, [pc, #8]	; (1187c <connected+0x14>)
   11872:	f021 ba7e 	b.w	32d72 <printk>
   11876:	bf00      	nop
   11878:	0003b528 	.word	0x0003b528
   1187c:	0003b548 	.word	0x0003b548

00011880 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   11880:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   11882:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   11884:	b08a      	sub	sp, #40	; 0x28
   11886:	4604      	mov	r4, r0
   11888:	460e      	mov	r6, r1
   1188a:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   1188c:	2b03      	cmp	r3, #3
   1188e:	d820      	bhi.n	118d2 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
   11890:	e8df f003 	tbb	[pc, r3]
   11894:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   11898:	4911      	ldr	r1, [pc, #68]	; (118e0 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   1189a:	4628      	mov	r0, r5
   1189c:	f023 fded 	bl	3547a <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   118a0:	9505      	str	r5, [sp, #20]
   118a2:	7863      	ldrb	r3, [r4, #1]
   118a4:	9304      	str	r3, [sp, #16]
   118a6:	78a3      	ldrb	r3, [r4, #2]
   118a8:	9303      	str	r3, [sp, #12]
   118aa:	78e3      	ldrb	r3, [r4, #3]
   118ac:	9302      	str	r3, [sp, #8]
   118ae:	7923      	ldrb	r3, [r4, #4]
   118b0:	9301      	str	r3, [sp, #4]
   118b2:	7963      	ldrb	r3, [r4, #5]
   118b4:	9300      	str	r3, [sp, #0]
   118b6:	79a3      	ldrb	r3, [r4, #6]
   118b8:	4a0a      	ldr	r2, [pc, #40]	; (118e4 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
   118ba:	211e      	movs	r1, #30
   118bc:	4630      	mov	r0, r6
   118be:	f021 fa65 	bl	32d8c <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   118c2:	b00a      	add	sp, #40	; 0x28
   118c4:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   118c6:	4908      	ldr	r1, [pc, #32]	; (118e8 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
   118c8:	e7e7      	b.n	1189a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
   118ca:	4908      	ldr	r1, [pc, #32]	; (118ec <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
   118cc:	e7e5      	b.n	1189a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
   118ce:	4908      	ldr	r1, [pc, #32]	; (118f0 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
   118d0:	e7e3      	b.n	1189a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   118d2:	4a08      	ldr	r2, [pc, #32]	; (118f4 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
   118d4:	210a      	movs	r1, #10
   118d6:	4628      	mov	r0, r5
   118d8:	f021 fa58 	bl	32d8c <snprintk>
		break;
   118dc:	e7e0      	b.n	118a0 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
   118de:	bf00      	nop
   118e0:	0003b553 	.word	0x0003b553
   118e4:	0003b575 	.word	0x0003b575
   118e8:	0003b55a 	.word	0x0003b55a
   118ec:	0003b561 	.word	0x0003b561
   118f0:	0003b56b 	.word	0x0003b56b
   118f4:	0003e35e 	.word	0x0003e35e

000118f8 <auth_cancel>:

	printk("Passkey for %s: %06u\n", addr, passkey);
}

static void auth_cancel(struct bt_conn *conn)
{
   118f8:	b500      	push	{lr}
   118fa:	b089      	sub	sp, #36	; 0x24
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   118fc:	f024 fbca 	bl	36094 <bt_conn_get_dst>
   11900:	4669      	mov	r1, sp
   11902:	f7ff ffbd 	bl	11880 <bt_addr_le_to_str.constprop.0.isra.0>

	printk("Pairing cancelled: %s\n", addr);
   11906:	4803      	ldr	r0, [pc, #12]	; (11914 <auth_cancel+0x1c>)
   11908:	4669      	mov	r1, sp
   1190a:	f021 fa32 	bl	32d72 <printk>
}
   1190e:	b009      	add	sp, #36	; 0x24
   11910:	f85d fb04 	ldr.w	pc, [sp], #4
   11914:	0003b598 	.word	0x0003b598

00011918 <auth_passkey_display>:
{
   11918:	b510      	push	{r4, lr}
   1191a:	b088      	sub	sp, #32
   1191c:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   1191e:	f024 fbb9 	bl	36094 <bt_conn_get_dst>
   11922:	4669      	mov	r1, sp
   11924:	f7ff ffac 	bl	11880 <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Passkey for %s: %06u\n", addr, passkey);
   11928:	4803      	ldr	r0, [pc, #12]	; (11938 <auth_passkey_display+0x20>)
   1192a:	4622      	mov	r2, r4
   1192c:	4669      	mov	r1, sp
   1192e:	f021 fa20 	bl	32d72 <printk>
}
   11932:	b008      	add	sp, #32
   11934:	bd10      	pop	{r4, pc}
   11936:	bf00      	nop
   11938:	0003b5af 	.word	0x0003b5af

0001193c <main>:

static const struct gpio_dt_spec led = GPIO_DT_SPEC_GET(LED0_NODE, gpios);


void main(void)
{
   1193c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11940:	b08c      	sub	sp, #48	; 0x30
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   11942:	4c5b      	ldr	r4, [pc, #364]	; (11ab0 <main+0x174>)
   11944:	4620      	mov	r0, r4
   11946:	f026 fe19 	bl	3857c <z_device_is_ready>
		printk("\nError: Device \"%s\" is not ready; "
   1194a:	6821      	ldr	r1, [r4, #0]
	if (!device_is_ready(dev)) {
   1194c:	4605      	mov	r5, r0
   1194e:	bb50      	cbnz	r0, 119a6 <main+0x6a>
		printk("\nError: Device \"%s\" is not ready; "
   11950:	4858      	ldr	r0, [pc, #352]	; (11ab4 <main+0x178>)
   11952:	f021 fa0e 	bl	32d72 <printk>
		return NULL;
   11956:	462c      	mov	r4, r5
   11958:	f8df 815c 	ldr.w	r8, [pc, #348]	; 11ab8 <main+0x17c>
   1195c:	4640      	mov	r0, r8
   1195e:	f026 fe0d 	bl	3857c <z_device_is_ready>

	struct sensor_value temp, press;

	const struct device *dev = get_bme280_device();

	if (!gpio_is_ready_dt(&led)) {
   11962:	2800      	cmp	r0, #0
   11964:	f000 80a1 	beq.w	11aaa <main+0x16e>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   11968:	f8d8 2010 	ldr.w	r2, [r8, #16]
	const struct gpio_driver_api *api =
   1196c:	f8d8 1008 	ldr.w	r1, [r8, #8]

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
   11970:	6813      	ldr	r3, [r2, #0]
   11972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   11976:	6013      	str	r3, [r2, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
   11978:	680b      	ldr	r3, [r1, #0]
   1197a:	4a50      	ldr	r2, [pc, #320]	; (11abc <main+0x180>)
   1197c:	2118      	movs	r1, #24
   1197e:	4640      	mov	r0, r8
   11980:	4798      	blx	r3
		return;
	}

	err = gpio_pin_configure_dt(&led, GPIO_OUTPUT_ACTIVE);
	if (err < 0) {
   11982:	2800      	cmp	r0, #0
   11984:	f2c0 8091 	blt.w	11aaa <main+0x16e>
		return;
	}

	if (dev == NULL) {
   11988:	2c00      	cmp	r4, #0
   1198a:	f000 808e 	beq.w	11aaa <main+0x16e>
		return;
	}


	err = bt_enable(NULL);
   1198e:	2000      	movs	r0, #0
   11990:	f005 fe6e 	bl	17670 <bt_enable>
	if (err) {
   11994:	4607      	mov	r7, r0
   11996:	b150      	cbz	r0, 119ae <main+0x72>
		printk("Bluetooth init failed {err %d\n}",err);
   11998:	4601      	mov	r1, r0
   1199a:	4849      	ldr	r0, [pc, #292]	; (11ac0 <main+0x184>)
		bt_gatt_notify(NULL, &cp_cvs.attrs[2], &ct, sizeof(ct)); // temp
		bt_gatt_notify(NULL, &cp_cvs.attrs[1], &cp, sizeof(cp)); // press
		gpio_pin_toggle_dt(&led);
		k_sleep(K_SECONDS(5));
	}
   1199c:	b00c      	add	sp, #48	; 0x30
   1199e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		printk("Bluetooth init failed {err %d\n}",err);
   119a2:	f021 b9e6 	b.w	32d72 <printk>
	printk("Found device \"%s\", getting sensor data\n", dev->name);
   119a6:	4847      	ldr	r0, [pc, #284]	; (11ac4 <main+0x188>)
   119a8:	f021 f9e3 	bl	32d72 <printk>
	return dev;
   119ac:	e7d4      	b.n	11958 <main+0x1c>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
   119ae:	4e46      	ldr	r6, [pc, #280]	; (11ac8 <main+0x18c>)
	printk("Bluetooth initialized\n");
   119b0:	4846      	ldr	r0, [pc, #280]	; (11acc <main+0x190>)
   119b2:	f021 f9de 	bl	32d72 <printk>
		settings_load();
   119b6:	f022 fad2 	bl	33f5e <settings_load>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
   119ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   119bc:	ad06      	add	r5, sp, #24
   119be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   119c0:	6833      	ldr	r3, [r6, #0]
   119c2:	602b      	str	r3, [r5, #0]
   119c4:	4942      	ldr	r1, [pc, #264]	; (11ad0 <main+0x194>)
   119c6:	9700      	str	r7, [sp, #0]
   119c8:	463b      	mov	r3, r7
   119ca:	2202      	movs	r2, #2
   119cc:	a806      	add	r0, sp, #24
   119ce:	f006 ff2b 	bl	18828 <bt_le_adv_start>
	if (err) {
   119d2:	4601      	mov	r1, r0
   119d4:	2800      	cmp	r0, #0
   119d6:	d064      	beq.n	11aa2 <main+0x166>
		printk("Advertising failed to start (err %d)\n", err);
   119d8:	483e      	ldr	r0, [pc, #248]	; (11ad4 <main+0x198>)
   119da:	f021 f9ca 	bl	32d72 <printk>
	bt_gatt_cb_register(&gatt_callbacks);
   119de:	483e      	ldr	r0, [pc, #248]	; (11ad8 <main+0x19c>)
					       gpio_port_pins_t pins)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_toggle_bits(port, pins);
   119e0:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 11ab8 <main+0x17c>
   119e4:	f00a faac 	bl	1bf40 <bt_gatt_cb_register>
	bt_conn_auth_cb_register(&auth_cb_display);
   119e8:	483c      	ldr	r0, [pc, #240]	; (11adc <main+0x1a0>)
   119ea:	f008 f8a9 	bl	19b40 <bt_conn_auth_cb_register>
   119ee:	f8d8 a008 	ldr.w	sl, [r8, #8]
   119f2:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   119f6:	f8da 3014 	ldr.w	r3, [sl, #20]
   119fa:	4648      	mov	r0, r9
   119fc:	4798      	blx	r3
static inline int z_impl_sensor_sample_fetch(const struct device *dev)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
   119fe:	68a3      	ldr	r3, [r4, #8]
   11a00:	2139      	movs	r1, #57	; 0x39
   11a02:	68db      	ldr	r3, [r3, #12]
   11a04:	4620      	mov	r0, r4
   11a06:	4798      	blx	r3
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
   11a08:	68a3      	ldr	r3, [r4, #8]
   11a0a:	aa02      	add	r2, sp, #8
   11a0c:	691b      	ldr	r3, [r3, #16]
   11a0e:	210d      	movs	r1, #13
   11a10:	4620      	mov	r0, r4
   11a12:	4798      	blx	r3
   11a14:	68a3      	ldr	r3, [r4, #8]
		memcpy(&cp.integral, &press.val1, 1);
   11a16:	4e32      	ldr	r6, [pc, #200]	; (11ae0 <main+0x1a4>)
   11a18:	691b      	ldr	r3, [r3, #16]
		memcpy(&ct.integral, &temp.val1, 1);
   11a1a:	4f32      	ldr	r7, [pc, #200]	; (11ae4 <main+0x1a8>)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));

	params.attr = attr;
   11a1c:	4d32      	ldr	r5, [pc, #200]	; (11ae8 <main+0x1ac>)
   11a1e:	aa04      	add	r2, sp, #16
   11a20:	210e      	movs	r1, #14
   11a22:	4620      	mov	r0, r4
   11a24:	4798      	blx	r3
		memcpy(&cp.integral, &press.val1, 1);
   11a26:	a904      	add	r1, sp, #16
   11a28:	2201      	movs	r2, #1
   11a2a:	4630      	mov	r0, r6
   11a2c:	f023 fd83 	bl	35536 <memcpy>
		memcpy(&ct.integral, &temp.val1, 1);
   11a30:	a902      	add	r1, sp, #8
   11a32:	2201      	movs	r2, #1
   11a34:	4638      	mov	r0, r7
   11a36:	f023 fd7e 	bl	35536 <memcpy>
		memcpy(&cp.floating, &press.val2, 1);
   11a3a:	2201      	movs	r2, #1
   11a3c:	a905      	add	r1, sp, #20
   11a3e:	18b0      	adds	r0, r6, r2
   11a40:	f023 fd79 	bl	35536 <memcpy>
		memcpy(&ct.floating, &temp.val2, 1);
   11a44:	2201      	movs	r2, #1
   11a46:	a903      	add	r1, sp, #12
   11a48:	18b8      	adds	r0, r7, r2
   11a4a:	f023 fd74 	bl	35536 <memcpy>
	memset(&params, 0, sizeof(params));
   11a4e:	2218      	movs	r2, #24
   11a50:	eb0d 0002 	add.w	r0, sp, r2
   11a54:	2100      	movs	r1, #0
   11a56:	f023 fd79 	bl	3554c <memset>
	params.data = data;
   11a5a:	e9cd 5707 	strd	r5, r7, [sp, #28]
	params.len = len;
#if defined(CONFIG_BT_EATT)
	params.chan_opt = BT_ATT_CHAN_OPT_NONE;
#endif /* CONFIG_BT_EATT */

	return bt_gatt_notify_cb(conn, &params);
   11a5e:	a906      	add	r1, sp, #24
	params.len = len;
   11a60:	2702      	movs	r7, #2
	return bt_gatt_notify_cb(conn, &params);
   11a62:	2000      	movs	r0, #0
	params.len = len;
   11a64:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
	return bt_gatt_notify_cb(conn, &params);
   11a68:	f00a fef8 	bl	1c85c <bt_gatt_notify_cb>
	memset(&params, 0, sizeof(params));
   11a6c:	2218      	movs	r2, #24
   11a6e:	eb0d 0002 	add.w	r0, sp, r2
   11a72:	2100      	movs	r1, #0
   11a74:	f023 fd6a 	bl	3554c <memset>
	params.attr = attr;
   11a78:	3d14      	subs	r5, #20
	return bt_gatt_notify_cb(conn, &params);
   11a7a:	a906      	add	r1, sp, #24
   11a7c:	2000      	movs	r0, #0
	params.data = data;
   11a7e:	e9cd 5607 	strd	r5, r6, [sp, #28]
	params.len = len;
   11a82:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
	return bt_gatt_notify_cb(conn, &params);
   11a86:	f00a fee9 	bl	1c85c <bt_gatt_notify_cb>
   11a8a:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   11a8e:	f8da 3014 	ldr.w	r3, [sl, #20]
   11a92:	4648      	mov	r0, r9
   11a94:	4798      	blx	r3
	return z_impl_k_sleep(timeout);
   11a96:	2100      	movs	r1, #0
   11a98:	f44f 3020 	mov.w	r0, #163840	; 0x28000
   11a9c:	f020 fd22 	bl	324e4 <z_impl_k_sleep>
	while (1) {
   11aa0:	e7a5      	b.n	119ee <main+0xb2>
	printk("Advertising successfully started\n");
   11aa2:	4812      	ldr	r0, [pc, #72]	; (11aec <main+0x1b0>)
   11aa4:	f021 f965 	bl	32d72 <printk>
   11aa8:	e799      	b.n	119de <main+0xa2>
   11aaa:	b00c      	add	sp, #48	; 0x30
   11aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11ab0:	000392d0 	.word	0x000392d0
   11ab4:	0003b5c5 	.word	0x0003b5c5
   11ab8:	000391f8 	.word	0x000391f8
   11abc:	00060001 	.word	0x00060001
   11ac0:	0003b641 	.word	0x0003b641
   11ac4:	0003b619 	.word	0x0003b619
   11ac8:	00039720 	.word	0x00039720
   11acc:	0003b661 	.word	0x0003b661
   11ad0:	00039860 	.word	0x00039860
   11ad4:	0003b678 	.word	0x0003b678
   11ad8:	20000230 	.word	0x20000230
   11adc:	20000218 	.word	0x20000218
   11ae0:	2000329c 	.word	0x2000329c
   11ae4:	2000329e 	.word	0x2000329e
   11ae8:	00039810 	.word	0x00039810
   11aec:	0003b69e 	.word	0x0003b69e

00011af0 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   11af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11af4:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   11af6:	0784      	lsls	r4, r0, #30
{
   11af8:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   11afa:	f002 0304 	and.w	r3, r2, #4
   11afe:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   11b00:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   11b04:	f103 0301 	add.w	r3, r3, #1
   11b08:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
{
   11b0c:	9203      	str	r2, [sp, #12]
   11b0e:	4605      	mov	r5, r0
   11b10:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   11b12:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
   11b14:	f040 81be 	bne.w	11e94 <cbvprintf_package+0x3a4>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   11b18:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   11b1a:	b130      	cbz	r0, 11b2a <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   11b1c:	2907      	cmp	r1, #7
   11b1e:	d809      	bhi.n	11b34 <cbvprintf_package+0x44>
		return -ENOSPC;
   11b20:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   11b24:	b011      	add	sp, #68	; 0x44
   11b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   11b2a:	f001 0607 	and.w	r6, r1, #7
   11b2e:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   11b30:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
   11b34:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   11b36:	f04f 0900 	mov.w	r9, #0
	s = fmt--;
   11b3a:	1e59      	subs	r1, r3, #1
	align = VA_STACK_ALIGN(char *);
   11b3c:	f04f 0a04 	mov.w	sl, #4
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   11b40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11b44:	9301      	str	r3, [sp, #4]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   11b46:	f8cd 9010 	str.w	r9, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   11b4a:	464f      	mov	r7, r9
	bool parsing = false;
   11b4c:	46cb      	mov	fp, r9
	size = sizeof(char *);
   11b4e:	4653      	mov	r3, sl
			if (buf0 != NULL) {
   11b50:	b10d      	cbz	r5, 11b56 <cbvprintf_package+0x66>
				*(const char **)buf = s;
   11b52:	9a00      	ldr	r2, [sp, #0]
   11b54:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   11b56:	9805      	ldr	r0, [sp, #20]
   11b58:	2800      	cmp	r0, #0
   11b5a:	f300 80eb 	bgt.w	11d34 <cbvprintf_package+0x244>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   11b5e:	489a      	ldr	r0, [pc, #616]	; (11dc8 <cbvprintf_package+0x2d8>)
   11b60:	9a00      	ldr	r2, [sp, #0]
   11b62:	4282      	cmp	r2, r0
   11b64:	d303      	bcc.n	11b6e <cbvprintf_package+0x7e>
   11b66:	4899      	ldr	r0, [pc, #612]	; (11dcc <cbvprintf_package+0x2dc>)
   11b68:	4282      	cmp	r2, r0
   11b6a:	f0c0 80e3 	bcc.w	11d34 <cbvprintf_package+0x244>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   11b6e:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   11b70:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   11b74:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   11b76:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   11b7a:	f100 8106 	bmi.w	11d8a <cbvprintf_package+0x29a>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   11b7e:	2f0f      	cmp	r7, #15
   11b80:	f200 80b4 	bhi.w	11cec <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
   11b84:	2d00      	cmp	r5, #0
   11b86:	f000 8108 	beq.w	11d9a <cbvprintf_package+0x2aa>
					str_ptr_pos[s_idx] = s_ptr_idx;
   11b8a:	f107 0240 	add.w	r2, r7, #64	; 0x40
   11b8e:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
   11b92:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   11b94:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   11b98:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
   11b9c:	9804      	ldr	r0, [sp, #16]
   11b9e:	3001      	adds	r0, #1
   11ba0:	9004      	str	r0, [sp, #16]
   11ba2:	e0ea      	b.n	11d7a <cbvprintf_package+0x28a>
			switch (*fmt) {
   11ba4:	287a      	cmp	r0, #122	; 0x7a
   11ba6:	d860      	bhi.n	11c6a <cbvprintf_package+0x17a>
   11ba8:	284b      	cmp	r0, #75	; 0x4b
   11baa:	d80e      	bhi.n	11bca <cbvprintf_package+0xda>
   11bac:	2847      	cmp	r0, #71	; 0x47
   11bae:	d85c      	bhi.n	11c6a <cbvprintf_package+0x17a>
   11bb0:	2829      	cmp	r0, #41	; 0x29
   11bb2:	d82f      	bhi.n	11c14 <cbvprintf_package+0x124>
   11bb4:	2825      	cmp	r0, #37	; 0x25
   11bb6:	d055      	beq.n	11c64 <cbvprintf_package+0x174>
   11bb8:	d857      	bhi.n	11c6a <cbvprintf_package+0x17a>
   11bba:	2820      	cmp	r0, #32
   11bbc:	d07d      	beq.n	11cba <cbvprintf_package+0x1ca>
   11bbe:	3823      	subs	r0, #35	; 0x23
   11bc0:	f1d0 0b00 	rsbs	fp, r0, #0
   11bc4:	eb4b 0b00 	adc.w	fp, fp, r0
   11bc8:	e077      	b.n	11cba <cbvprintf_package+0x1ca>
   11bca:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
   11bce:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
   11bd2:	d84a      	bhi.n	11c6a <cbvprintf_package+0x17a>
   11bd4:	e8df f00c 	tbb	[pc, ip]
   11bd8:	49494971 	.word	0x49494971
   11bdc:	49494949 	.word	0x49494949
   11be0:	49494949 	.word	0x49494949
   11be4:	4949494c 	.word	0x4949494c
   11be8:	49494949 	.word	0x49494949
   11bec:	4c495a49 	.word	0x4c495a49
   11bf0:	5a5a5a4c 	.word	0x5a5a5a4c
   11bf4:	496e4c71 	.word	0x496e4c71
   11bf8:	4c184971 	.word	0x4c184971
   11bfc:	83494918 	.word	0x83494918
   11c00:	49494c80 	.word	0x49494c80
   11c04:	494c      	.short	0x494c
   11c06:	80          	.byte	0x80
   11c07:	00          	.byte	0x00
   11c08:	2000      	movs	r0, #0
   11c0a:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
   11c0e:	f04f 0a04 	mov.w	sl, #4
   11c12:	e039      	b.n	11c88 <cbvprintf_package+0x198>
			switch (*fmt) {
   11c14:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
   11c18:	fa5f fc8c 	uxtb.w	ip, ip
   11c1c:	2201      	movs	r2, #1
   11c1e:	fa02 fc0c 	lsl.w	ip, r2, ip
   11c22:	ea1c 0f0e 	tst.w	ip, lr
   11c26:	d148      	bne.n	11cba <cbvprintf_package+0x1ca>
   11c28:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
   11c2c:	d12e      	bne.n	11c8c <cbvprintf_package+0x19c>
   11c2e:	ea1c 0b02 	ands.w	fp, ip, r2
   11c32:	d042      	beq.n	11cba <cbvprintf_package+0x1ca>
		buf = (void *) ROUND_UP(buf, align);
   11c34:	3c01      	subs	r4, #1
   11c36:	4454      	add	r4, sl
   11c38:	f1ca 0c00 	rsb	ip, sl, #0
   11c3c:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   11c40:	2d00      	cmp	r5, #0
   11c42:	d061      	beq.n	11d08 <cbvprintf_package+0x218>
   11c44:	eba3 0c05 	sub.w	ip, r3, r5
   11c48:	44a4      	add	ip, r4
   11c4a:	45b4      	cmp	ip, r6
   11c4c:	f63f af68 	bhi.w	11b20 <cbvprintf_package+0x30>
		if (is_str_arg) {
   11c50:	2800      	cmp	r0, #0
   11c52:	d168      	bne.n	11d26 <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
   11c54:	2b04      	cmp	r3, #4
   11c56:	d147      	bne.n	11ce8 <cbvprintf_package+0x1f8>
			int v = va_arg(ap, int);
   11c58:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
   11c5c:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
   11c5e:	3404      	adds	r4, #4
   11c60:	2304      	movs	r3, #4
   11c62:	e02a      	b.n	11cba <cbvprintf_package+0x1ca>
				arg_idx--;
   11c64:	9a01      	ldr	r2, [sp, #4]
   11c66:	3a01      	subs	r2, #1
   11c68:	9201      	str	r2, [sp, #4]
				parsing = false;
   11c6a:	f04f 0b00 	mov.w	fp, #0
				continue;
   11c6e:	e024      	b.n	11cba <cbvprintf_package+0x1ca>
				if (fmt[-1] == 'l') {
   11c70:	f811 0c01 	ldrb.w	r0, [r1, #-1]
   11c74:	286c      	cmp	r0, #108	; 0x6c
   11c76:	d134      	bne.n	11ce2 <cbvprintf_package+0x1f2>
					if (fmt[-2] == 'l') {
   11c78:	f811 3c02 	ldrb.w	r3, [r1, #-2]
   11c7c:	2000      	movs	r0, #0
   11c7e:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
   11c80:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
   11c82:	d1c4      	bne.n	11c0e <cbvprintf_package+0x11e>
						align = VA_STACK_ALIGN(long long);
   11c84:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
   11c88:	4653      	mov	r3, sl
   11c8a:	e7d3      	b.n	11c34 <cbvprintf_package+0x144>
					v.ld = va_arg(ap, long double);
   11c8c:	f108 0807 	add.w	r8, r8, #7
   11c90:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
   11c94:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
   11c96:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				buf = (void *) ROUND_UP(buf, align);
   11c9a:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
   11c9e:	b135      	cbz	r5, 11cae <cbvprintf_package+0x1be>
					if (BUF_OFFSET + size > len) {
   11ca0:	9806      	ldr	r0, [sp, #24]
   11ca2:	4420      	add	r0, r4
   11ca4:	42b0      	cmp	r0, r6
   11ca6:	f63f af3b 	bhi.w	11b20 <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
   11caa:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
   11cae:	3408      	adds	r4, #8
				parsing = false;
   11cb0:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
   11cb4:	f04f 0a08 	mov.w	sl, #8
   11cb8:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
   11cba:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   11cbe:	2800      	cmp	r0, #0
   11cc0:	d078      	beq.n	11db4 <cbvprintf_package+0x2c4>
			if (!parsing) {
   11cc2:	f1bb 0f00 	cmp.w	fp, #0
   11cc6:	f47f af6d 	bne.w	11ba4 <cbvprintf_package+0xb4>
				if (*fmt == '%') {
   11cca:	2825      	cmp	r0, #37	; 0x25
   11ccc:	d1f5      	bne.n	11cba <cbvprintf_package+0x1ca>
					arg_idx++;
   11cce:	9b01      	ldr	r3, [sp, #4]
   11cd0:	3301      	adds	r3, #1
   11cd2:	9301      	str	r3, [sp, #4]
					parsing = true;
   11cd4:	f04f 0b01 	mov.w	fp, #1
				align = VA_STACK_ALIGN(size_t);
   11cd8:	f04f 0a04 	mov.w	sl, #4
   11cdc:	e7ec      	b.n	11cb8 <cbvprintf_package+0x1c8>
			switch (*fmt) {
   11cde:	4658      	mov	r0, fp
   11ce0:	e793      	b.n	11c0a <cbvprintf_package+0x11a>
   11ce2:	2000      	movs	r0, #0
				parsing = false;
   11ce4:	4683      	mov	fp, r0
   11ce6:	e7a5      	b.n	11c34 <cbvprintf_package+0x144>
		} else if (size == sizeof(long long)) {
   11ce8:	2b08      	cmp	r3, #8
   11cea:	d002      	beq.n	11cf2 <cbvprintf_package+0x202>
					return -EINVAL;
   11cec:	f06f 0015 	mvn.w	r0, #21
   11cf0:	e718      	b.n	11b24 <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
   11cf2:	f108 0807 	add.w	r8, r8, #7
   11cf6:	f028 0807 	bic.w	r8, r8, #7
   11cfa:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
   11cfe:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
   11d02:	3408      	adds	r4, #8
   11d04:	2308      	movs	r3, #8
   11d06:	e7d8      	b.n	11cba <cbvprintf_package+0x1ca>
		if (is_str_arg) {
   11d08:	b968      	cbnz	r0, 11d26 <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
   11d0a:	2b04      	cmp	r3, #4
   11d0c:	d102      	bne.n	11d14 <cbvprintf_package+0x224>
			int v = va_arg(ap, int);
   11d0e:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
   11d12:	e7a4      	b.n	11c5e <cbvprintf_package+0x16e>
		} else if (size == sizeof(long long)) {
   11d14:	2b08      	cmp	r3, #8
   11d16:	d1e9      	bne.n	11cec <cbvprintf_package+0x1fc>
			long long v = va_arg(ap, long long);
   11d18:	f108 0807 	add.w	r8, r8, #7
   11d1c:	f028 0807 	bic.w	r8, r8, #7
   11d20:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
   11d24:	e7ed      	b.n	11d02 <cbvprintf_package+0x212>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   11d26:	9a05      	ldr	r2, [sp, #20]
   11d28:	3a01      	subs	r2, #1
   11d2a:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
   11d2c:	f858 2b04 	ldr.w	r2, [r8], #4
   11d30:	9200      	str	r2, [sp, #0]
   11d32:	e70d      	b.n	11b50 <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
   11d34:	9a03      	ldr	r2, [sp, #12]
   11d36:	0790      	lsls	r0, r2, #30
   11d38:	d520      	bpl.n	11d7c <cbvprintf_package+0x28c>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   11d3a:	eba4 0e05 	sub.w	lr, r4, r5
   11d3e:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   11d42:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   11d46:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   11d4a:	d2cf      	bcs.n	11cec <cbvprintf_package+0x1fc>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   11d4c:	2f0f      	cmp	r7, #15
   11d4e:	d8cd      	bhi.n	11cec <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
   11d50:	b1f5      	cbz	r5, 11d90 <cbvprintf_package+0x2a0>
					str_ptr_pos[s_idx] = s_ptr_idx;
   11d52:	f107 0240 	add.w	r2, r7, #64	; 0x40
   11d56:	eb0d 0e02 	add.w	lr, sp, r2
   11d5a:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
   11d5c:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   11d5e:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   11d62:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
   11d66:	f1bc 0f00 	cmp.w	ip, #0
   11d6a:	f43f af17 	beq.w	11b9c <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   11d6e:	f060 007f 	orn	r0, r0, #127	; 0x7f
   11d72:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
   11d76:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
   11d7a:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
   11d7c:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
   11d80:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
   11d82:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
   11d84:	f64f 7eda 	movw	lr, #65498	; 0xffda
   11d88:	e797      	b.n	11cba <cbvprintf_package+0x1ca>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   11d8a:	f04f 0c00 	mov.w	ip, #0
   11d8e:	e7da      	b.n	11d46 <cbvprintf_package+0x256>
				} else if (is_ro) {
   11d90:	f1bc 0f00 	cmp.w	ip, #0
   11d94:	d001      	beq.n	11d9a <cbvprintf_package+0x2aa>
					len += 1;
   11d96:	3601      	adds	r6, #1
   11d98:	e7ef      	b.n	11d7a <cbvprintf_package+0x28a>
				} else if (rws_pos_en) {
   11d9a:	9802      	ldr	r0, [sp, #8]
					len += 2;
   11d9c:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
   11d9e:	2800      	cmp	r0, #0
   11da0:	d1eb      	bne.n	11d7a <cbvprintf_package+0x28a>
					len += strlen(s) + 1 + 1;
   11da2:	9800      	ldr	r0, [sp, #0]
   11da4:	e9cd 3106 	strd	r3, r1, [sp, #24]
   11da8:	f023 fb85 	bl	354b6 <strlen>
   11dac:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
   11db0:	4406      	add	r6, r0
   11db2:	e7e2      	b.n	11d7a <cbvprintf_package+0x28a>
	if (BUF_OFFSET / sizeof(int) > 255) {
   11db4:	1b63      	subs	r3, r4, r5
   11db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   11dba:	d297      	bcs.n	11cec <cbvprintf_package+0x1fc>
	if (buf0 == NULL) {
   11dbc:	b945      	cbnz	r5, 11dd0 <cbvprintf_package+0x2e0>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   11dbe:	f1a6 0408 	sub.w	r4, r6, #8
   11dc2:	18e0      	adds	r0, r4, r3
   11dc4:	e6ae      	b.n	11b24 <cbvprintf_package+0x34>
   11dc6:	bf00      	nop
   11dc8:	00039108 	.word	0x00039108
   11dcc:	0003f1a0 	.word	0x0003f1a0
	if (rws_pos_en) {
   11dd0:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
   11dd2:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   11dd4:	089b      	lsrs	r3, r3, #2
   11dd6:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   11dd8:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
   11ddc:	b1c2      	cbz	r2, 11e10 <cbvprintf_package+0x320>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   11dde:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   11de0:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
   11de4:	f1b9 0f00 	cmp.w	r9, #0
   11de8:	d005      	beq.n	11df6 <cbvprintf_package+0x306>
   11dea:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
   11dec:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
   11dee:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
   11df2:	4297      	cmp	r7, r2
   11df4:	d10e      	bne.n	11e14 <cbvprintf_package+0x324>
		if (BUF_OFFSET + 1 + size > len) {
   11df6:	f1c5 0301 	rsb	r3, r5, #1
   11dfa:	f10d 0820 	add.w	r8, sp, #32
			*buf++ = str_ptr_arg[i];
   11dfe:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
   11e02:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
   11e04:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
   11e08:	4557      	cmp	r7, sl
   11e0a:	d112      	bne.n	11e32 <cbvprintf_package+0x342>
	return BUF_OFFSET;
   11e0c:	1b60      	subs	r0, r4, r5
   11e0e:	e689      	b.n	11b24 <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   11e10:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   11e12:	e7e5      	b.n	11de0 <cbvprintf_package+0x2f0>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   11e14:	f810 3b01 	ldrb.w	r3, [r0], #1
   11e18:	0619      	lsls	r1, r3, #24
   11e1a:	d508      	bpl.n	11e2e <cbvprintf_package+0x33e>
			if (BUF_OFFSET + 1 > len) {
   11e1c:	eb04 0e0c 	add.w	lr, r4, ip
   11e20:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   11e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   11e26:	f63f ae7b 	bhi.w	11b20 <cbvprintf_package+0x30>
			*buf++ = pos;
   11e2a:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
   11e2e:	3201      	adds	r2, #1
   11e30:	e7df      	b.n	11df2 <cbvprintf_package+0x302>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   11e32:	f1b9 0f00 	cmp.w	r9, #0
   11e36:	d003      	beq.n	11e40 <cbvprintf_package+0x350>
   11e38:	f998 2000 	ldrsb.w	r2, [r8]
   11e3c:	2a00      	cmp	r2, #0
   11e3e:	db17      	blt.n	11e70 <cbvprintf_package+0x380>
		if (rws_pos_en) {
   11e40:	9b02      	ldr	r3, [sp, #8]
   11e42:	b1d3      	cbz	r3, 11e7a <cbvprintf_package+0x38a>
			*buf++ = str_ptr_arg[i];
   11e44:	f81a 200b 	ldrb.w	r2, [sl, fp]
   11e48:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
   11e4c:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
   11e4e:	9b01      	ldr	r3, [sp, #4]
   11e50:	1898      	adds	r0, r3, r2
   11e52:	4420      	add	r0, r4
   11e54:	42b0      	cmp	r0, r6
   11e56:	f63f ae63 	bhi.w	11b20 <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
   11e5a:	f898 0000 	ldrb.w	r0, [r8]
   11e5e:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
   11e62:	9900      	ldr	r1, [sp, #0]
   11e64:	9203      	str	r2, [sp, #12]
   11e66:	4620      	mov	r0, r4
   11e68:	f023 fb65 	bl	35536 <memcpy>
		buf += size;
   11e6c:	9a03      	ldr	r2, [sp, #12]
   11e6e:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
   11e70:	f10a 0a01 	add.w	sl, sl, #1
   11e74:	f108 0801 	add.w	r8, r8, #1
   11e78:	e7c6      	b.n	11e08 <cbvprintf_package+0x318>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   11e7a:	f898 2000 	ldrb.w	r2, [r8]
   11e7e:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   11e82:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   11e84:	9b02      	ldr	r3, [sp, #8]
   11e86:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
   11e8a:	9800      	ldr	r0, [sp, #0]
   11e8c:	f023 fb13 	bl	354b6 <strlen>
   11e90:	1c42      	adds	r2, r0, #1
   11e92:	e7dc      	b.n	11e4e <cbvprintf_package+0x35e>
		return -EFAULT;
   11e94:	f06f 000d 	mvn.w	r0, #13
   11e98:	e644      	b.n	11b24 <cbvprintf_package+0x34>
   11e9a:	bf00      	nop

00011e9c <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
   11e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ea0:	b095      	sub	sp, #84	; 0x54
   11ea2:	af00      	add	r7, sp, #0
   11ea4:	4604      	mov	r4, r0
   11ea6:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
   11eaa:	61bb      	str	r3, [r7, #24]
   11eac:	f3cb 03c0 	ubfx	r3, fp, #3, #1
   11eb0:	627a      	str	r2, [r7, #36]	; 0x24
   11eb2:	613b      	str	r3, [r7, #16]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   11eb4:	6239      	str	r1, [r7, #32]
   11eb6:	b951      	cbnz	r1, 11ece <cbprintf_package_convert+0x32>
	buf += ros_nbr;
   11eb8:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
   11eba:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
   11ebc:	7880      	ldrb	r0, [r0, #2]
   11ebe:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   11ec2:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
   11ec4:	460d      	mov	r5, r1
   11ec6:	42ae      	cmp	r6, r5
   11ec8:	d81a      	bhi.n	11f00 <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
   11eca:	1b03      	subs	r3, r0, r4
   11ecc:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
   11ece:	f894 9002 	ldrb.w	r9, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
   11ed2:	78e3      	ldrb	r3, [r4, #3]
   11ed4:	617b      	str	r3, [r7, #20]
	ros_nbr = in_desc->ro_str_cnt;
   11ed6:	464e      	mov	r6, r9
	ro_cpy = ros_nbr &&
   11ed8:	f1b9 0f00 	cmp.w	r9, #0
   11edc:	d002      	beq.n	11ee4 <cbprintf_package_convert+0x48>
   11ede:	f01b 0f01 	tst.w	fp, #1
   11ee2:	d116      	bne.n	11f12 <cbprintf_package_convert+0x76>
	rw_cpy = rws_nbr > 0 &&
   11ee4:	697b      	ldr	r3, [r7, #20]
   11ee6:	bb53      	cbnz	r3, 11f3e <cbprintf_package_convert+0xa2>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
   11ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11eea:	b11b      	cbz	r3, 11ef4 <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
   11eec:	69ba      	ldr	r2, [r7, #24]
   11eee:	6a39      	ldr	r1, [r7, #32]
   11ef0:	4620      	mov	r0, r4
   11ef2:	4798      	blx	r3
		}

		return in_len;
   11ef4:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
   11ef6:	4628      	mov	r0, r5
   11ef8:	3754      	adds	r7, #84	; 0x54
   11efa:	46bd      	mov	sp, r7
   11efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
   11f00:	f100 0801 	add.w	r8, r0, #1
		buf += strlen((const char *)buf) + 1;
   11f04:	4640      	mov	r0, r8
   11f06:	f023 fad6 	bl	354b6 <strlen>
   11f0a:	3001      	adds	r0, #1
   11f0c:	4440      	add	r0, r8
	for (int i = 0; i < s_nbr; i++) {
   11f0e:	3501      	adds	r5, #1
   11f10:	e7d9      	b.n	11ec6 <cbprintf_package_convert+0x2a>
	rw_cpy = rws_nbr > 0 &&
   11f12:	f894 a000 	ldrb.w	sl, [r4]
   11f16:	6863      	ldr	r3, [r4, #4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   11f18:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   11f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
   11f1c:	ea4f 028a 	mov.w	r2, sl, lsl #2
   11f20:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
   11f22:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	if (cb == NULL) {
   11f26:	2b00      	cmp	r3, #0
   11f28:	f040 8103 	bne.w	12132 <cbprintf_package_convert+0x296>
		out_len = (int)in_len;
   11f2c:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
   11f2e:	46d0      	mov	r8, sl
   11f30:	eb09 030a 	add.w	r3, r9, sl
	size_t strl_cnt = 0;
   11f34:	2600      	movs	r6, #0
			for (int i = 0; i < ros_nbr; i++) {
   11f36:	4543      	cmp	r3, r8
   11f38:	d150      	bne.n	11fdc <cbprintf_package_convert+0x140>
   11f3a:	44ca      	add	sl, r9
   11f3c:	e013      	b.n	11f66 <cbprintf_package_convert+0xca>
	rw_cpy = rws_nbr > 0 &&
   11f3e:	f01b 0f02 	tst.w	fp, #2
   11f42:	d0d1      	beq.n	11ee8 <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
   11f44:	f894 a000 	ldrb.w	sl, [r4]
   11f48:	ea4f 038a 	mov.w	r3, sl, lsl #2
   11f4c:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   11f4e:	6863      	ldr	r3, [r4, #4]
   11f50:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   11f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
   11f54:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	if (cb == NULL) {
   11f58:	2b00      	cmp	r3, #0
   11f5a:	d17a      	bne.n	12052 <cbprintf_package_convert+0x1b6>
		out_len = (int)in_len;
   11f5c:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   11f5e:	f1b9 0f00 	cmp.w	r9, #0
   11f62:	d150      	bne.n	12006 <cbprintf_package_convert+0x16a>
	size_t strl_cnt = 0;
   11f64:	464e      	mov	r6, r9
		for (int i = 0; i < rws_nbr; i++) {
   11f66:	f01b 0f05 	tst.w	fp, #5
   11f6a:	bf0c      	ite	eq
   11f6c:	2302      	moveq	r3, #2
   11f6e:	2301      	movne	r3, #1
   11f70:	627b      	str	r3, [r7, #36]	; 0x24
   11f72:	697b      	ldr	r3, [r7, #20]
   11f74:	eb0a 0943 	add.w	r9, sl, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   11f78:	f00b 0302 	and.w	r3, fp, #2
   11f7c:	623b      	str	r3, [r7, #32]
		for (int i = 0; i < rws_nbr; i++) {
   11f7e:	45ca      	cmp	sl, r9
   11f80:	d0b9      	beq.n	11ef6 <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
   11f82:	f81a 1b02 	ldrb.w	r1, [sl], #2
			const char *str = *(const char **)&buf32[arg_pos];
   11f86:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
   11f8a:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
   11f8e:	4bae      	ldr	r3, [pc, #696]	; (12248 <cbprintf_package_convert+0x3ac>)
   11f90:	4598      	cmp	r8, r3
   11f92:	d302      	bcc.n	11f9a <cbprintf_package_convert+0xfe>
   11f94:	4bad      	ldr	r3, [pc, #692]	; (1224c <cbprintf_package_convert+0x3b0>)
   11f96:	4598      	cmp	r8, r3
   11f98:	d33b      	bcc.n	12012 <cbprintf_package_convert+0x176>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   11f9a:	693b      	ldr	r3, [r7, #16]
   11f9c:	2b00      	cmp	r3, #0
   11f9e:	d045      	beq.n	1202c <cbprintf_package_convert+0x190>
   11fa0:	69f8      	ldr	r0, [r7, #28]
   11fa2:	f020 fe31 	bl	32c08 <is_ptr>
   11fa6:	2800      	cmp	r0, #0
   11fa8:	d040      	beq.n	1202c <cbprintf_package_convert+0x190>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   11faa:	46e8      	mov	r8, sp
   11fac:	b08a      	sub	sp, #40	; 0x28
   11fae:	466a      	mov	r2, sp
   11fb0:	4ba7      	ldr	r3, [pc, #668]	; (12250 <cbprintf_package_convert+0x3b4>)
   11fb2:	6153      	str	r3, [r2, #20]
   11fb4:	4ba7      	ldr	r3, [pc, #668]	; (12254 <cbprintf_package_convert+0x3b8>)
   11fb6:	6193      	str	r3, [r2, #24]
   11fb8:	69fb      	ldr	r3, [r7, #28]
   11fba:	e9c2 3107 	strd	r3, r1, [r2, #28]
   11fbe:	f240 3301 	movw	r3, #769	; 0x301
   11fc2:	8493      	strh	r3, [r2, #36]	; 0x24
   11fc4:	4ba4      	ldr	r3, [pc, #656]	; (12258 <cbprintf_package_convert+0x3bc>)
   11fc6:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
   11fca:	48a4      	ldr	r0, [pc, #656]	; (1225c <cbprintf_package_convert+0x3c0>)
   11fcc:	2300      	movs	r3, #0
   11fce:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
   11fd2:	f001 f8cf 	bl	13174 <z_impl_z_log_msg_static_create>
				out_len -= 2;
   11fd6:	3d02      	subs	r5, #2
   11fd8:	46c5      	mov	sp, r8
				continue;
   11fda:	e7d0      	b.n	11f7e <cbprintf_package_convert+0xe2>
				const char *str = *(const char **)&buf32[*str_pos];
   11fdc:	f818 2b01 	ldrb.w	r2, [r8], #1
   11fe0:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
   11fe2:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
   11fe6:	f023 fa66 	bl	354b6 <strlen>
				if (strl && strl_cnt < strl_len) {
   11fea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   11fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
   11fee:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
   11ff0:	b13a      	cbz	r2, 12002 <cbprintf_package_convert+0x166>
   11ff2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   11ff6:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
   11ff8:	bf3e      	ittt	cc
   11ffa:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
   11ffc:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
   12000:	3601      	addcc	r6, #1
				out_len += len;
   12002:	4405      	add	r5, r0
			for (int i = 0; i < ros_nbr; i++) {
   12004:	e797      	b.n	11f36 <cbprintf_package_convert+0x9a>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   12006:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
   1200a:	bf1c      	itt	ne
   1200c:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
   1200e:	44ca      	addne	sl, r9
   12010:	e7a9      	b.n	11f66 <cbprintf_package_convert+0xca>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   12012:	693b      	ldr	r3, [r7, #16]
   12014:	b123      	cbz	r3, 12020 <cbprintf_package_convert+0x184>
   12016:	69f8      	ldr	r0, [r7, #28]
   12018:	f020 fdf6 	bl	32c08 <is_ptr>
   1201c:	2800      	cmp	r0, #0
   1201e:	d1c4      	bne.n	11faa <cbprintf_package_convert+0x10e>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   12020:	f01b 0f01 	tst.w	fp, #1
   12024:	d105      	bne.n	12032 <cbprintf_package_convert+0x196>
					out_len -= drop_ro_str_pos ? 2 : 1;
   12026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12028:	1aed      	subs	r5, r5, r3
   1202a:	e7a8      	b.n	11f7e <cbprintf_package_convert+0xe2>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   1202c:	6a3b      	ldr	r3, [r7, #32]
   1202e:	2b00      	cmp	r3, #0
   12030:	d0a5      	beq.n	11f7e <cbprintf_package_convert+0xe2>
		return 1 + strlen(str);
   12032:	4640      	mov	r0, r8
   12034:	f023 fa3f 	bl	354b6 <strlen>
				if (strl && strl_cnt < strl_len) {
   12038:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1203a:	b143      	cbz	r3, 1204e <cbprintf_package_convert+0x1b2>
   1203c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12040:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
   12042:	bf3f      	itttt	cc
   12044:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
   12046:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
   12048:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
   1204c:	3601      	addcc	r6, #1
				out_len += (len - 1);
   1204e:	4405      	add	r5, r0
		for (int i = 0; i < rws_nbr; i++) {
   12050:	e795      	b.n	11f7e <cbprintf_package_convert+0xe2>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   12052:	f1b9 0f00 	cmp.w	r9, #0
   12056:	d071      	beq.n	1213c <cbprintf_package_convert+0x2a0>
   12058:	f01b 0604 	ands.w	r6, fp, #4
   1205c:	d071      	beq.n	12142 <cbprintf_package_convert+0x2a6>
		keep_cnt = ros_nbr;
   1205e:	46c8      	mov	r8, r9
		scpy_cnt = 0;
   12060:	2600      	movs	r6, #0
		dst = keep_str_pos;
   12062:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
   12066:	464a      	mov	r2, r9
   12068:	4651      	mov	r1, sl
   1206a:	f023 fa64 	bl	35536 <memcpy>
	str_pos += ros_nbr;
   1206e:	697b      	ldr	r3, [r7, #20]
   12070:	005b      	lsls	r3, r3, #1
   12072:	60bb      	str	r3, [r7, #8]
   12074:	697b      	ldr	r3, [r7, #20]
   12076:	44ca      	add	sl, r9
	for (int i = 0; i < rws_nbr; i++) {
   12078:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
   1207c:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   1207e:	f00b 0302 	and.w	r3, fp, #2
   12082:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < rws_nbr; i++) {
   12084:	697b      	ldr	r3, [r7, #20]
   12086:	459a      	cmp	sl, r3
   12088:	d15d      	bne.n	12146 <cbprintf_package_convert+0x2aa>
	out_desc.len = in_desc->len;
   1208a:	7823      	ldrb	r3, [r4, #0]
   1208c:	61fb      	str	r3, [r7, #28]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   1208e:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   12090:	f01b 0f02 	tst.w	fp, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   12094:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   12098:	bf0c      	ite	eq
   1209a:	ea4f 0158 	moveq.w	r1, r8, lsr #1
   1209e:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   120a0:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   120a4:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   120a6:	f040 809d 	bne.w	121e4 <cbprintf_package_convert+0x348>
   120aa:	f01b 0f04 	tst.w	fp, #4
   120ae:	bf14      	ite	ne
   120b0:	4640      	movne	r0, r8
   120b2:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
   120b4:	f894 b002 	ldrb.w	fp, [r4, #2]
   120b8:	f894 a003 	ldrb.w	sl, [r4, #3]
   120bc:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
   120be:	7062      	strb	r2, [r4, #1]
   120c0:	70a0      	strb	r0, [r4, #2]
   120c2:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
   120c4:	69ba      	ldr	r2, [r7, #24]
   120c6:	68f9      	ldr	r1, [r7, #12]
   120c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   120ca:	4620      	mov	r0, r4
   120cc:	4798      	blx	r3
	if (rv < 0) {
   120ce:	1e05      	subs	r5, r0, #0
   120d0:	f6ff af11 	blt.w	11ef6 <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
   120d4:	69fb      	ldr	r3, [r7, #28]
   120d6:	7023      	strb	r3, [r4, #0]
   120d8:	693b      	ldr	r3, [r7, #16]
   120da:	7063      	strb	r3, [r4, #1]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   120dc:	4641      	mov	r1, r8
   120de:	69ba      	ldr	r2, [r7, #24]
   120e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
   120e2:	f884 b002 	strb.w	fp, [r4, #2]
   120e6:	f884 a003 	strb.w	sl, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   120ea:	f107 0040 	add.w	r0, r7, #64	; 0x40
   120ee:	4798      	blx	r3
	if (rv < 0) {
   120f0:	f1b0 0800 	subs.w	r8, r0, #0
   120f4:	f2c0 80a3 	blt.w	1223e <cbprintf_package_convert+0x3a2>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   120f8:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
   120fa:	69ba      	ldr	r2, [r7, #24]
   120fc:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   120fe:	eba3 0109 	sub.w	r1, r3, r9
   12102:	68fb      	ldr	r3, [r7, #12]
   12104:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
   12106:	68bb      	ldr	r3, [r7, #8]
   12108:	1ac9      	subs	r1, r1, r3
   1210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1210c:	4798      	blx	r3
	if (rv < 0) {
   1210e:	2800      	cmp	r0, #0
   12110:	f2c0 8097 	blt.w	12242 <cbprintf_package_convert+0x3a6>
	out_len += rv;
   12114:	44a8      	add	r8, r5
	out_len += rv;
   12116:	eb08 0500 	add.w	r5, r8, r0
	for (int i = 0; i < scpy_cnt; i++) {
   1211a:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
   1211e:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (int i = 0; i < scpy_cnt; i++) {
   12122:	45b3      	cmp	fp, r6
   12124:	db60      	blt.n	121e8 <cbprintf_package_convert+0x34c>
	(void)cb(NULL, 0, ctx);
   12126:	2100      	movs	r1, #0
   12128:	69ba      	ldr	r2, [r7, #24]
   1212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1212c:	4608      	mov	r0, r1
   1212e:	4798      	blx	r3
	return out_len;
   12130:	e6e1      	b.n	11ef6 <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
   12132:	f107 0030 	add.w	r0, r7, #48	; 0x30
   12136:	f04f 0800 	mov.w	r8, #0
   1213a:	e794      	b.n	12066 <cbprintf_package_convert+0x1ca>
		scpy_cnt = 0;
   1213c:	464e      	mov	r6, r9
		keep_cnt = 0;
   1213e:	46c8      	mov	r8, r9
   12140:	e795      	b.n	1206e <cbprintf_package_convert+0x1d2>
   12142:	46b0      	mov	r8, r6
   12144:	e793      	b.n	1206e <cbprintf_package_convert+0x1d2>
		uint8_t arg_idx = *str_pos++;
   12146:	f81a 1b02 	ldrb.w	r1, [sl], #2
   1214a:	4a3f      	ldr	r2, [pc, #252]	; (12248 <cbprintf_package_convert+0x3ac>)
		uint8_t arg_pos = *str_pos++;
   1214c:	f81a 5c01 	ldrb.w	r5, [sl, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
   12150:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   12154:	4293      	cmp	r3, r2
   12156:	d302      	bcc.n	1215e <cbprintf_package_convert+0x2c2>
   12158:	4a3c      	ldr	r2, [pc, #240]	; (1224c <cbprintf_package_convert+0x3b0>)
   1215a:	4293      	cmp	r3, r2
   1215c:	d31c      	bcc.n	12198 <cbprintf_package_convert+0x2fc>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   1215e:	693b      	ldr	r3, [r7, #16]
   12160:	b123      	cbz	r3, 1216c <cbprintf_package_convert+0x2d0>
   12162:	69f8      	ldr	r0, [r7, #28]
   12164:	f020 fd50 	bl	32c08 <is_ptr>
   12168:	2800      	cmp	r0, #0
   1216a:	d18b      	bne.n	12084 <cbprintf_package_convert+0x1e8>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   1216c:	687b      	ldr	r3, [r7, #4]
   1216e:	b9f3      	cbnz	r3, 121ae <cbprintf_package_convert+0x312>
				keep_str_pos[keep_cnt++] = arg_idx;
   12170:	f108 0228 	add.w	r2, r8, #40	; 0x28
   12174:	f107 0028 	add.w	r0, r7, #40	; 0x28
   12178:	4402      	add	r2, r0
   1217a:	f108 0301 	add.w	r3, r8, #1
   1217e:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
   12182:	f107 0250 	add.w	r2, r7, #80	; 0x50
   12186:	fa52 f383 	uxtab	r3, r2, r3
   1218a:	f108 0802 	add.w	r8, r8, #2
   1218e:	fa5f f888 	uxtb.w	r8, r8
   12192:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (int i = 0; i < rws_nbr; i++) {
   12196:	e775      	b.n	12084 <cbprintf_package_convert+0x1e8>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   12198:	693b      	ldr	r3, [r7, #16]
   1219a:	b12b      	cbz	r3, 121a8 <cbprintf_package_convert+0x30c>
   1219c:	69f8      	ldr	r0, [r7, #28]
   1219e:	f020 fd33 	bl	32c08 <is_ptr>
   121a2:	2800      	cmp	r0, #0
   121a4:	f47f af6e 	bne.w	12084 <cbprintf_package_convert+0x1e8>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   121a8:	f01b 0f01 	tst.w	fp, #1
   121ac:	d009      	beq.n	121c2 <cbprintf_package_convert+0x326>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   121ae:	f106 0228 	add.w	r2, r6, #40	; 0x28
   121b2:	f107 0128 	add.w	r1, r7, #40	; 0x28
   121b6:	1c73      	adds	r3, r6, #1
   121b8:	1856      	adds	r6, r2, r1
   121ba:	f806 5c20 	strb.w	r5, [r6, #-32]
   121be:	b2de      	uxtb	r6, r3
   121c0:	e760      	b.n	12084 <cbprintf_package_convert+0x1e8>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   121c2:	f01b 0f04 	tst.w	fp, #4
   121c6:	f43f af5d 	beq.w	12084 <cbprintf_package_convert+0x1e8>
				keep_str_pos[keep_cnt++] = arg_pos;
   121ca:	f108 0228 	add.w	r2, r8, #40	; 0x28
   121ce:	f107 0128 	add.w	r1, r7, #40	; 0x28
   121d2:	f108 0301 	add.w	r3, r8, #1
   121d6:	eb02 0801 	add.w	r8, r2, r1
   121da:	f808 5c10 	strb.w	r5, [r8, #-16]
   121de:	fa5f f883 	uxtb.w	r8, r3
   121e2:	e74f      	b.n	12084 <cbprintf_package_convert+0x1e8>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   121e4:	2000      	movs	r0, #0
   121e6:	e765      	b.n	120b4 <cbprintf_package_convert+0x218>
		uint8_t loc = cpy_str_pos[i];
   121e8:	f81b 300a 	ldrb.w	r3, [fp, sl]
   121ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *str = *(const char **)&buf32[loc];
   121f0:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
   121f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   121f6:	b1fb      	cbz	r3, 12238 <cbprintf_package_convert+0x39c>
   121f8:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
   121fc:	69ba      	ldr	r2, [r7, #24]
   121fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12200:	2101      	movs	r1, #1
   12202:	f107 002f 	add.w	r0, r7, #47	; 0x2f
   12206:	4798      	blx	r3
		if (rv < 0) {
   12208:	2800      	cmp	r0, #0
   1220a:	db1a      	blt.n	12242 <cbprintf_package_convert+0x3a6>
		out_len += rv;
   1220c:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   1220e:	f1b8 0f00 	cmp.w	r8, #0
   12212:	d106      	bne.n	12222 <cbprintf_package_convert+0x386>
   12214:	4648      	mov	r0, r9
   12216:	f023 f94e 	bl	354b6 <strlen>
   1221a:	f100 0801 	add.w	r8, r0, #1
   1221e:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
   12222:	69ba      	ldr	r2, [r7, #24]
   12224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12226:	4641      	mov	r1, r8
   12228:	4648      	mov	r0, r9
   1222a:	4798      	blx	r3
		if (rv < 0) {
   1222c:	2800      	cmp	r0, #0
   1222e:	db08      	blt.n	12242 <cbprintf_package_convert+0x3a6>
		out_len += rv;
   12230:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
   12232:	f10b 0b01 	add.w	fp, fp, #1
   12236:	e774      	b.n	12122 <cbprintf_package_convert+0x286>
		uint16_t str_len = strl ? strl[i] : 0;
   12238:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
   1223c:	e7de      	b.n	121fc <cbprintf_package_convert+0x360>
   1223e:	4645      	mov	r5, r8
   12240:	e659      	b.n	11ef6 <cbprintf_package_convert+0x5a>
   12242:	4605      	mov	r5, r0
   12244:	e657      	b.n	11ef6 <cbprintf_package_convert+0x5a>
   12246:	bf00      	nop
   12248:	00039108 	.word	0x00039108
   1224c:	0003f1a0 	.word	0x0003f1a0
   12250:	0003b6c0 	.word	0x0003b6c0
   12254:	0003b767 	.word	0x0003b767
   12258:	01000005 	.word	0x01000005
   1225c:	00039600 	.word	0x00039600

00012260 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
   12260:	4b01      	ldr	r3, [pc, #4]	; (12268 <__printk_hook_install+0x8>)
   12262:	6018      	str	r0, [r3, #0]
}
   12264:	4770      	bx	lr
   12266:	bf00      	nop
   12268:	20000238 	.word	0x20000238

0001226c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   1226c:	b530      	push	{r4, r5, lr}
   1226e:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   12270:	2500      	movs	r5, #0
   12272:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   12276:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   12278:	9500      	str	r5, [sp, #0]
   1227a:	a903      	add	r1, sp, #12
   1227c:	4805      	ldr	r0, [pc, #20]	; (12294 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   1227e:	9505      	str	r5, [sp, #20]
   12280:	f000 f92e 	bl	124e0 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   12284:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   12288:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   1228a:	bfb8      	it	lt
   1228c:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   1228e:	b007      	add	sp, #28
   12290:	bd30      	pop	{r4, r5, pc}
   12292:	bf00      	nop
   12294:	00032d49 	.word	0x00032d49

00012298 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   12298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1229c:	8b05      	ldrh	r5, [r0, #24]
{
   1229e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   122a0:	0728      	lsls	r0, r5, #28
{
   122a2:	4690      	mov	r8, r2
	if (processing) {
   122a4:	d411      	bmi.n	122ca <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   122a6:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   122a8:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   122ac:	f040 80cd 	bne.w	1244a <process_event+0x1b2>
			evt = process_recheck(mgr);
   122b0:	4620      	mov	r0, r4
   122b2:	f020 ff47 	bl	33144 <process_recheck>
		}

		if (evt == EVT_NOP) {
   122b6:	b178      	cbz	r0, 122d8 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   122b8:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   122ba:	8b21      	ldrh	r1, [r4, #24]
   122bc:	2804      	cmp	r0, #4
   122be:	d811      	bhi.n	122e4 <process_event+0x4c>
   122c0:	e8df f000 	tbb	[pc, r0]
   122c4:	856d10c3 	.word	0x856d10c3
   122c8:	95          	.byte	0x95
   122c9:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
   122ca:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   122cc:	bf0c      	ite	eq
   122ce:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   122d2:	f045 0520 	orrne.w	r5, r5, #32
   122d6:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   122d8:	f388 8811 	msr	BASEPRI, r8
   122dc:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   122e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   122e4:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   122e8:	45aa      	cmp	sl, r5
   122ea:	f000 80a6 	beq.w	1243a <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
   122ee:	2700      	movs	r7, #0
   122f0:	46b9      	mov	r9, r7
   122f2:	463e      	mov	r6, r7
   122f4:	68a3      	ldr	r3, [r4, #8]
   122f6:	2b00      	cmp	r3, #0
   122f8:	f000 80bd 	beq.w	12476 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   122fc:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   12300:	8321      	strh	r1, [r4, #24]
   12302:	f388 8811 	msr	BASEPRI, r8
   12306:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   1230a:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1230c:	2900      	cmp	r1, #0
   1230e:	f000 80bb 	beq.w	12488 <process_event+0x1f0>
	return node->next;
   12312:	680d      	ldr	r5, [r1, #0]
   12314:	2900      	cmp	r1, #0
   12316:	f000 80b7 	beq.w	12488 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
   1231a:	f8d1 8004 	ldr.w	r8, [r1, #4]
   1231e:	4633      	mov	r3, r6
   12320:	4652      	mov	r2, sl
   12322:	4620      	mov	r0, r4
   12324:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   12326:	2d00      	cmp	r5, #0
   12328:	d076      	beq.n	12418 <process_event+0x180>
   1232a:	682b      	ldr	r3, [r5, #0]
   1232c:	4629      	mov	r1, r5
   1232e:	461d      	mov	r5, r3
   12330:	e7f0      	b.n	12314 <process_event+0x7c>
   12332:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   12336:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   12338:	2a01      	cmp	r2, #1
   1233a:	d81b      	bhi.n	12374 <process_event+0xdc>
	list->head = NULL;
   1233c:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1233e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   12342:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   12344:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12346:	b289      	uxth	r1, r1
	list->tail = NULL;
   12348:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   1234c:	d109      	bne.n	12362 <process_event+0xca>
   1234e:	463b      	mov	r3, r7
   12350:	e003      	b.n	1235a <process_event+0xc2>
				mgr->refs += 1U;
   12352:	8b62      	ldrh	r2, [r4, #26]
   12354:	3201      	adds	r2, #1
   12356:	8362      	strh	r2, [r4, #26]
	return node->next;
   12358:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1235a:	2b00      	cmp	r3, #0
   1235c:	d1f9      	bne.n	12352 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1235e:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   12362:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   12364:	4620      	mov	r0, r4
   12366:	f020 feed 	bl	33144 <process_recheck>
   1236a:	2800      	cmp	r0, #0
   1236c:	d07b      	beq.n	12466 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1236e:	f041 0120 	orr.w	r1, r1, #32
   12372:	e077      	b.n	12464 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
   12374:	2b04      	cmp	r3, #4
   12376:	d10a      	bne.n	1238e <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12378:	f021 0107 	bic.w	r1, r1, #7
   1237c:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   1237e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   12380:	4620      	mov	r0, r4
   12382:	f020 fedf 	bl	33144 <process_recheck>
   12386:	b110      	cbz	r0, 1238e <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12388:	f041 0120 	orr.w	r1, r1, #32
   1238c:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1238e:	8b21      	ldrh	r1, [r4, #24]
   12390:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   12394:	45aa      	cmp	sl, r5
   12396:	d050      	beq.n	1243a <process_event+0x1a2>
   12398:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
   1239a:	46b9      	mov	r9, r7
   1239c:	e7aa      	b.n	122f4 <process_event+0x5c>
			transit = mgr->transitions->start;
   1239e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   123a0:	f021 0107 	bic.w	r1, r1, #7
   123a4:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   123a8:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
   123aa:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
   123ae:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   123b0:	d12d      	bne.n	1240e <process_event+0x176>
		    || (transit != NULL)) {
   123b2:	f1b9 0f00 	cmp.w	r9, #0
   123b6:	d040      	beq.n	1243a <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   123b8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   123bc:	8321      	strh	r1, [r4, #24]
   123be:	f388 8811 	msr	BASEPRI, r8
   123c2:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
   123c6:	493a      	ldr	r1, [pc, #232]	; (124b0 <process_event+0x218>)
   123c8:	4620      	mov	r0, r4
   123ca:	47c8      	blx	r9
   123cc:	e029      	b.n	12422 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   123ce:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
   123d2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   123d4:	f041 0104 	orr.w	r1, r1, #4
   123d8:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   123da:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
   123dc:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
   123e0:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   123e2:	d0e6      	beq.n	123b2 <process_event+0x11a>
   123e4:	2700      	movs	r7, #0
		res = 0;
   123e6:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   123e8:	f04f 0a04 	mov.w	sl, #4
   123ec:	e782      	b.n	122f4 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   123ee:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
   123f2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   123f4:	f041 0105 	orr.w	r1, r1, #5
   123f8:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   123fa:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
   123fc:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
   12400:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   12402:	d0d6      	beq.n	123b2 <process_event+0x11a>
   12404:	2700      	movs	r7, #0
		res = 0;
   12406:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12408:	f04f 0a05 	mov.w	sl, #5
   1240c:	e772      	b.n	122f4 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
   1240e:	2700      	movs	r7, #0
		res = 0;
   12410:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12412:	f04f 0a06 	mov.w	sl, #6
   12416:	e76d      	b.n	122f4 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   12418:	462b      	mov	r3, r5
   1241a:	e787      	b.n	1232c <process_event+0x94>
			if (transit != NULL) {
   1241c:	f1b9 0f00 	cmp.w	r9, #0
   12420:	d1d1      	bne.n	123c6 <process_event+0x12e>
	__asm__ volatile(
   12422:	f04f 0320 	mov.w	r3, #32
   12426:	f3ef 8811 	mrs	r8, BASEPRI
   1242a:	f383 8812 	msr	BASEPRI_MAX, r3
   1242e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   12432:	8b23      	ldrh	r3, [r4, #24]
   12434:	f023 0308 	bic.w	r3, r3, #8
   12438:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   1243a:	8b25      	ldrh	r5, [r4, #24]
   1243c:	06ea      	lsls	r2, r5, #27
   1243e:	d52e      	bpl.n	1249e <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   12440:	f025 0310 	bic.w	r3, r5, #16
   12444:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   12446:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
   1244a:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1244c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   1244e:	2e00      	cmp	r6, #0
   12450:	f6bf af6f 	bge.w	12332 <process_event+0x9a>
	list->head = NULL;
   12454:	2300      	movs	r3, #0
		*clients = mgr->clients;
   12456:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   12458:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1245c:	f021 0107 	bic.w	r1, r1, #7
   12460:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12464:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12466:	8b21      	ldrh	r1, [r4, #24]
   12468:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1246c:	45aa      	cmp	sl, r5
   1246e:	f04f 0900 	mov.w	r9, #0
   12472:	f47f af3f 	bne.w	122f4 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
   12476:	2f00      	cmp	r7, #0
   12478:	d09b      	beq.n	123b2 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   1247a:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   1247e:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
   12480:	f388 8811 	msr	BASEPRI, r8
   12484:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
   12488:	2f00      	cmp	r7, #0
   1248a:	d0c7      	beq.n	1241c <process_event+0x184>
	return node->next;
   1248c:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
   1248e:	4639      	mov	r1, r7
   12490:	4633      	mov	r3, r6
   12492:	4652      	mov	r2, sl
   12494:	4620      	mov	r0, r4
   12496:	f020 fe81 	bl	3319c <notify_one>
	list->head = node;
   1249a:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
   1249c:	e7f4      	b.n	12488 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   1249e:	06ab      	lsls	r3, r5, #26
   124a0:	f57f af1a 	bpl.w	122d8 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   124a4:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   124a8:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   124aa:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   124ae:	e6ff      	b.n	122b0 <process_event+0x18>
   124b0:	000331c9 	.word	0x000331c9

000124b4 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   124b4:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   124b6:	4c09      	ldr	r4, [pc, #36]	; (124dc <crc8_ccitt+0x28>)
   124b8:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   124ba:	4291      	cmp	r1, r2
   124bc:	d100      	bne.n	124c0 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   124be:	bd10      	pop	{r4, pc}
		val ^= p[i];
   124c0:	f811 3b01 	ldrb.w	r3, [r1], #1
   124c4:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   124c6:	0903      	lsrs	r3, r0, #4
   124c8:	0100      	lsls	r0, r0, #4
   124ca:	5ce3      	ldrb	r3, [r4, r3]
   124cc:	b2c0      	uxtb	r0, r0
   124ce:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   124d0:	0918      	lsrs	r0, r3, #4
   124d2:	011b      	lsls	r3, r3, #4
   124d4:	5c20      	ldrb	r0, [r4, r0]
   124d6:	b2db      	uxtb	r3, r3
   124d8:	4058      	eors	r0, r3
	for (i = 0; i < cnt; i++) {
   124da:	e7ee      	b.n	124ba <crc8_ccitt+0x6>
   124dc:	0003b791 	.word	0x0003b791

000124e0 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   124e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124e4:	4681      	mov	r9, r0
   124e6:	b095      	sub	sp, #84	; 0x54
   124e8:	468b      	mov	fp, r1
   124ea:	4617      	mov	r7, r2
   124ec:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   124ee:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   124f0:	7838      	ldrb	r0, [r7, #0]
   124f2:	b908      	cbnz	r0, 124f8 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
   124f4:	4628      	mov	r0, r5
   124f6:	e358      	b.n	12baa <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
   124f8:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
   124fa:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   124fc:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
   124fe:	d006      	beq.n	1250e <z_cbvprintf_impl+0x2e>
			OUTC('%');
   12500:	4659      	mov	r1, fp
   12502:	47c8      	blx	r9
   12504:	2800      	cmp	r0, #0
   12506:	f2c0 8350 	blt.w	12baa <z_cbvprintf_impl+0x6ca>
   1250a:	3501      	adds	r5, #1
		if (bps == NULL) {
   1250c:	e1fb      	b.n	12906 <z_cbvprintf_impl+0x426>
		} state = {
   1250e:	2218      	movs	r2, #24
   12510:	2100      	movs	r1, #0
   12512:	a80e      	add	r0, sp, #56	; 0x38
   12514:	f023 f81a 	bl	3554c <memset>
	if (*sp == '%') {
   12518:	787b      	ldrb	r3, [r7, #1]
   1251a:	2b25      	cmp	r3, #37	; 0x25
   1251c:	d07d      	beq.n	1261a <z_cbvprintf_impl+0x13a>
   1251e:	2300      	movs	r3, #0
   12520:	1c78      	adds	r0, r7, #1
   12522:	4698      	mov	r8, r3
   12524:	469e      	mov	lr, r3
   12526:	469c      	mov	ip, r3
   12528:	461e      	mov	r6, r3
   1252a:	4601      	mov	r1, r0
		switch (*sp) {
   1252c:	f810 2b01 	ldrb.w	r2, [r0], #1
   12530:	2a2b      	cmp	r2, #43	; 0x2b
   12532:	f000 80a1 	beq.w	12678 <z_cbvprintf_impl+0x198>
   12536:	f200 8098 	bhi.w	1266a <z_cbvprintf_impl+0x18a>
   1253a:	2a20      	cmp	r2, #32
   1253c:	f000 809f 	beq.w	1267e <z_cbvprintf_impl+0x19e>
   12540:	2a23      	cmp	r2, #35	; 0x23
   12542:	f000 809f 	beq.w	12684 <z_cbvprintf_impl+0x1a4>
   12546:	b12b      	cbz	r3, 12554 <z_cbvprintf_impl+0x74>
   12548:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1254c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12550:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   12554:	f1b8 0f00 	cmp.w	r8, #0
   12558:	d005      	beq.n	12566 <z_cbvprintf_impl+0x86>
   1255a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1255e:	f043 0320 	orr.w	r3, r3, #32
   12562:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   12566:	f1be 0f00 	cmp.w	lr, #0
   1256a:	d005      	beq.n	12578 <z_cbvprintf_impl+0x98>
   1256c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12570:	f043 0310 	orr.w	r3, r3, #16
   12574:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   12578:	f1bc 0f00 	cmp.w	ip, #0
   1257c:	d005      	beq.n	1258a <z_cbvprintf_impl+0xaa>
   1257e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12582:	f043 0308 	orr.w	r3, r3, #8
   12586:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   1258a:	b12e      	cbz	r6, 12598 <z_cbvprintf_impl+0xb8>
   1258c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12590:	f043 0304 	orr.w	r3, r3, #4
   12594:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
   12598:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1259c:	f003 0044 	and.w	r0, r3, #68	; 0x44
   125a0:	2844      	cmp	r0, #68	; 0x44
   125a2:	d103      	bne.n	125ac <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
   125a4:	f36f 1386 	bfc	r3, #6, #1
   125a8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
   125ac:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   125b0:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   125b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   125b6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   125ba:	d17f      	bne.n	126bc <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
   125bc:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   125c0:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
   125c4:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   125c6:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
   125ca:	781a      	ldrb	r2, [r3, #0]
   125cc:	2a2e      	cmp	r2, #46	; 0x2e
   125ce:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   125d2:	bf0c      	ite	eq
   125d4:	2101      	moveq	r1, #1
   125d6:	2100      	movne	r1, #0
   125d8:	f361 0241 	bfi	r2, r1, #1, #1
   125dc:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
   125e0:	d178      	bne.n	126d4 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
   125e2:	785a      	ldrb	r2, [r3, #1]
   125e4:	2a2a      	cmp	r2, #42	; 0x2a
   125e6:	d06e      	beq.n	126c6 <z_cbvprintf_impl+0x1e6>
	++sp;
   125e8:	3301      	adds	r3, #1
	size_t val = 0;
   125ea:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   125ec:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   125f0:	4619      	mov	r1, r3
   125f2:	f811 0b01 	ldrb.w	r0, [r1], #1
   125f6:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   125fa:	2e09      	cmp	r6, #9
   125fc:	f240 8095 	bls.w	1272a <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
   12600:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
   12604:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
   12606:	f3c1 0040 	ubfx	r0, r1, #1, #1
   1260a:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
   1260e:	460a      	mov	r2, r1
   12610:	f360 0241 	bfi	r2, r0, #1, #1
   12614:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   12618:	e05c      	b.n	126d4 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
   1261a:	1cba      	adds	r2, r7, #2
   1261c:	9203      	str	r2, [sp, #12]
   1261e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
   12622:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   12626:	07da      	lsls	r2, r3, #31
   12628:	f140 812e 	bpl.w	12888 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
   1262c:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   12630:	f1b8 0f00 	cmp.w	r8, #0
   12634:	da07      	bge.n	12646 <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
   12636:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   1263a:	f042 0204 	orr.w	r2, r2, #4
   1263e:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
   12642:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
   12646:	075e      	lsls	r6, r3, #29
   12648:	f140 8127 	bpl.w	1289a <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
   1264c:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
   12650:	f1ba 0f00 	cmp.w	sl, #0
   12654:	f280 8126 	bge.w	128a4 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
   12658:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   1265c:	f36f 0341 	bfc	r3, #1, #1
   12660:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
   12664:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   12668:	e11c      	b.n	128a4 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
   1266a:	2a2d      	cmp	r2, #45	; 0x2d
   1266c:	d00d      	beq.n	1268a <z_cbvprintf_impl+0x1aa>
   1266e:	2a30      	cmp	r2, #48	; 0x30
   12670:	f47f af69 	bne.w	12546 <z_cbvprintf_impl+0x66>
   12674:	2301      	movs	r3, #1
	} while (loop);
   12676:	e758      	b.n	1252a <z_cbvprintf_impl+0x4a>
		switch (*sp) {
   12678:	f04f 0c01 	mov.w	ip, #1
   1267c:	e755      	b.n	1252a <z_cbvprintf_impl+0x4a>
   1267e:	f04f 0e01 	mov.w	lr, #1
   12682:	e752      	b.n	1252a <z_cbvprintf_impl+0x4a>
   12684:	f04f 0801 	mov.w	r8, #1
   12688:	e74f      	b.n	1252a <z_cbvprintf_impl+0x4a>
   1268a:	2601      	movs	r6, #1
   1268c:	e74d      	b.n	1252a <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
   1268e:	fb0e 6202 	mla	r2, lr, r2, r6
   12692:	3a30      	subs	r2, #48	; 0x30
   12694:	4603      	mov	r3, r0
   12696:	4618      	mov	r0, r3
   12698:	f810 6b01 	ldrb.w	r6, [r0], #1
   1269c:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   126a0:	f1bc 0f09 	cmp.w	ip, #9
   126a4:	d9f3      	bls.n	1268e <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
   126a6:	4299      	cmp	r1, r3
   126a8:	d08f      	beq.n	125ca <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   126aa:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
   126ae:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
   126b0:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   126b2:	f362 0141 	bfi	r1, r2, #1, #1
   126b6:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
   126ba:	e786      	b.n	125ca <z_cbvprintf_impl+0xea>
   126bc:	460b      	mov	r3, r1
	size_t val = 0;
   126be:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   126c0:	f04f 0e0a 	mov.w	lr, #10
   126c4:	e7e7      	b.n	12696 <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
   126c6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   126ca:	f042 0204 	orr.w	r2, r2, #4
   126ce:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
   126d2:	3302      	adds	r3, #2
	switch (*sp) {
   126d4:	781a      	ldrb	r2, [r3, #0]
   126d6:	2a6c      	cmp	r2, #108	; 0x6c
   126d8:	d047      	beq.n	1276a <z_cbvprintf_impl+0x28a>
   126da:	d82b      	bhi.n	12734 <z_cbvprintf_impl+0x254>
   126dc:	2a68      	cmp	r2, #104	; 0x68
   126de:	d031      	beq.n	12744 <z_cbvprintf_impl+0x264>
   126e0:	2a6a      	cmp	r2, #106	; 0x6a
   126e2:	d04b      	beq.n	1277c <z_cbvprintf_impl+0x29c>
   126e4:	2a4c      	cmp	r2, #76	; 0x4c
   126e6:	d051      	beq.n	1278c <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
   126e8:	461a      	mov	r2, r3
   126ea:	f812 3b01 	ldrb.w	r3, [r2], #1
   126ee:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
   126f0:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
   126f2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
   126f6:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
   126fa:	f200 80be 	bhi.w	1287a <z_cbvprintf_impl+0x39a>
   126fe:	2b6d      	cmp	r3, #109	; 0x6d
   12700:	d851      	bhi.n	127a6 <z_cbvprintf_impl+0x2c6>
   12702:	2b69      	cmp	r3, #105	; 0x69
   12704:	f200 80b9 	bhi.w	1287a <z_cbvprintf_impl+0x39a>
   12708:	2b57      	cmp	r3, #87	; 0x57
   1270a:	d867      	bhi.n	127dc <z_cbvprintf_impl+0x2fc>
   1270c:	2b41      	cmp	r3, #65	; 0x41
   1270e:	d003      	beq.n	12718 <z_cbvprintf_impl+0x238>
   12710:	3b45      	subs	r3, #69	; 0x45
   12712:	2b02      	cmp	r3, #2
   12714:	f200 80b1 	bhi.w	1287a <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
   12718:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   1271c:	2204      	movs	r2, #4
   1271e:	f362 0302 	bfi	r3, r2, #0, #3
   12722:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
   12726:	2301      	movs	r3, #1
			break;
   12728:	e073      	b.n	12812 <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
   1272a:	fb0c 0202 	mla	r2, ip, r2, r0
   1272e:	3a30      	subs	r2, #48	; 0x30
   12730:	460b      	mov	r3, r1
   12732:	e75d      	b.n	125f0 <z_cbvprintf_impl+0x110>
	switch (*sp) {
   12734:	2a74      	cmp	r2, #116	; 0x74
   12736:	d025      	beq.n	12784 <z_cbvprintf_impl+0x2a4>
   12738:	2a7a      	cmp	r2, #122	; 0x7a
   1273a:	d1d5      	bne.n	126e8 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
   1273c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12740:	2106      	movs	r1, #6
   12742:	e00c      	b.n	1275e <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
   12744:	785a      	ldrb	r2, [r3, #1]
   12746:	2a68      	cmp	r2, #104	; 0x68
   12748:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   1274c:	d106      	bne.n	1275c <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
   1274e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   12750:	f361 02c6 	bfi	r2, r1, #3, #4
   12754:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
   12758:	3302      	adds	r3, #2
   1275a:	e7c5      	b.n	126e8 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
   1275c:	2102      	movs	r1, #2
   1275e:	f361 02c6 	bfi	r2, r1, #3, #4
   12762:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
   12766:	3301      	adds	r3, #1
   12768:	e7be      	b.n	126e8 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
   1276a:	785a      	ldrb	r2, [r3, #1]
   1276c:	2a6c      	cmp	r2, #108	; 0x6c
   1276e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12772:	d101      	bne.n	12778 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
   12774:	2104      	movs	r1, #4
   12776:	e7eb      	b.n	12750 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
   12778:	2103      	movs	r1, #3
   1277a:	e7f0      	b.n	1275e <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
   1277c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12780:	2105      	movs	r1, #5
   12782:	e7ec      	b.n	1275e <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
   12784:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12788:	2107      	movs	r1, #7
   1278a:	e7e8      	b.n	1275e <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
   1278c:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
   12790:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   12794:	f022 0202 	bic.w	r2, r2, #2
   12798:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   1279c:	f042 0202 	orr.w	r2, r2, #2
   127a0:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
   127a4:	e7df      	b.n	12766 <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
   127a6:	3b6e      	subs	r3, #110	; 0x6e
   127a8:	b2d9      	uxtb	r1, r3
   127aa:	2301      	movs	r3, #1
   127ac:	408b      	lsls	r3, r1
   127ae:	f240 4182 	movw	r1, #1154	; 0x482
   127b2:	420b      	tst	r3, r1
   127b4:	d137      	bne.n	12826 <z_cbvprintf_impl+0x346>
   127b6:	f013 0f24 	tst.w	r3, #36	; 0x24
   127ba:	d151      	bne.n	12860 <z_cbvprintf_impl+0x380>
   127bc:	07d8      	lsls	r0, r3, #31
   127be:	d55c      	bpl.n	1287a <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
   127c0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   127c4:	2103      	movs	r1, #3
   127c6:	f361 0302 	bfi	r3, r1, #0, #3
   127ca:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   127ce:	f002 0378 	and.w	r3, r2, #120	; 0x78
   127d2:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
   127d6:	424b      	negs	r3, r1
   127d8:	414b      	adcs	r3, r1
   127da:	e01a      	b.n	12812 <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
   127dc:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
   127e0:	b2c9      	uxtb	r1, r1
   127e2:	2001      	movs	r0, #1
   127e4:	fa00 f101 	lsl.w	r1, r0, r1
   127e8:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   127ec:	d194      	bne.n	12718 <z_cbvprintf_impl+0x238>
   127ee:	f640 0601 	movw	r6, #2049	; 0x801
   127f2:	4231      	tst	r1, r6
   127f4:	d11d      	bne.n	12832 <z_cbvprintf_impl+0x352>
   127f6:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   127fa:	d03e      	beq.n	1287a <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
   127fc:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12800:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   12804:	f002 0278 	and.w	r2, r2, #120	; 0x78
   12808:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
   1280a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   1280e:	d034      	beq.n	1287a <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
   12810:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
   12812:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   12816:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1281a:	430b      	orrs	r3, r1
   1281c:	f363 0241 	bfi	r2, r3, #1, #1
   12820:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   12824:	e6fd      	b.n	12622 <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
   12826:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   1282a:	2102      	movs	r1, #2
   1282c:	f361 0302 	bfi	r3, r1, #0, #3
   12830:	e7e8      	b.n	12804 <z_cbvprintf_impl+0x324>
   12832:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
   12836:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
   12838:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   1283c:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   12840:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   12842:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
   12846:	bf02      	ittt	eq
   12848:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
   1284c:	f041 0101 	orreq.w	r1, r1, #1
   12850:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
   12854:	2b63      	cmp	r3, #99	; 0x63
   12856:	d1db      	bne.n	12810 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
   12858:	1e13      	subs	r3, r2, #0
   1285a:	bf18      	it	ne
   1285c:	2301      	movne	r3, #1
   1285e:	e7d8      	b.n	12812 <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
   12860:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12864:	2103      	movs	r1, #3
   12866:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   1286a:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   1286e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
   12872:	bf14      	ite	ne
   12874:	2301      	movne	r3, #1
   12876:	2300      	moveq	r3, #0
   12878:	e7cb      	b.n	12812 <z_cbvprintf_impl+0x332>
		conv->invalid = true;
   1287a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1287e:	f043 0301 	orr.w	r3, r3, #1
   12882:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
   12886:	e7c3      	b.n	12810 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
   12888:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
   1288c:	2a00      	cmp	r2, #0
			width = conv->width_value;
   1288e:	bfb4      	ite	lt
   12890:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
   12894:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
   12898:	e6d5      	b.n	12646 <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
   1289a:	0798      	lsls	r0, r3, #30
   1289c:	f57f aee2 	bpl.w	12664 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
   128a0:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
   128a4:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
   128a8:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   128aa:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
   128ae:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
   128b2:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   128b6:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   128b8:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   128bc:	d133      	bne.n	12926 <z_cbvprintf_impl+0x446>
			switch (length_mod) {
   128be:	1ecb      	subs	r3, r1, #3
   128c0:	2b04      	cmp	r3, #4
   128c2:	d804      	bhi.n	128ce <z_cbvprintf_impl+0x3ee>
   128c4:	e8df f003 	tbb	[pc, r3]
   128c8:	21464621 	.word	0x21464621
   128cc:	21          	.byte	0x21
   128cd:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   128ce:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   128d0:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
   128d2:	ea4f 72e3 	mov.w	r2, r3, asr #31
   128d6:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   128da:	d11c      	bne.n	12916 <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
   128dc:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
   128e0:	17da      	asrs	r2, r3, #31
   128e2:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
   128e6:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   128e8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   128ec:	f013 0603 	ands.w	r6, r3, #3
   128f0:	d050      	beq.n	12994 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
   128f2:	9b03      	ldr	r3, [sp, #12]
   128f4:	463a      	mov	r2, r7
   128f6:	4659      	mov	r1, fp
   128f8:	4648      	mov	r0, r9
   128fa:	f020 fd76 	bl	333ea <outs>
   128fe:	2800      	cmp	r0, #0
   12900:	f2c0 8153 	blt.w	12baa <z_cbvprintf_impl+0x6ca>
   12904:	4405      	add	r5, r0
			continue;
   12906:	9f03      	ldr	r7, [sp, #12]
   12908:	e5f2      	b.n	124f0 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1290a:	f854 3b04 	ldr.w	r3, [r4], #4
   1290e:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
   12910:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
   12914:	e7e8      	b.n	128e8 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
   12916:	2902      	cmp	r1, #2
   12918:	d1e5      	bne.n	128e6 <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
   1291a:	b21a      	sxth	r2, r3
   1291c:	f343 33c0 	sbfx	r3, r3, #15, #1
   12920:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   12924:	e7df      	b.n	128e6 <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
   12926:	2b02      	cmp	r3, #2
   12928:	d124      	bne.n	12974 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
   1292a:	1ecb      	subs	r3, r1, #3
   1292c:	2b04      	cmp	r3, #4
   1292e:	d804      	bhi.n	1293a <z_cbvprintf_impl+0x45a>
   12930:	e8df f003 	tbb	[pc, r3]
   12934:	18101018 	.word	0x18101018
   12938:	18          	.byte	0x18
   12939:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   1293a:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
   1293c:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   12940:	f04f 0200 	mov.w	r2, #0
   12944:	d014      	beq.n	12970 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
   12946:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
   12948:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
   1294c:	d1cc      	bne.n	128e8 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
   1294e:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   12950:	930e      	str	r3, [sp, #56]	; 0x38
   12952:	e7c9      	b.n	128e8 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
   12954:	3407      	adds	r4, #7
   12956:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   1295a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   1295e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   12962:	e7c1      	b.n	128e8 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
   12964:	f854 3b04 	ldr.w	r3, [r4], #4
   12968:	930e      	str	r3, [sp, #56]	; 0x38
   1296a:	2300      	movs	r3, #0
   1296c:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
   1296e:	e7bb      	b.n	128e8 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
   12970:	b2db      	uxtb	r3, r3
   12972:	e7cd      	b.n	12910 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
   12974:	2b04      	cmp	r3, #4
   12976:	d108      	bne.n	1298a <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
   12978:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   1297a:	f024 0407 	bic.w	r4, r4, #7
   1297e:	e9d4 2300 	ldrd	r2, r3, [r4]
   12982:	3408      	adds	r4, #8
   12984:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   12988:	e7ae      	b.n	128e8 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
   1298a:	2b03      	cmp	r3, #3
   1298c:	d1ac      	bne.n	128e8 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
   1298e:	f854 3b04 	ldr.w	r3, [r4], #4
   12992:	e7dd      	b.n	12950 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
   12994:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   12998:	2878      	cmp	r0, #120	; 0x78
   1299a:	d8b4      	bhi.n	12906 <z_cbvprintf_impl+0x426>
   1299c:	2862      	cmp	r0, #98	; 0x62
   1299e:	d81c      	bhi.n	129da <z_cbvprintf_impl+0x4fa>
   129a0:	2825      	cmp	r0, #37	; 0x25
   129a2:	f43f adad 	beq.w	12500 <z_cbvprintf_impl+0x20>
   129a6:	2858      	cmp	r0, #88	; 0x58
   129a8:	d1ad      	bne.n	12906 <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
   129aa:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   129ae:	9300      	str	r3, [sp, #0]
   129b0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   129b4:	ab08      	add	r3, sp, #32
   129b6:	aa10      	add	r2, sp, #64	; 0x40
   129b8:	f020 fcd1 	bl	3335e <encode_uint>
			if (precision >= 0) {
   129bc:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
   129c0:	4607      	mov	r7, r0
			if (precision >= 0) {
   129c2:	f280 809a 	bge.w	12afa <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
   129c6:	2f00      	cmp	r7, #0
   129c8:	d09d      	beq.n	12906 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   129ca:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   129ce:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
   129d0:	2e00      	cmp	r6, #0
   129d2:	f000 80c1 	beq.w	12b58 <z_cbvprintf_impl+0x678>
			nj_len += 1U;
   129d6:	3001      	adds	r0, #1
   129d8:	e0be      	b.n	12b58 <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
   129da:	3863      	subs	r0, #99	; 0x63
   129dc:	2815      	cmp	r0, #21
   129de:	d892      	bhi.n	12906 <z_cbvprintf_impl+0x426>
   129e0:	a201      	add	r2, pc, #4	; (adr r2, 129e8 <z_cbvprintf_impl+0x508>)
   129e2:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   129e6:	bf00      	nop
   129e8:	00012abd 	.word	0x00012abd
   129ec:	00012acf 	.word	0x00012acf
   129f0:	00012907 	.word	0x00012907
   129f4:	00012907 	.word	0x00012907
   129f8:	00012907 	.word	0x00012907
   129fc:	00012907 	.word	0x00012907
   12a00:	00012acf 	.word	0x00012acf
   12a04:	00012907 	.word	0x00012907
   12a08:	00012907 	.word	0x00012907
   12a0c:	00012907 	.word	0x00012907
   12a10:	00012907 	.word	0x00012907
   12a14:	00012b5d 	.word	0x00012b5d
   12a18:	00012af5 	.word	0x00012af5
   12a1c:	00012b1b 	.word	0x00012b1b
   12a20:	00012907 	.word	0x00012907
   12a24:	00012907 	.word	0x00012907
   12a28:	00012a41 	.word	0x00012a41
   12a2c:	00012907 	.word	0x00012907
   12a30:	00012af5 	.word	0x00012af5
   12a34:	00012907 	.word	0x00012907
   12a38:	00012907 	.word	0x00012907
   12a3c:	00012af5 	.word	0x00012af5
			if (precision >= 0) {
   12a40:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
   12a44:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
   12a46:	db35      	blt.n	12ab4 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
   12a48:	4651      	mov	r1, sl
   12a4a:	4638      	mov	r0, r7
   12a4c:	f022 fd3a 	bl	354c4 <strnlen>
			bpe = bps + len;
   12a50:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
   12a54:	2f00      	cmp	r7, #0
   12a56:	f43f af56 	beq.w	12906 <z_cbvprintf_impl+0x426>
		char sign = 0;
   12a5a:	2600      	movs	r6, #0
		if (conv->altform_0c) {
   12a5c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12a60:	f013 0210 	ands.w	r2, r3, #16
   12a64:	9205      	str	r2, [sp, #20]
   12a66:	f000 8093 	beq.w	12b90 <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
   12a6a:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   12a6c:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
   12a6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
   12a70:	bf48      	it	mi
   12a72:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
   12a74:	9204      	str	r2, [sp, #16]
   12a76:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
   12a78:	bf48      	it	mi
   12a7a:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
   12a7c:	f1b8 0f00 	cmp.w	r8, #0
   12a80:	f340 80a0 	ble.w	12bc4 <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
   12a84:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
   12a88:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
   12a8c:	f3c2 0380 	ubfx	r3, r2, #2, #1
   12a90:	0750      	lsls	r0, r2, #29
   12a92:	9306      	str	r3, [sp, #24]
   12a94:	f100 8096 	bmi.w	12bc4 <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
   12a98:	0651      	lsls	r1, r2, #25
   12a9a:	f140 8089 	bpl.w	12bb0 <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
   12a9e:	b13e      	cbz	r6, 12ab0 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
   12aa0:	4659      	mov	r1, fp
   12aa2:	4630      	mov	r0, r6
   12aa4:	47c8      	blx	r9
   12aa6:	2800      	cmp	r0, #0
   12aa8:	db7f      	blt.n	12baa <z_cbvprintf_impl+0x6ca>
   12aaa:	9b06      	ldr	r3, [sp, #24]
   12aac:	3501      	adds	r5, #1
   12aae:	461e      	mov	r6, r3
					pad = '0';
   12ab0:	2230      	movs	r2, #48	; 0x30
   12ab2:	e07e      	b.n	12bb2 <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
   12ab4:	4638      	mov	r0, r7
   12ab6:	f022 fcfe 	bl	354b6 <strlen>
   12aba:	e7c9      	b.n	12a50 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   12abc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12abe:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
   12ac2:	2600      	movs	r6, #0
			bps = buf;
   12ac4:	af08      	add	r7, sp, #32
			bpe = buf + 1;
   12ac6:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
   12aca:	2001      	movs	r0, #1
   12acc:	e7c6      	b.n	12a5c <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
   12ace:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
   12ad0:	bf5c      	itt	pl
   12ad2:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
   12ad6:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
   12ad8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
   12adc:	bf48      	it	mi
   12ade:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
   12ae0:	2b00      	cmp	r3, #0
   12ae2:	f6bf af62 	bge.w	129aa <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
   12ae6:	4252      	negs	r2, r2
   12ae8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   12aec:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
   12af0:	262d      	movs	r6, #45	; 0x2d
   12af2:	e75a      	b.n	129aa <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
   12af4:	2600      	movs	r6, #0
   12af6:	e758      	b.n	129aa <z_cbvprintf_impl+0x4ca>
		char sign = 0;
   12af8:	2600      	movs	r6, #0
				conv->flag_zero = false;
   12afa:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
   12afe:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   12b02:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
   12b04:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   12b08:	459a      	cmp	sl, r3
				conv->flag_zero = false;
   12b0a:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
   12b0e:	f67f af5a 	bls.w	129c6 <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
   12b12:	ebaa 0303 	sub.w	r3, sl, r3
   12b16:	9311      	str	r3, [sp, #68]	; 0x44
   12b18:	e755      	b.n	129c6 <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
   12b1a:	980e      	ldr	r0, [sp, #56]	; 0x38
   12b1c:	b390      	cbz	r0, 12b84 <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   12b1e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   12b22:	9300      	str	r3, [sp, #0]
   12b24:	aa10      	add	r2, sp, #64	; 0x40
   12b26:	ab08      	add	r3, sp, #32
   12b28:	2100      	movs	r1, #0
   12b2a:	f020 fc18 	bl	3335e <encode_uint>
				conv->altform_0c = true;
   12b2e:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
   12b32:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   12b36:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   12b3a:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
   12b3e:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
   12b42:	4607      	mov	r7, r0
				conv->altform_0c = true;
   12b44:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
   12b48:	dad6      	bge.n	12af8 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
   12b4a:	2800      	cmp	r0, #0
   12b4c:	f43f aedb 	beq.w	12906 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   12b50:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   12b54:	1a18      	subs	r0, r3, r0
		char sign = 0;
   12b56:	2600      	movs	r6, #0
   12b58:	469a      	mov	sl, r3
   12b5a:	e77f      	b.n	12a5c <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
   12b5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
   12b5e:	2907      	cmp	r1, #7
   12b60:	f63f aed1 	bhi.w	12906 <z_cbvprintf_impl+0x426>
   12b64:	e8df f001 	tbb	[pc, r1]
   12b68:	0c06040c 	.word	0x0c06040c
   12b6c:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   12b70:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
   12b72:	e6c8      	b.n	12906 <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
   12b74:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
   12b76:	e6c6      	b.n	12906 <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
   12b78:	17ea      	asrs	r2, r5, #31
   12b7a:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
   12b7e:	e6c2      	b.n	12906 <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   12b80:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
   12b82:	e6c0      	b.n	12906 <z_cbvprintf_impl+0x426>
   12b84:	4f2e      	ldr	r7, [pc, #184]	; (12c40 <z_cbvprintf_impl+0x760>)
		char sign = 0;
   12b86:	4606      	mov	r6, r0
			bpe = bps + 5;
   12b88:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
   12b8c:	2005      	movs	r0, #5
   12b8e:	e765      	b.n	12a5c <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
   12b90:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   12b92:	bf48      	it	mi
   12b94:	3001      	addmi	r0, #1
   12b96:	e769      	b.n	12a6c <z_cbvprintf_impl+0x58c>
   12b98:	9307      	str	r3, [sp, #28]
					OUTC(pad);
   12b9a:	4610      	mov	r0, r2
   12b9c:	9206      	str	r2, [sp, #24]
   12b9e:	4659      	mov	r1, fp
   12ba0:	47c8      	blx	r9
   12ba2:	2800      	cmp	r0, #0
   12ba4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   12ba8:	da04      	bge.n	12bb4 <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
   12baa:	b015      	add	sp, #84	; 0x54
   12bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   12bb0:	2220      	movs	r2, #32
					pad = '0';
   12bb2:	4643      	mov	r3, r8
				while (width-- > 0) {
   12bb4:	4619      	mov	r1, r3
   12bb6:	2900      	cmp	r1, #0
   12bb8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   12bbc:	dcec      	bgt.n	12b98 <z_cbvprintf_impl+0x6b8>
   12bbe:	4445      	add	r5, r8
   12bc0:	1a6d      	subs	r5, r5, r1
   12bc2:	4698      	mov	r8, r3
		if (sign != 0) {
   12bc4:	b12e      	cbz	r6, 12bd2 <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
   12bc6:	4659      	mov	r1, fp
   12bc8:	4630      	mov	r0, r6
   12bca:	47c8      	blx	r9
   12bcc:	2800      	cmp	r0, #0
   12bce:	dbec      	blt.n	12baa <z_cbvprintf_impl+0x6ca>
   12bd0:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   12bd2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12bd6:	06da      	lsls	r2, r3, #27
   12bd8:	d401      	bmi.n	12bde <z_cbvprintf_impl+0x6fe>
   12bda:	071b      	lsls	r3, r3, #28
   12bdc:	d505      	bpl.n	12bea <z_cbvprintf_impl+0x70a>
				OUTC('0');
   12bde:	4659      	mov	r1, fp
   12be0:	2030      	movs	r0, #48	; 0x30
   12be2:	47c8      	blx	r9
   12be4:	2800      	cmp	r0, #0
   12be6:	dbe0      	blt.n	12baa <z_cbvprintf_impl+0x6ca>
   12be8:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   12bea:	9b05      	ldr	r3, [sp, #20]
   12bec:	b133      	cbz	r3, 12bfc <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
   12bee:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   12bf2:	4659      	mov	r1, fp
   12bf4:	47c8      	blx	r9
   12bf6:	2800      	cmp	r0, #0
   12bf8:	dbd7      	blt.n	12baa <z_cbvprintf_impl+0x6ca>
   12bfa:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   12bfc:	9e04      	ldr	r6, [sp, #16]
   12bfe:	442e      	add	r6, r5
   12c00:	e005      	b.n	12c0e <z_cbvprintf_impl+0x72e>
				OUTC('0');
   12c02:	4659      	mov	r1, fp
   12c04:	2030      	movs	r0, #48	; 0x30
   12c06:	47c8      	blx	r9
   12c08:	2800      	cmp	r0, #0
   12c0a:	dbce      	blt.n	12baa <z_cbvprintf_impl+0x6ca>
   12c0c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   12c0e:	1b73      	subs	r3, r6, r5
   12c10:	2b00      	cmp	r3, #0
   12c12:	dcf6      	bgt.n	12c02 <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
   12c14:	4653      	mov	r3, sl
   12c16:	463a      	mov	r2, r7
   12c18:	4659      	mov	r1, fp
   12c1a:	4648      	mov	r0, r9
   12c1c:	f020 fbe5 	bl	333ea <outs>
   12c20:	2800      	cmp	r0, #0
   12c22:	dbc2      	blt.n	12baa <z_cbvprintf_impl+0x6ca>
   12c24:	4405      	add	r5, r0
		while (width > 0) {
   12c26:	44a8      	add	r8, r5
   12c28:	eba8 0305 	sub.w	r3, r8, r5
   12c2c:	2b00      	cmp	r3, #0
   12c2e:	f77f ae6a 	ble.w	12906 <z_cbvprintf_impl+0x426>
			OUTC(' ');
   12c32:	4659      	mov	r1, fp
   12c34:	2020      	movs	r0, #32
   12c36:	47c8      	blx	r9
   12c38:	2800      	cmp	r0, #0
   12c3a:	dbb6      	blt.n	12baa <z_cbvprintf_impl+0x6ca>
   12c3c:	3501      	adds	r5, #1
			--width;
   12c3e:	e7f3      	b.n	12c28 <z_cbvprintf_impl+0x748>
   12c40:	0003b7a1 	.word	0x0003b7a1

00012c44 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   12c44:	f01d b8f6 	b.w	2fe34 <SystemInit>

00012c48 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
   12c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (mask_cpy) {
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   12c4c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 12ca8 <activate_foreach_backend+0x60>
{
   12c50:	4604      	mov	r4, r0
	while (mask_cpy) {
   12c52:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
   12c54:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
   12c58:	b914      	cbnz	r4, 12c60 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
   12c5a:	4638      	mov	r0, r7
   12c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
   12c60:	fa94 f5a4 	rbit	r5, r4
   12c64:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
   12c68:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   12c6c:	012e      	lsls	r6, r5, #4
   12c6e:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
   12c72:	ea6f 0a03 	mvn.w	sl, r3
   12c76:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   12c7a:	7b2b      	ldrb	r3, [r5, #12]
   12c7c:	2b00      	cmp	r3, #0
   12c7e:	d0eb      	beq.n	12c58 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
   12c80:	f858 3006 	ldr.w	r3, [r8, r6]
   12c84:	691b      	ldr	r3, [r3, #16]
   12c86:	b94b      	cbnz	r3, 12c9c <activate_foreach_backend+0x54>
					   backend->cb->ctx,
   12c88:	4446      	add	r6, r8
			log_backend_enable(backend,
   12c8a:	2204      	movs	r2, #4
   12c8c:	6873      	ldr	r3, [r6, #4]
   12c8e:	4628      	mov	r0, r5
   12c90:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
   12c92:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
   12c96:	f000 fa59 	bl	1314c <log_backend_enable>
   12c9a:	e7dd      	b.n	12c58 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
   12c9c:	4628      	mov	r0, r5
   12c9e:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   12ca0:	2800      	cmp	r0, #0
   12ca2:	d1d9      	bne.n	12c58 <activate_foreach_backend+0x10>
   12ca4:	e7f0      	b.n	12c88 <activate_foreach_backend+0x40>
   12ca6:	bf00      	nop
   12ca8:	00039690 	.word	0x00039690

00012cac <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   12cac:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   12cae:	4910      	ldr	r1, [pc, #64]	; (12cf0 <enable_logger+0x44>)
   12cb0:	4810      	ldr	r0, [pc, #64]	; (12cf4 <enable_logger+0x48>)
{
   12cb2:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   12cb4:	2200      	movs	r2, #0
   12cb6:	f026 f8a0 	bl	38dfa <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   12cba:	4d0f      	ldr	r5, [pc, #60]	; (12cf8 <enable_logger+0x4c>)
   12cbc:	490f      	ldr	r1, [pc, #60]	; (12cfc <enable_logger+0x50>)
   12cbe:	2200      	movs	r2, #0
   12cc0:	2300      	movs	r3, #0
   12cc2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12cc6:	2400      	movs	r4, #0
   12cc8:	230e      	movs	r3, #14
   12cca:	e9cd 3403 	strd	r3, r4, [sp, #12]
   12cce:	e9cd 4401 	strd	r4, r4, [sp, #4]
   12cd2:	4b0b      	ldr	r3, [pc, #44]	; (12d00 <enable_logger+0x54>)
   12cd4:	9400      	str	r4, [sp, #0]
   12cd6:	f44f 7240 	mov.w	r2, #768	; 0x300
   12cda:	4628      	mov	r0, r5
   12cdc:	f01e fd6c 	bl	317b8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   12ce0:	4908      	ldr	r1, [pc, #32]	; (12d04 <enable_logger+0x58>)
   12ce2:	4628      	mov	r0, r5
   12ce4:	f025 fd19 	bl	3871a <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
   12ce8:	4620      	mov	r0, r4
   12cea:	b009      	add	sp, #36	; 0x24
   12cec:	bd30      	pop	{r4, r5, pc}
   12cee:	bf00      	nop
   12cf0:	00012d09 	.word	0x00012d09
   12cf4:	200010e8 	.word	0x200010e8
   12cf8:	20000c60 	.word	0x20000c60
   12cfc:	20003440 	.word	0x20003440
   12d00:	00012ff9 	.word	0x00012ff9
   12d04:	0003b7a7 	.word	0x0003b7a7

00012d08 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   12d08:	4801      	ldr	r0, [pc, #4]	; (12d10 <log_process_thread_timer_expiry_fn+0x8>)
   12d0a:	f01e bee3 	b.w	31ad4 <z_impl_k_sem_give>
   12d0e:	bf00      	nop
   12d10:	20000ac8 	.word	0x20000ac8

00012d14 <z_log_init>:
{
   12d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12d18:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
   12d1a:	481f      	ldr	r0, [pc, #124]	; (12d98 <z_log_init+0x84>)
{
   12d1c:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
   12d1e:	f020 fdf2 	bl	33906 <atomic_inc>
   12d22:	4606      	mov	r6, r0
   12d24:	2800      	cmp	r0, #0
   12d26:	d030      	beq.n	12d8a <z_log_init+0x76>
	uint32_t mask = 0;
   12d28:	2500      	movs	r5, #0
}
   12d2a:	4628      	mov	r0, r5
   12d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
   12d30:	7b23      	ldrb	r3, [r4, #12]
   12d32:	b173      	cbz	r3, 12d52 <z_log_init+0x3e>
	if (backend->api->init) {
   12d34:	6823      	ldr	r3, [r4, #0]
   12d36:	68db      	ldr	r3, [r3, #12]
   12d38:	b10b      	cbz	r3, 12d3e <z_log_init+0x2a>
		backend->api->init(backend);
   12d3a:	4620      	mov	r0, r4
   12d3c:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
   12d3e:	6823      	ldr	r3, [r4, #0]
   12d40:	691b      	ldr	r3, [r3, #16]
   12d42:	b9d3      	cbnz	r3, 12d7a <z_log_init+0x66>
				log_backend_enable(backend,
   12d44:	6863      	ldr	r3, [r4, #4]
   12d46:	2204      	movs	r2, #4
   12d48:	6819      	ldr	r1, [r3, #0]
   12d4a:	4620      	mov	r0, r4
   12d4c:	f000 f9fe 	bl	1314c <log_backend_enable>
			i++;
   12d50:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12d52:	3410      	adds	r4, #16
   12d54:	454c      	cmp	r4, r9
   12d56:	d3eb      	bcc.n	12d30 <z_log_init+0x1c>
	if (blocking) {
   12d58:	f1b8 0f00 	cmp.w	r8, #0
   12d5c:	d0e5      	beq.n	12d2a <z_log_init+0x16>
		while (mask) {
   12d5e:	2d00      	cmp	r5, #0
   12d60:	d0e2      	beq.n	12d28 <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
   12d62:	4628      	mov	r0, r5
   12d64:	f7ff ff70 	bl	12c48 <activate_foreach_backend>
   12d68:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   12d6a:	2f00      	cmp	r7, #0
   12d6c:	d0f7      	beq.n	12d5e <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
   12d6e:	2100      	movs	r1, #0
   12d70:	f44f 70a4 	mov.w	r0, #328	; 0x148
   12d74:	f01f fbb6 	bl	324e4 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
   12d78:	e7f1      	b.n	12d5e <z_log_init+0x4a>
		return backend->api->is_ready(backend);
   12d7a:	4620      	mov	r0, r4
   12d7c:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   12d7e:	2800      	cmp	r0, #0
   12d80:	d0e0      	beq.n	12d44 <z_log_init+0x30>
				mask |= BIT(i);
   12d82:	fa0a f306 	lsl.w	r3, sl, r6
   12d86:	431d      	orrs	r5, r3
   12d88:	e7e2      	b.n	12d50 <z_log_init+0x3c>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12d8a:	4c04      	ldr	r4, [pc, #16]	; (12d9c <z_log_init+0x88>)
   12d8c:	f8df 9010 	ldr.w	r9, [pc, #16]	; 12da0 <z_log_init+0x8c>
	uint32_t mask = 0;
   12d90:	4605      	mov	r5, r0
				mask |= BIT(i);
   12d92:	f04f 0a01 	mov.w	sl, #1
   12d96:	e7dd      	b.n	12d54 <z_log_init+0x40>
   12d98:	20001a68 	.word	0x20001a68
   12d9c:	00039690 	.word	0x00039690
   12da0:	000396a0 	.word	0x000396a0

00012da4 <log_format_func_t_get>:
}
   12da4:	4b01      	ldr	r3, [pc, #4]	; (12dac <log_format_func_t_get+0x8>)
   12da6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   12daa:	4770      	bx	lr
   12dac:	00039884 	.word	0x00039884

00012db0 <log_set_timestamp_func>:
{
   12db0:	b508      	push	{r3, lr}
   12db2:	4603      	mov	r3, r0
   12db4:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
   12db6:	b12b      	cbz	r3, 12dc4 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
   12db8:	4a04      	ldr	r2, [pc, #16]	; (12dcc <log_set_timestamp_func+0x1c>)
   12dba:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
   12dbc:	f000 fc4c 	bl	13658 <log_output_timestamp_freq_set>
	return 0;
   12dc0:	2000      	movs	r0, #0
}
   12dc2:	bd08      	pop	{r3, pc}
		return -EINVAL;
   12dc4:	f06f 0015 	mvn.w	r0, #21
   12dc8:	e7fb      	b.n	12dc2 <log_set_timestamp_func+0x12>
   12dca:	bf00      	nop
   12dcc:	2000023c 	.word	0x2000023c

00012dd0 <z_log_notify_backend_enabled>:
{
   12dd0:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   12dd2:	4c04      	ldr	r4, [pc, #16]	; (12de4 <z_log_notify_backend_enabled+0x14>)
   12dd4:	7823      	ldrb	r3, [r4, #0]
   12dd6:	b913      	cbnz	r3, 12dde <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
   12dd8:	4803      	ldr	r0, [pc, #12]	; (12de8 <z_log_notify_backend_enabled+0x18>)
   12dda:	f01e fe7b 	bl	31ad4 <z_impl_k_sem_give>
	backend_attached = true;
   12dde:	2301      	movs	r3, #1
   12de0:	7023      	strb	r3, [r4, #0]
}
   12de2:	bd10      	pop	{r4, pc}
   12de4:	200032a0 	.word	0x200032a0
   12de8:	20000ac8 	.word	0x20000ac8

00012dec <z_log_dropped>:
{
   12dec:	b510      	push	{r4, lr}
   12dee:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
   12df0:	4808      	ldr	r0, [pc, #32]	; (12e14 <z_log_dropped+0x28>)
   12df2:	f020 fd88 	bl	33906 <atomic_inc>
	if (buffered) {
   12df6:	b15c      	cbz	r4, 12e10 <z_log_dropped+0x24>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   12df8:	f3bf 8f5b 	dmb	ish
   12dfc:	4b06      	ldr	r3, [pc, #24]	; (12e18 <z_log_dropped+0x2c>)
   12dfe:	e853 1f00 	ldrex	r1, [r3]
   12e02:	3901      	subs	r1, #1
   12e04:	e843 1200 	strex	r2, r1, [r3]
   12e08:	2a00      	cmp	r2, #0
   12e0a:	d1f8      	bne.n	12dfe <z_log_dropped+0x12>
   12e0c:	f3bf 8f5b 	dmb	ish
}
   12e10:	bd10      	pop	{r4, pc}
   12e12:	bf00      	nop
   12e14:	20001a60 	.word	0x20001a60
   12e18:	20001a64 	.word	0x20001a64

00012e1c <z_log_dropped_read_and_clear>:
}
   12e1c:	2000      	movs	r0, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12e1e:	4b06      	ldr	r3, [pc, #24]	; (12e38 <z_log_dropped_read_and_clear+0x1c>)
   12e20:	f3bf 8f5b 	dmb	ish
   12e24:	4601      	mov	r1, r0
   12e26:	e853 0f00 	ldrex	r0, [r3]
   12e2a:	e843 1200 	strex	r2, r1, [r3]
   12e2e:	2a00      	cmp	r2, #0
   12e30:	d1f9      	bne.n	12e26 <z_log_dropped_read_and_clear+0xa>
   12e32:	f3bf 8f5b 	dmb	ish
   12e36:	4770      	bx	lr
   12e38:	20001a60 	.word	0x20001a60

00012e3c <dropped_notify>:
{
   12e3c:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   12e3e:	f7ff ffed 	bl	12e1c <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12e42:	4c08      	ldr	r4, [pc, #32]	; (12e64 <dropped_notify+0x28>)
   12e44:	4e08      	ldr	r6, [pc, #32]	; (12e68 <dropped_notify+0x2c>)
	uint32_t dropped = z_log_dropped_read_and_clear();
   12e46:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12e48:	42b4      	cmp	r4, r6
   12e4a:	d300      	bcc.n	12e4e <dropped_notify+0x12>
}
   12e4c:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   12e4e:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   12e50:	795b      	ldrb	r3, [r3, #5]
   12e52:	b12b      	cbz	r3, 12e60 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
   12e54:	6823      	ldr	r3, [r4, #0]
   12e56:	685b      	ldr	r3, [r3, #4]
   12e58:	b113      	cbz	r3, 12e60 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
   12e5a:	4629      	mov	r1, r5
   12e5c:	4620      	mov	r0, r4
   12e5e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12e60:	3410      	adds	r4, #16
   12e62:	e7f1      	b.n	12e48 <dropped_notify+0xc>
   12e64:	00039690 	.word	0x00039690
   12e68:	000396a0 	.word	0x000396a0

00012e6c <z_log_msg_init>:
{
   12e6c:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
   12e6e:	4c04      	ldr	r4, [pc, #16]	; (12e80 <z_log_msg_init+0x14>)
   12e70:	4904      	ldr	r1, [pc, #16]	; (12e84 <z_log_msg_init+0x18>)
   12e72:	4620      	mov	r0, r4
   12e74:	f020 fbd7 	bl	33626 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
   12e78:	4b03      	ldr	r3, [pc, #12]	; (12e88 <z_log_msg_init+0x1c>)
   12e7a:	601c      	str	r4, [r3, #0]
}
   12e7c:	bd10      	pop	{r4, pc}
   12e7e:	bf00      	nop
   12e80:	20000a1c 	.word	0x20000a1c
   12e84:	00039870 	.word	0x00039870
   12e88:	20001a58 	.word	0x20001a58

00012e8c <log_core_init>:
	panic_mode = false;
   12e8c:	4a08      	ldr	r2, [pc, #32]	; (12eb0 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
   12e8e:	4809      	ldr	r0, [pc, #36]	; (12eb4 <log_core_init+0x28>)
{
   12e90:	b508      	push	{r3, lr}
	panic_mode = false;
   12e92:	2300      	movs	r3, #0
   12e94:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   12e96:	4a08      	ldr	r2, [pc, #32]	; (12eb8 <log_core_init+0x2c>)
   12e98:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
   12e9a:	4a08      	ldr	r2, [pc, #32]	; (12ebc <log_core_init+0x30>)
		log_set_timestamp_func(default_get_timestamp,
   12e9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	buffered_cnt = 0;
   12ea0:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
   12ea2:	f7ff ff85 	bl	12db0 <log_set_timestamp_func>
}
   12ea6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
   12eaa:	f7ff bfdf 	b.w	12e6c <z_log_msg_init>
   12eae:	bf00      	nop
   12eb0:	200032a1 	.word	0x200032a1
   12eb4:	00033903 	.word	0x00033903
   12eb8:	20001a60 	.word	0x20001a60
   12ebc:	20001a64 	.word	0x20001a64

00012ec0 <z_log_msg_alloc>:
{
   12ec0:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
   12ec2:	2200      	movs	r2, #0
   12ec4:	4801      	ldr	r0, [pc, #4]	; (12ecc <z_log_msg_alloc+0xc>)
   12ec6:	2300      	movs	r3, #0
   12ec8:	f020 bbce 	b.w	33668 <mpsc_pbuf_alloc>
   12ecc:	20000a1c 	.word	0x20000a1c

00012ed0 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
   12ed0:	4801      	ldr	r0, [pc, #4]	; (12ed8 <z_log_msg_local_claim+0x8>)
   12ed2:	f020 bc67 	b.w	337a4 <mpsc_pbuf_claim>
   12ed6:	bf00      	nop
   12ed8:	20000a1c 	.word	0x20000a1c

00012edc <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
   12edc:	4b02      	ldr	r3, [pc, #8]	; (12ee8 <z_log_msg_free+0xc>)
{
   12ede:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
   12ee0:	6818      	ldr	r0, [r3, #0]
   12ee2:	f020 bcb1 	b.w	33848 <mpsc_pbuf_free>
   12ee6:	bf00      	nop
   12ee8:	20001a58 	.word	0x20001a58

00012eec <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
   12eec:	4801      	ldr	r0, [pc, #4]	; (12ef4 <z_log_msg_pending+0x8>)
   12eee:	f020 bce7 	b.w	338c0 <mpsc_pbuf_is_pending>
   12ef2:	bf00      	nop
   12ef4:	20000a1c 	.word	0x20000a1c

00012ef8 <z_impl_log_process>:
{
   12ef8:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
   12efa:	4b28      	ldr	r3, [pc, #160]	; (12f9c <z_impl_log_process+0xa4>)
   12efc:	7818      	ldrb	r0, [r3, #0]
   12efe:	2800      	cmp	r0, #0
   12f00:	d04b      	beq.n	12f9a <z_impl_log_process+0xa2>
	return z_log_msg_local_claim();
   12f02:	f7ff ffe5 	bl	12ed0 <z_log_msg_local_claim>
	if (msg) {
   12f06:	4605      	mov	r5, r0
   12f08:	b190      	cbz	r0, 12f30 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   12f0a:	f3bf 8f5b 	dmb	ish
   12f0e:	4b24      	ldr	r3, [pc, #144]	; (12fa0 <z_impl_log_process+0xa8>)
   12f10:	e853 1f00 	ldrex	r1, [r3]
   12f14:	3901      	subs	r1, #1
   12f16:	e843 1200 	strex	r2, r1, [r3]
   12f1a:	2a00      	cmp	r2, #0
   12f1c:	d1f8      	bne.n	12f10 <z_impl_log_process+0x18>
   12f1e:	f3bf 8f5b 	dmb	ish
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12f22:	4c20      	ldr	r4, [pc, #128]	; (12fa4 <z_impl_log_process+0xac>)
   12f24:	4e20      	ldr	r6, [pc, #128]	; (12fa8 <z_impl_log_process+0xb0>)
   12f26:	42b4      	cmp	r4, r6
   12f28:	d32d      	bcc.n	12f86 <z_impl_log_process+0x8e>
		z_log_msg_free(msg);
   12f2a:	4628      	mov	r0, r5
   12f2c:	f7ff ffd6 	bl	12edc <z_log_msg_free>
	return dropped_cnt > 0;
   12f30:	4b1e      	ldr	r3, [pc, #120]	; (12fac <z_impl_log_process+0xb4>)
   12f32:	4c1f      	ldr	r4, [pc, #124]	; (12fb0 <z_impl_log_process+0xb8>)
		if ((dropped_pend || unordered_pend) &&
   12f34:	681b      	ldr	r3, [r3, #0]
   12f36:	2b00      	cmp	r3, #0
   12f38:	dd19      	ble.n	12f6e <z_impl_log_process+0x76>
	return z_impl_k_uptime_ticks();
   12f3a:	f025 ff36 	bl	38daa <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   12f3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12f42:	fba0 0302 	umull	r0, r3, r0, r2
   12f46:	fb02 3101 	mla	r1, r2, r1, r3
   12f4a:	0bc3      	lsrs	r3, r0, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   12f4c:	e9d4 2000 	ldrd	r2, r0, [r4]
   12f50:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   12f54:	1a9b      	subs	r3, r3, r2
   12f56:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		if ((dropped_pend || unordered_pend) &&
   12f5a:	f240 32e9 	movw	r2, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   12f5e:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
   12f62:	4293      	cmp	r3, r2
   12f64:	f171 0100 	sbcs.w	r1, r1, #0
   12f68:	d301      	bcc.n	12f6e <z_impl_log_process+0x76>
				dropped_notify();
   12f6a:	f7ff ff67 	bl	12e3c <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
   12f6e:	e9d4 3200 	ldrd	r3, r2, [r4]
   12f72:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
   12f76:	f142 0200 	adc.w	r2, r2, #0
   12f7a:	e9c4 3200 	strd	r3, r2, [r4]
}
   12f7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
   12f82:	f7ff bfb3 	b.w	12eec <z_log_msg_pending>
	return backend->cb->active;
   12f86:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
   12f88:	795b      	ldrb	r3, [r3, #5]
   12f8a:	b123      	cbz	r3, 12f96 <z_impl_log_process+0x9e>
	backend->api->process(backend, msg);
   12f8c:	6823      	ldr	r3, [r4, #0]
   12f8e:	4629      	mov	r1, r5
   12f90:	681b      	ldr	r3, [r3, #0]
   12f92:	4620      	mov	r0, r4
   12f94:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12f96:	3410      	adds	r4, #16
   12f98:	e7c5      	b.n	12f26 <z_impl_log_process+0x2e>
}
   12f9a:	bd70      	pop	{r4, r5, r6, pc}
   12f9c:	200032a0 	.word	0x200032a0
   12fa0:	20001a64 	.word	0x20001a64
   12fa4:	00039690 	.word	0x00039690
   12fa8:	000396a0 	.word	0x000396a0
   12fac:	20001a60 	.word	0x20001a60
   12fb0:	200010e0 	.word	0x200010e0

00012fb4 <z_impl_log_panic>:
{
   12fb4:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
   12fb6:	4d0d      	ldr	r5, [pc, #52]	; (12fec <z_impl_log_panic+0x38>)
   12fb8:	7829      	ldrb	r1, [r5, #0]
   12fba:	b961      	cbnz	r1, 12fd6 <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
   12fbc:	2001      	movs	r0, #1
   12fbe:	f7ff fea9 	bl	12d14 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12fc2:	4c0b      	ldr	r4, [pc, #44]	; (12ff0 <z_impl_log_panic+0x3c>)
   12fc4:	4e0b      	ldr	r6, [pc, #44]	; (12ff4 <z_impl_log_panic+0x40>)
   12fc6:	42b4      	cmp	r4, r6
   12fc8:	d306      	bcc.n	12fd8 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
   12fca:	f7ff ff95 	bl	12ef8 <z_impl_log_process>
		while (log_process() == true) {
   12fce:	2800      	cmp	r0, #0
   12fd0:	d1fb      	bne.n	12fca <z_impl_log_panic+0x16>
	panic_mode = true;
   12fd2:	2301      	movs	r3, #1
   12fd4:	702b      	strb	r3, [r5, #0]
}
   12fd6:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
   12fd8:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   12fda:	795b      	ldrb	r3, [r3, #5]
   12fdc:	b11b      	cbz	r3, 12fe6 <z_impl_log_panic+0x32>
	backend->api->panic(backend);
   12fde:	6823      	ldr	r3, [r4, #0]
   12fe0:	4620      	mov	r0, r4
   12fe2:	689b      	ldr	r3, [r3, #8]
   12fe4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12fe6:	3410      	adds	r4, #16
   12fe8:	e7ed      	b.n	12fc6 <z_impl_log_panic+0x12>
   12fea:	bf00      	nop
   12fec:	200032a1 	.word	0x200032a1
   12ff0:	00039690 	.word	0x00039690
   12ff4:	000396a0 	.word	0x000396a0

00012ff8 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
   12ff8:	2100      	movs	r1, #0
{
   12ffa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
   12ffe:	4608      	mov	r0, r1
   13000:	f7ff fe88 	bl	12d14 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   13004:	4604      	mov	r4, r0
   13006:	b348      	cbz	r0, 1305c <log_process_thread_func+0x64>
   13008:	f240 6867 	movw	r8, #1639	; 0x667
   1300c:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
   13010:	f01f fa82 	bl	32518 <z_impl_z_current_get>
	proc_tid = process_tid;
   13014:	4b1a      	ldr	r3, [pc, #104]	; (13080 <log_process_thread_func+0x88>)
   13016:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   13018:	b130      	cbz	r0, 13028 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   1301a:	4b1a      	ldr	r3, [pc, #104]	; (13084 <log_process_thread_func+0x8c>)
	    process_tid &&
   1301c:	681b      	ldr	r3, [r3, #0]
   1301e:	2b09      	cmp	r3, #9
   13020:	dd02      	ble.n	13028 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
   13022:	4819      	ldr	r0, [pc, #100]	; (13088 <log_process_thread_func+0x90>)
   13024:	f01e fd56 	bl	31ad4 <z_impl_k_sem_give>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13028:	4f18      	ldr	r7, [pc, #96]	; (1308c <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
   1302a:	f8df a05c 	ldr.w	sl, [pc, #92]	; 13088 <log_process_thread_func+0x90>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   1302e:	2500      	movs	r5, #0
		if (activate_mask) {
   13030:	b144      	cbz	r4, 13044 <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
   13032:	4620      	mov	r0, r4
   13034:	f7ff fe08 	bl	12c48 <activate_foreach_backend>
			if (!activate_mask) {
   13038:	4604      	mov	r4, r0
   1303a:	b918      	cbnz	r0, 13044 <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
   1303c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   13040:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   13044:	f7ff ff58 	bl	12ef8 <z_impl_log_process>
		if (log_process() == false) {
   13048:	4606      	mov	r6, r0
   1304a:	b928      	cbnz	r0, 13058 <log_process_thread_func+0x60>
			if (processed_any) {
   1304c:	b9b5      	cbnz	r5, 1307c <log_process_thread_func+0x84>
   1304e:	4642      	mov	r2, r8
   13050:	464b      	mov	r3, r9
   13052:	4650      	mov	r0, sl
   13054:	f01e fd64 	bl	31b20 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   13058:	4635      	mov	r5, r6
   1305a:	e7e9      	b.n	13030 <log_process_thread_func+0x38>
   1305c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   13060:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   13064:	e7d4      	b.n	13010 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
   13066:	682b      	ldr	r3, [r5, #0]
   13068:	699b      	ldr	r3, [r3, #24]
   1306a:	b11b      	cbz	r3, 13074 <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
   1306c:	2200      	movs	r2, #0
   1306e:	4611      	mov	r1, r2
   13070:	4628      	mov	r0, r5
   13072:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13074:	3510      	adds	r5, #16
   13076:	42bd      	cmp	r5, r7
   13078:	d3f5      	bcc.n	13066 <log_process_thread_func+0x6e>
   1307a:	e7e8      	b.n	1304e <log_process_thread_func+0x56>
   1307c:	4d04      	ldr	r5, [pc, #16]	; (13090 <log_process_thread_func+0x98>)
   1307e:	e7fa      	b.n	13076 <log_process_thread_func+0x7e>
   13080:	20001a5c 	.word	0x20001a5c
   13084:	20001a64 	.word	0x20001a64
   13088:	20000ac8 	.word	0x20000ac8
   1308c:	000396a0 	.word	0x000396a0
   13090:	00039690 	.word	0x00039690

00013094 <z_log_msg_post_finalize>:
{
   13094:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
   13096:	4818      	ldr	r0, [pc, #96]	; (130f8 <z_log_msg_post_finalize+0x64>)
   13098:	f020 fc35 	bl	33906 <atomic_inc>
	if (panic_mode) {
   1309c:	4b17      	ldr	r3, [pc, #92]	; (130fc <z_log_msg_post_finalize+0x68>)
   1309e:	781b      	ldrb	r3, [r3, #0]
   130a0:	b17b      	cbz	r3, 130c2 <z_log_msg_post_finalize+0x2e>
	__asm__ volatile(
   130a2:	f04f 0320 	mov.w	r3, #32
   130a6:	f3ef 8411 	mrs	r4, BASEPRI
   130aa:	f383 8812 	msr	BASEPRI_MAX, r3
   130ae:	f3bf 8f6f 	isb	sy
   130b2:	f7ff ff21 	bl	12ef8 <z_impl_log_process>
	__asm__ volatile(
   130b6:	f384 8811 	msr	BASEPRI, r4
   130ba:	f3bf 8f6f 	isb	sy
}
   130be:	b002      	add	sp, #8
   130c0:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
   130c2:	4b0f      	ldr	r3, [pc, #60]	; (13100 <z_log_msg_post_finalize+0x6c>)
   130c4:	681b      	ldr	r3, [r3, #0]
   130c6:	2b00      	cmp	r3, #0
   130c8:	d0f9      	beq.n	130be <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
   130ca:	b950      	cbnz	r0, 130e2 <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
   130cc:	2200      	movs	r2, #0
   130ce:	2300      	movs	r3, #0
   130d0:	e9cd 2300 	strd	r2, r3, [sp]
   130d4:	480b      	ldr	r0, [pc, #44]	; (13104 <z_log_msg_post_finalize+0x70>)
   130d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   130da:	2300      	movs	r3, #0
   130dc:	f01f fc58 	bl	32990 <z_impl_k_timer_start>
   130e0:	e7ed      	b.n	130be <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   130e2:	280a      	cmp	r0, #10
   130e4:	d1eb      	bne.n	130be <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
   130e6:	4807      	ldr	r0, [pc, #28]	; (13104 <z_log_msg_post_finalize+0x70>)
   130e8:	f025 fe93 	bl	38e12 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   130ec:	4806      	ldr	r0, [pc, #24]	; (13108 <z_log_msg_post_finalize+0x74>)
}
   130ee:	b002      	add	sp, #8
   130f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   130f4:	f01e bcee 	b.w	31ad4 <z_impl_k_sem_give>
   130f8:	20001a64 	.word	0x20001a64
   130fc:	200032a1 	.word	0x200032a1
   13100:	20001a5c 	.word	0x20001a5c
   13104:	200010e8 	.word	0x200010e8
   13108:	20000ac8 	.word	0x20000ac8

0001310c <z_log_msg_commit>:
{
   1310c:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
   1310e:	4b06      	ldr	r3, [pc, #24]	; (13128 <z_log_msg_commit+0x1c>)
   13110:	681b      	ldr	r3, [r3, #0]
{
   13112:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   13114:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
   13116:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
   13118:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
   1311a:	4804      	ldr	r0, [pc, #16]	; (1312c <z_log_msg_commit+0x20>)
   1311c:	f020 fb22 	bl	33764 <mpsc_pbuf_commit>
}
   13120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
   13124:	f7ff bfb6 	b.w	13094 <z_log_msg_post_finalize>
   13128:	2000023c 	.word	0x2000023c
   1312c:	20000a1c 	.word	0x20000a1c

00013130 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   13130:	4a04      	ldr	r2, [pc, #16]	; (13144 <log_source_name_get+0x14>)
   13132:	4b05      	ldr	r3, [pc, #20]	; (13148 <log_source_name_get+0x18>)
   13134:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
   13136:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
   1313a:	bf34      	ite	cc
   1313c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
   13140:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
   13142:	4770      	bx	lr
   13144:	00039538 	.word	0x00039538
   13148:	00039690 	.word	0x00039690

0001314c <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   1314c:	4b08      	ldr	r3, [pc, #32]	; (13170 <log_backend_enable+0x24>)
   1314e:	1ac3      	subs	r3, r0, r3
{
   13150:	b410      	push	{r4}
	id += backend - log_backend_get(0);
   13152:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
   13154:	6844      	ldr	r4, [r0, #4]
   13156:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
   13158:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
   1315a:	6843      	ldr	r3, [r0, #4]
   1315c:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
   1315e:	6843      	ldr	r3, [r0, #4]
   13160:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   13162:	6843      	ldr	r3, [r0, #4]
   13164:	2201      	movs	r2, #1
   13166:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
   13168:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
   1316a:	f7ff be31 	b.w	12dd0 <z_log_notify_backend_enabled>
   1316e:	bf00      	nop
   13170:	00039690 	.word	0x00039690

00013174 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   13174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13178:	b08f      	sub	sp, #60	; 0x3c
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   1317a:	f3c1 44cb 	ubfx	r4, r1, #19, #12
   1317e:	f3c1 2649 	ubfx	r6, r1, #9, #10
   13182:	9005      	str	r0, [sp, #20]
   13184:	460d      	mov	r5, r1
   13186:	4690      	mov	r8, r2
   13188:	4699      	mov	r9, r3
   1318a:	3417      	adds	r4, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
   1318c:	2e00      	cmp	r6, #0
   1318e:	d03c      	beq.n	1320a <z_impl_z_log_msg_static_create+0x96>
	return cbprintf_package_convert(in_packaged, in_len,
   13190:	f04f 0b04 	mov.w	fp, #4
   13194:	af09      	add	r7, sp, #36	; 0x24
   13196:	f04f 0a0a 	mov.w	sl, #10
	struct z_cbprintf_buf_desc buf_desc = {
   1319a:	2200      	movs	r2, #0
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
   1319c:	4631      	mov	r1, r6
	return cbprintf_package_convert(in_packaged, in_len,
   1319e:	ab0b      	add	r3, sp, #44	; 0x2c
   131a0:	f8cd b008 	str.w	fp, [sp, #8]
   131a4:	9701      	str	r7, [sp, #4]
   131a6:	f8cd a000 	str.w	sl, [sp]
   131aa:	4640      	mov	r0, r8
	struct z_cbprintf_buf_desc buf_desc = {
   131ac:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
   131b0:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
   131b2:	9607      	str	r6, [sp, #28]
   131b4:	f7fe fe72 	bl	11e9c <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
   131b8:	f3c0 0309 	ubfx	r3, r0, #0, #10
   131bc:	1918      	adds	r0, r3, r4
   131be:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   131c2:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
   131c4:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   131c6:	f363 2552 	bfi	r5, r3, #9, #10
   131ca:	9306      	str	r3, [sp, #24]
   131cc:	f7ff fe78 	bl	12ec0 <z_log_msg_alloc>
		if (msg) {
   131d0:	4604      	mov	r4, r0
   131d2:	b178      	cbz	r0, 131f4 <z_impl_z_log_msg_static_create+0x80>
	struct z_cbprintf_buf_desc buf_desc = {
   131d4:	9b06      	ldr	r3, [sp, #24]
   131d6:	930c      	str	r3, [sp, #48]	; 0x30
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
   131d8:	3010      	adds	r0, #16
   131da:	2200      	movs	r2, #0
   131dc:	900b      	str	r0, [sp, #44]	; 0x2c
   131de:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
   131e0:	e9cd 7b01 	strd	r7, fp, [sp, #4]
   131e4:	4a0c      	ldr	r2, [pc, #48]	; (13218 <z_impl_z_log_msg_static_create+0xa4>)
   131e6:	9907      	ldr	r1, [sp, #28]
   131e8:	f8cd a000 	str.w	sl, [sp]
   131ec:	ab0b      	add	r3, sp, #44	; 0x2c
   131ee:	4640      	mov	r0, r8
   131f0:	f7fe fe54 	bl	11e9c <cbprintf_package_convert>
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
   131f4:	f366 2552 	bfi	r5, r6, #9, #10
   131f8:	9905      	ldr	r1, [sp, #20]
   131fa:	464b      	mov	r3, r9
   131fc:	462a      	mov	r2, r5
   131fe:	4620      	mov	r0, r4
}
   13200:	b00f      	add	sp, #60	; 0x3c
   13202:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
   13206:	f020 bbb4 	b.w	33972 <z_log_msg_finalize>
   1320a:	f024 0007 	bic.w	r0, r4, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   1320e:	0880      	lsrs	r0, r0, #2
   13210:	f7ff fe56 	bl	12ec0 <z_log_msg_alloc>
   13214:	4604      	mov	r4, r0
   13216:	e7ed      	b.n	131f4 <z_impl_z_log_msg_static_create+0x80>
   13218:	00033947 	.word	0x00033947

0001321c <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   1321c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13220:	b087      	sub	sp, #28
   13222:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
   13226:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
   1322a:	4604      	mov	r4, r0
   1322c:	460f      	mov	r7, r1
   1322e:	4693      	mov	fp, r2
   13230:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
   13232:	b3b6      	cbz	r6, 132a2 <z_impl_z_log_msg_runtime_vcreate+0x86>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   13234:	2110      	movs	r1, #16
   13236:	f8cd 9000 	str.w	r9, [sp]
   1323a:	4633      	mov	r3, r6
   1323c:	4652      	mov	r2, sl
   1323e:	2000      	movs	r0, #0
		va_copy(ap2, ap);
   13240:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   13244:	f7fe fc54 	bl	11af0 <cbvprintf_package>
   13248:	4601      	mov	r1, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   1324a:	4b17      	ldr	r3, [pc, #92]	; (132a8 <z_impl_z_log_msg_runtime_vcreate+0x8c>)
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   1324c:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
   1324e:	f004 0407 	and.w	r4, r4, #7
   13252:	f00b 0b07 	and.w	fp, fp, #7
   13256:	00e4      	lsls	r4, r4, #3
   13258:	ea03 2341 	and.w	r3, r3, r1, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   1325c:	f105 0017 	add.w	r0, r5, #23
	struct log_msg_desc desc =
   13260:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
   13264:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   13266:	4408      	add	r0, r1
	struct log_msg_desc desc =
   13268:	4b10      	ldr	r3, [pc, #64]	; (132ac <z_impl_z_log_msg_runtime_vcreate+0x90>)
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   1326a:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
   1326e:	ea03 43c5 	and.w	r3, r3, r5, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
   13272:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
   13274:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
   13276:	f7ff fe23 	bl	12ec0 <z_log_msg_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
   1327a:	4605      	mov	r5, r0
   1327c:	b140      	cbz	r0, 13290 <z_impl_z_log_msg_runtime_vcreate+0x74>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
   1327e:	b13e      	cbz	r6, 13290 <z_impl_z_log_msg_runtime_vcreate+0x74>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   13280:	9903      	ldr	r1, [sp, #12]
   13282:	f8cd 9000 	str.w	r9, [sp]
   13286:	4633      	mov	r3, r6
   13288:	4652      	mov	r2, sl
   1328a:	3010      	adds	r0, #16
   1328c:	f7fe fc30 	bl	11af0 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   13290:	4643      	mov	r3, r8
   13292:	4622      	mov	r2, r4
   13294:	4639      	mov	r1, r7
   13296:	4628      	mov	r0, r5
	}
}
   13298:	b007      	add	sp, #28
   1329a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
   1329e:	f020 bb68 	b.w	33972 <z_log_msg_finalize>
		plen = 0;
   132a2:	4631      	mov	r1, r6
   132a4:	e7d1      	b.n	1324a <z_impl_z_log_msg_runtime_vcreate+0x2e>
   132a6:	bf00      	nop
   132a8:	0007fe00 	.word	0x0007fe00
   132ac:	7ff80000 	.word	0x7ff80000

000132b0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   132b0:	b40e      	push	{r1, r2, r3}
   132b2:	b503      	push	{r0, r1, lr}
   132b4:	ab03      	add	r3, sp, #12
   132b6:	4601      	mov	r1, r0
   132b8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   132bc:	4804      	ldr	r0, [pc, #16]	; (132d0 <print_formatted+0x20>)
	va_start(args, fmt);
   132be:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   132c0:	f020 fb7e 	bl	339c0 <cbvprintf>
	va_end(args);

	return length;
}
   132c4:	b002      	add	sp, #8
   132c6:	f85d eb04 	ldr.w	lr, [sp], #4
   132ca:	b003      	add	sp, #12
   132cc:	4770      	bx	lr
   132ce:	bf00      	nop
   132d0:	000339e9 	.word	0x000339e9

000132d4 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   132d4:	06ca      	lsls	r2, r1, #27
   132d6:	d405      	bmi.n	132e4 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   132d8:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
   132da:	bf4c      	ite	mi
   132dc:	4902      	ldrmi	r1, [pc, #8]	; (132e8 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
   132de:	4903      	ldrpl	r1, [pc, #12]	; (132ec <newline_print+0x18>)
   132e0:	f7ff bfe6 	b.w	132b0 <print_formatted>
	}
}
   132e4:	4770      	bx	lr
   132e6:	bf00      	nop
   132e8:	0003b7bd 	.word	0x0003b7bd
   132ec:	0003b7bc 	.word	0x0003b7bc

000132f0 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   132f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132f4:	b089      	sub	sp, #36	; 0x24
   132f6:	469b      	mov	fp, r3
   132f8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   132fc:	9304      	str	r3, [sp, #16]
   132fe:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
   13302:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
   13304:	9b04      	ldr	r3, [sp, #16]
{
   13306:	9206      	str	r2, [sp, #24]
   13308:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
   1330c:	4604      	mov	r4, r0
   1330e:	460d      	mov	r5, r1
	if (!raw_string) {
   13310:	2b00      	cmp	r3, #0
   13312:	f000 8087 	beq.w	13424 <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   13316:	f006 0308 	and.w	r3, r6, #8
   1331a:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
   1331c:	f020 fb11 	bl	33942 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   13320:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
   13324:	4602      	mov	r2, r0
   13326:	2800      	cmp	r0, #0
   13328:	d04b      	beq.n	133c2 <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
   1332a:	4986      	ldr	r1, [pc, #536]	; (13544 <log_output_process+0x254>)
   1332c:	4620      	mov	r0, r4
   1332e:	f7ff ffbf 	bl	132b0 <print_formatted>
   13332:	4680      	mov	r8, r0
	if (stamp) {
   13334:	f1ba 0f00 	cmp.w	sl, #0
   13338:	d008      	beq.n	1334c <log_output_process+0x5c>
	if (!format) {
   1333a:	f016 0f44 	tst.w	r6, #68	; 0x44
   1333e:	d142      	bne.n	133c6 <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
   13340:	4981      	ldr	r1, [pc, #516]	; (13548 <log_output_process+0x258>)
   13342:	462a      	mov	r2, r5
   13344:	4620      	mov	r0, r4
   13346:	f7ff ffb3 	bl	132b0 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   1334a:	4480      	add	r8, r0
	if (color) {
   1334c:	f006 0301 	and.w	r3, r6, #1
   13350:	b15b      	cbz	r3, 1336a <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
   13352:	4b7e      	ldr	r3, [pc, #504]	; (1354c <log_output_process+0x25c>)
   13354:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
   13356:	497e      	ldr	r1, [pc, #504]	; (13550 <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
   13358:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
   1335c:	4b7d      	ldr	r3, [pc, #500]	; (13554 <log_output_process+0x264>)
   1335e:	4620      	mov	r0, r4
   13360:	2a00      	cmp	r2, #0
   13362:	bf08      	it	eq
   13364:	461a      	moveq	r2, r3
   13366:	f7ff ffa3 	bl	132b0 <print_formatted>
	if (level_on) {
   1336a:	f006 0308 	and.w	r3, r6, #8
   1336e:	2b00      	cmp	r3, #0
   13370:	d055      	beq.n	1341e <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
   13372:	4b79      	ldr	r3, [pc, #484]	; (13558 <log_output_process+0x268>)
   13374:	9a04      	ldr	r2, [sp, #16]
   13376:	4979      	ldr	r1, [pc, #484]	; (1355c <log_output_process+0x26c>)
   13378:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1337c:	4620      	mov	r0, r4
   1337e:	f7ff ff97 	bl	132b0 <print_formatted>
   13382:	4605      	mov	r5, r0
	if (domain) {
   13384:	9b06      	ldr	r3, [sp, #24]
   13386:	b12b      	cbz	r3, 13394 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
   13388:	4975      	ldr	r1, [pc, #468]	; (13560 <log_output_process+0x270>)
   1338a:	461a      	mov	r2, r3
   1338c:	4620      	mov	r0, r4
   1338e:	f7ff ff8f 	bl	132b0 <print_formatted>
   13392:	4405      	add	r5, r0
	if (source) {
   13394:	f1bb 0f00 	cmp.w	fp, #0
   13398:	d005      	beq.n	133a6 <log_output_process+0xb6>
		total += print_formatted(output,
   1339a:	4972      	ldr	r1, [pc, #456]	; (13564 <log_output_process+0x274>)
   1339c:	465a      	mov	r2, fp
   1339e:	4620      	mov	r0, r4
   133a0:	f7ff ff86 	bl	132b0 <print_formatted>
   133a4:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
   133a6:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
   133a8:	f1b9 0f00 	cmp.w	r9, #0
   133ac:	d149      	bne.n	13442 <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   133ae:	2f00      	cmp	r7, #0
   133b0:	d14f      	bne.n	13452 <log_output_process+0x162>
	if (color) {
   133b2:	07f3      	lsls	r3, r6, #31
   133b4:	f100 80c0 	bmi.w	13538 <log_output_process+0x248>
	newline_print(output, flags);
   133b8:	4631      	mov	r1, r6
   133ba:	4620      	mov	r0, r4
   133bc:	f7ff ff8a 	bl	132d4 <newline_print>
}
   133c0:	e0b4      	b.n	1352c <log_output_process+0x23c>
	uint32_t length = 0U;
   133c2:	4680      	mov	r8, r0
   133c4:	e7b6      	b.n	13334 <log_output_process+0x44>
	} else if (freq != 0U) {
   133c6:	4b68      	ldr	r3, [pc, #416]	; (13568 <log_output_process+0x278>)
   133c8:	6818      	ldr	r0, [r3, #0]
   133ca:	2800      	cmp	r0, #0
   133cc:	d0bd      	beq.n	1334a <log_output_process+0x5a>
		timestamp /= timestamp_div;
   133ce:	4b67      	ldr	r3, [pc, #412]	; (1356c <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
   133d0:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
   133d4:	681b      	ldr	r3, [r3, #0]
   133d6:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
   133da:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   133de:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
   133e2:	fb00 5513 	mls	r5, r0, r3, r5
   133e6:	fbb3 faf2 	udiv	sl, r3, r2
		ms = (remainder * 1000U) / freq;
   133ea:	fb0e f505 	mul.w	r5, lr, r5
   133ee:	fb02 321a 	mls	r2, r2, sl, r3
		mins = seconds / 60U;
   133f2:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   133f4:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
   133f8:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   133fc:	fb00 551c 	mls	r5, r0, ip, r5
				length = print_formatted(output,
   13400:	fb01 2213 	mls	r2, r1, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   13404:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
   13408:	9200      	str	r2, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1340a:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
   1340e:	4958      	ldr	r1, [pc, #352]	; (13570 <log_output_process+0x280>)
   13410:	e9cd c501 	strd	ip, r5, [sp, #4]
   13414:	4652      	mov	r2, sl
   13416:	4620      	mov	r0, r4
   13418:	f7ff ff4a 	bl	132b0 <print_formatted>
   1341c:	e795      	b.n	1334a <log_output_process+0x5a>
	int total = 0;
   1341e:	f006 0508 	and.w	r5, r6, #8
   13422:	e7af      	b.n	13384 <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   13424:	f1bb 0f01 	cmp.w	fp, #1
   13428:	d106      	bne.n	13438 <log_output_process+0x148>
	if (package) {
   1342a:	f1b9 0f00 	cmp.w	r9, #0
   1342e:	d164      	bne.n	134fa <log_output_process+0x20a>
	if (data_len) {
   13430:	2f00      	cmp	r7, #0
   13432:	d07b      	beq.n	1352c <log_output_process+0x23c>
		prefix_offset = 0;
   13434:	2500      	movs	r5, #0
   13436:	e00c      	b.n	13452 <log_output_process+0x162>
	if (package) {
   13438:	f1b9 0f00 	cmp.w	r9, #0
   1343c:	d0f8      	beq.n	13430 <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   1343e:	484d      	ldr	r0, [pc, #308]	; (13574 <log_output_process+0x284>)
   13440:	e05c      	b.n	134fc <log_output_process+0x20c>
		cb = out_func;
   13442:	484d      	ldr	r0, [pc, #308]	; (13578 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   13444:	494d      	ldr	r1, [pc, #308]	; (1357c <log_output_process+0x28c>)
   13446:	464b      	mov	r3, r9
   13448:	4622      	mov	r2, r4
   1344a:	f01f fbac 	bl	32ba6 <cbpprintf_external>
	if (data_len) {
   1344e:	2f00      	cmp	r7, #0
   13450:	d068      	beq.n	13524 <log_output_process+0x234>
		print_formatted(output, " ");
   13452:	f8df 912c 	ldr.w	r9, [pc, #300]	; 13580 <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
   13456:	f8df a12c 	ldr.w	sl, [pc, #300]	; 13584 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   1345a:	2f10      	cmp	r7, #16
	newline_print(output, flags);
   1345c:	4631      	mov	r1, r6
   1345e:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   13460:	46b8      	mov	r8, r7
   13462:	bf28      	it	cs
   13464:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
   13468:	f7ff ff34 	bl	132d4 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
   1346c:	f04f 0b00 	mov.w	fp, #0
   13470:	455d      	cmp	r5, fp
   13472:	dc45      	bgt.n	13500 <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
   13474:	9b05      	ldr	r3, [sp, #20]
   13476:	4651      	mov	r1, sl
   13478:	781a      	ldrb	r2, [r3, #0]
   1347a:	4620      	mov	r0, r4
   1347c:	f7ff ff18 	bl	132b0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13480:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
   13484:	f01b 0f07 	tst.w	fp, #7
   13488:	d103      	bne.n	13492 <log_output_process+0x1a2>
			print_formatted(output, " ");
   1348a:	4649      	mov	r1, r9
   1348c:	4620      	mov	r0, r4
   1348e:	f7ff ff0f 	bl	132b0 <print_formatted>
		if (i < length) {
   13492:	45d8      	cmp	r8, fp
   13494:	d93b      	bls.n	1350e <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
   13496:	9b05      	ldr	r3, [sp, #20]
   13498:	4651      	mov	r1, sl
   1349a:	f813 200b 	ldrb.w	r2, [r3, fp]
   1349e:	4620      	mov	r0, r4
   134a0:	f7ff ff06 	bl	132b0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   134a4:	f10b 0b01 	add.w	fp, fp, #1
   134a8:	f1bb 0f10 	cmp.w	fp, #16
   134ac:	d1ea      	bne.n	13484 <log_output_process+0x194>
	print_formatted(output, "|");
   134ae:	4936      	ldr	r1, [pc, #216]	; (13588 <log_output_process+0x298>)
   134b0:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   134b2:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
   134b6:	f7ff fefb 	bl	132b0 <print_formatted>
		if (i < length) {
   134ba:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
   134bc:	9b05      	ldr	r3, [sp, #20]
   134be:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
   134c0:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
   134c4:	295f      	cmp	r1, #95	; 0x5f
   134c6:	bf28      	it	cs
   134c8:	222e      	movcs	r2, #46	; 0x2e
   134ca:	4930      	ldr	r1, [pc, #192]	; (1358c <log_output_process+0x29c>)
   134cc:	4620      	mov	r0, r4
   134ce:	f7ff feef 	bl	132b0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   134d2:	f10b 0b01 	add.w	fp, fp, #1
   134d6:	f1bb 0f10 	cmp.w	fp, #16
   134da:	d01d      	beq.n	13518 <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
   134dc:	f01b 0f07 	tst.w	fp, #7
   134e0:	d103      	bne.n	134ea <log_output_process+0x1fa>
			print_formatted(output, " ");
   134e2:	4649      	mov	r1, r9
   134e4:	4620      	mov	r0, r4
   134e6:	f7ff fee3 	bl	132b0 <print_formatted>
		if (i < length) {
   134ea:	45d8      	cmp	r8, fp
   134ec:	465a      	mov	r2, fp
   134ee:	d8e5      	bhi.n	134bc <log_output_process+0x1cc>
			print_formatted(output, " ");
   134f0:	4649      	mov	r1, r9
   134f2:	4620      	mov	r0, r4
   134f4:	f7ff fedc 	bl	132b0 <print_formatted>
   134f8:	e7eb      	b.n	134d2 <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   134fa:	481f      	ldr	r0, [pc, #124]	; (13578 <log_output_process+0x288>)
		prefix_offset = 0;
   134fc:	9d04      	ldr	r5, [sp, #16]
   134fe:	e7a1      	b.n	13444 <log_output_process+0x154>
		print_formatted(output, " ");
   13500:	4649      	mov	r1, r9
   13502:	4620      	mov	r0, r4
   13504:	f7ff fed4 	bl	132b0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   13508:	f10b 0b01 	add.w	fp, fp, #1
   1350c:	e7b0      	b.n	13470 <log_output_process+0x180>
			print_formatted(output, "   ");
   1350e:	4920      	ldr	r1, [pc, #128]	; (13590 <log_output_process+0x2a0>)
   13510:	4620      	mov	r0, r4
   13512:	f7ff fecd 	bl	132b0 <print_formatted>
   13516:	e7c5      	b.n	134a4 <log_output_process+0x1b4>
		data += length;
   13518:	9b05      	ldr	r3, [sp, #20]
	} while (len);
   1351a:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
   1351e:	4443      	add	r3, r8
   13520:	9305      	str	r3, [sp, #20]
	} while (len);
   13522:	d19a      	bne.n	1345a <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   13524:	9b04      	ldr	r3, [sp, #16]
   13526:	2b00      	cmp	r3, #0
   13528:	f47f af43 	bne.w	133b2 <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   1352c:	4620      	mov	r0, r4
}
   1352e:	b009      	add	sp, #36	; 0x24
   13530:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
   13534:	f020 ba4b 	b.w	339ce <log_output_flush>
		print_formatted(output, "%s", log_color);
   13538:	4a06      	ldr	r2, [pc, #24]	; (13554 <log_output_process+0x264>)
   1353a:	4905      	ldr	r1, [pc, #20]	; (13550 <log_output_process+0x260>)
   1353c:	4620      	mov	r0, r4
   1353e:	f7ff feb7 	bl	132b0 <print_formatted>
}
   13542:	e739      	b.n	133b8 <log_output_process+0xc8>
   13544:	0003b7c4 	.word	0x0003b7c4
   13548:	0003b7c8 	.word	0x0003b7c8
   1354c:	00039894 	.word	0x00039894
   13550:	0003c8ad 	.word	0x0003c8ad
   13554:	0003b7bf 	.word	0x0003b7bf
   13558:	000398a8 	.word	0x000398a8
   1355c:	0003b7ed 	.word	0x0003b7ed
   13560:	0003b7f3 	.word	0x0003b7f3
   13564:	0003b7f7 	.word	0x0003b7f7
   13568:	20001a70 	.word	0x20001a70
   1356c:	20001a6c 	.word	0x20001a6c
   13570:	0003b7d1 	.word	0x0003b7d1
   13574:	00033a1f 	.word	0x00033a1f
   13578:	000339e9 	.word	0x000339e9
   1357c:	000339c1 	.word	0x000339c1
   13580:	0003b804 	.word	0x0003b804
   13584:	0003b7fc 	.word	0x0003b7fc
   13588:	0003b806 	.word	0x0003b806
   1358c:	0003b808 	.word	0x0003b808
   13590:	0003b802 	.word	0x0003b802

00013594 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   13594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
   13598:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
   1359a:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   1359c:	688e      	ldr	r6, [r1, #8]
   1359e:	b086      	sub	sp, #24
   135a0:	4605      	mov	r5, r0
   135a2:	460c      	mov	r4, r1
   135a4:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
   135a6:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
   135aa:	b15b      	cbz	r3, 135c4 <log_output_msg_process+0x30>
   135ac:	4a13      	ldr	r2, [pc, #76]	; (135fc <log_output_msg_process+0x68>)
   135ae:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
   135b0:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   135b4:	2900      	cmp	r1, #0
   135b6:	db1f      	blt.n	135f8 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
   135b8:	7820      	ldrb	r0, [r4, #0]
   135ba:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   135be:	f7ff fdb7 	bl	13130 <log_source_name_get>
   135c2:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   135c4:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
   135c6:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
   135c8:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   135cc:	9700      	str	r7, [sp, #0]
   135ce:	f3c2 2249 	ubfx	r2, r2, #9, #10
   135d2:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
   135d4:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
   135d8:	f3c0 00cb 	ubfx	r0, r0, #3, #12
   135dc:	bf08      	it	eq
   135de:	2100      	moveq	r1, #0
   135e0:	e9cd 0803 	strd	r0, r8, [sp, #12]
   135e4:	e9cd 1401 	strd	r1, r4, [sp, #4]
   135e8:	2200      	movs	r2, #0
   135ea:	4631      	mov	r1, r6
   135ec:	4628      	mov	r0, r5
   135ee:	f7ff fe7f 	bl	132f0 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   135f2:	b006      	add	sp, #24
   135f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   135f8:	2300      	movs	r3, #0
   135fa:	e7e3      	b.n	135c4 <log_output_msg_process+0x30>
   135fc:	00039538 	.word	0x00039538

00013600 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   13600:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13602:	f242 730f 	movw	r3, #9999	; 0x270f
   13606:	428b      	cmp	r3, r1
   13608:	bf28      	it	cs
   1360a:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   1360c:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1360e:	4a0f      	ldr	r2, [pc, #60]	; (1364c <log_output_dropped_process+0x4c>)
{
   13610:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13612:	2105      	movs	r1, #5
   13614:	4668      	mov	r0, sp
   13616:	f01f fbb9 	bl	32d8c <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   1361a:	6863      	ldr	r3, [r4, #4]
   1361c:	490c      	ldr	r1, [pc, #48]	; (13650 <log_output_dropped_process+0x50>)
   1361e:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13620:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   13622:	220b      	movs	r2, #11
   13624:	4628      	mov	r0, r5
   13626:	f020 f9be 	bl	339a6 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   1362a:	6863      	ldr	r3, [r4, #4]
   1362c:	4632      	mov	r2, r6
   1362e:	4669      	mov	r1, sp
   13630:	4628      	mov	r0, r5
   13632:	685b      	ldr	r3, [r3, #4]
   13634:	f020 f9b7 	bl	339a6 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   13638:	6863      	ldr	r3, [r4, #4]
   1363a:	4906      	ldr	r1, [pc, #24]	; (13654 <log_output_dropped_process+0x54>)
   1363c:	685b      	ldr	r3, [r3, #4]
   1363e:	221b      	movs	r2, #27
   13640:	4628      	mov	r0, r5
   13642:	f020 f9b0 	bl	339a6 <buffer_write>
		     output->control_block->ctx);
}
   13646:	b002      	add	sp, #8
   13648:	bd70      	pop	{r4, r5, r6, pc}
   1364a:	bf00      	nop
   1364c:	0003ebbb 	.word	0x0003ebbb
   13650:	0003b827 	.word	0x0003b827
   13654:	0003b80b 	.word	0x0003b80b

00013658 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   13658:	4a07      	ldr	r2, [pc, #28]	; (13678 <log_output_timestamp_freq_set+0x20>)
   1365a:	2100      	movs	r1, #0
   1365c:	2301      	movs	r3, #1
   1365e:	4290      	cmp	r0, r2
   13660:	d806      	bhi.n	13670 <log_output_timestamp_freq_set+0x18>
   13662:	4a06      	ldr	r2, [pc, #24]	; (1367c <log_output_timestamp_freq_set+0x24>)
   13664:	b901      	cbnz	r1, 13668 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
   13666:	2301      	movs	r3, #1
   13668:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   1366a:	4b05      	ldr	r3, [pc, #20]	; (13680 <log_output_timestamp_freq_set+0x28>)
   1366c:	6018      	str	r0, [r3, #0]
}
   1366e:	4770      	bx	lr
		frequency /= 2U;
   13670:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   13672:	005b      	lsls	r3, r3, #1
   13674:	2101      	movs	r1, #1
   13676:	e7f2      	b.n	1365e <log_output_timestamp_freq_set+0x6>
   13678:	000f4240 	.word	0x000f4240
   1367c:	20001a6c 	.word	0x20001a6c
   13680:	20001a70 	.word	0x20001a70

00013684 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   13684:	4b01      	ldr	r3, [pc, #4]	; (1368c <format_set+0x8>)
	return 0;
}
   13686:	2000      	movs	r0, #0
	log_format_current = log_type;
   13688:	6019      	str	r1, [r3, #0]
}
   1368a:	4770      	bx	lr
   1368c:	20001a88 	.word	0x20001a88

00013690 <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
   13690:	4b02      	ldr	r3, [pc, #8]	; (1369c <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   13692:	4803      	ldr	r0, [pc, #12]	; (136a0 <panic+0x10>)
   13694:	2201      	movs	r2, #1
   13696:	701a      	strb	r2, [r3, #0]
   13698:	f020 b999 	b.w	339ce <log_output_flush>
   1369c:	200032a3 	.word	0x200032a3
   136a0:	000398d8 	.word	0x000398d8

000136a4 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   136a4:	4801      	ldr	r0, [pc, #4]	; (136ac <dropped+0x8>)
   136a6:	f7ff bfab 	b.w	13600 <log_output_dropped_process>
   136aa:	bf00      	nop
   136ac:	000398d8 	.word	0x000398d8

000136b0 <process>:
{
   136b0:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   136b2:	4b06      	ldr	r3, [pc, #24]	; (136cc <process+0x1c>)
   136b4:	6818      	ldr	r0, [r3, #0]
{
   136b6:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   136b8:	f7ff fb74 	bl	12da4 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
   136bc:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   136be:	4603      	mov	r3, r0
}
   136c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
   136c4:	4802      	ldr	r0, [pc, #8]	; (136d0 <process+0x20>)
   136c6:	220f      	movs	r2, #15
   136c8:	4718      	bx	r3
   136ca:	bf00      	nop
   136cc:	20001a88 	.word	0x20001a88
   136d0:	000398d8 	.word	0x000398d8

000136d4 <char_out>:
{
   136d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   136d6:	4f07      	ldr	r7, [pc, #28]	; (136f4 <char_out+0x20>)
   136d8:	460d      	mov	r5, r1
   136da:	4604      	mov	r4, r0
   136dc:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
   136de:	42b4      	cmp	r4, r6
   136e0:	d101      	bne.n	136e6 <char_out+0x12>
}
   136e2:	4628      	mov	r0, r5
   136e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
   136e6:	f814 1b01 	ldrb.w	r1, [r4], #1
   136ea:	68bb      	ldr	r3, [r7, #8]
   136ec:	4801      	ldr	r0, [pc, #4]	; (136f4 <char_out+0x20>)
   136ee:	685b      	ldr	r3, [r3, #4]
   136f0:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   136f2:	e7f4      	b.n	136de <char_out+0xa>
   136f4:	00039240 	.word	0x00039240

000136f8 <read_pnp_id>:

#if CONFIG_BT_DIS_PNP
static ssize_t read_pnp_id(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, void *buf,
			   uint16_t len, uint16_t offset)
{
   136f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &dis_pnp_id,
   136fa:	2407      	movs	r4, #7
   136fc:	9402      	str	r4, [sp, #8]
   136fe:	4c04      	ldr	r4, [pc, #16]	; (13710 <read_pnp_id+0x18>)
   13700:	9401      	str	r4, [sp, #4]
   13702:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   13706:	9400      	str	r4, [sp, #0]
   13708:	f023 fbf3 	bl	36ef2 <bt_gatt_attr_read>
				 sizeof(dis_pnp_id));
}
   1370c:	b004      	add	sp, #16
   1370e:	bd10      	pop	{r4, pc}
   13710:	200009f9 	.word	0x200009f9

00013714 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
   13714:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   13718:	460f      	mov	r7, r1
   1371a:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1371c:	2108      	movs	r1, #8
   1371e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
   13720:	f8df 9050 	ldr.w	r9, [pc, #80]	; 13774 <nvs_recover_last_ate+0x60>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13724:	f020 fa34 	bl	33b90 <nvs_al_size.isra.0>
	*addr -= ate_size;
   13728:	683c      	ldr	r4, [r7, #0]
   1372a:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1372c:	4680      	mov	r8, r0
	*addr -= ate_size;
   1372e:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
   13730:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
   13734:	42ac      	cmp	r4, r5
   13736:	d803      	bhi.n	13740 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
   13738:	2000      	movs	r0, #0
}
   1373a:	b003      	add	sp, #12
   1373c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   13740:	2308      	movs	r3, #8
   13742:	466a      	mov	r2, sp
   13744:	4621      	mov	r1, r4
   13746:	4630      	mov	r0, r6
   13748:	f020 f992 	bl	33a70 <nvs_flash_rd>
		if (rc) {
   1374c:	2800      	cmp	r0, #0
   1374e:	d1f4      	bne.n	1373a <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
   13750:	4669      	mov	r1, sp
   13752:	4630      	mov	r0, r6
   13754:	f020 fa26 	bl	33ba4 <nvs_ate_valid>
   13758:	b140      	cbz	r0, 1376c <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
   1375a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1375e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
   13762:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
   13764:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
   13768:	4413      	add	r3, r2
   1376a:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
   1376c:	eba4 0408 	sub.w	r4, r4, r8
   13770:	e7e0      	b.n	13734 <nvs_recover_last_ate+0x20>
   13772:	bf00      	nop
   13774:	ffff0000 	.word	0xffff0000

00013778 <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
   13778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1377c:	b089      	sub	sp, #36	; 0x24
   1377e:	4604      	mov	r4, r0
   13780:	af00      	add	r7, sp, #0

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   13782:	f100 0814 	add.w	r8, r0, #20
	return z_impl_k_mutex_init(mutex);
   13786:	4640      	mov	r0, r8
   13788:	f024 ffdd 	bl	38746 <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   1378c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   1378e:	6883      	ldr	r3, [r0, #8]
   13790:	68db      	ldr	r3, [r3, #12]
   13792:	4798      	blx	r3
   13794:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   13796:	b9b0      	cbnz	r0, 137c6 <nvs_mount+0x4e>
		LOG_ERR("Could not obtain flash parameters");
   13798:	466c      	mov	r4, sp
   1379a:	b088      	sub	sp, #32
   1379c:	466a      	mov	r2, sp
   1379e:	4b97      	ldr	r3, [pc, #604]	; (139fc <nvs_mount+0x284>)

	write_block_size = flash_get_write_block_size(fs->flash_device);

	/* check that the write block size is supported */
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
		LOG_ERR("Unsupported write block size");
   137a0:	6153      	str	r3, [r2, #20]
   137a2:	4b97      	ldr	r3, [pc, #604]	; (13a00 <nvs_mount+0x288>)
   137a4:	6193      	str	r3, [r2, #24]
   137a6:	2303      	movs	r3, #3
   137a8:	f842 3f10 	str.w	r3, [r2, #16]!
   137ac:	4895      	ldr	r0, [pc, #596]	; (13a04 <nvs_mount+0x28c>)
   137ae:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   137b2:	f020 f9ea 	bl	33b8a <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   137b6:	f06f 0515 	mvn.w	r5, #21
   137ba:	46a5      	mov	sp, r4
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   137bc:	4628      	mov	r0, r5
   137be:	3724      	adds	r7, #36	; 0x24
   137c0:	46bd      	mov	sp, r7
   137c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
   137c6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
   137c8:	6883      	ldr	r3, [r0, #8]
   137ca:	68db      	ldr	r3, [r3, #12]
   137cc:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   137ce:	6803      	ldr	r3, [r0, #0]
   137d0:	3b01      	subs	r3, #1
   137d2:	2b1f      	cmp	r3, #31
   137d4:	d904      	bls.n	137e0 <nvs_mount+0x68>
		LOG_ERR("Unsupported write block size");
   137d6:	466c      	mov	r4, sp
   137d8:	b088      	sub	sp, #32
   137da:	466a      	mov	r2, sp
   137dc:	4b8a      	ldr	r3, [pc, #552]	; (13a08 <nvs_mount+0x290>)
   137de:	e7df      	b.n	137a0 <nvs_mount+0x28>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   137e0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   137e2:	6821      	ldr	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   137e4:	f107 0214 	add.w	r2, r7, #20
   137e8:	f024 fd3d 	bl	38266 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   137ec:	b120      	cbz	r0, 137f8 <nvs_mount+0x80>
		LOG_ERR("Unable to get page info");
   137ee:	466c      	mov	r4, sp
   137f0:	b088      	sub	sp, #32
   137f2:	466a      	mov	r2, sp
   137f4:	4b85      	ldr	r3, [pc, #532]	; (13a0c <nvs_mount+0x294>)
   137f6:	e7d3      	b.n	137a0 <nvs_mount+0x28>
	if (!fs->sector_size || fs->sector_size % info.size) {
   137f8:	89a5      	ldrh	r5, [r4, #12]
   137fa:	b12d      	cbz	r5, 13808 <nvs_mount+0x90>
   137fc:	69bb      	ldr	r3, [r7, #24]
   137fe:	fbb5 f2f3 	udiv	r2, r5, r3
   13802:	fb03 5512 	mls	r5, r3, r2, r5
   13806:	b125      	cbz	r5, 13812 <nvs_mount+0x9a>
		LOG_ERR("Invalid sector size");
   13808:	466c      	mov	r4, sp
   1380a:	b088      	sub	sp, #32
   1380c:	466a      	mov	r2, sp
   1380e:	4b80      	ldr	r3, [pc, #512]	; (13a10 <nvs_mount+0x298>)
   13810:	e7c6      	b.n	137a0 <nvs_mount+0x28>
	if (fs->sector_count < 2) {
   13812:	89e3      	ldrh	r3, [r4, #14]
   13814:	2b01      	cmp	r3, #1
   13816:	d804      	bhi.n	13822 <nvs_mount+0xaa>
		LOG_ERR("Configuration error - sector count");
   13818:	466c      	mov	r4, sp
   1381a:	b088      	sub	sp, #32
   1381c:	466a      	mov	r2, sp
   1381e:	4b7d      	ldr	r3, [pc, #500]	; (13a14 <nvs_mount+0x29c>)
   13820:	e7be      	b.n	137a0 <nvs_mount+0x28>
	uint8_t erase_value = fs->flash_parameters->erase_value;
   13822:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
   13824:	603d      	str	r5, [r7, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
   13826:	f893 a004 	ldrb.w	sl, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   1382a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1382e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13832:	4640      	mov	r0, r8
   13834:	f01e f864 	bl	31900 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13838:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1383a:	2108      	movs	r1, #8
   1383c:	f020 f9a8 	bl	33b90 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
   13840:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13842:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
   13844:	89e3      	ldrh	r3, [r4, #14]
   13846:	fa1f fb85 	uxth.w	fp, r5
   1384a:	455b      	cmp	r3, fp
   1384c:	d808      	bhi.n	13860 <nvs_mount+0xe8>
	if (closed_sectors == fs->sector_count) {
   1384e:	89e3      	ldrh	r3, [r4, #14]
   13850:	454b      	cmp	r3, r9
   13852:	d123      	bne.n	1389c <nvs_mount+0x124>
	return z_impl_k_mutex_unlock(mutex);
   13854:	4640      	mov	r0, r8
   13856:	f01e f8cd 	bl	319f4 <z_impl_k_mutex_unlock>
		rc = -EDEADLK;
   1385a:	f06f 052c 	mvn.w	r5, #44	; 0x2c
   1385e:	e7ad      	b.n	137bc <nvs_mount+0x44>
		       (uint16_t)(fs->sector_size - ate_size);
   13860:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
   13862:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
   13864:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
   13866:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   1386a:	4652      	mov	r2, sl
   1386c:	2308      	movs	r3, #8
   1386e:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
   13870:	6039      	str	r1, [r7, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   13872:	f020 f942 	bl	33afa <nvs_flash_cmp_const>
		if (rc) {
   13876:	b178      	cbz	r0, 13898 <nvs_mount+0x120>
			nvs_sector_advance(fs, &addr);
   13878:	4639      	mov	r1, r7
   1387a:	4620      	mov	r0, r4
   1387c:	f020 f906 	bl	33a8c <nvs_sector_advance>
			closed_sectors++;
   13880:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   13884:	6839      	ldr	r1, [r7, #0]
   13886:	2308      	movs	r3, #8
   13888:	4652      	mov	r2, sl
   1388a:	4620      	mov	r0, r4
			closed_sectors++;
   1388c:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   13890:	f020 f933 	bl	33afa <nvs_flash_cmp_const>
			if (!rc) {
   13894:	2800      	cmp	r0, #0
   13896:	d0da      	beq.n	1384e <nvs_mount+0xd6>
	for (i = 0; i < fs->sector_count; i++) {
   13898:	3501      	adds	r5, #1
   1389a:	e7d3      	b.n	13844 <nvs_mount+0xcc>
	if (i == fs->sector_count) {
   1389c:	455b      	cmp	r3, fp
   1389e:	d10b      	bne.n	138b8 <nvs_mount+0x140>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   138a0:	6839      	ldr	r1, [r7, #0]
   138a2:	2308      	movs	r3, #8
   138a4:	4652      	mov	r2, sl
   138a6:	1b89      	subs	r1, r1, r6
   138a8:	4620      	mov	r0, r4
   138aa:	f020 f926 	bl	33afa <nvs_flash_cmp_const>
		if (!rc) {
   138ae:	b918      	cbnz	r0, 138b8 <nvs_mount+0x140>
			nvs_sector_advance(fs, &addr);
   138b0:	4639      	mov	r1, r7
   138b2:	4620      	mov	r0, r4
   138b4:	f020 f8ea 	bl	33a8c <nvs_sector_advance>
	rc = nvs_recover_last_ate(fs, &addr);
   138b8:	4639      	mov	r1, r7
   138ba:	4620      	mov	r0, r4
   138bc:	f7ff ff2a 	bl	13714 <nvs_recover_last_ate>
	if (rc) {
   138c0:	4605      	mov	r5, r0
   138c2:	b118      	cbz	r0, 138cc <nvs_mount+0x154>
   138c4:	4640      	mov	r0, r8
   138c6:	f01e f895 	bl	319f4 <z_impl_k_mutex_unlock>
	if (rc) {
   138ca:	e777      	b.n	137bc <nvs_mount+0x44>
	fs->ate_wra = addr;
   138cc:	683b      	ldr	r3, [r7, #0]
   138ce:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   138d0:	ea4f 4913 	mov.w	r9, r3, lsr #16
   138d4:	ea4f 4909 	mov.w	r9, r9, lsl #16
   138d8:	f8c4 9008 	str.w	r9, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
   138dc:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   138e0:	4299      	cmp	r1, r3
   138e2:	d30f      	bcc.n	13904 <nvs_mount+0x18c>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   138e4:	2308      	movs	r3, #8
   138e6:	1d3a      	adds	r2, r7, #4
   138e8:	4620      	mov	r0, r4
   138ea:	f020 f8c1 	bl	33a70 <nvs_flash_rd>
		if (rc) {
   138ee:	4605      	mov	r5, r0
   138f0:	2800      	cmp	r0, #0
   138f2:	d1e7      	bne.n	138c4 <nvs_mount+0x14c>
   138f4:	1d3b      	adds	r3, r7, #4
		if (data8[i] != value) {
   138f6:	f813 2b01 	ldrb.w	r2, [r3], #1
   138fa:	4592      	cmp	sl, r2
   138fc:	d149      	bne.n	13992 <nvs_mount+0x21a>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   138fe:	3501      	adds	r5, #1
   13900:	2d08      	cmp	r5, #8
   13902:	d1f8      	bne.n	138f6 <nvs_mount+0x17e>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   13904:	6863      	ldr	r3, [r4, #4]
   13906:	0c1b      	lsrs	r3, r3, #16
   13908:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
   1390a:	4639      	mov	r1, r7
   1390c:	4620      	mov	r0, r4
	addr = fs->ate_wra & ADDR_SECT_MASK;
   1390e:	603b      	str	r3, [r7, #0]
	nvs_sector_advance(fs, &addr);
   13910:	f020 f8bc 	bl	33a8c <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   13914:	89a3      	ldrh	r3, [r4, #12]
   13916:	6839      	ldr	r1, [r7, #0]
   13918:	4652      	mov	r2, sl
   1391a:	4620      	mov	r0, r4
   1391c:	f020 f8ed 	bl	33afa <nvs_flash_cmp_const>
	if (rc < 0) {
   13920:	1e05      	subs	r5, r0, #0
   13922:	dbcf      	blt.n	138c4 <nvs_mount+0x14c>
		addr = fs->ate_wra + ate_size;
   13924:	6863      	ldr	r3, [r4, #4]
	if (rc) {
   13926:	f000 808b 	beq.w	13a40 <nvs_mount+0x2c8>
		addr = fs->ate_wra + ate_size;
   1392a:	eb06 0903 	add.w	r9, r6, r3
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   1392e:	f64f 7aff 	movw	sl, #65535	; 0xffff
   13932:	89a3      	ldrh	r3, [r4, #12]
		addr = fs->ate_wra + ate_size;
   13934:	f8c7 9000 	str.w	r9, [r7]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   13938:	fa1f f289 	uxth.w	r2, r9
   1393c:	1b9b      	subs	r3, r3, r6
   1393e:	429a      	cmp	r2, r3
   13940:	d341      	bcc.n	139c6 <nvs_mount+0x24e>
		LOG_INF("No GC Done marker found: restarting gc");
   13942:	466d      	mov	r5, sp
   13944:	b088      	sub	sp, #32
   13946:	466a      	mov	r2, sp
   13948:	4b33      	ldr	r3, [pc, #204]	; (13a18 <nvs_mount+0x2a0>)
   1394a:	6153      	str	r3, [r2, #20]
   1394c:	4b33      	ldr	r3, [pc, #204]	; (13a1c <nvs_mount+0x2a4>)
   1394e:	6193      	str	r3, [r2, #24]
   13950:	2303      	movs	r3, #3
   13952:	f842 3f10 	str.w	r3, [r2, #16]!
   13956:	482b      	ldr	r0, [pc, #172]	; (13a04 <nvs_mount+0x28c>)
   13958:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   1395c:	f020 f915 	bl	33b8a <z_log_msg_static_create.constprop.0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   13960:	4620      	mov	r0, r4
   13962:	46ad      	mov	sp, r5
   13964:	6861      	ldr	r1, [r4, #4]
   13966:	f020 f8ed 	bl	33b44 <nvs_flash_erase_sector>
		if (rc) {
   1396a:	4605      	mov	r5, r0
   1396c:	2800      	cmp	r0, #0
   1396e:	d1a9      	bne.n	138c4 <nvs_mount+0x14c>
		fs->ate_wra &= ADDR_SECT_MASK;
   13970:	6863      	ldr	r3, [r4, #4]
   13972:	4a2b      	ldr	r2, [pc, #172]	; (13a20 <nvs_mount+0x2a8>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   13974:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
   13976:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   13978:	440b      	add	r3, r1
   1397a:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
   1397e:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   13980:	4013      	ands	r3, r2
   13982:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   13984:	4620      	mov	r0, r4
   13986:	f020 f9ef 	bl	33d68 <nvs_gc>
			rc = nvs_flash_erase_sector(fs, addr);
   1398a:	4605      	mov	r5, r0
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   1398c:	2d00      	cmp	r5, #0
   1398e:	d073      	beq.n	13a78 <nvs_mount+0x300>
   13990:	e798      	b.n	138c4 <nvs_mount+0x14c>
		if (nvs_ate_valid(fs, &last_ate)) {
   13992:	1d39      	adds	r1, r7, #4
   13994:	4620      	mov	r0, r4
   13996:	f020 f905 	bl	33ba4 <nvs_ate_valid>
   1399a:	6862      	ldr	r2, [r4, #4]
   1399c:	b910      	cbnz	r0, 139a4 <nvs_mount+0x22c>
		fs->ate_wra -= ate_size;
   1399e:	1b92      	subs	r2, r2, r6
   139a0:	6062      	str	r2, [r4, #4]
   139a2:	e79b      	b.n	138dc <nvs_mount+0x164>
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   139a4:	893d      	ldrh	r5, [r7, #8]
   139a6:	88f9      	ldrh	r1, [r7, #6]
   139a8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
   139aa:	f8c4 9008 	str.w	r9, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   139ae:	4429      	add	r1, r5
   139b0:	f020 f8ee 	bl	33b90 <nvs_al_size.isra.0>
   139b4:	4448      	add	r0, r9
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   139b6:	4290      	cmp	r0, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   139b8:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   139ba:	d1f0      	bne.n	1399e <nvs_mount+0x226>
   139bc:	2d00      	cmp	r5, #0
   139be:	d0ee      	beq.n	1399e <nvs_mount+0x226>
				rc = -ESPIPE;
   139c0:	f06f 051c 	mvn.w	r5, #28
   139c4:	e0a5      	b.n	13b12 <nvs_mount+0x39a>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   139c6:	2308      	movs	r3, #8
   139c8:	f107 020c 	add.w	r2, r7, #12
   139cc:	4649      	mov	r1, r9
   139ce:	4620      	mov	r0, r4
   139d0:	f020 f84e 	bl	33a70 <nvs_flash_rd>
			if (rc) {
   139d4:	4605      	mov	r5, r0
   139d6:	2800      	cmp	r0, #0
   139d8:	f47f af74 	bne.w	138c4 <nvs_mount+0x14c>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   139dc:	f107 010c 	add.w	r1, r7, #12
   139e0:	4620      	mov	r0, r4
   139e2:	f020 f8df 	bl	33ba4 <nvs_ate_valid>
   139e6:	b130      	cbz	r0, 139f6 <nvs_mount+0x27e>
   139e8:	89bb      	ldrh	r3, [r7, #12]
   139ea:	4553      	cmp	r3, sl
   139ec:	d103      	bne.n	139f6 <nvs_mount+0x27e>
			    (gc_done_ate.id == 0xffff) &&
   139ee:	8a3b      	ldrh	r3, [r7, #16]
   139f0:	2b00      	cmp	r3, #0
   139f2:	f000 8094 	beq.w	13b1e <nvs_mount+0x3a6>
			addr += ate_size;
   139f6:	44b1      	add	r9, r6
   139f8:	e79b      	b.n	13932 <nvs_mount+0x1ba>
   139fa:	bf00      	nop
   139fc:	0003b8a7 	.word	0x0003b8a7
   13a00:	0003b9f7 	.word	0x0003b9f7
   13a04:	00039618 	.word	0x00039618
   13a08:	0003b8cd 	.word	0x0003b8cd
   13a0c:	0003b8ee 	.word	0x0003b8ee
   13a10:	0003b90a 	.word	0x0003b90a
   13a14:	0003b922 	.word	0x0003b922
   13a18:	0003b98f 	.word	0x0003b98f
   13a1c:	0003b9eb 	.word	0x0003b9eb
   13a20:	ffff0000 	.word	0xffff0000
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   13a24:	1a5b      	subs	r3, r3, r1
   13a26:	4652      	mov	r2, sl
   13a28:	4620      	mov	r0, r4
   13a2a:	f020 f866 	bl	33afa <nvs_flash_cmp_const>
		if (rc < 0) {
   13a2e:	1e05      	subs	r5, r0, #0
   13a30:	f6ff af48 	blt.w	138c4 <nvs_mount+0x14c>
		if (!rc) {
   13a34:	d008      	beq.n	13a48 <nvs_mount+0x2d0>
		fs->data_wra += fs->flash_parameters->write_block_size;
   13a36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   13a38:	68a3      	ldr	r3, [r4, #8]
   13a3a:	6812      	ldr	r2, [r2, #0]
   13a3c:	4413      	add	r3, r2
   13a3e:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   13a40:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   13a44:	428b      	cmp	r3, r1
   13a46:	d8ed      	bhi.n	13a24 <nvs_mount+0x2ac>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   13a48:	6861      	ldr	r1, [r4, #4]
   13a4a:	89a3      	ldrh	r3, [r4, #12]
   13a4c:	eb01 0246 	add.w	r2, r1, r6, lsl #1
   13a50:	429a      	cmp	r2, r3
   13a52:	d19b      	bne.n	1398c <nvs_mount+0x214>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   13a54:	f8df 9100 	ldr.w	r9, [pc, #256]	; 13b58 <nvs_mount+0x3e0>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   13a58:	68a3      	ldr	r3, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   13a5a:	ea01 0209 	and.w	r2, r1, r9
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   13a5e:	4293      	cmp	r3, r2
   13a60:	d094      	beq.n	1398c <nvs_mount+0x214>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   13a62:	4620      	mov	r0, r4
   13a64:	f020 f86e 	bl	33b44 <nvs_flash_erase_sector>
		if (rc) {
   13a68:	4605      	mov	r5, r0
   13a6a:	2800      	cmp	r0, #0
   13a6c:	f47f af2a 	bne.w	138c4 <nvs_mount+0x14c>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   13a70:	6863      	ldr	r3, [r4, #4]
   13a72:	ea03 0309 	and.w	r3, r3, r9
   13a76:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
   13a78:	89a3      	ldrh	r3, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   13a7a:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   13a7c:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   13a80:	429a      	cmp	r2, r3
   13a82:	d042      	beq.n	13b0a <nvs_mount+0x392>
   13a84:	4640      	mov	r0, r8
   13a86:	f01d ffb5 	bl	319f4 <z_impl_k_mutex_unlock>
	fs->ready = true;
   13a8a:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   13a8c:	46e8      	mov	r8, sp
   13a8e:	b08a      	sub	sp, #40	; 0x28
	fs->ready = true;
   13a90:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   13a92:	89e2      	ldrh	r2, [r4, #14]
   13a94:	89a3      	ldrh	r3, [r4, #12]
   13a96:	466d      	mov	r5, sp
   13a98:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 13b5c <nvs_mount+0x3e4>
   13a9c:	4930      	ldr	r1, [pc, #192]	; (13b60 <nvs_mount+0x3e8>)
   13a9e:	6169      	str	r1, [r5, #20]
   13aa0:	462e      	mov	r6, r5
   13aa2:	f04f 0905 	mov.w	r9, #5
   13aa6:	e9c5 a206 	strd	sl, r2, [r5, #24]
   13aaa:	622b      	str	r3, [r5, #32]
   13aac:	f846 9f10 	str.w	r9, [r6, #16]!
   13ab0:	482c      	ldr	r0, [pc, #176]	; (13b64 <nvs_mount+0x3ec>)
   13ab2:	4632      	mov	r2, r6
   13ab4:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
   13ab8:	f020 f867 	bl	33b8a <z_log_msg_static_create.constprop.0>
   13abc:	46c5      	mov	sp, r8
	LOG_INF("alloc wra: %d, %x",
   13abe:	6863      	ldr	r3, [r4, #4]
   13ac0:	46ad      	mov	sp, r5
   13ac2:	4a29      	ldr	r2, [pc, #164]	; (13b68 <nvs_mount+0x3f0>)
   13ac4:	4827      	ldr	r0, [pc, #156]	; (13b64 <nvs_mount+0x3ec>)
   13ac6:	f8c5 9010 	str.w	r9, [r5, #16]
   13aca:	e9c5 2a05 	strd	r2, sl, [r5, #20]
   13ace:	0c1a      	lsrs	r2, r3, #16
   13ad0:	b29b      	uxth	r3, r3
   13ad2:	61ea      	str	r2, [r5, #28]
   13ad4:	622b      	str	r3, [r5, #32]
   13ad6:	4632      	mov	r2, r6
   13ad8:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
   13adc:	f020 f855 	bl	33b8a <z_log_msg_static_create.constprop.0>
   13ae0:	46c5      	mov	sp, r8
	LOG_INF("data wra: %d, %x",
   13ae2:	68a3      	ldr	r3, [r4, #8]
   13ae4:	46ad      	mov	sp, r5
   13ae6:	4a21      	ldr	r2, [pc, #132]	; (13b6c <nvs_mount+0x3f4>)
   13ae8:	f8c5 9010 	str.w	r9, [r5, #16]
   13aec:	e9c5 2a05 	strd	r2, sl, [r5, #20]
   13af0:	0c1a      	lsrs	r2, r3, #16
   13af2:	b29b      	uxth	r3, r3
   13af4:	61ea      	str	r2, [r5, #28]
   13af6:	622b      	str	r3, [r5, #32]
   13af8:	481a      	ldr	r0, [pc, #104]	; (13b64 <nvs_mount+0x3ec>)
   13afa:	4632      	mov	r2, r6
   13afc:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
   13b00:	f020 f843 	bl	33b8a <z_log_msg_static_create.constprop.0>
	return 0;
   13b04:	2500      	movs	r5, #0
   13b06:	46c5      	mov	sp, r8
   13b08:	e658      	b.n	137bc <nvs_mount+0x44>
		rc = nvs_add_gc_done_ate(fs);
   13b0a:	4620      	mov	r0, r4
   13b0c:	f020 f917 	bl	33d3e <nvs_add_gc_done_ate>
   13b10:	4605      	mov	r5, r0
   13b12:	4640      	mov	r0, r8
   13b14:	f01d ff6e 	bl	319f4 <z_impl_k_mutex_unlock>
	if (rc) {
   13b18:	2d00      	cmp	r5, #0
   13b1a:	d0b6      	beq.n	13a8a <nvs_mount+0x312>
   13b1c:	e64e      	b.n	137bc <nvs_mount+0x44>
			LOG_INF("GC Done marker found");
   13b1e:	466d      	mov	r5, sp
   13b20:	b088      	sub	sp, #32
   13b22:	466a      	mov	r2, sp
   13b24:	4b12      	ldr	r3, [pc, #72]	; (13b70 <nvs_mount+0x3f8>)
   13b26:	6153      	str	r3, [r2, #20]
   13b28:	4b12      	ldr	r3, [pc, #72]	; (13b74 <nvs_mount+0x3fc>)
   13b2a:	6193      	str	r3, [r2, #24]
   13b2c:	2303      	movs	r3, #3
   13b2e:	f842 3f10 	str.w	r3, [r2, #16]!
   13b32:	480c      	ldr	r0, [pc, #48]	; (13b64 <nvs_mount+0x3ec>)
   13b34:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   13b38:	f020 f827 	bl	33b8a <z_log_msg_static_create.constprop.0>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   13b3c:	6863      	ldr	r3, [r4, #4]
   13b3e:	0c1b      	lsrs	r3, r3, #16
   13b40:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
   13b42:	4639      	mov	r1, r7
   13b44:	4620      	mov	r0, r4
   13b46:	46ad      	mov	sp, r5
			addr = fs->ate_wra & ADDR_SECT_MASK;
   13b48:	603b      	str	r3, [r7, #0]
			nvs_sector_advance(fs, &addr);
   13b4a:	f01f ff9f 	bl	33a8c <nvs_sector_advance>
			rc = nvs_flash_erase_sector(fs, addr);
   13b4e:	6839      	ldr	r1, [r7, #0]
   13b50:	4620      	mov	r0, r4
   13b52:	f01f fff7 	bl	33b44 <nvs_flash_erase_sector>
   13b56:	e718      	b.n	1398a <nvs_mount+0x212>
   13b58:	ffff0000 	.word	0xffff0000
   13b5c:	0003b9f7 	.word	0x0003b9f7
   13b60:	0003b949 	.word	0x0003b949
   13b64:	00039618 	.word	0x00039618
   13b68:	0003b964 	.word	0x0003b964
   13b6c:	0003b97a 	.word	0x0003b97a
   13b70:	0003b9ba 	.word	0x0003b9ba
   13b74:	0003b9eb 	.word	0x0003b9eb

00013b78 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   13b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b7c:	b089      	sub	sp, #36	; 0x24
   13b7e:	461d      	mov	r5, r3
   13b80:	af00      	add	r7, sp, #0
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   13b82:	7c03      	ldrb	r3, [r0, #16]
{
   13b84:	6079      	str	r1, [r7, #4]
   13b86:	4604      	mov	r4, r0
   13b88:	4691      	mov	r9, r2
	if (!fs->ready) {
   13b8a:	b9b3      	cbnz	r3, 13bba <nvs_write+0x42>
		LOG_ERR("NVS not initialized");
   13b8c:	466c      	mov	r4, sp
   13b8e:	b088      	sub	sp, #32
   13b90:	466a      	mov	r2, sp
   13b92:	4b69      	ldr	r3, [pc, #420]	; (13d38 <nvs_write+0x1c0>)
   13b94:	6153      	str	r3, [r2, #20]
   13b96:	4b69      	ldr	r3, [pc, #420]	; (13d3c <nvs_write+0x1c4>)
   13b98:	6193      	str	r3, [r2, #24]
   13b9a:	2303      	movs	r3, #3
   13b9c:	f842 3f10 	str.w	r3, [r2, #16]!
   13ba0:	4867      	ldr	r0, [pc, #412]	; (13d40 <nvs_write+0x1c8>)
   13ba2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13ba6:	f01f fff0 	bl	33b8a <z_log_msg_static_create.constprop.0>
		return -EACCES;
   13baa:	f06f 060c 	mvn.w	r6, #12
   13bae:	46a5      	mov	sp, r4
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   13bb0:	4630      	mov	r0, r6
   13bb2:	3724      	adds	r7, #36	; 0x24
   13bb4:	46bd      	mov	sp, r7
   13bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13bba:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   13bbc:	2108      	movs	r1, #8
   13bbe:	4610      	mov	r0, r2
   13bc0:	f01f ffe6 	bl	33b90 <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
   13bc4:	4629      	mov	r1, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13bc6:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   13bc8:	4610      	mov	r0, r2
   13bca:	f01f ffe1 	bl	33b90 <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   13bce:	89a3      	ldrh	r3, [r4, #12]
   13bd0:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   13bd4:	42ab      	cmp	r3, r5
	data_size = nvs_al_size(fs, len);
   13bd6:	4680      	mov	r8, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   13bd8:	f0c0 80ab 	bcc.w	13d32 <nvs_write+0x1ba>
   13bdc:	b11d      	cbz	r5, 13be6 <nvs_write+0x6e>
	    ((len > 0) && (data == NULL))) {
   13bde:	f1b9 0f00 	cmp.w	r9, #0
   13be2:	f000 80a6 	beq.w	13d32 <nvs_write+0x1ba>
	wlk_addr = fs->ate_wra;
   13be6:	6863      	ldr	r3, [r4, #4]
   13be8:	60fb      	str	r3, [r7, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   13bea:	f107 0210 	add.w	r2, r7, #16
   13bee:	f107 010c 	add.w	r1, r7, #12
   13bf2:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   13bf4:	f8d7 b00c 	ldr.w	fp, [r7, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   13bf8:	f020 f80c 	bl	33c14 <nvs_prev_ate>
		if (rc) {
   13bfc:	4606      	mov	r6, r0
   13bfe:	2800      	cmp	r0, #0
   13c00:	d1d6      	bne.n	13bb0 <nvs_write+0x38>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   13c02:	8a3b      	ldrh	r3, [r7, #16]
   13c04:	687a      	ldr	r2, [r7, #4]
   13c06:	4293      	cmp	r3, r2
   13c08:	d005      	beq.n	13c16 <nvs_write+0x9e>
		if (wlk_addr == fs->ate_wra) {
   13c0a:	6862      	ldr	r2, [r4, #4]
   13c0c:	68fb      	ldr	r3, [r7, #12]
   13c0e:	429a      	cmp	r2, r3
   13c10:	d1eb      	bne.n	13bea <nvs_write+0x72>
		if (len == 0) {
   13c12:	b9dd      	cbnz	r5, 13c4c <nvs_write+0xd4>
   13c14:	e7cc      	b.n	13bb0 <nvs_write+0x38>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   13c16:	f107 0110 	add.w	r1, r7, #16
   13c1a:	4620      	mov	r0, r4
   13c1c:	f01f ffc2 	bl	33ba4 <nvs_ate_valid>
   13c20:	2800      	cmp	r0, #0
   13c22:	d0f2      	beq.n	13c0a <nvs_write+0x92>
		rd_addr += wlk_ate.offset;
   13c24:	8a78      	ldrh	r0, [r7, #18]
			if (wlk_ate.len == 0U) {
   13c26:	8abb      	ldrh	r3, [r7, #20]
		if (len == 0) {
   13c28:	b175      	cbz	r5, 13c48 <nvs_write+0xd0>
		} else if (len == wlk_ate.len) {
   13c2a:	42ab      	cmp	r3, r5
   13c2c:	d10e      	bne.n	13c4c <nvs_write+0xd4>
		rd_addr &= ADDR_SECT_MASK;
   13c2e:	ea4f 411b 	mov.w	r1, fp, lsr #16
   13c32:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   13c34:	4401      	add	r1, r0
   13c36:	462b      	mov	r3, r5
   13c38:	464a      	mov	r2, r9
   13c3a:	4620      	mov	r0, r4
   13c3c:	f01f ff33 	bl	33aa6 <nvs_flash_block_cmp>
			if (rc <= 0) {
   13c40:	2800      	cmp	r0, #0
   13c42:	dc03      	bgt.n	13c4c <nvs_write+0xd4>
   13c44:	4606      	mov	r6, r0
   13c46:	e7b3      	b.n	13bb0 <nvs_write+0x38>
			if (wlk_ate.len == 0U) {
   13c48:	2b00      	cmp	r3, #0
   13c4a:	d0b1      	beq.n	13bb0 <nvs_write+0x38>
	if (data_size) {
   13c4c:	f1b8 0f00 	cmp.w	r8, #0
   13c50:	d13e      	bne.n	13cd0 <nvs_write+0x158>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   13c52:	f104 0314 	add.w	r3, r4, #20
   13c56:	603b      	str	r3, [r7, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   13c58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13c5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13c60:	f104 0014 	add.w	r0, r4, #20
   13c64:	f01d fe4c 	bl	31900 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
   13c68:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 13d44 <nvs_write+0x1cc>
		if (gc_count == fs->sector_count) {
   13c6c:	89e3      	ldrh	r3, [r4, #14]
   13c6e:	429e      	cmp	r6, r3
   13c70:	d05c      	beq.n	13d2c <nvs_write+0x1b4>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   13c72:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   13c76:	eb08 0103 	add.w	r1, r8, r3
   13c7a:	428a      	cmp	r2, r1
   13c7c:	d32c      	bcc.n	13cd8 <nvs_write+0x160>
	entry.id = id;
   13c7e:	687a      	ldr	r2, [r7, #4]
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   13c80:	837b      	strh	r3, [r7, #26]
	entry.part = 0xff;
   13c82:	23ff      	movs	r3, #255	; 0xff
	entry.id = id;
   13c84:	833a      	strh	r2, [r7, #24]
	entry.part = 0xff;
   13c86:	77bb      	strb	r3, [r7, #30]
	nvs_ate_crc8_update(&entry);
   13c88:	f107 0018 	add.w	r0, r7, #24
	entry.len = (uint16_t)len;
   13c8c:	83bd      	strh	r5, [r7, #28]
	nvs_ate_crc8_update(&entry);
   13c8e:	f01f ff73 	bl	33b78 <nvs_ate_crc8_update>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   13c92:	68a1      	ldr	r1, [r4, #8]
   13c94:	462b      	mov	r3, r5
   13c96:	464a      	mov	r2, r9
   13c98:	4620      	mov	r0, r4
   13c9a:	f020 f805 	bl	33ca8 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   13c9e:	4629      	mov	r1, r5
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   13ca0:	4682      	mov	sl, r0
	fs->data_wra += nvs_al_size(fs, len);
   13ca2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   13ca4:	f01f ff74 	bl	33b90 <nvs_al_size.isra.0>
   13ca8:	68a2      	ldr	r2, [r4, #8]
   13caa:	4402      	add	r2, r0
   13cac:	60a2      	str	r2, [r4, #8]
	if (rc) {
   13cae:	f1ba 0f00 	cmp.w	sl, #0
   13cb2:	d108      	bne.n	13cc6 <nvs_write+0x14e>
	rc = nvs_flash_ate_wrt(fs, &entry);
   13cb4:	f107 0118 	add.w	r1, r7, #24
   13cb8:	4620      	mov	r0, r4
   13cba:	f020 f82f 	bl	33d1c <nvs_flash_ate_wrt>
	rc = len;
   13cbe:	2800      	cmp	r0, #0
   13cc0:	bf14      	ite	ne
   13cc2:	4682      	movne	sl, r0
   13cc4:	46aa      	moveq	sl, r5
	return z_impl_k_mutex_unlock(mutex);
   13cc6:	6838      	ldr	r0, [r7, #0]
   13cc8:	f01d fe94 	bl	319f4 <z_impl_k_mutex_unlock>
	return rc;
   13ccc:	4656      	mov	r6, sl
   13cce:	e76f      	b.n	13bb0 <nvs_write+0x38>
		required_space = data_size + ate_size;
   13cd0:	44d0      	add	r8, sl
   13cd2:	fa1f f888 	uxth.w	r8, r8
   13cd6:	e7bc      	b.n	13c52 <nvs_write+0xda>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13cd8:	2108      	movs	r1, #8
   13cda:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   13cdc:	f01f ff58 	bl	33b90 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   13ce0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13ce4:	833b      	strh	r3, [r7, #24]
	close_ate.len = 0U;
   13ce6:	2300      	movs	r3, #0
   13ce8:	83bb      	strh	r3, [r7, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   13cea:	1813      	adds	r3, r2, r0
   13cec:	837b      	strh	r3, [r7, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
   13cee:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   13cf0:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   13cf4:	441a      	add	r2, r3
   13cf6:	1a10      	subs	r0, r2, r0
   13cf8:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   13cfa:	f107 0018 	add.w	r0, r7, #24
   13cfe:	f01f ff3b 	bl	33b78 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   13d02:	f107 0118 	add.w	r1, r7, #24
   13d06:	4620      	mov	r0, r4
   13d08:	f020 f808 	bl	33d1c <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   13d0c:	1d21      	adds	r1, r4, #4
   13d0e:	4620      	mov	r0, r4
   13d10:	f01f febc 	bl	33a8c <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   13d14:	6863      	ldr	r3, [r4, #4]
   13d16:	ea03 030b 	and.w	r3, r3, fp
   13d1a:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   13d1c:	4620      	mov	r0, r4
   13d1e:	f020 f823 	bl	33d68 <nvs_gc>
		if (rc) {
   13d22:	4682      	mov	sl, r0
   13d24:	2800      	cmp	r0, #0
   13d26:	d1ce      	bne.n	13cc6 <nvs_write+0x14e>
		gc_count++;
   13d28:	3601      	adds	r6, #1
		if (gc_count == fs->sector_count) {
   13d2a:	e79f      	b.n	13c6c <nvs_write+0xf4>
			rc = -ENOSPC;
   13d2c:	f06f 0a1b 	mvn.w	sl, #27
   13d30:	e7c9      	b.n	13cc6 <nvs_write+0x14e>
		return -EINVAL;
   13d32:	f06f 0615 	mvn.w	r6, #21
   13d36:	e73b      	b.n	13bb0 <nvs_write+0x38>
   13d38:	0003b88f 	.word	0x0003b88f
   13d3c:	0003b9e1 	.word	0x0003b9e1
   13d40:	00039618 	.word	0x00039618
   13d44:	ffff0000 	.word	0xffff0000

00013d48 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   13d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d4c:	b085      	sub	sp, #20
   13d4e:	461e      	mov	r6, r3
   13d50:	af00      	add	r7, sp, #0
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   13d52:	7c03      	ldrb	r3, [r0, #16]
{
   13d54:	f8b7 a038 	ldrh.w	sl, [r7, #56]	; 0x38
   13d58:	4604      	mov	r4, r0
   13d5a:	4688      	mov	r8, r1
   13d5c:	4691      	mov	r9, r2
	if (!fs->ready) {
   13d5e:	b9ab      	cbnz	r3, 13d8c <nvs_read_hist+0x44>
		LOG_ERR("NVS not initialized");
   13d60:	466c      	mov	r4, sp
   13d62:	b088      	sub	sp, #32
   13d64:	466a      	mov	r2, sp
   13d66:	4b30      	ldr	r3, [pc, #192]	; (13e28 <nvs_read_hist+0xe0>)
   13d68:	6153      	str	r3, [r2, #20]
   13d6a:	4b30      	ldr	r3, [pc, #192]	; (13e2c <nvs_read_hist+0xe4>)
   13d6c:	6193      	str	r3, [r2, #24]
   13d6e:	2303      	movs	r3, #3
   13d70:	482f      	ldr	r0, [pc, #188]	; (13e30 <nvs_read_hist+0xe8>)
   13d72:	f842 3f10 	str.w	r3, [r2, #16]!
   13d76:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13d7a:	f01f ff06 	bl	33b8a <z_log_msg_static_create.constprop.0>
		return -EACCES;
   13d7e:	f06f 000c 	mvn.w	r0, #12
   13d82:	46a5      	mov	sp, r4

	return wlk_ate.len;

err:
	return rc;
}
   13d84:	3714      	adds	r7, #20
   13d86:	46bd      	mov	sp, r7
   13d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13d8c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   13d8e:	2108      	movs	r1, #8
   13d90:	f01f fefe 	bl	33b90 <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
   13d94:	89a3      	ldrh	r3, [r4, #12]
   13d96:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   13d9a:	42b3      	cmp	r3, r6
   13d9c:	d340      	bcc.n	13e20 <nvs_read_hist+0xd8>
	wlk_addr = fs->ate_wra;
   13d9e:	f8d4 b004 	ldr.w	fp, [r4, #4]
   13da2:	f8c7 b004 	str.w	fp, [r7, #4]
	cnt_his = 0U;
   13da6:	2500      	movs	r5, #0
	while (cnt_his <= cnt) {
   13da8:	4555      	cmp	r5, sl
   13daa:	4659      	mov	r1, fp
		rd_addr = wlk_addr;
   13dac:	f8d7 b004 	ldr.w	fp, [r7, #4]
	while (cnt_his <= cnt) {
   13db0:	d908      	bls.n	13dc4 <nvs_read_hist+0x7c>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   13db2:	6863      	ldr	r3, [r4, #4]
   13db4:	455b      	cmp	r3, fp
   13db6:	d11e      	bne.n	13df6 <nvs_read_hist+0xae>
   13db8:	893b      	ldrh	r3, [r7, #8]
   13dba:	4543      	cmp	r3, r8
   13dbc:	d01b      	beq.n	13df6 <nvs_read_hist+0xae>
		return -ENOENT;
   13dbe:	f06f 0001 	mvn.w	r0, #1
   13dc2:	e7df      	b.n	13d84 <nvs_read_hist+0x3c>
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   13dc4:	f107 0208 	add.w	r2, r7, #8
   13dc8:	1d39      	adds	r1, r7, #4
   13dca:	4620      	mov	r0, r4
   13dcc:	f01f ff22 	bl	33c14 <nvs_prev_ate>
		if (rc) {
   13dd0:	2800      	cmp	r0, #0
   13dd2:	d1d7      	bne.n	13d84 <nvs_read_hist+0x3c>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   13dd4:	893b      	ldrh	r3, [r7, #8]
   13dd6:	4543      	cmp	r3, r8
   13dd8:	d107      	bne.n	13dea <nvs_read_hist+0xa2>
   13dda:	f107 0108 	add.w	r1, r7, #8
   13dde:	4620      	mov	r0, r4
   13de0:	f01f fee0 	bl	33ba4 <nvs_ate_valid>
   13de4:	b108      	cbz	r0, 13dea <nvs_read_hist+0xa2>
			cnt_his++;
   13de6:	3501      	adds	r5, #1
   13de8:	b2ad      	uxth	r5, r5
		if (wlk_addr == fs->ate_wra) {
   13dea:	6862      	ldr	r2, [r4, #4]
   13dec:	687b      	ldr	r3, [r7, #4]
   13dee:	429a      	cmp	r2, r3
   13df0:	d1da      	bne.n	13da8 <nvs_read_hist+0x60>
		rd_addr = wlk_addr;
   13df2:	4659      	mov	r1, fp
   13df4:	e7e0      	b.n	13db8 <nvs_read_hist+0x70>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   13df6:	89bb      	ldrh	r3, [r7, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   13df8:	2b00      	cmp	r3, #0
   13dfa:	d0e0      	beq.n	13dbe <nvs_read_hist+0x76>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   13dfc:	45aa      	cmp	sl, r5
   13dfe:	d8de      	bhi.n	13dbe <nvs_read_hist+0x76>
	rd_addr += wlk_ate.offset;
   13e00:	8978      	ldrh	r0, [r7, #10]
	rd_addr &= ADDR_SECT_MASK;
   13e02:	0c09      	lsrs	r1, r1, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   13e04:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   13e06:	ea4f 4101 	mov.w	r1, r1, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   13e0a:	bf28      	it	cs
   13e0c:	4633      	movcs	r3, r6
   13e0e:	4401      	add	r1, r0
   13e10:	464a      	mov	r2, r9
   13e12:	4620      	mov	r0, r4
   13e14:	f01f fe2c 	bl	33a70 <nvs_flash_rd>
	if (rc) {
   13e18:	2800      	cmp	r0, #0
   13e1a:	d1b3      	bne.n	13d84 <nvs_read_hist+0x3c>
	return wlk_ate.len;
   13e1c:	89b8      	ldrh	r0, [r7, #12]
   13e1e:	e7b1      	b.n	13d84 <nvs_read_hist+0x3c>
		return -EINVAL;
   13e20:	f06f 0015 	mvn.w	r0, #21
   13e24:	e7ae      	b.n	13d84 <nvs_read_hist+0x3c>
   13e26:	bf00      	nop
   13e28:	0003b88f 	.word	0x0003b88f
   13e2c:	0003b9d3 	.word	0x0003b9d3
   13e30:	00039618 	.word	0x00039618

00013e34 <flash_area_open>:
		user_cb(&flash_map[i], user_data);
	}
}

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
   13e34:	b570      	push	{r4, r5, r6, lr}
	const struct flash_area *area;

	if (flash_map == NULL) {
   13e36:	4b11      	ldr	r3, [pc, #68]	; (13e7c <flash_area_open+0x48>)
   13e38:	681c      	ldr	r4, [r3, #0]
{
   13e3a:	460d      	mov	r5, r1
	if (flash_map == NULL) {
   13e3c:	b1dc      	cbz	r4, 13e76 <flash_area_open+0x42>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   13e3e:	4b10      	ldr	r3, [pc, #64]	; (13e80 <flash_area_open+0x4c>)
   13e40:	6819      	ldr	r1, [r3, #0]
   13e42:	2300      	movs	r3, #0
   13e44:	428b      	cmp	r3, r1
   13e46:	db02      	blt.n	13e4e <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   13e48:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
   13e4c:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   13e4e:	4622      	mov	r2, r4
   13e50:	f812 6b10 	ldrb.w	r6, [r2], #16
   13e54:	4286      	cmp	r6, r0
   13e56:	d002      	beq.n	13e5e <flash_area_open+0x2a>
	for (int i = 0; i < flash_map_entries; i++) {
   13e58:	3301      	adds	r3, #1
   13e5a:	4614      	mov	r4, r2
   13e5c:	e7f2      	b.n	13e44 <flash_area_open+0x10>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
   13e5e:	68e0      	ldr	r0, [r4, #12]
   13e60:	b910      	cbnz	r0, 13e68 <flash_area_open+0x34>
		return -ENODEV;
   13e62:	f06f 0012 	mvn.w	r0, #18
   13e66:	e7f1      	b.n	13e4c <flash_area_open+0x18>
   13e68:	f024 fb88 	bl	3857c <z_device_is_ready>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
   13e6c:	2800      	cmp	r0, #0
   13e6e:	d0f8      	beq.n	13e62 <flash_area_open+0x2e>
	*fap = area;
   13e70:	602c      	str	r4, [r5, #0]
	return 0;
   13e72:	2000      	movs	r0, #0
   13e74:	e7ea      	b.n	13e4c <flash_area_open+0x18>
		return -EACCES;
   13e76:	f06f 000c 	mvn.w	r0, #12
   13e7a:	e7e7      	b.n	13e4c <flash_area_open+0x18>
   13e7c:	20000258 	.word	0x20000258
   13e80:	00039974 	.word	0x00039974

00013e84 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   13e84:	b570      	push	{r4, r5, r6, lr}
   13e86:	b088      	sub	sp, #32
   13e88:	4605      	mov	r5, r0
   13e8a:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
   13e8c:	b2c0      	uxtb	r0, r0
   13e8e:	4669      	mov	r1, sp
{
   13e90:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
   13e92:	f7ff ffcf 	bl	13e34 <flash_area_open>
	if (rc < 0 || fa == NULL) {
   13e96:	2800      	cmp	r0, #0
   13e98:	db1b      	blt.n	13ed2 <flash_area_get_sectors+0x4e>
   13e9a:	9800      	ldr	r0, [sp, #0]
   13e9c:	b1c8      	cbz	r0, 13ed2 <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
   13e9e:	6843      	ldr	r3, [r0, #4]
   13ea0:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
   13ea2:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
   13ea4:	6822      	ldr	r2, [r4, #0]
	cb_data->area_idx = idx;
   13ea6:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
   13ea8:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
   13eac:	2300      	movs	r3, #0
	cb_data->status = 0;
   13eae:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
   13eb2:	9305      	str	r3, [sp, #20]
	flash_dev = fa->fa_dev;
   13eb4:	68c5      	ldr	r5, [r0, #12]
	flash_area_close(fa);
   13eb6:	f020 f82f 	bl	33f18 <flash_area_close>
	if (flash_dev == NULL) {
   13eba:	b16d      	cbz	r5, 13ed8 <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
   13ebc:	4628      	mov	r0, r5
   13ebe:	4908      	ldr	r1, [pc, #32]	; (13ee0 <flash_area_get_sectors+0x5c>)
   13ec0:	aa01      	add	r2, sp, #4
   13ec2:	f024 f9d4 	bl	3826e <flash_page_foreach>
	if (cb_data->status == 0) {
   13ec6:	9807      	ldr	r0, [sp, #28]
   13ec8:	b908      	cbnz	r0, 13ece <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
   13eca:	9b05      	ldr	r3, [sp, #20]
   13ecc:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   13ece:	b008      	add	sp, #32
   13ed0:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   13ed2:	f06f 0015 	mvn.w	r0, #21
   13ed6:	e7fa      	b.n	13ece <flash_area_get_sectors+0x4a>
		return -ENODEV;
   13ed8:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   13edc:	e7f7      	b.n	13ece <flash_area_get_sectors+0x4a>
   13ede:	bf00      	nop
   13ee0:	00033f1b 	.word	0x00033f1b

00013ee4 <settings_save_one>:

/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int settings_save_one(const char *name, const void *value, size_t val_len)
{
   13ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   13ee8:	4b0f      	ldr	r3, [pc, #60]	; (13f28 <settings_save_one+0x44>)
   13eea:	681c      	ldr	r4, [r3, #0]
{
   13eec:	4605      	mov	r5, r0
   13eee:	460e      	mov	r6, r1
   13ef0:	4617      	mov	r7, r2
	if (!cs) {
   13ef2:	b1ac      	cbz	r4, 13f20 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   13ef4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13ef8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13efc:	480b      	ldr	r0, [pc, #44]	; (13f2c <settings_save_one+0x48>)
   13efe:	f01d fcff 	bl	31900 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   13f02:	6863      	ldr	r3, [r4, #4]
   13f04:	4632      	mov	r2, r6
   13f06:	f8d3 8008 	ldr.w	r8, [r3, #8]
   13f0a:	4629      	mov	r1, r5
   13f0c:	463b      	mov	r3, r7
   13f0e:	4620      	mov	r0, r4
   13f10:	47c0      	blx	r8
   13f12:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   13f14:	4805      	ldr	r0, [pc, #20]	; (13f2c <settings_save_one+0x48>)
   13f16:	f01d fd6d 	bl	319f4 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   13f1a:	4620      	mov	r0, r4
   13f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   13f20:	f06f 0401 	mvn.w	r4, #1
   13f24:	e7f9      	b.n	13f1a <settings_save_one+0x36>
   13f26:	bf00      	nop
   13f28:	20001a8c 	.word	0x20001a8c
   13f2c:	20000ab4 	.word	0x20000ab4

00013f30 <settings_src_register>:
	parent->next = child;
   13f30:	2300      	movs	r3, #0
   13f32:	6003      	str	r3, [r0, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   13f34:	4b04      	ldr	r3, [pc, #16]	; (13f48 <settings_src_register+0x18>)
   13f36:	685a      	ldr	r2, [r3, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   13f38:	b912      	cbnz	r2, 13f40 <settings_src_register+0x10>
	list->head = node;
   13f3a:	e9c3 0000 	strd	r0, r0, [r3]
}
   13f3e:	4770      	bx	lr
	parent->next = child;
   13f40:	6010      	str	r0, [r2, #0]
	list->tail = node;
   13f42:	6058      	str	r0, [r3, #4]
}
   13f44:	4770      	bx	lr
   13f46:	bf00      	nop
   13f48:	20001a90 	.word	0x20001a90

00013f4c <settings_dst_register>:
	settings_save_dst = cs;
   13f4c:	4b01      	ldr	r3, [pc, #4]	; (13f54 <settings_dst_register+0x8>)
   13f4e:	6018      	str	r0, [r3, #0]
}
   13f50:	4770      	bx	lr
   13f52:	bf00      	nop
   13f54:	20001a8c 	.word	0x20001a8c

00013f58 <settings_load_subtree>:
{
   13f58:	b530      	push	{r4, r5, lr}
   13f5a:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
   13f5c:	2300      	movs	r3, #0
{
   13f5e:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   13f60:	e9cd 3302 	strd	r3, r3, [sp, #8]
   13f64:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   13f66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13f6a:	480c      	ldr	r0, [pc, #48]	; (13f9c <settings_load_subtree+0x44>)
   13f6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13f70:	f01d fcc6 	bl	31900 <z_impl_k_mutex_lock>
	return list->head;
   13f74:	4b0a      	ldr	r3, [pc, #40]	; (13fa0 <settings_load_subtree+0x48>)
   13f76:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   13f78:	b94c      	cbnz	r4, 13f8e <settings_load_subtree+0x36>
	rc = settings_commit_subtree(subtree);
   13f7a:	4628      	mov	r0, r5
   13f7c:	f000 f8e4 	bl	14148 <settings_commit_subtree>
   13f80:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   13f82:	4806      	ldr	r0, [pc, #24]	; (13f9c <settings_load_subtree+0x44>)
   13f84:	f01d fd36 	bl	319f4 <z_impl_k_mutex_unlock>
}
   13f88:	4620      	mov	r0, r4
   13f8a:	b005      	add	sp, #20
   13f8c:	bd30      	pop	{r4, r5, pc}
		cs->cs_itf->csi_load(cs, &arg);
   13f8e:	6863      	ldr	r3, [r4, #4]
   13f90:	4620      	mov	r0, r4
   13f92:	681b      	ldr	r3, [r3, #0]
   13f94:	a901      	add	r1, sp, #4
   13f96:	4798      	blx	r3
	return node->next;
   13f98:	6824      	ldr	r4, [r4, #0]
   13f9a:	e7ed      	b.n	13f78 <settings_load_subtree+0x20>
   13f9c:	20000ab4 	.word	0x20000ab4
   13fa0:	20001a90 	.word	0x20001a90

00013fa4 <settings_load_subtree_direct>:
{
   13fa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   13fa6:	e9cd 0101 	strd	r0, r1, [sp, #4]
   13faa:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   13fac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13fb0:	480a      	ldr	r0, [pc, #40]	; (13fdc <settings_load_subtree_direct+0x38>)
   13fb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13fb6:	f01d fca3 	bl	31900 <z_impl_k_mutex_lock>
	return list->head;
   13fba:	4b09      	ldr	r3, [pc, #36]	; (13fe0 <settings_load_subtree_direct+0x3c>)
   13fbc:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   13fbe:	b92c      	cbnz	r4, 13fcc <settings_load_subtree_direct+0x28>
	return z_impl_k_mutex_unlock(mutex);
   13fc0:	4806      	ldr	r0, [pc, #24]	; (13fdc <settings_load_subtree_direct+0x38>)
   13fc2:	f01d fd17 	bl	319f4 <z_impl_k_mutex_unlock>
}
   13fc6:	4620      	mov	r0, r4
   13fc8:	b004      	add	sp, #16
   13fca:	bd10      	pop	{r4, pc}
		cs->cs_itf->csi_load(cs, &arg);
   13fcc:	6863      	ldr	r3, [r4, #4]
   13fce:	4620      	mov	r0, r4
   13fd0:	681b      	ldr	r3, [r3, #0]
   13fd2:	a901      	add	r1, sp, #4
   13fd4:	4798      	blx	r3
	return node->next;
   13fd6:	6824      	ldr	r4, [r4, #0]
   13fd8:	e7f1      	b.n	13fbe <settings_load_subtree_direct+0x1a>
   13fda:	bf00      	nop
   13fdc:	20000ab4 	.word	0x20000ab4
   13fe0:	20001a90 	.word	0x20001a90

00013fe4 <settings_store_init>:
	list->head = NULL;
   13fe4:	4b02      	ldr	r3, [pc, #8]	; (13ff0 <settings_store_init+0xc>)
   13fe6:	2200      	movs	r2, #0
	list->tail = NULL;
   13fe8:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   13fec:	4770      	bx	lr
   13fee:	bf00      	nop
   13ff0:	20001a90 	.word	0x20001a90

00013ff4 <settings_init>:
	list->head = NULL;
   13ff4:	4b02      	ldr	r3, [pc, #8]	; (14000 <settings_init+0xc>)
   13ff6:	2200      	movs	r2, #0
	list->tail = NULL;
   13ff8:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   13ffc:	f7ff bff2 	b.w	13fe4 <settings_store_init>
   14000:	20001a98 	.word	0x20001a98

00014004 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   14004:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   14008:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   1400a:	460c      	mov	r4, r1
   1400c:	b109      	cbz	r1, 14012 <settings_parse_and_lookup+0xe>
		*next = NULL;
   1400e:	2300      	movs	r3, #0
   14010:	600b      	str	r3, [r1, #0]
{
   14012:	4d1f      	ldr	r5, [pc, #124]	; (14090 <settings_parse_and_lookup+0x8c>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   14014:	f8df 907c 	ldr.w	r9, [pc, #124]	; 14094 <settings_parse_and_lookup+0x90>
{
   14018:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   1401a:	454d      	cmp	r5, r9
   1401c:	d30f      	bcc.n	1403e <settings_parse_and_lookup+0x3a>
	return list->head;
   1401e:	4b1e      	ldr	r3, [pc, #120]	; (14098 <settings_parse_and_lookup+0x94>)
   14020:	681d      	ldr	r5, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   14022:	b385      	cbz	r5, 14086 <settings_parse_and_lookup+0x82>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   14024:	f855 8c14 	ldr.w	r8, [r5, #-20]
   14028:	aa01      	add	r2, sp, #4
   1402a:	4641      	mov	r1, r8
   1402c:	4638      	mov	r0, r7
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   1402e:	3d14      	subs	r5, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   14030:	f01f ff9c 	bl	33f6c <settings_name_steq>
   14034:	b310      	cbz	r0, 1407c <settings_parse_and_lookup+0x78>
			continue;
		}
		if (!bestmatch) {
   14036:	b9d6      	cbnz	r6, 1406e <settings_parse_and_lookup+0x6a>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   14038:	bb14      	cbnz	r4, 14080 <settings_parse_and_lookup+0x7c>
{
   1403a:	462e      	mov	r6, r5
   1403c:	e01e      	b.n	1407c <settings_parse_and_lookup+0x78>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   1403e:	f8d5 8000 	ldr.w	r8, [r5]
   14042:	aa01      	add	r2, sp, #4
   14044:	4641      	mov	r1, r8
   14046:	4638      	mov	r0, r7
   14048:	f01f ff90 	bl	33f6c <settings_name_steq>
   1404c:	b150      	cbz	r0, 14064 <settings_parse_and_lookup+0x60>
		if (!bestmatch) {
   1404e:	b916      	cbnz	r6, 14056 <settings_parse_and_lookup+0x52>
			if (next) {
   14050:	b954      	cbnz	r4, 14068 <settings_parse_and_lookup+0x64>
{
   14052:	462e      	mov	r6, r5
   14054:	e006      	b.n	14064 <settings_parse_and_lookup+0x60>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   14056:	6831      	ldr	r1, [r6, #0]
   14058:	2200      	movs	r2, #0
   1405a:	4640      	mov	r0, r8
   1405c:	f01f ff86 	bl	33f6c <settings_name_steq>
   14060:	2800      	cmp	r0, #0
   14062:	d1f5      	bne.n	14050 <settings_parse_and_lookup+0x4c>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   14064:	3514      	adds	r5, #20
   14066:	e7d8      	b.n	1401a <settings_parse_and_lookup+0x16>
				*next = tmpnext;
   14068:	9b01      	ldr	r3, [sp, #4]
   1406a:	6023      	str	r3, [r4, #0]
   1406c:	e7f1      	b.n	14052 <settings_parse_and_lookup+0x4e>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   1406e:	6831      	ldr	r1, [r6, #0]
   14070:	2200      	movs	r2, #0
   14072:	4640      	mov	r0, r8
   14074:	f01f ff7a 	bl	33f6c <settings_name_steq>
   14078:	2800      	cmp	r0, #0
   1407a:	d1dd      	bne.n	14038 <settings_parse_and_lookup+0x34>
	return node->next;
   1407c:	696d      	ldr	r5, [r5, #20]
   1407e:	e7d0      	b.n	14022 <settings_parse_and_lookup+0x1e>
				*next = tmpnext;
   14080:	9b01      	ldr	r3, [sp, #4]
   14082:	6023      	str	r3, [r4, #0]
   14084:	e7d9      	b.n	1403a <settings_parse_and_lookup+0x36>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   14086:	4630      	mov	r0, r6
   14088:	b003      	add	sp, #12
   1408a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1408e:	bf00      	nop
   14090:	000396a0 	.word	0x000396a0
   14094:	00039718 	.word	0x00039718
   14098:	20001a98 	.word	0x20001a98

0001409c <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   1409c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   140a0:	b084      	sub	sp, #16
   140a2:	af02      	add	r7, sp, #8
   140a4:	4604      	mov	r4, r0
   140a6:	f8d7 9028 	ldr.w	r9, [r7, #40]	; 0x28
	int rc;
	const char *name_key = name;
   140aa:	6078      	str	r0, [r7, #4]
{
   140ac:	460d      	mov	r5, r1
   140ae:	4616      	mov	r6, r2
   140b0:	4698      	mov	r8, r3

	if (load_arg && load_arg->subtree &&
   140b2:	f1b9 0f00 	cmp.w	r9, #0
   140b6:	d007      	beq.n	140c8 <settings_call_set_handler+0x2c>
   140b8:	f8d9 1000 	ldr.w	r1, [r9]
   140bc:	bb41      	cbnz	r1, 14110 <settings_call_set_handler+0x74>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
		return 0;
	}

	if (load_arg && load_arg->cb) {
   140be:	f8d9 a004 	ldr.w	sl, [r9, #4]
   140c2:	f1ba 0f00 	cmp.w	sl, #0
   140c6:	d12a      	bne.n	1411e <settings_call_set_handler+0x82>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
				  load_arg->param);
	} else {
		struct settings_handler_static *ch;

		ch = settings_parse_and_lookup(name, &name_key);
   140c8:	1d39      	adds	r1, r7, #4
   140ca:	4620      	mov	r0, r4
   140cc:	f7ff ff9a 	bl	14004 <settings_parse_and_lookup>
		if (!ch) {
   140d0:	b318      	cbz	r0, 1411a <settings_call_set_handler+0x7e>
			return 0;
		}

		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   140d2:	f8d0 9008 	ldr.w	r9, [r0, #8]
   140d6:	6878      	ldr	r0, [r7, #4]
   140d8:	4643      	mov	r3, r8
   140da:	4632      	mov	r2, r6
   140dc:	4629      	mov	r1, r5
   140de:	47c8      	blx	r9

		if (rc != 0) {
   140e0:	b1d8      	cbz	r0, 1411a <settings_call_set_handler+0x7e>
			LOG_ERR("set-value failure. key: %s error(%d)",
   140e2:	466d      	mov	r5, sp
   140e4:	b08a      	sub	sp, #40	; 0x28
   140e6:	aa02      	add	r2, sp, #8
   140e8:	4b13      	ldr	r3, [pc, #76]	; (14138 <settings_call_set_handler+0x9c>)
   140ea:	6153      	str	r3, [r2, #20]
   140ec:	4b13      	ldr	r3, [pc, #76]	; (1413c <settings_call_set_handler+0xa0>)
   140ee:	6210      	str	r0, [r2, #32]
   140f0:	e9c2 3406 	strd	r3, r4, [r2, #24]
   140f4:	f240 3301 	movw	r3, #769	; 0x301
   140f8:	8493      	strh	r3, [r2, #36]	; 0x24
   140fa:	4b11      	ldr	r3, [pc, #68]	; (14140 <settings_call_set_handler+0xa4>)
   140fc:	f842 3f10 	str.w	r3, [r2, #16]!
   14100:	4810      	ldr	r0, [pc, #64]	; (14144 <settings_call_set_handler+0xa8>)
   14102:	2300      	movs	r3, #0
   14104:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   14108:	f7ff f834 	bl	13174 <z_impl_z_log_msg_static_create>
   1410c:	46ad      	mov	sp, r5
				name, rc);
			/* Ignoring the error */
			rc = 0;
   1410e:	e004      	b.n	1411a <settings_call_set_handler+0x7e>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   14110:	1d3a      	adds	r2, r7, #4
   14112:	f01f ff2b 	bl	33f6c <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   14116:	2800      	cmp	r0, #0
   14118:	d1d1      	bne.n	140be <settings_call_set_handler+0x22>
		return 0;
   1411a:	2000      	movs	r0, #0
   1411c:	e007      	b.n	1412e <settings_call_set_handler+0x92>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   1411e:	f8d9 3008 	ldr.w	r3, [r9, #8]
   14122:	9300      	str	r3, [sp, #0]
   14124:	6878      	ldr	r0, [r7, #4]
   14126:	4643      	mov	r3, r8
   14128:	4632      	mov	r2, r6
   1412a:	4629      	mov	r1, r5
   1412c:	47d0      	blx	sl
			LOG_DBG("set-value OK. key: %s",
				name);
		}
	}
	return rc;
}
   1412e:	3708      	adds	r7, #8
   14130:	46bd      	mov	sp, r7
   14132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14136:	bf00      	nop
   14138:	0003ba08 	.word	0x0003ba08
   1413c:	0003ba31 	.word	0x0003ba31
   14140:	01000005 	.word	0x01000005
   14144:	00039670 	.word	0x00039670

00014148 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   14148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   1414a:	4c18      	ldr	r4, [pc, #96]	; (141ac <settings_commit_subtree+0x64>)
   1414c:	4f18      	ldr	r7, [pc, #96]	; (141b0 <settings_commit_subtree+0x68>)
{
   1414e:	4606      	mov	r6, r0
	rc = 0;
   14150:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   14152:	42bc      	cmp	r4, r7
   14154:	d308      	bcc.n	14168 <settings_commit_subtree+0x20>
	return list->head;
   14156:	4b17      	ldr	r3, [pc, #92]	; (141b4 <settings_commit_subtree+0x6c>)
   14158:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   1415a:	b32c      	cbz	r4, 141a8 <settings_commit_subtree+0x60>
   1415c:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   1415e:	b9b6      	cbnz	r6, 1418e <settings_commit_subtree+0x46>
			continue;
		}
		if (ch->h_commit) {
   14160:	68e3      	ldr	r3, [r4, #12]
   14162:	b9e3      	cbnz	r3, 1419e <settings_commit_subtree+0x56>
	return node->next;
   14164:	6964      	ldr	r4, [r4, #20]
   14166:	e7f8      	b.n	1415a <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   14168:	b92e      	cbnz	r6, 14176 <settings_commit_subtree+0x2e>
		if (ch->h_commit) {
   1416a:	68e3      	ldr	r3, [r4, #12]
   1416c:	b95b      	cbnz	r3, 14186 <settings_commit_subtree+0x3e>
{
   1416e:	4628      	mov	r0, r5
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   14170:	3414      	adds	r4, #20
   14172:	4605      	mov	r5, r0
   14174:	e7ed      	b.n	14152 <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   14176:	6820      	ldr	r0, [r4, #0]
   14178:	2200      	movs	r2, #0
   1417a:	4631      	mov	r1, r6
   1417c:	f01f fef6 	bl	33f6c <settings_name_steq>
   14180:	2800      	cmp	r0, #0
   14182:	d1f2      	bne.n	1416a <settings_commit_subtree+0x22>
   14184:	e7f3      	b.n	1416e <settings_commit_subtree+0x26>
			rc2 = ch->h_commit();
   14186:	4798      	blx	r3
			if (!rc) {
   14188:	2d00      	cmp	r5, #0
   1418a:	d1f0      	bne.n	1416e <settings_commit_subtree+0x26>
   1418c:	e7f0      	b.n	14170 <settings_commit_subtree+0x28>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   1418e:	6820      	ldr	r0, [r4, #0]
   14190:	2200      	movs	r2, #0
   14192:	4631      	mov	r1, r6
   14194:	f01f feea 	bl	33f6c <settings_name_steq>
   14198:	2800      	cmp	r0, #0
   1419a:	d1e1      	bne.n	14160 <settings_commit_subtree+0x18>
   1419c:	e7e2      	b.n	14164 <settings_commit_subtree+0x1c>
			rc2 = ch->h_commit();
   1419e:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
   141a0:	2d00      	cmp	r5, #0
   141a2:	bf08      	it	eq
   141a4:	4605      	moveq	r5, r0
   141a6:	e7dd      	b.n	14164 <settings_commit_subtree+0x1c>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   141a8:	4628      	mov	r0, r5
   141aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   141ac:	000396a0 	.word	0x000396a0
   141b0:	00039718 	.word	0x00039718
   141b4:	20001a98 	.word	0x20001a98

000141b8 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   141b8:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   141ba:	4c07      	ldr	r4, [pc, #28]	; (141d8 <settings_subsys_init+0x20>)
   141bc:	7823      	ldrb	r3, [r4, #0]
   141be:	b10b      	cbz	r3, 141c4 <settings_subsys_init+0xc>
		return 0;
   141c0:	2000      	movs	r0, #0
	if (!err) {
		settings_subsys_initialized = true;
	}

	return err;
}
   141c2:	bd10      	pop	{r4, pc}
	settings_init();
   141c4:	f7ff ff16 	bl	13ff4 <settings_init>
	err = settings_backend_init();
   141c8:	f000 f866 	bl	14298 <settings_backend_init>
	if (!err) {
   141cc:	2800      	cmp	r0, #0
   141ce:	d1f8      	bne.n	141c2 <settings_subsys_init+0xa>
		settings_subsys_initialized = true;
   141d0:	2301      	movs	r3, #1
   141d2:	7023      	strb	r3, [r4, #0]
   141d4:	e7f4      	b.n	141c0 <settings_subsys_init+0x8>
   141d6:	bf00      	nop
   141d8:	200032a4 	.word	0x200032a4

000141dc <settings_nvs_load>:
}
#endif /* CONFIG_SETTINGS_NVS_NAME_CACHE */

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   141dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   141e0:	8f04      	ldrh	r4, [r0, #56]	; 0x38

#if CONFIG_SETTINGS_NVS_NAME_CACHE
		settings_nvs_cache_add(cf, name, name_id);
#endif

		ret = settings_call_set_handler(
   141e2:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 14294 <settings_nvs_load+0xb8>
	name_id = cf->last_name_id + 1;
   141e6:	3401      	adds	r4, #1
{
   141e8:	b098      	sub	sp, #96	; 0x60
   141ea:	4680      	mov	r8, r0
   141ec:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
   141ee:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   141f0:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   141f4:	1e65      	subs	r5, r4, #1
   141f6:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   141f8:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   141fc:	d047      	beq.n	1428e <settings_nvs_load+0xb2>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   141fe:	234a      	movs	r3, #74	; 0x4a
   14200:	aa05      	add	r2, sp, #20
   14202:	4629      	mov	r1, r5
   14204:	4630      	mov	r0, r6
   14206:	f01f fe80 	bl	33f0a <nvs_read>
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   1420a:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   1420e:	343f      	adds	r4, #63	; 0x3f
   14210:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   14212:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   14214:	4621      	mov	r1, r4
   14216:	2301      	movs	r3, #1
   14218:	f10d 020b 	add.w	r2, sp, #11
   1421c:	4630      	mov	r0, r6
   1421e:	f01f fe74 	bl	33f0a <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   14222:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   14224:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   14226:	dc03      	bgt.n	14230 <settings_nvs_load+0x54>
   14228:	2800      	cmp	r0, #0
   1422a:	dc03      	bgt.n	14234 <settings_nvs_load+0x58>
{
   1422c:	462c      	mov	r4, r5
   1422e:	e7e1      	b.n	141f4 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   14230:	2800      	cmp	r0, #0
   14232:	dc16      	bgt.n	14262 <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   14234:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   14238:	42ab      	cmp	r3, r5
   1423a:	d109      	bne.n	14250 <settings_nvs_load+0x74>
				cf->last_name_id--;
   1423c:	4642      	mov	r2, r8
   1423e:	1e6b      	subs	r3, r5, #1
   14240:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   14244:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   14248:	2302      	movs	r3, #2
   1424a:	4630      	mov	r0, r6
   1424c:	f7ff fc94 	bl	13b78 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   14250:	4629      	mov	r1, r5
   14252:	4630      	mov	r0, r6
   14254:	f01f fe55 	bl	33f02 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   14258:	4621      	mov	r1, r4
   1425a:	4630      	mov	r0, r6
   1425c:	f01f fe51 	bl	33f02 <nvs_delete>
			continue;
   14260:	e7e4      	b.n	1422c <settings_nvs_load+0x50>
		name[rc1] = '\0';
   14262:	f107 0360 	add.w	r3, r7, #96	; 0x60
   14266:	eb0d 0703 	add.w	r7, sp, r3
   1426a:	2300      	movs	r3, #0
   1426c:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   14270:	4652      	mov	r2, sl
   14272:	f8cd 9000 	str.w	r9, [sp]
   14276:	ab03      	add	r3, sp, #12
   14278:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
   1427a:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   1427c:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   14280:	f7ff ff0c 	bl	1409c <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   14284:	2800      	cmp	r0, #0
   14286:	d0d1      	beq.n	1422c <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   14288:	b018      	add	sp, #96	; 0x60
   1428a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1428e:	2000      	movs	r0, #0
	return ret;
   14290:	e7fa      	b.n	14288 <settings_nvs_load+0xac>
   14292:	bf00      	nop
   14294:	00033fdd 	.word	0x00033fdd

00014298 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   14298:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   1429a:	2301      	movs	r3, #1

	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   1429c:	4669      	mov	r1, sp
   1429e:	2002      	movs	r0, #2
	uint32_t sector_cnt = 1;
   142a0:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   142a2:	f7ff fdc7 	bl	13e34 <flash_area_open>
	if (rc) {
   142a6:	4604      	mov	r4, r0
   142a8:	bb60      	cbnz	r0, 14304 <settings_backend_init+0x6c>
		return rc;
	}

	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   142aa:	aa02      	add	r2, sp, #8
   142ac:	a901      	add	r1, sp, #4
   142ae:	2002      	movs	r0, #2
   142b0:	f7ff fde8 	bl	13e84 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc != 0 && rc != -ENOMEM) {
   142b4:	4604      	mov	r4, r0
   142b6:	b110      	cbz	r0, 142be <settings_backend_init+0x26>
   142b8:	f110 0f0c 	cmn.w	r0, #12
   142bc:	d122      	bne.n	14304 <settings_backend_init+0x6c>
		return rc;
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   142be:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   142c0:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   142c4:	d223      	bcs.n	1430e <settings_backend_init+0x76>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   142c6:	9a00      	ldr	r2, [sp, #0]
   142c8:	2300      	movs	r3, #0
   142ca:	6894      	ldr	r4, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
   142cc:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
   142ce:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   142d0:	4284      	cmp	r4, r0
   142d2:	d31a      	bcc.n	1430a <settings_backend_init+0x72>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   142d4:	3301      	adds	r3, #1
   142d6:	2b08      	cmp	r3, #8
   142d8:	d1f9      	bne.n	142ce <settings_backend_init+0x36>
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   142da:	4d0e      	ldr	r5, [pc, #56]	; (14314 <settings_backend_init+0x7c>)
   142dc:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   142de:	82eb      	strh	r3, [r5, #22]
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   142e0:	6853      	ldr	r3, [r2, #4]
   142e2:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev = fa->fa_dev;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   142e4:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev = fa->fa_dev;
   142e6:	68d3      	ldr	r3, [r2, #12]
   142e8:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   142ea:	f01f ff11 	bl	34110 <settings_nvs_backend_init>
	if (rc) {
   142ee:	4604      	mov	r4, r0
   142f0:	b940      	cbnz	r0, 14304 <settings_backend_init+0x6c>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   142f2:	4e09      	ldr	r6, [pc, #36]	; (14318 <settings_backend_init+0x80>)
   142f4:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   142f6:	4628      	mov	r0, r5
   142f8:	f7ff fe1a 	bl	13f30 <settings_src_register>
	settings_dst_register(&cf->cf_store);
   142fc:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   142fe:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   14300:	f7ff fe24 	bl	13f4c <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   14304:	4620      	mov	r0, r4
   14306:	b004      	add	sp, #16
   14308:	bd70      	pop	{r4, r5, r6, pc}
   1430a:	b29b      	uxth	r3, r3
   1430c:	e7e5      	b.n	142da <settings_backend_init+0x42>
		return -EDOM;
   1430e:	f06f 0420 	mvn.w	r4, #32
   14312:	e7f7      	b.n	14304 <settings_backend_init+0x6c>
   14314:	20001aa0 	.word	0x20001aa0
   14318:	2000025c 	.word	0x2000025c

0001431c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   1431c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14320:	4605      	mov	r5, r0
	__asm__ volatile(
   14322:	f04f 0320 	mov.w	r3, #32
   14326:	f3ef 8611 	mrs	r6, BASEPRI
   1432a:	f383 8812 	msr	BASEPRI_MAX, r3
   1432e:	f3bf 8f6f 	isb	sy
	return list->head;
   14332:	4b0e      	ldr	r3, [pc, #56]	; (1436c <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   14334:	4f0e      	ldr	r7, [pc, #56]	; (14370 <pm_state_notify+0x54>)
   14336:	681c      	ldr	r4, [r3, #0]
   14338:	f8df 8038 	ldr.w	r8, [pc, #56]	; 14374 <pm_state_notify+0x58>
   1433c:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   14340:	b92c      	cbnz	r4, 1434e <pm_state_notify+0x32>
	__asm__ volatile(
   14342:	f386 8811 	msr	BASEPRI, r6
   14346:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   1434a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
   1434e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   14352:	2d00      	cmp	r5, #0
   14354:	bf18      	it	ne
   14356:	4613      	movne	r3, r2
		if (callback) {
   14358:	b12b      	cbz	r3, 14366 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   1435a:	f898 2014 	ldrb.w	r2, [r8, #20]
   1435e:	fb09 f202 	mul.w	r2, r9, r2
   14362:	5cb8      	ldrb	r0, [r7, r2]
   14364:	4798      	blx	r3
	return node->next;
   14366:	6824      	ldr	r4, [r4, #0]
   14368:	e7ea      	b.n	14340 <pm_state_notify+0x24>
   1436a:	bf00      	nop
   1436c:	20001af8 	.word	0x20001af8
   14370:	20001aec 	.word	0x20001aec
   14374:	20003238 	.word	0x20003238

00014378 <pm_system_resume>:

void pm_system_resume(void)
{
   14378:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   1437a:	4b19      	ldr	r3, [pc, #100]	; (143e0 <pm_system_resume+0x68>)
   1437c:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1437e:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   14382:	f004 031f 	and.w	r3, r4, #31
   14386:	2201      	movs	r2, #1
   14388:	409a      	lsls	r2, r3
   1438a:	4b16      	ldr	r3, [pc, #88]	; (143e4 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1438c:	0961      	lsrs	r1, r4, #5
   1438e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   14392:	43d0      	mvns	r0, r2
   14394:	e853 1f00 	ldrex	r1, [r3]
   14398:	ea01 0500 	and.w	r5, r1, r0
   1439c:	e843 5600 	strex	r6, r5, [r3]
   143a0:	2e00      	cmp	r6, #0
   143a2:	d1f7      	bne.n	14394 <pm_system_resume+0x1c>
   143a4:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   143a8:	420a      	tst	r2, r1
   143aa:	d013      	beq.n	143d4 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
   143ac:	4b0e      	ldr	r3, [pc, #56]	; (143e8 <pm_system_resume+0x70>)
   143ae:	4d0f      	ldr	r5, [pc, #60]	; (143ec <pm_system_resume+0x74>)
   143b0:	b18b      	cbz	r3, 143d6 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
   143b2:	230c      	movs	r3, #12
   143b4:	4363      	muls	r3, r4
   143b6:	18ea      	adds	r2, r5, r3
   143b8:	5ce8      	ldrb	r0, [r5, r3]
   143ba:	7851      	ldrb	r1, [r2, #1]
   143bc:	f021 f8de 	bl	3557c <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   143c0:	2000      	movs	r0, #0
   143c2:	f7ff ffab 	bl	1431c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   143c6:	230c      	movs	r3, #12
   143c8:	435c      	muls	r4, r3
   143ca:	192a      	adds	r2, r5, r4
   143cc:	2300      	movs	r3, #0
   143ce:	512b      	str	r3, [r5, r4]
   143d0:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   143d4:	bd70      	pop	{r4, r5, r6, pc}
   143d6:	f383 8811 	msr	BASEPRI, r3
   143da:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   143de:	e7ef      	b.n	143c0 <pm_system_resume+0x48>
   143e0:	20003238 	.word	0x20003238
   143e4:	20001b00 	.word	0x20001b00
   143e8:	0003557d 	.word	0x0003557d
   143ec:	20001aec 	.word	0x20001aec

000143f0 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   143f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   143f4:	4b35      	ldr	r3, [pc, #212]	; (144cc <pm_system_suspend+0xdc>)
{
   143f6:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   143f8:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   143fa:	f04f 0320 	mov.w	r3, #32
   143fe:	f3ef 8811 	mrs	r8, BASEPRI
   14402:	f383 8812 	msr	BASEPRI_MAX, r3
   14406:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   1440a:	240c      	movs	r4, #12
   1440c:	4b30      	ldr	r3, [pc, #192]	; (144d0 <pm_system_suspend+0xe0>)
   1440e:	4e31      	ldr	r6, [pc, #196]	; (144d4 <pm_system_suspend+0xe4>)
   14410:	436c      	muls	r4, r5
   14412:	191a      	adds	r2, r3, r4
   14414:	5d19      	ldrb	r1, [r3, r4]
   14416:	2900      	cmp	r1, #0
   14418:	d04c      	beq.n	144b4 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   1441a:	ca07      	ldmia	r2, {r0, r1, r2}
   1441c:	eb06 0c04 	add.w	ip, r6, r4
   14420:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   14424:	2200      	movs	r2, #0
   14426:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
   14428:	f388 8811 	msr	BASEPRI, r8
   1442c:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   14430:	230c      	movs	r3, #12
   14432:	436b      	muls	r3, r5
   14434:	18f2      	adds	r2, r6, r3
   14436:	5cf0      	ldrb	r0, [r6, r3]
   14438:	2800      	cmp	r0, #0
   1443a:	d039      	beq.n	144b0 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   1443c:	1c7b      	adds	r3, r7, #1
   1443e:	d010      	beq.n	14462 <pm_system_suspend+0x72>
			return (uint32_t)((t * to_hz + off) / from_hz);
   14440:	f8d2 c008 	ldr.w	ip, [r2, #8]
   14444:	4c24      	ldr	r4, [pc, #144]	; (144d8 <pm_system_suspend+0xe8>)
   14446:	4a25      	ldr	r2, [pc, #148]	; (144dc <pm_system_suspend+0xec>)
   14448:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1444c:	2100      	movs	r1, #0
   1444e:	fbec 4100 	umlal	r4, r1, ip, r0
   14452:	2300      	movs	r3, #0
   14454:	4620      	mov	r0, r4
   14456:	f7fb fea3 	bl	101a0 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   1445a:	2101      	movs	r1, #1
   1445c:	1a38      	subs	r0, r7, r0
   1445e:	f024 fc84 	bl	38d6a <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   14462:	f01d ff81 	bl	32368 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   14466:	2001      	movs	r0, #1
   14468:	f7ff ff58 	bl	1431c <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1446c:	f3bf 8f5b 	dmb	ish
   14470:	4b1b      	ldr	r3, [pc, #108]	; (144e0 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14472:	096a      	lsrs	r2, r5, #5
   14474:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   14478:	f005 011f 	and.w	r1, r5, #31
   1447c:	2201      	movs	r2, #1
   1447e:	408a      	lsls	r2, r1
   14480:	e853 0f00 	ldrex	r0, [r3]
   14484:	4310      	orrs	r0, r2
   14486:	e843 0100 	strex	r1, r0, [r3]
   1448a:	2900      	cmp	r1, #0
   1448c:	d1f8      	bne.n	14480 <pm_system_suspend+0x90>
   1448e:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   14492:	4b14      	ldr	r3, [pc, #80]	; (144e4 <pm_system_suspend+0xf4>)
   14494:	b13b      	cbz	r3, 144a6 <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
   14496:	230c      	movs	r3, #12
   14498:	fb03 f005 	mul.w	r0, r3, r5
   1449c:	1833      	adds	r3, r6, r0
   1449e:	5c30      	ldrb	r0, [r6, r0]
   144a0:	7859      	ldrb	r1, [r3, #1]
   144a2:	f021 f85f 	bl	35564 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   144a6:	f7ff ff67 	bl	14378 <pm_system_resume>
	k_sched_unlock();
   144aa:	f01d ff71 	bl	32390 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   144ae:	2001      	movs	r0, #1
}
   144b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   144b4:	4601      	mov	r1, r0
   144b6:	4628      	mov	r0, r5
   144b8:	f000 f816 	bl	144e8 <pm_policy_next_state>
		if (info != NULL) {
   144bc:	2800      	cmp	r0, #0
   144be:	d0b3      	beq.n	14428 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
   144c0:	c807      	ldmia	r0, {r0, r1, r2}
   144c2:	4434      	add	r4, r6
   144c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   144c8:	e7ae      	b.n	14428 <pm_system_suspend+0x38>
   144ca:	bf00      	nop
   144cc:	20003238 	.word	0x20003238
   144d0:	20001ae0 	.word	0x20001ae0
   144d4:	20001aec 	.word	0x20001aec
   144d8:	000f423f 	.word	0x000f423f
   144dc:	000f4240 	.word	0x000f4240
   144e0:	20001b00 	.word	0x20001b00
   144e4:	00035565 	.word	0x00035565

000144e8 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   144e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144ec:	b085      	sub	sp, #20
   144ee:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   144f0:	a903      	add	r1, sp, #12
   144f2:	f000 f843 	bl	1457c <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   144f6:	4b1e      	ldr	r3, [pc, #120]	; (14570 <pm_policy_next_state+0x88>)
   144f8:	9d03      	ldr	r5, [sp, #12]
   144fa:	f8d3 a000 	ldr.w	sl, [r3]
   144fe:	f8df 8074 	ldr.w	r8, [pc, #116]	; 14574 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   14502:	1e43      	subs	r3, r0, #1
   14504:	b21b      	sxth	r3, r3
   14506:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   1450a:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   1450c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   14510:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   14514:	f04f 0b00 	mov.w	fp, #0
   14518:	b924      	cbnz	r4, 14524 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   1451a:	46a1      	mov	r9, r4
}
   1451c:	4648      	mov	r0, r9
   1451e:	b005      	add	sp, #20
   14520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14524:	6868      	ldr	r0, [r5, #4]
   14526:	4a14      	ldr	r2, [pc, #80]	; (14578 <pm_policy_next_state+0x90>)
   14528:	46c4      	mov	ip, r8
   1452a:	4659      	mov	r1, fp
   1452c:	fbe0 c107 	umlal	ip, r1, r0, r7
   14530:	2300      	movs	r3, #0
   14532:	4660      	mov	r0, ip
   14534:	f7fb fe34 	bl	101a0 <__aeabi_uldivmod>
   14538:	9001      	str	r0, [sp, #4]
   1453a:	68a8      	ldr	r0, [r5, #8]
   1453c:	4a0e      	ldr	r2, [pc, #56]	; (14578 <pm_policy_next_state+0x90>)
   1453e:	46c4      	mov	ip, r8
   14540:	4659      	mov	r1, fp
   14542:	fbe0 c107 	umlal	ip, r1, r0, r7
   14546:	2300      	movs	r3, #0
   14548:	4660      	mov	r0, ip
   1454a:	f7fb fe29 	bl	101a0 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1454e:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
   14552:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   14554:	d001      	beq.n	1455a <pm_policy_next_state+0x72>
   14556:	4582      	cmp	sl, r0
   14558:	d905      	bls.n	14566 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   1455a:	1c73      	adds	r3, r6, #1
   1455c:	d0de      	beq.n	1451c <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   1455e:	9b01      	ldr	r3, [sp, #4]
   14560:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   14562:	42b0      	cmp	r0, r6
   14564:	d9da      	bls.n	1451c <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   14566:	3c01      	subs	r4, #1
   14568:	b2a4      	uxth	r4, r4
   1456a:	3d0c      	subs	r5, #12
   1456c:	e7d4      	b.n	14518 <pm_policy_next_state+0x30>
   1456e:	bf00      	nop
   14570:	20000270 	.word	0x20000270
   14574:	000f423f 	.word	0x000f423f
   14578:	000f4240 	.word	0x000f4240

0001457c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   1457c:	b908      	cbnz	r0, 14582 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   1457e:	4b02      	ldr	r3, [pc, #8]	; (14588 <pm_state_cpu_get_all+0xc>)
   14580:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   14582:	2000      	movs	r0, #0
   14584:	4770      	bx	lr
   14586:	bf00      	nop
   14588:	000399a8 	.word	0x000399a8

0001458c <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
   1458c:	4b01      	ldr	r3, [pc, #4]	; (14594 <uECC_get_rng+0x8>)
   1458e:	6818      	ldr	r0, [r3, #0]
   14590:	4770      	bx	lr
   14592:	bf00      	nop
   14594:	20000274 	.word	0x20000274

00014598 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
   14598:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   1459a:	2208      	movs	r2, #8
{
   1459c:	b089      	sub	sp, #36	; 0x24
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   1459e:	f01f ff8e 	bl	344be <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
   145a2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   145a4:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
   145a6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   145a8:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
   145aa:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   145ac:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
   145ae:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   145b0:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   145b2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   145b4:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   145b6:	4613      	mov	r3, r2
   145b8:	466a      	mov	r2, sp
{
   145ba:	460c      	mov	r4, r1
   145bc:	4606      	mov	r6, r0
	tmp[0] = tmp[1] = tmp[2] = 0;
   145be:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   145c0:	4611      	mov	r1, r2
   145c2:	4610      	mov	r0, r2
	tmp[0] = tmp[1] = tmp[2] = 0;
   145c4:	e9cd 7701 	strd	r7, r7, [sp, #4]
   145c8:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   145ca:	f01f fe86 	bl	342da <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   145ce:	4631      	mov	r1, r6
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   145d0:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   145d2:	4630      	mov	r0, r6
   145d4:	f01f fe81 	bl	342da <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
   145d8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   145da:	9103      	str	r1, [sp, #12]
	tmp[4] = product[13];
   145dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
   145de:	9104      	str	r1, [sp, #16]
	tmp[5] = product[14];
   145e0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   145e2:	9105      	str	r1, [sp, #20]
	tmp[6] = product[15];
   145e4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   145e6:	4405      	add	r5, r0
	tmp[7] = 0;
   145e8:	e9cd 1706 	strd	r1, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   145ec:	4610      	mov	r0, r2
   145ee:	4611      	mov	r1, r2
   145f0:	f01f fe73 	bl	342da <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   145f4:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   145f6:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   145f8:	4630      	mov	r0, r6
   145fa:	f01f fe6e 	bl	342da <uECC_vli_add>
   145fe:	4405      	add	r5, r0

	/* s3 */
	tmp[0] = product[8];
   14600:	6a20      	ldr	r0, [r4, #32]
   14602:	9000      	str	r0, [sp, #0]
	tmp[1] = product[9];
   14604:	6a60      	ldr	r0, [r4, #36]	; 0x24
   14606:	9001      	str	r0, [sp, #4]
	tmp[2] = product[10];
   14608:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1460a:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
   1460c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1460e:	9006      	str	r0, [sp, #24]
	tmp[7] = product[15];
   14610:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   14612:	9007      	str	r0, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   14614:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   14616:	e9cd 7704 	strd	r7, r7, [sp, #16]
   1461a:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1461c:	f01f fe5d 	bl	342da <uECC_vli_add>
   14620:	4405      	add	r5, r0

	/* s4 */
	tmp[0] = product[9];
   14622:	6a60      	ldr	r0, [r4, #36]	; 0x24
   14624:	9000      	str	r0, [sp, #0]
	tmp[1] = product[10];
   14626:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
   14628:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
	tmp[1] = product[10];
   1462c:	9001      	str	r0, [sp, #4]
	tmp[2] = product[11];
   1462e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   14630:	9002      	str	r0, [sp, #8]
	tmp[4] = product[14];
   14632:	f8cd c010 	str.w	ip, [sp, #16]
	tmp[3] = product[13];
   14636:	6b60      	ldr	r0, [r4, #52]	; 0x34
	tmp[5] = product[15];
   14638:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
	tmp[3] = product[13];
   1463c:	9003      	str	r0, [sp, #12]
	tmp[6] = product[13];
   1463e:	e9cd c005 	strd	ip, r0, [sp, #20]
	tmp[7] = product[8];
   14642:	6a20      	ldr	r0, [r4, #32]
   14644:	9007      	str	r0, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   14646:	4630      	mov	r0, r6
   14648:	f01f fe47 	bl	342da <uECC_vli_add>
   1464c:	4405      	add	r5, r0

	/* d1 */
	tmp[0] = product[11];
   1464e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   14650:	9000      	str	r0, [sp, #0]
	tmp[1] = product[12];
   14652:	6b20      	ldr	r0, [r4, #48]	; 0x30
   14654:	9001      	str	r0, [sp, #4]
	tmp[2] = product[13];
   14656:	6b60      	ldr	r0, [r4, #52]	; 0x34
   14658:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
   1465a:	6a20      	ldr	r0, [r4, #32]
   1465c:	9006      	str	r0, [sp, #24]
	tmp[7] = product[10];
   1465e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   14660:	9007      	str	r0, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   14662:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   14664:	e9cd 7704 	strd	r7, r7, [sp, #16]
   14668:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1466a:	f01f ff5b 	bl	34524 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
   1466e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14670:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
   14672:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14674:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
   14676:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   14678:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
   1467a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1467c:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
   1467e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14680:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
   14682:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   14684:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   14686:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   14688:	2308      	movs	r3, #8
   1468a:	4630      	mov	r0, r6
   1468c:	f01f ff4a 	bl	34524 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
   14690:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14692:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
   14694:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   14696:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
   14698:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1469a:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
   1469c:	6a23      	ldr	r3, [r4, #32]
   1469e:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
   146a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   146a2:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
   146a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
   146a6:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
   146aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
   146ac:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   146ae:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   146b0:	2308      	movs	r3, #8
   146b2:	4630      	mov	r0, r6
   146b4:	f01f ff36 	bl	34524 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
   146b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   146ba:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
   146bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
   146be:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
   146c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   146c4:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
   146c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   146c8:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
   146ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   146cc:	9305      	str	r3, [sp, #20]
	tmp[6] = 0;
	tmp[7] = product[13];
   146ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
   146d0:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   146d2:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   146d4:	2308      	movs	r3, #8
   146d6:	4630      	mov	r0, r6
   146d8:	f01f ff24 	bl	34524 <uECC_vli_sub>

	if (carry < 0) {
   146dc:	1a2d      	subs	r5, r5, r0
   146de:	d410      	bmi.n	14702 <vli_mmod_fast_secp256r1+0x16a>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   146e0:	4c0d      	ldr	r4, [pc, #52]	; (14718 <vli_mmod_fast_secp256r1+0x180>)
		while (carry || 
   146e2:	b935      	cbnz	r5, 146f2 <vli_mmod_fast_secp256r1+0x15a>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   146e4:	2208      	movs	r2, #8
   146e6:	4631      	mov	r1, r6
   146e8:	4620      	mov	r0, r4
   146ea:	f01f fef4 	bl	344d6 <uECC_vli_cmp_unsafe>
		while (carry || 
   146ee:	2801      	cmp	r0, #1
   146f0:	d00f      	beq.n	14712 <vli_mmod_fast_secp256r1+0x17a>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   146f2:	2308      	movs	r3, #8
   146f4:	4622      	mov	r2, r4
   146f6:	4631      	mov	r1, r6
   146f8:	4630      	mov	r0, r6
   146fa:	f01f ff13 	bl	34524 <uECC_vli_sub>
   146fe:	1a2d      	subs	r5, r5, r0
   14700:	e7ef      	b.n	146e2 <vli_mmod_fast_secp256r1+0x14a>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   14702:	4a05      	ldr	r2, [pc, #20]	; (14718 <vli_mmod_fast_secp256r1+0x180>)
   14704:	2308      	movs	r3, #8
   14706:	4631      	mov	r1, r6
   14708:	4630      	mov	r0, r6
   1470a:	f01f fde6 	bl	342da <uECC_vli_add>
		while (carry < 0);
   1470e:	182d      	adds	r5, r5, r0
   14710:	d4f8      	bmi.n	14704 <vli_mmod_fast_secp256r1+0x16c>
		}
	}
}
   14712:	b009      	add	sp, #36	; 0x24
   14714:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14716:	bf00      	nop
   14718:	000399ac 	.word	0x000399ac

0001471c <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   1471c:	4904      	ldr	r1, [pc, #16]	; (14730 <sub_bytes+0x14>)
   1471e:	1e43      	subs	r3, r0, #1
   14720:	300f      	adds	r0, #15
   14722:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   14726:	5c8a      	ldrb	r2, [r1, r2]
   14728:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   1472a:	4283      	cmp	r3, r0
   1472c:	d1f9      	bne.n	14722 <sub_bytes+0x6>
	}
}
   1472e:	4770      	bx	lr
   14730:	0003ba4e 	.word	0x0003ba4e

00014734 <tc_aes128_set_encrypt_key>:
{
   14734:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   14736:	4e26      	ldr	r6, [pc, #152]	; (147d0 <tc_aes128_set_encrypt_key+0x9c>)
{
   14738:	4607      	mov	r7, r0
   1473a:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   1473c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   1473e:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   14740:	ad01      	add	r5, sp, #4
   14742:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   14744:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   14746:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   14748:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   1474c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   14750:	4638      	mov	r0, r7
   14752:	2f00      	cmp	r7, #0
   14754:	d038      	beq.n	147c8 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   14756:	2c00      	cmp	r4, #0
   14758:	d038      	beq.n	147cc <tc_aes128_set_encrypt_key+0x98>
   1475a:	1f38      	subs	r0, r7, #4
   1475c:	4621      	mov	r1, r4
   1475e:	4602      	mov	r2, r0
   14760:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   14762:	784b      	ldrb	r3, [r1, #1]
   14764:	780d      	ldrb	r5, [r1, #0]
   14766:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   14768:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   1476c:	78cd      	ldrb	r5, [r1, #3]
   1476e:	432b      	orrs	r3, r5
   14770:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   14772:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   14774:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   14778:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1477a:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   1477e:	d1f0      	bne.n	14762 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   14780:	4c14      	ldr	r4, [pc, #80]	; (147d4 <tc_aes128_set_encrypt_key+0xa0>)
   14782:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   14784:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   14786:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   14788:	d116      	bne.n	147b8 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1478a:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1478e:	5ca5      	ldrb	r5, [r4, r2]
   14790:	0e1a      	lsrs	r2, r3, #24
   14792:	5ca2      	ldrb	r2, [r4, r2]
   14794:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   14798:	f3c3 2507 	ubfx	r5, r3, #8, #8
   1479c:	b2db      	uxtb	r3, r3
   1479e:	5d65      	ldrb	r5, [r4, r5]
   147a0:	5ce3      	ldrb	r3, [r4, r3]
   147a2:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   147a6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   147aa:	f021 0303 	bic.w	r3, r1, #3
   147ae:	3330      	adds	r3, #48	; 0x30
   147b0:	446b      	add	r3, sp
   147b2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   147b6:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   147b8:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   147bc:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   147be:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   147c0:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   147c2:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   147c4:	d1de      	bne.n	14784 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   147c6:	2001      	movs	r0, #1
}
   147c8:	b00d      	add	sp, #52	; 0x34
   147ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   147cc:	4620      	mov	r0, r4
   147ce:	e7fb      	b.n	147c8 <tc_aes128_set_encrypt_key+0x94>
   147d0:	00039734 	.word	0x00039734
   147d4:	0003ba4e 	.word	0x0003ba4e

000147d8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   147d8:	4901      	ldr	r1, [pc, #4]	; (147e0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   147da:	2210      	movs	r2, #16
	str	r2, [r1]
   147dc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   147de:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   147e0:	e000ed10 	.word	0xe000ed10

000147e4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   147e4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   147e6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   147e8:	f380 8811 	msr	BASEPRI, r0
	isb
   147ec:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   147f0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   147f4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   147f6:	b662      	cpsie	i
	isb
   147f8:	f3bf 8f6f 	isb	sy

	bx	lr
   147fc:	4770      	bx	lr
   147fe:	bf00      	nop

00014800 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   14800:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   14802:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   14804:	f381 8811 	msr	BASEPRI, r1

	wfe
   14808:	bf20      	wfe

	msr	BASEPRI, r0
   1480a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1480e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   14810:	4770      	bx	lr
   14812:	bf00      	nop

00014814 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   14814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14818:	4682      	mov	sl, r0
   1481a:	af00      	add	r7, sp, #0

	if (esf != NULL) {
   1481c:	460c      	mov	r4, r1
   1481e:	2900      	cmp	r1, #0
   14820:	d052      	beq.n	148c8 <z_arm_fatal_error+0xb4>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   14822:	466e      	mov	r6, sp
   14824:	b08a      	sub	sp, #40	; 0x28
   14826:	e9d1 1200 	ldrd	r1, r2, [r1]
   1482a:	68a3      	ldr	r3, [r4, #8]
   1482c:	466d      	mov	r5, sp
   1482e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 148d8 <z_arm_fatal_error+0xc4>
   14832:	482a      	ldr	r0, [pc, #168]	; (148dc <z_arm_fatal_error+0xc8>)
   14834:	6168      	str	r0, [r5, #20]
   14836:	46a8      	mov	r8, r5
   14838:	f04f 0b06 	mov.w	fp, #6
   1483c:	e9c5 9106 	strd	r9, r1, [r5, #24]
   14840:	e9c5 2308 	strd	r2, r3, [r5, #32]
   14844:	f848 bf10 	str.w	fp, [r8, #16]!
   14848:	4825      	ldr	r0, [pc, #148]	; (148e0 <z_arm_fatal_error+0xcc>)
   1484a:	4642      	mov	r2, r8
   1484c:	2300      	movs	r3, #0
   1484e:	f44f 5141 	mov.w	r1, #12352	; 0x3040
   14852:	f7fe fc8f 	bl	13174 <z_impl_z_log_msg_static_create>
   14856:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   14858:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   1485c:	6963      	ldr	r3, [r4, #20]
   1485e:	46ad      	mov	sp, r5
   14860:	4820      	ldr	r0, [pc, #128]	; (148e4 <z_arm_fatal_error+0xd0>)
   14862:	626b      	str	r3, [r5, #36]	; 0x24
   14864:	e9c5 0905 	strd	r0, r9, [r5, #20]
   14868:	e9c5 1207 	strd	r1, r2, [r5, #28]
   1486c:	f8c5 b010 	str.w	fp, [r5, #16]
   14870:	481b      	ldr	r0, [pc, #108]	; (148e0 <z_arm_fatal_error+0xcc>)
   14872:	2300      	movs	r3, #0
   14874:	4642      	mov	r2, r8
   14876:	f44f 5141 	mov.w	r1, #12352	; 0x3040
   1487a:	f7fe fc7b 	bl	13174 <z_impl_z_log_msg_static_create>
   1487e:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   14880:	b088      	sub	sp, #32
   14882:	69e3      	ldr	r3, [r4, #28]
   14884:	466d      	mov	r5, sp
   14886:	4a18      	ldr	r2, [pc, #96]	; (148e8 <z_arm_fatal_error+0xd4>)
   14888:	61eb      	str	r3, [r5, #28]
   1488a:	46a8      	mov	r8, r5
   1488c:	f04f 0b04 	mov.w	fp, #4
   14890:	e9c5 2905 	strd	r2, r9, [r5, #20]
   14894:	f848 bf10 	str.w	fp, [r8, #16]!
   14898:	4811      	ldr	r0, [pc, #68]	; (148e0 <z_arm_fatal_error+0xcc>)
   1489a:	2300      	movs	r3, #0
   1489c:	4642      	mov	r2, r8
   1489e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   148a2:	f7fe fc67 	bl	13174 <z_impl_z_log_msg_static_create>
   148a6:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   148a8:	69a3      	ldr	r3, [r4, #24]
   148aa:	46ad      	mov	sp, r5
   148ac:	4a0f      	ldr	r2, [pc, #60]	; (148ec <z_arm_fatal_error+0xd8>)
   148ae:	61eb      	str	r3, [r5, #28]
   148b0:	e9c5 2905 	strd	r2, r9, [r5, #20]
   148b4:	f8c5 b010 	str.w	fp, [r5, #16]
   148b8:	4809      	ldr	r0, [pc, #36]	; (148e0 <z_arm_fatal_error+0xcc>)
   148ba:	2300      	movs	r3, #0
   148bc:	4642      	mov	r2, r8
   148be:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   148c2:	f7fe fc57 	bl	13174 <z_impl_z_log_msg_static_create>
   148c6:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   148c8:	4621      	mov	r1, r4
   148ca:	4650      	mov	r0, sl
   148cc:	f01c fd7c 	bl	313c8 <z_fatal_error>
}
   148d0:	46bd      	mov	sp, r7
   148d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148d6:	bf00      	nop
   148d8:	0003bbf9 	.word	0x0003bbf9
   148dc:	0003bb4e 	.word	0x0003bb4e
   148e0:	00039658 	.word	0x00039658
   148e4:	0003bb81 	.word	0x0003bb81
   148e8:	0003bbb4 	.word	0x0003bbb4
   148ec:	0003bbc7 	.word	0x0003bbc7

000148f0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   148f0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   148f2:	2800      	cmp	r0, #0
   148f4:	db07      	blt.n	14906 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   148f6:	4a04      	ldr	r2, [pc, #16]	; (14908 <arch_irq_enable+0x18>)
   148f8:	0941      	lsrs	r1, r0, #5
   148fa:	2301      	movs	r3, #1
   148fc:	f000 001f 	and.w	r0, r0, #31
   14900:	4083      	lsls	r3, r0
   14902:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   14906:	4770      	bx	lr
   14908:	e000e100 	.word	0xe000e100

0001490c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   1490c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1490e:	2800      	cmp	r0, #0
   14910:	db0c      	blt.n	1492c <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14912:	0943      	lsrs	r3, r0, #5
   14914:	4906      	ldr	r1, [pc, #24]	; (14930 <arch_irq_disable+0x24>)
   14916:	f000 001f 	and.w	r0, r0, #31
   1491a:	3320      	adds	r3, #32
   1491c:	2201      	movs	r2, #1
   1491e:	4082      	lsls	r2, r0
   14920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   14924:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14928:	f3bf 8f6f 	isb	sy
}
   1492c:	4770      	bx	lr
   1492e:	bf00      	nop
   14930:	e000e100 	.word	0xe000e100

00014934 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   14934:	4b05      	ldr	r3, [pc, #20]	; (1494c <arch_irq_is_enabled+0x18>)
   14936:	0942      	lsrs	r2, r0, #5
   14938:	f000 001f 	and.w	r0, r0, #31
   1493c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   14940:	2301      	movs	r3, #1
   14942:	fa03 f000 	lsl.w	r0, r3, r0
}
   14946:	4010      	ands	r0, r2
   14948:	4770      	bx	lr
   1494a:	bf00      	nop
   1494c:	e000e100 	.word	0xe000e100

00014950 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   14950:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   14952:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14954:	bfa8      	it	ge
   14956:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
   1495a:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1495e:	bfb8      	it	lt
   14960:	4b06      	ldrlt	r3, [pc, #24]	; (1497c <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14962:	ea4f 1141 	mov.w	r1, r1, lsl #5
   14966:	bfac      	ite	ge
   14968:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1496c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14970:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14972:	bfb4      	ite	lt
   14974:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14976:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
   1497a:	4770      	bx	lr
   1497c:	e000ed14 	.word	0xe000ed14

00014980 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   14980:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   14982:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   14984:	4b04      	ldr	r3, [pc, #16]	; (14998 <_arch_isr_direct_pm+0x18>)
   14986:	699a      	ldr	r2, [r3, #24]
   14988:	b11a      	cbz	r2, 14992 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   1498a:	2200      	movs	r2, #0
   1498c:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   1498e:	f023 fecb 	bl	38728 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   14992:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   14994:	bd08      	pop	{r3, pc}
   14996:	bf00      	nop
   14998:	20003238 	.word	0x20003238

0001499c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   1499c:	bf30      	wfi
    b z_SysNmiOnReset
   1499e:	f7ff bffd 	b.w	1499c <z_SysNmiOnReset>
   149a2:	bf00      	nop

000149a4 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   149a4:	4a0f      	ldr	r2, [pc, #60]	; (149e4 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   149a6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   149a8:	4b0f      	ldr	r3, [pc, #60]	; (149e8 <z_arm_prep_c+0x44>)
   149aa:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   149ae:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   149b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   149b4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   149b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   149bc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   149c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
   149c4:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   149c8:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   149cc:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   149d0:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   149d4:	f01c fdb8 	bl	31548 <z_bss_zero>
	z_data_copy();
   149d8:	f01d fe16 	bl	32608 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   149dc:	f000 fc40 	bl	15260 <z_arm_interrupt_init>
	z_cstart();
   149e0:	f01c fdf6 	bl	315d0 <z_cstart>
   149e4:	00010000 	.word	0x00010000
   149e8:	e000ed00 	.word	0xe000ed00

000149ec <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   149ec:	4a09      	ldr	r2, [pc, #36]	; (14a14 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   149ee:	490a      	ldr	r1, [pc, #40]	; (14a18 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   149f0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   149f2:	6809      	ldr	r1, [r1, #0]
   149f4:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   149f6:	4909      	ldr	r1, [pc, #36]	; (14a1c <arch_swap+0x30>)
	_current->arch.basepri = key;
   149f8:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   149fa:	684b      	ldr	r3, [r1, #4]
   149fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   14a00:	604b      	str	r3, [r1, #4]
   14a02:	2300      	movs	r3, #0
   14a04:	f383 8811 	msr	BASEPRI, r3
   14a08:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   14a0c:	6893      	ldr	r3, [r2, #8]
}
   14a0e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   14a10:	4770      	bx	lr
   14a12:	bf00      	nop
   14a14:	20003238 	.word	0x20003238
   14a18:	0003b4b8 	.word	0x0003b4b8
   14a1c:	e000ed00 	.word	0xe000ed00

00014a20 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   14a20:	4912      	ldr	r1, [pc, #72]	; (14a6c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   14a22:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   14a24:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   14a28:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   14a2a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   14a2e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   14a32:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   14a34:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   14a38:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   14a3c:	4f0c      	ldr	r7, [pc, #48]	; (14a70 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   14a3e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   14a42:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   14a44:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   14a46:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   14a48:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   14a4a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   14a4c:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   14a4e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   14a52:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   14a54:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   14a56:	f000 fc49 	bl	152ec <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   14a5a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   14a5e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   14a62:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   14a66:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   14a6a:	4770      	bx	lr
    ldr r1, =_kernel
   14a6c:	20003238 	.word	0x20003238
    ldr v4, =_SCS_ICSR
   14a70:	e000ed04 	.word	0xe000ed04

00014a74 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   14a74:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   14a78:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   14a7a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   14a7e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   14a82:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   14a84:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   14a88:	2902      	cmp	r1, #2
    beq _oops
   14a8a:	d0ff      	beq.n	14a8c <_oops>

00014a8c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   14a8c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   14a8e:	f020 fc6b 	bl	35368 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   14a92:	bd01      	pop	{r0, pc}

00014a94 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   14a94:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   14a98:	9b00      	ldr	r3, [sp, #0]
   14a9a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   14a9e:	490a      	ldr	r1, [pc, #40]	; (14ac8 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   14aa0:	9b01      	ldr	r3, [sp, #4]
   14aa2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   14aa6:	9b02      	ldr	r3, [sp, #8]
   14aa8:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   14aac:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   14ab0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   14ab4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   14ab8:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   14abc:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   14abe:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   14ac0:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   14ac2:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   14ac4:	4770      	bx	lr
   14ac6:	bf00      	nop
   14ac8:	00032da7 	.word	0x00032da7

00014acc <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   14acc:	4a09      	ldr	r2, [pc, #36]	; (14af4 <z_check_thread_stack_fail+0x28>)
{
   14ace:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   14ad0:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   14ad2:	b170      	cbz	r0, 14af2 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   14ad4:	f113 0f16 	cmn.w	r3, #22
   14ad8:	6e80      	ldr	r0, [r0, #104]	; 0x68
   14ada:	d005      	beq.n	14ae8 <z_check_thread_stack_fail+0x1c>
   14adc:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
   14ae0:	429a      	cmp	r2, r3
   14ae2:	d805      	bhi.n	14af0 <z_check_thread_stack_fail+0x24>
   14ae4:	4283      	cmp	r3, r0
   14ae6:	d203      	bcs.n	14af0 <z_check_thread_stack_fail+0x24>
		return 0;
   14ae8:	4281      	cmp	r1, r0
   14aea:	bf28      	it	cs
   14aec:	2000      	movcs	r0, #0
   14aee:	4770      	bx	lr
   14af0:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
   14af2:	4770      	bx	lr
   14af4:	20003238 	.word	0x20003238

00014af8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   14af8:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   14afa:	4b09      	ldr	r3, [pc, #36]	; (14b20 <arch_switch_to_main_thread+0x28>)
   14afc:	6098      	str	r0, [r3, #8]
{
   14afe:	460d      	mov	r5, r1
   14b00:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   14b02:	f000 fbf3 	bl	152ec <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   14b06:	4620      	mov	r0, r4
   14b08:	f385 8809 	msr	PSP, r5
   14b0c:	2100      	movs	r1, #0
   14b0e:	b663      	cpsie	if
   14b10:	f381 8811 	msr	BASEPRI, r1
   14b14:	f3bf 8f6f 	isb	sy
   14b18:	2200      	movs	r2, #0
   14b1a:	2300      	movs	r3, #0
   14b1c:	f01e f943 	bl	32da6 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   14b20:	20003238 	.word	0x20003238

00014b24 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   14b24:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   14b26:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   14b28:	4a0b      	ldr	r2, [pc, #44]	; (14b58 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   14b2a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   14b2c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   14b2e:	bf1e      	ittt	ne
	movne	r1, #0
   14b30:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   14b32:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   14b34:	f023 fdf8 	blne	38728 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   14b38:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   14b3a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   14b3e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   14b42:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   14b46:	4905      	ldr	r1, [pc, #20]	; (14b5c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   14b48:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   14b4a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   14b4c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   14b4e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   14b52:	4903      	ldr	r1, [pc, #12]	; (14b60 <_isr_wrapper+0x3c>)
	bx r1
   14b54:	4708      	bx	r1
   14b56:	0000      	.short	0x0000
	ldr r2, =_kernel
   14b58:	20003238 	.word	0x20003238
	ldr r1, =_sw_isr_table
   14b5c:	00039300 	.word	0x00039300
	ldr r1, =z_arm_int_exit
   14b60:	00014b65 	.word	0x00014b65

00014b64 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   14b64:	4b04      	ldr	r3, [pc, #16]	; (14b78 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   14b66:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   14b68:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   14b6a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   14b6c:	d003      	beq.n	14b76 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   14b6e:	4903      	ldr	r1, [pc, #12]	; (14b7c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   14b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   14b74:	600a      	str	r2, [r1, #0]

00014b76 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   14b76:	4770      	bx	lr
	ldr r3, =_kernel
   14b78:	20003238 	.word	0x20003238
	ldr r1, =_SCS_ICSR
   14b7c:	e000ed04 	.word	0xe000ed04

00014b80 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   14b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14b84:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   14b86:	46e8      	mov	r8, sp
   14b88:	b088      	sub	sp, #32
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   14b8a:	4606      	mov	r6, r0
   14b8c:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   14b8e:	466a      	mov	r2, sp
   14b90:	4b4d      	ldr	r3, [pc, #308]	; (14cc8 <bus_fault.constprop.0+0x148>)
   14b92:	4c4e      	ldr	r4, [pc, #312]	; (14ccc <bus_fault.constprop.0+0x14c>)
   14b94:	6153      	str	r3, [r2, #20]
   14b96:	f04f 0903 	mov.w	r9, #3
   14b9a:	6194      	str	r4, [r2, #24]
   14b9c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14ba0:	f842 9f10 	str.w	r9, [r2, #16]!
   14ba4:	484a      	ldr	r0, [pc, #296]	; (14cd0 <bus_fault.constprop.0+0x150>)
   14ba6:	f020 fbee 	bl	35386 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   14baa:	4b4a      	ldr	r3, [pc, #296]	; (14cd4 <bus_fault.constprop.0+0x154>)
   14bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14bae:	04d9      	lsls	r1, r3, #19
   14bb0:	46c5      	mov	sp, r8
   14bb2:	d50c      	bpl.n	14bce <bus_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Stacking error");
   14bb4:	b088      	sub	sp, #32
   14bb6:	466a      	mov	r2, sp
   14bb8:	4b47      	ldr	r3, [pc, #284]	; (14cd8 <bus_fault.constprop.0+0x158>)
   14bba:	4845      	ldr	r0, [pc, #276]	; (14cd0 <bus_fault.constprop.0+0x150>)
   14bbc:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14bc0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14bc4:	f842 9f10 	str.w	r9, [r2, #16]!
   14bc8:	f020 fbdd 	bl	35386 <z_log_msg_static_create.constprop.0>
   14bcc:	46c5      	mov	sp, r8
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   14bce:	4b41      	ldr	r3, [pc, #260]	; (14cd4 <bus_fault.constprop.0+0x154>)
   14bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14bd2:	051a      	lsls	r2, r3, #20
   14bd4:	d50e      	bpl.n	14bf4 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Unstacking error");
   14bd6:	46e8      	mov	r8, sp
   14bd8:	b088      	sub	sp, #32
   14bda:	466a      	mov	r2, sp
   14bdc:	4b3f      	ldr	r3, [pc, #252]	; (14cdc <bus_fault.constprop.0+0x15c>)
   14bde:	483c      	ldr	r0, [pc, #240]	; (14cd0 <bus_fault.constprop.0+0x150>)
   14be0:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14be4:	2303      	movs	r3, #3
   14be6:	f842 3f10 	str.w	r3, [r2, #16]!
   14bea:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14bee:	f020 fbca 	bl	35386 <z_log_msg_static_create.constprop.0>
   14bf2:	46c5      	mov	sp, r8
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   14bf4:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 14cd4 <bus_fault.constprop.0+0x154>
   14bf8:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
   14bfc:	059b      	lsls	r3, r3, #22
   14bfe:	d52a      	bpl.n	14c56 <bus_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Precise data bus error");
   14c00:	46e8      	mov	r8, sp
   14c02:	b088      	sub	sp, #32
   14c04:	466a      	mov	r2, sp
   14c06:	4b36      	ldr	r3, [pc, #216]	; (14ce0 <bus_fault.constprop.0+0x160>)
   14c08:	4831      	ldr	r0, [pc, #196]	; (14cd0 <bus_fault.constprop.0+0x150>)
   14c0a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14c0e:	2303      	movs	r3, #3
   14c10:	f842 3f10 	str.w	r3, [r2, #16]!
   14c14:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14c18:	f020 fbb5 	bl	35386 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   14c1c:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   14c20:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
   14c24:	0410      	lsls	r0, r2, #16
   14c26:	46c5      	mov	sp, r8
   14c28:	d515      	bpl.n	14c56 <bus_fault.constprop.0+0xd6>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   14c2a:	b088      	sub	sp, #32
   14c2c:	466a      	mov	r2, sp
   14c2e:	492d      	ldr	r1, [pc, #180]	; (14ce4 <bus_fault.constprop.0+0x164>)
   14c30:	61d3      	str	r3, [r2, #28]
   14c32:	2304      	movs	r3, #4
   14c34:	e9c2 1405 	strd	r1, r4, [r2, #20]
   14c38:	4825      	ldr	r0, [pc, #148]	; (14cd0 <bus_fault.constprop.0+0x150>)
   14c3a:	f842 3f10 	str.w	r3, [r2, #16]!
   14c3e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   14c42:	f020 fba0 	bl	35386 <z_log_msg_static_create.constprop.0>
   14c46:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   14c48:	b12e      	cbz	r6, 14c56 <bus_fault.constprop.0+0xd6>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   14c4a:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
   14c4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   14c52:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   14c56:	4b1f      	ldr	r3, [pc, #124]	; (14cd4 <bus_fault.constprop.0+0x154>)
   14c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14c5a:	0559      	lsls	r1, r3, #21
   14c5c:	d50e      	bpl.n	14c7c <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Imprecise data bus error");
   14c5e:	466e      	mov	r6, sp
   14c60:	b088      	sub	sp, #32
   14c62:	466a      	mov	r2, sp
   14c64:	4b20      	ldr	r3, [pc, #128]	; (14ce8 <bus_fault.constprop.0+0x168>)
   14c66:	481a      	ldr	r0, [pc, #104]	; (14cd0 <bus_fault.constprop.0+0x150>)
   14c68:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14c6c:	2303      	movs	r3, #3
   14c6e:	f842 3f10 	str.w	r3, [r2, #16]!
   14c72:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14c76:	f020 fb86 	bl	35386 <z_log_msg_static_create.constprop.0>
   14c7a:	46b5      	mov	sp, r6
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   14c7c:	4b15      	ldr	r3, [pc, #84]	; (14cd4 <bus_fault.constprop.0+0x154>)
   14c7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14c80:	05d2      	lsls	r2, r2, #23
   14c82:	d518      	bpl.n	14cb6 <bus_fault.constprop.0+0x136>
		PR_FAULT_INFO("  Instruction bus error");
   14c84:	466e      	mov	r6, sp
   14c86:	b088      	sub	sp, #32
   14c88:	466a      	mov	r2, sp
   14c8a:	4b18      	ldr	r3, [pc, #96]	; (14cec <bus_fault.constprop.0+0x16c>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   14c8c:	4810      	ldr	r0, [pc, #64]	; (14cd0 <bus_fault.constprop.0+0x150>)
   14c8e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14c92:	2303      	movs	r3, #3
   14c94:	f842 3f10 	str.w	r3, [r2, #16]!
   14c98:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14c9c:	f020 fb73 	bl	35386 <z_log_msg_static_create.constprop.0>
   14ca0:	46b5      	mov	sp, r6
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   14ca2:	4a0c      	ldr	r2, [pc, #48]	; (14cd4 <bus_fault.constprop.0+0x154>)
   14ca4:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   14ca6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   14ca8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   14cac:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   14cae:	7028      	strb	r0, [r5, #0]

	return reason;
}
   14cb0:	46bd      	mov	sp, r7
   14cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   14cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14cb8:	049b      	lsls	r3, r3, #18
   14cba:	d5f2      	bpl.n	14ca2 <bus_fault.constprop.0+0x122>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   14cbc:	466e      	mov	r6, sp
   14cbe:	b088      	sub	sp, #32
   14cc0:	466a      	mov	r2, sp
   14cc2:	4b0b      	ldr	r3, [pc, #44]	; (14cf0 <bus_fault.constprop.0+0x170>)
   14cc4:	e7e2      	b.n	14c8c <bus_fault.constprop.0+0x10c>
   14cc6:	bf00      	nop
   14cc8:	0003bc02 	.word	0x0003bc02
   14ccc:	0003bfdd 	.word	0x0003bfdd
   14cd0:	00039658 	.word	0x00039658
   14cd4:	e000ed00 	.word	0xe000ed00
   14cd8:	0003bc1c 	.word	0x0003bc1c
   14cdc:	0003bc31 	.word	0x0003bc31
   14ce0:	0003bc48 	.word	0x0003bc48
   14ce4:	0003bc65 	.word	0x0003bc65
   14ce8:	0003bc7e 	.word	0x0003bc7e
   14cec:	0003bc9d 	.word	0x0003bc9d
   14cf0:	0003bcb9 	.word	0x0003bcb9

00014cf4 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   14cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14cf6:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   14cf8:	466d      	mov	r5, sp
   14cfa:	b088      	sub	sp, #32
   14cfc:	466a      	mov	r2, sp
   14cfe:	4b43      	ldr	r3, [pc, #268]	; (14e0c <usage_fault.constprop.0+0x118>)
   14d00:	4c43      	ldr	r4, [pc, #268]	; (14e10 <usage_fault.constprop.0+0x11c>)
   14d02:	6153      	str	r3, [r2, #20]
   14d04:	2603      	movs	r6, #3
   14d06:	6194      	str	r4, [r2, #24]
   14d08:	4842      	ldr	r0, [pc, #264]	; (14e14 <usage_fault.constprop.0+0x120>)
   14d0a:	f842 6f10 	str.w	r6, [r2, #16]!
   14d0e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14d12:	f020 fb38 	bl	35386 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   14d16:	4b40      	ldr	r3, [pc, #256]	; (14e18 <usage_fault.constprop.0+0x124>)
   14d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14d1a:	019b      	lsls	r3, r3, #6
   14d1c:	46ad      	mov	sp, r5
   14d1e:	d50c      	bpl.n	14d3a <usage_fault.constprop.0+0x46>
		PR_FAULT_INFO("  Division by zero");
   14d20:	b088      	sub	sp, #32
   14d22:	466a      	mov	r2, sp
   14d24:	4b3d      	ldr	r3, [pc, #244]	; (14e1c <usage_fault.constprop.0+0x128>)
   14d26:	483b      	ldr	r0, [pc, #236]	; (14e14 <usage_fault.constprop.0+0x120>)
   14d28:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14d2c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14d30:	f842 6f10 	str.w	r6, [r2, #16]!
   14d34:	f020 fb27 	bl	35386 <z_log_msg_static_create.constprop.0>
   14d38:	46ad      	mov	sp, r5
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   14d3a:	4b37      	ldr	r3, [pc, #220]	; (14e18 <usage_fault.constprop.0+0x124>)
   14d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14d3e:	01dd      	lsls	r5, r3, #7
   14d40:	d50e      	bpl.n	14d60 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Unaligned memory access");
   14d42:	466d      	mov	r5, sp
   14d44:	b088      	sub	sp, #32
   14d46:	466a      	mov	r2, sp
   14d48:	4b35      	ldr	r3, [pc, #212]	; (14e20 <usage_fault.constprop.0+0x12c>)
   14d4a:	4832      	ldr	r0, [pc, #200]	; (14e14 <usage_fault.constprop.0+0x120>)
   14d4c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14d50:	2303      	movs	r3, #3
   14d52:	f842 3f10 	str.w	r3, [r2, #16]!
   14d56:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14d5a:	f020 fb14 	bl	35386 <z_log_msg_static_create.constprop.0>
   14d5e:	46ad      	mov	sp, r5
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   14d60:	4b2d      	ldr	r3, [pc, #180]	; (14e18 <usage_fault.constprop.0+0x124>)
   14d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14d64:	0318      	lsls	r0, r3, #12
   14d66:	d50e      	bpl.n	14d86 <usage_fault.constprop.0+0x92>
		PR_FAULT_INFO("  No coprocessor instructions");
   14d68:	466d      	mov	r5, sp
   14d6a:	b088      	sub	sp, #32
   14d6c:	466a      	mov	r2, sp
   14d6e:	4b2d      	ldr	r3, [pc, #180]	; (14e24 <usage_fault.constprop.0+0x130>)
   14d70:	4828      	ldr	r0, [pc, #160]	; (14e14 <usage_fault.constprop.0+0x120>)
   14d72:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14d76:	2303      	movs	r3, #3
   14d78:	f842 3f10 	str.w	r3, [r2, #16]!
   14d7c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14d80:	f020 fb01 	bl	35386 <z_log_msg_static_create.constprop.0>
   14d84:	46ad      	mov	sp, r5
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   14d86:	4b24      	ldr	r3, [pc, #144]	; (14e18 <usage_fault.constprop.0+0x124>)
   14d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14d8a:	0359      	lsls	r1, r3, #13
   14d8c:	d50e      	bpl.n	14dac <usage_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   14d8e:	466d      	mov	r5, sp
   14d90:	b088      	sub	sp, #32
   14d92:	466a      	mov	r2, sp
   14d94:	4b24      	ldr	r3, [pc, #144]	; (14e28 <usage_fault.constprop.0+0x134>)
   14d96:	481f      	ldr	r0, [pc, #124]	; (14e14 <usage_fault.constprop.0+0x120>)
   14d98:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14d9c:	2303      	movs	r3, #3
   14d9e:	f842 3f10 	str.w	r3, [r2, #16]!
   14da2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14da6:	f020 faee 	bl	35386 <z_log_msg_static_create.constprop.0>
   14daa:	46ad      	mov	sp, r5
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   14dac:	4b1a      	ldr	r3, [pc, #104]	; (14e18 <usage_fault.constprop.0+0x124>)
   14dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14db0:	039a      	lsls	r2, r3, #14
   14db2:	d50e      	bpl.n	14dd2 <usage_fault.constprop.0+0xde>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   14db4:	466d      	mov	r5, sp
   14db6:	b088      	sub	sp, #32
   14db8:	466a      	mov	r2, sp
   14dba:	4b1c      	ldr	r3, [pc, #112]	; (14e2c <usage_fault.constprop.0+0x138>)
   14dbc:	4815      	ldr	r0, [pc, #84]	; (14e14 <usage_fault.constprop.0+0x120>)
   14dbe:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14dc2:	2303      	movs	r3, #3
   14dc4:	f842 3f10 	str.w	r3, [r2, #16]!
   14dc8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14dcc:	f020 fadb 	bl	35386 <z_log_msg_static_create.constprop.0>
   14dd0:	46ad      	mov	sp, r5
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   14dd2:	4b11      	ldr	r3, [pc, #68]	; (14e18 <usage_fault.constprop.0+0x124>)
   14dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14dd6:	03db      	lsls	r3, r3, #15
   14dd8:	d50e      	bpl.n	14df8 <usage_fault.constprop.0+0x104>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   14dda:	466d      	mov	r5, sp
   14ddc:	b088      	sub	sp, #32
   14dde:	466a      	mov	r2, sp
   14de0:	4b13      	ldr	r3, [pc, #76]	; (14e30 <usage_fault.constprop.0+0x13c>)
   14de2:	480c      	ldr	r0, [pc, #48]	; (14e14 <usage_fault.constprop.0+0x120>)
   14de4:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14de8:	2303      	movs	r3, #3
   14dea:	f842 3f10 	str.w	r3, [r2, #16]!
   14dee:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14df2:	f020 fac8 	bl	35386 <z_log_msg_static_create.constprop.0>
   14df6:	46ad      	mov	sp, r5
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   14df8:	4a07      	ldr	r2, [pc, #28]	; (14e18 <usage_fault.constprop.0+0x124>)
   14dfa:	6a93      	ldr	r3, [r2, #40]	; 0x28
   14dfc:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   14e00:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
   14e04:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   14e06:	6293      	str	r3, [r2, #40]	; 0x28
}
   14e08:	46bd      	mov	sp, r7
   14e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14e0c:	0003bcec 	.word	0x0003bcec
   14e10:	0003bfd1 	.word	0x0003bfd1
   14e14:	00039658 	.word	0x00039658
   14e18:	e000ed00 	.word	0xe000ed00
   14e1c:	0003bd08 	.word	0x0003bd08
   14e20:	0003bd1f 	.word	0x0003bd1f
   14e24:	0003bd3d 	.word	0x0003bd3d
   14e28:	0003bd5f 	.word	0x0003bd5f
   14e2c:	0003bd88 	.word	0x0003bd88
   14e30:	0003bda6 	.word	0x0003bda6

00014e34 <mem_manage_fault>:
{
   14e34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e38:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** MPU FAULT *****");
   14e3a:	466e      	mov	r6, sp
   14e3c:	b088      	sub	sp, #32
{
   14e3e:	4615      	mov	r5, r2
   14e40:	4680      	mov	r8, r0
   14e42:	4689      	mov	r9, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   14e44:	466a      	mov	r2, sp
   14e46:	4b5a      	ldr	r3, [pc, #360]	; (14fb0 <mem_manage_fault+0x17c>)
   14e48:	4c5a      	ldr	r4, [pc, #360]	; (14fb4 <mem_manage_fault+0x180>)
   14e4a:	6153      	str	r3, [r2, #20]
   14e4c:	f04f 0a03 	mov.w	sl, #3
   14e50:	6194      	str	r4, [r2, #24]
   14e52:	4859      	ldr	r0, [pc, #356]	; (14fb8 <mem_manage_fault+0x184>)
   14e54:	f842 af10 	str.w	sl, [r2, #16]!
   14e58:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14e5c:	f020 fa93 	bl	35386 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   14e60:	4b56      	ldr	r3, [pc, #344]	; (14fbc <mem_manage_fault+0x188>)
   14e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14e64:	06db      	lsls	r3, r3, #27
   14e66:	46b5      	mov	sp, r6
   14e68:	d50c      	bpl.n	14e84 <mem_manage_fault+0x50>
		PR_FAULT_INFO("  Stacking error (context area might be"
   14e6a:	b088      	sub	sp, #32
   14e6c:	466a      	mov	r2, sp
   14e6e:	4b54      	ldr	r3, [pc, #336]	; (14fc0 <mem_manage_fault+0x18c>)
   14e70:	4851      	ldr	r0, [pc, #324]	; (14fb8 <mem_manage_fault+0x184>)
   14e72:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14e76:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14e7a:	f842 af10 	str.w	sl, [r2, #16]!
   14e7e:	f020 fa82 	bl	35386 <z_log_msg_static_create.constprop.0>
   14e82:	46b5      	mov	sp, r6
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   14e84:	4b4d      	ldr	r3, [pc, #308]	; (14fbc <mem_manage_fault+0x188>)
   14e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14e88:	071e      	lsls	r6, r3, #28
   14e8a:	d50e      	bpl.n	14eaa <mem_manage_fault+0x76>
		PR_FAULT_INFO("  Unstacking error");
   14e8c:	466e      	mov	r6, sp
   14e8e:	b088      	sub	sp, #32
   14e90:	466a      	mov	r2, sp
   14e92:	4b4c      	ldr	r3, [pc, #304]	; (14fc4 <mem_manage_fault+0x190>)
   14e94:	4848      	ldr	r0, [pc, #288]	; (14fb8 <mem_manage_fault+0x184>)
   14e96:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14e9a:	2303      	movs	r3, #3
   14e9c:	f842 3f10 	str.w	r3, [r2, #16]!
   14ea0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14ea4:	f020 fa6f 	bl	35386 <z_log_msg_static_create.constprop.0>
   14ea8:	46b5      	mov	sp, r6
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   14eaa:	f8df b110 	ldr.w	fp, [pc, #272]	; 14fbc <mem_manage_fault+0x188>
   14eae:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
   14eb2:	0798      	lsls	r0, r3, #30
   14eb4:	d440      	bmi.n	14f38 <mem_manage_fault+0x104>
	uint32_t mmfar = -EINVAL;
   14eb6:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   14eba:	4b40      	ldr	r3, [pc, #256]	; (14fbc <mem_manage_fault+0x188>)
   14ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14ebe:	07da      	lsls	r2, r3, #31
   14ec0:	d50e      	bpl.n	14ee0 <mem_manage_fault+0xac>
		PR_FAULT_INFO("  Instruction Access Violation");
   14ec2:	46e9      	mov	r9, sp
   14ec4:	b088      	sub	sp, #32
   14ec6:	466a      	mov	r2, sp
   14ec8:	4b3f      	ldr	r3, [pc, #252]	; (14fc8 <mem_manage_fault+0x194>)
   14eca:	483b      	ldr	r0, [pc, #236]	; (14fb8 <mem_manage_fault+0x184>)
   14ecc:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14ed0:	2303      	movs	r3, #3
   14ed2:	f842 3f10 	str.w	r3, [r2, #16]!
   14ed6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14eda:	f020 fa54 	bl	35386 <z_log_msg_static_create.constprop.0>
   14ede:	46cd      	mov	sp, r9
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   14ee0:	4b36      	ldr	r3, [pc, #216]	; (14fbc <mem_manage_fault+0x188>)
   14ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14ee4:	069b      	lsls	r3, r3, #26
   14ee6:	d50e      	bpl.n	14f06 <mem_manage_fault+0xd2>
		PR_FAULT_INFO(
   14ee8:	46e9      	mov	r9, sp
   14eea:	b088      	sub	sp, #32
   14eec:	466a      	mov	r2, sp
   14eee:	4b37      	ldr	r3, [pc, #220]	; (14fcc <mem_manage_fault+0x198>)
   14ef0:	4831      	ldr	r0, [pc, #196]	; (14fb8 <mem_manage_fault+0x184>)
   14ef2:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14ef6:	2303      	movs	r3, #3
   14ef8:	f842 3f10 	str.w	r3, [r2, #16]!
   14efc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14f00:	f020 fa41 	bl	35386 <z_log_msg_static_create.constprop.0>
   14f04:	46cd      	mov	sp, r9
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   14f06:	4c2d      	ldr	r4, [pc, #180]	; (14fbc <mem_manage_fault+0x188>)
   14f08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14f0a:	06d8      	lsls	r0, r3, #27
   14f0c:	d442      	bmi.n	14f94 <mem_manage_fault+0x160>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   14f0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   14f10:	0799      	lsls	r1, r3, #30
   14f12:	d43f      	bmi.n	14f94 <mem_manage_fault+0x160>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   14f14:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   14f16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   14f18:	4a28      	ldr	r2, [pc, #160]	; (14fbc <mem_manage_fault+0x188>)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   14f1a:	069b      	lsls	r3, r3, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   14f1c:	bf42      	ittt	mi
   14f1e:	6a63      	ldrmi	r3, [r4, #36]	; 0x24
   14f20:	f423 5300 	bicmi.w	r3, r3, #8192	; 0x2000
   14f24:	6263      	strmi	r3, [r4, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   14f26:	6a93      	ldr	r3, [r2, #40]	; 0x28
   14f28:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   14f2c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   14f2e:	2300      	movs	r3, #0
   14f30:	702b      	strb	r3, [r5, #0]
}
   14f32:	46bd      	mov	sp, r7
   14f34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		PR_FAULT_INFO("  Data Access Violation");
   14f38:	46ea      	mov	sl, sp
   14f3a:	b088      	sub	sp, #32
   14f3c:	466a      	mov	r2, sp
   14f3e:	4b24      	ldr	r3, [pc, #144]	; (14fd0 <mem_manage_fault+0x19c>)
   14f40:	481d      	ldr	r0, [pc, #116]	; (14fb8 <mem_manage_fault+0x184>)
   14f42:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14f46:	2303      	movs	r3, #3
   14f48:	f842 3f10 	str.w	r3, [r2, #16]!
   14f4c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14f50:	f020 fa19 	bl	35386 <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
   14f54:	f8db 6034 	ldr.w	r6, [fp, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   14f58:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
   14f5c:	0619      	lsls	r1, r3, #24
   14f5e:	46d5      	mov	sp, sl
   14f60:	d5a9      	bpl.n	14eb6 <mem_manage_fault+0x82>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   14f62:	b088      	sub	sp, #32
   14f64:	466a      	mov	r2, sp
   14f66:	4b1b      	ldr	r3, [pc, #108]	; (14fd4 <mem_manage_fault+0x1a0>)
   14f68:	61d6      	str	r6, [r2, #28]
   14f6a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14f6e:	2304      	movs	r3, #4
   14f70:	f842 3f10 	str.w	r3, [r2, #16]!
   14f74:	4810      	ldr	r0, [pc, #64]	; (14fb8 <mem_manage_fault+0x184>)
   14f76:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   14f7a:	f020 fa04 	bl	35386 <z_log_msg_static_create.constprop.0>
   14f7e:	46d5      	mov	sp, sl
			if (from_hard_fault != 0) {
   14f80:	f1b9 0f00 	cmp.w	r9, #0
   14f84:	d099      	beq.n	14eba <mem_manage_fault+0x86>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   14f86:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
   14f8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   14f8e:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
   14f92:	e792      	b.n	14eba <mem_manage_fault+0x86>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   14f94:	6863      	ldr	r3, [r4, #4]
   14f96:	051a      	lsls	r2, r3, #20
   14f98:	d5bc      	bpl.n	14f14 <mem_manage_fault+0xe0>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   14f9a:	4641      	mov	r1, r8
   14f9c:	4630      	mov	r0, r6
   14f9e:	f7ff fd95 	bl	14acc <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   14fa2:	2800      	cmp	r0, #0
   14fa4:	d0b6      	beq.n	14f14 <mem_manage_fault+0xe0>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   14fa6:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   14faa:	2002      	movs	r0, #2
   14fac:	e7b3      	b.n	14f16 <mem_manage_fault+0xe2>
   14fae:	bf00      	nop
   14fb0:	0003bdd5 	.word	0x0003bdd5
   14fb4:	0003bfe7 	.word	0x0003bfe7
   14fb8:	00039658 	.word	0x00039658
   14fbc:	e000ed00 	.word	0xe000ed00
   14fc0:	0003bdef 	.word	0x0003bdef
   14fc4:	0003bc31 	.word	0x0003bc31
   14fc8:	0003be5c 	.word	0x0003be5c
   14fcc:	0003bcb9 	.word	0x0003bcb9
   14fd0:	0003be26 	.word	0x0003be26
   14fd4:	0003be42 	.word	0x0003be42

00014fd8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   14fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14fdc:	4b86      	ldr	r3, [pc, #536]	; (151f8 <z_arm_fault+0x220>)
{
   14fde:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14fe0:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   14fe4:	af00      	add	r7, sp, #0
   14fe6:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14fe8:	f3c8 0408 	ubfx	r4, r8, #0, #9
   14fec:	2600      	movs	r6, #0
   14fee:	f386 8811 	msr	BASEPRI, r6
   14ff2:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   14ff6:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   14ffa:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   14ffe:	d113      	bne.n	15028 <z_arm_fault+0x50>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   15000:	f002 030c 	and.w	r3, r2, #12
   15004:	2b08      	cmp	r3, #8
   15006:	d11e      	bne.n	15046 <z_arm_fault+0x6e>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   15008:	466d      	mov	r5, sp
   1500a:	b088      	sub	sp, #32
   1500c:	466a      	mov	r2, sp
   1500e:	4b7b      	ldr	r3, [pc, #492]	; (151fc <z_arm_fault+0x224>)
   15010:	6153      	str	r3, [r2, #20]
   15012:	4b7b      	ldr	r3, [pc, #492]	; (15200 <z_arm_fault+0x228>)
   15014:	6193      	str	r3, [r2, #24]
   15016:	2303      	movs	r3, #3
   15018:	f842 3f10 	str.w	r3, [r2, #16]!
   1501c:	4879      	ldr	r0, [pc, #484]	; (15204 <z_arm_fault+0x22c>)
   1501e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15022:	f020 f9b0 	bl	35386 <z_log_msg_static_create.constprop.0>
   15026:	46ad      	mov	sp, r5
	*nested_exc = false;
   15028:	2600      	movs	r6, #0
		return NULL;
   1502a:	4635      	mov	r5, r6
	*recoverable = false;
   1502c:	2300      	movs	r3, #0
   1502e:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
   15030:	1ee3      	subs	r3, r4, #3
   15032:	2b09      	cmp	r3, #9
   15034:	f200 80c1 	bhi.w	151ba <z_arm_fault+0x1e2>
   15038:	e8df f003 	tbb	[pc, r3]
   1503c:	a3aaa70a 	.word	0xa3aaa70a
   15040:	bfbfbfbf 	.word	0xbfbfbfbf
   15044:	adbf      	.short	0xadbf
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   15046:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   15048:	bf4c      	ite	mi
   1504a:	460d      	movmi	r5, r1
			*nested_exc = true;
   1504c:	2601      	movpl	r6, #1
   1504e:	e7ed      	b.n	1502c <z_arm_fault+0x54>
	PR_FAULT_INFO("***** HARD FAULT *****");
   15050:	46e8      	mov	r8, sp
   15052:	b088      	sub	sp, #32
   15054:	466a      	mov	r2, sp
   15056:	4b6c      	ldr	r3, [pc, #432]	; (15208 <z_arm_fault+0x230>)
   15058:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 1520c <z_arm_fault+0x234>
   1505c:	6153      	str	r3, [r2, #20]
   1505e:	f04f 0a03 	mov.w	sl, #3
   15062:	f8c2 9018 	str.w	r9, [r2, #24]
   15066:	4867      	ldr	r0, [pc, #412]	; (15204 <z_arm_fault+0x22c>)
   15068:	f842 af10 	str.w	sl, [r2, #16]!
   1506c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15070:	f020 f989 	bl	35386 <z_log_msg_static_create.constprop.0>
	*recoverable = false;
   15074:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   15076:	4c60      	ldr	r4, [pc, #384]	; (151f8 <z_arm_fault+0x220>)
	*recoverable = false;
   15078:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1507a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1507c:	079a      	lsls	r2, r3, #30
   1507e:	46c5      	mov	sp, r8
   15080:	d50d      	bpl.n	1509e <z_arm_fault+0xc6>
		PR_EXC("  Bus fault on vector table read");
   15082:	b088      	sub	sp, #32
   15084:	466a      	mov	r2, sp
   15086:	4b62      	ldr	r3, [pc, #392]	; (15210 <z_arm_fault+0x238>)
		PR_EXC("  Debug event");
   15088:	e9c2 3905 	strd	r3, r9, [r2, #20]
   1508c:	f842 af10 	str.w	sl, [r2, #16]!
   15090:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	PR_FAULT_INFO("***** %s %d) *****",
   15094:	485b      	ldr	r0, [pc, #364]	; (15204 <z_arm_fault+0x22c>)
   15096:	f020 f976 	bl	35386 <z_log_msg_static_create.constprop.0>
   1509a:	46c5      	mov	sp, r8
}
   1509c:	e08b      	b.n	151b6 <z_arm_fault+0x1de>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   1509e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   150a0:	2b00      	cmp	r3, #0
   150a2:	da03      	bge.n	150ac <z_arm_fault+0xd4>
		PR_EXC("  Debug event");
   150a4:	b088      	sub	sp, #32
   150a6:	466a      	mov	r2, sp
   150a8:	4b5a      	ldr	r3, [pc, #360]	; (15214 <z_arm_fault+0x23c>)
   150aa:	e7ed      	b.n	15088 <z_arm_fault+0xb0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   150ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   150ae:	005b      	lsls	r3, r3, #1
   150b0:	f140 8081 	bpl.w	151b6 <z_arm_fault+0x1de>
		PR_EXC("  Fault escalation (see below)");
   150b4:	b088      	sub	sp, #32
   150b6:	466a      	mov	r2, sp
   150b8:	4b57      	ldr	r3, [pc, #348]	; (15218 <z_arm_fault+0x240>)
   150ba:	4852      	ldr	r0, [pc, #328]	; (15204 <z_arm_fault+0x22c>)
   150bc:	e9c2 3905 	strd	r3, r9, [r2, #20]
   150c0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   150c4:	f842 af10 	str.w	sl, [r2, #16]!
   150c8:	f020 f95d 	bl	35386 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   150cc:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   150ce:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   150d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   150d4:	46c5      	mov	sp, r8
   150d6:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   150d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   150dc:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   150e0:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   150e2:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   150e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   150ea:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   150ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   150f0:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   150f4:	f64d 7302 	movw	r3, #57090	; 0xdf02
   150f8:	429a      	cmp	r2, r3
   150fa:	d008      	beq.n	1510e <z_arm_fault+0x136>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   150fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   150fe:	b2db      	uxtb	r3, r3
   15100:	b393      	cbz	r3, 15168 <z_arm_fault+0x190>
			reason = mem_manage_fault(esf, 1, recoverable);
   15102:	1dfa      	adds	r2, r7, #7
   15104:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   15106:	4628      	mov	r0, r5
   15108:	f7ff fe94 	bl	14e34 <mem_manage_fault>
   1510c:	e03b      	b.n	15186 <z_arm_fault+0x1ae>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   1510e:	b088      	sub	sp, #32
   15110:	682b      	ldr	r3, [r5, #0]
   15112:	466a      	mov	r2, sp
   15114:	4941      	ldr	r1, [pc, #260]	; (1521c <z_arm_fault+0x244>)
   15116:	61d3      	str	r3, [r2, #28]
   15118:	2304      	movs	r3, #4
   1511a:	e9c2 1905 	strd	r1, r9, [r2, #20]
   1511e:	4839      	ldr	r0, [pc, #228]	; (15204 <z_arm_fault+0x22c>)
   15120:	f842 3f10 	str.w	r3, [r2, #16]!
   15124:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   15128:	f020 f92d 	bl	35386 <z_log_msg_static_create.constprop.0>
			reason = esf->basic.r0;
   1512c:	682c      	ldr	r4, [r5, #0]
   1512e:	46c5      	mov	sp, r8
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   15130:	79fb      	ldrb	r3, [r7, #7]
   15132:	b9ab      	cbnz	r3, 15160 <z_arm_fault+0x188>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   15134:	2220      	movs	r2, #32
   15136:	4629      	mov	r1, r5
   15138:	f107 0008 	add.w	r0, r7, #8
   1513c:	f020 f9fb 	bl	35536 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   15140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15142:	2e00      	cmp	r6, #0
   15144:	d052      	beq.n	151ec <z_arm_fault+0x214>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   15146:	f3c3 0208 	ubfx	r2, r3, #0, #9
   1514a:	b922      	cbnz	r2, 15156 <z_arm_fault+0x17e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1514c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   15150:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   15154:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   15156:	f107 0108 	add.w	r1, r7, #8
   1515a:	4620      	mov	r0, r4
   1515c:	f7ff fb5a 	bl	14814 <z_arm_fatal_error>
}
   15160:	3728      	adds	r7, #40	; 0x28
   15162:	46bd      	mov	sp, r7
   15164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   15168:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1516a:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   1516e:	d004      	beq.n	1517a <z_arm_fault+0x1a2>
			reason = bus_fault(esf, 1, recoverable);
   15170:	1df9      	adds	r1, r7, #7
   15172:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   15174:	f7ff fd04 	bl	14b80 <bus_fault.constprop.0>
   15178:	e005      	b.n	15186 <z_arm_fault+0x1ae>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   1517a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1517c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   15180:	d319      	bcc.n	151b6 <z_arm_fault+0x1de>
			reason = usage_fault(esf);
   15182:	f7ff fdb7 	bl	14cf4 <usage_fault.constprop.0>
   15186:	4604      	mov	r4, r0
   15188:	e7d2      	b.n	15130 <z_arm_fault+0x158>
		reason = mem_manage_fault(esf, 0, recoverable);
   1518a:	1dfa      	adds	r2, r7, #7
   1518c:	2100      	movs	r1, #0
   1518e:	e7ba      	b.n	15106 <z_arm_fault+0x12e>
		reason = bus_fault(esf, 0, recoverable);
   15190:	1df9      	adds	r1, r7, #7
   15192:	2000      	movs	r0, #0
   15194:	e7ee      	b.n	15174 <z_arm_fault+0x19c>
	PR_FAULT_INFO(
   15196:	466c      	mov	r4, sp
   15198:	b088      	sub	sp, #32
   1519a:	466a      	mov	r2, sp
   1519c:	4b20      	ldr	r3, [pc, #128]	; (15220 <z_arm_fault+0x248>)
   1519e:	6153      	str	r3, [r2, #20]
   151a0:	4b20      	ldr	r3, [pc, #128]	; (15224 <z_arm_fault+0x24c>)
   151a2:	6193      	str	r3, [r2, #24]
   151a4:	2303      	movs	r3, #3
   151a6:	f842 3f10 	str.w	r3, [r2, #16]!
   151aa:	4816      	ldr	r0, [pc, #88]	; (15204 <z_arm_fault+0x22c>)
   151ac:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   151b0:	f020 f8e9 	bl	35386 <z_log_msg_static_create.constprop.0>
   151b4:	46a5      	mov	sp, r4
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   151b6:	2400      	movs	r4, #0
   151b8:	e7ba      	b.n	15130 <z_arm_fault+0x158>
	PR_FAULT_INFO("***** %s %d) *****",
   151ba:	4a1b      	ldr	r2, [pc, #108]	; (15228 <z_arm_fault+0x250>)
   151bc:	4b1b      	ldr	r3, [pc, #108]	; (1522c <z_arm_fault+0x254>)
   151be:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   151c2:	46e8      	mov	r8, sp
   151c4:	b08a      	sub	sp, #40	; 0x28
   151c6:	bf18      	it	ne
   151c8:	4613      	movne	r3, r2
   151ca:	466a      	mov	r2, sp
   151cc:	4918      	ldr	r1, [pc, #96]	; (15230 <z_arm_fault+0x258>)
   151ce:	6151      	str	r1, [r2, #20]
   151d0:	4918      	ldr	r1, [pc, #96]	; (15234 <z_arm_fault+0x25c>)
   151d2:	e9c2 1306 	strd	r1, r3, [r2, #24]
   151d6:	f240 3301 	movw	r3, #769	; 0x301
   151da:	8493      	strh	r3, [r2, #36]	; 0x24
   151dc:	3c10      	subs	r4, #16
   151de:	4b16      	ldr	r3, [pc, #88]	; (15238 <z_arm_fault+0x260>)
   151e0:	6214      	str	r4, [r2, #32]
   151e2:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   151e6:	f842 3f10 	str.w	r3, [r2, #16]!
   151ea:	e753      	b.n	15094 <z_arm_fault+0xbc>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   151ec:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   151f0:	f023 0301 	bic.w	r3, r3, #1
   151f4:	e7ae      	b.n	15154 <z_arm_fault+0x17c>
   151f6:	bf00      	nop
   151f8:	e000ed00 	.word	0xe000ed00
   151fc:	0003bead 	.word	0x0003bead
   15200:	0003c003 	.word	0x0003c003
   15204:	00039658 	.word	0x00039658
   15208:	0003bedc 	.word	0x0003bedc
   1520c:	0003bff8 	.word	0x0003bff8
   15210:	0003bef7 	.word	0x0003bef7
   15214:	0003bf1c 	.word	0x0003bf1c
   15218:	0003bf2e 	.word	0x0003bf2e
   1521c:	0003bf51 	.word	0x0003bf51
   15220:	0003bf71 	.word	0x0003bf71
   15224:	0003bfc3 	.word	0x0003bfc3
   15228:	0003be94 	.word	0x0003be94
   1522c:	0003be7f 	.word	0x0003be7f
   15230:	0003bf99 	.word	0x0003bf99
   15234:	0003bfb0 	.word	0x0003bfb0
   15238:	01000005 	.word	0x01000005

0001523c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1523c:	4a02      	ldr	r2, [pc, #8]	; (15248 <z_arm_fault_init+0xc>)
   1523e:	6953      	ldr	r3, [r2, #20]
   15240:	f043 0310 	orr.w	r3, r3, #16
   15244:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   15246:	4770      	bx	lr
   15248:	e000ed00 	.word	0xe000ed00

0001524c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   1524c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   15250:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   15254:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   15256:	4672      	mov	r2, lr
	bl z_arm_fault
   15258:	f7ff febe 	bl	14fd8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   1525c:	bd01      	pop	{r0, pc}
   1525e:	bf00      	nop

00015260 <z_arm_interrupt_init>:
   15260:	4804      	ldr	r0, [pc, #16]	; (15274 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   15262:	2300      	movs	r3, #0
   15264:	2120      	movs	r1, #32
   15266:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   15268:	3301      	adds	r3, #1
   1526a:	2b30      	cmp	r3, #48	; 0x30
   1526c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   15270:	d1f9      	bne.n	15266 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   15272:	4770      	bx	lr
   15274:	e000e100 	.word	0xe000e100

00015278 <__start>:
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   15278:	f7fd fce4 	bl	12c44 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1527c:	2020      	movs	r0, #32
    msr BASEPRI, r0
   1527e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   15282:	4808      	ldr	r0, [pc, #32]	; (152a4 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   15284:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   15288:	1840      	adds	r0, r0, r1
    msr PSP, r0
   1528a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1528e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   15292:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   15294:	4308      	orrs	r0, r1
    msr CONTROL, r0
   15296:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1529a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1529e:	f7ff fb81 	bl	149a4 <z_arm_prep_c>
   152a2:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   152a4:	20004b40 	.word	0x20004b40

000152a8 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   152a8:	4b08      	ldr	r3, [pc, #32]	; (152cc <z_impl_k_thread_abort+0x24>)
   152aa:	689b      	ldr	r3, [r3, #8]
   152ac:	4283      	cmp	r3, r0
   152ae:	d10b      	bne.n	152c8 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   152b0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   152b4:	b143      	cbz	r3, 152c8 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   152b6:	4b06      	ldr	r3, [pc, #24]	; (152d0 <z_impl_k_thread_abort+0x28>)
   152b8:	685a      	ldr	r2, [r3, #4]
   152ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   152be:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   152c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   152c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   152c6:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   152c8:	f01d b92c 	b.w	32524 <z_thread_abort>
   152cc:	20003238 	.word	0x20003238
   152d0:	e000ed00 	.word	0xe000ed00

000152d4 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   152d4:	4b02      	ldr	r3, [pc, #8]	; (152e0 <z_arm_configure_static_mpu_regions+0xc>)
   152d6:	4a03      	ldr	r2, [pc, #12]	; (152e4 <z_arm_configure_static_mpu_regions+0x10>)
   152d8:	4803      	ldr	r0, [pc, #12]	; (152e8 <z_arm_configure_static_mpu_regions+0x14>)
   152da:	2101      	movs	r1, #1
   152dc:	f000 b89a 	b.w	15414 <arm_core_mpu_configure_static_mpu_regions>
   152e0:	20040000 	.word	0x20040000
   152e4:	20000000 	.word	0x20000000
   152e8:	00039a58 	.word	0x00039a58

000152ec <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   152ec:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   152ee:	4b05      	ldr	r3, [pc, #20]	; (15304 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   152f0:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
   152f2:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   152f4:	4a04      	ldr	r2, [pc, #16]	; (15308 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   152f6:	2140      	movs	r1, #64	; 0x40
   152f8:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   152fc:	4618      	mov	r0, r3
   152fe:	2101      	movs	r1, #1
   15300:	f000 b892 	b.w	15428 <arm_core_mpu_configure_dynamic_mpu_regions>
   15304:	20001b04 	.word	0x20001b04
   15308:	150b0000 	.word	0x150b0000

0001530c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   1530c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   15310:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 153d0 <mpu_configure_regions+0xc4>
   15314:	469c      	mov	ip, r3
   15316:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
   15318:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
   1531a:	2300      	movs	r3, #0
   1531c:	428b      	cmp	r3, r1
   1531e:	da1c      	bge.n	1535a <mpu_configure_regions+0x4e>
		if (regions[i].size == 0U) {
   15320:	6844      	ldr	r4, [r0, #4]
   15322:	2c00      	cmp	r4, #0
   15324:	d051      	beq.n	153ca <mpu_configure_regions+0xbe>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   15326:	f1bc 0f00 	cmp.w	ip, #0
   1532a:	d01f      	beq.n	1536c <mpu_configure_regions+0x60>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   1532c:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   1532e:	4234      	tst	r4, r6
   15330:	d017      	beq.n	15362 <mpu_configure_regions+0x56>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   15332:	466c      	mov	r4, sp
   15334:	b088      	sub	sp, #32
   15336:	466a      	mov	r2, sp
   15338:	4926      	ldr	r1, [pc, #152]	; (153d4 <mpu_configure_regions+0xc8>)
   1533a:	6151      	str	r1, [r2, #20]
   1533c:	4926      	ldr	r1, [pc, #152]	; (153d8 <mpu_configure_regions+0xcc>)
   1533e:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   15342:	2304      	movs	r3, #4
   15344:	f842 3f10 	str.w	r3, [r2, #16]!
   15348:	4824      	ldr	r0, [pc, #144]	; (153dc <mpu_configure_regions+0xd0>)
   1534a:	2300      	movs	r3, #0
   1534c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   15350:	f7fd ff10 	bl	13174 <z_impl_z_log_msg_static_create>
			return -EINVAL;
   15354:	f06f 0515 	mvn.w	r5, #21
   15358:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   1535a:	4628      	mov	r0, r5
   1535c:	46bd      	mov	sp, r7
   1535e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
   15362:	2c1f      	cmp	r4, #31
   15364:	d9e5      	bls.n	15332 <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
   15366:	6802      	ldr	r2, [r0, #0]
		&&
   15368:	4216      	tst	r6, r2
   1536a:	d1e2      	bne.n	15332 <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   1536c:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   1536e:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   15370:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   15372:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
   15376:	d916      	bls.n	153a6 <mpu_configure_regions+0x9a>
	if (size > (1UL << 31)) {
   15378:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   1537c:	d815      	bhi.n	153aa <mpu_configure_regions+0x9e>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   1537e:	3c01      	subs	r4, #1
   15380:	fab4 f484 	clz	r4, r4
   15384:	f1c4 041f 	rsb	r4, r4, #31
   15388:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   1538a:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   1538e:	ea46 0604 	orr.w	r6, r6, r4
   15392:	d90c      	bls.n	153ae <mpu_configure_regions+0xa2>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   15394:	466c      	mov	r4, sp
   15396:	b088      	sub	sp, #32
   15398:	466a      	mov	r2, sp
   1539a:	4b11      	ldr	r3, [pc, #68]	; (153e0 <mpu_configure_regions+0xd4>)
   1539c:	6153      	str	r3, [r2, #20]
   1539e:	4b11      	ldr	r3, [pc, #68]	; (153e4 <mpu_configure_regions+0xd8>)
   153a0:	e9c2 3506 	strd	r3, r5, [r2, #24]
   153a4:	e7cd      	b.n	15342 <mpu_configure_regions+0x36>
		return REGION_32B;
   153a6:	2408      	movs	r4, #8
   153a8:	e7ef      	b.n	1538a <mpu_configure_regions+0x7e>
		return REGION_4G;
   153aa:	243e      	movs	r4, #62	; 0x3e
   153ac:	e7ed      	b.n	1538a <mpu_configure_regions+0x7e>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   153ae:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
   153b2:	432a      	orrs	r2, r5
   153b4:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   153b8:	f046 0601 	orr.w	r6, r6, #1
   153bc:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   153c0:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
   153c4:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   153c6:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
   153ca:	3301      	adds	r3, #1
   153cc:	300c      	adds	r0, #12
   153ce:	e7a5      	b.n	1531c <mpu_configure_regions+0x10>
   153d0:	e000ed00 	.word	0xe000ed00
   153d4:	0003c00f 	.word	0x0003c00f
   153d8:	0003c079 	.word	0x0003c079
   153dc:	00039648 	.word	0x00039648
   153e0:	0003c036 	.word	0x0003c036
   153e4:	0003c060 	.word	0x0003c060

000153e8 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   153e8:	4b04      	ldr	r3, [pc, #16]	; (153fc <arm_core_mpu_enable+0x14>)
   153ea:	2205      	movs	r2, #5
   153ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   153f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   153f4:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   153f8:	4770      	bx	lr
   153fa:	bf00      	nop
   153fc:	e000ed00 	.word	0xe000ed00

00015400 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   15400:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   15404:	4b02      	ldr	r3, [pc, #8]	; (15410 <arm_core_mpu_disable+0x10>)
   15406:	2200      	movs	r2, #0
   15408:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   1540c:	4770      	bx	lr
   1540e:	bf00      	nop
   15410:	e000ed00 	.word	0xe000ed00

00015414 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   15414:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   15416:	4c03      	ldr	r4, [pc, #12]	; (15424 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   15418:	2301      	movs	r3, #1
   1541a:	7822      	ldrb	r2, [r4, #0]
   1541c:	f7ff ff76 	bl	1530c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   15420:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   15422:	bd10      	pop	{r4, pc}
   15424:	200032a5 	.word	0x200032a5

00015428 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
   15428:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   1542a:	4a09      	ldr	r2, [pc, #36]	; (15450 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
   1542c:	2300      	movs	r3, #0
   1542e:	7812      	ldrb	r2, [r2, #0]
   15430:	f7ff ff6c 	bl	1530c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   15434:	f110 0f16 	cmn.w	r0, #22
   15438:	d003      	beq.n	15442 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
   1543a:	4b06      	ldr	r3, [pc, #24]	; (15454 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
   1543c:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   1543e:	2807      	cmp	r0, #7
   15440:	dd00      	ble.n	15444 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   15442:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   15444:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
   15448:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   1544c:	3001      	adds	r0, #1
   1544e:	e7f6      	b.n	1543e <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   15450:	200032a5 	.word	0x200032a5
   15454:	e000ed00 	.word	0xe000ed00

00015458 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   15458:	4914      	ldr	r1, [pc, #80]	; (154ac <z_arm_mpu_init+0x54>)
   1545a:	6808      	ldr	r0, [r1, #0]
   1545c:	2808      	cmp	r0, #8
{
   1545e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   15460:	d821      	bhi.n	154a6 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   15462:	f7ff ffcd 	bl	15400 <arm_core_mpu_disable>
   15466:	4c12      	ldr	r4, [pc, #72]	; (154b0 <z_arm_mpu_init+0x58>)
   15468:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1546a:	2200      	movs	r2, #0
   1546c:	4290      	cmp	r0, r2
   1546e:	f101 010c 	add.w	r1, r1, #12
   15472:	d105      	bne.n	15480 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   15474:	4b0f      	ldr	r3, [pc, #60]	; (154b4 <z_arm_mpu_init+0x5c>)
   15476:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   15478:	f7ff ffb6 	bl	153e8 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   1547c:	2000      	movs	r0, #0
}
   1547e:	bd10      	pop	{r4, pc}
   15480:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15484:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   15488:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   1548c:	4313      	orrs	r3, r2
   1548e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15492:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   15496:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1549a:	f043 0301 	orr.w	r3, r3, #1
   1549e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   154a2:	3201      	adds	r2, #1
   154a4:	e7e2      	b.n	1546c <z_arm_mpu_init+0x14>
		return -1;
   154a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   154aa:	e7e8      	b.n	1547e <z_arm_mpu_init+0x26>
   154ac:	00039a64 	.word	0x00039a64
   154b0:	e000ed00 	.word	0xe000ed00
   154b4:	200032a5 	.word	0x200032a5

000154b8 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   154b8:	4b01      	ldr	r3, [pc, #4]	; (154c0 <__stdout_hook_install+0x8>)
   154ba:	6018      	str	r0, [r3, #0]
}
   154bc:	4770      	bx	lr
   154be:	bf00      	nop
   154c0:	20000278 	.word	0x20000278

000154c4 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   154c4:	f04f 0220 	mov.w	r2, #32
   154c8:	f3ef 8311 	mrs	r3, BASEPRI
   154cc:	f382 8812 	msr	BASEPRI_MAX, r2
   154d0:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   154d4:	4a04      	ldr	r2, [pc, #16]	; (154e8 <nordicsemi_nrf52_init+0x24>)
   154d6:	2101      	movs	r1, #1
   154d8:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   154dc:	f383 8811 	msr	BASEPRI, r3
   154e0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   154e4:	2000      	movs	r0, #0
   154e6:	4770      	bx	lr
   154e8:	4001e000 	.word	0x4001e000

000154ec <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   154ec:	b120      	cbz	r0, 154f8 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   154ee:	4b03      	ldr	r3, [pc, #12]	; (154fc <arch_busy_wait+0x10>)
   154f0:	0180      	lsls	r0, r0, #6
   154f2:	f043 0301 	orr.w	r3, r3, #1
   154f6:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   154f8:	4770      	bx	lr
   154fa:	bf00      	nop
   154fc:	000397e0 	.word	0x000397e0

00015500 <board_init>:

#include <zephyr/init.h>
#include <zephyr/drivers/gpio.h>

static int board_init(const struct device *dev)
{
   15500:	b508      	push	{r3, lr}
   15502:	480d      	ldr	r0, [pc, #52]	; (15538 <board_init+0x38>)
   15504:	f023 f83a 	bl	3857c <z_device_is_ready>
	static const struct gpio_dt_spec pull_up =
		GPIO_DT_SPEC_GET(DT_PATH(zephyr_user), pull_up_gpios);
	static const struct gpio_dt_spec user_led =
		GPIO_DT_SPEC_GET(DT_ALIAS(led4), gpios);

	if (!device_is_ready(pull_up.port)) {
   15508:	b910      	cbnz	r0, 15510 <board_init+0x10>
		return -ENODEV;
   1550a:	f06f 0012 	mvn.w	r0, #18
	if (res) {
		return res;
	}

	return gpio_pin_configure_dt(&user_led, GPIO_OUTPUT_INACTIVE);
}
   1550e:	bd08      	pop	{r3, pc}
   15510:	4809      	ldr	r0, [pc, #36]	; (15538 <board_init+0x38>)
   15512:	f023 f833 	bl	3857c <z_device_is_ready>
	if (!device_is_ready(user_led.port)) {
   15516:	2800      	cmp	r0, #0
   15518:	d0f7      	beq.n	1550a <board_init+0xa>
	res = gpio_pin_configure_dt(&pull_up, GPIO_OUTPUT_HIGH);
   1551a:	4808      	ldr	r0, [pc, #32]	; (1553c <board_init+0x3c>)
   1551c:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
   15520:	f020 f832 	bl	35588 <gpio_pin_configure_dt>
	if (res) {
   15524:	2800      	cmp	r0, #0
   15526:	d1f2      	bne.n	1550e <board_init+0xe>
}
   15528:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return gpio_pin_configure_dt(&user_led, GPIO_OUTPUT_INACTIVE);
   1552c:	4804      	ldr	r0, [pc, #16]	; (15540 <board_init+0x40>)
   1552e:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
   15532:	f020 b829 	b.w	35588 <gpio_pin_configure_dt>
   15536:	bf00      	nop
   15538:	000391e0 	.word	0x000391e0
   1553c:	00039a8c 	.word	0x00039a8c
   15540:	00039a84 	.word	0x00039a84

00015544 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   15544:	4b0e      	ldr	r3, [pc, #56]	; (15580 <bt_hex+0x3c>)
   15546:	2940      	cmp	r1, #64	; 0x40
{
   15548:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   1554a:	bf28      	it	cs
   1554c:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   1554e:	4c0d      	ldr	r4, [pc, #52]	; (15584 <bt_hex+0x40>)
   15550:	1846      	adds	r6, r0, r1
   15552:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   15554:	42b0      	cmp	r0, r6
   15556:	f103 0302 	add.w	r3, r3, #2
   1555a:	d104      	bne.n	15566 <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   1555c:	2300      	movs	r3, #0
   1555e:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   15562:	4807      	ldr	r0, [pc, #28]	; (15580 <bt_hex+0x3c>)
   15564:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   15566:	7802      	ldrb	r2, [r0, #0]
   15568:	0912      	lsrs	r2, r2, #4
   1556a:	5ca2      	ldrb	r2, [r4, r2]
   1556c:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   15570:	f810 2b01 	ldrb.w	r2, [r0], #1
   15574:	f002 020f 	and.w	r2, r2, #15
   15578:	5ca2      	ldrb	r2, [r4, r2]
   1557a:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   1557e:	e7e9      	b.n	15554 <bt_hex+0x10>
   15580:	200032c4 	.word	0x200032c4
   15584:	0003c0bc 	.word	0x0003c0bc

00015588 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   15588:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   1558a:	7803      	ldrb	r3, [r0, #0]
   1558c:	b08b      	sub	sp, #44	; 0x2c
   1558e:	4604      	mov	r4, r0
   15590:	ad07      	add	r5, sp, #28
   15592:	2b03      	cmp	r3, #3
   15594:	d821      	bhi.n	155da <bt_addr_le_str+0x52>
   15596:	e8df f003 	tbb	[pc, r3]
   1559a:	1a02      	.short	0x1a02
   1559c:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   1559e:	4912      	ldr	r1, [pc, #72]	; (155e8 <bt_addr_le_str+0x60>)
		strcpy(type, "random");
   155a0:	4628      	mov	r0, r5
   155a2:	f01f ff6a 	bl	3547a <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   155a6:	9505      	str	r5, [sp, #20]
   155a8:	7863      	ldrb	r3, [r4, #1]
   155aa:	9304      	str	r3, [sp, #16]
   155ac:	78a3      	ldrb	r3, [r4, #2]
   155ae:	9303      	str	r3, [sp, #12]
   155b0:	78e3      	ldrb	r3, [r4, #3]
   155b2:	9302      	str	r3, [sp, #8]
   155b4:	7923      	ldrb	r3, [r4, #4]
   155b6:	9301      	str	r3, [sp, #4]
   155b8:	7963      	ldrb	r3, [r4, #5]
   155ba:	9300      	str	r3, [sp, #0]
   155bc:	79a3      	ldrb	r3, [r4, #6]
   155be:	4a0b      	ldr	r2, [pc, #44]	; (155ec <bt_addr_le_str+0x64>)
   155c0:	480b      	ldr	r0, [pc, #44]	; (155f0 <bt_addr_le_str+0x68>)
   155c2:	211e      	movs	r1, #30
   155c4:	f01d fbe2 	bl	32d8c <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   155c8:	4809      	ldr	r0, [pc, #36]	; (155f0 <bt_addr_le_str+0x68>)
   155ca:	b00b      	add	sp, #44	; 0x2c
   155cc:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   155ce:	4909      	ldr	r1, [pc, #36]	; (155f4 <bt_addr_le_str+0x6c>)
   155d0:	e7e6      	b.n	155a0 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   155d2:	4909      	ldr	r1, [pc, #36]	; (155f8 <bt_addr_le_str+0x70>)
   155d4:	e7e4      	b.n	155a0 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   155d6:	4909      	ldr	r1, [pc, #36]	; (155fc <bt_addr_le_str+0x74>)
   155d8:	e7e2      	b.n	155a0 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   155da:	4a09      	ldr	r2, [pc, #36]	; (15600 <bt_addr_le_str+0x78>)
   155dc:	210a      	movs	r1, #10
   155de:	4628      	mov	r0, r5
   155e0:	f01d fbd4 	bl	32d8c <snprintk>
		break;
   155e4:	e7df      	b.n	155a6 <bt_addr_le_str+0x1e>
   155e6:	bf00      	nop
   155e8:	0003b553 	.word	0x0003b553
   155ec:	0003b575 	.word	0x0003b575
   155f0:	200032a6 	.word	0x200032a6
   155f4:	0003b55a 	.word	0x0003b55a
   155f8:	0003b561 	.word	0x0003b561
   155fc:	0003b56b 	.word	0x0003b56b
   15600:	0003e35e 	.word	0x0003e35e

00015604 <ecc_process>:

	bt_recv(buf);
}

static void ecc_process(struct k_work *work)
{
   15604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15608:	4d6e      	ldr	r5, [pc, #440]	; (157c4 <ecc_process+0x1c0>)
   1560a:	f3bf 8f5b 	dmb	ish
   1560e:	682c      	ldr	r4, [r5, #0]
   15610:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   15614:	f014 0401 	ands.w	r4, r4, #1
{
   15618:	af00      	add	r7, sp, #0
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   1561a:	d068      	beq.n	156ee <ecc_process+0xea>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   1561c:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 157c8 <ecc_process+0x1c4>
   15620:	4c6a      	ldr	r4, [pc, #424]	; (157cc <ecc_process+0x1c8>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   15622:	4e6b      	ldr	r6, [pc, #428]	; (157d0 <ecc_process+0x1cc>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   15624:	486b      	ldr	r0, [pc, #428]	; (157d4 <ecc_process+0x1d0>)
   15626:	4642      	mov	r2, r8
   15628:	4621      	mov	r1, r4
   1562a:	f01e fdaa 	bl	34182 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
   1562e:	4603      	mov	r3, r0
   15630:	2800      	cmp	r0, #0
   15632:	d149      	bne.n	156c8 <ecc_process+0xc4>
			LOG_ERR("Failed to create ECC public/private pair");
   15634:	466c      	mov	r4, sp
   15636:	b088      	sub	sp, #32
   15638:	466a      	mov	r2, sp
   1563a:	4967      	ldr	r1, [pc, #412]	; (157d8 <ecc_process+0x1d4>)
   1563c:	6151      	str	r1, [r2, #20]
   1563e:	4967      	ldr	r1, [pc, #412]	; (157dc <ecc_process+0x1d8>)
   15640:	6191      	str	r1, [r2, #24]
   15642:	2103      	movs	r1, #3
   15644:	f842 1f10 	str.w	r1, [r2, #16]!
   15648:	4865      	ldr	r0, [pc, #404]	; (157e0 <ecc_process+0x1dc>)
   1564a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1564e:	f7fd fd91 	bl	13174 <z_impl_z_log_msg_static_create>
			return BT_HCI_ERR_UNSPECIFIED;
   15652:	f04f 081f 	mov.w	r8, #31
   15656:	46a5      	mov	sp, r4
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   15658:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1565c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15660:	2001      	movs	r0, #1
   15662:	f000 fbb7 	bl	15dd4 <bt_buf_get_rx>
   15666:	f100 060c 	add.w	r6, r0, #12
   1566a:	2102      	movs	r1, #2
   1566c:	4604      	mov	r4, r0
   1566e:	4630      	mov	r0, r6
   15670:	f022 f9fe 	bl	37a70 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   15674:	233e      	movs	r3, #62	; 0x3e
   15676:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   15678:	2342      	movs	r3, #66	; 0x42
   1567a:	7043      	strb	r3, [r0, #1]
   1567c:	2101      	movs	r1, #1
   1567e:	4630      	mov	r0, r6
   15680:	f022 f9f6 	bl	37a70 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   15684:	2308      	movs	r3, #8
   15686:	7003      	strb	r3, [r0, #0]
   15688:	2141      	movs	r1, #65	; 0x41
   1568a:	4630      	mov	r0, r6
   1568c:	f022 f9f0 	bl	37a70 <net_buf_simple_add>
   15690:	4606      	mov	r6, r0
	evt->status = status;
   15692:	f800 8b01 	strb.w	r8, [r0], #1
	if (status) {
   15696:	f1b8 0f00 	cmp.w	r8, #0
   1569a:	d01f      	beq.n	156dc <ecc_process+0xd8>
		(void)memset(evt->key, 0, sizeof(evt->key));
   1569c:	2240      	movs	r2, #64	; 0x40
   1569e:	2100      	movs	r1, #0
   156a0:	f01f ff54 	bl	3554c <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   156a4:	f3bf 8f5b 	dmb	ish
   156a8:	e855 3f00 	ldrex	r3, [r5]
   156ac:	f023 0301 	bic.w	r3, r3, #1
   156b0:	e845 3200 	strex	r2, r3, [r5]
   156b4:	2a00      	cmp	r2, #0
   156b6:	d1f7      	bne.n	156a8 <ecc_process+0xa4>
   156b8:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   156bc:	4620      	mov	r0, r4
	bt_recv(buf);
   156be:	f001 fe03 	bl	172c8 <bt_recv>
	} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
		emulate_le_generate_dhkey();
	} else {
		__ASSERT(0, "Unhandled ECC command");
	}
}
   156c2:	46bd      	mov	sp, r7
   156c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   156c8:	2220      	movs	r2, #32
   156ca:	4631      	mov	r1, r6
   156cc:	4620      	mov	r0, r4
   156ce:	f01f ff22 	bl	35516 <memcmp>
   156d2:	2800      	cmp	r0, #0
   156d4:	d0a6      	beq.n	15624 <ecc_process+0x20>
	return 0;
   156d6:	f04f 0800 	mov.w	r8, #0
   156da:	e7bd      	b.n	15658 <ecc_process+0x54>
		sys_memcpy_swap(evt->key, ecc.public_key_be, BT_PUB_KEY_COORD_LEN);
   156dc:	493d      	ldr	r1, [pc, #244]	; (157d4 <ecc_process+0x1d0>)
   156de:	f01f ffdd 	bl	3569c <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[BT_PUB_KEY_COORD_LEN],
   156e2:	3120      	adds	r1, #32
   156e4:	f106 0021 	add.w	r0, r6, #33	; 0x21
   156e8:	f01f ffd8 	bl	3569c <sys_memcpy_swap.constprop.0>
   156ec:	e7da      	b.n	156a4 <ecc_process+0xa0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   156ee:	f3bf 8f5b 	dmb	ish
   156f2:	682b      	ldr	r3, [r5, #0]
   156f4:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
   156f8:	079b      	lsls	r3, r3, #30
   156fa:	d5e2      	bpl.n	156c2 <ecc_process+0xbe>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
   156fc:	4932      	ldr	r1, [pc, #200]	; (157c8 <ecc_process+0x1c4>)
   156fe:	4835      	ldr	r0, [pc, #212]	; (157d4 <ecc_process+0x1d0>)
   15700:	f01f fbfd 	bl	34efe <uECC_valid_public_key>
	if (ret < 0) {
   15704:	2800      	cmp	r0, #0
   15706:	da44      	bge.n	15792 <ecc_process+0x18e>
		LOG_ERR("public key is not valid (ret %d)", ret);
   15708:	466e      	mov	r6, sp
   1570a:	b088      	sub	sp, #32
   1570c:	466a      	mov	r2, sp
   1570e:	4b35      	ldr	r3, [pc, #212]	; (157e4 <ecc_process+0x1e0>)
   15710:	6153      	str	r3, [r2, #20]
   15712:	4b35      	ldr	r3, [pc, #212]	; (157e8 <ecc_process+0x1e4>)
   15714:	e9c2 3006 	strd	r3, r0, [r2, #24]
   15718:	2304      	movs	r3, #4
   1571a:	f842 3f10 	str.w	r3, [r2, #16]!
   1571e:	4830      	ldr	r0, [pc, #192]	; (157e0 <ecc_process+0x1dc>)
   15720:	4623      	mov	r3, r4
   15722:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   15726:	f7fd fd25 	bl	13174 <z_impl_z_log_msg_static_create>
   1572a:	46b5      	mov	sp, r6
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1572c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15730:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15734:	2001      	movs	r0, #1
   15736:	f000 fb4d 	bl	15dd4 <bt_buf_get_rx>
   1573a:	f100 080c 	add.w	r8, r0, #12
   1573e:	2102      	movs	r1, #2
   15740:	4606      	mov	r6, r0
   15742:	4640      	mov	r0, r8
   15744:	f022 f994 	bl	37a70 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   15748:	233e      	movs	r3, #62	; 0x3e
   1574a:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1574c:	2322      	movs	r3, #34	; 0x22
   1574e:	7043      	strb	r3, [r0, #1]
   15750:	2101      	movs	r1, #1
   15752:	4640      	mov	r0, r8
   15754:	f022 f98c 	bl	37a70 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   15758:	2309      	movs	r3, #9
   1575a:	7003      	strb	r3, [r0, #0]
   1575c:	2121      	movs	r1, #33	; 0x21
   1575e:	4640      	mov	r0, r8
   15760:	f022 f986 	bl	37a70 <net_buf_simple_add>
   15764:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
   15766:	3001      	adds	r0, #1
   15768:	bb34      	cbnz	r4, 157b8 <ecc_process+0x1b4>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
   1576a:	221f      	movs	r2, #31
   1576c:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   1576e:	21ff      	movs	r1, #255	; 0xff
   15770:	2220      	movs	r2, #32
   15772:	f01f feeb 	bl	3554c <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15776:	f3bf 8f5b 	dmb	ish
   1577a:	e855 3f00 	ldrex	r3, [r5]
   1577e:	f023 0302 	bic.w	r3, r3, #2
   15782:	e845 3200 	strex	r2, r3, [r5]
   15786:	2a00      	cmp	r2, #0
   15788:	d1f7      	bne.n	1577a <ecc_process+0x176>
   1578a:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   1578e:	4630      	mov	r0, r6
   15790:	e795      	b.n	156be <ecc_process+0xba>
		ret = uECC_shared_secret(ecc.public_key_be,
   15792:	490e      	ldr	r1, [pc, #56]	; (157cc <ecc_process+0x1c8>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15794:	f3bf 8f5b 	dmb	ish
   15798:	682b      	ldr	r3, [r5, #0]
   1579a:	480d      	ldr	r0, [pc, #52]	; (157d0 <ecc_process+0x1cc>)
   1579c:	f3bf 8f5b 	dmb	ish
   157a0:	f013 0f04 	tst.w	r3, #4
   157a4:	f101 0220 	add.w	r2, r1, #32
   157a8:	4b07      	ldr	r3, [pc, #28]	; (157c8 <ecc_process+0x1c4>)
   157aa:	bf18      	it	ne
   157ac:	4601      	movne	r1, r0
   157ae:	4610      	mov	r0, r2
   157b0:	f01e fd36 	bl	34220 <uECC_shared_secret>
   157b4:	4604      	mov	r4, r0
   157b6:	e7b9      	b.n	1572c <ecc_process+0x128>
		evt->status = 0U;
   157b8:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   157ba:	4906      	ldr	r1, [pc, #24]	; (157d4 <ecc_process+0x1d0>)
		evt->status = 0U;
   157bc:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   157be:	f01f ff6d 	bl	3569c <sys_memcpy_swap.constprop.0>
   157c2:	e7d8      	b.n	15776 <ecc_process+0x172>
   157c4:	20001b10 	.word	0x20001b10
   157c8:	00039a94 	.word	0x00039a94
   157cc:	20003345 	.word	0x20003345
   157d0:	0003c14e 	.word	0x0003c14e
   157d4:	20003365 	.word	0x20003365
   157d8:	0003c0d4 	.word	0x0003c0d4
   157dc:	0003c140 	.word	0x0003c140
   157e0:	000395c8 	.word	0x000395c8
   157e4:	0003c101 	.word	0x0003c101
   157e8:	0003c126 	.word	0x0003c126

000157ec <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
   157ec:	b570      	push	{r4, r5, r6, lr}
   157ee:	4c21      	ldr	r4, [pc, #132]	; (15874 <le_gen_dhkey+0x88>)
   157f0:	f3bf 8f5b 	dmb	ish
   157f4:	6823      	ldr	r3, [r4, #0]
   157f6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   157fa:	07da      	lsls	r2, r3, #31
{
   157fc:	4606      	mov	r6, r0
   157fe:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   15800:	d501      	bpl.n	15806 <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   15802:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	bt_long_wq_submit(&ecc_work);

	return BT_HCI_ERR_SUCCESS;
}
   15804:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   15806:	2901      	cmp	r1, #1
   15808:	d831      	bhi.n	1586e <le_gen_dhkey+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1580a:	f3bf 8f5b 	dmb	ish
   1580e:	e854 3f00 	ldrex	r3, [r4]
   15812:	f043 0202 	orr.w	r2, r3, #2
   15816:	e844 2100 	strex	r1, r2, [r4]
   1581a:	2900      	cmp	r1, #0
   1581c:	d1f7      	bne.n	1580e <le_gen_dhkey+0x22>
   1581e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
   15822:	079b      	lsls	r3, r3, #30
   15824:	d4ed      	bmi.n	15802 <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, BT_PUB_KEY_COORD_LEN);
   15826:	4814      	ldr	r0, [pc, #80]	; (15878 <le_gen_dhkey+0x8c>)
   15828:	4631      	mov	r1, r6
   1582a:	f01f ff37 	bl	3569c <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[BT_PUB_KEY_COORD_LEN], &key[BT_PUB_KEY_COORD_LEN],
   1582e:	4813      	ldr	r0, [pc, #76]	; (1587c <le_gen_dhkey+0x90>)
   15830:	f106 0120 	add.w	r1, r6, #32
   15834:	f01f ff32 	bl	3569c <sys_memcpy_swap.constprop.0>
   15838:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
   1583c:	b175      	cbz	r5, 1585c <le_gen_dhkey+0x70>
   1583e:	e854 3f00 	ldrex	r3, [r4]
   15842:	f043 0304 	orr.w	r3, r3, #4
   15846:	e844 3200 	strex	r2, r3, [r4]
   1584a:	2a00      	cmp	r2, #0
   1584c:	d1f7      	bne.n	1583e <le_gen_dhkey+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1584e:	f3bf 8f5b 	dmb	ish
	bt_long_wq_submit(&ecc_work);
   15852:	480b      	ldr	r0, [pc, #44]	; (15880 <le_gen_dhkey+0x94>)
   15854:	f000 fa82 	bl	15d5c <bt_long_wq_submit>
   15858:	2000      	movs	r0, #0
   1585a:	e7d3      	b.n	15804 <le_gen_dhkey+0x18>
   1585c:	e854 3f00 	ldrex	r3, [r4]
   15860:	f023 0304 	bic.w	r3, r3, #4
   15864:	e844 3200 	strex	r2, r3, [r4]
   15868:	2a00      	cmp	r2, #0
   1586a:	d0f0      	beq.n	1584e <le_gen_dhkey+0x62>
   1586c:	e7f6      	b.n	1585c <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
   1586e:	2012      	movs	r0, #18
   15870:	e7c8      	b.n	15804 <le_gen_dhkey+0x18>
   15872:	bf00      	nop
   15874:	20001b10 	.word	0x20001b10
   15878:	20003365 	.word	0x20003365
   1587c:	20003385 	.word	0x20003385
   15880:	2000027c 	.word	0x2000027c

00015884 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
   15884:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   15886:	7e06      	ldrb	r6, [r0, #24]
   15888:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
   1588a:	b976      	cbnz	r6, 158aa <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
   1588c:	68c3      	ldr	r3, [r0, #12]

		switch (sys_le16_to_cpu(chdr->opcode)) {
   1588e:	881d      	ldrh	r5, [r3, #0]
   15890:	f242 0226 	movw	r2, #8230	; 0x2026
   15894:	4295      	cmp	r5, r2
   15896:	d045      	beq.n	15924 <bt_hci_ecc_send+0xa0>
   15898:	d80f      	bhi.n	158ba <bt_hci_ecc_send+0x36>
   1589a:	f242 0201 	movw	r2, #8193	; 0x2001
   1589e:	4295      	cmp	r5, r2
   158a0:	d04f      	beq.n	15942 <bt_hci_ecc_send+0xbe>
   158a2:	f242 0325 	movw	r3, #8229	; 0x2025
   158a6:	429d      	cmp	r5, r3
   158a8:	d013      	beq.n	158d2 <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
   158aa:	4b2a      	ldr	r3, [pc, #168]	; (15954 <bt_hci_ecc_send+0xd0>)
   158ac:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   158b0:	4620      	mov	r0, r4
   158b2:	695b      	ldr	r3, [r3, #20]
}
   158b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
   158b8:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
   158ba:	f242 035e 	movw	r3, #8286	; 0x205e
   158be:	429d      	cmp	r5, r3
   158c0:	d1f3      	bne.n	158aa <bt_hci_ecc_send+0x26>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
   158c2:	2103      	movs	r1, #3
   158c4:	300c      	adds	r0, #12
   158c6:	f022 f8f2 	bl	37aae <net_buf_simple_pull>
	cmd = (void *)buf->data;
   158ca:	68e0      	ldr	r0, [r4, #12]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   158cc:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   158d0:	e02e      	b.n	15930 <bt_hci_ecc_send+0xac>
   158d2:	2103      	movs	r1, #3
   158d4:	300c      	adds	r0, #12
   158d6:	f022 f8ea 	bl	37aae <net_buf_simple_pull>
	net_buf_unref(buf);
   158da:	4620      	mov	r0, r4
   158dc:	f017 ffc0 	bl	2d860 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   158e0:	f3bf 8f5b 	dmb	ish
   158e4:	4b1c      	ldr	r3, [pc, #112]	; (15958 <bt_hci_ecc_send+0xd4>)
   158e6:	681a      	ldr	r2, [r3, #0]
   158e8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
   158ec:	0792      	lsls	r2, r2, #30
   158ee:	d507      	bpl.n	15900 <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
   158f0:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
   158f2:	4631      	mov	r1, r6
   158f4:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
   158f8:	f01f feac 	bl	35654 <send_cmd_status>
}
   158fc:	2000      	movs	r0, #0
   158fe:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15900:	f3bf 8f5b 	dmb	ish
   15904:	e853 2f00 	ldrex	r2, [r3]
   15908:	f042 0101 	orr.w	r1, r2, #1
   1590c:	e843 1000 	strex	r0, r1, [r3]
   15910:	2800      	cmp	r0, #0
   15912:	d1f7      	bne.n	15904 <bt_hci_ecc_send+0x80>
   15914:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
   15918:	07d3      	lsls	r3, r2, #31
   1591a:	d4e9      	bmi.n	158f0 <bt_hci_ecc_send+0x6c>
		bt_long_wq_submit(&ecc_work);
   1591c:	480f      	ldr	r0, [pc, #60]	; (1595c <bt_hci_ecc_send+0xd8>)
   1591e:	f000 fa1d 	bl	15d5c <bt_long_wq_submit>
		status = BT_HCI_ERR_SUCCESS;
   15922:	e7e6      	b.n	158f2 <bt_hci_ecc_send+0x6e>
   15924:	2103      	movs	r1, #3
   15926:	300c      	adds	r0, #12
   15928:	f022 f8c1 	bl	37aae <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
   1592c:	68e0      	ldr	r0, [r4, #12]
   1592e:	4631      	mov	r1, r6
   15930:	f7ff ff5c 	bl	157ec <le_gen_dhkey>
   15934:	4606      	mov	r6, r0
	net_buf_unref(buf);
   15936:	4620      	mov	r0, r4
   15938:	f017 ff92 	bl	2d860 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
   1593c:	4631      	mov	r1, r6
   1593e:	4628      	mov	r0, r5
   15940:	e7da      	b.n	158f8 <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
   15942:	78da      	ldrb	r2, [r3, #3]
   15944:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   15948:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
   1594a:	791a      	ldrb	r2, [r3, #4]
   1594c:	f022 0201 	bic.w	r2, r2, #1
   15950:	711a      	strb	r2, [r3, #4]
}
   15952:	e7aa      	b.n	158aa <bt_hci_ecc_send+0x26>
   15954:	20000000 	.word	0x20000000
   15958:	20001b10 	.word	0x20001b10
   1595c:	2000027c 	.word	0x2000027c

00015960 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   15960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15962:	af00      	add	r7, sp, #0
	int err;
	LOG_INF("Saving ID");
   15964:	466d      	mov	r5, sp
   15966:	b088      	sub	sp, #32
   15968:	466a      	mov	r2, sp
   1596a:	4b1f      	ldr	r3, [pc, #124]	; (159e8 <save_id+0x88>)
   1596c:	6153      	str	r3, [r2, #20]
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   1596e:	4e1f      	ldr	r6, [pc, #124]	; (159ec <save_id+0x8c>)
	LOG_INF("Saving ID");
   15970:	4c1f      	ldr	r4, [pc, #124]	; (159f0 <save_id+0x90>)
   15972:	6194      	str	r4, [r2, #24]
   15974:	2303      	movs	r3, #3
   15976:	f842 3f10 	str.w	r3, [r2, #16]!
   1597a:	481e      	ldr	r0, [pc, #120]	; (159f4 <save_id+0x94>)
   1597c:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   15980:	f01f feaa 	bl	356d8 <z_log_msg_static_create.constprop.0>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   15984:	79f2      	ldrb	r2, [r6, #7]
   15986:	481c      	ldr	r0, [pc, #112]	; (159f8 <save_id+0x98>)
   15988:	46ad      	mov	sp, r5
   1598a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   1598e:	4631      	mov	r1, r6
   15990:	f7fe faa8 	bl	13ee4 <settings_save_one>
	if (err) {
   15994:	b170      	cbz	r0, 159b4 <save_id+0x54>
		LOG_ERR("Failed to save ID (err %d)", err);
   15996:	b088      	sub	sp, #32
   15998:	466a      	mov	r2, sp
   1599a:	4b18      	ldr	r3, [pc, #96]	; (159fc <save_id+0x9c>)
   1599c:	61d0      	str	r0, [r2, #28]
   1599e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   159a2:	2304      	movs	r3, #4
   159a4:	f842 3f10 	str.w	r3, [r2, #16]!
   159a8:	4812      	ldr	r0, [pc, #72]	; (159f4 <save_id+0x94>)
   159aa:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   159ae:	f01f fe93 	bl	356d8 <z_log_msg_static_create.constprop.0>
   159b2:	46ad      	mov	sp, r5
	}

#if defined(CONFIG_BT_PRIVACY)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
   159b4:	79f2      	ldrb	r2, [r6, #7]
   159b6:	4912      	ldr	r1, [pc, #72]	; (15a00 <save_id+0xa0>)
   159b8:	4812      	ldr	r0, [pc, #72]	; (15a04 <save_id+0xa4>)
   159ba:	0112      	lsls	r2, r2, #4
   159bc:	f7fe fa92 	bl	13ee4 <settings_save_one>
	if (err) {
   159c0:	b178      	cbz	r0, 159e2 <save_id+0x82>
		LOG_ERR("Failed to save IRK (err %d)", err);
   159c2:	466d      	mov	r5, sp
   159c4:	b088      	sub	sp, #32
   159c6:	466a      	mov	r2, sp
   159c8:	4b0f      	ldr	r3, [pc, #60]	; (15a08 <save_id+0xa8>)
   159ca:	61d0      	str	r0, [r2, #28]
   159cc:	e9c2 3405 	strd	r3, r4, [r2, #20]
   159d0:	2304      	movs	r3, #4
   159d2:	f842 3f10 	str.w	r3, [r2, #16]!
   159d6:	4807      	ldr	r0, [pc, #28]	; (159f4 <save_id+0x94>)
   159d8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   159dc:	f01f fe7c 	bl	356d8 <z_log_msg_static_create.constprop.0>
   159e0:	46ad      	mov	sp, r5
	}
#endif
}
   159e2:	46bd      	mov	sp, r7
   159e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   159e6:	bf00      	nop
   159e8:	0003c179 	.word	0x0003c179
   159ec:	20000000 	.word	0x20000000
   159f0:	0003c37a 	.word	0x0003c37a
   159f4:	000395f0 	.word	0x000395f0
   159f8:	0003c187 	.word	0x0003c187
   159fc:	0003c18d 	.word	0x0003c18d
   15a00:	20000158 	.word	0x20000158
   15a04:	0003c1ac 	.word	0x0003c1ac
   15a08:	0003c1b3 	.word	0x0003c1b3

00015a0c <set_setting>:
{
   15a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15a10:	4c59      	ldr	r4, [pc, #356]	; (15b78 <set_setting+0x16c>)
   15a12:	b082      	sub	sp, #8
   15a14:	f3bf 8f5b 	dmb	ish
   15a18:	4698      	mov	r8, r3
   15a1a:	6823      	ldr	r3, [r4, #0]
   15a1c:	f3bf 8f5b 	dmb	ish
   15a20:	4616      	mov	r6, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15a22:	07da      	lsls	r2, r3, #31
{
   15a24:	af00      	add	r7, sp, #0
   15a26:	4605      	mov	r5, r0
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15a28:	d537      	bpl.n	15a9a <set_setting+0x8e>
	if (!name) {
   15a2a:	b990      	cbnz	r0, 15a52 <set_setting+0x46>
		LOG_ERR("Insufficient number of arguments");
   15a2c:	466c      	mov	r4, sp
   15a2e:	b088      	sub	sp, #32
   15a30:	466a      	mov	r2, sp
   15a32:	4b52      	ldr	r3, [pc, #328]	; (15b7c <set_setting+0x170>)
   15a34:	6153      	str	r3, [r2, #20]
   15a36:	4b52      	ldr	r3, [pc, #328]	; (15b80 <set_setting+0x174>)
   15a38:	6193      	str	r3, [r2, #24]
   15a3a:	2303      	movs	r3, #3
   15a3c:	f842 3f10 	str.w	r3, [r2, #16]!
   15a40:	4850      	ldr	r0, [pc, #320]	; (15b84 <set_setting+0x178>)
   15a42:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15a46:	f01f fe47 	bl	356d8 <z_log_msg_static_create.constprop.0>
   15a4a:	46a5      	mov	sp, r4
		return -ENOENT;
   15a4c:	f06f 0001 	mvn.w	r0, #1
   15a50:	e024      	b.n	15a9c <set_setting+0x90>
	len = settings_name_next(name, &next);
   15a52:	1d39      	adds	r1, r7, #4
   15a54:	f01e faae 	bl	33fb4 <settings_name_next>
	if (!strncmp(name, "id", len)) {
   15a58:	494b      	ldr	r1, [pc, #300]	; (15b88 <set_setting+0x17c>)
	len = settings_name_next(name, &next);
   15a5a:	4682      	mov	sl, r0
	if (!strncmp(name, "id", len)) {
   15a5c:	4602      	mov	r2, r0
   15a5e:	4628      	mov	r0, r5
   15a60:	f01f fd45 	bl	354ee <strncmp>
   15a64:	2800      	cmp	r0, #0
   15a66:	d140      	bne.n	15aea <set_setting+0xde>
   15a68:	f3bf 8f5b 	dmb	ish
   15a6c:	6823      	ldr	r3, [r4, #0]
   15a6e:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   15a72:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   15a76:	071b      	lsls	r3, r3, #28
   15a78:	d514      	bpl.n	15aa4 <set_setting+0x98>
			LOG_WRN("Ignoring identities stored in flash");
   15a7a:	466c      	mov	r4, sp
   15a7c:	b088      	sub	sp, #32
   15a7e:	466a      	mov	r2, sp
   15a80:	4b42      	ldr	r3, [pc, #264]	; (15b8c <set_setting+0x180>)
   15a82:	6153      	str	r3, [r2, #20]
   15a84:	4b3e      	ldr	r3, [pc, #248]	; (15b80 <set_setting+0x174>)
   15a86:	6193      	str	r3, [r2, #24]
   15a88:	2303      	movs	r3, #3
   15a8a:	f842 3f10 	str.w	r3, [r2, #16]!
   15a8e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15a92:	483c      	ldr	r0, [pc, #240]	; (15b84 <set_setting+0x178>)
   15a94:	f01f fe20 	bl	356d8 <z_log_msg_static_create.constprop.0>
   15a98:	46a5      	mov	sp, r4
		return 0;
   15a9a:	2000      	movs	r0, #0
}
   15a9c:	3708      	adds	r7, #8
   15a9e:	46bd      	mov	sp, r7
   15aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   15aa4:	3ccc      	subs	r4, #204	; 0xcc
   15aa6:	2207      	movs	r2, #7
   15aa8:	4621      	mov	r1, r4
   15aaa:	4640      	mov	r0, r8
   15aac:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   15aae:	2806      	cmp	r0, #6
   15ab0:	d816      	bhi.n	15ae0 <set_setting+0xd4>
				LOG_ERR("Invalid length ID address in storage");
   15ab2:	466e      	mov	r6, sp
   15ab4:	b088      	sub	sp, #32
   15ab6:	466a      	mov	r2, sp
   15ab8:	4b35      	ldr	r3, [pc, #212]	; (15b90 <set_setting+0x184>)
   15aba:	6153      	str	r3, [r2, #20]
   15abc:	4b30      	ldr	r3, [pc, #192]	; (15b80 <set_setting+0x174>)
   15abe:	6193      	str	r3, [r2, #24]
   15ac0:	2303      	movs	r3, #3
   15ac2:	f842 3f10 	str.w	r3, [r2, #16]!
   15ac6:	482f      	ldr	r0, [pc, #188]	; (15b84 <set_setting+0x178>)
   15ac8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15acc:	f01f fe04 	bl	356d8 <z_log_msg_static_create.constprop.0>
			(void)memset(bt_dev.id_addr, 0,
   15ad0:	2207      	movs	r2, #7
   15ad2:	46b5      	mov	sp, r6
   15ad4:	4629      	mov	r1, r5
   15ad6:	4620      	mov	r0, r4
   15ad8:	f01f fd38 	bl	3554c <memset>
			bt_dev.id_count = 0U;
   15adc:	71e5      	strb	r5, [r4, #7]
   15ade:	e7dc      	b.n	15a9a <set_setting+0x8e>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   15ae0:	2307      	movs	r3, #7
   15ae2:	fbb0 f0f3 	udiv	r0, r0, r3
   15ae6:	71e0      	strb	r0, [r4, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   15ae8:	e7d7      	b.n	15a9a <set_setting+0x8e>
	if (!strncmp(name, "name", len)) {
   15aea:	492a      	ldr	r1, [pc, #168]	; (15b94 <set_setting+0x188>)
   15aec:	4652      	mov	r2, sl
   15aee:	4628      	mov	r0, r5
   15af0:	f01f fcfd 	bl	354ee <strncmp>
   15af4:	4681      	mov	r9, r0
   15af6:	b9c0      	cbnz	r0, 15b2a <set_setting+0x11e>
		len = read_cb(cb_arg, &bt_dev.name, sizeof(bt_dev.name) - 1);
   15af8:	2241      	movs	r2, #65	; 0x41
   15afa:	f104 01ce 	add.w	r1, r4, #206	; 0xce
   15afe:	4640      	mov	r0, r8
   15b00:	47b0      	blx	r6
		if (len < 0) {
   15b02:	1e03      	subs	r3, r0, #0
   15b04:	da0d      	bge.n	15b22 <set_setting+0x116>
			LOG_ERR("Failed to read device name from storage"
   15b06:	466c      	mov	r4, sp
   15b08:	b088      	sub	sp, #32
   15b0a:	466a      	mov	r2, sp
   15b0c:	4922      	ldr	r1, [pc, #136]	; (15b98 <set_setting+0x18c>)
   15b0e:	6151      	str	r1, [r2, #20]
   15b10:	491b      	ldr	r1, [pc, #108]	; (15b80 <set_setting+0x174>)
   15b12:	e9c2 1306 	strd	r1, r3, [r2, #24]
   15b16:	2304      	movs	r3, #4
   15b18:	f842 3f10 	str.w	r3, [r2, #16]!
   15b1c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   15b20:	e7b7      	b.n	15a92 <set_setting+0x86>
			bt_dev.name[len] = '\0';
   15b22:	4423      	add	r3, r4
   15b24:	f883 90ce 	strb.w	r9, [r3, #206]	; 0xce
			LOG_DBG("Name set to %s", bt_dev.name);
   15b28:	e7b7      	b.n	15a9a <set_setting+0x8e>
	if (!strncmp(name, "irk", len)) {
   15b2a:	4628      	mov	r0, r5
   15b2c:	491b      	ldr	r1, [pc, #108]	; (15b9c <set_setting+0x190>)
   15b2e:	4652      	mov	r2, sl
   15b30:	f01f fcdd 	bl	354ee <strncmp>
   15b34:	4605      	mov	r5, r0
   15b36:	2800      	cmp	r0, #0
   15b38:	d188      	bne.n	15a4c <set_setting+0x40>
		len = read_cb(cb_arg, bt_dev.irk, sizeof(bt_dev.irk));
   15b3a:	2210      	movs	r2, #16
   15b3c:	f104 018c 	add.w	r1, r4, #140	; 0x8c
   15b40:	4640      	mov	r0, r8
   15b42:	47b0      	blx	r6
		if (len < sizeof(bt_dev.irk[0])) {
   15b44:	280f      	cmp	r0, #15
   15b46:	d8a8      	bhi.n	15a9a <set_setting+0x8e>
				LOG_ERR("Invalid length IRK in storage");
   15b48:	466e      	mov	r6, sp
   15b4a:	b088      	sub	sp, #32
   15b4c:	466a      	mov	r2, sp
   15b4e:	4b14      	ldr	r3, [pc, #80]	; (15ba0 <set_setting+0x194>)
   15b50:	6153      	str	r3, [r2, #20]
   15b52:	4b0b      	ldr	r3, [pc, #44]	; (15b80 <set_setting+0x174>)
   15b54:	6193      	str	r3, [r2, #24]
   15b56:	2303      	movs	r3, #3
   15b58:	f842 3f10 	str.w	r3, [r2, #16]!
   15b5c:	4809      	ldr	r0, [pc, #36]	; (15b84 <set_setting+0x178>)
   15b5e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15b62:	f01f fdb9 	bl	356d8 <z_log_msg_static_create.constprop.0>
				(void)memset(bt_dev.irk, 0, sizeof(bt_dev.irk));
   15b66:	2210      	movs	r2, #16
   15b68:	46b5      	mov	sp, r6
   15b6a:	4629      	mov	r1, r5
   15b6c:	f104 008c 	add.w	r0, r4, #140	; 0x8c
   15b70:	f01f fcec 	bl	3554c <memset>
   15b74:	e791      	b.n	15a9a <set_setting+0x8e>
   15b76:	bf00      	nop
   15b78:	200000cc 	.word	0x200000cc
   15b7c:	0003c1d3 	.word	0x0003c1d3
   15b80:	0003c35e 	.word	0x0003c35e
   15b84:	000395f0 	.word	0x000395f0
   15b88:	0003b568 	.word	0x0003b568
   15b8c:	0003c1f8 	.word	0x0003c1f8
   15b90:	0003c220 	.word	0x0003c220
   15b94:	0003cae8 	.word	0x0003cae8
   15b98:	0003c249 	.word	0x0003c249
   15b9c:	0003c1af 	.word	0x0003c1af
   15ba0:	0003c27f 	.word	0x0003c27f

00015ba4 <bt_settings_encode_key>:
{
   15ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15ba8:	b088      	sub	sp, #32
		snprintk(path, path_size,
   15baa:	799c      	ldrb	r4, [r3, #6]
{
   15bac:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
   15bb0:	795d      	ldrb	r5, [r3, #5]
   15bb2:	791e      	ldrb	r6, [r3, #4]
   15bb4:	78df      	ldrb	r7, [r3, #3]
   15bb6:	f893 c002 	ldrb.w	ip, [r3, #2]
   15bba:	f893 e001 	ldrb.w	lr, [r3, #1]
   15bbe:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   15bc0:	f1b8 0f00 	cmp.w	r8, #0
   15bc4:	d00e      	beq.n	15be4 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   15bc6:	e9cd 3806 	strd	r3, r8, [sp, #24]
   15bca:	e9cd ce04 	strd	ip, lr, [sp, #16]
   15bce:	4613      	mov	r3, r2
   15bd0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   15bd4:	e9cd 4500 	strd	r4, r5, [sp]
   15bd8:	4a08      	ldr	r2, [pc, #32]	; (15bfc <bt_settings_encode_key+0x58>)
   15bda:	f01d f8d7 	bl	32d8c <snprintk>
}
   15bde:	b008      	add	sp, #32
   15be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   15be4:	e9cd e305 	strd	lr, r3, [sp, #20]
   15be8:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   15bec:	4613      	mov	r3, r2
   15bee:	e9cd 5601 	strd	r5, r6, [sp, #4]
   15bf2:	4a03      	ldr	r2, [pc, #12]	; (15c00 <bt_settings_encode_key+0x5c>)
   15bf4:	9400      	str	r4, [sp, #0]
   15bf6:	f01d f8c9 	bl	32d8c <snprintk>
}
   15bfa:	e7f0      	b.n	15bde <bt_settings_encode_key+0x3a>
   15bfc:	0003c2a1 	.word	0x0003c2a1
   15c00:	0003c2c5 	.word	0x0003c2c5

00015c04 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   15c04:	4801      	ldr	r0, [pc, #4]	; (15c0c <bt_settings_save_id+0x8>)
   15c06:	f01c b903 	b.w	31e10 <k_work_submit>
   15c0a:	bf00      	nop
   15c0c:	2000028c 	.word	0x2000028c

00015c10 <commit_settings>:
}

static int commit_settings(void)
{
   15c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15c14:	4d28      	ldr	r5, [pc, #160]	; (15cb8 <commit_settings+0xa8>)
   15c16:	f3bf 8f5b 	dmb	ish
   15c1a:	682b      	ldr	r3, [r5, #0]
   15c1c:	f3bf 8f5b 	dmb	ish
	int err;

	LOG_DBG("");

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15c20:	f013 0f01 	tst.w	r3, #1
{
   15c24:	af00      	add	r7, sp, #0
   15c26:	462e      	mov	r6, r5
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15c28:	d043      	beq.n	15cb2 <commit_settings+0xa2>
		 */
		return 0;
	}

#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
   15c2a:	f895 30ce 	ldrb.w	r3, [r5, #206]	; 0xce
   15c2e:	f1a5 08cc 	sub.w	r8, r5, #204	; 0xcc
   15c32:	b913      	cbnz	r3, 15c3a <commit_settings+0x2a>
		bt_set_name(CONFIG_BT_DEVICE_NAME);
   15c34:	4821      	ldr	r0, [pc, #132]	; (15cbc <commit_settings+0xac>)
   15c36:	f001 fdb1 	bl	1779c <bt_set_name>
	}
#endif
	if (!bt_dev.id_count) {
   15c3a:	f898 3007 	ldrb.w	r3, [r8, #7]
   15c3e:	b9fb      	cbnz	r3, 15c80 <commit_settings+0x70>
		err = bt_setup_public_id_addr();
   15c40:	f002 fa1e 	bl	18080 <bt_setup_public_id_addr>
		if (err) {
   15c44:	4604      	mov	r4, r0
   15c46:	b198      	cbz	r0, 15c70 <commit_settings+0x60>
	}

	if (!bt_dev.id_count) {
		err = bt_setup_random_id_addr();
		if (err) {
			LOG_ERR("Unable to setup an identity address");
   15c48:	466d      	mov	r5, sp
   15c4a:	b088      	sub	sp, #32
   15c4c:	466a      	mov	r2, sp
   15c4e:	4b1c      	ldr	r3, [pc, #112]	; (15cc0 <commit_settings+0xb0>)
   15c50:	6153      	str	r3, [r2, #20]
   15c52:	4b1c      	ldr	r3, [pc, #112]	; (15cc4 <commit_settings+0xb4>)
   15c54:	6193      	str	r3, [r2, #24]
   15c56:	2303      	movs	r3, #3
   15c58:	f842 3f10 	str.w	r3, [r2, #16]!
   15c5c:	481a      	ldr	r0, [pc, #104]	; (15cc8 <commit_settings+0xb8>)
   15c5e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15c62:	f01f fd39 	bl	356d8 <z_log_msg_static_create.constprop.0>
   15c66:	46ad      	mov	sp, r5
		LOG_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
   15c68:	4620      	mov	r0, r4
   15c6a:	46bd      	mov	sp, r7
   15c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_dev.id_count) {
   15c70:	f898 3007 	ldrb.w	r3, [r8, #7]
   15c74:	b923      	cbnz	r3, 15c80 <commit_settings+0x70>
		err = bt_setup_random_id_addr();
   15c76:	f002 fabf 	bl	181f8 <bt_setup_random_id_addr>
		if (err) {
   15c7a:	4604      	mov	r4, r0
   15c7c:	2800      	cmp	r0, #0
   15c7e:	d1e3      	bne.n	15c48 <commit_settings+0x38>
   15c80:	f3bf 8f5b 	dmb	ish
   15c84:	682b      	ldr	r3, [r5, #0]
   15c86:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15c8a:	075a      	lsls	r2, r3, #29
   15c8c:	d401      	bmi.n	15c92 <commit_settings+0x82>
		bt_finalize_init();
   15c8e:	f001 fc09 	bl	174a4 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15c92:	f3bf 8f5b 	dmb	ish
   15c96:	e856 3f00 	ldrex	r3, [r6]
   15c9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
   15c9e:	e846 2100 	strex	r1, r2, [r6]
   15ca2:	2900      	cmp	r1, #0
   15ca4:	d1f7      	bne.n	15c96 <commit_settings+0x86>
   15ca6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   15caa:	03db      	lsls	r3, r3, #15
   15cac:	d501      	bpl.n	15cb2 <commit_settings+0xa2>
		bt_settings_save_id();
   15cae:	f7ff ffa9 	bl	15c04 <bt_settings_save_id>
		return 0;
   15cb2:	2400      	movs	r4, #0
   15cb4:	e7d8      	b.n	15c68 <commit_settings+0x58>
   15cb6:	bf00      	nop
   15cb8:	200000cc 	.word	0x200000cc
   15cbc:	0003c2e6 	.word	0x0003c2e6
   15cc0:	0003c2fc 	.word	0x0003c2fc
   15cc4:	0003c36a 	.word	0x0003c36a
   15cc8:	000395f0 	.word	0x000395f0

00015ccc <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set_setting, commit_settings, NULL);

int bt_settings_init(void)
{
   15ccc:	b5b0      	push	{r4, r5, r7, lr}
   15cce:	af00      	add	r7, sp, #0
	int err;

	LOG_DBG("");

	err = settings_subsys_init();
   15cd0:	f7fe fa72 	bl	141b8 <settings_subsys_init>
	if (err) {
   15cd4:	4604      	mov	r4, r0
   15cd6:	b180      	cbz	r0, 15cfa <bt_settings_init+0x2e>
		LOG_ERR("settings_subsys_init failed (err %d)", err);
   15cd8:	466d      	mov	r5, sp
   15cda:	b088      	sub	sp, #32
   15cdc:	466a      	mov	r2, sp
   15cde:	4b08      	ldr	r3, [pc, #32]	; (15d00 <bt_settings_init+0x34>)
   15ce0:	6153      	str	r3, [r2, #20]
   15ce2:	4b08      	ldr	r3, [pc, #32]	; (15d04 <bt_settings_init+0x38>)
   15ce4:	e9c2 3006 	strd	r3, r0, [r2, #24]
   15ce8:	2304      	movs	r3, #4
   15cea:	f842 3f10 	str.w	r3, [r2, #16]!
   15cee:	4806      	ldr	r0, [pc, #24]	; (15d08 <bt_settings_init+0x3c>)
   15cf0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   15cf4:	f01f fcf0 	bl	356d8 <z_log_msg_static_create.constprop.0>
   15cf8:	46ad      	mov	sp, r5
		return err;
	}

	return 0;
}
   15cfa:	4620      	mov	r0, r4
   15cfc:	46bd      	mov	sp, r7
   15cfe:	bdb0      	pop	{r4, r5, r7, pc}
   15d00:	0003c324 	.word	0x0003c324
   15d04:	0003c34d 	.word	0x0003c34d
   15d08:	000395f0 	.word	0x000395f0

00015d0c <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   15d0c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
   15d0e:	4d0a      	ldr	r5, [pc, #40]	; (15d38 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   15d10:	4b0a      	ldr	r3, [pc, #40]	; (15d3c <long_wq_init+0x30>)
{
   15d12:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   15d14:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
   15d16:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   15d18:	9302      	str	r3, [sp, #8]
   15d1a:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   15d1c:	f022 fe91 	bl	38a42 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   15d20:	ab02      	add	r3, sp, #8
   15d22:	9300      	str	r3, [sp, #0]
   15d24:	4628      	mov	r0, r5
   15d26:	4906      	ldr	r1, [pc, #24]	; (15d40 <long_wq_init+0x34>)
   15d28:	230a      	movs	r3, #10
   15d2a:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   15d2e:	f01c f875 	bl	31e1c <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   15d32:	4620      	mov	r0, r4
   15d34:	b005      	add	sp, #20
   15d36:	bd30      	pop	{r4, r5, pc}
   15d38:	20001120 	.word	0x20001120
   15d3c:	0003c391 	.word	0x0003c391
   15d40:	20003780 	.word	0x20003780

00015d44 <bt_long_wq_schedule>:
{
   15d44:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   15d46:	4801      	ldr	r0, [pc, #4]	; (15d4c <bt_long_wq_schedule+0x8>)
   15d48:	f01c b8a0 	b.w	31e8c <k_work_schedule_for_queue>
   15d4c:	20001120 	.word	0x20001120

00015d50 <bt_long_wq_reschedule>:
{
   15d50:	4601      	mov	r1, r0
	return k_work_reschedule_for_queue(&bt_long_wq, dwork, timeout);
   15d52:	4801      	ldr	r0, [pc, #4]	; (15d58 <bt_long_wq_reschedule+0x8>)
   15d54:	f01c b8ca 	b.w	31eec <k_work_reschedule_for_queue>
   15d58:	20001120 	.word	0x20001120

00015d5c <bt_long_wq_submit>:
{
   15d5c:	4601      	mov	r1, r0
	return k_work_submit_to_queue(&bt_long_wq, work);
   15d5e:	4801      	ldr	r0, [pc, #4]	; (15d64 <bt_long_wq_submit+0x8>)
   15d60:	f022 be5e 	b.w	38a20 <k_work_submit_to_queue>
   15d64:	20001120 	.word	0x20001120

00015d68 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   15d68:	b430      	push	{r4, r5}
   15d6a:	4603      	mov	r3, r0
   15d6c:	4608      	mov	r0, r1
	switch (src->type) {
   15d6e:	781a      	ldrb	r2, [r3, #0]
   15d70:	2a01      	cmp	r2, #1
   15d72:	d013      	beq.n	15d9c <uuid_to_uuid128+0x34>
   15d74:	2a02      	cmp	r2, #2
   15d76:	d026      	beq.n	15dc6 <uuid_to_uuid128+0x5e>
   15d78:	b972      	cbnz	r2, 15d98 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   15d7a:	4a15      	ldr	r2, [pc, #84]	; (15dd0 <uuid_to_uuid128+0x68>)
   15d7c:	f102 0410 	add.w	r4, r2, #16
   15d80:	f852 5b04 	ldr.w	r5, [r2], #4
   15d84:	f841 5b04 	str.w	r5, [r1], #4
   15d88:	42a2      	cmp	r2, r4
   15d8a:	d1f9      	bne.n	15d80 <uuid_to_uuid128+0x18>
   15d8c:	7812      	ldrb	r2, [r2, #0]
   15d8e:	700a      	strb	r2, [r1, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   15d90:	885b      	ldrh	r3, [r3, #2]
	dst[0] = val;
   15d92:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   15d94:	0a1b      	lsrs	r3, r3, #8
   15d96:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   15d98:	bc30      	pop	{r4, r5}
   15d9a:	4770      	bx	lr
		*dst = uuid128_base;
   15d9c:	4a0c      	ldr	r2, [pc, #48]	; (15dd0 <uuid_to_uuid128+0x68>)
   15d9e:	f102 0410 	add.w	r4, r2, #16
   15da2:	f852 5b04 	ldr.w	r5, [r2], #4
   15da6:	f841 5b04 	str.w	r5, [r1], #4
   15daa:	42a2      	cmp	r2, r4
   15dac:	d1f9      	bne.n	15da2 <uuid_to_uuid128+0x3a>
   15dae:	7812      	ldrb	r2, [r2, #0]
   15db0:	700a      	strb	r2, [r1, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   15db2:	685b      	ldr	r3, [r3, #4]
	dst[0] = val;
   15db4:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   15db6:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   15dba:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   15dbc:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   15dbe:	0a1b      	lsrs	r3, r3, #8
   15dc0:	7382      	strb	r2, [r0, #14]
   15dc2:	7403      	strb	r3, [r0, #16]
}
   15dc4:	e7e8      	b.n	15d98 <uuid_to_uuid128+0x30>
}
   15dc6:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   15dc8:	2211      	movs	r2, #17
   15dca:	4619      	mov	r1, r3
   15dcc:	f01f bbb3 	b.w	35536 <memcpy>
   15dd0:	0003c39a 	.word	0x0003c39a

00015dd4 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   15dd4:	b538      	push	{r3, r4, r5, lr}
   15dd6:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
   15dd8:	4805      	ldr	r0, [pc, #20]	; (15df0 <bt_buf_get_rx+0x1c>)
   15dda:	f021 fddd 	bl	37998 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   15dde:	4604      	mov	r4, r0
   15de0:	b120      	cbz	r0, 15dec <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
   15de2:	2100      	movs	r1, #0
   15de4:	300c      	adds	r0, #12
   15de6:	f021 fdde 	bl	379a6 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   15dea:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   15dec:	4620      	mov	r0, r4
   15dee:	bd38      	pop	{r3, r4, r5, pc}
   15df0:	20000bd8 	.word	0x20000bd8

00015df4 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   15df4:	b510      	push	{r4, lr}
   15df6:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   15df8:	490a      	ldr	r1, [pc, #40]	; (15e24 <bt_buf_get_cmd_complete+0x30>)
{
   15dfa:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   15dfc:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
   15e00:	b920      	cbnz	r0, 15e0c <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   15e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   15e06:	2001      	movs	r0, #1
   15e08:	f7ff bfe4 	b.w	15dd4 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   15e0c:	f021 fdfe 	bl	37a0c <net_buf_ref>
   15e10:	2301      	movs	r3, #1
		buf->len = 0U;
   15e12:	2100      	movs	r1, #0
   15e14:	7603      	strb	r3, [r0, #24]
   15e16:	8201      	strh	r1, [r0, #16]
		buf = net_buf_ref(bt_dev.sent_cmd);
   15e18:	4604      	mov	r4, r0
   15e1a:	300c      	adds	r0, #12
   15e1c:	f021 fdc3 	bl	379a6 <net_buf_simple_reserve>
}
   15e20:	4620      	mov	r0, r4
   15e22:	bd10      	pop	{r4, pc}
   15e24:	20000000 	.word	0x20000000

00015e28 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   15e28:	b570      	push	{r4, r5, r6, lr}
   15e2a:	4604      	mov	r4, r0
	switch (evt) {
   15e2c:	2c0f      	cmp	r4, #15
{
   15e2e:	460d      	mov	r5, r1
   15e30:	4610      	mov	r0, r2
   15e32:	4619      	mov	r1, r3
	switch (evt) {
   15e34:	d805      	bhi.n	15e42 <bt_buf_get_evt+0x1a>
   15e36:	2c0d      	cmp	r4, #13
   15e38:	d90d      	bls.n	15e56 <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   15e3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   15e3e:	f7ff bfd9 	b.w	15df4 <bt_buf_get_cmd_complete>
	switch (evt) {
   15e42:	2c13      	cmp	r4, #19
   15e44:	d107      	bne.n	15e56 <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   15e46:	480c      	ldr	r0, [pc, #48]	; (15e78 <bt_buf_get_evt+0x50>)
   15e48:	f021 fda6 	bl	37998 <net_buf_alloc_fixed>
			if (buf) {
   15e4c:	4604      	mov	r4, r0
   15e4e:	b938      	cbnz	r0, 15e60 <bt_buf_get_evt+0x38>
{
   15e50:	2400      	movs	r4, #0
}
   15e52:	4620      	mov	r0, r4
   15e54:	bd70      	pop	{r4, r5, r6, pc}
   15e56:	4602      	mov	r2, r0
   15e58:	460b      	mov	r3, r1
		if (discardable) {
   15e5a:	b145      	cbz	r5, 15e6e <bt_buf_get_evt+0x46>
   15e5c:	4807      	ldr	r0, [pc, #28]	; (15e7c <bt_buf_get_evt+0x54>)
   15e5e:	e7f3      	b.n	15e48 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   15e60:	2100      	movs	r1, #0
   15e62:	300c      	adds	r0, #12
   15e64:	f021 fd9f 	bl	379a6 <net_buf_simple_reserve>
   15e68:	2301      	movs	r3, #1
   15e6a:	7623      	strb	r3, [r4, #24]
}
   15e6c:	e7f1      	b.n	15e52 <bt_buf_get_evt+0x2a>
}
   15e6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   15e72:	2001      	movs	r0, #1
   15e74:	f7ff bfae 	b.w	15dd4 <bt_buf_get_rx>
   15e78:	20000c04 	.word	0x20000c04
   15e7c:	20000b54 	.word	0x20000b54

00015e80 <ver_str>:
{
   15e80:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
   15e82:	4d0b      	ldr	r5, [pc, #44]	; (15eb0 <ver_str+0x30>)
{
   15e84:	4606      	mov	r6, r0
	const char * const str[] = {
   15e86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   15e88:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
   15e8a:	ac01      	add	r4, sp, #4
   15e8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   15e8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   15e90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   15e92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   15e94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	if (ver < ARRAY_SIZE(str)) {
   15e96:	2e0c      	cmp	r6, #12
	const char * const str[] = {
   15e98:	682b      	ldr	r3, [r5, #0]
   15e9a:	6023      	str	r3, [r4, #0]
		return str[ver];
   15e9c:	bf9b      	ittet	ls
   15e9e:	ab0e      	addls	r3, sp, #56	; 0x38
   15ea0:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
   15ea4:	4803      	ldrhi	r0, [pc, #12]	; (15eb4 <ver_str+0x34>)
		return str[ver];
   15ea6:	f856 0c34 	ldrls.w	r0, [r6, #-52]
}
   15eaa:	b00e      	add	sp, #56	; 0x38
   15eac:	bd70      	pop	{r4, r5, r6, pc}
   15eae:	bf00      	nop
   15eb0:	00039760 	.word	0x00039760
   15eb4:	0003c3ab 	.word	0x0003c3ab

00015eb8 <unpair>:
{
   15eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15eba:	4606      	mov	r6, r0
   15ebc:	460f      	mov	r7, r1
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, addr);
   15ebe:	f003 fc79 	bl	197b4 <bt_conn_lookup_addr_le>
	if (conn) {
   15ec2:	4604      	mov	r4, r0
   15ec4:	b140      	cbz	r0, 15ed8 <unpair+0x20>
		if (conn->type == BT_CONN_TYPE_LE) {
   15ec6:	7883      	ldrb	r3, [r0, #2]
   15ec8:	2b01      	cmp	r3, #1
   15eca:	d024      	beq.n	15f16 <unpair+0x5e>
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   15ecc:	2113      	movs	r1, #19
   15ece:	f020 f86f 	bl	35fb0 <bt_conn_disconnect>
		bt_conn_unref(conn);
   15ed2:	4620      	mov	r0, r4
   15ed4:	f020 f825 	bl	35f22 <bt_conn_unref>
			keys = bt_keys_find_addr(id, addr);
   15ed8:	4639      	mov	r1, r7
   15eda:	4630      	mov	r0, r6
   15edc:	f008 ffd4 	bl	1ee88 <bt_keys_find_addr>
		if (keys) {
   15ee0:	4605      	mov	r5, r0
   15ee2:	bb28      	cbnz	r0, 15f30 <unpair+0x78>
	bt_gatt_clear(id, addr);
   15ee4:	4639      	mov	r1, r7
   15ee6:	4630      	mov	r0, r6
   15ee8:	f006 fe98 	bl	1cc1c <bt_gatt_clear>
	return list->head;
   15eec:	4b14      	ldr	r3, [pc, #80]	; (15f40 <unpair+0x88>)
   15eee:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   15ef0:	b323      	cbz	r3, 15f3c <unpair+0x84>
	return node->next;
   15ef2:	681c      	ldr	r4, [r3, #0]
   15ef4:	b104      	cbz	r4, 15ef8 <unpair+0x40>
   15ef6:	3c0c      	subs	r4, #12
		if (listener->bond_deleted) {
   15ef8:	f853 3c04 	ldr.w	r3, [r3, #-4]
   15efc:	b113      	cbz	r3, 15f04 <unpair+0x4c>
			listener->bond_deleted(id, addr);
   15efe:	4639      	mov	r1, r7
   15f00:	4630      	mov	r0, r6
   15f02:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   15f04:	b1d4      	cbz	r4, 15f3c <unpair+0x84>
   15f06:	4623      	mov	r3, r4
   15f08:	68e4      	ldr	r4, [r4, #12]
   15f0a:	689b      	ldr	r3, [r3, #8]
   15f0c:	b1a4      	cbz	r4, 15f38 <unpair+0x80>
   15f0e:	3c0c      	subs	r4, #12
		if (listener->bond_deleted) {
   15f10:	2b00      	cmp	r3, #0
   15f12:	d1f4      	bne.n	15efe <unpair+0x46>
   15f14:	e7f7      	b.n	15f06 <unpair+0x4e>
			conn->le.keys = NULL;
   15f16:	2300      	movs	r3, #0
			keys = conn->le.keys;
   15f18:	f8d0 50b8 	ldr.w	r5, [r0, #184]	; 0xb8
			conn->le.keys = NULL;
   15f1c:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   15f20:	2113      	movs	r1, #19
   15f22:	f020 f845 	bl	35fb0 <bt_conn_disconnect>
		bt_conn_unref(conn);
   15f26:	4620      	mov	r0, r4
   15f28:	f01f fffb 	bl	35f22 <bt_conn_unref>
		if (!keys) {
   15f2c:	2d00      	cmp	r5, #0
   15f2e:	d0d3      	beq.n	15ed8 <unpair+0x20>
			bt_keys_clear(keys);
   15f30:	4628      	mov	r0, r5
   15f32:	f008 ffd3 	bl	1eedc <bt_keys_clear>
   15f36:	e7d5      	b.n	15ee4 <unpair+0x2c>
		if (listener->bond_deleted) {
   15f38:	2b00      	cmp	r3, #0
   15f3a:	d1e0      	bne.n	15efe <unpair+0x46>
}
   15f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15f3e:	bf00      	nop
   15f40:	20001b70 	.word	0x20001b70

00015f44 <hci_disconn_complete_prio>:
{
   15f44:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   15f46:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15f48:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   15f4c:	781b      	ldrb	r3, [r3, #0]
   15f4e:	b963      	cbnz	r3, 15f6a <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
   15f50:	4620      	mov	r0, r4
   15f52:	f003 f9f5 	bl	19340 <bt_conn_lookup_handle>
	if (!conn) {
   15f56:	4605      	mov	r5, r0
   15f58:	b940      	cbnz	r0, 15f6c <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   15f5a:	4b08      	ldr	r3, [pc, #32]	; (15f7c <hci_disconn_complete_prio+0x38>)
   15f5c:	881a      	ldrh	r2, [r3, #0]
   15f5e:	b922      	cbnz	r2, 15f6a <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   15f60:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   15f64:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   15f68:	8018      	strh	r0, [r3, #0]
}
   15f6a:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   15f6c:	2101      	movs	r1, #1
   15f6e:	f003 f9ef 	bl	19350 <bt_conn_set_state>
	bt_conn_unref(conn);
   15f72:	4628      	mov	r0, r5
}
   15f74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   15f78:	f01f bfd3 	b.w	35f22 <bt_conn_unref>
   15f7c:	20003278 	.word	0x20003278

00015f80 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   15f80:	b510      	push	{r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   15f82:	4c08      	ldr	r4, [pc, #32]	; (15fa4 <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   15f84:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   15f86:	2205      	movs	r2, #5
   15f88:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   15f8c:	f003 fc60 	bl	19850 <bt_conn_lookup_state_le>
		if (!conn) {
   15f90:	b938      	cbnz	r0, 15fa2 <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   15f92:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   15f96:	4904      	ldr	r1, [pc, #16]	; (15fa8 <find_pending_connect.part.0+0x28>)
}
   15f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   15f9c:	2204      	movs	r2, #4
   15f9e:	f003 bc57 	b.w	19850 <bt_conn_lookup_state_le>
}
   15fa2:	bd10      	pop	{r4, pc}
   15fa4:	20000000 	.word	0x20000000
   15fa8:	0003c0a2 	.word	0x0003c0a2

00015fac <hci_data_buf_overflow>:
{
   15fac:	b580      	push	{r7, lr}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   15fae:	68c3      	ldr	r3, [r0, #12]
{
   15fb0:	af00      	add	r7, sp, #0
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   15fb2:	b088      	sub	sp, #32
   15fb4:	781b      	ldrb	r3, [r3, #0]
   15fb6:	466a      	mov	r2, sp
   15fb8:	4907      	ldr	r1, [pc, #28]	; (15fd8 <hci_data_buf_overflow+0x2c>)
   15fba:	6151      	str	r1, [r2, #20]
   15fbc:	4907      	ldr	r1, [pc, #28]	; (15fdc <hci_data_buf_overflow+0x30>)
   15fbe:	4808      	ldr	r0, [pc, #32]	; (15fe0 <hci_data_buf_overflow+0x34>)
   15fc0:	e9c2 1306 	strd	r1, r3, [r2, #24]
   15fc4:	2304      	movs	r3, #4
   15fc6:	f842 3f10 	str.w	r3, [r2, #16]!
   15fca:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   15fce:	f01f fc43 	bl	35858 <z_log_msg_static_create.constprop.0>
}
   15fd2:	46bd      	mov	sp, r7
   15fd4:	bd80      	pop	{r7, pc}
   15fd6:	bf00      	nop
   15fd8:	0003c3b3 	.word	0x0003c3b3
   15fdc:	0003cd90 	.word	0x0003cd90
   15fe0:	000395c0 	.word	0x000395c0

00015fe4 <le_conn_param_neg_reply.part.0>:
static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
   15fe4:	b580      	push	{r7, lr}
   15fe6:	af00      	add	r7, sp, #0
		LOG_ERR("Unable to allocate buffer");
   15fe8:	b088      	sub	sp, #32
   15fea:	466a      	mov	r2, sp
   15fec:	4b06      	ldr	r3, [pc, #24]	; (16008 <le_conn_param_neg_reply.part.0+0x24>)
   15fee:	6153      	str	r3, [r2, #20]
   15ff0:	4b06      	ldr	r3, [pc, #24]	; (1600c <le_conn_param_neg_reply.part.0+0x28>)
   15ff2:	6193      	str	r3, [r2, #24]
   15ff4:	2303      	movs	r3, #3
   15ff6:	f842 3f10 	str.w	r3, [r2, #16]!
   15ffa:	4805      	ldr	r0, [pc, #20]	; (16010 <le_conn_param_neg_reply.part.0+0x2c>)
   15ffc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16000:	f01f fc2a 	bl	35858 <z_log_msg_static_create.constprop.0>
}
   16004:	46bd      	mov	sp, r7
   16006:	bd80      	pop	{r7, pc}
   16008:	0003c3df 	.word	0x0003c3df
   1600c:	0003cc75 	.word	0x0003cc75
   16010:	000395c0 	.word	0x000395c0

00016014 <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   16014:	b5b0      	push	{r4, r5, r7, lr}
   16016:	460b      	mov	r3, r1
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   16018:	8a0d      	ldrh	r5, [r1, #16]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   1601a:	af00      	add	r7, sp, #0
   1601c:	4604      	mov	r4, r0
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   1601e:	4629      	mov	r1, r5
   16020:	68d8      	ldr	r0, [r3, #12]
   16022:	f7ff fa8f 	bl	15544 <bt_hex>
   16026:	b08c      	sub	sp, #48	; 0x30
   16028:	466a      	mov	r2, sp
   1602a:	4b0a      	ldr	r3, [pc, #40]	; (16054 <handle_event.part.0+0x40>)
   1602c:	6153      	str	r3, [r2, #20]
   1602e:	4b0a      	ldr	r3, [pc, #40]	; (16058 <handle_event.part.0+0x44>)
   16030:	e9c2 3406 	strd	r3, r4, [r2, #24]
   16034:	f240 5303 	movw	r3, #1283	; 0x503
   16038:	8513      	strh	r3, [r2, #40]	; 0x28
   1603a:	4b08      	ldr	r3, [pc, #32]	; (1605c <handle_event.part.0+0x48>)
   1603c:	e9c2 5008 	strd	r5, r0, [r2, #32]
   16040:	f44f 5152 	mov.w	r1, #13440	; 0x3480
   16044:	f842 3f10 	str.w	r3, [r2, #16]!
   16048:	4805      	ldr	r0, [pc, #20]	; (16060 <handle_event.part.0+0x4c>)
   1604a:	f01f fc05 	bl	35858 <z_log_msg_static_create.constprop.0>
}
   1604e:	46bd      	mov	sp, r7
   16050:	bdb0      	pop	{r4, r5, r7, pc}
   16052:	bf00      	nop
   16054:	0003c3fd 	.word	0x0003c3fd
   16058:	0003cd76 	.word	0x0003cd76
   1605c:	01000006 	.word	0x01000006
   16060:	000395c0 	.word	0x000395c0

00016064 <hci_hardware_error>:
{
   16064:	b580      	push	{r7, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   16066:	2101      	movs	r1, #1
   16068:	af00      	add	r7, sp, #0
   1606a:	300c      	adds	r0, #12
   1606c:	f021 fd27 	bl	37abe <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   16070:	b088      	sub	sp, #32
   16072:	7803      	ldrb	r3, [r0, #0]
   16074:	466a      	mov	r2, sp
   16076:	4907      	ldr	r1, [pc, #28]	; (16094 <hci_hardware_error+0x30>)
   16078:	6151      	str	r1, [r2, #20]
   1607a:	4907      	ldr	r1, [pc, #28]	; (16098 <hci_hardware_error+0x34>)
   1607c:	4807      	ldr	r0, [pc, #28]	; (1609c <hci_hardware_error+0x38>)
   1607e:	e9c2 1306 	strd	r1, r3, [r2, #24]
   16082:	2304      	movs	r3, #4
   16084:	f842 3f10 	str.w	r3, [r2, #16]!
   16088:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1608c:	f01f fbe4 	bl	35858 <z_log_msg_static_create.constprop.0>
}
   16090:	46bd      	mov	sp, r7
   16092:	bd80      	pop	{r7, pc}
   16094:	0003c423 	.word	0x0003c423
   16098:	0003cd3f 	.word	0x0003cd3f
   1609c:	000395c0 	.word	0x000395c0

000160a0 <le_data_len_change>:
{
   160a0:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   160a2:	68c3      	ldr	r3, [r0, #12]
   160a4:	881c      	ldrh	r4, [r3, #0]
{
   160a6:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   160a8:	4620      	mov	r0, r4
   160aa:	f003 f949 	bl	19340 <bt_conn_lookup_handle>
	if (!conn) {
   160ae:	b990      	cbnz	r0, 160d6 <le_data_len_change+0x36>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   160b0:	466d      	mov	r5, sp
   160b2:	b088      	sub	sp, #32
   160b4:	466a      	mov	r2, sp
   160b6:	4b09      	ldr	r3, [pc, #36]	; (160dc <le_data_len_change+0x3c>)
   160b8:	6153      	str	r3, [r2, #20]
   160ba:	4b09      	ldr	r3, [pc, #36]	; (160e0 <le_data_len_change+0x40>)
   160bc:	4809      	ldr	r0, [pc, #36]	; (160e4 <le_data_len_change+0x44>)
   160be:	e9c2 3406 	strd	r3, r4, [r2, #24]
   160c2:	2304      	movs	r3, #4
   160c4:	f842 3f10 	str.w	r3, [r2, #16]!
   160c8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   160cc:	f01f fbc4 	bl	35858 <z_log_msg_static_create.constprop.0>
   160d0:	46ad      	mov	sp, r5
}
   160d2:	46bd      	mov	sp, r7
   160d4:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   160d6:	f01f ff24 	bl	35f22 <bt_conn_unref>
   160da:	e7fa      	b.n	160d2 <le_data_len_change+0x32>
   160dc:	0003c449 	.word	0x0003c449
   160e0:	0003cc9f 	.word	0x0003cc9f
   160e4:	000395c0 	.word	0x000395c0

000160e8 <le_phy_update_complete>:
{
   160e8:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   160ea:	68c3      	ldr	r3, [r0, #12]
   160ec:	f8b3 4001 	ldrh.w	r4, [r3, #1]
{
   160f0:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   160f2:	4620      	mov	r0, r4
   160f4:	f003 f924 	bl	19340 <bt_conn_lookup_handle>
	if (!conn) {
   160f8:	b990      	cbnz	r0, 16120 <le_phy_update_complete+0x38>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   160fa:	466d      	mov	r5, sp
   160fc:	b088      	sub	sp, #32
   160fe:	466a      	mov	r2, sp
   16100:	4b09      	ldr	r3, [pc, #36]	; (16128 <le_phy_update_complete+0x40>)
   16102:	6153      	str	r3, [r2, #20]
   16104:	4b09      	ldr	r3, [pc, #36]	; (1612c <le_phy_update_complete+0x44>)
   16106:	480a      	ldr	r0, [pc, #40]	; (16130 <le_phy_update_complete+0x48>)
   16108:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1610c:	2304      	movs	r3, #4
   1610e:	f842 3f10 	str.w	r3, [r2, #16]!
   16112:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   16116:	f01f fb9f 	bl	35858 <z_log_msg_static_create.constprop.0>
   1611a:	46ad      	mov	sp, r5
}
   1611c:	46bd      	mov	sp, r7
   1611e:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   16120:	f01f feff 	bl	35f22 <bt_conn_unref>
   16124:	e7fa      	b.n	1611c <le_phy_update_complete+0x34>
   16126:	bf00      	nop
   16128:	0003c449 	.word	0x0003c449
   1612c:	0003ccb2 	.word	0x0003ccb2
   16130:	000395c0 	.word	0x000395c0

00016134 <hci_disconn_complete>:
{
   16134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   16138:	68c5      	ldr	r5, [r0, #12]
	if (evt->status) {
   1613a:	782e      	ldrb	r6, [r5, #0]
{
   1613c:	af00      	add	r7, sp, #0
	if (evt->status) {
   1613e:	b9be      	cbnz	r6, 16170 <hci_disconn_complete+0x3c>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16140:	f8b5 8001 	ldrh.w	r8, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   16144:	4640      	mov	r0, r8
   16146:	f003 f8fb 	bl	19340 <bt_conn_lookup_handle>
	if (!conn) {
   1614a:	4604      	mov	r4, r0
   1614c:	b998      	cbnz	r0, 16176 <hci_disconn_complete+0x42>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   1614e:	466c      	mov	r4, sp
   16150:	b088      	sub	sp, #32
   16152:	466a      	mov	r2, sp
   16154:	4b0c      	ldr	r3, [pc, #48]	; (16188 <hci_disconn_complete+0x54>)
   16156:	6153      	str	r3, [r2, #20]
   16158:	4b0c      	ldr	r3, [pc, #48]	; (1618c <hci_disconn_complete+0x58>)
   1615a:	480d      	ldr	r0, [pc, #52]	; (16190 <hci_disconn_complete+0x5c>)
   1615c:	e9c2 3806 	strd	r3, r8, [r2, #24]
   16160:	2304      	movs	r3, #4
   16162:	f842 3f10 	str.w	r3, [r2, #16]!
   16166:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1616a:	f01f fb75 	bl	35858 <z_log_msg_static_create.constprop.0>
   1616e:	46a5      	mov	sp, r4
}
   16170:	46bd      	mov	sp, r7
   16172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
   16176:	78eb      	ldrb	r3, [r5, #3]
   16178:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1617a:	4631      	mov	r1, r6
   1617c:	f003 f8e8 	bl	19350 <bt_conn_set_state>
		bt_conn_unref(conn);
   16180:	4620      	mov	r0, r4
	bt_conn_unref(conn);
   16182:	f01f fece 	bl	35f22 <bt_conn_unref>
   16186:	e7f3      	b.n	16170 <hci_disconn_complete+0x3c>
   16188:	0003c471 	.word	0x0003c471
   1618c:	0003ccf6 	.word	0x0003ccf6
   16190:	000395c0 	.word	0x000395c0

00016194 <handle_event>:
{
   16194:	b5b0      	push	{r4, r5, r7, lr}
   16196:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1619a:	af00      	add	r7, sp, #0
   1619c:	4604      	mov	r4, r0
	for (i = 0; i < num_handlers; i++) {
   1619e:	4293      	cmp	r3, r2
   161a0:	d103      	bne.n	161aa <handle_event+0x16>
	if (err == -EOPNOTSUPP) {
   161a2:	4620      	mov	r0, r4
   161a4:	f7ff ff36 	bl	16014 <handle_event.part.0>
}
   161a8:	e01a      	b.n	161e0 <handle_event+0x4c>
		if (handler->event != event) {
   161aa:	4610      	mov	r0, r2
   161ac:	f810 5b08 	ldrb.w	r5, [r0], #8
   161b0:	42a5      	cmp	r5, r4
   161b2:	d11b      	bne.n	161ec <handle_event+0x58>
		if (buf->len < handler->min_len) {
   161b4:	8a0b      	ldrh	r3, [r1, #16]
   161b6:	7850      	ldrb	r0, [r2, #1]
   161b8:	4298      	cmp	r0, r3
   161ba:	d913      	bls.n	161e4 <handle_event+0x50>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   161bc:	466d      	mov	r5, sp
   161be:	b08a      	sub	sp, #40	; 0x28
   161c0:	466a      	mov	r2, sp
   161c2:	490b      	ldr	r1, [pc, #44]	; (161f0 <handle_event+0x5c>)
   161c4:	6151      	str	r1, [r2, #20]
   161c6:	490b      	ldr	r1, [pc, #44]	; (161f4 <handle_event+0x60>)
   161c8:	6214      	str	r4, [r2, #32]
   161ca:	e9c2 1306 	strd	r1, r3, [r2, #24]
   161ce:	2305      	movs	r3, #5
   161d0:	f842 3f10 	str.w	r3, [r2, #16]!
   161d4:	4808      	ldr	r0, [pc, #32]	; (161f8 <handle_event+0x64>)
   161d6:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   161da:	f01f fb3d 	bl	35858 <z_log_msg_static_create.constprop.0>
   161de:	46ad      	mov	sp, r5
}
   161e0:	46bd      	mov	sp, r7
   161e2:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
   161e4:	6853      	ldr	r3, [r2, #4]
   161e6:	4608      	mov	r0, r1
   161e8:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
   161ea:	e7f9      	b.n	161e0 <handle_event+0x4c>
   161ec:	4602      	mov	r2, r0
   161ee:	e7d6      	b.n	1619e <handle_event+0xa>
   161f0:	0003c49b 	.word	0x0003c49b
   161f4:	0003cd62 	.word	0x0003cd62
   161f8:	000395c0 	.word	0x000395c0

000161fc <hci_le_meta_event>:
{
   161fc:	b510      	push	{r4, lr}
   161fe:	2101      	movs	r1, #1
   16200:	4604      	mov	r4, r0
   16202:	300c      	adds	r0, #12
   16204:	f021 fc5b 	bl	37abe <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   16208:	4621      	mov	r1, r4
   1620a:	4a03      	ldr	r2, [pc, #12]	; (16218 <hci_le_meta_event+0x1c>)
   1620c:	7800      	ldrb	r0, [r0, #0]
}
   1620e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   16212:	230a      	movs	r3, #10
   16214:	f7ff bfbe 	b.w	16194 <handle_event>
   16218:	00039bfc 	.word	0x00039bfc

0001621c <le_remote_feat_complete>:
{
   1621c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1621e:	68c5      	ldr	r5, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16220:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   16224:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   16226:	4630      	mov	r0, r6
   16228:	f003 f88a 	bl	19340 <bt_conn_lookup_handle>
	if (!conn) {
   1622c:	4604      	mov	r4, r0
   1622e:	b990      	cbnz	r0, 16256 <le_remote_feat_complete+0x3a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   16230:	466c      	mov	r4, sp
   16232:	b088      	sub	sp, #32
   16234:	466a      	mov	r2, sp
   16236:	4b10      	ldr	r3, [pc, #64]	; (16278 <le_remote_feat_complete+0x5c>)
   16238:	6153      	str	r3, [r2, #20]
   1623a:	4b10      	ldr	r3, [pc, #64]	; (1627c <le_remote_feat_complete+0x60>)
   1623c:	4810      	ldr	r0, [pc, #64]	; (16280 <le_remote_feat_complete+0x64>)
   1623e:	e9c2 3606 	strd	r3, r6, [r2, #24]
   16242:	2304      	movs	r3, #4
   16244:	f842 3f10 	str.w	r3, [r2, #16]!
   16248:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1624c:	f01f fb04 	bl	35858 <z_log_msg_static_create.constprop.0>
   16250:	46a5      	mov	sp, r4
}
   16252:	46bd      	mov	sp, r7
   16254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
   16256:	782b      	ldrb	r3, [r5, #0]
   16258:	b923      	cbnz	r3, 16264 <le_remote_feat_complete+0x48>
		memcpy(conn->le.features, evt->features,
   1625a:	2208      	movs	r2, #8
   1625c:	1ce9      	adds	r1, r5, #3
   1625e:	30ad      	adds	r0, #173	; 0xad
   16260:	f01f f969 	bl	35536 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16264:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   16268:	1d20      	adds	r0, r4, #4
   1626a:	f01f fae1 	bl	35830 <atomic_or>
	bt_conn_unref(conn);
   1626e:	4620      	mov	r0, r4
   16270:	f01f fe57 	bl	35f22 <bt_conn_unref>
   16274:	e7ed      	b.n	16252 <le_remote_feat_complete+0x36>
   16276:	bf00      	nop
   16278:	0003c449 	.word	0x0003c449
   1627c:	0003cc5d 	.word	0x0003cc5d
   16280:	000395c0 	.word	0x000395c0

00016284 <hci_cmd_done>:
{
   16284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16288:	4606      	mov	r6, r0
   1628a:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   1628c:	7a90      	ldrb	r0, [r2, #10]
   1628e:	4d45      	ldr	r5, [pc, #276]	; (163a4 <hci_cmd_done+0x120>)
{
   16290:	4688      	mov	r8, r1
   16292:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   16294:	f017 fa22 	bl	2d6dc <net_buf_pool_get>
   16298:	4285      	cmp	r5, r0
   1629a:	d01a      	beq.n	162d2 <hci_cmd_done+0x4e>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   1629c:	7aa4      	ldrb	r4, [r4, #10]
   1629e:	4620      	mov	r0, r4
   162a0:	f017 fa1c 	bl	2d6dc <net_buf_pool_get>
   162a4:	46e8      	mov	r8, sp
   162a6:	b08c      	sub	sp, #48	; 0x30
   162a8:	466a      	mov	r2, sp
   162aa:	4b3f      	ldr	r3, [pc, #252]	; (163a8 <hci_cmd_done+0x124>)
   162ac:	6153      	str	r3, [r2, #20]
   162ae:	4b3f      	ldr	r3, [pc, #252]	; (163ac <hci_cmd_done+0x128>)
   162b0:	6295      	str	r5, [r2, #40]	; 0x28
   162b2:	e9c2 3606 	strd	r3, r6, [r2, #24]
   162b6:	2307      	movs	r3, #7
   162b8:	e9c2 4008 	strd	r4, r0, [r2, #32]
   162bc:	f44f 5162 	mov.w	r1, #14464	; 0x3880
   162c0:	f842 3f10 	str.w	r3, [r2, #16]!
   162c4:	483a      	ldr	r0, [pc, #232]	; (163b0 <hci_cmd_done+0x12c>)
   162c6:	f01f fac7 	bl	35858 <z_log_msg_static_create.constprop.0>
   162ca:	46c5      	mov	sp, r8
}
   162cc:	46bd      	mov	sp, r7
   162ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   162d2:	4620      	mov	r0, r4
   162d4:	f017 fa0a 	bl	2d6ec <net_buf_id>
   162d8:	4d36      	ldr	r5, [pc, #216]	; (163b4 <hci_cmd_done+0x130>)
   162da:	f04f 090c 	mov.w	r9, #12
   162de:	fb09 5000 	mla	r0, r9, r0, r5
   162e2:	8843      	ldrh	r3, [r0, #2]
   162e4:	42b3      	cmp	r3, r6
   162e6:	d018      	beq.n	1631a <hci_cmd_done+0x96>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   162e8:	4620      	mov	r0, r4
   162ea:	f017 f9ff 	bl	2d6ec <net_buf_id>
   162ee:	fb09 5000 	mla	r0, r9, r0, r5
   162f2:	466c      	mov	r4, sp
   162f4:	b08a      	sub	sp, #40	; 0x28
   162f6:	8843      	ldrh	r3, [r0, #2]
   162f8:	466a      	mov	r2, sp
   162fa:	492f      	ldr	r1, [pc, #188]	; (163b8 <hci_cmd_done+0x134>)
   162fc:	6151      	str	r1, [r2, #20]
   162fe:	492b      	ldr	r1, [pc, #172]	; (163ac <hci_cmd_done+0x128>)
   16300:	6213      	str	r3, [r2, #32]
   16302:	2305      	movs	r3, #5
   16304:	e9c2 1606 	strd	r1, r6, [r2, #24]
   16308:	4829      	ldr	r0, [pc, #164]	; (163b0 <hci_cmd_done+0x12c>)
   1630a:	f842 3f10 	str.w	r3, [r2, #16]!
   1630e:	f44f 5122 	mov.w	r1, #10368	; 0x2880
   16312:	f01f faa1 	bl	35858 <z_log_msg_static_create.constprop.0>
   16316:	46a5      	mov	sp, r4
		return;
   16318:	e7d8      	b.n	162cc <hci_cmd_done+0x48>
	if (bt_dev.sent_cmd) {
   1631a:	4e28      	ldr	r6, [pc, #160]	; (163bc <hci_cmd_done+0x138>)
   1631c:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   16320:	b120      	cbz	r0, 1632c <hci_cmd_done+0xa8>
		net_buf_unref(bt_dev.sent_cmd);
   16322:	f017 fa9d 	bl	2d860 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   16326:	2300      	movs	r3, #0
   16328:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   1632c:	4620      	mov	r0, r4
   1632e:	f017 f9dd 	bl	2d6ec <net_buf_id>
   16332:	260c      	movs	r6, #12
   16334:	fb06 5000 	mla	r0, r6, r0, r5
   16338:	6843      	ldr	r3, [r0, #4]
   1633a:	b1ab      	cbz	r3, 16368 <hci_cmd_done+0xe4>
   1633c:	f1b8 0f00 	cmp.w	r8, #0
   16340:	d112      	bne.n	16368 <hci_cmd_done+0xe4>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   16342:	4620      	mov	r0, r4
   16344:	f017 f9d2 	bl	2d6ec <net_buf_id>
   16348:	fb06 5000 	mla	r0, r6, r0, r5
	atomic_val_t mask = ATOMIC_MASK(bit);
   1634c:	2101      	movs	r1, #1
   1634e:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   16350:	e9d2 0300 	ldrd	r0, r3, [r2]
	if (val) {
   16354:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   16356:	f003 061f 	and.w	r6, r3, #31
   1635a:	40b1      	lsls	r1, r6
	if (val) {
   1635c:	095b      	lsrs	r3, r3, #5
   1635e:	b1da      	cbz	r2, 16398 <hci_cmd_done+0x114>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16360:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   16364:	f01f fa64 	bl	35830 <atomic_or>
	if (cmd(buf)->sync) {
   16368:	4620      	mov	r0, r4
   1636a:	f017 f9bf 	bl	2d6ec <net_buf_id>
   1636e:	260c      	movs	r6, #12
   16370:	fb06 5000 	mla	r0, r6, r0, r5
   16374:	6883      	ldr	r3, [r0, #8]
   16376:	2b00      	cmp	r3, #0
   16378:	d0a8      	beq.n	162cc <hci_cmd_done+0x48>
		cmd(buf)->status = status;
   1637a:	4620      	mov	r0, r4
   1637c:	f017 f9b6 	bl	2d6ec <net_buf_id>
   16380:	4370      	muls	r0, r6
   16382:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   16386:	4620      	mov	r0, r4
   16388:	f017 f9b0 	bl	2d6ec <net_buf_id>
   1638c:	fb06 5500 	mla	r5, r6, r0, r5
   16390:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   16392:	f01b fb9f 	bl	31ad4 <z_impl_k_sem_give>
}
   16396:	e799      	b.n	162cc <hci_cmd_done+0x48>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16398:	43c9      	mvns	r1, r1
   1639a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1639e:	f01f fa5e 	bl	3585e <atomic_and.isra.0>
   163a2:	e7e1      	b.n	16368 <hci_cmd_done+0xe4>
   163a4:	20000bac 	.word	0x20000bac
   163a8:	0003c4c1 	.word	0x0003c4c1
   163ac:	0003cd83 	.word	0x0003cd83
   163b0:	000395c0 	.word	0x000395c0
   163b4:	20001b14 	.word	0x20001b14
   163b8:	0003c4fa 	.word	0x0003c4fa
   163bc:	20000000 	.word	0x20000000

000163c0 <hci_cmd_status>:
{
   163c0:	b538      	push	{r3, r4, r5, lr}
   163c2:	2104      	movs	r1, #4
   163c4:	4604      	mov	r4, r0
   163c6:	300c      	adds	r0, #12
   163c8:	f021 fb79 	bl	37abe <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   163cc:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   163ce:	7801      	ldrb	r1, [r0, #0]
   163d0:	8840      	ldrh	r0, [r0, #2]
   163d2:	4622      	mov	r2, r4
   163d4:	f7ff ff56 	bl	16284 <hci_cmd_done>
	if (ncmd) {
   163d8:	b125      	cbz	r5, 163e4 <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
   163da:	4803      	ldr	r0, [pc, #12]	; (163e8 <hci_cmd_status+0x28>)
}
   163dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   163e0:	f01b bb78 	b.w	31ad4 <z_impl_k_sem_give>
   163e4:	bd38      	pop	{r3, r4, r5, pc}
   163e6:	bf00      	nop
   163e8:	20000120 	.word	0x20000120

000163ec <hci_cmd_complete>:
{
   163ec:	b538      	push	{r3, r4, r5, lr}
   163ee:	2103      	movs	r1, #3
   163f0:	4604      	mov	r4, r0
   163f2:	300c      	adds	r0, #12
   163f4:	f021 fb63 	bl	37abe <net_buf_simple_pull_mem>
	status = buf->data[0];
   163f8:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   163fa:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   163fc:	7819      	ldrb	r1, [r3, #0]
   163fe:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   16402:	4622      	mov	r2, r4
   16404:	f7ff ff3e 	bl	16284 <hci_cmd_done>
	if (ncmd) {
   16408:	b125      	cbz	r5, 16414 <hci_cmd_complete+0x28>
   1640a:	4803      	ldr	r0, [pc, #12]	; (16418 <hci_cmd_complete+0x2c>)
}
   1640c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   16410:	f01b bb60 	b.w	31ad4 <z_impl_k_sem_give>
   16414:	bd38      	pop	{r3, r4, r5, pc}
   16416:	bf00      	nop
   16418:	20000120 	.word	0x20000120

0001641c <hci_tx_thread>:
{
   1641c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   16420:	f8df 816c 	ldr.w	r8, [pc, #364]	; 16590 <hci_tx_thread+0x174>
		BT_ASSERT(err == 0);
   16424:	f8df 916c 	ldr.w	r9, [pc, #364]	; 16594 <hci_tx_thread+0x178>
{
   16428:	b083      	sub	sp, #12
			ev_count += bt_conn_prepare_events(&events[1]);
   1642a:	f108 0a14 	add.w	sl, r8, #20
{
   1642e:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
   16430:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   16434:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
   16436:	f36f 3394 	bfc	r3, #14, #7
   1643a:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1643e:	f002 ff39 	bl	192b4 <bt_conn_prepare_events>
   16442:	1c45      	adds	r5, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   16444:	4852      	ldr	r0, [pc, #328]	; (16590 <hci_tx_thread+0x174>)
   16446:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1644a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1644e:	4629      	mov	r1, r5
   16450:	f01c faea 	bl	32a28 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   16454:	b160      	cbz	r0, 16470 <hci_tx_thread+0x54>
   16456:	4950      	ldr	r1, [pc, #320]	; (16598 <hci_tx_thread+0x17c>)
   16458:	4850      	ldr	r0, [pc, #320]	; (1659c <hci_tx_thread+0x180>)
   1645a:	f640 13ee 	movw	r3, #2542	; 0x9ee
   1645e:	464a      	mov	r2, r9
   16460:	f01c ffda 	bl	33418 <assert_print>
   16464:	4040      	eors	r0, r0
   16466:	f380 8811 	msr	BASEPRI, r0
   1646a:	f04f 0003 	mov.w	r0, #3
   1646e:	df02      	svc	2
{
   16470:	4e47      	ldr	r6, [pc, #284]	; (16590 <hci_tx_thread+0x174>)
	for (; count; ev++, count--) {
   16472:	b915      	cbnz	r5, 1647a <hci_tx_thread+0x5e>
	z_impl_k_yield();
   16474:	f01b ffb4 	bl	323e0 <z_impl_k_yield>
	while (1) {
   16478:	e7da      	b.n	16430 <hci_tx_thread+0x14>
		switch (ev->state) {
   1647a:	68f3      	ldr	r3, [r6, #12]
   1647c:	f3c3 3386 	ubfx	r3, r3, #14, #7
   16480:	2b02      	cmp	r3, #2
   16482:	d969      	bls.n	16558 <hci_tx_thread+0x13c>
   16484:	2b04      	cmp	r3, #4
   16486:	d171      	bne.n	1656c <hci_tx_thread+0x150>
			if (ev->tag == BT_EVENT_CMD_TX) {
   16488:	7b33      	ldrb	r3, [r6, #12]
   1648a:	2b00      	cmp	r3, #0
   1648c:	d167      	bne.n	1655e <hci_tx_thread+0x142>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   1648e:	4844      	ldr	r0, [pc, #272]	; (165a0 <hci_tx_thread+0x184>)
   16490:	2200      	movs	r2, #0
   16492:	2300      	movs	r3, #0
   16494:	f021 fa85 	bl	379a2 <net_buf_get>
	BT_ASSERT(buf);
   16498:	4604      	mov	r4, r0
   1649a:	b960      	cbnz	r0, 164b6 <hci_tx_thread+0x9a>
   1649c:	4941      	ldr	r1, [pc, #260]	; (165a4 <hci_tx_thread+0x188>)
   1649e:	483f      	ldr	r0, [pc, #252]	; (1659c <hci_tx_thread+0x180>)
   164a0:	f44f 6318 	mov.w	r3, #2432	; 0x980
   164a4:	464a      	mov	r2, r9
   164a6:	f01c ffb7 	bl	33418 <assert_print>
   164aa:	4040      	eors	r0, r0
   164ac:	f380 8811 	msr	BASEPRI, r0
   164b0:	f04f 0003 	mov.w	r0, #3
   164b4:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   164b6:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 165a8 <hci_tx_thread+0x18c>
	return z_impl_k_sem_take(sem, timeout);
   164ba:	483c      	ldr	r0, [pc, #240]	; (165ac <hci_tx_thread+0x190>)
   164bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   164c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   164c4:	f01b fb2c 	bl	31b20 <z_impl_k_sem_take>
   164c8:	f8db 2138 	ldr.w	r2, [fp, #312]	; 0x138
   164cc:	b1c2      	cbz	r2, 16500 <hci_tx_thread+0xe4>
		LOG_ERR("Uncleared pending sent_cmd");
   164ce:	f8c7 d004 	str.w	sp, [r7, #4]
   164d2:	b088      	sub	sp, #32
   164d4:	466a      	mov	r2, sp
   164d6:	4936      	ldr	r1, [pc, #216]	; (165b0 <hci_tx_thread+0x194>)
   164d8:	6151      	str	r1, [r2, #20]
   164da:	4936      	ldr	r1, [pc, #216]	; (165b4 <hci_tx_thread+0x198>)
   164dc:	6191      	str	r1, [r2, #24]
   164de:	2103      	movs	r1, #3
   164e0:	f842 1f10 	str.w	r1, [r2, #16]!
   164e4:	4834      	ldr	r0, [pc, #208]	; (165b8 <hci_tx_thread+0x19c>)
   164e6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   164ea:	f01f f9b5 	bl	35858 <z_log_msg_static_create.constprop.0>
   164ee:	f8d7 d004 	ldr.w	sp, [r7, #4]
		net_buf_unref(bt_dev.sent_cmd);
   164f2:	f8db 0138 	ldr.w	r0, [fp, #312]	; 0x138
   164f6:	f017 f9b3 	bl	2d860 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   164fa:	2200      	movs	r2, #0
   164fc:	f8cb 2138 	str.w	r2, [fp, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   16500:	4620      	mov	r0, r4
   16502:	f021 fa83 	bl	37a0c <net_buf_ref>
   16506:	f8cb 0138 	str.w	r0, [fp, #312]	; 0x138
		return bt_hci_ecc_send(buf);
   1650a:	4620      	mov	r0, r4
   1650c:	f7ff f9ba 	bl	15884 <bt_hci_ecc_send>
	if (err) {
   16510:	b310      	cbz	r0, 16558 <hci_tx_thread+0x13c>
		LOG_ERR("Unable to send to driver (err %d)", err);
   16512:	46eb      	mov	fp, sp
   16514:	b088      	sub	sp, #32
   16516:	466a      	mov	r2, sp
   16518:	4b28      	ldr	r3, [pc, #160]	; (165bc <hci_tx_thread+0x1a0>)
   1651a:	6153      	str	r3, [r2, #20]
   1651c:	4b25      	ldr	r3, [pc, #148]	; (165b4 <hci_tx_thread+0x198>)
   1651e:	e9c2 3006 	strd	r3, r0, [r2, #24]
   16522:	2304      	movs	r3, #4
   16524:	f842 3f10 	str.w	r3, [r2, #16]!
   16528:	4823      	ldr	r0, [pc, #140]	; (165b8 <hci_tx_thread+0x19c>)
   1652a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1652e:	f01f f993 	bl	35858 <z_log_msg_static_create.constprop.0>
   16532:	46dd      	mov	sp, fp
	z_impl_k_sem_give(sem);
   16534:	481d      	ldr	r0, [pc, #116]	; (165ac <hci_tx_thread+0x190>)
   16536:	f01b facd 	bl	31ad4 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   1653a:	4620      	mov	r0, r4
   1653c:	f017 f8d6 	bl	2d6ec <net_buf_id>
   16540:	4b1f      	ldr	r3, [pc, #124]	; (165c0 <hci_tx_thread+0x1a4>)
   16542:	220c      	movs	r2, #12
   16544:	fb02 3000 	mla	r0, r2, r0, r3
   16548:	211f      	movs	r1, #31
   1654a:	8840      	ldrh	r0, [r0, #2]
   1654c:	4622      	mov	r2, r4
   1654e:	f7ff fe99 	bl	16284 <hci_cmd_done>
		net_buf_unref(buf);
   16552:	4620      	mov	r0, r4
   16554:	f017 f984 	bl	2d860 <net_buf_unref>
	for (; count; ev++, count--) {
   16558:	3614      	adds	r6, #20
   1655a:	3d01      	subs	r5, #1
   1655c:	e789      	b.n	16472 <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   1655e:	2b01      	cmp	r3, #1
   16560:	d1fa      	bne.n	16558 <hci_tx_thread+0x13c>
					conn = CONTAINER_OF(ev->fifo,
   16562:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   16564:	3838      	subs	r0, #56	; 0x38
   16566:	f003 fa63 	bl	19a30 <bt_conn_process_tx>
   1656a:	e7f5      	b.n	16558 <hci_tx_thread+0x13c>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   1656c:	466c      	mov	r4, sp
   1656e:	b088      	sub	sp, #32
   16570:	466a      	mov	r2, sp
   16572:	4914      	ldr	r1, [pc, #80]	; (165c4 <hci_tx_thread+0x1a8>)
   16574:	6151      	str	r1, [r2, #20]
   16576:	4914      	ldr	r1, [pc, #80]	; (165c8 <hci_tx_thread+0x1ac>)
   16578:	480f      	ldr	r0, [pc, #60]	; (165b8 <hci_tx_thread+0x19c>)
		switch (ev->state) {
   1657a:	e9c2 1306 	strd	r1, r3, [r2, #24]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   1657e:	2304      	movs	r3, #4
   16580:	f842 3f10 	str.w	r3, [r2, #16]!
   16584:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   16588:	f01f f966 	bl	35858 <z_log_msg_static_create.constprop.0>
   1658c:	46a5      	mov	sp, r4
   1658e:	e7e3      	b.n	16558 <hci_tx_thread+0x13c>
   16590:	2000029c 	.word	0x2000029c
   16594:	0003c531 	.word	0x0003c531
   16598:	0003c565 	.word	0x0003c565
   1659c:	0003c56e 	.word	0x0003c56e
   165a0:	2000013c 	.word	0x2000013c
   165a4:	0003e8ba 	.word	0x0003e8ba
   165a8:	20000000 	.word	0x20000000
   165ac:	20000120 	.word	0x20000120
   165b0:	0003c58b 	.word	0x0003c58b
   165b4:	0003cb23 	.word	0x0003cb23
   165b8:	000395c0 	.word	0x000395c0
   165bc:	0003c5aa 	.word	0x0003c5aa
   165c0:	20001b14 	.word	0x20001b14
   165c4:	0003c5d0 	.word	0x0003c5d0
   165c8:	0003cb2c 	.word	0x0003cb2c

000165cc <hci_num_completed_packets>:
{
   165cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0; i < evt->num_handles; i++) {
   165d0:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   165d2:	f8d0 800c 	ldr.w	r8, [r0, #12]
				LOG_ERR("packets count mismatch");
   165d6:	f8df a10c 	ldr.w	sl, [pc, #268]	; 166e4 <hci_num_completed_packets+0x118>
{
   165da:	af00      	add	r7, sp, #0
			tx->pending_no_cb = 0U;
   165dc:	46a9      	mov	r9, r5
	for (i = 0; i < evt->num_handles; i++) {
   165de:	f898 3000 	ldrb.w	r3, [r8]
   165e2:	429d      	cmp	r5, r3
   165e4:	db02      	blt.n	165ec <hci_num_completed_packets+0x20>
}
   165e6:	46bd      	mov	sp, r7
   165e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   165ec:	eb08 0385 	add.w	r3, r8, r5, lsl #2
   165f0:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   165f4:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   165f8:	4658      	mov	r0, fp
   165fa:	f002 fea1 	bl	19340 <bt_conn_lookup_handle>
		if (!conn) {
   165fe:	4604      	mov	r4, r0
   16600:	b1d8      	cbz	r0, 1663a <hci_num_completed_packets+0x6e>
			k_work_submit(&conn->tx_complete_work);
   16602:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   16606:	2e00      	cmp	r6, #0
   16608:	d040      	beq.n	1668c <hci_num_completed_packets+0xc0>
	__asm__ volatile(
   1660a:	f04f 0320 	mov.w	r3, #32
   1660e:	f3ef 8211 	mrs	r2, BASEPRI
   16612:	f383 8812 	msr	BASEPRI_MAX, r3
   16616:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   1661a:	69e3      	ldr	r3, [r4, #28]
   1661c:	b303      	cbz	r3, 16660 <hci_num_completed_packets+0x94>
				conn->pending_no_cb--;
   1661e:	3b01      	subs	r3, #1
   16620:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   16622:	f382 8811 	msr	BASEPRI, r2
   16626:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   1662a:	4620      	mov	r0, r4
   1662c:	f002 fcde 	bl	18fec <bt_conn_get_pkts>
   16630:	3e01      	subs	r6, #1
   16632:	f01b fa4f 	bl	31ad4 <z_impl_k_sem_give>
   16636:	b2b6      	uxth	r6, r6
   16638:	e7e5      	b.n	16606 <hci_num_completed_packets+0x3a>
			LOG_ERR("No connection for handle %u", handle);
   1663a:	466c      	mov	r4, sp
   1663c:	b088      	sub	sp, #32
   1663e:	466a      	mov	r2, sp
   16640:	4b29      	ldr	r3, [pc, #164]	; (166e8 <hci_num_completed_packets+0x11c>)
   16642:	6153      	str	r3, [r2, #20]
   16644:	4b29      	ldr	r3, [pc, #164]	; (166ec <hci_num_completed_packets+0x120>)
   16646:	482a      	ldr	r0, [pc, #168]	; (166f0 <hci_num_completed_packets+0x124>)
   16648:	e9c2 3b06 	strd	r3, fp, [r2, #24]
   1664c:	2304      	movs	r3, #4
   1664e:	f842 3f10 	str.w	r3, [r2, #16]!
   16652:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   16656:	f01f f8ff 	bl	35858 <z_log_msg_static_create.constprop.0>
   1665a:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
   1665c:	3501      	adds	r5, #1
   1665e:	e7be      	b.n	165de <hci_num_completed_packets+0x12>
	return list->head;
   16660:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   16662:	b9bb      	cbnz	r3, 16694 <hci_num_completed_packets+0xc8>
   16664:	f382 8811 	msr	BASEPRI, r2
   16668:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
   1666c:	466e      	mov	r6, sp
   1666e:	b088      	sub	sp, #32
   16670:	466a      	mov	r2, sp
   16672:	4b1e      	ldr	r3, [pc, #120]	; (166ec <hci_num_completed_packets+0x120>)
   16674:	6193      	str	r3, [r2, #24]
   16676:	2303      	movs	r3, #3
   16678:	f8c2 a014 	str.w	sl, [r2, #20]
   1667c:	481c      	ldr	r0, [pc, #112]	; (166f0 <hci_num_completed_packets+0x124>)
   1667e:	f842 3f10 	str.w	r3, [r2, #16]!
   16682:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16686:	f01f f8e7 	bl	35858 <z_log_msg_static_create.constprop.0>
   1668a:	46b5      	mov	sp, r6
		bt_conn_unref(conn);
   1668c:	4620      	mov	r0, r4
   1668e:	f01f fc48 	bl	35f22 <bt_conn_unref>
   16692:	e7e3      	b.n	1665c <hci_num_completed_packets+0x90>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16694:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   16696:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   16698:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1669a:	428b      	cmp	r3, r1
	list->tail = node;
   1669c:	bf08      	it	eq
   1669e:	61a0      	streq	r0, [r4, #24]
   166a0:	f382 8811 	msr	BASEPRI, r2
   166a4:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   166a8:	f04f 0220 	mov.w	r2, #32
   166ac:	f3ef 8111 	mrs	r1, BASEPRI
   166b0:	f382 8812 	msr	BASEPRI_MAX, r2
   166b4:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   166b8:	68da      	ldr	r2, [r3, #12]
   166ba:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   166bc:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
   166c0:	f8c3 9000 	str.w	r9, [r3]
	return list->tail;
   166c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   166c6:	b94a      	cbnz	r2, 166dc <hci_num_completed_packets+0x110>
	list->head = node;
   166c8:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   166cc:	f381 8811 	msr	BASEPRI, r1
   166d0:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   166d4:	4658      	mov	r0, fp
   166d6:	f01b fb9b 	bl	31e10 <k_work_submit>
   166da:	e7a6      	b.n	1662a <hci_num_completed_packets+0x5e>
	parent->next = child;
   166dc:	6013      	str	r3, [r2, #0]
	list->tail = node;
   166de:	6263      	str	r3, [r4, #36]	; 0x24
}
   166e0:	e7f4      	b.n	166cc <hci_num_completed_packets+0x100>
   166e2:	bf00      	nop
   166e4:	0003c615 	.word	0x0003c615
   166e8:	0003c5f5 	.word	0x0003c5f5
   166ec:	0003cda6 	.word	0x0003cda6
   166f0:	000395c0 	.word	0x000395c0

000166f4 <le_conn_update_complete>:
{
   166f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   166f6:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   166f8:	68c5      	ldr	r5, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   166fa:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   166fe:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   16700:	4630      	mov	r0, r6
   16702:	f002 fe1d 	bl	19340 <bt_conn_lookup_handle>
	if (!conn) {
   16706:	4604      	mov	r4, r0
   16708:	b998      	cbnz	r0, 16732 <le_conn_update_complete+0x3e>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1670a:	466c      	mov	r4, sp
   1670c:	b088      	sub	sp, #32
   1670e:	466a      	mov	r2, sp
   16710:	4b2e      	ldr	r3, [pc, #184]	; (167cc <le_conn_update_complete+0xd8>)
   16712:	6153      	str	r3, [r2, #20]
   16714:	4b2e      	ldr	r3, [pc, #184]	; (167d0 <le_conn_update_complete+0xdc>)
   16716:	482f      	ldr	r0, [pc, #188]	; (167d4 <le_conn_update_complete+0xe0>)
   16718:	e9c2 3606 	strd	r3, r6, [r2, #24]
   1671c:	2304      	movs	r3, #4
   1671e:	f842 3f10 	str.w	r3, [r2, #16]!
   16722:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   16726:	f01f f897 	bl	35858 <z_log_msg_static_create.constprop.0>
   1672a:	46a5      	mov	sp, r4
}
   1672c:	370c      	adds	r7, #12
   1672e:	46bd      	mov	sp, r7
   16730:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   16732:	782b      	ldrb	r3, [r5, #0]
   16734:	2b1a      	cmp	r3, #26
	    !atomic_test_and_set_bit(conn->flags,
   16736:	f100 0604 	add.w	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1673a:	d117      	bne.n	1676c <le_conn_update_complete+0x78>
   1673c:	78c3      	ldrb	r3, [r0, #3]
   1673e:	2b01      	cmp	r3, #1
   16740:	d128      	bne.n	16794 <le_conn_update_complete+0xa0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   16742:	f44f 6180 	mov.w	r1, #1024	; 0x400
   16746:	4630      	mov	r0, r6
   16748:	f01f f872 	bl	35830 <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   1674c:	0542      	lsls	r2, r0, #21
   1674e:	d40d      	bmi.n	1676c <le_conn_update_complete+0x78>
		param.interval_min = conn->le.interval_min;
   16750:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   16754:	603b      	str	r3, [r7, #0]
		param.latency = conn->le.pending_latency;
   16756:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1675a:	607b      	str	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
   1675c:	4639      	mov	r1, r7
   1675e:	4620      	mov	r0, r4
   16760:	f003 fb86 	bl	19e70 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   16764:	4620      	mov	r0, r4
   16766:	f01f fbdc 	bl	35f22 <bt_conn_unref>
   1676a:	e7df      	b.n	1672c <le_conn_update_complete+0x38>
		if (!evt->status) {
   1676c:	782b      	ldrb	r3, [r5, #0]
   1676e:	b98b      	cbnz	r3, 16794 <le_conn_update_complete+0xa0>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   16770:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   16774:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   16778:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   1677c:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   16780:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   16784:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16788:	f46f 7180 	mvn.w	r1, #256	; 0x100
   1678c:	4630      	mov	r0, r6
   1678e:	f01f f866 	bl	3585e <atomic_and.isra.0>
}
   16792:	e017      	b.n	167c4 <le_conn_update_complete+0xd0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16794:	f3bf 8f5b 	dmb	ish
   16798:	6863      	ldr	r3, [r4, #4]
   1679a:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(conn->flags,
   1679e:	05db      	lsls	r3, r3, #23
   167a0:	d5f2      	bpl.n	16788 <le_conn_update_complete+0x94>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
   167a2:	782b      	ldrb	r3, [r5, #0]
   167a4:	2b20      	cmp	r3, #32
   167a6:	d1ef      	bne.n	16788 <le_conn_update_complete+0x94>
			   conn->le.conn_param_retry_countdown) {
   167a8:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   167ac:	2b00      	cmp	r3, #0
   167ae:	d0eb      	beq.n	16788 <le_conn_update_complete+0x94>
			conn->le.conn_param_retry_countdown--;
   167b0:	3b01      	subs	r3, #1
   167b2:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
   167b6:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   167ba:	2300      	movs	r3, #0
   167bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
   167c0:	f01b fb8e 	bl	31ee0 <k_work_schedule>
		notify_le_param_updated(conn);
   167c4:	4620      	mov	r0, r4
   167c6:	f002 fef9 	bl	195bc <notify_le_param_updated>
   167ca:	e7cb      	b.n	16764 <le_conn_update_complete+0x70>
   167cc:	0003c449 	.word	0x0003c449
   167d0:	0003cc45 	.word	0x0003cc45
   167d4:	000395c0 	.word	0x000395c0

000167d8 <bt_hci_cmd_state_set_init>:
{
   167d8:	b510      	push	{r4, lr}
	state->bit = bit;
   167da:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   167de:	f89d 3008 	ldrb.w	r3, [sp, #8]
   167e2:	720b      	strb	r3, [r1, #8]
{
   167e4:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   167e6:	f016 ff81 	bl	2d6ec <net_buf_id>
   167ea:	4b03      	ldr	r3, [pc, #12]	; (167f8 <bt_hci_cmd_state_set_init+0x20>)
   167ec:	220c      	movs	r2, #12
   167ee:	fb02 3300 	mla	r3, r2, r0, r3
   167f2:	605c      	str	r4, [r3, #4]
}
   167f4:	bd10      	pop	{r4, pc}
   167f6:	bf00      	nop
   167f8:	20001b14 	.word	0x20001b14

000167fc <bt_hci_cmd_create>:
{
   167fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   16800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16808:	4606      	mov	r6, r0
   1680a:	4817      	ldr	r0, [pc, #92]	; (16868 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   1680c:	4d17      	ldr	r5, [pc, #92]	; (1686c <bt_hci_cmd_create+0x70>)
{
   1680e:	460f      	mov	r7, r1
   16810:	f021 f8c2 	bl	37998 <net_buf_alloc_fixed>
   16814:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   16816:	f100 0a0c 	add.w	sl, r0, #12
   1681a:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1681c:	f04f 0800 	mov.w	r8, #0
   16820:	4650      	mov	r0, sl
   16822:	f021 f8c0 	bl	379a6 <net_buf_simple_reserve>
   16826:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
   1682a:	4620      	mov	r0, r4
   1682c:	f016 ff5e 	bl	2d6ec <net_buf_id>
   16830:	f04f 090c 	mov.w	r9, #12
   16834:	fb09 5000 	mla	r0, r9, r0, r5
   16838:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   1683a:	4620      	mov	r0, r4
   1683c:	f016 ff56 	bl	2d6ec <net_buf_id>
   16840:	fb09 5000 	mla	r0, r9, r0, r5
   16844:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   16848:	4620      	mov	r0, r4
   1684a:	f016 ff4f 	bl	2d6ec <net_buf_id>
   1684e:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   16852:	2103      	movs	r1, #3
   16854:	f8c5 8004 	str.w	r8, [r5, #4]
   16858:	4650      	mov	r0, sl
   1685a:	f021 f909 	bl	37a70 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   1685e:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   16860:	7087      	strb	r7, [r0, #2]
}
   16862:	4620      	mov	r0, r4
   16864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16868:	20000bac 	.word	0x20000bac
   1686c:	20001b14 	.word	0x20001b14

00016870 <bt_hci_cmd_send>:
{
   16870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16872:	4605      	mov	r5, r0
   16874:	af00      	add	r7, sp, #0
	if (!buf) {
   16876:	460c      	mov	r4, r1
   16878:	b919      	cbnz	r1, 16882 <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   1687a:	f7ff ffbf 	bl	167fc <bt_hci_cmd_create>
		if (!buf) {
   1687e:	4604      	mov	r4, r0
   16880:	b328      	cbz	r0, 168ce <bt_hci_cmd_send+0x5e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   16882:	f640 4335 	movw	r3, #3125	; 0xc35
   16886:	429d      	cmp	r5, r3
   16888:	d11b      	bne.n	168c2 <bt_hci_cmd_send+0x52>
		return bt_hci_ecc_send(buf);
   1688a:	4620      	mov	r0, r4
   1688c:	f7fe fffa 	bl	15884 <bt_hci_ecc_send>
		if (err) {
   16890:	4605      	mov	r5, r0
   16892:	b198      	cbz	r0, 168bc <bt_hci_cmd_send+0x4c>
			LOG_ERR("Unable to send to driver (err %d)", err);
   16894:	466e      	mov	r6, sp
   16896:	b088      	sub	sp, #32
   16898:	466a      	mov	r2, sp
   1689a:	4b0e      	ldr	r3, [pc, #56]	; (168d4 <bt_hci_cmd_send+0x64>)
   1689c:	6153      	str	r3, [r2, #20]
   1689e:	4b0e      	ldr	r3, [pc, #56]	; (168d8 <bt_hci_cmd_send+0x68>)
   168a0:	e9c2 3006 	strd	r3, r0, [r2, #24]
   168a4:	2304      	movs	r3, #4
   168a6:	480d      	ldr	r0, [pc, #52]	; (168dc <bt_hci_cmd_send+0x6c>)
   168a8:	f842 3f10 	str.w	r3, [r2, #16]!
   168ac:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   168b0:	f01e ffd2 	bl	35858 <z_log_msg_static_create.constprop.0>
			net_buf_unref(buf);
   168b4:	4620      	mov	r0, r4
   168b6:	46b5      	mov	sp, r6
   168b8:	f016 ffd2 	bl	2d860 <net_buf_unref>
}
   168bc:	4628      	mov	r0, r5
   168be:	46bd      	mov	sp, r7
   168c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   168c2:	4807      	ldr	r0, [pc, #28]	; (168e0 <bt_hci_cmd_send+0x70>)
   168c4:	4621      	mov	r1, r4
   168c6:	f021 f89f 	bl	37a08 <net_buf_put>
	return 0;
   168ca:	2500      	movs	r5, #0
   168cc:	e7f6      	b.n	168bc <bt_hci_cmd_send+0x4c>
			return -ENOBUFS;
   168ce:	f06f 0568 	mvn.w	r5, #104	; 0x68
   168d2:	e7f3      	b.n	168bc <bt_hci_cmd_send+0x4c>
   168d4:	0003c5aa 	.word	0x0003c5aa
   168d8:	0003ce21 	.word	0x0003ce21
   168dc:	000395c0 	.word	0x000395c0
   168e0:	2000013c 	.word	0x2000013c

000168e4 <le_ltk_request>:
{
   168e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   168e8:	b086      	sub	sp, #24
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   168ea:	68c4      	ldr	r4, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   168ec:	8826      	ldrh	r6, [r4, #0]
   168ee:	fa1f f886 	uxth.w	r8, r6
{
   168f2:	af02      	add	r7, sp, #8
	conn = bt_conn_lookup_handle(handle);
   168f4:	4640      	mov	r0, r8
   168f6:	f002 fd23 	bl	19340 <bt_conn_lookup_handle>
	if (!conn) {
   168fa:	4605      	mov	r5, r0
   168fc:	b9a0      	cbnz	r0, 16928 <le_ltk_request+0x44>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   168fe:	466c      	mov	r4, sp
   16900:	b088      	sub	sp, #32
   16902:	aa02      	add	r2, sp, #8
   16904:	4b2e      	ldr	r3, [pc, #184]	; (169c0 <le_ltk_request+0xdc>)
   16906:	6153      	str	r3, [r2, #20]
   16908:	4b2e      	ldr	r3, [pc, #184]	; (169c4 <le_ltk_request+0xe0>)
   1690a:	482f      	ldr	r0, [pc, #188]	; (169c8 <le_ltk_request+0xe4>)
   1690c:	e9c2 3806 	strd	r3, r8, [r2, #24]
   16910:	2304      	movs	r3, #4
   16912:	f842 3f10 	str.w	r3, [r2, #16]!
   16916:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1691a:	f01e ff9d 	bl	35858 <z_log_msg_static_create.constprop.0>
   1691e:	46a5      	mov	sp, r4
}
   16920:	3710      	adds	r7, #16
   16922:	46bd      	mov	sp, r7
   16924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   16928:	f8d4 2002 	ldr.w	r2, [r4, #2]
   1692c:	f8d4 3006 	ldr.w	r3, [r4, #6]
   16930:	9701      	str	r7, [sp, #4]
   16932:	8961      	ldrh	r1, [r4, #10]
   16934:	9100      	str	r1, [sp, #0]
   16936:	f020 fe25 	bl	37584 <bt_smp_request_ltk>
   1693a:	b350      	cbz	r0, 16992 <le_ltk_request+0xae>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   1693c:	2112      	movs	r1, #18
   1693e:	f242 001a 	movw	r0, #8218	; 0x201a
   16942:	f7ff ff5b 	bl	167fc <bt_hci_cmd_create>
	if (!buf) {
   16946:	4604      	mov	r4, r0
   16948:	b998      	cbnz	r0, 16972 <le_ltk_request+0x8e>
		LOG_ERR("Out of command buffers");
   1694a:	466c      	mov	r4, sp
   1694c:	b088      	sub	sp, #32
   1694e:	aa02      	add	r2, sp, #8
   16950:	4b1e      	ldr	r3, [pc, #120]	; (169cc <le_ltk_request+0xe8>)
   16952:	6153      	str	r3, [r2, #20]
   16954:	4b1e      	ldr	r3, [pc, #120]	; (169d0 <le_ltk_request+0xec>)
		LOG_ERR("Out of command buffers");
   16956:	6193      	str	r3, [r2, #24]
   16958:	2303      	movs	r3, #3
   1695a:	f842 3f10 	str.w	r3, [r2, #16]!
   1695e:	481a      	ldr	r0, [pc, #104]	; (169c8 <le_ltk_request+0xe4>)
   16960:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16964:	f01e ff78 	bl	35858 <z_log_msg_static_create.constprop.0>
   16968:	46a5      	mov	sp, r4
	bt_conn_unref(conn);
   1696a:	4628      	mov	r0, r5
   1696c:	f01f fad9 	bl	35f22 <bt_conn_unref>
   16970:	e7d6      	b.n	16920 <le_ltk_request+0x3c>
   16972:	2112      	movs	r1, #18
   16974:	300c      	adds	r0, #12
   16976:	f021 f87b 	bl	37a70 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   1697a:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   1697c:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   16980:	2210      	movs	r2, #16
   16982:	f01e fdd8 	bl	35536 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   16986:	4621      	mov	r1, r4
   16988:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1698c:	f7ff ff70 	bl	16870 <bt_hci_cmd_send>
   16990:	e7eb      	b.n	1696a <le_ltk_request+0x86>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   16992:	2102      	movs	r1, #2
   16994:	f242 001b 	movw	r0, #8219	; 0x201b
   16998:	f7ff ff30 	bl	167fc <bt_hci_cmd_create>
	if (!buf) {
   1699c:	4604      	mov	r4, r0
   1699e:	b930      	cbnz	r0, 169ae <le_ltk_request+0xca>
		LOG_ERR("Out of command buffers");
   169a0:	466c      	mov	r4, sp
   169a2:	b088      	sub	sp, #32
   169a4:	aa02      	add	r2, sp, #8
   169a6:	4b09      	ldr	r3, [pc, #36]	; (169cc <le_ltk_request+0xe8>)
   169a8:	6153      	str	r3, [r2, #20]
   169aa:	4b0a      	ldr	r3, [pc, #40]	; (169d4 <le_ltk_request+0xf0>)
   169ac:	e7d3      	b.n	16956 <le_ltk_request+0x72>
   169ae:	2102      	movs	r1, #2
   169b0:	300c      	adds	r0, #12
   169b2:	f021 f85d 	bl	37a70 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   169b6:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   169b8:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   169ba:	f242 001b 	movw	r0, #8219	; 0x201b
   169be:	e7e5      	b.n	1698c <le_ltk_request+0xa8>
   169c0:	0003c449 	.word	0x0003c449
   169c4:	0003cce7 	.word	0x0003cce7
   169c8:	000395c0 	.word	0x000395c0
   169cc:	0003c630 	.word	0x0003c630
   169d0:	0003ccda 	.word	0x0003ccda
   169d4:	0003ccc9 	.word	0x0003ccc9

000169d8 <le_conn_param_req>:
{
   169d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   169dc:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   169de:	68c3      	ldr	r3, [r0, #12]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   169e0:	78d9      	ldrb	r1, [r3, #3]
   169e2:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   169e4:	f8b3 8000 	ldrh.w	r8, [r3]
{
   169e8:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   169ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   169ee:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   169f0:	7959      	ldrb	r1, [r3, #5]
   169f2:	791a      	ldrb	r2, [r3, #4]
   169f4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   169f8:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   169fa:	799a      	ldrb	r2, [r3, #6]
   169fc:	79d9      	ldrb	r1, [r3, #7]
   169fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16a02:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16a04:	7a1a      	ldrb	r2, [r3, #8]
   16a06:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   16a08:	fa1f f488 	uxth.w	r4, r8
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16a0c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   16a10:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16a12:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
   16a14:	f002 fc94 	bl	19340 <bt_conn_lookup_handle>
	if (!conn) {
   16a18:	4606      	mov	r6, r0
   16a1a:	b9c0      	cbnz	r0, 16a4e <le_conn_param_req+0x76>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   16a1c:	466d      	mov	r5, sp
   16a1e:	b088      	sub	sp, #32
   16a20:	466a      	mov	r2, sp
   16a22:	4b21      	ldr	r3, [pc, #132]	; (16aa8 <le_conn_param_req+0xd0>)
   16a24:	6153      	str	r3, [r2, #20]
   16a26:	4b21      	ldr	r3, [pc, #132]	; (16aac <le_conn_param_req+0xd4>)
   16a28:	4821      	ldr	r0, [pc, #132]	; (16ab0 <le_conn_param_req+0xd8>)
   16a2a:	e9c2 3406 	strd	r3, r4, [r2, #24]
   16a2e:	2304      	movs	r3, #4
   16a30:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   16a34:	f842 3f10 	str.w	r3, [r2, #16]!
   16a38:	f01e ff0e 	bl	35858 <z_log_msg_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   16a3c:	2102      	movs	r1, #2
   16a3e:	46ad      	mov	sp, r5
   16a40:	4620      	mov	r0, r4
   16a42:	f01e ff28 	bl	35896 <le_conn_param_neg_reply>
}
   16a46:	3708      	adds	r7, #8
   16a48:	46bd      	mov	sp, r7
   16a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!le_param_req(conn, &param)) {
   16a4e:	4639      	mov	r1, r7
   16a50:	f002 fdf8 	bl	19644 <le_param_req>
   16a54:	b938      	cbnz	r0, 16a66 <le_conn_param_req+0x8e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   16a56:	211e      	movs	r1, #30
   16a58:	4620      	mov	r0, r4
   16a5a:	f01e ff1c 	bl	35896 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   16a5e:	4630      	mov	r0, r6
   16a60:	f01f fa5f 	bl	35f22 <bt_conn_unref>
   16a64:	e7ef      	b.n	16a46 <le_conn_param_req+0x6e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   16a66:	210e      	movs	r1, #14
   16a68:	f242 0020 	movw	r0, #8224	; 0x2020
   16a6c:	f7ff fec6 	bl	167fc <bt_hci_cmd_create>
	if (!buf) {
   16a70:	4605      	mov	r5, r0
   16a72:	2800      	cmp	r0, #0
   16a74:	d0f3      	beq.n	16a5e <le_conn_param_req+0x86>
   16a76:	210e      	movs	r1, #14
   16a78:	300c      	adds	r0, #12
   16a7a:	f020 fff9 	bl	37a70 <net_buf_simple_add>
   16a7e:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   16a80:	220e      	movs	r2, #14
   16a82:	2100      	movs	r1, #0
   16a84:	f01e fd62 	bl	3554c <memset>
	cp->handle = sys_cpu_to_le16(handle);
   16a88:	f8a4 8000 	strh.w	r8, [r4]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   16a8c:	883b      	ldrh	r3, [r7, #0]
   16a8e:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   16a90:	887b      	ldrh	r3, [r7, #2]
   16a92:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   16a94:	88bb      	ldrh	r3, [r7, #4]
   16a96:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   16a98:	88fb      	ldrh	r3, [r7, #6]
   16a9a:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   16a9c:	4629      	mov	r1, r5
   16a9e:	f242 0020 	movw	r0, #8224	; 0x2020
   16aa2:	f7ff fee5 	bl	16870 <bt_hci_cmd_send>
   16aa6:	e7da      	b.n	16a5e <le_conn_param_req+0x86>
   16aa8:	0003c449 	.word	0x0003c449
   16aac:	0003cc8d 	.word	0x0003cc8d
   16ab0:	000395c0 	.word	0x000395c0

00016ab4 <bt_hci_cmd_send_sync>:
{
   16ab4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16ab8:	b087      	sub	sp, #28
   16aba:	4680      	mov	r8, r0
   16abc:	af00      	add	r7, sp, #0
   16abe:	4615      	mov	r5, r2
	if (!buf) {
   16ac0:	460c      	mov	r4, r1
   16ac2:	b921      	cbnz	r1, 16ace <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
   16ac4:	f7ff fe9a 	bl	167fc <bt_hci_cmd_create>
		if (!buf) {
   16ac8:	4604      	mov	r4, r0
   16aca:	2800      	cmp	r0, #0
   16acc:	d05c      	beq.n	16b88 <bt_hci_cmd_send_sync+0xd4>
	return z_impl_k_sem_init(sem, initial_count, limit);
   16ace:	2201      	movs	r2, #1
   16ad0:	2100      	movs	r1, #0
   16ad2:	4638      	mov	r0, r7
   16ad4:	f021 fef5 	bl	388c2 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   16ad8:	4620      	mov	r0, r4
   16ada:	f016 fe07 	bl	2d6ec <net_buf_id>
   16ade:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 16b90 <bt_hci_cmd_send_sync+0xdc>
   16ae2:	230c      	movs	r3, #12
   16ae4:	fb03 9000 	mla	r0, r3, r0, r9
   16ae8:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   16aea:	4620      	mov	r0, r4
   16aec:	f020 ff8e 	bl	37a0c <net_buf_ref>
   16af0:	4601      	mov	r1, r0
   16af2:	4828      	ldr	r0, [pc, #160]	; (16b94 <bt_hci_cmd_send_sync+0xe0>)
   16af4:	f020 ff88 	bl	37a08 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   16af8:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   16afc:	2300      	movs	r3, #0
   16afe:	4638      	mov	r0, r7
   16b00:	f01b f80e 	bl	31b20 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   16b04:	4606      	mov	r6, r0
   16b06:	b180      	cbz	r0, 16b2a <bt_hci_cmd_send_sync+0x76>
   16b08:	4a23      	ldr	r2, [pc, #140]	; (16b98 <bt_hci_cmd_send_sync+0xe4>)
   16b0a:	4924      	ldr	r1, [pc, #144]	; (16b9c <bt_hci_cmd_send_sync+0xe8>)
   16b0c:	4824      	ldr	r0, [pc, #144]	; (16ba0 <bt_hci_cmd_send_sync+0xec>)
   16b0e:	f240 1349 	movw	r3, #329	; 0x149
   16b12:	f01c fc81 	bl	33418 <assert_print>
   16b16:	4823      	ldr	r0, [pc, #140]	; (16ba4 <bt_hci_cmd_send_sync+0xf0>)
   16b18:	4631      	mov	r1, r6
   16b1a:	f01c fc7d 	bl	33418 <assert_print>
   16b1e:	4040      	eors	r0, r0
   16b20:	f380 8811 	msr	BASEPRI, r0
   16b24:	f04f 0003 	mov.w	r0, #3
   16b28:	df02      	svc	2
	status = cmd(buf)->status;
   16b2a:	4620      	mov	r0, r4
   16b2c:	f016 fdde 	bl	2d6ec <net_buf_id>
   16b30:	230c      	movs	r3, #12
   16b32:	4358      	muls	r0, r3
   16b34:	f819 6000 	ldrb.w	r6, [r9, r0]
	if (status) {
   16b38:	b1f6      	cbz	r6, 16b78 <bt_hci_cmd_send_sync+0xc4>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   16b3a:	466d      	mov	r5, sp
   16b3c:	b08a      	sub	sp, #40	; 0x28
   16b3e:	466a      	mov	r2, sp
   16b40:	4b19      	ldr	r3, [pc, #100]	; (16ba8 <bt_hci_cmd_send_sync+0xf4>)
   16b42:	6153      	str	r3, [r2, #20]
   16b44:	4b19      	ldr	r3, [pc, #100]	; (16bac <bt_hci_cmd_send_sync+0xf8>)
   16b46:	6216      	str	r6, [r2, #32]
   16b48:	e9c2 3806 	strd	r3, r8, [r2, #24]
   16b4c:	2305      	movs	r3, #5
   16b4e:	f842 3f10 	str.w	r3, [r2, #16]!
   16b52:	4817      	ldr	r0, [pc, #92]	; (16bb0 <bt_hci_cmd_send_sync+0xfc>)
   16b54:	f44f 5122 	mov.w	r1, #10368	; 0x2880
   16b58:	f01e fe7e 	bl	35858 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   16b5c:	4620      	mov	r0, r4
   16b5e:	46ad      	mov	sp, r5
   16b60:	f016 fe7e 	bl	2d860 <net_buf_unref>
			return -ECONNREFUSED;
   16b64:	2e09      	cmp	r6, #9
   16b66:	bf14      	ite	ne
   16b68:	f06f 0004 	mvnne.w	r0, #4
   16b6c:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   16b70:	371c      	adds	r7, #28
   16b72:	46bd      	mov	sp, r7
   16b74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
   16b78:	b115      	cbz	r5, 16b80 <bt_hci_cmd_send_sync+0xcc>
		*rsp = buf;
   16b7a:	602c      	str	r4, [r5, #0]
	return 0;
   16b7c:	2000      	movs	r0, #0
   16b7e:	e7f7      	b.n	16b70 <bt_hci_cmd_send_sync+0xbc>
		net_buf_unref(buf);
   16b80:	4620      	mov	r0, r4
   16b82:	f016 fe6d 	bl	2d860 <net_buf_unref>
   16b86:	e7f9      	b.n	16b7c <bt_hci_cmd_send_sync+0xc8>
			return -ENOBUFS;
   16b88:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16b8c:	e7f0      	b.n	16b70 <bt_hci_cmd_send_sync+0xbc>
   16b8e:	bf00      	nop
   16b90:	20001b14 	.word	0x20001b14
   16b94:	2000013c 	.word	0x2000013c
   16b98:	0003c531 	.word	0x0003c531
   16b9c:	0003c565 	.word	0x0003c565
   16ba0:	0003c56e 	.word	0x0003c56e
   16ba4:	0003c64b 	.word	0x0003c64b
   16ba8:	0003c66b 	.word	0x0003c66b
   16bac:	0003ce0c 	.word	0x0003ce0c
   16bb0:	000395c0 	.word	0x000395c0

00016bb4 <hci_le_read_max_data_len>:
{
   16bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   16bb6:	b083      	sub	sp, #12
   16bb8:	af00      	add	r7, sp, #0
   16bba:	4606      	mov	r6, r0
   16bbc:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   16bbe:	1d3a      	adds	r2, r7, #4
   16bc0:	2100      	movs	r1, #0
   16bc2:	f242 002f 	movw	r0, #8239	; 0x202f
   16bc6:	f7ff ff75 	bl	16ab4 <bt_hci_cmd_send_sync>
	if (err) {
   16bca:	4604      	mov	r4, r0
   16bcc:	b198      	cbz	r0, 16bf6 <hci_le_read_max_data_len+0x42>
		LOG_ERR("Failed to read DLE max data len");
   16bce:	466d      	mov	r5, sp
   16bd0:	b088      	sub	sp, #32
   16bd2:	466a      	mov	r2, sp
   16bd4:	4b0d      	ldr	r3, [pc, #52]	; (16c0c <hci_le_read_max_data_len+0x58>)
   16bd6:	6153      	str	r3, [r2, #20]
   16bd8:	4b0d      	ldr	r3, [pc, #52]	; (16c10 <hci_le_read_max_data_len+0x5c>)
   16bda:	6193      	str	r3, [r2, #24]
   16bdc:	2303      	movs	r3, #3
   16bde:	f842 3f10 	str.w	r3, [r2, #16]!
   16be2:	480c      	ldr	r0, [pc, #48]	; (16c14 <hci_le_read_max_data_len+0x60>)
   16be4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16be8:	f01e fe36 	bl	35858 <z_log_msg_static_create.constprop.0>
   16bec:	46ad      	mov	sp, r5
}
   16bee:	4620      	mov	r0, r4
   16bf0:	370c      	adds	r7, #12
   16bf2:	46bd      	mov	sp, r7
   16bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = (void *)rsp->data;
   16bf6:	6878      	ldr	r0, [r7, #4]
   16bf8:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   16bfa:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   16bfe:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   16c00:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   16c04:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   16c06:	f016 fe2b 	bl	2d860 <net_buf_unref>
	return 0;
   16c0a:	e7f0      	b.n	16bee <hci_le_read_max_data_len+0x3a>
   16c0c:	0003c68b 	.word	0x0003c68b
   16c10:	0003ce3d 	.word	0x0003ce3d
   16c14:	000395c0 	.word	0x000395c0

00016c18 <bt_hci_le_rand>:
{
   16c18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   16c1a:	4b14      	ldr	r3, [pc, #80]	; (16c6c <bt_hci_le_rand+0x54>)
   16c1c:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
   16c20:	2b00      	cmp	r3, #0
{
   16c22:	4605      	mov	r5, r0
   16c24:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   16c26:	da1d      	bge.n	16c64 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   16c28:	b914      	cbnz	r4, 16c30 <bt_hci_le_rand+0x18>
	return 0;
   16c2a:	4620      	mov	r0, r4
}
   16c2c:	b003      	add	sp, #12
   16c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   16c30:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   16c32:	aa01      	add	r2, sp, #4
   16c34:	f04f 0100 	mov.w	r1, #0
   16c38:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   16c3c:	4626      	mov	r6, r4
   16c3e:	bf28      	it	cs
   16c40:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   16c42:	f7ff ff37 	bl	16ab4 <bt_hci_cmd_send_sync>
		if (err) {
   16c46:	2800      	cmp	r0, #0
   16c48:	d1f0      	bne.n	16c2c <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   16c4a:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
   16c4c:	68f9      	ldr	r1, [r7, #12]
   16c4e:	4632      	mov	r2, r6
   16c50:	3101      	adds	r1, #1
   16c52:	4628      	mov	r0, r5
   16c54:	f01e fc6f 	bl	35536 <memcpy>
		net_buf_unref(rsp);
   16c58:	4638      	mov	r0, r7
   16c5a:	f016 fe01 	bl	2d860 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   16c5e:	4435      	add	r5, r6
		len -= count;
   16c60:	1ba4      	subs	r4, r4, r6
   16c62:	e7e1      	b.n	16c28 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   16c64:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16c68:	e7e0      	b.n	16c2c <bt_hci_le_rand+0x14>
   16c6a:	bf00      	nop
   16c6c:	20000000 	.word	0x20000000

00016c70 <bt_hci_le_enh_conn_complete>:
{
   16c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c74:	b089      	sub	sp, #36	; 0x24
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16c76:	f8b0 9001 	ldrh.w	r9, [r0, #1]
		if (disconnected_handles[i] == handle) {
   16c7a:	4a4f      	ldr	r2, [pc, #316]	; (16db8 <bt_hci_le_enh_conn_complete+0x148>)
	handle |= ~BT_ACL_HANDLE_MASK;
   16c7c:	ea6f 5309 	mvn.w	r3, r9, lsl #20
		if (disconnected_handles[i] == handle) {
   16c80:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   16c82:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   16c86:	b29b      	uxth	r3, r3
   16c88:	4299      	cmp	r1, r3
{
   16c8a:	4605      	mov	r5, r0
   16c8c:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   16c90:	bf08      	it	eq
   16c92:	8016      	strheq	r6, [r2, #0]
{
   16c94:	af02      	add	r7, sp, #8
			return true;
   16c96:	bf08      	it	eq
   16c98:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
   16c9a:	f001 f8d1 	bl	17e40 <bt_id_pending_keys_update>
	if (evt->status) {
   16c9e:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16ca0:	fa1f f889 	uxth.w	r8, r9
	if (evt->status) {
   16ca4:	2c00      	cmp	r4, #0
   16ca6:	d03b      	beq.n	16d20 <bt_hci_le_enh_conn_complete+0xb0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16ca8:	2c3c      	cmp	r4, #60	; 0x3c
   16caa:	d127      	bne.n	16cfc <bt_hci_le_enh_conn_complete+0x8c>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   16cac:	f001 fc74 	bl	18598 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16cb0:	f06f 0180 	mvn.w	r1, #128	; 0x80
   16cb4:	3010      	adds	r0, #16
   16cb6:	f01e fdd2 	bl	3585e <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   16cba:	2000      	movs	r0, #0
   16cbc:	f7ff f960 	bl	15f80 <find_pending_connect.part.0>
		if (!conn) {
   16cc0:	4605      	mov	r5, r0
   16cc2:	b998      	cbnz	r0, 16cec <bt_hci_le_enh_conn_complete+0x7c>
			LOG_ERR("No pending peripheral connection");
   16cc4:	466c      	mov	r4, sp
   16cc6:	b088      	sub	sp, #32
   16cc8:	aa02      	add	r2, sp, #8
   16cca:	4b3c      	ldr	r3, [pc, #240]	; (16dbc <bt_hci_le_enh_conn_complete+0x14c>)
   16ccc:	6153      	str	r3, [r2, #20]
   16cce:	4b3c      	ldr	r3, [pc, #240]	; (16dc0 <bt_hci_le_enh_conn_complete+0x150>)
   16cd0:	6193      	str	r3, [r2, #24]
   16cd2:	2303      	movs	r3, #3
   16cd4:	f842 3f10 	str.w	r3, [r2, #16]!
   16cd8:	483a      	ldr	r0, [pc, #232]	; (16dc4 <bt_hci_le_enh_conn_complete+0x154>)
   16cda:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16cde:	f01e fdbb 	bl	35858 <z_log_msg_static_create.constprop.0>
   16ce2:	46a5      	mov	sp, r4
}
   16ce4:	371c      	adds	r7, #28
   16ce6:	46bd      	mov	sp, r7
   16ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   16cec:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16cee:	2100      	movs	r1, #0
   16cf0:	f002 fb2e 	bl	19350 <bt_conn_set_state>
		bt_conn_unref(conn);
   16cf4:	4628      	mov	r0, r5
	bt_conn_unref(conn);
   16cf6:	f01f f914 	bl	35f22 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   16cfa:	e7f3      	b.n	16ce4 <bt_hci_le_enh_conn_complete+0x74>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   16cfc:	466d      	mov	r5, sp
   16cfe:	b088      	sub	sp, #32
   16d00:	aa02      	add	r2, sp, #8
   16d02:	4b31      	ldr	r3, [pc, #196]	; (16dc8 <bt_hci_le_enh_conn_complete+0x158>)
   16d04:	6153      	str	r3, [r2, #20]
   16d06:	4b31      	ldr	r3, [pc, #196]	; (16dcc <bt_hci_le_enh_conn_complete+0x15c>)
   16d08:	482e      	ldr	r0, [pc, #184]	; (16dc4 <bt_hci_le_enh_conn_complete+0x154>)
   16d0a:	e9c2 3406 	strd	r3, r4, [r2, #24]
   16d0e:	2304      	movs	r3, #4
   16d10:	f842 3f10 	str.w	r3, [r2, #16]!
   16d14:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   16d18:	f01e fd9e 	bl	35858 <z_log_msg_static_create.constprop.0>
   16d1c:	46ad      	mov	sp, r5
		return;
   16d1e:	e7e1      	b.n	16ce4 <bt_hci_le_enh_conn_complete+0x74>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   16d20:	792b      	ldrb	r3, [r5, #4]
   16d22:	3b02      	subs	r3, #2
   16d24:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   16d26:	f105 0a04 	add.w	sl, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   16d2a:	d82f      	bhi.n	16d8c <bt_hci_le_enh_conn_complete+0x11c>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   16d2c:	4651      	mov	r1, sl
   16d2e:	f107 0010 	add.w	r0, r7, #16
   16d32:	f01e fd7a 	bl	3582a <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   16d36:	7c3b      	ldrb	r3, [r7, #16]
	memcpy(dst, src, sizeof(*dst));
   16d38:	2206      	movs	r2, #6
   16d3a:	3b02      	subs	r3, #2
   16d3c:	f105 0111 	add.w	r1, r5, #17
   16d40:	f107 0009 	add.w	r0, r7, #9
   16d44:	743b      	strb	r3, [r7, #16]
   16d46:	f01e fbf6 	bl	35536 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   16d4a:	2301      	movs	r3, #1
   16d4c:	723b      	strb	r3, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   16d4e:	78eb      	ldrb	r3, [r5, #3]
   16d50:	2b01      	cmp	r3, #1
   16d52:	d043      	beq.n	16ddc <bt_hci_le_enh_conn_complete+0x16c>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   16d54:	4650      	mov	r0, sl
   16d56:	f7fe fc17 	bl	15588 <bt_addr_le_str>
   16d5a:	466c      	mov	r4, sp
   16d5c:	b08a      	sub	sp, #40	; 0x28
   16d5e:	aa02      	add	r2, sp, #8
   16d60:	4b1b      	ldr	r3, [pc, #108]	; (16dd0 <bt_hci_le_enh_conn_complete+0x160>)
   16d62:	6153      	str	r3, [r2, #20]
   16d64:	4b19      	ldr	r3, [pc, #100]	; (16dcc <bt_hci_le_enh_conn_complete+0x15c>)
   16d66:	e9c2 3006 	strd	r3, r0, [r2, #24]
   16d6a:	f240 3301 	movw	r3, #769	; 0x301
   16d6e:	8413      	strh	r3, [r2, #32]
   16d70:	4b18      	ldr	r3, [pc, #96]	; (16dd4 <bt_hci_le_enh_conn_complete+0x164>)
   16d72:	f842 3f10 	str.w	r3, [r2, #16]!
   16d76:	4813      	ldr	r0, [pc, #76]	; (16dc4 <bt_hci_le_enh_conn_complete+0x154>)
   16d78:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   16d7c:	f01e fd6c 	bl	35858 <z_log_msg_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   16d80:	211f      	movs	r1, #31
   16d82:	46a5      	mov	sp, r4
   16d84:	4640      	mov	r0, r8
   16d86:	f01e fda1 	bl	358cc <bt_hci_disconnect>
		return;
   16d8a:	e7ab      	b.n	16ce4 <bt_hci_le_enh_conn_complete+0x74>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   16d8c:	78eb      	ldrb	r3, [r5, #3]
   16d8e:	2b01      	cmp	r3, #1
   16d90:	bf04      	itt	eq
   16d92:	4b11      	ldreq	r3, [pc, #68]	; (16dd8 <bt_hci_le_enh_conn_complete+0x168>)
   16d94:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   16d98:	4651      	mov	r1, sl
   16d9a:	4620      	mov	r0, r4
   16d9c:	f01e ff2e 	bl	35bfc <bt_lookup_id_addr>
   16da0:	4601      	mov	r1, r0
   16da2:	f107 0010 	add.w	r0, r7, #16
   16da6:	f01e fd40 	bl	3582a <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   16daa:	4651      	mov	r1, sl
   16dac:	f107 0008 	add.w	r0, r7, #8
   16db0:	f01e fd3b 	bl	3582a <bt_addr_le_copy>
   16db4:	e7cb      	b.n	16d4e <bt_hci_le_enh_conn_complete+0xde>
   16db6:	bf00      	nop
   16db8:	20003278 	.word	0x20003278
   16dbc:	0003c6af 	.word	0x0003c6af
   16dc0:	0003cdd3 	.word	0x0003cdd3
   16dc4:	000395c0 	.word	0x000395c0
   16dc8:	0003c6d4 	.word	0x0003c6d4
   16dcc:	0003cdf0 	.word	0x0003cdf0
   16dd0:	0003c6f1 	.word	0x0003c6f1
   16dd4:	01000004 	.word	0x01000004
   16dd8:	20000000 	.word	0x20000000
   16ddc:	f107 0010 	add.w	r0, r7, #16
   16de0:	f7ff f8ce 	bl	15f80 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16de4:	78eb      	ldrb	r3, [r5, #3]
   16de6:	2b01      	cmp	r3, #1
   16de8:	4604      	mov	r4, r0
   16dea:	d10a      	bne.n	16e02 <bt_hci_le_enh_conn_complete+0x192>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   16dec:	f001 fbd4 	bl	18598 <bt_le_adv_lookup_legacy>
   16df0:	f06f 0180 	mvn.w	r1, #128	; 0x80
   16df4:	4683      	mov	fp, r0
   16df6:	3010      	adds	r0, #16
   16df8:	f01e fd31 	bl	3585e <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   16dfc:	4658      	mov	r0, fp
   16dfe:	f01f f815 	bl	35e2c <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   16e02:	2c00      	cmp	r4, #0
   16e04:	d0a6      	beq.n	16d54 <bt_hci_le_enh_conn_complete+0xe4>
	conn->handle = handle;
   16e06:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   16e08:	f107 0110 	add.w	r1, r7, #16
	conn->handle = handle;
   16e0c:	f820 9b88 	strh.w	r9, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   16e10:	f01e fd0b 	bl	3582a <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   16e14:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   16e18:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   16e1c:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   16e20:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   16e24:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   16e28:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   16e2c:	f895 9003 	ldrb.w	r9, [r5, #3]
   16e30:	f884 9003 	strb.w	r9, [r4, #3]
	conn->err = 0U;
   16e34:	2300      	movs	r3, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16e36:	f1b9 0f01 	cmp.w	r9, #1
	conn->err = 0U;
   16e3a:	7323      	strb	r3, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16e3c:	d12a      	bne.n	16e94 <bt_hci_le_enh_conn_complete+0x224>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   16e3e:	f107 0108 	add.w	r1, r7, #8
   16e42:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   16e46:	f01e fcf0 	bl	3582a <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   16e4a:	f001 fba5 	bl	18598 <bt_le_adv_lookup_legacy>
   16e4e:	f3bf 8f5b 	dmb	ish
   16e52:	6903      	ldr	r3, [r0, #16]
   16e54:	f8df 816c 	ldr.w	r8, [pc, #364]	; 16fc4 <bt_hci_le_enh_conn_complete+0x354>
   16e58:	f3bf 8f5b 	dmb	ish
			if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   16e5c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   16e60:	f040 80a3 	bne.w	16faa <bt_hci_le_enh_conn_complete+0x33a>
				if (bt_addr_cmp(&evt->local_rpa,
   16e64:	350b      	adds	r5, #11
	return memcmp(a, b, sizeof(*a));
   16e66:	2206      	movs	r2, #6
   16e68:	4957      	ldr	r1, [pc, #348]	; (16fc8 <bt_hci_le_enh_conn_complete+0x358>)
				conn->le.resp_addr.type = BT_ADDR_LE_RANDOM;
   16e6a:	f884 9096 	strb.w	r9, [r4, #150]	; 0x96
   16e6e:	4628      	mov	r0, r5
   16e70:	f01e fb51 	bl	35516 <memcmp>
   16e74:	4603      	mov	r3, r0
	memcpy(dst, src, sizeof(*dst));
   16e76:	2206      	movs	r2, #6
					bt_addr_copy(&conn->le.resp_addr.a,
   16e78:	f104 0097 	add.w	r0, r4, #151	; 0x97
				if (bt_addr_cmp(&evt->local_rpa,
   16e7c:	2b00      	cmp	r3, #0
   16e7e:	f000 8091 	beq.w	16fa4 <bt_hci_le_enh_conn_complete+0x334>
   16e82:	4629      	mov	r1, r5
   16e84:	f01e fb57 	bl	35536 <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   16e88:	f8d8 30dc 	ldr.w	r3, [r8, #220]	; 0xdc
   16e8c:	065d      	lsls	r5, r3, #25
   16e8e:	d501      	bpl.n	16e94 <bt_hci_le_enh_conn_complete+0x224>
			bt_le_adv_resume();
   16e90:	f001 fd54 	bl	1893c <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   16e94:	2107      	movs	r1, #7
   16e96:	4620      	mov	r0, r4
   16e98:	f002 fa5a 	bl	19350 <bt_conn_set_state>
	if (is_disconnected) {
   16e9c:	b11e      	cbz	r6, 16ea6 <bt_hci_le_enh_conn_complete+0x236>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   16e9e:	2101      	movs	r1, #1
   16ea0:	4620      	mov	r0, r4
   16ea2:	f002 fa55 	bl	19350 <bt_conn_set_state>
	bt_conn_connected(conn);
   16ea6:	4620      	mov	r0, r4
   16ea8:	f01f f879 	bl	35f9e <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   16eac:	7b63      	ldrb	r3, [r4, #13]
   16eae:	2b07      	cmp	r3, #7
   16eb0:	d176      	bne.n	16fa0 <bt_hci_le_enh_conn_complete+0x330>
   16eb2:	f3bf 8f5b 	dmb	ish
   16eb6:	6863      	ldr	r3, [r4, #4]
   16eb8:	4d42      	ldr	r5, [pc, #264]	; (16fc4 <bt_hci_le_enh_conn_complete+0x354>)
   16eba:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   16ebe:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   16ec2:	d12b      	bne.n	16f1c <bt_hci_le_enh_conn_complete+0x2ac>
   16ec4:	78e3      	ldrb	r3, [r4, #3]
   16ec6:	b11b      	cbz	r3, 16ed0 <bt_hci_le_enh_conn_complete+0x260>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   16ec8:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   16ecc:	0718      	lsls	r0, r3, #28
   16ece:	d525      	bpl.n	16f1c <bt_hci_le_enh_conn_complete+0x2ac>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   16ed0:	2102      	movs	r1, #2
   16ed2:	f242 0016 	movw	r0, #8214	; 0x2016
   16ed6:	f7ff fc91 	bl	167fc <bt_hci_cmd_create>
	if (!buf) {
   16eda:	4606      	mov	r6, r0
   16edc:	2800      	cmp	r0, #0
   16ede:	d06d      	beq.n	16fbc <bt_hci_le_enh_conn_complete+0x34c>
   16ee0:	2102      	movs	r1, #2
   16ee2:	300c      	adds	r0, #12
   16ee4:	f020 fdc4 	bl	37a70 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   16ee8:	8823      	ldrh	r3, [r4, #0]
   16eea:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   16eec:	2200      	movs	r2, #0
   16eee:	4631      	mov	r1, r6
   16ef0:	f242 0016 	movw	r0, #8214	; 0x2016
   16ef4:	f7ff fdde 	bl	16ab4 <bt_hci_cmd_send_sync>
		if (err) {
   16ef8:	b180      	cbz	r0, 16f1c <bt_hci_le_enh_conn_complete+0x2ac>
			LOG_ERR("Failed read remote features (%d)", err);
   16efa:	466e      	mov	r6, sp
   16efc:	b088      	sub	sp, #32
   16efe:	aa02      	add	r2, sp, #8
   16f00:	4b32      	ldr	r3, [pc, #200]	; (16fcc <bt_hci_le_enh_conn_complete+0x35c>)
   16f02:	6153      	str	r3, [r2, #20]
   16f04:	4b32      	ldr	r3, [pc, #200]	; (16fd0 <bt_hci_le_enh_conn_complete+0x360>)
   16f06:	e9c2 3006 	strd	r3, r0, [r2, #24]
   16f0a:	2304      	movs	r3, #4
   16f0c:	f842 3f10 	str.w	r3, [r2, #16]!
   16f10:	4830      	ldr	r0, [pc, #192]	; (16fd4 <bt_hci_le_enh_conn_complete+0x364>)
   16f12:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   16f16:	f01e fc9f 	bl	35858 <z_log_msg_static_create.constprop.0>
   16f1a:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   16f1c:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   16f20:	07d9      	lsls	r1, r3, #31
   16f22:	d518      	bpl.n	16f56 <bt_hci_le_enh_conn_complete+0x2e6>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   16f24:	2100      	movs	r1, #0
   16f26:	2302      	movs	r3, #2
   16f28:	9100      	str	r1, [sp, #0]
   16f2a:	461a      	mov	r2, r3
   16f2c:	4620      	mov	r0, r4
   16f2e:	f01e fd06 	bl	3593e <bt_le_set_phy>
		if (err) {
   16f32:	b180      	cbz	r0, 16f56 <bt_hci_le_enh_conn_complete+0x2e6>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   16f34:	466e      	mov	r6, sp
   16f36:	b088      	sub	sp, #32
   16f38:	aa02      	add	r2, sp, #8
   16f3a:	4b27      	ldr	r3, [pc, #156]	; (16fd8 <bt_hci_le_enh_conn_complete+0x368>)
   16f3c:	6153      	str	r3, [r2, #20]
   16f3e:	4b24      	ldr	r3, [pc, #144]	; (16fd0 <bt_hci_le_enh_conn_complete+0x360>)
   16f40:	e9c2 3006 	strd	r3, r0, [r2, #24]
   16f44:	2304      	movs	r3, #4
   16f46:	f842 3f10 	str.w	r3, [r2, #16]!
   16f4a:	4822      	ldr	r0, [pc, #136]	; (16fd4 <bt_hci_le_enh_conn_complete+0x364>)
   16f4c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   16f50:	f01e fc82 	bl	35858 <z_log_msg_static_create.constprop.0>
   16f54:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   16f56:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   16f5a:	069a      	lsls	r2, r3, #26
   16f5c:	d520      	bpl.n	16fa0 <bt_hci_le_enh_conn_complete+0x330>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   16f5e:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   16f62:	689b      	ldr	r3, [r3, #8]
   16f64:	079b      	lsls	r3, r3, #30
   16f66:	d51b      	bpl.n	16fa0 <bt_hci_le_enh_conn_complete+0x330>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   16f68:	1db9      	adds	r1, r7, #6
   16f6a:	1d38      	adds	r0, r7, #4
   16f6c:	f7ff fe22 	bl	16bb4 <hci_le_read_max_data_len>
			if (!err) {
   16f70:	b9b0      	cbnz	r0, 16fa0 <bt_hci_le_enh_conn_complete+0x330>
				err = bt_le_set_data_len(conn,
   16f72:	88fa      	ldrh	r2, [r7, #6]
   16f74:	88b9      	ldrh	r1, [r7, #4]
   16f76:	4620      	mov	r0, r4
   16f78:	f01e fcc3 	bl	35902 <bt_le_set_data_len>
				if (err) {
   16f7c:	b180      	cbz	r0, 16fa0 <bt_hci_le_enh_conn_complete+0x330>
					LOG_ERR("Failed to set data len (%d)", err);
   16f7e:	466d      	mov	r5, sp
   16f80:	b088      	sub	sp, #32
   16f82:	aa02      	add	r2, sp, #8
   16f84:	4b15      	ldr	r3, [pc, #84]	; (16fdc <bt_hci_le_enh_conn_complete+0x36c>)
   16f86:	6153      	str	r3, [r2, #20]
   16f88:	4b11      	ldr	r3, [pc, #68]	; (16fd0 <bt_hci_le_enh_conn_complete+0x360>)
   16f8a:	e9c2 3006 	strd	r3, r0, [r2, #24]
   16f8e:	2304      	movs	r3, #4
   16f90:	f842 3f10 	str.w	r3, [r2, #16]!
   16f94:	480f      	ldr	r0, [pc, #60]	; (16fd4 <bt_hci_le_enh_conn_complete+0x364>)
   16f96:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   16f9a:	f01e fc5d 	bl	35858 <z_log_msg_static_create.constprop.0>
   16f9e:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
   16fa0:	4620      	mov	r0, r4
   16fa2:	e6a8      	b.n	16cf6 <bt_hci_le_enh_conn_complete+0x86>
   16fa4:	f108 0161 	add.w	r1, r8, #97	; 0x61
   16fa8:	e76c      	b.n	16e84 <bt_hci_le_enh_conn_complete+0x214>
						&bt_dev.id_addr[conn->id]);
   16faa:	7a21      	ldrb	r1, [r4, #8]
   16fac:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   16fb0:	4441      	add	r1, r8
   16fb2:	f104 0096 	add.w	r0, r4, #150	; 0x96
   16fb6:	f01e fc38 	bl	3582a <bt_addr_le_copy>
   16fba:	e765      	b.n	16e88 <bt_hci_le_enh_conn_complete+0x218>
		return -ENOBUFS;
   16fbc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16fc0:	e79b      	b.n	16efa <bt_hci_le_enh_conn_complete+0x28a>
   16fc2:	bf00      	nop
   16fc4:	20000000 	.word	0x20000000
   16fc8:	0003c0b6 	.word	0x0003c0b6
   16fcc:	0003c711 	.word	0x0003c711
   16fd0:	0003cdc0 	.word	0x0003cdc0
   16fd4:	000395c0 	.word	0x000395c0
   16fd8:	0003c736 	.word	0x0003c736
   16fdc:	0003c751 	.word	0x0003c751

00016fe0 <le_legacy_conn_complete>:
{
   16fe0:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   16fe2:	68c1      	ldr	r1, [r0, #12]
{
   16fe4:	b089      	sub	sp, #36	; 0x24
	enh.status         = evt->status;
   16fe6:	780b      	ldrb	r3, [r1, #0]
   16fe8:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   16fec:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   16ff0:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   16ff4:	78cb      	ldrb	r3, [r1, #3]
   16ff6:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   16ffa:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   16ffe:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   17002:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   17006:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   1700a:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   1700e:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   17012:	7c4b      	ldrb	r3, [r1, #17]
   17014:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   17018:	a801      	add	r0, sp, #4
   1701a:	3104      	adds	r1, #4
   1701c:	f01e fc05 	bl	3582a <bt_addr_le_copy>
   17020:	4908      	ldr	r1, [pc, #32]	; (17044 <le_legacy_conn_complete+0x64>)
   17022:	2206      	movs	r2, #6
   17024:	f10d 000b 	add.w	r0, sp, #11
   17028:	f01e fa85 	bl	35536 <memcpy>
   1702c:	4906      	ldr	r1, [pc, #24]	; (17048 <le_legacy_conn_complete+0x68>)
   1702e:	2206      	movs	r2, #6
   17030:	f10d 0011 	add.w	r0, sp, #17
   17034:	f01e fa7f 	bl	35536 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   17038:	4668      	mov	r0, sp
   1703a:	f7ff fe19 	bl	16c70 <bt_hci_le_enh_conn_complete>
}
   1703e:	b009      	add	sp, #36	; 0x24
   17040:	f85d fb04 	ldr.w	pc, [sp], #4
   17044:	20000061 	.word	0x20000061
   17048:	0003c0b6 	.word	0x0003c0b6

0001704c <bt_unpair>:
{
   1704c:	b513      	push	{r0, r1, r4, lr}
   1704e:	460c      	mov	r4, r1
   17050:	f88d 0007 	strb.w	r0, [sp, #7]
	if (id >= CONFIG_BT_ID_MAX) {
   17054:	b9b8      	cbnz	r0, 17086 <bt_unpair+0x3a>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   17056:	b949      	cbnz	r1, 1706c <bt_unpair+0x20>
		bt_foreach_bond(id, unpair_remote, &id);
   17058:	490c      	ldr	r1, [pc, #48]	; (1708c <bt_unpair+0x40>)
   1705a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1705e:	f10d 0207 	add.w	r2, sp, #7
   17062:	f007 fe75 	bl	1ed50 <bt_foreach_bond>
		return 0;
   17066:	2000      	movs	r0, #0
}
   17068:	b002      	add	sp, #8
   1706a:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
   1706c:	4908      	ldr	r1, [pc, #32]	; (17090 <bt_unpair+0x44>)
   1706e:	2207      	movs	r2, #7
   17070:	4620      	mov	r0, r4
   17072:	f01e fa50 	bl	35516 <memcmp>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   17076:	2800      	cmp	r0, #0
   17078:	d0ee      	beq.n	17058 <bt_unpair+0xc>
	unpair(id, addr);
   1707a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1707e:	4621      	mov	r1, r4
   17080:	f7fe ff1a 	bl	15eb8 <unpair>
	return 0;
   17084:	e7ef      	b.n	17066 <bt_unpair+0x1a>
		return -EINVAL;
   17086:	f06f 0015 	mvn.w	r0, #21
   1708a:	e7ed      	b.n	17068 <bt_unpair+0x1c>
   1708c:	0003584f 	.word	0x0003584f
   17090:	0003c0a9 	.word	0x0003c0a9

00017094 <bt_security_err_get>:
	switch (hci_err) {
   17094:	2829      	cmp	r0, #41	; 0x29
   17096:	bf9a      	itte	ls
   17098:	4b01      	ldrls	r3, [pc, #4]	; (170a0 <bt_security_err_get+0xc>)
   1709a:	5c18      	ldrbls	r0, [r3, r0]
{
   1709c:	2009      	movhi	r0, #9
}
   1709e:	4770      	bx	lr
   170a0:	0003caed 	.word	0x0003caed

000170a4 <hci_encrypt_key_refresh_complete>:
{
   170a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   170a6:	68c3      	ldr	r3, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   170a8:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   170ac:	781d      	ldrb	r5, [r3, #0]
{
   170ae:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   170b0:	4630      	mov	r0, r6
   170b2:	f002 f945 	bl	19340 <bt_conn_lookup_handle>
	if (!conn) {
   170b6:	4604      	mov	r4, r0
   170b8:	b990      	cbnz	r0, 170e0 <hci_encrypt_key_refresh_complete+0x3c>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   170ba:	466c      	mov	r4, sp
   170bc:	b088      	sub	sp, #32
   170be:	466a      	mov	r2, sp
   170c0:	4b21      	ldr	r3, [pc, #132]	; (17148 <hci_encrypt_key_refresh_complete+0xa4>)
   170c2:	6153      	str	r3, [r2, #20]
   170c4:	4b21      	ldr	r3, [pc, #132]	; (1714c <hci_encrypt_key_refresh_complete+0xa8>)
   170c6:	4822      	ldr	r0, [pc, #136]	; (17150 <hci_encrypt_key_refresh_complete+0xac>)
   170c8:	e9c2 3606 	strd	r3, r6, [r2, #24]
   170cc:	2304      	movs	r3, #4
   170ce:	f842 3f10 	str.w	r3, [r2, #16]!
   170d2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   170d6:	f01e fbbf 	bl	35858 <z_log_msg_static_create.constprop.0>
   170da:	46a5      	mov	sp, r4
}
   170dc:	46bd      	mov	sp, r7
   170de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (status) {
   170e0:	b15d      	cbz	r5, 170fa <hci_encrypt_key_refresh_complete+0x56>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   170e2:	4628      	mov	r0, r5
   170e4:	f7ff ffd6 	bl	17094 <bt_security_err_get>
   170e8:	4629      	mov	r1, r5
   170ea:	4602      	mov	r2, r0
   170ec:	4620      	mov	r0, r4
   170ee:	f002 fb11 	bl	19714 <bt_conn_security_changed>
	bt_conn_unref(conn);
   170f2:	4620      	mov	r0, r4
   170f4:	f01e ff15 	bl	35f22 <bt_conn_unref>
   170f8:	e7f0      	b.n	170dc <hci_encrypt_key_refresh_complete+0x38>
	if (conn->type == BT_CONN_TYPE_LE) {
   170fa:	7883      	ldrb	r3, [r0, #2]
   170fc:	2b01      	cmp	r3, #1
   170fe:	d1f0      	bne.n	170e2 <hci_encrypt_key_refresh_complete+0x3e>
		bt_smp_update_keys(conn);
   17100:	f007 fd1e 	bl	1eb40 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   17104:	4620      	mov	r0, r4
   17106:	f01e fb77 	bl	357f8 <update_sec_level>
   1710a:	2800      	cmp	r0, #0
   1710c:	d1e9      	bne.n	170e2 <hci_encrypt_key_refresh_complete+0x3e>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1710e:	2005      	movs	r0, #5
   17110:	f7ff ffc0 	bl	17094 <bt_security_err_get>
   17114:	2105      	movs	r1, #5
   17116:	4602      	mov	r2, r0
   17118:	4620      	mov	r0, r4
   1711a:	f002 fafb 	bl	19714 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   1711e:	466d      	mov	r5, sp
   17120:	b088      	sub	sp, #32
   17122:	466a      	mov	r2, sp
   17124:	4b0b      	ldr	r3, [pc, #44]	; (17154 <hci_encrypt_key_refresh_complete+0xb0>)
   17126:	6153      	str	r3, [r2, #20]
   17128:	4b08      	ldr	r3, [pc, #32]	; (1714c <hci_encrypt_key_refresh_complete+0xa8>)
   1712a:	6193      	str	r3, [r2, #24]
   1712c:	2303      	movs	r3, #3
   1712e:	f842 3f10 	str.w	r3, [r2, #16]!
   17132:	4807      	ldr	r0, [pc, #28]	; (17150 <hci_encrypt_key_refresh_complete+0xac>)
   17134:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17138:	f01e fb8e 	bl	35858 <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
   1713c:	2105      	movs	r1, #5
   1713e:	46ad      	mov	sp, r5
   17140:	4620      	mov	r0, r4
   17142:	f01e ff35 	bl	35fb0 <bt_conn_disconnect>
   17146:	e7d4      	b.n	170f2 <hci_encrypt_key_refresh_complete+0x4e>
   17148:	0003c471 	.word	0x0003c471
   1714c:	0003cd1e 	.word	0x0003cd1e
   17150:	000395c0 	.word	0x000395c0
   17154:	0003c771 	.word	0x0003c771

00017158 <hci_encrypt_change>:
{
   17158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   1715c:	68c6      	ldr	r6, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1715e:	f8b6 8001 	ldrh.w	r8, [r6, #1]
	uint8_t status = evt->status;
   17162:	7835      	ldrb	r5, [r6, #0]
{
   17164:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   17166:	4640      	mov	r0, r8
   17168:	f002 f8ea 	bl	19340 <bt_conn_lookup_handle>
	if (!conn) {
   1716c:	4604      	mov	r4, r0
   1716e:	b998      	cbnz	r0, 17198 <hci_encrypt_change+0x40>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   17170:	466c      	mov	r4, sp
   17172:	b088      	sub	sp, #32
   17174:	466a      	mov	r2, sp
   17176:	4b27      	ldr	r3, [pc, #156]	; (17214 <hci_encrypt_change+0xbc>)
   17178:	6153      	str	r3, [r2, #20]
   1717a:	4b27      	ldr	r3, [pc, #156]	; (17218 <hci_encrypt_change+0xc0>)
   1717c:	4827      	ldr	r0, [pc, #156]	; (1721c <hci_encrypt_change+0xc4>)
   1717e:	e9c2 3806 	strd	r3, r8, [r2, #24]
   17182:	2304      	movs	r3, #4
   17184:	f842 3f10 	str.w	r3, [r2, #16]!
   17188:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1718c:	f01e fb64 	bl	35858 <z_log_msg_static_create.constprop.0>
   17190:	46a5      	mov	sp, r4
}
   17192:	46bd      	mov	sp, r7
   17194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (status) {
   17198:	b15d      	cbz	r5, 171b2 <hci_encrypt_change+0x5a>
		bt_conn_security_changed(conn, status,
   1719a:	4628      	mov	r0, r5
   1719c:	f7ff ff7a 	bl	17094 <bt_security_err_get>
   171a0:	4629      	mov	r1, r5
   171a2:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   171a4:	4620      	mov	r0, r4
   171a6:	f002 fab5 	bl	19714 <bt_conn_security_changed>
	bt_conn_unref(conn);
   171aa:	4620      	mov	r0, r4
   171ac:	f01e feb9 	bl	35f22 <bt_conn_unref>
   171b0:	e7ef      	b.n	17192 <hci_encrypt_change+0x3a>
	if (conn->type == BT_CONN_TYPE_LE) {
   171b2:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   171b4:	78f3      	ldrb	r3, [r6, #3]
   171b6:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   171b8:	2a01      	cmp	r2, #1
   171ba:	d005      	beq.n	171c8 <hci_encrypt_change+0x70>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   171bc:	2000      	movs	r0, #0
   171be:	f7ff ff69 	bl	17094 <bt_security_err_get>
   171c2:	2100      	movs	r1, #0
   171c4:	4602      	mov	r2, r0
   171c6:	e7ed      	b.n	171a4 <hci_encrypt_change+0x4c>
		if (conn->encrypt) {
   171c8:	b10b      	cbz	r3, 171ce <hci_encrypt_change+0x76>
			bt_smp_update_keys(conn);
   171ca:	f007 fcb9 	bl	1eb40 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   171ce:	4620      	mov	r0, r4
   171d0:	f01e fb12 	bl	357f8 <update_sec_level>
   171d4:	2800      	cmp	r0, #0
   171d6:	d1f1      	bne.n	171bc <hci_encrypt_change+0x64>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   171d8:	2005      	movs	r0, #5
   171da:	f7ff ff5b 	bl	17094 <bt_security_err_get>
   171de:	2105      	movs	r1, #5
   171e0:	4602      	mov	r2, r0
   171e2:	4620      	mov	r0, r4
   171e4:	f002 fa96 	bl	19714 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   171e8:	466d      	mov	r5, sp
   171ea:	b088      	sub	sp, #32
   171ec:	466a      	mov	r2, sp
   171ee:	4b0c      	ldr	r3, [pc, #48]	; (17220 <hci_encrypt_change+0xc8>)
   171f0:	6153      	str	r3, [r2, #20]
   171f2:	4b09      	ldr	r3, [pc, #36]	; (17218 <hci_encrypt_change+0xc0>)
   171f4:	6193      	str	r3, [r2, #24]
   171f6:	2303      	movs	r3, #3
   171f8:	f842 3f10 	str.w	r3, [r2, #16]!
   171fc:	4807      	ldr	r0, [pc, #28]	; (1721c <hci_encrypt_change+0xc4>)
   171fe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17202:	f01e fb29 	bl	35858 <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
   17206:	2105      	movs	r1, #5
   17208:	46ad      	mov	sp, r5
   1720a:	4620      	mov	r0, r4
   1720c:	f01e fed0 	bl	35fb0 <bt_conn_disconnect>
   17210:	e7cb      	b.n	171aa <hci_encrypt_change+0x52>
   17212:	bf00      	nop
   17214:	0003c471 	.word	0x0003c471
   17218:	0003cd0b 	.word	0x0003cd0b
   1721c:	000395c0 	.word	0x000395c0
   17220:	0003c771 	.word	0x0003c771

00017224 <hci_event_prio>:
{
   17224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17228:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   1722a:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   1722e:	4630      	mov	r0, r6
   17230:	f020 fc55 	bl	37ade <net_buf_simple_headroom>
	state->len = buf->len;
   17234:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   17238:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   1723c:	4605      	mov	r5, r0
   1723e:	d80c      	bhi.n	1725a <hci_event_prio+0x36>
   17240:	4a1c      	ldr	r2, [pc, #112]	; (172b4 <hci_event_prio+0x90>)
   17242:	491d      	ldr	r1, [pc, #116]	; (172b8 <hci_event_prio+0x94>)
   17244:	481d      	ldr	r0, [pc, #116]	; (172bc <hci_event_prio+0x98>)
   17246:	f640 5383 	movw	r3, #3459	; 0xd83
   1724a:	f01c f8e5 	bl	33418 <assert_print>
   1724e:	4040      	eors	r0, r0
   17250:	f380 8811 	msr	BASEPRI, r0
   17254:	f04f 0003 	mov.w	r0, #3
   17258:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   1725a:	4630      	mov	r0, r6
   1725c:	2102      	movs	r1, #2
   1725e:	f020 fc2e 	bl	37abe <net_buf_simple_pull_mem>
   17262:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   17264:	7800      	ldrb	r0, [r0, #0]
   17266:	f01e fab5 	bl	357d4 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1726a:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1726c:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1726e:	d40c      	bmi.n	1728a <hci_event_prio+0x66>
   17270:	4a10      	ldr	r2, [pc, #64]	; (172b4 <hci_event_prio+0x90>)
   17272:	4913      	ldr	r1, [pc, #76]	; (172c0 <hci_event_prio+0x9c>)
   17274:	4811      	ldr	r0, [pc, #68]	; (172bc <hci_event_prio+0x98>)
   17276:	f640 5387 	movw	r3, #3463	; 0xd87
   1727a:	f01c f8cd 	bl	33418 <assert_print>
   1727e:	4040      	eors	r0, r0
   17280:	f380 8811 	msr	BASEPRI, r0
   17284:	f04f 0003 	mov.w	r0, #3
   17288:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   1728a:	2305      	movs	r3, #5
   1728c:	4a0d      	ldr	r2, [pc, #52]	; (172c4 <hci_event_prio+0xa0>)
   1728e:	7838      	ldrb	r0, [r7, #0]
   17290:	4621      	mov	r1, r4
   17292:	f7fe ff7f 	bl	16194 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   17296:	07b3      	lsls	r3, r6, #30
   17298:	d507      	bpl.n	172aa <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   1729a:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   1729c:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   172a0:	fa13 f585 	uxtah	r5, r3, r5
   172a4:	60e5      	str	r5, [r4, #12]
}
   172a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   172aa:	4620      	mov	r0, r4
}
   172ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   172b0:	f016 bad6 	b.w	2d860 <net_buf_unref>
   172b4:	0003c531 	.word	0x0003c531
   172b8:	0003c79b 	.word	0x0003c79b
   172bc:	0003c56e 	.word	0x0003c56e
   172c0:	0003c7b4 	.word	0x0003c7b4
   172c4:	00039ba4 	.word	0x00039ba4

000172c8 <bt_recv>:
{
   172c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   172ca:	7e03      	ldrb	r3, [r0, #24]
	switch (bt_buf_get_type(buf)) {
   172cc:	2b01      	cmp	r3, #1
{
   172ce:	af00      	add	r7, sp, #0
   172d0:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   172d2:	d058      	beq.n	17386 <bt_recv+0xbe>
   172d4:	2b03      	cmp	r3, #3
   172d6:	f040 8085 	bne.w	173e4 <bt_recv+0x11c>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   172da:	8a03      	ldrh	r3, [r0, #16]
   172dc:	2b03      	cmp	r3, #3
   172de:	d80c      	bhi.n	172fa <bt_recv+0x32>
   172e0:	4a4c      	ldr	r2, [pc, #304]	; (17414 <bt_recv+0x14c>)
   172e2:	494d      	ldr	r1, [pc, #308]	; (17418 <bt_recv+0x150>)
   172e4:	484d      	ldr	r0, [pc, #308]	; (1741c <bt_recv+0x154>)
   172e6:	f240 13ed 	movw	r3, #493	; 0x1ed
   172ea:	f01c f895 	bl	33418 <assert_print>
   172ee:	4040      	eors	r0, r0
   172f0:	f380 8811 	msr	BASEPRI, r0
   172f4:	f04f 0003 	mov.w	r0, #3
   172f8:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   172fa:	2104      	movs	r1, #4
   172fc:	f104 000c 	add.w	r0, r4, #12
   17300:	f020 fbdd 	bl	37abe <net_buf_simple_pull_mem>
	if (buf->len != len) {
   17304:	8a21      	ldrh	r1, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
   17306:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   17308:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   1730a:	22ff      	movs	r2, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
   1730c:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   17310:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
   17312:	8360      	strh	r0, [r4, #26]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   17314:	7662      	strb	r2, [r4, #25]
	if (buf->len != len) {
   17316:	d015      	beq.n	17344 <bt_recv+0x7c>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   17318:	466d      	mov	r5, sp
   1731a:	b08a      	sub	sp, #40	; 0x28
   1731c:	466a      	mov	r2, sp
   1731e:	4840      	ldr	r0, [pc, #256]	; (17420 <bt_recv+0x158>)
   17320:	6150      	str	r0, [r2, #20]
   17322:	4840      	ldr	r0, [pc, #256]	; (17424 <bt_recv+0x15c>)
   17324:	6213      	str	r3, [r2, #32]
   17326:	2305      	movs	r3, #5
   17328:	e9c2 0106 	strd	r0, r1, [r2, #24]
   1732c:	f842 3f10 	str.w	r3, [r2, #16]!
   17330:	f44f 5121 	mov.w	r1, #10304	; 0x2840
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   17334:	483c      	ldr	r0, [pc, #240]	; (17428 <bt_recv+0x160>)
   17336:	f01e fa8f 	bl	35858 <z_log_msg_static_create.constprop.0>
   1733a:	46ad      	mov	sp, r5
	net_buf_unref(buf);
   1733c:	4620      	mov	r0, r4
   1733e:	f016 fa8f 	bl	2d860 <net_buf_unref>
}
   17342:	e01d      	b.n	17380 <bt_recv+0xb8>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   17344:	f001 fffc 	bl	19340 <bt_conn_lookup_handle>
	if (!conn) {
   17348:	4605      	mov	r5, r0
   1734a:	b970      	cbnz	r0, 1736a <bt_recv+0xa2>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   1734c:	466d      	mov	r5, sp
   1734e:	b088      	sub	sp, #32
   17350:	8b63      	ldrh	r3, [r4, #26]
   17352:	466a      	mov	r2, sp
   17354:	4935      	ldr	r1, [pc, #212]	; (1742c <bt_recv+0x164>)
   17356:	6151      	str	r1, [r2, #20]
   17358:	4932      	ldr	r1, [pc, #200]	; (17424 <bt_recv+0x15c>)
   1735a:	e9c2 1306 	strd	r1, r3, [r2, #24]
   1735e:	2304      	movs	r3, #4
   17360:	f842 3f10 	str.w	r3, [r2, #16]!
   17364:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   17368:	e7e4      	b.n	17334 <bt_recv+0x6c>
	acl(buf)->index = bt_conn_index(conn);
   1736a:	f002 f905 	bl	19578 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   1736e:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   17370:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   17372:	4621      	mov	r1, r4
   17374:	4628      	mov	r0, r5
   17376:	f001 fe6f 	bl	19058 <bt_conn_recv>
	bt_conn_unref(conn);
   1737a:	4628      	mov	r0, r5
   1737c:	f01e fdd1 	bl	35f22 <bt_conn_unref>
		return 0;
   17380:	2000      	movs	r0, #0
}
   17382:	46bd      	mov	sp, r7
   17384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   17386:	8a03      	ldrh	r3, [r0, #16]
   17388:	2b01      	cmp	r3, #1
   1738a:	d80c      	bhi.n	173a6 <bt_recv+0xde>
   1738c:	4a21      	ldr	r2, [pc, #132]	; (17414 <bt_recv+0x14c>)
   1738e:	4922      	ldr	r1, [pc, #136]	; (17418 <bt_recv+0x150>)
   17390:	4822      	ldr	r0, [pc, #136]	; (1741c <bt_recv+0x154>)
   17392:	f640 136d 	movw	r3, #2413	; 0x96d
   17396:	f01c f83f 	bl	33418 <assert_print>
   1739a:	4040      	eors	r0, r0
   1739c:	f380 8811 	msr	BASEPRI, r0
   173a0:	f04f 0003 	mov.w	r0, #3
   173a4:	df02      	svc	2
   173a6:	2102      	movs	r1, #2
   173a8:	f104 000c 	add.w	r0, r4, #12
   173ac:	f020 fb87 	bl	37abe <net_buf_simple_pull_mem>
   173b0:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   173b2:	7800      	ldrb	r0, [r0, #0]
   173b4:	f01e fa0e 	bl	357d4 <bt_hci_evt_get_flags>
   173b8:	0783      	lsls	r3, r0, #30
   173ba:	d40c      	bmi.n	173d6 <bt_recv+0x10e>
   173bc:	4a15      	ldr	r2, [pc, #84]	; (17414 <bt_recv+0x14c>)
   173be:	491c      	ldr	r1, [pc, #112]	; (17430 <bt_recv+0x168>)
   173c0:	4816      	ldr	r0, [pc, #88]	; (1741c <bt_recv+0x154>)
   173c2:	f640 1371 	movw	r3, #2417	; 0x971
   173c6:	f01c f827 	bl	33418 <assert_print>
   173ca:	4040      	eors	r0, r0
   173cc:	f380 8811 	msr	BASEPRI, r0
   173d0:	f04f 0003 	mov.w	r0, #3
   173d4:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   173d6:	4a17      	ldr	r2, [pc, #92]	; (17434 <bt_recv+0x16c>)
   173d8:	7828      	ldrb	r0, [r5, #0]
   173da:	2306      	movs	r3, #6
   173dc:	4621      	mov	r1, r4
   173de:	f7fe fed9 	bl	16194 <handle_event>
   173e2:	e7ab      	b.n	1733c <bt_recv+0x74>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   173e4:	466d      	mov	r5, sp
   173e6:	b088      	sub	sp, #32
   173e8:	466a      	mov	r2, sp
   173ea:	4913      	ldr	r1, [pc, #76]	; (17438 <bt_recv+0x170>)
   173ec:	6151      	str	r1, [r2, #20]
   173ee:	4913      	ldr	r1, [pc, #76]	; (1743c <bt_recv+0x174>)
   173f0:	480d      	ldr	r0, [pc, #52]	; (17428 <bt_recv+0x160>)
	switch (bt_buf_get_type(buf)) {
   173f2:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   173f6:	2304      	movs	r3, #4
   173f8:	f842 3f10 	str.w	r3, [r2, #16]!
   173fc:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   17400:	f01e fa2a 	bl	35858 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   17404:	4620      	mov	r0, r4
   17406:	46ad      	mov	sp, r5
   17408:	f016 fa2a 	bl	2d860 <net_buf_unref>
		return -EINVAL;
   1740c:	f06f 0015 	mvn.w	r0, #21
   17410:	e7b7      	b.n	17382 <bt_recv+0xba>
   17412:	bf00      	nop
   17414:	0003c531 	.word	0x0003c531
   17418:	0003c79b 	.word	0x0003c79b
   1741c:	0003c56e 	.word	0x0003c56e
   17420:	0003c7cd 	.word	0x0003c7cd
   17424:	0003cd52 	.word	0x0003cd52
   17428:	000395c0 	.word	0x000395c0
   1742c:	0003c7f5 	.word	0x0003c7f5
   17430:	0003c81b 	.word	0x0003c81b
   17434:	00039bcc 	.word	0x00039bcc
   17438:	0003c849 	.word	0x0003c849
   1743c:	0003cd5a 	.word	0x0003cd5a

00017440 <bt_recv_prio>:
{
   17440:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   17442:	7e03      	ldrb	r3, [r0, #24]
   17444:	2b01      	cmp	r3, #1
{
   17446:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   17448:	d00c      	beq.n	17464 <bt_recv_prio+0x24>
   1744a:	4a09      	ldr	r2, [pc, #36]	; (17470 <bt_recv_prio+0x30>)
   1744c:	4909      	ldr	r1, [pc, #36]	; (17474 <bt_recv_prio+0x34>)
   1744e:	480a      	ldr	r0, [pc, #40]	; (17478 <bt_recv_prio+0x38>)
   17450:	f640 53d9 	movw	r3, #3545	; 0xdd9
   17454:	f01b ffe0 	bl	33418 <assert_print>
   17458:	4040      	eors	r0, r0
   1745a:	f380 8811 	msr	BASEPRI, r0
   1745e:	f04f 0003 	mov.w	r0, #3
   17462:	df02      	svc	2
	hci_event_prio(buf);
   17464:	4620      	mov	r0, r4
   17466:	f7ff fedd 	bl	17224 <hci_event_prio>
}
   1746a:	2000      	movs	r0, #0
   1746c:	bd10      	pop	{r4, pc}
   1746e:	bf00      	nop
   17470:	0003c531 	.word	0x0003c531
   17474:	0003c861 	.word	0x0003c861
   17478:	0003c56e 	.word	0x0003c56e

0001747c <bt_hci_driver_register>:
	if (bt_dev.drv) {
   1747c:	4a08      	ldr	r2, [pc, #32]	; (174a0 <bt_hci_driver_register+0x24>)
{
   1747e:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   17480:	f8d2 0154 	ldr.w	r0, [r2, #340]	; 0x154
   17484:	b930      	cbnz	r0, 17494 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   17486:	68d9      	ldr	r1, [r3, #12]
   17488:	b139      	cbz	r1, 1749a <bt_hci_driver_register+0x1e>
   1748a:	6959      	ldr	r1, [r3, #20]
   1748c:	b129      	cbz	r1, 1749a <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   1748e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
	return 0;
   17492:	4770      	bx	lr
		return -EALREADY;
   17494:	f06f 0077 	mvn.w	r0, #119	; 0x77
   17498:	4770      	bx	lr
		return -EINVAL;
   1749a:	f06f 0015 	mvn.w	r0, #21
}
   1749e:	4770      	bx	lr
   174a0:	20000000 	.word	0x20000000

000174a4 <bt_finalize_init>:
{
   174a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   174a8:	4d48      	ldr	r5, [pc, #288]	; (175cc <bt_finalize_init+0x128>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   174aa:	4849      	ldr	r0, [pc, #292]	; (175d0 <bt_finalize_init+0x12c>)
   174ac:	4c49      	ldr	r4, [pc, #292]	; (175d4 <bt_finalize_init+0x130>)
{
   174ae:	b083      	sub	sp, #12
   174b0:	2104      	movs	r1, #4
   174b2:	af00      	add	r7, sp, #0
   174b4:	f01e f9bc 	bl	35830 <atomic_or>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   174b8:	79ea      	ldrb	r2, [r5, #7]
   174ba:	4b47      	ldr	r3, [pc, #284]	; (175d8 <bt_finalize_init+0x134>)
   174bc:	4628      	mov	r0, r5
   174be:	2a01      	cmp	r2, #1
   174c0:	bf88      	it	hi
   174c2:	461c      	movhi	r4, r3
   174c4:	46e8      	mov	r8, sp
   174c6:	f7fe f85f 	bl	15588 <bt_addr_le_str>
   174ca:	b08a      	sub	sp, #40	; 0x28
   174cc:	466b      	mov	r3, sp
   174ce:	4943      	ldr	r1, [pc, #268]	; (175dc <bt_finalize_init+0x138>)
   174d0:	4e43      	ldr	r6, [pc, #268]	; (175e0 <bt_finalize_init+0x13c>)
   174d2:	6159      	str	r1, [r3, #20]
   174d4:	4943      	ldr	r1, [pc, #268]	; (175e4 <bt_finalize_init+0x140>)
   174d6:	6079      	str	r1, [r7, #4]
   174d8:	e9c3 6406 	strd	r6, r4, [r3, #24]
   174dc:	6218      	str	r0, [r3, #32]
   174de:	f103 0210 	add.w	r2, r3, #16
   174e2:	1d38      	adds	r0, r7, #4
   174e4:	f103 0123 	add.w	r1, r3, #35	; 0x23
   174e8:	f103 0427 	add.w	r4, r3, #39	; 0x27
   174ec:	f810 cb01 	ldrb.w	ip, [r0], #1
   174f0:	f801 cf01 	strb.w	ip, [r1, #1]!
   174f4:	42a1      	cmp	r1, r4
   174f6:	d1f9      	bne.n	174ec <bt_finalize_init+0x48>
   174f8:	493b      	ldr	r1, [pc, #236]	; (175e8 <bt_finalize_init+0x144>)
   174fa:	6119      	str	r1, [r3, #16]
   174fc:	483b      	ldr	r0, [pc, #236]	; (175ec <bt_finalize_init+0x148>)
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   174fe:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 175f0 <bt_finalize_init+0x14c>
   17502:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 175ec <bt_finalize_init+0x148>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   17506:	f44f 5143 	mov.w	r1, #12480	; 0x30c0
   1750a:	f01e f9a5 	bl	35858 <z_log_msg_static_create.constprop.0>
   1750e:	46c5      	mov	sp, r8
	for (i = 1; i < bt_dev.id_count; i++) {
   17510:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 175cc <bt_finalize_init+0x128>
   17514:	2401      	movs	r4, #1
   17516:	79ea      	ldrb	r2, [r5, #7]
   17518:	4294      	cmp	r4, r2
   1751a:	f108 0807 	add.w	r8, r8, #7
   1751e:	db3d      	blt.n	1759c <bt_finalize_init+0xf8>
	LOG_INF("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   17520:	f895 8068 	ldrb.w	r8, [r5, #104]	; 0x68
   17524:	4640      	mov	r0, r8
   17526:	f7fe fcab 	bl	15e80 <ver_str>
   1752a:	46ea      	mov	sl, sp
   1752c:	b08c      	sub	sp, #48	; 0x30
   1752e:	f8b5 206a 	ldrh.w	r2, [r5, #106]	; 0x6a
   17532:	f8b5 306e 	ldrh.w	r3, [r5, #110]	; 0x6e
   17536:	466c      	mov	r4, sp
   17538:	492e      	ldr	r1, [pc, #184]	; (175f4 <bt_finalize_init+0x150>)
   1753a:	e9c4 0807 	strd	r0, r8, [r4, #28]
   1753e:	46a0      	mov	r8, r4
   17540:	e9c4 2309 	strd	r2, r3, [r4, #36]	; 0x24
   17544:	f240 3901 	movw	r9, #769	; 0x301
   17548:	4b2b      	ldr	r3, [pc, #172]	; (175f8 <bt_finalize_init+0x154>)
   1754a:	f8a4 902c 	strh.w	r9, [r4, #44]	; 0x2c
   1754e:	e9c4 1605 	strd	r1, r6, [r4, #20]
   17552:	f848 3f10 	str.w	r3, [r8, #16]!
   17556:	f44f 5173 	mov.w	r1, #15552	; 0x3cc0
   1755a:	4642      	mov	r2, r8
   1755c:	4823      	ldr	r0, [pc, #140]	; (175ec <bt_finalize_init+0x148>)
   1755e:	f01e f97b 	bl	35858 <z_log_msg_static_create.constprop.0>
   17562:	46d5      	mov	sp, sl
	LOG_INF("LMP: version %s (0x%02x) subver 0x%04x", ver_str(bt_dev.lmp_version),
   17564:	f895 a069 	ldrb.w	sl, [r5, #105]	; 0x69
   17568:	4650      	mov	r0, sl
   1756a:	f7fe fc89 	bl	15e80 <ver_str>
   1756e:	f8b5 306c 	ldrh.w	r3, [r5, #108]	; 0x6c
   17572:	46a5      	mov	sp, r4
   17574:	4a21      	ldr	r2, [pc, #132]	; (175fc <bt_finalize_init+0x158>)
   17576:	6263      	str	r3, [r4, #36]	; 0x24
   17578:	4b21      	ldr	r3, [pc, #132]	; (17600 <bt_finalize_init+0x15c>)
   1757a:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
   1757e:	e9c4 2605 	strd	r2, r6, [r4, #20]
   17582:	e9c4 0a07 	strd	r0, sl, [r4, #28]
   17586:	6123      	str	r3, [r4, #16]
   17588:	4818      	ldr	r0, [pc, #96]	; (175ec <bt_finalize_init+0x148>)
   1758a:	4642      	mov	r2, r8
   1758c:	f44f 5153 	mov.w	r1, #13504	; 0x34c0
   17590:	f01e f962 	bl	35858 <z_log_msg_static_create.constprop.0>
}
   17594:	370c      	adds	r7, #12
   17596:	46bd      	mov	sp, r7
   17598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   1759c:	4640      	mov	r0, r8
   1759e:	f7fd fff3 	bl	15588 <bt_addr_le_str>
   175a2:	46eb      	mov	fp, sp
   175a4:	b08a      	sub	sp, #40	; 0x28
   175a6:	466a      	mov	r2, sp
   175a8:	4b16      	ldr	r3, [pc, #88]	; (17604 <bt_finalize_init+0x160>)
   175aa:	f240 4102 	movw	r1, #1026	; 0x402
   175ae:	e9c2 4007 	strd	r4, r0, [r2, #28]
   175b2:	8491      	strh	r1, [r2, #36]	; 0x24
   175b4:	e9c2 3605 	strd	r3, r6, [r2, #20]
   175b8:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
   175bc:	f842 9f10 	str.w	r9, [r2, #16]!
   175c0:	4650      	mov	r0, sl
   175c2:	f01e f949 	bl	35858 <z_log_msg_static_create.constprop.0>
	for (i = 1; i < bt_dev.id_count; i++) {
   175c6:	3401      	adds	r4, #1
   175c8:	46dd      	mov	sp, fp
   175ca:	e7a4      	b.n	17516 <bt_finalize_init+0x72>
   175cc:	20000000 	.word	0x20000000
   175d0:	200000cc 	.word	0x200000cc
   175d4:	0003b7be 	.word	0x0003b7be
   175d8:	0003c884 	.word	0x0003c884
   175dc:	0003c888 	.word	0x0003c888
   175e0:	0003cc34 	.word	0x0003cc34
   175e4:	04020301 	.word	0x04020301
   175e8:	02000005 	.word	0x02000005
   175ec:	000395c0 	.word	0x000395c0
   175f0:	01000005 	.word	0x01000005
   175f4:	0003c8b0 	.word	0x0003c8b0
   175f8:	01000007 	.word	0x01000007
   175fc:	0003c8f2 	.word	0x0003c8f2
   17600:	01000006 	.word	0x01000006
   17604:	0003c89b 	.word	0x0003c89b

00017608 <bt_init.part.0>:
static int bt_init(void)
   17608:	b598      	push	{r3, r4, r7, lr}
		if (!bt_dev.id_count) {
   1760a:	480f      	ldr	r0, [pc, #60]	; (17648 <bt_init.part.0+0x40>)
   1760c:	79c3      	ldrb	r3, [r0, #7]
static int bt_init(void)
   1760e:	af00      	add	r7, sp, #0
		if (!bt_dev.id_count) {
   17610:	b993      	cbnz	r3, 17638 <bt_init.part.0+0x30>
			LOG_INF("No ID address. App must call settings_load()");
   17612:	466c      	mov	r4, sp
   17614:	b088      	sub	sp, #32
   17616:	466a      	mov	r2, sp
   17618:	4b0c      	ldr	r3, [pc, #48]	; (1764c <bt_init.part.0+0x44>)
   1761a:	6153      	str	r3, [r2, #20]
   1761c:	4b0c      	ldr	r3, [pc, #48]	; (17650 <bt_init.part.0+0x48>)
   1761e:	6193      	str	r3, [r2, #24]
   17620:	2303      	movs	r3, #3
   17622:	f842 3f10 	str.w	r3, [r2, #16]!
   17626:	480b      	ldr	r0, [pc, #44]	; (17654 <bt_init.part.0+0x4c>)
   17628:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   1762c:	f01e f914 	bl	35858 <z_log_msg_static_create.constprop.0>
   17630:	46a5      	mov	sp, r4
}
   17632:	2000      	movs	r0, #0
   17634:	46bd      	mov	sp, r7
   17636:	bd98      	pop	{r3, r4, r7, pc}
   17638:	2108      	movs	r1, #8
   1763a:	30cc      	adds	r0, #204	; 0xcc
   1763c:	f01e f8f8 	bl	35830 <atomic_or>
	bt_finalize_init();
   17640:	f7ff ff30 	bl	174a4 <bt_finalize_init>
	return 0;
   17644:	e7f5      	b.n	17632 <bt_init.part.0+0x2a>
   17646:	bf00      	nop
   17648:	20000000 	.word	0x20000000
   1764c:	0003c91d 	.word	0x0003c91d
   17650:	0003ce67 	.word	0x0003ce67
   17654:	000395c0 	.word	0x000395c0

00017658 <init_work>:

static void init_work(struct k_work *work)
{
   17658:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
   1765a:	f7f8 ff0d 	bl	10478 <bt_init>
	if (ready_cb) {
   1765e:	4b03      	ldr	r3, [pc, #12]	; (1766c <init_work+0x14>)
   17660:	681b      	ldr	r3, [r3, #0]
   17662:	b113      	cbz	r3, 1766a <init_work+0x12>
		ready_cb(err);
	}
}
   17664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   17668:	4718      	bx	r3
}
   1766a:	bd10      	pop	{r4, pc}
   1766c:	20001b2c 	.word	0x20001b2c

00017670 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   17670:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (!bt_dev.drv) {
   17672:	4d3a      	ldr	r5, [pc, #232]	; (1775c <bt_enable+0xec>)
{
   17674:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.drv) {
   17676:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
{
   1767a:	af08      	add	r7, sp, #32
   1767c:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   1767e:	b9ab      	cbnz	r3, 176ac <bt_enable+0x3c>
		LOG_ERR("No HCI driver registered");
   17680:	466c      	mov	r4, sp
   17682:	4622      	mov	r2, r4
   17684:	b088      	sub	sp, #32
   17686:	4b36      	ldr	r3, [pc, #216]	; (17760 <bt_enable+0xf0>)
   17688:	6163      	str	r3, [r4, #20]
   1768a:	4b36      	ldr	r3, [pc, #216]	; (17764 <bt_enable+0xf4>)
   1768c:	61a3      	str	r3, [r4, #24]
   1768e:	2303      	movs	r3, #3
   17690:	f842 3f10 	str.w	r3, [r2, #16]!
   17694:	4834      	ldr	r0, [pc, #208]	; (17768 <bt_enable+0xf8>)
   17696:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1769a:	f01e f8dd 	bl	35858 <z_log_msg_static_create.constprop.0>
   1769e:	46a5      	mov	sp, r4
		return -ENODEV;
   176a0:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   176a4:	4620      	mov	r0, r4
   176a6:	3704      	adds	r7, #4
   176a8:	46bd      	mov	sp, r7
   176aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   176ac:	f06f 0102 	mvn.w	r1, #2
   176b0:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   176b4:	f01e f8d3 	bl	3585e <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   176b8:	2101      	movs	r1, #1
   176ba:	f01e f8b9 	bl	35830 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   176be:	07c3      	lsls	r3, r0, #31
   176c0:	d448      	bmi.n	17754 <bt_enable+0xe4>
		err = bt_settings_init();
   176c2:	f7fe fb03 	bl	15ccc <bt_settings_init>
		if (err) {
   176c6:	4604      	mov	r4, r0
   176c8:	2800      	cmp	r0, #0
   176ca:	d1eb      	bne.n	176a4 <bt_enable+0x34>
	ready_cb = cb;
   176cc:	4b27      	ldr	r3, [pc, #156]	; (1776c <bt_enable+0xfc>)
   176ce:	601e      	str	r6, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   176d0:	2201      	movs	r2, #1
   176d2:	4611      	mov	r1, r2
   176d4:	f505 7090 	add.w	r0, r5, #288	; 0x120
   176d8:	f021 f8f3 	bl	388c2 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   176dc:	f505 709e 	add.w	r0, r5, #316	; 0x13c
   176e0:	f021 f8aa 	bl	38838 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   176e4:	2200      	movs	r2, #0
   176e6:	2300      	movs	r3, #0
   176e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   176ec:	f06f 0308 	mvn.w	r3, #8
   176f0:	e9cd 4302 	strd	r4, r3, [sp, #8]
   176f4:	e9cd 4400 	strd	r4, r4, [sp]
   176f8:	4b1d      	ldr	r3, [pc, #116]	; (17770 <bt_enable+0x100>)
   176fa:	491e      	ldr	r1, [pc, #120]	; (17774 <bt_enable+0x104>)
   176fc:	9404      	str	r4, [sp, #16]
   176fe:	f44f 7240 	mov.w	r2, #768	; 0x300
   17702:	481d      	ldr	r0, [pc, #116]	; (17778 <bt_enable+0x108>)
   17704:	f01a f858 	bl	317b8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   17708:	491c      	ldr	r1, [pc, #112]	; (1777c <bt_enable+0x10c>)
   1770a:	481b      	ldr	r0, [pc, #108]	; (17778 <bt_enable+0x108>)
   1770c:	f021 f805 	bl	3871a <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   17710:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   17714:	68db      	ldr	r3, [r3, #12]
   17716:	4798      	blx	r3
	if (err) {
   17718:	4604      	mov	r4, r0
   1771a:	b188      	cbz	r0, 17740 <bt_enable+0xd0>
		LOG_ERR("HCI driver open failed (%d)", err);
   1771c:	466d      	mov	r5, sp
   1771e:	462a      	mov	r2, r5
   17720:	b088      	sub	sp, #32
   17722:	4b17      	ldr	r3, [pc, #92]	; (17780 <bt_enable+0x110>)
   17724:	616b      	str	r3, [r5, #20]
   17726:	4b0f      	ldr	r3, [pc, #60]	; (17764 <bt_enable+0xf4>)
   17728:	e9c5 3006 	strd	r3, r0, [r5, #24]
   1772c:	2304      	movs	r3, #4
   1772e:	f842 3f10 	str.w	r3, [r2, #16]!
   17732:	480d      	ldr	r0, [pc, #52]	; (17768 <bt_enable+0xf8>)
   17734:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   17738:	f01e f88e 	bl	35858 <z_log_msg_static_create.constprop.0>
   1773c:	46ad      	mov	sp, r5
		return err;
   1773e:	e7b1      	b.n	176a4 <bt_enable+0x34>
	if (!cb) {
   17740:	b91e      	cbnz	r6, 1774a <bt_enable+0xda>
		return bt_init();
   17742:	f7f8 fe99 	bl	10478 <bt_init>
   17746:	4604      	mov	r4, r0
   17748:	e7ac      	b.n	176a4 <bt_enable+0x34>
	k_work_submit(&bt_dev.init);
   1774a:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   1774e:	f01a fb5f 	bl	31e10 <k_work_submit>
	return 0;
   17752:	e7a7      	b.n	176a4 <bt_enable+0x34>
		return -EALREADY;
   17754:	f06f 0477 	mvn.w	r4, #119	; 0x77
   17758:	e7a4      	b.n	176a4 <bt_enable+0x34>
   1775a:	bf00      	nop
   1775c:	20000000 	.word	0x20000000
   17760:	0003ca89 	.word	0x0003ca89
   17764:	0003cb3b 	.word	0x0003cb3b
   17768:	000395c0 	.word	0x000395c0
   1776c:	20001b2c 	.word	0x20001b2c
   17770:	0001641d 	.word	0x0001641d
   17774:	20003d00 	.word	0x20003d00
   17778:	200011c0 	.word	0x200011c0
   1777c:	0003caa6 	.word	0x0003caa6
   17780:	0003caac 	.word	0x0003caac

00017784 <bt_is_ready>:
   17784:	4b04      	ldr	r3, [pc, #16]	; (17798 <bt_is_ready+0x14>)
   17786:	f3bf 8f5b 	dmb	ish
   1778a:	6818      	ldr	r0, [r3, #0]
   1778c:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   17790:	f3c0 0080 	ubfx	r0, r0, #2, #1
   17794:	4770      	bx	lr
   17796:	bf00      	nop
   17798:	200000cc 	.word	0x200000cc

0001779c <bt_set_name>:
#else
BUILD_ASSERT(DEVICE_NAME_LEN < 248);
#endif

int bt_set_name(const char *name)
{
   1779c:	b5b0      	push	{r4, r5, r7, lr}
   1779e:	af00      	add	r7, sp, #0
   177a0:	4605      	mov	r5, r0
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	size_t len = strlen(name);
   177a2:	f01d fe88 	bl	354b6 <strlen>
	int err;

	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
   177a6:	2841      	cmp	r0, #65	; 0x41
	size_t len = strlen(name);
   177a8:	4604      	mov	r4, r0
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
   177aa:	d828      	bhi.n	177fe <bt_set_name+0x62>
		return -ENOMEM;
	}

	if (!strcmp(bt_dev.name, name)) {
   177ac:	4815      	ldr	r0, [pc, #84]	; (17804 <bt_set_name+0x68>)
   177ae:	4629      	mov	r1, r5
   177b0:	f01d fe91 	bl	354d6 <strcmp>
   177b4:	b300      	cbz	r0, 177f8 <bt_set_name+0x5c>
		return 0;
	}

	strncpy(bt_dev.name, name, len);
   177b6:	4622      	mov	r2, r4
   177b8:	4629      	mov	r1, r5
   177ba:	4812      	ldr	r0, [pc, #72]	; (17804 <bt_set_name+0x68>)
   177bc:	f01d fe67 	bl	3548e <strncpy>
	bt_dev.name[len] = '\0';
   177c0:	4911      	ldr	r1, [pc, #68]	; (17808 <bt_set_name+0x6c>)

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		err = settings_save_one("bt/name", bt_dev.name, len);
   177c2:	4812      	ldr	r0, [pc, #72]	; (1780c <bt_set_name+0x70>)
	bt_dev.name[len] = '\0';
   177c4:	190b      	adds	r3, r1, r4
   177c6:	2200      	movs	r2, #0
   177c8:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
		err = settings_save_one("bt/name", bt_dev.name, len);
   177cc:	f501 71cd 	add.w	r1, r1, #410	; 0x19a
   177d0:	4622      	mov	r2, r4
   177d2:	f7fc fb87 	bl	13ee4 <settings_save_one>
		if (err) {
   177d6:	b178      	cbz	r0, 177f8 <bt_set_name+0x5c>
			LOG_WRN("Unable to store name");
   177d8:	466c      	mov	r4, sp
   177da:	b088      	sub	sp, #32
   177dc:	466a      	mov	r2, sp
   177de:	4b0c      	ldr	r3, [pc, #48]	; (17810 <bt_set_name+0x74>)
   177e0:	6153      	str	r3, [r2, #20]
   177e2:	4b0c      	ldr	r3, [pc, #48]	; (17814 <bt_set_name+0x78>)
   177e4:	6193      	str	r3, [r2, #24]
   177e6:	2303      	movs	r3, #3
   177e8:	f842 3f10 	str.w	r3, [r2, #16]!
   177ec:	480a      	ldr	r0, [pc, #40]	; (17818 <bt_set_name+0x7c>)
   177ee:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   177f2:	f01e f831 	bl	35858 <z_log_msg_static_create.constprop.0>
   177f6:	46a5      	mov	sp, r4
		return 0;
   177f8:	2000      	movs	r0, #0

	return 0;
#else
	return -ENOMEM;
#endif
}
   177fa:	46bd      	mov	sp, r7
   177fc:	bdb0      	pop	{r4, r5, r7, pc}
		return -ENOMEM;
   177fe:	f06f 000b 	mvn.w	r0, #11
   17802:	e7fa      	b.n	177fa <bt_set_name+0x5e>
   17804:	2000019a 	.word	0x2000019a
   17808:	20000000 	.word	0x20000000
   1780c:	0003cacc 	.word	0x0003cacc
   17810:	0003cad4 	.word	0x0003cad4
   17814:	0003cb17 	.word	0x0003cb17
   17818:	000395c0 	.word	0x000395c0

0001781c <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   1781c:	4800      	ldr	r0, [pc, #0]	; (17820 <bt_get_name+0x4>)
   1781e:	4770      	bx	lr
   17820:	2000019a 	.word	0x2000019a

00017824 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   17824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   17826:	4f0a      	ldr	r7, [pc, #40]	; (17850 <id_find+0x2c>)
{
   17828:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   1782a:	2500      	movs	r5, #0
   1782c:	79fb      	ldrb	r3, [r7, #7]
   1782e:	b2ec      	uxtb	r4, r5
   17830:	42a3      	cmp	r3, r4
   17832:	d802      	bhi.n	1783a <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   17834:	f06f 0001 	mvn.w	r0, #1
   17838:	e009      	b.n	1784e <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   1783a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   1783e:	4439      	add	r1, r7
   17840:	4630      	mov	r0, r6
   17842:	f01e f90d 	bl	35a60 <bt_addr_le_eq>
   17846:	3501      	adds	r5, #1
   17848:	2800      	cmp	r0, #0
   1784a:	d0ef      	beq.n	1782c <id_find+0x8>
   1784c:	4620      	mov	r0, r4
}
   1784e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17850:	20000000 	.word	0x20000000

00017854 <le_rpa_timeout_submit>:
{
   17854:	b570      	push	{r4, r5, r6, lr}
	(void)k_work_schedule(&bt_dev.rpa_update, K_SECONDS(bt_dev.rpa_timeout));
   17856:	4d0d      	ldr	r5, [pc, #52]	; (1788c <le_rpa_timeout_submit+0x38>)
   17858:	f8b5 4198 	ldrh.w	r4, [r5, #408]	; 0x198
   1785c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   17860:	435c      	muls	r4, r3
			return ((t * to_hz + off) / from_hz);
   17862:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   17866:	f240 30e7 	movw	r0, #999	; 0x3e7
   1786a:	2100      	movs	r1, #0
   1786c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17870:	2300      	movs	r3, #0
   17872:	fbe4 0106 	umlal	r0, r1, r4, r6
   17876:	f7f8 fc93 	bl	101a0 <__aeabi_uldivmod>
   1787a:	4602      	mov	r2, r0
   1787c:	460b      	mov	r3, r1
   1787e:	f505 70b4 	add.w	r0, r5, #360	; 0x168
}
   17882:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)k_work_schedule(&bt_dev.rpa_update, K_SECONDS(bt_dev.rpa_timeout));
   17886:	f01a bb2b 	b.w	31ee0 <k_work_schedule>
   1788a:	bf00      	nop
   1788c:	20000000 	.word	0x20000000

00017890 <le_rpa_invalidate>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17890:	4b08      	ldr	r3, [pc, #32]	; (178b4 <le_rpa_invalidate+0x24>)
   17892:	f3bf 8f5b 	dmb	ish
   17896:	e853 1f00 	ldrex	r1, [r3]
   1789a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   1789e:	e843 1200 	strex	r2, r1, [r3]
   178a2:	2a00      	cmp	r2, #0
   178a4:	d1f7      	bne.n	17896 <le_rpa_invalidate+0x6>
   178a6:	f3bf 8f5b 	dmb	ish
		bt_le_ext_adv_foreach(adv_rpa_invalidate, NULL);
   178aa:	4803      	ldr	r0, [pc, #12]	; (178b8 <le_rpa_invalidate+0x28>)
   178ac:	2100      	movs	r1, #0
   178ae:	f000 be6d 	b.w	1858c <bt_le_ext_adv_foreach>
   178b2:	bf00      	nop
   178b4:	200000cc 	.word	0x200000cc
   178b8:	00035bc9 	.word	0x00035bc9

000178bc <hci_id_add>:
{
   178bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   178c0:	4688      	mov	r8, r1
   178c2:	4617      	mov	r7, r2
	if (id >= CONFIG_BT_ID_MAX) {
   178c4:	4605      	mov	r5, r0
   178c6:	bb08      	cbnz	r0, 1790c <hci_id_add+0x50>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   178c8:	2127      	movs	r1, #39	; 0x27
   178ca:	f242 0027 	movw	r0, #8231	; 0x2027
   178ce:	f7fe ff95 	bl	167fc <bt_hci_cmd_create>
	if (!buf) {
   178d2:	4604      	mov	r4, r0
   178d4:	b1f0      	cbz	r0, 17914 <hci_id_add+0x58>
	return net_buf_simple_add(&buf->b, len);
   178d6:	2127      	movs	r1, #39	; 0x27
   178d8:	300c      	adds	r0, #12
   178da:	f020 f8c9 	bl	37a70 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   178de:	4641      	mov	r1, r8
   178e0:	4606      	mov	r6, r0
   178e2:	f01e f8c5 	bl	35a70 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   178e6:	4639      	mov	r1, r7
   178e8:	2210      	movs	r2, #16
   178ea:	1df0      	adds	r0, r6, #7
   178ec:	f01d fe23 	bl	35536 <memcpy>
	(void)memcpy(cp->local_irk, &bt_dev.irk[id], 16);
   178f0:	490a      	ldr	r1, [pc, #40]	; (1791c <hci_id_add+0x60>)
   178f2:	2210      	movs	r2, #16
   178f4:	f106 0017 	add.w	r0, r6, #23
   178f8:	f01d fe1d 	bl	35536 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   178fc:	462a      	mov	r2, r5
   178fe:	4621      	mov	r1, r4
   17900:	f242 0027 	movw	r0, #8231	; 0x2027
}
   17904:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   17908:	f7ff b8d4 	b.w	16ab4 <bt_hci_cmd_send_sync>
		return -EINVAL;
   1790c:	f06f 0015 	mvn.w	r0, #21
}
   17910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   17914:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17918:	e7fa      	b.n	17910 <hci_id_add+0x54>
   1791a:	bf00      	nop
   1791c:	20000158 	.word	0x20000158

00017920 <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   17920:	b5f0      	push	{r4, r5, r6, r7, lr}
   17922:	4604      	mov	r4, r0
   17924:	b085      	sub	sp, #20
   17926:	4616      	mov	r6, r2
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   17928:	460d      	mov	r5, r1
   1792a:	b351      	cbz	r1, 17982 <id_create+0x62>
   1792c:	492a      	ldr	r1, [pc, #168]	; (179d8 <id_create+0xb8>)
   1792e:	4628      	mov	r0, r5
   17930:	f01e f896 	bl	35a60 <bt_addr_le_eq>
   17934:	bb28      	cbnz	r0, 17982 <id_create+0x62>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   17936:	4b29      	ldr	r3, [pc, #164]	; (179dc <id_create+0xbc>)
   17938:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   1793c:	4629      	mov	r1, r5
   1793e:	4418      	add	r0, r3
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   17940:	f01e f896 	bl	35a70 <bt_addr_le_copy>
		}
	}

#if defined(CONFIG_BT_PRIVACY)
	{
		uint8_t zero_irk[16] = { 0 };
   17944:	2300      	movs	r3, #0
   17946:	e9cd 3300 	strd	r3, r3, [sp]
   1794a:	e9cd 3302 	strd	r3, r3, [sp, #8]

		if (irk && memcmp(irk, zero_irk, 16)) {
			memcpy(&bt_dev.irk[id], irk, 16);
   1794e:	2510      	movs	r5, #16
   17950:	f44f 73ac 	mov.w	r3, #344	; 0x158
   17954:	fb15 3404 	smlabb	r4, r5, r4, r3
   17958:	4b20      	ldr	r3, [pc, #128]	; (179dc <id_create+0xbc>)
   1795a:	441c      	add	r4, r3
		if (irk && memcmp(irk, zero_irk, 16)) {
   1795c:	b33e      	cbz	r6, 179ae <id_create+0x8e>
   1795e:	462a      	mov	r2, r5
   17960:	4669      	mov	r1, sp
   17962:	4630      	mov	r0, r6
   17964:	f01d fdd7 	bl	35516 <memcmp>
   17968:	b348      	cbz	r0, 179be <id_create+0x9e>
			memcpy(&bt_dev.irk[id], irk, 16);
   1796a:	462a      	mov	r2, r5
   1796c:	4631      	mov	r1, r6
   1796e:	4620      	mov	r0, r4
			if (err) {
				return err;
			}

			if (irk) {
				memcpy(irk, &bt_dev.irk[id], 16);
   17970:	f01d fde1 	bl	35536 <memcpy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17974:	481a      	ldr	r0, [pc, #104]	; (179e0 <id_create+0xc0>)
   17976:	f01e f87e 	bl	35a76 <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1797a:	0743      	lsls	r3, r0, #29
   1797c:	d429      	bmi.n	179d2 <id_create+0xb2>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   1797e:	2000      	movs	r0, #0
   17980:	e01b      	b.n	179ba <id_create+0x9a>
			err = bt_addr_le_create_static(&new_addr);
   17982:	4668      	mov	r0, sp
   17984:	f01d ff18 	bl	357b8 <bt_addr_le_create_static>
			if (err) {
   17988:	b9b8      	cbnz	r0, 179ba <id_create+0x9a>
		} while (id_find(&new_addr) >= 0);
   1798a:	4668      	mov	r0, sp
   1798c:	f7ff ff4a 	bl	17824 <id_find>
   17990:	2800      	cmp	r0, #0
   17992:	daf6      	bge.n	17982 <id_create+0x62>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   17994:	4b11      	ldr	r3, [pc, #68]	; (179dc <id_create+0xbc>)
   17996:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   1799a:	441f      	add	r7, r3
   1799c:	4669      	mov	r1, sp
   1799e:	4638      	mov	r0, r7
   179a0:	f01e f866 	bl	35a70 <bt_addr_le_copy>
		if (addr) {
   179a4:	2d00      	cmp	r5, #0
   179a6:	d0cd      	beq.n	17944 <id_create+0x24>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   179a8:	4639      	mov	r1, r7
   179aa:	4628      	mov	r0, r5
   179ac:	e7c8      	b.n	17940 <id_create+0x20>
			err = bt_rand(&bt_dev.irk[id], 16);
   179ae:	4629      	mov	r1, r5
   179b0:	4620      	mov	r0, r4
   179b2:	f00a fbd1 	bl	22158 <bt_rand>
			if (err) {
   179b6:	2800      	cmp	r0, #0
   179b8:	d0dc      	beq.n	17974 <id_create+0x54>
}
   179ba:	b005      	add	sp, #20
   179bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = bt_rand(&bt_dev.irk[id], 16);
   179be:	4629      	mov	r1, r5
   179c0:	4620      	mov	r0, r4
   179c2:	f00a fbc9 	bl	22158 <bt_rand>
			if (err) {
   179c6:	2800      	cmp	r0, #0
   179c8:	d1f7      	bne.n	179ba <id_create+0x9a>
				memcpy(irk, &bt_dev.irk[id], 16);
   179ca:	462a      	mov	r2, r5
   179cc:	4621      	mov	r1, r4
   179ce:	4630      	mov	r0, r6
   179d0:	e7ce      	b.n	17970 <id_create+0x50>
		bt_settings_save_id();
   179d2:	f7fe f917 	bl	15c04 <bt_settings_save_id>
   179d6:	e7d2      	b.n	1797e <id_create+0x5e>
   179d8:	0003c0a9 	.word	0x0003c0a9
   179dc:	20000000 	.word	0x20000000
   179e0:	200000cc 	.word	0x200000cc

000179e4 <bt_id_add.part.0>:
void bt_id_add(struct bt_keys *keys)
   179e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   179e8:	2100      	movs	r1, #0
void bt_id_add(struct bt_keys *keys)
   179ea:	b083      	sub	sp, #12
   179ec:	4604      	mov	r4, r0
   179ee:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   179f0:	2206      	movs	r2, #6
   179f2:	4608      	mov	r0, r1
   179f4:	f001 ff2c 	bl	19850 <bt_conn_lookup_state_le>
	if (conn) {
   179f8:	4606      	mov	r6, r0
   179fa:	b178      	cbz	r0, 17a1c <bt_id_add.part.0+0x38>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   179fc:	485a      	ldr	r0, [pc, #360]	; (17b68 <bt_id_add.part.0+0x184>)
   179fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   17a02:	f01e f87c 	bl	35afe <atomic_or.isra.0>
	keys->state |= flag;
   17a06:	7a23      	ldrb	r3, [r4, #8]
   17a08:	f043 0301 	orr.w	r3, r3, #1
   17a0c:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   17a0e:	4630      	mov	r0, r6
   17a10:	f01e fa87 	bl	35f22 <bt_conn_unref>
}
   17a14:	370c      	adds	r7, #12
   17a16:	46bd      	mov	sp, r7
   17a18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (bt_dev.le.rl_entries) {
   17a1c:	4d53      	ldr	r5, [pc, #332]	; (17b6c <bt_id_add.part.0+0x188>)
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   17a1e:	4601      	mov	r1, r0
   17a20:	4853      	ldr	r0, [pc, #332]	; (17b70 <bt_id_add.part.0+0x18c>)
   17a22:	f000 fdb3 	bl	1858c <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   17a26:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   17a2a:	b1a3      	cbz	r3, 17a56 <bt_id_add.part.0+0x72>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   17a2c:	4630      	mov	r0, r6
   17a2e:	f01e f84e 	bl	35ace <addr_res_enable>
		if (err) {
   17a32:	b180      	cbz	r0, 17a56 <bt_id_add.part.0+0x72>
			LOG_WRN("Failed to disable address resolution");
   17a34:	466c      	mov	r4, sp
   17a36:	b088      	sub	sp, #32
   17a38:	466a      	mov	r2, sp
   17a3a:	4b4e      	ldr	r3, [pc, #312]	; (17b74 <bt_id_add.part.0+0x190>)
   17a3c:	6153      	str	r3, [r2, #20]
   17a3e:	4b4e      	ldr	r3, [pc, #312]	; (17b78 <bt_id_add.part.0+0x194>)
		LOG_WRN("Set privacy mode command is not supported");
   17a40:	6193      	str	r3, [r2, #24]
   17a42:	2303      	movs	r3, #3
   17a44:	f842 3f10 	str.w	r3, [r2, #16]!
   17a48:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
		LOG_ERR("Failed to set privacy mode");
   17a4c:	484b      	ldr	r0, [pc, #300]	; (17b7c <bt_id_add.part.0+0x198>)
   17a4e:	f01e f83b 	bl	35ac8 <z_log_msg_static_create.constprop.0>
   17a52:	46a5      	mov	sp, r4
		goto done;
   17a54:	e02c      	b.n	17ab0 <bt_id_add.part.0+0xcc>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   17a56:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
   17a5a:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   17a5e:	429a      	cmp	r2, r3
   17a60:	d138      	bne.n	17ad4 <bt_id_add.part.0+0xf0>
		LOG_WRN("Resolving list size exceeded. Switching to host.");
   17a62:	466e      	mov	r6, sp
   17a64:	b088      	sub	sp, #32
   17a66:	466a      	mov	r2, sp
   17a68:	4b45      	ldr	r3, [pc, #276]	; (17b80 <bt_id_add.part.0+0x19c>)
   17a6a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 17b78 <bt_id_add.part.0+0x194>
   17a6e:	6153      	str	r3, [r2, #20]
   17a70:	f04f 0803 	mov.w	r8, #3
   17a74:	f8c2 9018 	str.w	r9, [r2, #24]
   17a78:	4840      	ldr	r0, [pc, #256]	; (17b7c <bt_id_add.part.0+0x198>)
   17a7a:	f842 8f10 	str.w	r8, [r2, #16]!
   17a7e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17a82:	f01e f821 	bl	35ac8 <z_log_msg_static_create.constprop.0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   17a86:	2200      	movs	r2, #0
   17a88:	46b5      	mov	sp, r6
   17a8a:	4611      	mov	r1, r2
   17a8c:	f242 0029 	movw	r0, #8233	; 0x2029
   17a90:	f7ff f810 	bl	16ab4 <bt_hci_cmd_send_sync>
		if (err) {
   17a94:	b1a0      	cbz	r0, 17ac0 <bt_id_add.part.0+0xdc>
			LOG_ERR("Failed to clear resolution list");
   17a96:	b088      	sub	sp, #32
   17a98:	466a      	mov	r2, sp
   17a9a:	4b3a      	ldr	r3, [pc, #232]	; (17b84 <bt_id_add.part.0+0x1a0>)
   17a9c:	4837      	ldr	r0, [pc, #220]	; (17b7c <bt_id_add.part.0+0x198>)
   17a9e:	e9c2 3905 	strd	r3, r9, [r2, #20]
   17aa2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17aa6:	f842 8f10 	str.w	r8, [r2, #16]!
   17aaa:	f01e f80d 	bl	35ac8 <z_log_msg_static_create.constprop.0>
   17aae:	46b5      	mov	sp, r6
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   17ab0:	2001      	movs	r0, #1
   17ab2:	f01e f80c 	bl	35ace <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   17ab6:	4834      	ldr	r0, [pc, #208]	; (17b88 <bt_id_add.part.0+0x1a4>)
   17ab8:	2100      	movs	r1, #0
   17aba:	f000 fd67 	bl	1858c <bt_le_ext_adv_foreach>
   17abe:	e7a9      	b.n	17a14 <bt_id_add.part.0+0x30>
		bt_dev.le.rl_entries++;
   17ac0:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   17ac4:	3301      	adds	r3, #1
   17ac6:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   17aca:	7a23      	ldrb	r3, [r4, #8]
   17acc:	f043 0304 	orr.w	r3, r3, #4
   17ad0:	7223      	strb	r3, [r4, #8]
		goto done;
   17ad2:	e7ed      	b.n	17ab0 <bt_id_add.part.0+0xcc>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   17ad4:	4622      	mov	r2, r4
   17ad6:	f104 0801 	add.w	r8, r4, #1
   17ada:	f812 0b2a 	ldrb.w	r0, [r2], #42
   17ade:	4641      	mov	r1, r8
   17ae0:	f7ff feec 	bl	178bc <hci_id_add>
	if (err) {
   17ae4:	4606      	mov	r6, r0
   17ae6:	b160      	cbz	r0, 17b02 <bt_id_add.part.0+0x11e>
		LOG_ERR("Failed to add IRK to controller");
   17ae8:	466c      	mov	r4, sp
   17aea:	b088      	sub	sp, #32
   17aec:	466a      	mov	r2, sp
   17aee:	4b27      	ldr	r3, [pc, #156]	; (17b8c <bt_id_add.part.0+0x1a8>)
		LOG_ERR("Failed to set privacy mode");
   17af0:	6153      	str	r3, [r2, #20]
   17af2:	4b21      	ldr	r3, [pc, #132]	; (17b78 <bt_id_add.part.0+0x194>)
   17af4:	6193      	str	r3, [r2, #24]
   17af6:	2303      	movs	r3, #3
   17af8:	f842 3f10 	str.w	r3, [r2, #16]!
   17afc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17b00:	e7a4      	b.n	17a4c <bt_id_add.part.0+0x68>
	bt_dev.le.rl_entries++;
   17b02:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   17b06:	3301      	adds	r3, #1
   17b08:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   17b0c:	7a23      	ldrb	r3, [r4, #8]
   17b0e:	f043 0304 	orr.w	r3, r3, #4
   17b12:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   17b14:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
   17b18:	075b      	lsls	r3, r3, #29
   17b1a:	d406      	bmi.n	17b2a <bt_id_add.part.0+0x146>
		LOG_WRN("Set privacy mode command is not supported");
   17b1c:	466c      	mov	r4, sp
   17b1e:	b088      	sub	sp, #32
   17b20:	466a      	mov	r2, sp
   17b22:	4b1b      	ldr	r3, [pc, #108]	; (17b90 <bt_id_add.part.0+0x1ac>)
   17b24:	6153      	str	r3, [r2, #20]
   17b26:	4b1b      	ldr	r3, [pc, #108]	; (17b94 <bt_id_add.part.0+0x1b0>)
   17b28:	e78a      	b.n	17a40 <bt_id_add.part.0+0x5c>
	bt_addr_le_copy(&cp.id_addr, addr);
   17b2a:	4641      	mov	r1, r8
   17b2c:	4638      	mov	r0, r7
   17b2e:	f01d ff9f 	bl	35a70 <bt_addr_le_copy>
	cp.mode = mode;
   17b32:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   17b34:	2108      	movs	r1, #8
   17b36:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   17b3a:	71fb      	strb	r3, [r7, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   17b3c:	f7fe fe5e 	bl	167fc <bt_hci_cmd_create>
	if (!buf) {
   17b40:	4604      	mov	r4, r0
   17b42:	b160      	cbz	r0, 17b5e <bt_id_add.part.0+0x17a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17b44:	2208      	movs	r2, #8
   17b46:	4639      	mov	r1, r7
   17b48:	300c      	adds	r0, #12
   17b4a:	f01f ff97 	bl	37a7c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   17b4e:	4632      	mov	r2, r6
   17b50:	4621      	mov	r1, r4
   17b52:	f242 004e 	movw	r0, #8270	; 0x204e
   17b56:	f7fe ffad 	bl	16ab4 <bt_hci_cmd_send_sync>
	if (err) {
   17b5a:	2800      	cmp	r0, #0
   17b5c:	d0a8      	beq.n	17ab0 <bt_id_add.part.0+0xcc>
		LOG_ERR("Failed to set privacy mode");
   17b5e:	466c      	mov	r4, sp
   17b60:	b088      	sub	sp, #32
   17b62:	466a      	mov	r2, sp
   17b64:	4b0c      	ldr	r3, [pc, #48]	; (17b98 <bt_id_add.part.0+0x1b4>)
   17b66:	e7c3      	b.n	17af0 <bt_id_add.part.0+0x10c>
   17b68:	200000cc 	.word	0x200000cc
   17b6c:	20000000 	.word	0x20000000
   17b70:	00035b17 	.word	0x00035b17
   17b74:	0003ce6f 	.word	0x0003ce6f
   17b78:	0003d178 	.word	0x0003d178
   17b7c:	000395d0 	.word	0x000395d0
   17b80:	0003ce98 	.word	0x0003ce98
   17b84:	0003cecd 	.word	0x0003cecd
   17b88:	00035b9b 	.word	0x00035b9b
   17b8c:	0003cef1 	.word	0x0003cef1
   17b90:	0003cf15 	.word	0x0003cf15
   17b94:	0003d164 	.word	0x0003d164
   17b98:	0003cf43 	.word	0x0003cf43

00017b9c <set_random_address>:
{
   17b9c:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   17b9e:	4913      	ldr	r1, [pc, #76]	; (17bec <set_random_address+0x50>)
   17ba0:	2206      	movs	r2, #6
   17ba2:	4605      	mov	r5, r0
   17ba4:	f01d fcb7 	bl	35516 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   17ba8:	b1d8      	cbz	r0, 17be2 <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   17baa:	2106      	movs	r1, #6
   17bac:	f242 0005 	movw	r0, #8197	; 0x2005
   17bb0:	f7fe fe24 	bl	167fc <bt_hci_cmd_create>
	if (!buf) {
   17bb4:	4604      	mov	r4, r0
   17bb6:	b1b0      	cbz	r0, 17be6 <set_random_address+0x4a>
   17bb8:	2206      	movs	r2, #6
   17bba:	4629      	mov	r1, r5
   17bbc:	300c      	adds	r0, #12
   17bbe:	f01f ff5d 	bl	37a7c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   17bc2:	2200      	movs	r2, #0
   17bc4:	4621      	mov	r1, r4
   17bc6:	f242 0005 	movw	r0, #8197	; 0x2005
   17bca:	f7fe ff73 	bl	16ab4 <bt_hci_cmd_send_sync>
	if (err) {
   17bce:	b948      	cbnz	r0, 17be4 <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
   17bd0:	2206      	movs	r2, #6
   17bd2:	4806      	ldr	r0, [pc, #24]	; (17bec <set_random_address+0x50>)
   17bd4:	4629      	mov	r1, r5
   17bd6:	f01d fcae 	bl	35536 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   17bda:	4b05      	ldr	r3, [pc, #20]	; (17bf0 <set_random_address+0x54>)
   17bdc:	2201      	movs	r2, #1
   17bde:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		return 0;
   17be2:	2000      	movs	r0, #0
}
   17be4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   17be6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17bea:	e7fb      	b.n	17be4 <set_random_address+0x48>
   17bec:	20000061 	.word	0x20000061
   17bf0:	20000000 	.word	0x20000000

00017bf4 <bt_id_del.part.0>:
void bt_id_del(struct bt_keys *keys)
   17bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   17bf8:	2100      	movs	r1, #0
void bt_id_del(struct bt_keys *keys)
   17bfa:	af00      	add	r7, sp, #0
   17bfc:	4604      	mov	r4, r0
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   17bfe:	2206      	movs	r2, #6
   17c00:	4608      	mov	r0, r1
   17c02:	f001 fe25 	bl	19850 <bt_conn_lookup_state_le>
	if (conn) {
   17c06:	4605      	mov	r5, r0
   17c08:	b170      	cbz	r0, 17c28 <bt_id_del.part.0+0x34>
   17c0a:	483c      	ldr	r0, [pc, #240]	; (17cfc <bt_id_del.part.0+0x108>)
   17c0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   17c10:	f01d ff75 	bl	35afe <atomic_or.isra.0>
	keys->state |= flag;
   17c14:	7a23      	ldrb	r3, [r4, #8]
   17c16:	f043 0302 	orr.w	r3, r3, #2
   17c1a:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   17c1c:	4628      	mov	r0, r5
   17c1e:	f01e f980 	bl	35f22 <bt_conn_unref>
}
   17c22:	46bd      	mov	sp, r7
   17c24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   17c28:	4601      	mov	r1, r0
   17c2a:	4835      	ldr	r0, [pc, #212]	; (17d00 <bt_id_del.part.0+0x10c>)
   17c2c:	f000 fcae 	bl	1858c <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   17c30:	4628      	mov	r0, r5
   17c32:	f01d ff4c 	bl	35ace <addr_res_enable>
	if (err) {
   17c36:	4d33      	ldr	r5, [pc, #204]	; (17d04 <bt_id_del.part.0+0x110>)
   17c38:	4606      	mov	r6, r0
   17c3a:	b190      	cbz	r0, 17c62 <bt_id_del.part.0+0x6e>
		LOG_ERR("Disabling address resolution failed (err %d)", err);
   17c3c:	466c      	mov	r4, sp
   17c3e:	b088      	sub	sp, #32
   17c40:	466b      	mov	r3, sp
   17c42:	4a31      	ldr	r2, [pc, #196]	; (17d08 <bt_id_del.part.0+0x114>)
   17c44:	615a      	str	r2, [r3, #20]
   17c46:	4a31      	ldr	r2, [pc, #196]	; (17d0c <bt_id_del.part.0+0x118>)
   17c48:	e9c3 2006 	strd	r2, r0, [r3, #24]
   17c4c:	461a      	mov	r2, r3
   17c4e:	2304      	movs	r3, #4
   17c50:	f842 3f10 	str.w	r3, [r2, #16]!
   17c54:	f44f 5101 	mov.w	r1, #8256	; 0x2040
		LOG_ERR("Failed to remove IRK from controller");
   17c58:	482d      	ldr	r0, [pc, #180]	; (17d10 <bt_id_del.part.0+0x11c>)
   17c5a:	f01d ff35 	bl	35ac8 <z_log_msg_static_create.constprop.0>
   17c5e:	46a5      	mov	sp, r4
		goto done;
   17c60:	e011      	b.n	17c86 <bt_id_del.part.0+0x92>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   17c62:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   17c66:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
   17c6a:	429a      	cmp	r2, r3
   17c6c:	d216      	bcs.n	17c9c <bt_id_del.part.0+0xa8>
		bt_dev.le.rl_entries--;
   17c6e:	3b01      	subs	r3, #1
   17c70:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   17c74:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   17c76:	4927      	ldr	r1, [pc, #156]	; (17d14 <bt_id_del.part.0+0x120>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   17c78:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   17c7c:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   17c7e:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   17c80:	2002      	movs	r0, #2
   17c82:	f007 f883 	bl	1ed8c <bt_keys_foreach_type>
	if (bt_dev.le.rl_entries) {
   17c86:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   17c8a:	b113      	cbz	r3, 17c92 <bt_id_del.part.0+0x9e>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   17c8c:	2001      	movs	r0, #1
   17c8e:	f01d ff1e 	bl	35ace <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   17c92:	4821      	ldr	r0, [pc, #132]	; (17d18 <bt_id_del.part.0+0x124>)
   17c94:	2100      	movs	r1, #0
   17c96:	f000 fc79 	bl	1858c <bt_le_ext_adv_foreach>
   17c9a:	e7c2      	b.n	17c22 <bt_id_del.part.0+0x2e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   17c9c:	2107      	movs	r1, #7
   17c9e:	f242 0028 	movw	r0, #8232	; 0x2028
   17ca2:	f7fe fdab 	bl	167fc <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   17ca6:	f104 0901 	add.w	r9, r4, #1
	if (!buf) {
   17caa:	4680      	mov	r8, r0
   17cac:	b960      	cbnz	r0, 17cc8 <bt_id_del.part.0+0xd4>
		LOG_ERR("Failed to remove IRK from controller");
   17cae:	466c      	mov	r4, sp
   17cb0:	b088      	sub	sp, #32
   17cb2:	466a      	mov	r2, sp
   17cb4:	4b19      	ldr	r3, [pc, #100]	; (17d1c <bt_id_del.part.0+0x128>)
   17cb6:	6153      	str	r3, [r2, #20]
   17cb8:	4b14      	ldr	r3, [pc, #80]	; (17d0c <bt_id_del.part.0+0x118>)
   17cba:	6193      	str	r3, [r2, #24]
   17cbc:	2303      	movs	r3, #3
   17cbe:	f842 3f10 	str.w	r3, [r2, #16]!
   17cc2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17cc6:	e7c7      	b.n	17c58 <bt_id_del.part.0+0x64>
	return net_buf_simple_add(&buf->b, len);
   17cc8:	2107      	movs	r1, #7
   17cca:	300c      	adds	r0, #12
   17ccc:	f01f fed0 	bl	37a70 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   17cd0:	4649      	mov	r1, r9
   17cd2:	f01d fecd 	bl	35a70 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   17cd6:	4632      	mov	r2, r6
   17cd8:	4641      	mov	r1, r8
   17cda:	f242 0028 	movw	r0, #8232	; 0x2028
   17cde:	f7fe fee9 	bl	16ab4 <bt_hci_cmd_send_sync>
	if (err) {
   17ce2:	2800      	cmp	r0, #0
   17ce4:	d1e3      	bne.n	17cae <bt_id_del.part.0+0xba>
	bt_dev.le.rl_entries--;
   17ce6:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   17cea:	3b01      	subs	r3, #1
   17cec:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   17cf0:	7a23      	ldrb	r3, [r4, #8]
   17cf2:	f023 0304 	bic.w	r3, r3, #4
   17cf6:	7223      	strb	r3, [r4, #8]
   17cf8:	e7c5      	b.n	17c86 <bt_id_del.part.0+0x92>
   17cfa:	bf00      	nop
   17cfc:	200000cc 	.word	0x200000cc
   17d00:	00035b17 	.word	0x00035b17
   17d04:	20000000 	.word	0x20000000
   17d08:	0003cf62 	.word	0x0003cf62
   17d0c:	0003d15a 	.word	0x0003d15a
   17d10:	000395d0 	.word	0x000395d0
   17d14:	00035ab3 	.word	0x00035ab3
   17d18:	00035b9b 	.word	0x00035b9b
   17d1c:	0003cf93 	.word	0x0003cf93

00017d20 <bt_id_set_private_addr>:
{
   17d20:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(id >= CONFIG_BT_ID_MAX) {
   17d22:	b9f0      	cbnz	r0, 17d62 <bt_id_set_private_addr+0x42>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17d24:	4810      	ldr	r0, [pc, #64]	; (17d68 <bt_id_set_private_addr+0x48>)
   17d26:	f01d fea6 	bl	35a76 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_RPA_VALID)) {
   17d2a:	0483      	lsls	r3, r0, #18
   17d2c:	d417      	bmi.n	17d5e <bt_id_set_private_addr+0x3e>
	err = bt_rpa_create(bt_dev.irk[id], &rpa);
   17d2e:	480f      	ldr	r0, [pc, #60]	; (17d6c <bt_id_set_private_addr+0x4c>)
   17d30:	4669      	mov	r1, sp
   17d32:	f01d fc78 	bl	35626 <bt_rpa_create>
	if (!err) {
   17d36:	4604      	mov	r4, r0
   17d38:	b120      	cbz	r0, 17d44 <bt_id_set_private_addr+0x24>
	le_rpa_timeout_submit();
   17d3a:	f7ff fd8b 	bl	17854 <le_rpa_timeout_submit>
}
   17d3e:	4620      	mov	r0, r4
   17d40:	b002      	add	sp, #8
   17d42:	bd10      	pop	{r4, pc}
		err = set_random_address(&rpa);
   17d44:	4668      	mov	r0, sp
   17d46:	f7ff ff29 	bl	17b9c <set_random_address>
		if (!err) {
   17d4a:	4604      	mov	r4, r0
   17d4c:	2800      	cmp	r0, #0
   17d4e:	d1f4      	bne.n	17d3a <bt_id_set_private_addr+0x1a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17d50:	4805      	ldr	r0, [pc, #20]	; (17d68 <bt_id_set_private_addr+0x48>)
   17d52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   17d56:	f01d fed2 	bl	35afe <atomic_or.isra.0>
	le_rpa_timeout_submit();
   17d5a:	f7ff fd7b 	bl	17854 <le_rpa_timeout_submit>
		return 0;
   17d5e:	2400      	movs	r4, #0
   17d60:	e7ed      	b.n	17d3e <bt_id_set_private_addr+0x1e>
		return -EINVAL;
   17d62:	f06f 0415 	mvn.w	r4, #21
   17d66:	e7ea      	b.n	17d3e <bt_id_set_private_addr+0x1e>
   17d68:	200000cc 	.word	0x200000cc
   17d6c:	20000158 	.word	0x20000158

00017d70 <le_update_private_addr>:
{
   17d70:	b5b0      	push	{r4, r5, r7, lr}
   17d72:	af00      	add	r7, sp, #0
		adv = bt_le_adv_lookup_legacy();
   17d74:	f000 fc10 	bl	18598 <bt_le_adv_lookup_legacy>
		if (adv &&
   17d78:	4604      	mov	r4, r0
   17d7a:	b338      	cbz	r0, 17dcc <le_update_private_addr+0x5c>
		    atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   17d7c:	f100 0210 	add.w	r2, r0, #16
   17d80:	2107      	movs	r1, #7
   17d82:	4610      	mov	r0, r2
   17d84:	f01d fe7d 	bl	35a82 <atomic_test_bit>
		if (adv &&
   17d88:	b300      	cbz	r0, 17dcc <le_update_private_addr+0x5c>
		    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   17d8a:	210d      	movs	r1, #13
   17d8c:	4610      	mov	r0, r2
   17d8e:	f01d fe78 	bl	35a82 <atomic_test_bit>
		    atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   17d92:	4601      	mov	r1, r0
   17d94:	b9c8      	cbnz	r0, 17dca <le_update_private_addr+0x5a>
			id = adv->id;
   17d96:	7825      	ldrb	r5, [r4, #0]
			bt_le_adv_set_enable_legacy(adv, false);
   17d98:	4620      	mov	r0, r4
   17d9a:	f01e f820 	bl	35dde <bt_le_adv_set_enable_legacy>
	err = bt_id_set_private_addr(id);
   17d9e:	4628      	mov	r0, r5
   17da0:	f7ff ffbe 	bl	17d20 <bt_id_set_private_addr>
	if (err) {
   17da4:	b1c0      	cbz	r0, 17dd8 <le_update_private_addr+0x68>
		LOG_WRN("Failed to update RPA address (%d)", err);
   17da6:	466c      	mov	r4, sp
   17da8:	b088      	sub	sp, #32
   17daa:	466a      	mov	r2, sp
   17dac:	4b0d      	ldr	r3, [pc, #52]	; (17de4 <le_update_private_addr+0x74>)
   17dae:	6153      	str	r3, [r2, #20]
   17db0:	4b0d      	ldr	r3, [pc, #52]	; (17de8 <le_update_private_addr+0x78>)
   17db2:	e9c2 3006 	strd	r3, r0, [r2, #24]
   17db6:	2304      	movs	r3, #4
   17db8:	f842 3f10 	str.w	r3, [r2, #16]!
   17dbc:	480b      	ldr	r0, [pc, #44]	; (17dec <le_update_private_addr+0x7c>)
   17dbe:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   17dc2:	f01d fe81 	bl	35ac8 <z_log_msg_static_create.constprop.0>
   17dc6:	46a5      	mov	sp, r4
		return;
   17dc8:	e004      	b.n	17dd4 <le_update_private_addr+0x64>
	err = bt_id_set_private_addr(id);
   17dca:	2000      	movs	r0, #0
   17dcc:	f7ff ffa8 	bl	17d20 <bt_id_set_private_addr>
	if (err) {
   17dd0:	2800      	cmp	r0, #0
   17dd2:	d1e8      	bne.n	17da6 <le_update_private_addr+0x36>
}
   17dd4:	46bd      	mov	sp, r7
   17dd6:	bdb0      	pop	{r4, r5, r7, pc}
		bt_le_adv_set_enable_legacy(adv, true);
   17dd8:	2101      	movs	r1, #1
   17dda:	4620      	mov	r0, r4
   17ddc:	f01d ffff 	bl	35dde <bt_le_adv_set_enable_legacy>
   17de0:	e7f8      	b.n	17dd4 <le_update_private_addr+0x64>
   17de2:	bf00      	nop
   17de4:	0003cfbc 	.word	0x0003cfbc
   17de8:	0003d0f5 	.word	0x0003d0f5
   17dec:	000395d0 	.word	0x000395d0

00017df0 <rpa_timeout>:
{
   17df0:	b513      	push	{r0, r1, r4, lr}
	bool adv_enabled = false;
   17df2:	2300      	movs	r3, #0
			bt_le_ext_adv_foreach(adv_is_private_enabled, &adv_enabled);
   17df4:	4810      	ldr	r0, [pc, #64]	; (17e38 <rpa_timeout+0x48>)
	bool adv_enabled = false;
   17df6:	f88d 3007 	strb.w	r3, [sp, #7]
			bt_le_ext_adv_foreach(adv_is_private_enabled, &adv_enabled);
   17dfa:	f10d 0107 	add.w	r1, sp, #7
   17dfe:	f000 fbc5 	bl	1858c <bt_le_ext_adv_foreach>
	return adv_enabled;
   17e02:	f89d 4007 	ldrb.w	r4, [sp, #7]
	le_rpa_invalidate();
   17e06:	f7ff fd43 	bl	17890 <le_rpa_invalidate>
	if (!(adv_enabled ||
   17e0a:	b124      	cbz	r4, 17e16 <rpa_timeout+0x26>
}
   17e0c:	b002      	add	sp, #8
   17e0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	le_update_private_addr();
   17e12:	f7ff bfad 	b.w	17d70 <le_update_private_addr>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17e16:	4809      	ldr	r0, [pc, #36]	; (17e3c <rpa_timeout+0x4c>)
   17e18:	f01d fe2d 	bl	35a76 <atomic_get>
	if (!(adv_enabled ||
   17e1c:	04c1      	lsls	r1, r0, #19
   17e1e:	d4f5      	bmi.n	17e0c <rpa_timeout+0x1c>
   17e20:	4806      	ldr	r0, [pc, #24]	; (17e3c <rpa_timeout+0x4c>)
   17e22:	f01d fe28 	bl	35a76 <atomic_get>
   17e26:	0642      	lsls	r2, r0, #25
   17e28:	d504      	bpl.n	17e34 <rpa_timeout+0x44>
   17e2a:	4804      	ldr	r0, [pc, #16]	; (17e3c <rpa_timeout+0x4c>)
   17e2c:	f01d fe23 	bl	35a76 <atomic_get>
	      (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   17e30:	05c3      	lsls	r3, r0, #23
   17e32:	d4eb      	bmi.n	17e0c <rpa_timeout+0x1c>
}
   17e34:	b002      	add	sp, #8
   17e36:	bd10      	pop	{r4, pc}
   17e38:	00035a91 	.word	0x00035a91
   17e3c:	200000cc 	.word	0x200000cc

00017e40 <bt_id_pending_keys_update>:
   17e40:	4b0a      	ldr	r3, [pc, #40]	; (17e6c <bt_id_pending_keys_update+0x2c>)
   17e42:	f3bf 8f5b 	dmb	ish
   17e46:	e853 2f00 	ldrex	r2, [r3]
   17e4a:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   17e4e:	e843 1000 	strex	r0, r1, [r3]
   17e52:	2800      	cmp	r0, #0
   17e54:	d1f7      	bne.n	17e46 <bt_id_pending_keys_update+0x6>
   17e56:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   17e5a:	0413      	lsls	r3, r2, #16
   17e5c:	d504      	bpl.n	17e68 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach_type(BT_KEYS_IRK, pending_id_update, NULL);
   17e5e:	4904      	ldr	r1, [pc, #16]	; (17e70 <bt_id_pending_keys_update+0x30>)
   17e60:	2200      	movs	r2, #0
   17e62:	2002      	movs	r0, #2
   17e64:	f006 bf92 	b.w	1ed8c <bt_keys_foreach_type>
}
   17e68:	4770      	bx	lr
   17e6a:	bf00      	nop
   17e6c:	200000cc 	.word	0x200000cc
   17e70:	00035c3b 	.word	0x00035c3b

00017e74 <bt_id_find_conflict>:
{
   17e74:	b507      	push	{r0, r1, r2, lr}
	struct bt_id_conflict conflict = {
   17e76:	2300      	movs	r3, #0
   17e78:	e9cd 0300 	strd	r0, r3, [sp]
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   17e7c:	4904      	ldr	r1, [pc, #16]	; (17e90 <bt_id_find_conflict+0x1c>)
   17e7e:	466a      	mov	r2, sp
   17e80:	2002      	movs	r0, #2
   17e82:	f006 ff83 	bl	1ed8c <bt_keys_foreach_type>
}
   17e86:	9801      	ldr	r0, [sp, #4]
   17e88:	b003      	add	sp, #12
   17e8a:	f85d fb04 	ldr.w	pc, [sp], #4
   17e8e:	bf00      	nop
   17e90:	00035b41 	.word	0x00035b41

00017e94 <bt_id_add>:
{
   17e94:	b410      	push	{r4}
	CHECKIF(keys == NULL) {
   17e96:	4603      	mov	r3, r0
   17e98:	b170      	cbz	r0, 17eb8 <bt_id_add+0x24>
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   17e9a:	490a      	ldr	r1, [pc, #40]	; (17ec4 <bt_id_add+0x30>)
   17e9c:	f891 4118 	ldrb.w	r4, [r1, #280]	; 0x118
   17ea0:	f891 2119 	ldrb.w	r2, [r1, #281]	; 0x119
   17ea4:	b10c      	cbz	r4, 17eaa <bt_id_add+0x16>
   17ea6:	4294      	cmp	r4, r2
   17ea8:	d208      	bcs.n	17ebc <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
   17eaa:	3201      	adds	r2, #1
   17eac:	f881 2119 	strb.w	r2, [r1, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   17eb0:	7a1a      	ldrb	r2, [r3, #8]
   17eb2:	f042 0204 	orr.w	r2, r2, #4
   17eb6:	721a      	strb	r2, [r3, #8]
}
   17eb8:	bc10      	pop	{r4}
   17eba:	4770      	bx	lr
   17ebc:	bc10      	pop	{r4}
   17ebe:	f7ff bd91 	b.w	179e4 <bt_id_add.part.0>
   17ec2:	bf00      	nop
   17ec4:	20000000 	.word	0x20000000

00017ec8 <bt_id_del>:
{
   17ec8:	b410      	push	{r4}
	CHECKIF(keys == NULL) {
   17eca:	4603      	mov	r3, r0
   17ecc:	b198      	cbz	r0, 17ef6 <bt_id_del+0x2e>
	if (!bt_dev.le.rl_size ||
   17ece:	4c0b      	ldr	r4, [pc, #44]	; (17efc <bt_id_del+0x34>)
   17ed0:	f894 1118 	ldrb.w	r1, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   17ed4:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
	if (!bt_dev.le.rl_size ||
   17ed8:	b129      	cbz	r1, 17ee6 <bt_id_del+0x1e>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   17eda:	3101      	adds	r1, #1
	if (!bt_dev.le.rl_size ||
   17edc:	428a      	cmp	r2, r1
   17ede:	dc03      	bgt.n	17ee8 <bt_id_del+0x20>
}
   17ee0:	bc10      	pop	{r4}
   17ee2:	f7ff be87 	b.w	17bf4 <bt_id_del.part.0>
		if (bt_dev.le.rl_entries > 0) {
   17ee6:	b112      	cbz	r2, 17eee <bt_id_del+0x26>
			bt_dev.le.rl_entries--;
   17ee8:	3a01      	subs	r2, #1
   17eea:	f884 2119 	strb.w	r2, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   17eee:	7a1a      	ldrb	r2, [r3, #8]
   17ef0:	f022 0204 	bic.w	r2, r2, #4
   17ef4:	721a      	strb	r2, [r3, #8]
}
   17ef6:	bc10      	pop	{r4}
   17ef8:	4770      	bx	lr
   17efa:	bf00      	nop
   17efc:	20000000 	.word	0x20000000

00017f00 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   17f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17f04:	b084      	sub	sp, #16
   17f06:	460e      	mov	r6, r1
   17f08:	af00      	add	r7, sp, #0
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   17f0a:	4604      	mov	r4, r0
   17f0c:	b930      	cbnz	r0, 17f1c <bt_id_create+0x1c>

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   17f0e:	4d2e      	ldr	r5, [pc, #184]	; (17fc8 <bt_id_create+0xc8>)
   17f10:	79eb      	ldrb	r3, [r5, #7]
   17f12:	2b01      	cmp	r3, #1
   17f14:	d12d      	bne.n	17f72 <bt_id_create+0x72>
		return -ENOMEM;
   17f16:	f06f 000b 	mvn.w	r0, #11
   17f1a:	e01e      	b.n	17f5a <bt_id_create+0x5a>
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   17f1c:	492b      	ldr	r1, [pc, #172]	; (17fcc <bt_id_create+0xcc>)
   17f1e:	f01d fd9f 	bl	35a60 <bt_addr_le_eq>
   17f22:	2800      	cmp	r0, #0
   17f24:	d1f3      	bne.n	17f0e <bt_id_create+0xe>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   17f26:	7823      	ldrb	r3, [r4, #0]
   17f28:	2b01      	cmp	r3, #1
   17f2a:	d104      	bne.n	17f36 <bt_id_create+0x36>
   17f2c:	79a3      	ldrb	r3, [r4, #6]
   17f2e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   17f32:	2bc0      	cmp	r3, #192	; 0xc0
   17f34:	d015      	beq.n	17f62 <bt_id_create+0x62>
			LOG_ERR("Only static random identity address supported");
   17f36:	466c      	mov	r4, sp
   17f38:	b088      	sub	sp, #32
   17f3a:	466a      	mov	r2, sp
   17f3c:	4b24      	ldr	r3, [pc, #144]	; (17fd0 <bt_id_create+0xd0>)
   17f3e:	6153      	str	r3, [r2, #20]
   17f40:	4b24      	ldr	r3, [pc, #144]	; (17fd4 <bt_id_create+0xd4>)
   17f42:	6193      	str	r3, [r2, #24]
   17f44:	2303      	movs	r3, #3
   17f46:	f842 3f10 	str.w	r3, [r2, #16]!
   17f4a:	4823      	ldr	r0, [pc, #140]	; (17fd8 <bt_id_create+0xd8>)
   17f4c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17f50:	f01d fdba 	bl	35ac8 <z_log_msg_static_create.constprop.0>
   17f54:	46a5      	mov	sp, r4
			return -EINVAL;
   17f56:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   17f5a:	3710      	adds	r7, #16
   17f5c:	46bd      	mov	sp, r7
   17f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (id_find(addr) >= 0) {
   17f62:	4620      	mov	r0, r4
   17f64:	f7ff fc5e 	bl	17824 <id_find>
   17f68:	2800      	cmp	r0, #0
   17f6a:	dbd0      	blt.n	17f0e <bt_id_create+0xe>
			return -EALREADY;
   17f6c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   17f70:	e7f3      	b.n	17f5a <bt_id_create+0x5a>
   17f72:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   17f76:	f01d fd7e 	bl	35a76 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   17f7a:	f010 0001 	ands.w	r0, r0, #1
   17f7e:	d114      	bne.n	17faa <bt_id_create+0xaa>
		uint8_t zero_irk[16] = { 0 };
   17f80:	e9c7 0000 	strd	r0, r0, [r7]
   17f84:	e9c7 0002 	strd	r0, r0, [r7, #8]
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   17f88:	2c00      	cmp	r4, #0
   17f8a:	d0e4      	beq.n	17f56 <bt_id_create+0x56>
   17f8c:	490f      	ldr	r1, [pc, #60]	; (17fcc <bt_id_create+0xcc>)
   17f8e:	4620      	mov	r0, r4
   17f90:	f01d fd66 	bl	35a60 <bt_addr_le_eq>
   17f94:	2800      	cmp	r0, #0
   17f96:	d1de      	bne.n	17f56 <bt_id_create+0x56>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   17f98:	2e00      	cmp	r6, #0
   17f9a:	d0dc      	beq.n	17f56 <bt_id_create+0x56>
		    !(irk && memcmp(irk, zero_irk, 16))) {
   17f9c:	2210      	movs	r2, #16
   17f9e:	4639      	mov	r1, r7
   17fa0:	4630      	mov	r0, r6
   17fa2:	f01d fab8 	bl	35516 <memcmp>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   17fa6:	2800      	cmp	r0, #0
   17fa8:	d0d5      	beq.n	17f56 <bt_id_create+0x56>
	new_id = bt_dev.id_count;
   17faa:	f895 8007 	ldrb.w	r8, [r5, #7]
	err = id_create(new_id, addr, irk);
   17fae:	4632      	mov	r2, r6
   17fb0:	4621      	mov	r1, r4
   17fb2:	4640      	mov	r0, r8
   17fb4:	f7ff fcb4 	bl	17920 <id_create>
	if (err) {
   17fb8:	2800      	cmp	r0, #0
   17fba:	d1ce      	bne.n	17f5a <bt_id_create+0x5a>
		bt_dev.id_count++;
   17fbc:	79eb      	ldrb	r3, [r5, #7]
   17fbe:	3301      	adds	r3, #1
	new_id = bt_dev.id_count;
   17fc0:	4640      	mov	r0, r8
		bt_dev.id_count++;
   17fc2:	71eb      	strb	r3, [r5, #7]
	return new_id;
   17fc4:	e7c9      	b.n	17f5a <bt_id_create+0x5a>
   17fc6:	bf00      	nop
   17fc8:	20000000 	.word	0x20000000
   17fcc:	0003c0a9 	.word	0x0003c0a9
   17fd0:	0003cfe2 	.word	0x0003cfe2
   17fd4:	0003d14d 	.word	0x0003d14d
   17fd8:	000395d0 	.word	0x000395d0

00017fdc <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   17fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   17fde:	b083      	sub	sp, #12
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   17fe0:	4604      	mov	r4, r0
{
   17fe2:	af00      	add	r7, sp, #0
	CHECKIF(addr == NULL) {
   17fe4:	b998      	cbnz	r0, 1800e <bt_id_read_public_addr+0x32>
		LOG_WRN("Invalid input parameters");
   17fe6:	466c      	mov	r4, sp
   17fe8:	b088      	sub	sp, #32
   17fea:	466a      	mov	r2, sp
   17fec:	4b1e      	ldr	r3, [pc, #120]	; (18068 <bt_id_read_public_addr+0x8c>)
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
   17fee:	6153      	str	r3, [r2, #20]
   17ff0:	4b1e      	ldr	r3, [pc, #120]	; (1806c <bt_id_read_public_addr+0x90>)
   17ff2:	6193      	str	r3, [r2, #24]
   17ff4:	2303      	movs	r3, #3
   17ff6:	f842 3f10 	str.w	r3, [r2, #16]!
   17ffa:	481d      	ldr	r0, [pc, #116]	; (18070 <bt_id_read_public_addr+0x94>)
   17ffc:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18000:	f01d fd62 	bl	35ac8 <z_log_msg_static_create.constprop.0>
   18004:	46a5      	mov	sp, r4
		return 0U;
   18006:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   18008:	370c      	adds	r7, #12
   1800a:	46bd      	mov	sp, r7
   1800c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   1800e:	1d3a      	adds	r2, r7, #4
   18010:	2100      	movs	r1, #0
   18012:	f241 0009 	movw	r0, #4105	; 0x1009
   18016:	f7fe fd4d 	bl	16ab4 <bt_hci_cmd_send_sync>
	if (err) {
   1801a:	4606      	mov	r6, r0
   1801c:	b120      	cbz	r0, 18028 <bt_id_read_public_addr+0x4c>
		LOG_WRN("Failed to read public address");
   1801e:	466c      	mov	r4, sp
   18020:	b088      	sub	sp, #32
   18022:	466a      	mov	r2, sp
   18024:	4b13      	ldr	r3, [pc, #76]	; (18074 <bt_id_read_public_addr+0x98>)
   18026:	e7e2      	b.n	17fee <bt_id_read_public_addr+0x12>
	rp = (void *)rsp->data;
   18028:	687b      	ldr	r3, [r7, #4]
	return memcmp(a, b, sizeof(*a));
   1802a:	4913      	ldr	r1, [pc, #76]	; (18078 <bt_id_read_public_addr+0x9c>)
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1802c:	68dd      	ldr	r5, [r3, #12]
   1802e:	3501      	adds	r5, #1
   18030:	2206      	movs	r2, #6
   18032:	4628      	mov	r0, r5
   18034:	f01d fa6f 	bl	35516 <memcmp>
   18038:	b918      	cbnz	r0, 18042 <bt_id_read_public_addr+0x66>
		net_buf_unref(rsp);
   1803a:	6878      	ldr	r0, [r7, #4]
   1803c:	f015 fc10 	bl	2d860 <net_buf_unref>
		return 0U;
   18040:	e7e1      	b.n	18006 <bt_id_read_public_addr+0x2a>
   18042:	490e      	ldr	r1, [pc, #56]	; (1807c <bt_id_read_public_addr+0xa0>)
   18044:	2206      	movs	r2, #6
   18046:	4628      	mov	r0, r5
   18048:	f01d fa65 	bl	35516 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1804c:	2800      	cmp	r0, #0
   1804e:	d0f4      	beq.n	1803a <bt_id_read_public_addr+0x5e>
	memcpy(dst, src, sizeof(*dst));
   18050:	2206      	movs	r2, #6
   18052:	4629      	mov	r1, r5
   18054:	1c60      	adds	r0, r4, #1
   18056:	f01d fa6e 	bl	35536 <memcpy>
	net_buf_unref(rsp);
   1805a:	6878      	ldr	r0, [r7, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   1805c:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   1805e:	f015 fbff 	bl	2d860 <net_buf_unref>
	return 1U;
   18062:	2001      	movs	r0, #1
   18064:	e7d0      	b.n	18008 <bt_id_read_public_addr+0x2c>
   18066:	bf00      	nop
   18068:	0003d014 	.word	0x0003d014
   1806c:	0003d136 	.word	0x0003d136
   18070:	000395d0 	.word	0x000395d0
   18074:	0003d031 	.word	0x0003d031
   18078:	0003c0b6 	.word	0x0003c0b6
   1807c:	0003c0b0 	.word	0x0003c0b0

00018080 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   18080:	b590      	push	{r4, r7, lr}
   18082:	b08b      	sub	sp, #44	; 0x2c
   18084:	af00      	add	r7, sp, #0
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   18086:	4638      	mov	r0, r7
   18088:	f7ff ffa8 	bl	17fdc <bt_id_read_public_addr>
   1808c:	4c23      	ldr	r4, [pc, #140]	; (1811c <bt_setup_public_id_addr+0x9c>)
   1808e:	71e0      	strb	r0, [r4, #7]

	if (!bt_dev.id_count) {
   18090:	b390      	cbz	r0, 180f8 <bt_setup_public_id_addr+0x78>
	memset(ir, 0, 16);
   18092:	2210      	movs	r2, #16
   18094:	2100      	movs	r1, #0
   18096:	f107 0018 	add.w	r0, r7, #24
   1809a:	f01d fa57 	bl	3554c <memset>
	if (!BT_VS_CMD_READ_KEY_ROOTS(bt_dev.vs_commands)) {
   1809e:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   180a2:	079b      	lsls	r3, r3, #30
   180a4:	d517      	bpl.n	180d6 <bt_setup_public_id_addr+0x56>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_KEY_HIERARCHY_ROOTS, NULL,
   180a6:	f107 0208 	add.w	r2, r7, #8
   180aa:	2100      	movs	r1, #0
   180ac:	f64f 400a 	movw	r0, #64522	; 0xfc0a
   180b0:	f7fe fd00 	bl	16ab4 <bt_hci_cmd_send_sync>
	if (err) {
   180b4:	b318      	cbz	r0, 180fe <bt_setup_public_id_addr+0x7e>
		LOG_WRN("Failed to read identity root");
   180b6:	466c      	mov	r4, sp
   180b8:	b088      	sub	sp, #32
   180ba:	466a      	mov	r2, sp
   180bc:	4b18      	ldr	r3, [pc, #96]	; (18120 <bt_setup_public_id_addr+0xa0>)
   180be:	6153      	str	r3, [r2, #20]
   180c0:	4b18      	ldr	r3, [pc, #96]	; (18124 <bt_setup_public_id_addr+0xa4>)
   180c2:	6193      	str	r3, [r2, #24]
   180c4:	2303      	movs	r3, #3
   180c6:	f842 3f10 	str.w	r3, [r2, #16]!
   180ca:	4817      	ldr	r0, [pc, #92]	; (18128 <bt_setup_public_id_addr+0xa8>)
   180cc:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   180d0:	f01d fcfa 	bl	35ac8 <z_log_msg_static_create.constprop.0>
   180d4:	46a5      	mov	sp, r4
	uint8_t ir[16];

	bt_read_identity_root(ir);

	if (!IS_ENABLED(CONFIG_BT_PRIVACY_RANDOMIZE_IR)) {
		if (!bt_smp_irk_get(ir, ir_irk)) {
   180d6:	f107 0108 	add.w	r1, r7, #8
   180da:	f107 0018 	add.w	r0, r7, #24
   180de:	f01f fadb 	bl	37698 <bt_smp_irk_get>
   180e2:	b1c0      	cbz	r0, 18116 <bt_setup_public_id_addr+0x96>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   180e4:	4811      	ldr	r0, [pc, #68]	; (1812c <bt_setup_public_id_addr+0xac>)
   180e6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   180ea:	f01d fd08 	bl	35afe <atomic_or.isra.0>
	uint8_t *irk = NULL;
   180ee:	2200      	movs	r2, #0
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   180f0:	4639      	mov	r1, r7
   180f2:	2000      	movs	r0, #0
   180f4:	f7ff fc14 	bl	17920 <id_create>
}
   180f8:	372c      	adds	r7, #44	; 0x2c
   180fa:	46bd      	mov	sp, r7
   180fc:	bd90      	pop	{r4, r7, pc}
	rp = (void *)rsp->data;
   180fe:	68bb      	ldr	r3, [r7, #8]
	memcpy(ir, rp->ir, 16);
   18100:	68d9      	ldr	r1, [r3, #12]
   18102:	2210      	movs	r2, #16
   18104:	3101      	adds	r1, #1
   18106:	f107 0018 	add.w	r0, r7, #24
   1810a:	f01d fa14 	bl	35536 <memcpy>
	net_buf_unref(rsp);
   1810e:	68b8      	ldr	r0, [r7, #8]
   18110:	f015 fba6 	bl	2d860 <net_buf_unref>
   18114:	e7df      	b.n	180d6 <bt_setup_public_id_addr+0x56>
			irk = ir_irk;
   18116:	f107 0208 	add.w	r2, r7, #8
   1811a:	e7e9      	b.n	180f0 <bt_setup_public_id_addr+0x70>
   1811c:	20000000 	.word	0x20000000
   18120:	0003d053 	.word	0x0003d053
   18124:	0003d120 	.word	0x0003d120
   18128:	000395d0 	.word	0x000395d0
   1812c:	200000cc 	.word	0x200000cc

00018130 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   18130:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   18134:	4b2a      	ldr	r3, [pc, #168]	; (181e0 <bt_read_static_addr+0xb0>)
{
   18136:	b083      	sub	sp, #12
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   18138:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
   1813c:	07db      	lsls	r3, r3, #31
{
   1813e:	af00      	add	r7, sp, #0
   18140:	4680      	mov	r8, r0
   18142:	4689      	mov	r9, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   18144:	d415      	bmi.n	18172 <bt_read_static_addr+0x42>
		LOG_WRN("Read Static Addresses command not available");
   18146:	466c      	mov	r4, sp
   18148:	b088      	sub	sp, #32
   1814a:	466a      	mov	r2, sp
   1814c:	4b25      	ldr	r3, [pc, #148]	; (181e4 <bt_read_static_addr+0xb4>)
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
   1814e:	6153      	str	r3, [r2, #20]
   18150:	4b25      	ldr	r3, [pc, #148]	; (181e8 <bt_read_static_addr+0xb8>)
   18152:	6193      	str	r3, [r2, #24]
   18154:	2303      	movs	r3, #3
   18156:	f842 3f10 	str.w	r3, [r2, #16]!
   1815a:	4824      	ldr	r0, [pc, #144]	; (181ec <bt_read_static_addr+0xbc>)
   1815c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18160:	f01d fcb2 	bl	35ac8 <z_log_msg_static_create.constprop.0>
		return 0;
   18164:	2500      	movs	r5, #0
   18166:	46a5      	mov	sp, r4
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   18168:	4628      	mov	r0, r5
   1816a:	370c      	adds	r7, #12
   1816c:	46bd      	mov	sp, r7
   1816e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   18172:	1d3a      	adds	r2, r7, #4
   18174:	2100      	movs	r1, #0
   18176:	f64f 4009 	movw	r0, #64521	; 0xfc09
   1817a:	f7fe fc9b 	bl	16ab4 <bt_hci_cmd_send_sync>
	if (err) {
   1817e:	4604      	mov	r4, r0
   18180:	b120      	cbz	r0, 1818c <bt_read_static_addr+0x5c>
		LOG_WRN("Failed to read static addresses");
   18182:	466c      	mov	r4, sp
   18184:	b088      	sub	sp, #32
   18186:	466a      	mov	r2, sp
   18188:	4b19      	ldr	r3, [pc, #100]	; (181f0 <bt_read_static_addr+0xc0>)
   1818a:	e7e0      	b.n	1814e <bt_read_static_addr+0x1e>
	rp = (void *)rsp->data;
   1818c:	687b      	ldr	r3, [r7, #4]
   1818e:	68de      	ldr	r6, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
   18190:	7875      	ldrb	r5, [r6, #1]
   18192:	454d      	cmp	r5, r9
   18194:	bf28      	it	cs
   18196:	464d      	movcs	r5, r9
	for (i = 0; i < cnt; i++) {
   18198:	3602      	adds	r6, #2
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   1819a:	f04f 0916 	mov.w	r9, #22
	for (i = 0; i < cnt; i++) {
   1819e:	42a5      	cmp	r5, r4
   181a0:	dc15      	bgt.n	181ce <bt_read_static_addr+0x9e>
	net_buf_unref(rsp);
   181a2:	6878      	ldr	r0, [r7, #4]
   181a4:	f015 fb5c 	bl	2d860 <net_buf_unref>
	if (!cnt) {
   181a8:	2d00      	cmp	r5, #0
   181aa:	d1dd      	bne.n	18168 <bt_read_static_addr+0x38>
		LOG_WRN("No static addresses stored in controller");
   181ac:	466c      	mov	r4, sp
   181ae:	b088      	sub	sp, #32
   181b0:	466a      	mov	r2, sp
   181b2:	4b10      	ldr	r3, [pc, #64]	; (181f4 <bt_read_static_addr+0xc4>)
   181b4:	6153      	str	r3, [r2, #20]
   181b6:	4b0c      	ldr	r3, [pc, #48]	; (181e8 <bt_read_static_addr+0xb8>)
   181b8:	6193      	str	r3, [r2, #24]
   181ba:	2303      	movs	r3, #3
   181bc:	f842 3f10 	str.w	r3, [r2, #16]!
   181c0:	480a      	ldr	r0, [pc, #40]	; (181ec <bt_read_static_addr+0xbc>)
   181c2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   181c6:	f01d fc7f 	bl	35ac8 <z_log_msg_static_create.constprop.0>
   181ca:	46a5      	mov	sp, r4
   181cc:	e7cc      	b.n	18168 <bt_read_static_addr+0x38>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   181ce:	4631      	mov	r1, r6
   181d0:	fb09 8004 	mla	r0, r9, r4, r8
   181d4:	2216      	movs	r2, #22
   181d6:	f01d f9ae 	bl	35536 <memcpy>
	for (i = 0; i < cnt; i++) {
   181da:	3401      	adds	r4, #1
   181dc:	3616      	adds	r6, #22
   181de:	e7de      	b.n	1819e <bt_read_static_addr+0x6e>
   181e0:	20000000 	.word	0x20000000
   181e4:	0003d074 	.word	0x0003d074
   181e8:	0003d10c 	.word	0x0003d10c
   181ec:	000395d0 	.word	0x000395d0
   181f0:	0003d0a4 	.word	0x0003d0a4
   181f4:	0003d0c8 	.word	0x0003d0c8

000181f8 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   181f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   181fc:	4e23      	ldr	r6, [pc, #140]	; (1828c <bt_setup_random_id_addr+0x94>)
   181fe:	79f4      	ldrb	r4, [r6, #7]
{
   18200:	b08c      	sub	sp, #48	; 0x30
	if (!bt_dev.id_count) {
   18202:	b92c      	cbnz	r4, 18210 <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   18204:	2101      	movs	r1, #1
   18206:	a806      	add	r0, sp, #24
   18208:	f7ff ff92 	bl	18130 <bt_read_static_addr>
   1820c:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   1820e:	bb90      	cbnz	r0, 18276 <bt_setup_random_id_addr+0x7e>
   18210:	481f      	ldr	r0, [pc, #124]	; (18290 <bt_setup_random_id_addr+0x98>)
   18212:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   18216:	f01d fc72 	bl	35afe <atomic_or.isra.0>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   1821a:	2100      	movs	r1, #0
   1821c:	4608      	mov	r0, r1
}
   1821e:	b00c      	add	sp, #48	; 0x30
   18220:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_id_create(NULL, NULL);
   18224:	f7ff be6c 	b.w	17f00 <bt_id_create>
					if (!bt_smp_irk_get(addrs[i].ir, ir_irk)) {
   18228:	fb08 fa05 	mul.w	sl, r8, r5
   1822c:	f10a 0006 	add.w	r0, sl, #6
   18230:	ab06      	add	r3, sp, #24
   18232:	a902      	add	r1, sp, #8
   18234:	4418      	add	r0, r3
   18236:	f01f fa2f 	bl	37698 <bt_smp_irk_get>
   1823a:	b1d0      	cbz	r0, 18272 <bt_setup_random_id_addr+0x7a>
   1823c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   18240:	4648      	mov	r0, r9
   18242:	f01d fc5c 	bl	35afe <atomic_or.isra.0>
				uint8_t *irk = NULL;
   18246:	2700      	movs	r7, #0
   18248:	ab06      	add	r3, sp, #24
   1824a:	eb03 010a 	add.w	r1, r3, sl
   1824e:	2206      	movs	r2, #6
   18250:	f10d 0001 	add.w	r0, sp, #1
   18254:	f01d f96f 	bl	35536 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   18258:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   1825a:	463a      	mov	r2, r7
   1825c:	4669      	mov	r1, sp
   1825e:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   18260:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   18264:	f7ff fb5c 	bl	17920 <id_create>
				if (err) {
   18268:	3401      	adds	r4, #1
   1826a:	b140      	cbz	r0, 1827e <bt_setup_random_id_addr+0x86>
}
   1826c:	b00c      	add	sp, #48	; 0x30
   1826e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						irk = ir_irk;
   18272:	af02      	add	r7, sp, #8
   18274:	e7e8      	b.n	18248 <bt_setup_random_id_addr+0x50>
   18276:	f04f 0816 	mov.w	r8, #22
   1827a:	f106 09cc 	add.w	r9, r6, #204	; 0xcc
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   1827e:	79f3      	ldrb	r3, [r6, #7]
   18280:	b2e5      	uxtb	r5, r4
   18282:	42ab      	cmp	r3, r5
   18284:	d8d0      	bhi.n	18228 <bt_setup_random_id_addr+0x30>
			return 0;
   18286:	2000      	movs	r0, #0
   18288:	e7f0      	b.n	1826c <bt_setup_random_id_addr+0x74>
   1828a:	bf00      	nop
   1828c:	20000000 	.word	0x20000000
   18290:	200000cc 	.word	0x200000cc

00018294 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   18294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18298:	461d      	mov	r5, r3
   1829a:	460f      	mov	r7, r1
   1829c:	4690      	mov	r8, r2
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   1829e:	4603      	mov	r3, r0
   182a0:	2800      	cmp	r0, #0
   182a2:	d05e      	beq.n	18362 <bt_id_set_adv_own_addr+0xce>
   182a4:	2d00      	cmp	r5, #0
   182a6:	d05c      	beq.n	18362 <bt_id_set_adv_own_addr+0xce>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   182a8:	07ca      	lsls	r2, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   182aa:	7806      	ldrb	r6, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   182ac:	d542      	bpl.n	18334 <bt_id_set_adv_own_addr+0xa0>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   182ae:	f1b8 0f00 	cmp.w	r8, #0
   182b2:	d118      	bne.n	182e6 <bt_id_set_adv_own_addr+0x52>
		    !BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
			return -ENOTSUP;
		}

		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   182b4:	074c      	lsls	r4, r1, #29
   182b6:	d526      	bpl.n	18306 <bt_id_set_adv_own_addr+0x72>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   182b8:	492d      	ldr	r1, [pc, #180]	; (18370 <bt_id_set_adv_own_addr+0xdc>)
   182ba:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
   182be:	5c8c      	ldrb	r4, [r1, r2]
   182c0:	2c01      	cmp	r4, #1
   182c2:	d125      	bne.n	18310 <bt_id_set_adv_own_addr+0x7c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   182c4:	4c2a      	ldr	r4, [pc, #168]	; (18370 <bt_id_set_adv_own_addr+0xdc>)
   182c6:	2107      	movs	r1, #7
   182c8:	2201      	movs	r2, #1
   182ca:	fb11 2106 	smlabb	r1, r1, r6, r2
   182ce:	4421      	add	r1, r4
   182d0:	4618      	mov	r0, r3
   182d2:	f01d fc9f 	bl	35c14 <bt_id_set_adv_random_addr>
				if (err) {
   182d6:	b9a0      	cbnz	r0, 18302 <bt_id_set_adv_own_addr+0x6e>
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   182d8:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
   182dc:	5da4      	ldrb	r4, [r4, r6]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   182de:	f1b8 0f00 	cmp.w	r8, #0
   182e2:	d015      	beq.n	18310 <bt_id_set_adv_own_addr+0x7c>
   182e4:	e021      	b.n	1832a <bt_id_set_adv_own_addr+0x96>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   182e6:	f011 0420 	ands.w	r4, r1, #32
   182ea:	d004      	beq.n	182f6 <bt_id_set_adv_own_addr+0x62>
		    !BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   182ec:	4a20      	ldr	r2, [pc, #128]	; (18370 <bt_id_set_adv_own_addr+0xdc>)
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   182ee:	f892 20d0 	ldrb.w	r2, [r2, #208]	; 0xd0
   182f2:	0650      	lsls	r0, r2, #25
   182f4:	d538      	bpl.n	18368 <bt_id_set_adv_own_addr+0xd4>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   182f6:	0779      	lsls	r1, r7, #29
   182f8:	d411      	bmi.n	1831e <bt_id_set_adv_own_addr+0x8a>
			err = bt_id_set_adv_private_addr(adv);
   182fa:	4618      	mov	r0, r3
   182fc:	f01d fc92 	bl	35c24 <bt_id_set_adv_private_addr>
			if (err) {
   18300:	b148      	cbz	r0, 18316 <bt_id_set_adv_own_addr+0x82>
			return err;
		}
	}

	return 0;
}
   18302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = bt_id_set_adv_private_addr(adv);
   18306:	f01d fc8d 	bl	35c24 <bt_id_set_adv_private_addr>
			if (err) {
   1830a:	2800      	cmp	r0, #0
   1830c:	d1f9      	bne.n	18302 <bt_id_set_adv_own_addr+0x6e>
{
   1830e:	2401      	movs	r4, #1
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   18310:	702c      	strb	r4, [r5, #0]
	return 0;
   18312:	2000      	movs	r0, #0
   18314:	e7f5      	b.n	18302 <bt_id_set_adv_own_addr+0x6e>
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   18316:	2c00      	cmp	r4, #0
   18318:	d0f9      	beq.n	1830e <bt_id_set_adv_own_addr+0x7a>
   1831a:	2403      	movs	r4, #3
   1831c:	e7f8      	b.n	18310 <bt_id_set_adv_own_addr+0x7c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1831e:	4914      	ldr	r1, [pc, #80]	; (18370 <bt_id_set_adv_own_addr+0xdc>)
   18320:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
   18324:	5c8c      	ldrb	r4, [r1, r2]
   18326:	2c01      	cmp	r4, #1
   18328:	d0cc      	beq.n	182c4 <bt_id_set_adv_own_addr+0x30>
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1832a:	06ba      	lsls	r2, r7, #26
   1832c:	d5f0      	bpl.n	18310 <bt_id_set_adv_own_addr+0x7c>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   1832e:	f044 0402 	orr.w	r4, r4, #2
   18332:	e7ed      	b.n	18310 <bt_id_set_adv_own_addr+0x7c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   18334:	074b      	lsls	r3, r1, #29
   18336:	d510      	bpl.n	1835a <bt_id_set_adv_own_addr+0xc6>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   18338:	4f0d      	ldr	r7, [pc, #52]	; (18370 <bt_id_set_adv_own_addr+0xdc>)
   1833a:	ebc6 08c6 	rsb	r8, r6, r6, lsl #3
   1833e:	f817 4008 	ldrb.w	r4, [r7, r8]
   18342:	2c01      	cmp	r4, #1
   18344:	d1e4      	bne.n	18310 <bt_id_set_adv_own_addr+0x7c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   18346:	2107      	movs	r1, #7
   18348:	fb11 4106 	smlabb	r1, r1, r6, r4
   1834c:	4439      	add	r1, r7
   1834e:	f01d fc61 	bl	35c14 <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   18352:	f817 3008 	ldrb.w	r3, [r7, r8]
   18356:	702b      	strb	r3, [r5, #0]
		if (err) {
   18358:	e7d3      	b.n	18302 <bt_id_set_adv_own_addr+0x6e>
			err = bt_id_set_adv_private_addr(adv);
   1835a:	f01d fc63 	bl	35c24 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   1835e:	2301      	movs	r3, #1
   18360:	e7f9      	b.n	18356 <bt_id_set_adv_own_addr+0xc2>
		return -EINVAL;
   18362:	f06f 0015 	mvn.w	r0, #21
   18366:	e7cc      	b.n	18302 <bt_id_set_adv_own_addr+0x6e>
			return -ENOTSUP;
   18368:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1836c:	e7c9      	b.n	18302 <bt_id_set_adv_own_addr+0x6e>
   1836e:	bf00      	nop
   18370:	20000000 	.word	0x20000000

00018374 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   18374:	b508      	push	{r3, lr}
			return err;
		}
	}

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
   18376:	4903      	ldr	r1, [pc, #12]	; (18384 <bt_id_init+0x10>)
   18378:	4803      	ldr	r0, [pc, #12]	; (18388 <bt_id_init+0x14>)
   1837a:	f020 fb68 	bl	38a4e <k_work_init_delayable>
#endif

	return 0;
}
   1837e:	2000      	movs	r0, #0
   18380:	bd08      	pop	{r3, pc}
   18382:	bf00      	nop
   18384:	00017df1 	.word	0x00017df1
   18388:	20000168 	.word	0x20000168

0001838c <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   1838c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18390:	b085      	sub	sp, #20
   18392:	af00      	add	r7, sp, #0
   18394:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   18396:	2120      	movs	r1, #32
{
   18398:	60b8      	str	r0, [r7, #8]
   1839a:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1839c:	f7fe fa2e 	bl	167fc <bt_hci_cmd_create>
	if (!buf) {
   183a0:	4605      	mov	r5, r0
   183a2:	2800      	cmp	r0, #0
   183a4:	d066      	beq.n	18474 <hci_set_ad+0xe8>
   183a6:	2120      	movs	r1, #32
   183a8:	300c      	adds	r0, #12
   183aa:	f01f fb61 	bl	37a70 <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
   183ae:	2220      	movs	r2, #32
   183b0:	2100      	movs	r1, #0
   183b2:	4682      	mov	sl, r0
   183b4:	f01d f8ca 	bl	3554c <memset>

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   183b8:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
   183bc:	f10a 0b01 	add.w	fp, sl, #1
	for (size_t i = 0; i < ad_len; i++) {
   183c0:	60fb      	str	r3, [r7, #12]
	uint8_t set_data_len = 0;
   183c2:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   183c4:	f8d4 9000 	ldr.w	r9, [r4]
   183c8:	2300      	movs	r3, #0
   183ca:	6862      	ldr	r2, [r4, #4]
   183cc:	4293      	cmp	r3, r2
   183ce:	d30b      	bcc.n	183e8 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   183d0:	68fb      	ldr	r3, [r7, #12]
   183d2:	3408      	adds	r4, #8
   183d4:	42a3      	cmp	r3, r4
   183d6:	d1f5      	bne.n	183c4 <hci_set_ad+0x38>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   183d8:	68b8      	ldr	r0, [r7, #8]
	*data_len = set_data_len;
   183da:	f88a 6000 	strb.w	r6, [sl]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   183de:	2200      	movs	r2, #0
   183e0:	4629      	mov	r1, r5
   183e2:	f7fe fb67 	bl	16ab4 <bt_hci_cmd_send_sync>
   183e6:	e024      	b.n	18432 <hci_set_ad+0xa6>
			size_t len = data[j].data_len;
   183e8:	f899 2001 	ldrb.w	r2, [r9, #1]
			uint8_t type = data[j].type;
   183ec:	f899 c000 	ldrb.w	ip, [r9]
			if ((set_data_len + len + 2) > set_data_len_max) {
   183f0:	1cb0      	adds	r0, r6, #2
   183f2:	1881      	adds	r1, r0, r2
   183f4:	291f      	cmp	r1, #31
   183f6:	d922      	bls.n	1843e <hci_set_ad+0xb2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   183f8:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   183fc:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   18400:	d101      	bne.n	18406 <hci_set_ad+0x7a>
   18402:	2a00      	cmp	r2, #0
   18404:	dc19      	bgt.n	1843a <hci_set_ad+0xae>
					LOG_ERR("Too big advertising data");
   18406:	466c      	mov	r4, sp
   18408:	b088      	sub	sp, #32
   1840a:	466a      	mov	r2, sp
   1840c:	4b1b      	ldr	r3, [pc, #108]	; (1847c <hci_set_ad+0xf0>)
   1840e:	6153      	str	r3, [r2, #20]
   18410:	4b1b      	ldr	r3, [pc, #108]	; (18480 <hci_set_ad+0xf4>)
   18412:	6193      	str	r3, [r2, #24]
   18414:	2303      	movs	r3, #3
   18416:	f842 3f10 	str.w	r3, [r2, #16]!
   1841a:	481a      	ldr	r0, [pc, #104]	; (18484 <hci_set_ad+0xf8>)
   1841c:	2300      	movs	r3, #0
   1841e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18422:	f7fa fea7 	bl	13174 <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   18426:	4628      	mov	r0, r5
   18428:	46a5      	mov	sp, r4
   1842a:	f015 fa19 	bl	2d860 <net_buf_unref>
					return -EINVAL;
   1842e:	f06f 0015 	mvn.w	r0, #21
}
   18432:	3714      	adds	r7, #20
   18434:	46bd      	mov	sp, r7
   18436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   1843a:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   1843e:	fa5f f882 	uxtb.w	r8, r2
   18442:	f108 0101 	add.w	r1, r8, #1
   18446:	f80b 1006 	strb.w	r1, [fp, r6]
   1844a:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   1844c:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   1844e:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   18452:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   18456:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1845a:	607b      	str	r3, [r7, #4]
			set_data_len += len;
   1845c:	f108 0802 	add.w	r8, r8, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   18460:	f01d f869 	bl	35536 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   18464:	687b      	ldr	r3, [r7, #4]
			set_data_len += len;
   18466:	44b0      	add	r8, r6
   18468:	fa5f f688 	uxtb.w	r6, r8
		for (size_t j = 0; j < ad[i].len; j++) {
   1846c:	3301      	adds	r3, #1
   1846e:	f109 0908 	add.w	r9, r9, #8
   18472:	e7aa      	b.n	183ca <hci_set_ad+0x3e>
		return -ENOBUFS;
   18474:	f06f 0068 	mvn.w	r0, #104	; 0x68
   18478:	e7db      	b.n	18432 <hci_set_ad+0xa6>
   1847a:	bf00      	nop
   1847c:	0003d188 	.word	0x0003d188
   18480:	0003d255 	.word	0x0003d255
   18484:	00039560 	.word	0x00039560

00018488 <adv_is_directed>:

	return channel_map;
}

static inline bool adv_is_directed(const struct bt_le_ext_adv *adv)
{
   18488:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   1848a:	4904      	ldr	r1, [pc, #16]	; (1849c <adv_is_directed+0x14>)
   1848c:	2207      	movs	r2, #7
   1848e:	3009      	adds	r0, #9
   18490:	f01d f841 	bl	35516 <memcmp>
	/* The advertiser is assumed to be directed when the peer address has
	 * been set.
	 */
	return !bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY);
}
   18494:	3800      	subs	r0, #0
   18496:	bf18      	it	ne
   18498:	2001      	movne	r0, #1
   1849a:	bd08      	pop	{r3, pc}
   1849c:	0003c0a9 	.word	0x0003c0a9

000184a0 <le_adv_start_add_conn>:

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   184a0:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   184a2:	4b15      	ldr	r3, [pc, #84]	; (184f8 <le_adv_start_add_conn+0x58>)
   184a4:	7802      	ldrb	r2, [r0, #0]
   184a6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   184aa:	4604      	mov	r4, r0
   184ac:	460d      	mov	r5, r1

	if (!adv_is_directed(adv)) {
   184ae:	f7ff ffeb 	bl	18488 <adv_is_directed>
   184b2:	4603      	mov	r3, r0
   184b4:	7820      	ldrb	r0, [r4, #0]
   184b6:	b96b      	cbnz	r3, 184d4 <le_adv_start_add_conn+0x34>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   184b8:	4910      	ldr	r1, [pc, #64]	; (184fc <le_adv_start_add_conn+0x5c>)
   184ba:	f001 f95f 	bl	1977c <bt_conn_add_le>
		if (!conn) {
   184be:	4604      	mov	r4, r0
   184c0:	b910      	cbnz	r0, 184c8 <le_adv_start_add_conn+0x28>
			return -ENOMEM;
   184c2:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   184c6:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   184c8:	2104      	movs	r1, #4
   184ca:	f000 ff41 	bl	19350 <bt_conn_set_state>
		*out_conn = conn;
   184ce:	602c      	str	r4, [r5, #0]
		return 0;
   184d0:	2000      	movs	r0, #0
   184d2:	e7f8      	b.n	184c6 <le_adv_start_add_conn+0x26>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   184d4:	f104 0609 	add.w	r6, r4, #9
   184d8:	4631      	mov	r1, r6
   184da:	f001 f985 	bl	197e8 <bt_conn_exists_le>
   184de:	b940      	cbnz	r0, 184f2 <le_adv_start_add_conn+0x52>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   184e0:	7820      	ldrb	r0, [r4, #0]
   184e2:	4631      	mov	r1, r6
   184e4:	f001 f94a 	bl	1977c <bt_conn_add_le>
	if (!conn) {
   184e8:	4604      	mov	r4, r0
   184ea:	2800      	cmp	r0, #0
   184ec:	d0e9      	beq.n	184c2 <le_adv_start_add_conn+0x22>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   184ee:	2105      	movs	r1, #5
   184f0:	e7eb      	b.n	184ca <le_adv_start_add_conn+0x2a>
		return -EINVAL;
   184f2:	f06f 0015 	mvn.w	r0, #21
   184f6:	e7e6      	b.n	184c6 <le_adv_start_add_conn+0x26>
   184f8:	20000000 	.word	0x20000000
   184fc:	0003c0a2 	.word	0x0003c0a2

00018500 <valid_adv_param>:
{
   18500:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   18502:	6843      	ldr	r3, [r0, #4]
{
   18504:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   18506:	0558      	lsls	r0, r3, #21
   18508:	d501      	bpl.n	1850e <valid_adv_param+0xe>
		return false;
   1850a:	2000      	movs	r0, #0
}
   1850c:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1850e:	6922      	ldr	r2, [r4, #16]
   18510:	b12a      	cbz	r2, 1851e <valid_adv_param+0x1e>
   18512:	07d9      	lsls	r1, r3, #31
   18514:	d5f9      	bpl.n	1850a <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_USE_IDENTITY) &&
   18516:	f003 0324 	and.w	r3, r3, #36	; 0x24
   1851a:	2b24      	cmp	r3, #36	; 0x24
   1851c:	d0f5      	beq.n	1850a <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   1851e:	4d19      	ldr	r5, [pc, #100]	; (18584 <valid_adv_param+0x84>)
   18520:	7820      	ldrb	r0, [r4, #0]
   18522:	79eb      	ldrb	r3, [r5, #7]
   18524:	4283      	cmp	r3, r0
   18526:	d9f0      	bls.n	1850a <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   18528:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1852c:	4916      	ldr	r1, [pc, #88]	; (18588 <valid_adv_param+0x88>)
   1852e:	2207      	movs	r2, #7
   18530:	4428      	add	r0, r5
   18532:	f01c fff0 	bl	35516 <memcmp>
	if (param->id >= bt_dev.id_count ||
   18536:	2800      	cmp	r0, #0
   18538:	d0e7      	beq.n	1850a <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1853a:	6860      	ldr	r0, [r4, #4]
   1853c:	07c2      	lsls	r2, r0, #31
   1853e:	d406      	bmi.n	1854e <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   18540:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   18544:	2b08      	cmp	r3, #8
   18546:	d802      	bhi.n	1854e <valid_adv_param+0x4e>
   18548:	68a3      	ldr	r3, [r4, #8]
   1854a:	2b9f      	cmp	r3, #159	; 0x9f
   1854c:	d9dd      	bls.n	1850a <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   1854e:	f010 0f30 	tst.w	r0, #48	; 0x30
   18552:	d002      	beq.n	1855a <valid_adv_param+0x5a>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   18554:	6923      	ldr	r3, [r4, #16]
   18556:	2b00      	cmp	r3, #0
   18558:	d0d7      	beq.n	1850a <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   1855a:	06c3      	lsls	r3, r0, #27
   1855c:	d401      	bmi.n	18562 <valid_adv_param+0x62>
   1855e:	6923      	ldr	r3, [r4, #16]
   18560:	b943      	cbnz	r3, 18574 <valid_adv_param+0x74>
		if (param->interval_min > param->interval_max ||
   18562:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   18566:	429a      	cmp	r2, r3
   18568:	d8cf      	bhi.n	1850a <valid_adv_param+0xa>
   1856a:	2a1f      	cmp	r2, #31
   1856c:	d9cd      	bls.n	1850a <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   1856e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   18572:	d8ca      	bhi.n	1850a <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   18574:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   18578:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   1857c:	bf18      	it	ne
   1857e:	2001      	movne	r0, #1
   18580:	e7c4      	b.n	1850c <valid_adv_param+0xc>
   18582:	bf00      	nop
   18584:	20000000 	.word	0x20000000
   18588:	0003c0a9 	.word	0x0003c0a9

0001858c <bt_le_ext_adv_foreach>:
{
   1858c:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   1858e:	4801      	ldr	r0, [pc, #4]	; (18594 <bt_le_ext_adv_foreach+0x8>)
   18590:	4718      	bx	r3
   18592:	bf00      	nop
   18594:	20000018 	.word	0x20000018

00018598 <bt_le_adv_lookup_legacy>:
}
   18598:	4800      	ldr	r0, [pc, #0]	; (1859c <bt_le_adv_lookup_legacy+0x4>)
   1859a:	4770      	bx	lr
   1859c:	20000018 	.word	0x20000018

000185a0 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   185a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   185a4:	b08d      	sub	sp, #52	; 0x34
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   185a6:	f8d1 b010 	ldr.w	fp, [r1, #16]
{
   185aa:	af04      	add	r7, sp, #16
   185ac:	e9c7 3200 	strd	r3, r2, [r7]
	struct bt_conn *conn = NULL;
   185b0:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   185b2:	ebbb 0403 	subs.w	r4, fp, r3
{
   185b6:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   185b8:	4895      	ldr	r0, [pc, #596]	; (18810 <bt_le_adv_start_legacy+0x270>)
	struct bt_conn *conn = NULL;
   185ba:	60fb      	str	r3, [r7, #12]
	bool dir_adv = (param->peer != NULL), scannable = false;
   185bc:	bf18      	it	ne
   185be:	2401      	movne	r4, #1
   185c0:	f01d fb5a 	bl	35c78 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   185c4:	0743      	lsls	r3, r0, #29
{
   185c6:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   185c8:	f140 8119 	bpl.w	187fe <bt_le_adv_start_legacy+0x25e>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   185cc:	4608      	mov	r0, r1
   185ce:	f7ff ff97 	bl	18500 <valid_adv_param>
   185d2:	b930      	cbnz	r0, 185e2 <bt_le_adv_start_legacy+0x42>
		return -EINVAL;
   185d4:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   185d8:	4620      	mov	r0, r4
   185da:	3724      	adds	r7, #36	; 0x24
   185dc:	46bd      	mov	sp, r7
   185de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   185e2:	4628      	mov	r0, r5
   185e4:	f01d fb25 	bl	35c32 <bt_id_adv_random_addr_check>
   185e8:	4682      	mov	sl, r0
   185ea:	2800      	cmp	r0, #0
   185ec:	d0f2      	beq.n	185d4 <bt_le_adv_start_legacy+0x34>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   185ee:	f106 0910 	add.w	r9, r6, #16
   185f2:	4648      	mov	r0, r9
   185f4:	f01d fb40 	bl	35c78 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   185f8:	f3c0 18c0 	ubfx	r8, r0, #7, #1
   185fc:	0600      	lsls	r0, r0, #24
   185fe:	f100 8101 	bmi.w	18804 <bt_le_adv_start_legacy+0x264>
	(void)memset(&set_param, 0, sizeof(set_param));
   18602:	220f      	movs	r2, #15
   18604:	4641      	mov	r1, r8
   18606:	f107 0010 	add.w	r0, r7, #16
   1860a:	f01c ff9f 	bl	3554c <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   1860e:	68ab      	ldr	r3, [r5, #8]
   18610:	823b      	strh	r3, [r7, #16]
	set_param.channel_map  = get_adv_channel_map(param->options);
   18612:	6868      	ldr	r0, [r5, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   18614:	68eb      	ldr	r3, [r5, #12]
   18616:	827b      	strh	r3, [r7, #18]
	set_param.channel_map  = get_adv_channel_map(param->options);
   18618:	f01d fb1f 	bl	35c5a <get_adv_channel_map>
	if (adv->id != param->id) {
   1861c:	7832      	ldrb	r2, [r6, #0]
   1861e:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   18620:	7778      	strb	r0, [r7, #29]
	if (adv->id != param->id) {
   18622:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   18624:	f887 801e 	strb.w	r8, [r7, #30]
	if (adv->id != param->id) {
   18628:	d004      	beq.n	18634 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1862a:	4879      	ldr	r0, [pc, #484]	; (18810 <bt_le_adv_start_legacy+0x270>)
   1862c:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   18630:	f01d fb28 	bl	35c84 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   18634:	4a77      	ldr	r2, [pc, #476]	; (18814 <bt_le_adv_start_legacy+0x274>)
	adv->id = param->id;
   18636:	782b      	ldrb	r3, [r5, #0]
   18638:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   1863a:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   1863e:	6869      	ldr	r1, [r5, #4]
   18640:	4622      	mov	r2, r4
   18642:	f107 0315 	add.w	r3, r7, #21
   18646:	4630      	mov	r0, r6
   18648:	f7ff fe24 	bl	18294 <bt_id_set_adv_own_addr>
	if (err) {
   1864c:	4604      	mov	r4, r0
   1864e:	2800      	cmp	r0, #0
   18650:	d1c2      	bne.n	185d8 <bt_le_adv_start_legacy+0x38>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   18652:	f106 0009 	add.w	r0, r6, #9
	memcpy(dst, src, sizeof(*dst));
   18656:	2207      	movs	r2, #7
	if (dir_adv) {
   18658:	f1bb 0f00 	cmp.w	fp, #0
   1865c:	d013      	beq.n	18686 <bt_le_adv_start_legacy+0xe6>
   1865e:	6929      	ldr	r1, [r5, #16]
   18660:	f01c ff69 	bl	35536 <memcpy>
	name_type = get_adv_name_type_param(param);
   18664:	4628      	mov	r0, r5
   18666:	f01d fbaa 	bl	35dbe <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1866a:	686b      	ldr	r3, [r5, #4]
   1866c:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
   1866e:	4680      	mov	r8, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   18670:	d416      	bmi.n	186a0 <bt_le_adv_start_legacy+0x100>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   18672:	059b      	lsls	r3, r3, #22
   18674:	d404      	bmi.n	18680 <bt_le_adv_start_legacy+0xe0>
   18676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   18678:	b913      	cbnz	r3, 18680 <bt_le_adv_start_legacy+0xe0>
   1867a:	f1b8 0f02 	cmp.w	r8, #2
   1867e:	d15f      	bne.n	18740 <bt_le_adv_start_legacy+0x1a0>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   18680:	2302      	movs	r3, #2
   18682:	753b      	strb	r3, [r7, #20]
   18684:	e019      	b.n	186ba <bt_le_adv_start_legacy+0x11a>
   18686:	4964      	ldr	r1, [pc, #400]	; (18818 <bt_le_adv_start_legacy+0x278>)
   18688:	f01c ff55 	bl	35536 <memcpy>
	name_type = get_adv_name_type_param(param);
   1868c:	4628      	mov	r0, r5
   1868e:	f01d fb96 	bl	35dbe <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   18692:	686b      	ldr	r3, [r5, #4]
   18694:	07da      	lsls	r2, r3, #31
	name_type = get_adv_name_type_param(param);
   18696:	4680      	mov	r8, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   18698:	d5eb      	bpl.n	18672 <bt_le_adv_start_legacy+0xd2>
			set_param.type = BT_HCI_ADV_IND;
   1869a:	f887 b014 	strb.w	fp, [r7, #20]
   1869e:	e00c      	b.n	186ba <bt_le_adv_start_legacy+0x11a>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   186a0:	f013 0f10 	tst.w	r3, #16
   186a4:	bf0c      	ite	eq
   186a6:	2301      	moveq	r3, #1
   186a8:	2304      	movne	r3, #4
   186aa:	6929      	ldr	r1, [r5, #16]
   186ac:	753b      	strb	r3, [r7, #20]
   186ae:	2207      	movs	r2, #7
   186b0:	f107 0016 	add.w	r0, r7, #22
   186b4:	f01c ff3f 	bl	35536 <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   186b8:	46a2      	mov	sl, r4
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   186ba:	210f      	movs	r1, #15
   186bc:	f242 0006 	movw	r0, #8198	; 0x2006
   186c0:	f7fe f89c 	bl	167fc <bt_hci_cmd_create>
	if (!buf) {
   186c4:	4604      	mov	r4, r0
   186c6:	2800      	cmp	r0, #0
   186c8:	f000 809f 	beq.w	1880a <bt_le_adv_start_legacy+0x26a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   186cc:	220f      	movs	r2, #15
   186ce:	f107 0110 	add.w	r1, r7, #16
   186d2:	300c      	adds	r0, #12
   186d4:	f01f f9d2 	bl	37a7c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   186d8:	4621      	mov	r1, r4
   186da:	2200      	movs	r2, #0
   186dc:	f242 0006 	movw	r0, #8198	; 0x2006
   186e0:	f7fe f9e8 	bl	16ab4 <bt_hci_cmd_send_sync>
	if (err) {
   186e4:	4604      	mov	r4, r0
   186e6:	2800      	cmp	r0, #0
   186e8:	f47f af76 	bne.w	185d8 <bt_le_adv_start_legacy+0x38>
	if (!dir_adv) {
   186ec:	f1bb 0f00 	cmp.w	fp, #0
   186f0:	d02b      	beq.n	1874a <bt_le_adv_start_legacy+0x1aa>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   186f2:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   186f4:	07dc      	lsls	r4, r3, #31
   186f6:	d436      	bmi.n	18766 <bt_le_adv_start_legacy+0x1c6>
	return bt_le_adv_set_enable_legacy(adv, enable);
   186f8:	2101      	movs	r1, #1
   186fa:	4630      	mov	r0, r6
   186fc:	f01d fb6f 	bl	35dde <bt_le_adv_set_enable_legacy>
	if (err) {
   18700:	4604      	mov	r4, r0
   18702:	2800      	cmp	r0, #0
   18704:	d073      	beq.n	187ee <bt_le_adv_start_legacy+0x24e>
		LOG_ERR("Failed to start advertiser");
   18706:	466d      	mov	r5, sp
   18708:	b088      	sub	sp, #32
   1870a:	aa04      	add	r2, sp, #16
   1870c:	4b43      	ldr	r3, [pc, #268]	; (1881c <bt_le_adv_start_legacy+0x27c>)
   1870e:	6153      	str	r3, [r2, #20]
   18710:	4b43      	ldr	r3, [pc, #268]	; (18820 <bt_le_adv_start_legacy+0x280>)
   18712:	6193      	str	r3, [r2, #24]
   18714:	2303      	movs	r3, #3
   18716:	f842 3f10 	str.w	r3, [r2, #16]!
   1871a:	4842      	ldr	r0, [pc, #264]	; (18824 <bt_le_adv_start_legacy+0x284>)
   1871c:	2300      	movs	r3, #0
   1871e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18722:	f7fa fd27 	bl	13174 <z_impl_z_log_msg_static_create>
   18726:	46ad      	mov	sp, r5
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   18728:	68fd      	ldr	r5, [r7, #12]
   1872a:	2d00      	cmp	r5, #0
   1872c:	f43f af54 	beq.w	185d8 <bt_le_adv_start_legacy+0x38>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   18730:	4628      	mov	r0, r5
   18732:	2100      	movs	r1, #0
   18734:	f000 fe0c 	bl	19350 <bt_conn_set_state>
			bt_conn_unref(conn);
   18738:	4628      	mov	r0, r5
   1873a:	f01d fbf2 	bl	35f22 <bt_conn_unref>
   1873e:	e74b      	b.n	185d8 <bt_le_adv_start_legacy+0x38>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   18740:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   18742:	f8d7 a048 	ldr.w	sl, [r7, #72]	; 0x48
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   18746:	753b      	strb	r3, [r7, #20]
   18748:	e7b7      	b.n	186ba <bt_le_adv_start_legacy+0x11a>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   1874a:	e9cd a801 	strd	sl, r8, [sp, #4]
   1874e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   18750:	9300      	str	r3, [sp, #0]
   18752:	e9d7 2100 	ldrd	r2, r1, [r7]
   18756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   18758:	4630      	mov	r0, r6
   1875a:	f01d fab9 	bl	35cd0 <le_adv_update.constprop.0>
		if (err) {
   1875e:	4604      	mov	r4, r0
   18760:	2800      	cmp	r0, #0
   18762:	d0c6      	beq.n	186f2 <bt_le_adv_start_legacy+0x152>
   18764:	e738      	b.n	185d8 <bt_le_adv_start_legacy+0x38>
		err = le_adv_start_add_conn(adv, &conn);
   18766:	f107 010c 	add.w	r1, r7, #12
   1876a:	4630      	mov	r0, r6
   1876c:	f7ff fe98 	bl	184a0 <le_adv_start_add_conn>
		if (err) {
   18770:	4604      	mov	r4, r0
   18772:	2800      	cmp	r0, #0
   18774:	d0c0      	beq.n	186f8 <bt_le_adv_start_legacy+0x158>
			if (err == -ENOMEM && !dir_adv &&
   18776:	f110 0f0c 	cmn.w	r0, #12
   1877a:	f47f af2d 	bne.w	185d8 <bt_le_adv_start_legacy+0x38>
   1877e:	f1bb 0f00 	cmp.w	fp, #0
   18782:	f47f af29 	bne.w	185d8 <bt_le_adv_start_legacy+0x38>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   18786:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
   18788:	0798      	lsls	r0, r3, #30
   1878a:	f53f af25 	bmi.w	185d8 <bt_le_adv_start_legacy+0x38>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1878e:	686c      	ldr	r4, [r5, #4]
   18790:	f084 0402 	eor.w	r4, r4, #2
   18794:	f3c4 0440 	ubfx	r4, r4, #1, #1
   18798:	f004 0201 	and.w	r2, r4, #1
   1879c:	210e      	movs	r1, #14
   1879e:	4648      	mov	r0, r9
   187a0:	f01d fa7f 	bl	35ca2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   187a4:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   187a8:	425a      	negs	r2, r3
   187aa:	415a      	adcs	r2, r3
   187ac:	2108      	movs	r1, #8
   187ae:	4648      	mov	r0, r9
   187b0:	f01d fa77 	bl	35ca2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   187b4:	f1a8 0102 	sub.w	r1, r8, #2
   187b8:	424a      	negs	r2, r1
   187ba:	414a      	adcs	r2, r1
   187bc:	4648      	mov	r0, r9
   187be:	2109      	movs	r1, #9
   187c0:	f01d fa6f 	bl	35ca2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   187c4:	686a      	ldr	r2, [r5, #4]
   187c6:	210a      	movs	r1, #10
   187c8:	f002 0201 	and.w	r2, r2, #1
   187cc:	4648      	mov	r0, r9
   187ce:	f01d fa68 	bl	35ca2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   187d2:	4652      	mov	r2, sl
   187d4:	210b      	movs	r1, #11
   187d6:	4648      	mov	r0, r9
   187d8:	f01d fa63 	bl	35ca2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   187dc:	686a      	ldr	r2, [r5, #4]
   187de:	210d      	movs	r1, #13
   187e0:	f3c2 0280 	ubfx	r2, r2, #2, #1
   187e4:	4648      	mov	r0, r9
   187e6:	f01d fa5c 	bl	35ca2 <atomic_set_bit_to>
	return 0;
   187ea:	2400      	movs	r4, #0
   187ec:	e6f4      	b.n	185d8 <bt_le_adv_start_legacy+0x38>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   187ee:	68f8      	ldr	r0, [r7, #12]
   187f0:	b108      	cbz	r0, 187f6 <bt_le_adv_start_legacy+0x256>
		bt_conn_unref(conn);
   187f2:	f01d fb96 	bl	35f22 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   187f6:	f1bb 0f00 	cmp.w	fp, #0
   187fa:	d1cd      	bne.n	18798 <bt_le_adv_start_legacy+0x1f8>
   187fc:	e7c7      	b.n	1878e <bt_le_adv_start_legacy+0x1ee>
		return -EAGAIN;
   187fe:	f06f 040a 	mvn.w	r4, #10
   18802:	e6e9      	b.n	185d8 <bt_le_adv_start_legacy+0x38>
		return -EALREADY;
   18804:	f06f 0477 	mvn.w	r4, #119	; 0x77
   18808:	e6e6      	b.n	185d8 <bt_le_adv_start_legacy+0x38>
		return -ENOBUFS;
   1880a:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1880e:	e6e3      	b.n	185d8 <bt_le_adv_start_legacy+0x38>
   18810:	200000cc 	.word	0x200000cc
   18814:	20000000 	.word	0x20000000
   18818:	0003c0a9 	.word	0x0003c0a9
   1881c:	0003d1a5 	.word	0x0003d1a5
   18820:	0003d23e 	.word	0x0003d23e
   18824:	00039560 	.word	0x00039560

00018828 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   18828:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1882a:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   1882c:	9a06      	ldr	r2, [sp, #24]
{
   1882e:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   18830:	e9cd 3200 	strd	r3, r2, [sp]
   18834:	462b      	mov	r3, r5
   18836:	460a      	mov	r2, r1
   18838:	4601      	mov	r1, r0
   1883a:	4811      	ldr	r0, [pc, #68]	; (18880 <bt_le_adv_start+0x58>)
   1883c:	f7ff feb0 	bl	185a0 <bt_le_adv_start_legacy>
   18840:	4621      	mov	r1, r4
   18842:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   18844:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   18846:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   1884a:	429d      	cmp	r5, r3
   1884c:	d102      	bne.n	18854 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   1884e:	4630      	mov	r0, r6
   18850:	b002      	add	sp, #8
   18852:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   18854:	880a      	ldrh	r2, [r1, #0]
   18856:	4282      	cmp	r2, r0
   18858:	d104      	bne.n	18864 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   1885a:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   1885c:	b112      	cbz	r2, 18864 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   1885e:	7812      	ldrb	r2, [r2, #0]
   18860:	07d2      	lsls	r2, r2, #31
   18862:	d402      	bmi.n	1886a <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   18864:	3301      	adds	r3, #1
   18866:	3108      	adds	r1, #8
   18868:	e7ef      	b.n	1884a <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   1886a:	4906      	ldr	r1, [pc, #24]	; (18884 <bt_le_adv_start+0x5c>)
   1886c:	4806      	ldr	r0, [pc, #24]	; (18888 <bt_le_adv_start+0x60>)
   1886e:	f020 f8ee 	bl	38a4e <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   18872:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   18876:	2300      	movs	r3, #0
   18878:	4803      	ldr	r0, [pc, #12]	; (18888 <bt_le_adv_start+0x60>)
   1887a:	f019 fb65 	bl	31f48 <k_work_reschedule>
   1887e:	e7e6      	b.n	1884e <bt_le_adv_start+0x26>
   18880:	20000018 	.word	0x20000018
   18884:	00018905 	.word	0x00018905
   18888:	20000030 	.word	0x20000030

0001888c <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   1888c:	b510      	push	{r4, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   1888e:	4819      	ldr	r0, [pc, #100]	; (188f4 <bt_le_adv_stop+0x68>)
   18890:	f01d facc 	bl	35e2c <bt_le_lim_adv_cancel_timeout>
   18894:	4818      	ldr	r0, [pc, #96]	; (188f8 <bt_le_adv_stop+0x6c>)
   18896:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   1889a:	f01d f9f3 	bl	35c84 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1889e:	4816      	ldr	r0, [pc, #88]	; (188f8 <bt_le_adv_stop+0x6c>)
   188a0:	f01d f9ea 	bl	35c78 <atomic_get>
   188a4:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   188a6:	061a      	lsls	r2, r3, #24
   188a8:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   188ac:	d521      	bpl.n	188f2 <bt_le_adv_stop+0x66>
   188ae:	4812      	ldr	r0, [pc, #72]	; (188f8 <bt_le_adv_stop+0x6c>)
   188b0:	f01d f9e2 	bl	35c78 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   188b4:	0543      	lsls	r3, r0, #21
   188b6:	d512      	bpl.n	188de <bt_le_adv_stop+0x52>
	if (!adv_is_directed(adv)) {
   188b8:	480e      	ldr	r0, [pc, #56]	; (188f4 <bt_le_adv_stop+0x68>)
   188ba:	f7ff fde5 	bl	18488 <adv_is_directed>
   188be:	4b0f      	ldr	r3, [pc, #60]	; (188fc <bt_le_adv_stop+0x70>)
   188c0:	b998      	cbnz	r0, 188ea <bt_le_adv_stop+0x5e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   188c2:	490f      	ldr	r1, [pc, #60]	; (18900 <bt_le_adv_stop+0x74>)
   188c4:	2204      	movs	r2, #4
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   188c6:	7e18      	ldrb	r0, [r3, #24]
   188c8:	f000 ffc2 	bl	19850 <bt_conn_lookup_state_le>
   188cc:	4604      	mov	r4, r0
	if (conn) {
   188ce:	b130      	cbz	r0, 188de <bt_le_adv_stop+0x52>
		conn->err = status;
   188d0:	2100      	movs	r1, #0
   188d2:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   188d4:	f000 fd3c 	bl	19350 <bt_conn_set_state>
		bt_conn_unref(conn);
   188d8:	4620      	mov	r0, r4
   188da:	f01d fb22 	bl	35f22 <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   188de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   188e2:	4804      	ldr	r0, [pc, #16]	; (188f4 <bt_le_adv_stop+0x68>)
   188e4:	2100      	movs	r1, #0
   188e6:	f01d ba7a 	b.w	35dde <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   188ea:	2205      	movs	r2, #5
   188ec:	f103 0121 	add.w	r1, r3, #33	; 0x21
   188f0:	e7e9      	b.n	188c6 <bt_le_adv_stop+0x3a>
}
   188f2:	bd10      	pop	{r4, pc}
   188f4:	20000018 	.word	0x20000018
   188f8:	20000028 	.word	0x20000028
   188fc:	20000000 	.word	0x20000000
   18900:	0003c0a2 	.word	0x0003c0a2

00018904 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   18904:	b580      	push	{r7, lr}
   18906:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   18908:	f7ff ffc0 	bl	1888c <bt_le_adv_stop>
#endif
	LOG_WRN("Failed to stop advertising: %d", err);
   1890c:	b088      	sub	sp, #32
   1890e:	466a      	mov	r2, sp
   18910:	4b07      	ldr	r3, [pc, #28]	; (18930 <adv_timeout+0x2c>)
   18912:	6153      	str	r3, [r2, #20]
   18914:	4b07      	ldr	r3, [pc, #28]	; (18934 <adv_timeout+0x30>)
   18916:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1891a:	2304      	movs	r3, #4
   1891c:	f842 3f10 	str.w	r3, [r2, #16]!
   18920:	4805      	ldr	r0, [pc, #20]	; (18938 <adv_timeout+0x34>)
   18922:	2300      	movs	r3, #0
   18924:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   18928:	f7fa fc24 	bl	13174 <z_impl_z_log_msg_static_create>
}
   1892c:	46bd      	mov	sp, r7
   1892e:	bd80      	pop	{r7, pc}
   18930:	0003d1c4 	.word	0x0003d1c4
   18934:	0003d232 	.word	0x0003d232
   18938:	00039560 	.word	0x00039560

0001893c <bt_le_adv_resume>:
{
   1893c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1893e:	b083      	sub	sp, #12
   18940:	483f      	ldr	r0, [pc, #252]	; (18a40 <bt_le_adv_resume+0x104>)
   18942:	4c3f      	ldr	r4, [pc, #252]	; (18a40 <bt_le_adv_resume+0x104>)
   18944:	af00      	add	r7, sp, #0
   18946:	f01d f997 	bl	35c78 <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   1894a:	f410 4f80 	tst.w	r0, #16384	; 0x4000
   1894e:	d057      	beq.n	18a00 <bt_le_adv_resume+0xc4>
   18950:	4620      	mov	r0, r4
   18952:	f01d f991 	bl	35c78 <atomic_get>
   18956:	0603      	lsls	r3, r0, #24
   18958:	d452      	bmi.n	18a00 <bt_le_adv_resume+0xc4>
   1895a:	4620      	mov	r0, r4
   1895c:	f01d f98c 	bl	35c78 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   18960:	0546      	lsls	r6, r0, #21
   18962:	d54d      	bpl.n	18a00 <bt_le_adv_resume+0xc4>
	err = le_adv_start_add_conn(adv, &conn);
   18964:	1d39      	adds	r1, r7, #4
   18966:	f1a4 0010 	sub.w	r0, r4, #16
   1896a:	f7ff fd99 	bl	184a0 <le_adv_start_add_conn>
	if (err) {
   1896e:	2800      	cmp	r0, #0
   18970:	d146      	bne.n	18a00 <bt_le_adv_resume+0xc4>
   18972:	4620      	mov	r0, r4
   18974:	f01d f980 	bl	35c78 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   18978:	f410 5f00 	tst.w	r0, #8192	; 0x2000
		bt_id_set_adv_private_addr(adv);
   1897c:	f1a4 0010 	sub.w	r0, r4, #16
	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   18980:	d10c      	bne.n	1899c <bt_le_adv_resume+0x60>
		bt_id_set_adv_private_addr(adv);
   18982:	f01d f94f 	bl	35c24 <bt_id_set_adv_private_addr>
	return bt_le_adv_set_enable_legacy(adv, enable);
   18986:	482f      	ldr	r0, [pc, #188]	; (18a44 <bt_le_adv_resume+0x108>)
   18988:	2101      	movs	r1, #1
   1898a:	f01d fa28 	bl	35dde <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
   1898e:	687e      	ldr	r6, [r7, #4]
	if (err) {
   18990:	2800      	cmp	r0, #0
   18992:	d138      	bne.n	18a06 <bt_le_adv_resume+0xca>
	bt_conn_unref(conn);
   18994:	4630      	mov	r0, r6
   18996:	f01d fac4 	bl	35f22 <bt_conn_unref>
	if (persist_paused) {
   1899a:	e031      	b.n	18a00 <bt_le_adv_resume+0xc4>
		bool dir_adv = adv_is_directed(adv);
   1899c:	f7ff fd74 	bl	18488 <adv_is_directed>
   189a0:	4602      	mov	r2, r0
   189a2:	4620      	mov	r0, r4
   189a4:	f01d f968 	bl	35c78 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   189a8:	f3c0 3180 	ubfx	r1, r0, #14, #1
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   189ac:	4620      	mov	r0, r4
   189ae:	f01d f963 	bl	35c78 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST)) {
   189b2:	f081 0101 	eor.w	r1, r1, #1
	if (atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   189b6:	0545      	lsls	r5, r0, #21
	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST)) {
   189b8:	ea4f 0141 	mov.w	r1, r1, lsl #1
   189bc:	4820      	ldr	r0, [pc, #128]	; (18a40 <bt_le_adv_resume+0x104>)
		options |= BT_LE_ADV_OPT_CONNECTABLE;
   189be:	bf48      	it	mi
   189c0:	f041 0101 	orrmi.w	r1, r1, #1
   189c4:	f01d f958 	bl	35c78 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   189c8:	0480      	lsls	r0, r0, #18
		options |= BT_LE_ADV_OPT_USE_IDENTITY;
   189ca:	bf48      	it	mi
   189cc:	f041 0104 	orrmi.w	r1, r1, #4
		err = bt_id_set_adv_own_addr(adv, options, dir_adv, &own_addr_type);
   189d0:	481c      	ldr	r0, [pc, #112]	; (18a44 <bt_le_adv_resume+0x108>)
   189d2:	1cfb      	adds	r3, r7, #3
   189d4:	f7ff fc5e 	bl	18294 <bt_id_set_adv_own_addr>
		if (err) {
   189d8:	2800      	cmp	r0, #0
   189da:	d0d4      	beq.n	18986 <bt_le_adv_resume+0x4a>
			LOG_ERR("Controller cannot resume connectable advertising (%d)", err);
   189dc:	466c      	mov	r4, sp
   189de:	b088      	sub	sp, #32
   189e0:	466a      	mov	r2, sp
   189e2:	4b19      	ldr	r3, [pc, #100]	; (18a48 <bt_le_adv_resume+0x10c>)
   189e4:	6153      	str	r3, [r2, #20]
   189e6:	4b19      	ldr	r3, [pc, #100]	; (18a4c <bt_le_adv_resume+0x110>)
   189e8:	e9c2 3006 	strd	r3, r0, [r2, #24]
   189ec:	2304      	movs	r3, #4
   189ee:	f842 3f10 	str.w	r3, [r2, #16]!
   189f2:	4817      	ldr	r0, [pc, #92]	; (18a50 <bt_le_adv_resume+0x114>)
   189f4:	2300      	movs	r3, #0
   189f6:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   189fa:	f7fa fbbb 	bl	13174 <z_impl_z_log_msg_static_create>
   189fe:	46a5      	mov	sp, r4
}
   18a00:	370c      	adds	r7, #12
   18a02:	46bd      	mov	sp, r7
   18a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   18a06:	2100      	movs	r1, #0
   18a08:	4630      	mov	r0, r6
   18a0a:	f000 fca1 	bl	19350 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18a0e:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   18a12:	480b      	ldr	r0, [pc, #44]	; (18a40 <bt_le_adv_resume+0x104>)
   18a14:	f01d f936 	bl	35c84 <atomic_and>
   18a18:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   18a1a:	4630      	mov	r0, r6
   18a1c:	f01d fa81 	bl	35f22 <bt_conn_unref>
	if (persist_paused) {
   18a20:	046b      	lsls	r3, r5, #17
   18a22:	d5ed      	bpl.n	18a00 <bt_le_adv_resume+0xc4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18a24:	f3bf 8f5b 	dmb	ish
   18a28:	e854 3f00 	ldrex	r3, [r4]
   18a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   18a30:	e844 3200 	strex	r2, r3, [r4]
   18a34:	2a00      	cmp	r2, #0
   18a36:	d1f7      	bne.n	18a28 <bt_le_adv_resume+0xec>
   18a38:	f3bf 8f5b 	dmb	ish
   18a3c:	e7e0      	b.n	18a00 <bt_le_adv_resume+0xc4>
   18a3e:	bf00      	nop
   18a40:	20000028 	.word	0x20000028
   18a44:	20000018 	.word	0x20000018
   18a48:	0003d1e7 	.word	0x0003d1e7
   18a4c:	0003d221 	.word	0x0003d221
   18a50:	00039560 	.word	0x00039560

00018a54 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   18a54:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   18a56:	4904      	ldr	r1, [pc, #16]	; (18a68 <bt_pub_key_is_debug+0x14>)
   18a58:	2240      	movs	r2, #64	; 0x40
   18a5a:	f01c fd5c 	bl	35516 <memcmp>
}
   18a5e:	fab0 f080 	clz	r0, r0
   18a62:	0940      	lsrs	r0, r0, #5
   18a64:	bd08      	pop	{r3, pc}
   18a66:	bf00      	nop
   18a68:	0003d326 	.word	0x0003d326

00018a6c <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   18a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   18a70:	4b4c      	ldr	r3, [pc, #304]	; (18ba4 <bt_pub_key_gen+0x138>)
   18a72:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   18a76:	f003 0306 	and.w	r3, r3, #6
   18a7a:	2b06      	cmp	r3, #6
{
   18a7c:	af00      	add	r7, sp, #0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   18a7e:	d016      	beq.n	18aae <bt_pub_key_gen+0x42>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		LOG_WRN("ECC HCI commands not available");
   18a80:	466c      	mov	r4, sp
   18a82:	b088      	sub	sp, #32
   18a84:	466a      	mov	r2, sp
   18a86:	4b48      	ldr	r3, [pc, #288]	; (18ba8 <bt_pub_key_gen+0x13c>)
   18a88:	6153      	str	r3, [r2, #20]
   18a8a:	4b48      	ldr	r3, [pc, #288]	; (18bac <bt_pub_key_gen+0x140>)
   18a8c:	6193      	str	r3, [r2, #24]
   18a8e:	2303      	movs	r3, #3
   18a90:	f842 3f10 	str.w	r3, [r2, #16]!
   18a94:	4846      	ldr	r0, [pc, #280]	; (18bb0 <bt_pub_key_gen+0x144>)
   18a96:	2300      	movs	r3, #0
   18a98:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18a9c:	f7fa fb6a 	bl	13174 <z_impl_z_log_msg_static_create>
		return -ENOTSUP;
   18aa0:	f06f 0585 	mvn.w	r5, #133	; 0x85
   18aa4:	46a5      	mov	sp, r4
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   18aa6:	4628      	mov	r0, r5
   18aa8:	46bd      	mov	sp, r7
   18aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!new_cb) {
   18aae:	2800      	cmp	r0, #0
   18ab0:	d075      	beq.n	18b9e <bt_pub_key_gen+0x132>
	return list->head;
   18ab2:	4e40      	ldr	r6, [pc, #256]	; (18bb4 <bt_pub_key_gen+0x148>)
   18ab4:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   18ab6:	b1d2      	cbz	r2, 18aee <bt_pub_key_gen+0x82>
   18ab8:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   18aba:	4283      	cmp	r3, r0
   18abc:	d113      	bne.n	18ae6 <bt_pub_key_gen+0x7a>
			LOG_WRN("Callback already registered");
   18abe:	466c      	mov	r4, sp
   18ac0:	b088      	sub	sp, #32
   18ac2:	466a      	mov	r2, sp
   18ac4:	4b3c      	ldr	r3, [pc, #240]	; (18bb8 <bt_pub_key_gen+0x14c>)
   18ac6:	6153      	str	r3, [r2, #20]
   18ac8:	4b38      	ldr	r3, [pc, #224]	; (18bac <bt_pub_key_gen+0x140>)
   18aca:	6193      	str	r3, [r2, #24]
   18acc:	2303      	movs	r3, #3
   18ace:	f842 3f10 	str.w	r3, [r2, #16]!
   18ad2:	4837      	ldr	r0, [pc, #220]	; (18bb0 <bt_pub_key_gen+0x144>)
   18ad4:	2300      	movs	r3, #0
   18ad6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18ada:	f7fa fb4b 	bl	13174 <z_impl_z_log_msg_static_create>
			return -EALREADY;
   18ade:	f06f 0577 	mvn.w	r5, #119	; 0x77
   18ae2:	46a5      	mov	sp, r4
   18ae4:	e7df      	b.n	18aa6 <bt_pub_key_gen+0x3a>
	return node->next;
   18ae6:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   18ae8:	b10b      	cbz	r3, 18aee <bt_pub_key_gen+0x82>
   18aea:	3b04      	subs	r3, #4
   18aec:	e7e5      	b.n	18aba <bt_pub_key_gen+0x4e>
	parent->next = child;
   18aee:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   18af0:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   18af2:	1d03      	adds	r3, r0, #4
	list->head = node;
   18af4:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   18af6:	b902      	cbnz	r2, 18afa <bt_pub_key_gen+0x8e>
	list->tail = node;
   18af8:	6073      	str	r3, [r6, #4]
   18afa:	4c30      	ldr	r4, [pc, #192]	; (18bbc <bt_pub_key_gen+0x150>)
   18afc:	f3bf 8f5b 	dmb	ish
   18b00:	e854 8f00 	ldrex	r8, [r4]
   18b04:	f048 0320 	orr.w	r3, r8, #32
   18b08:	e844 3200 	strex	r2, r3, [r4]
   18b0c:	2a00      	cmp	r2, #0
   18b0e:	d1f7      	bne.n	18b00 <bt_pub_key_gen+0x94>
   18b10:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   18b14:	f018 0820 	ands.w	r8, r8, #32
   18b18:	d001      	beq.n	18b1e <bt_pub_key_gen+0xb2>
	return 0;
   18b1a:	2500      	movs	r5, #0
   18b1c:	e7c3      	b.n	18aa6 <bt_pub_key_gen+0x3a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18b1e:	f3bf 8f5b 	dmb	ish
   18b22:	e854 3f00 	ldrex	r3, [r4]
   18b26:	f023 0310 	bic.w	r3, r3, #16
   18b2a:	e844 3200 	strex	r2, r3, [r4]
   18b2e:	2a00      	cmp	r2, #0
   18b30:	d1f7      	bne.n	18b22 <bt_pub_key_gen+0xb6>
   18b32:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   18b36:	4642      	mov	r2, r8
   18b38:	4641      	mov	r1, r8
   18b3a:	f242 0025 	movw	r0, #8229	; 0x2025
   18b3e:	f7fd ffb9 	bl	16ab4 <bt_hci_cmd_send_sync>
	if (err) {
   18b42:	4605      	mov	r5, r0
   18b44:	2800      	cmp	r0, #0
   18b46:	d0e8      	beq.n	18b1a <bt_pub_key_gen+0xae>
		LOG_ERR("Sending LE P256 Public Key command failed");
   18b48:	46e9      	mov	r9, sp
   18b4a:	b088      	sub	sp, #32
   18b4c:	466a      	mov	r2, sp
   18b4e:	4b1c      	ldr	r3, [pc, #112]	; (18bc0 <bt_pub_key_gen+0x154>)
   18b50:	6153      	str	r3, [r2, #20]
   18b52:	4b16      	ldr	r3, [pc, #88]	; (18bac <bt_pub_key_gen+0x140>)
   18b54:	6193      	str	r3, [r2, #24]
   18b56:	2303      	movs	r3, #3
   18b58:	f842 3f10 	str.w	r3, [r2, #16]!
   18b5c:	4814      	ldr	r0, [pc, #80]	; (18bb0 <bt_pub_key_gen+0x144>)
   18b5e:	4643      	mov	r3, r8
   18b60:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18b64:	f7fa fb06 	bl	13174 <z_impl_z_log_msg_static_create>
   18b68:	f3bf 8f5b 	dmb	ish
   18b6c:	46cd      	mov	sp, r9
   18b6e:	e854 3f00 	ldrex	r3, [r4]
   18b72:	f023 0320 	bic.w	r3, r3, #32
   18b76:	e844 3200 	strex	r2, r3, [r4]
   18b7a:	2a00      	cmp	r2, #0
   18b7c:	d1f7      	bne.n	18b6e <bt_pub_key_gen+0x102>
   18b7e:	f3bf 8f5b 	dmb	ish
	return list->head;
   18b82:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   18b84:	b13c      	cbz	r4, 18b96 <bt_pub_key_gen+0x12a>
			if (cb->func) {
   18b86:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   18b8a:	3c04      	subs	r4, #4
			if (cb->func) {
   18b8c:	b10b      	cbz	r3, 18b92 <bt_pub_key_gen+0x126>
				cb->func(NULL);
   18b8e:	2000      	movs	r0, #0
   18b90:	4798      	blx	r3
	return node->next;
   18b92:	6864      	ldr	r4, [r4, #4]
   18b94:	e7f6      	b.n	18b84 <bt_pub_key_gen+0x118>
	list->head = NULL;
   18b96:	2300      	movs	r3, #0
	list->tail = NULL;
   18b98:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   18b9c:	e783      	b.n	18aa6 <bt_pub_key_gen+0x3a>
		return -EINVAL;
   18b9e:	f06f 0515 	mvn.w	r5, #21
   18ba2:	e780      	b.n	18aa6 <bt_pub_key_gen+0x3a>
   18ba4:	20000000 	.word	0x20000000
   18ba8:	0003d272 	.word	0x0003d272
   18bac:	0003d317 	.word	0x0003d317
   18bb0:	000395b0 	.word	0x000395b0
   18bb4:	20001b34 	.word	0x20001b34
   18bb8:	0003d295 	.word	0x0003d295
   18bbc:	200000cc 	.word	0x200000cc
   18bc0:	0003d2b5 	.word	0x0003d2b5

00018bc4 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18bc4:	4b05      	ldr	r3, [pc, #20]	; (18bdc <bt_pub_key_get+0x18>)
   18bc6:	f3bf 8f5b 	dmb	ish
   18bca:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   18bcc:	4804      	ldr	r0, [pc, #16]	; (18be0 <bt_pub_key_get+0x1c>)
   18bce:	f3bf 8f5b 	dmb	ish
	return NULL;
   18bd2:	f013 0f10 	tst.w	r3, #16
}
   18bd6:	bf08      	it	eq
   18bd8:	2000      	moveq	r0, #0
   18bda:	4770      	bx	lr
   18bdc:	200000cc 	.word	0x200000cc
   18be0:	200033a5 	.word	0x200033a5

00018be4 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   18be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err;

	if (dh_key_cb == cb) {
   18be8:	4d29      	ldr	r5, [pc, #164]	; (18c90 <bt_dh_key_gen+0xac>)
   18bea:	682b      	ldr	r3, [r5, #0]
   18bec:	428b      	cmp	r3, r1
{
   18bee:	af00      	add	r7, sp, #0
   18bf0:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   18bf2:	d047      	beq.n	18c84 <bt_dh_key_gen+0xa0>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   18bf4:	b12b      	cbz	r3, 18c02 <bt_dh_key_gen+0x1e>
		return -EBUSY;
   18bf6:	f06f 040f 	mvn.w	r4, #15
		LOG_WRN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   18bfa:	4620      	mov	r0, r4
   18bfc:	46bd      	mov	sp, r7
   18bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18c02:	4b24      	ldr	r3, [pc, #144]	; (18c94 <bt_dh_key_gen+0xb0>)
   18c04:	f3bf 8f5b 	dmb	ish
   18c08:	681a      	ldr	r2, [r3, #0]
   18c0a:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   18c0e:	f3c2 1840 	ubfx	r8, r2, #5, #1
   18c12:	0692      	lsls	r2, r2, #26
   18c14:	d4ef      	bmi.n	18bf6 <bt_dh_key_gen+0x12>
   18c16:	f3bf 8f5b 	dmb	ish
   18c1a:	681b      	ldr	r3, [r3, #0]
   18c1c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   18c20:	06db      	lsls	r3, r3, #27
   18c22:	d532      	bpl.n	18c8a <bt_dh_key_gen+0xa6>
	dh_key_cb = cb;
   18c24:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   18c26:	f242 0026 	movw	r0, #8230	; 0x2026
   18c2a:	2140      	movs	r1, #64	; 0x40
   18c2c:	f7fd fde6 	bl	167fc <bt_hci_cmd_create>
	if (!buf) {
   18c30:	4604      	mov	r4, r0
   18c32:	b320      	cbz	r0, 18c7e <bt_dh_key_gen+0x9a>
	return net_buf_simple_add(&buf->b, len);
   18c34:	2140      	movs	r1, #64	; 0x40
   18c36:	300c      	adds	r0, #12
   18c38:	f01e ff1a 	bl	37a70 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   18c3c:	2240      	movs	r2, #64	; 0x40
   18c3e:	4631      	mov	r1, r6
   18c40:	f01c fc79 	bl	35536 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   18c44:	4621      	mov	r1, r4
   18c46:	4642      	mov	r2, r8
   18c48:	f242 0026 	movw	r0, #8230	; 0x2026
   18c4c:	f7fd ff32 	bl	16ab4 <bt_hci_cmd_send_sync>
	if (err) {
   18c50:	4604      	mov	r4, r0
   18c52:	2800      	cmp	r0, #0
   18c54:	d0d1      	beq.n	18bfa <bt_dh_key_gen+0x16>
		dh_key_cb = NULL;
   18c56:	2300      	movs	r3, #0
   18c58:	602b      	str	r3, [r5, #0]
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   18c5a:	466d      	mov	r5, sp
   18c5c:	b088      	sub	sp, #32
   18c5e:	466a      	mov	r2, sp
   18c60:	490d      	ldr	r1, [pc, #52]	; (18c98 <bt_dh_key_gen+0xb4>)
   18c62:	6151      	str	r1, [r2, #20]
   18c64:	490d      	ldr	r1, [pc, #52]	; (18c9c <bt_dh_key_gen+0xb8>)
   18c66:	e9c2 1406 	strd	r1, r4, [r2, #24]
   18c6a:	2104      	movs	r1, #4
   18c6c:	f842 1f10 	str.w	r1, [r2, #16]!
   18c70:	480b      	ldr	r0, [pc, #44]	; (18ca0 <bt_dh_key_gen+0xbc>)
   18c72:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   18c76:	f7fa fa7d 	bl	13174 <z_impl_z_log_msg_static_create>
   18c7a:	46ad      	mov	sp, r5
		return err;
   18c7c:	e7bd      	b.n	18bfa <bt_dh_key_gen+0x16>
		return -ENOBUFS;
   18c7e:	f06f 0468 	mvn.w	r4, #104	; 0x68
   18c82:	e7e8      	b.n	18c56 <bt_dh_key_gen+0x72>
		return -EALREADY;
   18c84:	f06f 0477 	mvn.w	r4, #119	; 0x77
   18c88:	e7b7      	b.n	18bfa <bt_dh_key_gen+0x16>
		return -EADDRNOTAVAIL;
   18c8a:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   18c8e:	e7b4      	b.n	18bfa <bt_dh_key_gen+0x16>
   18c90:	20001b30 	.word	0x20001b30
   18c94:	200000cc 	.word	0x200000cc
   18c98:	0003d2e3 	.word	0x0003d2e3
   18c9c:	0003d309 	.word	0x0003d309
   18ca0:	000395b0 	.word	0x000395b0

00018ca4 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   18ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18ca6:	4c1b      	ldr	r4, [pc, #108]	; (18d14 <bt_hci_evt_le_pkey_complete+0x70>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   18ca8:	68c6      	ldr	r6, [r0, #12]
   18caa:	f3bf 8f5b 	dmb	ish
   18cae:	e854 3f00 	ldrex	r3, [r4]
   18cb2:	f023 0320 	bic.w	r3, r3, #32
   18cb6:	e844 3200 	strex	r2, r3, [r4]
   18cba:	2a00      	cmp	r2, #0
   18cbc:	d1f7      	bne.n	18cae <bt_hci_evt_le_pkey_complete+0xa>
   18cbe:	f3bf 8f5b 	dmb	ish

	LOG_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   18cc2:	7833      	ldrb	r3, [r6, #0]
   18cc4:	b983      	cbnz	r3, 18ce8 <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   18cc6:	4814      	ldr	r0, [pc, #80]	; (18d18 <bt_hci_evt_le_pkey_complete+0x74>)
   18cc8:	2240      	movs	r2, #64	; 0x40
   18cca:	1c71      	adds	r1, r6, #1
   18ccc:	f01c fc33 	bl	35536 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18cd0:	f3bf 8f5b 	dmb	ish
   18cd4:	e854 3f00 	ldrex	r3, [r4]
   18cd8:	f043 0310 	orr.w	r3, r3, #16
   18cdc:	e844 3200 	strex	r2, r3, [r4]
   18ce0:	2a00      	cmp	r2, #0
   18ce2:	d1f7      	bne.n	18cd4 <bt_hci_evt_le_pkey_complete+0x30>
   18ce4:	f3bf 8f5b 	dmb	ish
	return list->head;
   18ce8:	4d0c      	ldr	r5, [pc, #48]	; (18d1c <bt_hci_evt_le_pkey_complete+0x78>)
   18cea:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   18cec:	b16c      	cbz	r4, 18d0a <bt_hci_evt_le_pkey_complete+0x66>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   18cee:	4f0a      	ldr	r7, [pc, #40]	; (18d18 <bt_hci_evt_le_pkey_complete+0x74>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   18cf0:	3c04      	subs	r4, #4
		if (cb->func) {
   18cf2:	6823      	ldr	r3, [r4, #0]
   18cf4:	b12b      	cbz	r3, 18d02 <bt_hci_evt_le_pkey_complete+0x5e>
			cb->func(evt->status ? NULL : pub_key);
   18cf6:	7832      	ldrb	r2, [r6, #0]
   18cf8:	2a00      	cmp	r2, #0
   18cfa:	bf0c      	ite	eq
   18cfc:	4638      	moveq	r0, r7
   18cfe:	2000      	movne	r0, #0
   18d00:	4798      	blx	r3
	return node->next;
   18d02:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   18d04:	b10c      	cbz	r4, 18d0a <bt_hci_evt_le_pkey_complete+0x66>
   18d06:	3c04      	subs	r4, #4
   18d08:	e7f3      	b.n	18cf2 <bt_hci_evt_le_pkey_complete+0x4e>
	list->head = NULL;
   18d0a:	2300      	movs	r3, #0
	list->tail = NULL;
   18d0c:	e9c5 3300 	strd	r3, r3, [r5]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   18d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18d12:	bf00      	nop
   18d14:	200000cc 	.word	0x200000cc
   18d18:	200033a5 	.word	0x200033a5
   18d1c:	20001b34 	.word	0x20001b34

00018d20 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	LOG_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   18d20:	4905      	ldr	r1, [pc, #20]	; (18d38 <bt_hci_evt_le_dhkey_complete+0x18>)
   18d22:	680b      	ldr	r3, [r1, #0]
   18d24:	b133      	cbz	r3, 18d34 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   18d26:	68c2      	ldr	r2, [r0, #12]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   18d28:	2000      	movs	r0, #0
   18d2a:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   18d2c:	7811      	ldrb	r1, [r2, #0]
   18d2e:	b901      	cbnz	r1, 18d32 <bt_hci_evt_le_dhkey_complete+0x12>
   18d30:	1c50      	adds	r0, r2, #1
   18d32:	4718      	bx	r3
	}
}
   18d34:	4770      	bx	lr
   18d36:	bf00      	nop
   18d38:	20001b30 	.word	0x20001b30

00018d3c <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   18d3c:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   18d3e:	4b0b      	ldr	r3, [pc, #44]	; (18d6c <notify_connected+0x30>)
   18d40:	681d      	ldr	r5, [r3, #0]
{
   18d42:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   18d44:	b925      	cbnz	r5, 18d50 <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18d46:	4d0a      	ldr	r5, [pc, #40]	; (18d70 <notify_connected+0x34>)
   18d48:	4e0a      	ldr	r6, [pc, #40]	; (18d74 <notify_connected+0x38>)
   18d4a:	42b5      	cmp	r5, r6
   18d4c:	d307      	bcc.n	18d5e <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
   18d4e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
   18d50:	682b      	ldr	r3, [r5, #0]
   18d52:	b113      	cbz	r3, 18d5a <notify_connected+0x1e>
			cb->connected(conn, conn->err);
   18d54:	7b21      	ldrb	r1, [r4, #12]
   18d56:	4620      	mov	r0, r4
   18d58:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   18d5a:	69ad      	ldr	r5, [r5, #24]
   18d5c:	e7f2      	b.n	18d44 <notify_connected+0x8>
		if (cb->connected) {
   18d5e:	682b      	ldr	r3, [r5, #0]
   18d60:	b113      	cbz	r3, 18d68 <notify_connected+0x2c>
			cb->connected(conn, conn->err);
   18d62:	7b21      	ldrb	r1, [r4, #12]
   18d64:	4620      	mov	r0, r4
   18d66:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18d68:	351c      	adds	r5, #28
   18d6a:	e7ee      	b.n	18d4a <notify_connected+0xe>
   18d6c:	20001b6c 	.word	0x20001b6c
   18d70:	000394fc 	.word	0x000394fc
   18d74:	00039518 	.word	0x00039518

00018d78 <bt_conn_create_pdu_timeout.part.0>:
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
   18d78:	b580      	push	{r7, lr}
   18d7a:	af00      	add	r7, sp, #0
		LOG_WRN("Unable to allocate buffer within timeout");
   18d7c:	b088      	sub	sp, #32
   18d7e:	466a      	mov	r2, sp
   18d80:	4b07      	ldr	r3, [pc, #28]	; (18da0 <bt_conn_create_pdu_timeout.part.0+0x28>)
   18d82:	6153      	str	r3, [r2, #20]
   18d84:	4b07      	ldr	r3, [pc, #28]	; (18da4 <bt_conn_create_pdu_timeout.part.0+0x2c>)
   18d86:	6193      	str	r3, [r2, #24]
   18d88:	2303      	movs	r3, #3
   18d8a:	f842 3f10 	str.w	r3, [r2, #16]!
   18d8e:	4806      	ldr	r0, [pc, #24]	; (18da8 <bt_conn_create_pdu_timeout.part.0+0x30>)
   18d90:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18d94:	f01d f877 	bl	35e86 <z_log_msg_static_create.constprop.0>
}
   18d98:	2000      	movs	r0, #0
   18d9a:	46bd      	mov	sp, r7
   18d9c:	bd80      	pop	{r7, pc}
   18d9e:	bf00      	nop
   18da0:	0003d36d 	.word	0x0003d36d
   18da4:	0003d63b 	.word	0x0003d63b
   18da8:	00039570 	.word	0x00039570

00018dac <tx_notify>:
{
   18dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
   18db0:	4f15      	ldr	r7, [pc, #84]	; (18e08 <tx_notify+0x5c>)
{
   18db2:	4604      	mov	r4, r0
	tx->cb = NULL;
   18db4:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
   18db8:	f04f 0220 	mov.w	r2, #32
   18dbc:	f3ef 8311 	mrs	r3, BASEPRI
   18dc0:	f382 8812 	msr	BASEPRI_MAX, r2
   18dc4:	f3bf 8f6f 	isb	sy
	return list->head;
   18dc8:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   18dca:	b929      	cbnz	r1, 18dd8 <tx_notify+0x2c>
	__asm__ volatile(
   18dcc:	f383 8811 	msr	BASEPRI, r3
   18dd0:	f3bf 8f6f 	isb	sy
}
   18dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18dd8:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   18dda:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   18ddc:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18dde:	4281      	cmp	r1, r0
	list->tail = node;
   18de0:	bf08      	it	eq
   18de2:	6262      	streq	r2, [r4, #36]	; 0x24
   18de4:	f383 8811 	msr	BASEPRI, r3
   18de8:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   18dec:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   18df0:	f8c1 800c 	str.w	r8, [r1, #12]
	tx->user_data = NULL;
   18df4:	e9c1 8801 	strd	r8, r8, [r1, #4]
	k_fifo_put(&free_tx, tx);
   18df8:	4638      	mov	r0, r7
   18dfa:	f01f fd49 	bl	38890 <k_queue_append>
		cb(conn, user_data, 0);
   18dfe:	2200      	movs	r2, #0
   18e00:	4631      	mov	r1, r6
   18e02:	4620      	mov	r0, r4
   18e04:	47a8      	blx	r5
	while (1) {
   18e06:	e7d7      	b.n	18db8 <tx_notify+0xc>
   18e08:	20000b10 	.word	0x20000b10

00018e0c <conn_tx_destroy>:
{
   18e0c:	b570      	push	{r4, r5, r6, lr}
	void *user_data = tx->user_data;
   18e0e:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->cb = NULL;
   18e12:	2200      	movs	r2, #0
	tx->user_data = NULL;
   18e14:	e9c1 2201 	strd	r2, r2, [r1, #4]
{
   18e18:	4604      	mov	r4, r0
	tx->pending_no_cb = 0U;
   18e1a:	60ca      	str	r2, [r1, #12]
	k_fifo_put(&free_tx, tx);
   18e1c:	4805      	ldr	r0, [pc, #20]	; (18e34 <conn_tx_destroy+0x28>)
   18e1e:	f01f fd37 	bl	38890 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   18e22:	4631      	mov	r1, r6
   18e24:	4620      	mov	r0, r4
   18e26:	462b      	mov	r3, r5
   18e28:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
   18e2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   18e30:	4718      	bx	r3
   18e32:	bf00      	nop
   18e34:	20000b10 	.word	0x20000b10

00018e38 <send_frag>:
{
   18e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e3c:	b083      	sub	sp, #12
   18e3e:	4604      	mov	r4, r0
   18e40:	af00      	add	r7, sp, #0
   18e42:	460e      	mov	r6, r1
   18e44:	4615      	mov	r5, r2
   18e46:	469a      	mov	sl, r3
	return z_impl_k_sem_take(sem, timeout);
   18e48:	4863      	ldr	r0, [pc, #396]	; (18fd8 <send_frag+0x1a0>)
   18e4a:	2200      	movs	r2, #0
   18e4c:	2300      	movs	r3, #0
   18e4e:	f018 fe67 	bl	31b20 <z_impl_k_sem_take>
	if (k_sem_take(bt_conn_get_pkts(conn), K_NO_WAIT)) {
   18e52:	2800      	cmp	r0, #0
   18e54:	f040 80bd 	bne.w	18fd2 <send_frag+0x19a>
	if (frag) {
   18e58:	2d00      	cmp	r5, #0
   18e5a:	f000 8084 	beq.w	18f66 <send_frag+0x12e>
	return bt_dev.le.acl_mtu;
   18e5e:	f8df b17c 	ldr.w	fp, [pc, #380]	; 18fdc <send_frag+0x1a4>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   18e62:	f105 080c 	add.w	r8, r5, #12
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   18e66:	f8bb 30fc 	ldrh.w	r3, [fp, #252]	; 0xfc
   18e6a:	607b      	str	r3, [r7, #4]
   18e6c:	4640      	mov	r0, r8
   18e6e:	f01e fe3a 	bl	37ae6 <net_buf_simple_tailroom>
   18e72:	687b      	ldr	r3, [r7, #4]
   18e74:	4298      	cmp	r0, r3
   18e76:	d970      	bls.n	18f5a <send_frag+0x122>
	return bt_dev.le.acl_mtu;
   18e78:	f8bb b0fc 	ldrh.w	fp, [fp, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   18e7c:	f856 1f0c 	ldr.w	r1, [r6, #12]!
   18e80:	465a      	mov	r2, fp
   18e82:	4640      	mov	r0, r8
   18e84:	f01e fdfa 	bl	37a7c <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   18e88:	4659      	mov	r1, fp
   18e8a:	4630      	mov	r0, r6
   18e8c:	f01e fe0f 	bl	37aae <net_buf_simple_pull>
	if (conn->state != BT_CONN_CONNECTED) {
   18e90:	7b63      	ldrb	r3, [r4, #13]
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   18e92:	f8d5 8018 	ldr.w	r8, [r5, #24]
	if (conn->state != BT_CONN_CONNECTED) {
   18e96:	2b07      	cmp	r3, #7
   18e98:	f040 8092 	bne.w	18fc0 <send_frag+0x188>
	__asm__ volatile(
   18e9c:	f04f 0320 	mov.w	r3, #32
   18ea0:	f3ef 8211 	mrs	r2, BASEPRI
   18ea4:	f383 8812 	msr	BASEPRI_MAX, r3
   18ea8:	f3bf 8f6f 	isb	sy
	if (tx) {
   18eac:	f1b8 0f00 	cmp.w	r8, #0
   18eb0:	d066      	beq.n	18f80 <send_frag+0x148>
	parent->next = child;
   18eb2:	2300      	movs	r3, #0
   18eb4:	f8c8 3000 	str.w	r3, [r8]
	return list->tail;
   18eb8:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   18eba:	2b00      	cmp	r3, #0
   18ebc:	d15b      	bne.n	18f76 <send_frag+0x13e>
	list->head = node;
   18ebe:	e9c4 8805 	strd	r8, r8, [r4, #20]
	__asm__ volatile(
   18ec2:	f382 8811 	msr	BASEPRI, r2
   18ec6:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   18eca:	2104      	movs	r1, #4
   18ecc:	f105 000c 	add.w	r0, r5, #12
   18ed0:	f01e fde5 	bl	37a9e <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   18ed4:	8823      	ldrh	r3, [r4, #0]
   18ed6:	f00a 0afd 	and.w	sl, sl, #253	; 0xfd
   18eda:	ea43 3a0a 	orr.w	sl, r3, sl, lsl #12
   18ede:	f8a0 a000 	strh.w	sl, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   18ee2:	8a2b      	ldrh	r3, [r5, #16]
   18ee4:	3b04      	subs	r3, #4
   18ee6:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   18ee8:	2302      	movs	r3, #2
   18eea:	762b      	strb	r3, [r5, #24]
	return bt_send(buf);
   18eec:	4628      	mov	r0, r5
   18eee:	f01c fd72 	bl	359d6 <bt_send>
	if (err) {
   18ef2:	4606      	mov	r6, r0
   18ef4:	2800      	cmp	r0, #0
   18ef6:	d05e      	beq.n	18fb6 <send_frag+0x17e>
		LOG_ERR("Unable to send to driver (err %d)", err);
   18ef8:	46ea      	mov	sl, sp
   18efa:	b088      	sub	sp, #32
   18efc:	466a      	mov	r2, sp
   18efe:	4b38      	ldr	r3, [pc, #224]	; (18fe0 <send_frag+0x1a8>)
   18f00:	6153      	str	r3, [r2, #20]
   18f02:	4b38      	ldr	r3, [pc, #224]	; (18fe4 <send_frag+0x1ac>)
   18f04:	e9c2 3006 	strd	r3, r0, [r2, #24]
   18f08:	2304      	movs	r3, #4
   18f0a:	f842 3f10 	str.w	r3, [r2, #16]!
   18f0e:	4836      	ldr	r0, [pc, #216]	; (18fe8 <send_frag+0x1b0>)
   18f10:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   18f14:	f01c ffb7 	bl	35e86 <z_log_msg_static_create.constprop.0>
   18f18:	46d5      	mov	sp, sl
	__asm__ volatile(
   18f1a:	f04f 0320 	mov.w	r3, #32
   18f1e:	f3ef 8611 	mrs	r6, BASEPRI
   18f22:	f383 8812 	msr	BASEPRI_MAX, r3
   18f26:	f3bf 8f6f 	isb	sy
		if (tx) {
   18f2a:	f1b8 0f00 	cmp.w	r8, #0
   18f2e:	d034      	beq.n	18f9a <send_frag+0x162>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   18f30:	4641      	mov	r1, r8
   18f32:	f104 0014 	add.w	r0, r4, #20
   18f36:	f01c ff7c 	bl	35e32 <sys_slist_find_and_remove>
	__asm__ volatile(
   18f3a:	f386 8811 	msr	BASEPRI, r6
   18f3e:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   18f42:	4825      	ldr	r0, [pc, #148]	; (18fd8 <send_frag+0x1a0>)
   18f44:	f018 fdc6 	bl	31ad4 <z_impl_k_sem_give>
		err = -EIO;
   18f48:	f06f 0604 	mvn.w	r6, #4
		tx_data(buf)->tx = NULL;
   18f4c:	2300      	movs	r3, #0
   18f4e:	61ab      	str	r3, [r5, #24]
		conn_tx_destroy(conn, tx);
   18f50:	4641      	mov	r1, r8
   18f52:	4620      	mov	r0, r4
   18f54:	f7ff ff5a 	bl	18e0c <conn_tx_destroy>
   18f58:	e02d      	b.n	18fb6 <send_frag+0x17e>
	return net_buf_simple_tailroom(&buf->b);
   18f5a:	4640      	mov	r0, r8
   18f5c:	f01e fdc3 	bl	37ae6 <net_buf_simple_tailroom>
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   18f60:	fa1f fb80 	uxth.w	fp, r0
   18f64:	e78a      	b.n	18e7c <send_frag+0x44>
		buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   18f66:	2200      	movs	r2, #0
   18f68:	2300      	movs	r3, #0
   18f6a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   18f6e:	f01e fd18 	bl	379a2 <net_buf_get>
   18f72:	4605      	mov	r5, r0
		frag = buf;
   18f74:	e78c      	b.n	18e90 <send_frag+0x58>
	parent->next = child;
   18f76:	f8c3 8000 	str.w	r8, [r3]
	list->tail = node;
   18f7a:	f8c4 8018 	str.w	r8, [r4, #24]
}
   18f7e:	e7a0      	b.n	18ec2 <send_frag+0x8a>
	return list->tail;
   18f80:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   18f82:	b133      	cbz	r3, 18f92 <send_frag+0x15a>
			pending_no_cb = &tail_tx->pending_no_cb;
   18f84:	f103 090c 	add.w	r9, r3, #12
   18f88:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   18f8a:	3301      	adds	r3, #1
   18f8c:	f8c9 3000 	str.w	r3, [r9]
   18f90:	e797      	b.n	18ec2 <send_frag+0x8a>
			pending_no_cb = &conn->pending_no_cb;
   18f92:	69e3      	ldr	r3, [r4, #28]
   18f94:	f104 091c 	add.w	r9, r4, #28
   18f98:	e7f7      	b.n	18f8a <send_frag+0x152>
			(*pending_no_cb)--;
   18f9a:	f8d9 3000 	ldr.w	r3, [r9]
   18f9e:	3b01      	subs	r3, #1
   18fa0:	f8c9 3000 	str.w	r3, [r9]
   18fa4:	f386 8811 	msr	BASEPRI, r6
   18fa8:	f3bf 8f6f 	isb	sy
   18fac:	480a      	ldr	r0, [pc, #40]	; (18fd8 <send_frag+0x1a0>)
   18fae:	f018 fd91 	bl	31ad4 <z_impl_k_sem_give>
		err = -EIO;
   18fb2:	f06f 0604 	mvn.w	r6, #4
}
   18fb6:	4630      	mov	r0, r6
   18fb8:	370c      	adds	r7, #12
   18fba:	46bd      	mov	sp, r7
   18fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18fc0:	4805      	ldr	r0, [pc, #20]	; (18fd8 <send_frag+0x1a0>)
   18fc2:	f018 fd87 	bl	31ad4 <z_impl_k_sem_give>
		err = -ENOTCONN;
   18fc6:	f06f 067f 	mvn.w	r6, #127	; 0x7f
	if (tx) {
   18fca:	f1b8 0f00 	cmp.w	r8, #0
   18fce:	d1bd      	bne.n	18f4c <send_frag+0x114>
   18fd0:	e7f1      	b.n	18fb6 <send_frag+0x17e>
		return -ENOBUFS;
   18fd2:	f06f 0668 	mvn.w	r6, #104	; 0x68
   18fd6:	e7ee      	b.n	18fb6 <send_frag+0x17e>
   18fd8:	20000100 	.word	0x20000100
   18fdc:	20000000 	.word	0x20000000
   18fe0:	0003c5aa 	.word	0x0003c5aa
   18fe4:	0003d668 	.word	0x0003d668
   18fe8:	00039570 	.word	0x00039570

00018fec <bt_conn_get_pkts>:
}
   18fec:	4800      	ldr	r0, [pc, #0]	; (18ff0 <bt_conn_get_pkts+0x4>)
   18fee:	4770      	bx	lr
   18ff0:	20000100 	.word	0x20000100

00018ff4 <bt_conn_new>:
{
   18ff4:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   18ff6:	2200      	movs	r2, #0
   18ff8:	4604      	mov	r4, r0
   18ffa:	428a      	cmp	r2, r1
   18ffc:	d102      	bne.n	19004 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   18ffe:	2400      	movs	r4, #0
}
   19000:	4620      	mov	r0, r4
   19002:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   19004:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
   19008:	2001      	movs	r0, #1
   1900a:	f3bf 8f5b 	dmb	ish
   1900e:	e853 5f00 	ldrex	r5, [r3]
   19012:	2d00      	cmp	r5, #0
   19014:	d104      	bne.n	19020 <bt_conn_new+0x2c>
   19016:	e843 0c00 	strex	ip, r0, [r3]
   1901a:	f1bc 0f00 	cmp.w	ip, #0
   1901e:	d1f6      	bne.n	1900e <bt_conn_new+0x1a>
   19020:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   19024:	d002      	beq.n	1902c <bt_conn_new+0x38>
   19026:	34c0      	adds	r4, #192	; 0xc0
	for (i = 0; i < size; i++) {
   19028:	4402      	add	r2, r0
   1902a:	e7e6      	b.n	18ffa <bt_conn_new+0x6>
	if (!conn) {
   1902c:	2c00      	cmp	r4, #0
   1902e:	d0e6      	beq.n	18ffe <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   19030:	22bc      	movs	r2, #188	; 0xbc
   19032:	2100      	movs	r1, #0
   19034:	4620      	mov	r0, r4
   19036:	f01c fa89 	bl	3554c <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   1903a:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1903e:	4904      	ldr	r1, [pc, #16]	; (19050 <bt_conn_new+0x5c>)
   19040:	f01f fd05 	bl	38a4e <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   19044:	4903      	ldr	r1, [pc, #12]	; (19054 <bt_conn_new+0x60>)
   19046:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1904a:	f01f fcbc 	bl	389c6 <k_work_init>
	return conn;
   1904e:	e7d7      	b.n	19000 <bt_conn_new+0xc>
   19050:	00019901 	.word	0x00019901
   19054:	00035e8d 	.word	0x00035e8d

00019058 <bt_conn_recv>:
{
   19058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1905c:	4616      	mov	r6, r2
   1905e:	af00      	add	r7, sp, #0
   19060:	4604      	mov	r4, r0
   19062:	460d      	mov	r5, r1
	tx_notify(conn);
   19064:	f7ff fea2 	bl	18dac <tx_notify>
	switch (flags) {
   19068:	2e01      	cmp	r6, #1
   1906a:	d038      	beq.n	190de <bt_conn_recv+0x86>
   1906c:	2e02      	cmp	r6, #2
   1906e:	d17b      	bne.n	19168 <bt_conn_recv+0x110>
		if (conn->rx) {
   19070:	6923      	ldr	r3, [r4, #16]
   19072:	b193      	cbz	r3, 1909a <bt_conn_recv+0x42>
			LOG_ERR("Unexpected first L2CAP frame");
   19074:	466e      	mov	r6, sp
   19076:	b088      	sub	sp, #32
   19078:	466a      	mov	r2, sp
   1907a:	4b48      	ldr	r3, [pc, #288]	; (1919c <bt_conn_recv+0x144>)
   1907c:	6153      	str	r3, [r2, #20]
   1907e:	4b48      	ldr	r3, [pc, #288]	; (191a0 <bt_conn_recv+0x148>)
   19080:	6193      	str	r3, [r2, #24]
   19082:	2303      	movs	r3, #3
   19084:	4847      	ldr	r0, [pc, #284]	; (191a4 <bt_conn_recv+0x14c>)
   19086:	f842 3f10 	str.w	r3, [r2, #16]!
   1908a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1908e:	f01c fefa 	bl	35e86 <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   19092:	4620      	mov	r0, r4
   19094:	46b5      	mov	sp, r6
   19096:	f01c fefc 	bl	35e92 <bt_conn_reset_rx_state>
		conn->rx = buf;
   1909a:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1909c:	6921      	ldr	r1, [r4, #16]
   1909e:	8a08      	ldrh	r0, [r1, #16]
   190a0:	2801      	cmp	r0, #1
   190a2:	d937      	bls.n	19114 <bt_conn_recv+0xbc>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   190a4:	68cb      	ldr	r3, [r1, #12]
   190a6:	881b      	ldrh	r3, [r3, #0]
   190a8:	3304      	adds	r3, #4
   190aa:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   190ac:	4298      	cmp	r0, r3
   190ae:	d331      	bcc.n	19114 <bt_conn_recv+0xbc>
	if (conn->rx->len > acl_total_len) {
   190b0:	d96d      	bls.n	1918e <bt_conn_recv+0x136>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   190b2:	466d      	mov	r5, sp
   190b4:	b08a      	sub	sp, #40	; 0x28
   190b6:	466a      	mov	r2, sp
   190b8:	493b      	ldr	r1, [pc, #236]	; (191a8 <bt_conn_recv+0x150>)
   190ba:	6151      	str	r1, [r2, #20]
   190bc:	4938      	ldr	r1, [pc, #224]	; (191a0 <bt_conn_recv+0x148>)
   190be:	6213      	str	r3, [r2, #32]
   190c0:	2305      	movs	r3, #5
   190c2:	e9c2 1006 	strd	r1, r0, [r2, #24]
   190c6:	f842 3f10 	str.w	r3, [r2, #16]!
   190ca:	4836      	ldr	r0, [pc, #216]	; (191a4 <bt_conn_recv+0x14c>)
   190cc:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   190d0:	f01c fed9 	bl	35e86 <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   190d4:	4620      	mov	r0, r4
   190d6:	46ad      	mov	sp, r5
   190d8:	f01c fedb 	bl	35e92 <bt_conn_reset_rx_state>
		return;
   190dc:	e01a      	b.n	19114 <bt_conn_recv+0xbc>
		if (!conn->rx) {
   190de:	6920      	ldr	r0, [r4, #16]
   190e0:	b998      	cbnz	r0, 1910a <bt_conn_recv+0xb2>
			LOG_ERR("Unexpected L2CAP continuation");
   190e2:	466e      	mov	r6, sp
   190e4:	b088      	sub	sp, #32
   190e6:	466a      	mov	r2, sp
   190e8:	4b30      	ldr	r3, [pc, #192]	; (191ac <bt_conn_recv+0x154>)
   190ea:	6153      	str	r3, [r2, #20]
   190ec:	4b2c      	ldr	r3, [pc, #176]	; (191a0 <bt_conn_recv+0x148>)
   190ee:	6193      	str	r3, [r2, #24]
   190f0:	2303      	movs	r3, #3
   190f2:	f842 3f10 	str.w	r3, [r2, #16]!
   190f6:	482b      	ldr	r0, [pc, #172]	; (191a4 <bt_conn_recv+0x14c>)
   190f8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   190fc:	f01c fec3 	bl	35e86 <z_log_msg_static_create.constprop.0>
   19100:	46b5      	mov	sp, r6
		bt_conn_reset_rx_state(conn);
   19102:	4620      	mov	r0, r4
   19104:	f01c fec5 	bl	35e92 <bt_conn_reset_rx_state>
   19108:	e001      	b.n	1910e <bt_conn_recv+0xb6>
		if (!buf->len) {
   1910a:	8a2e      	ldrh	r6, [r5, #16]
   1910c:	b92e      	cbnz	r6, 1911a <bt_conn_recv+0xc2>
		net_buf_unref(buf);
   1910e:	4628      	mov	r0, r5
   19110:	f014 fba6 	bl	2d860 <net_buf_unref>
}
   19114:	46bd      	mov	sp, r7
   19116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1911a:	300c      	adds	r0, #12
   1911c:	f01e fce3 	bl	37ae6 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   19120:	4286      	cmp	r6, r0
   19122:	d917      	bls.n	19154 <bt_conn_recv+0xfc>
			LOG_ERR("Not enough buffer space for L2CAP data");
   19124:	466e      	mov	r6, sp
   19126:	b088      	sub	sp, #32
   19128:	466a      	mov	r2, sp
   1912a:	4b21      	ldr	r3, [pc, #132]	; (191b0 <bt_conn_recv+0x158>)
   1912c:	6153      	str	r3, [r2, #20]
   1912e:	4b1c      	ldr	r3, [pc, #112]	; (191a0 <bt_conn_recv+0x148>)
   19130:	6193      	str	r3, [r2, #24]
   19132:	2303      	movs	r3, #3
   19134:	f842 3f10 	str.w	r3, [r2, #16]!
   19138:	481a      	ldr	r0, [pc, #104]	; (191a4 <bt_conn_recv+0x14c>)
   1913a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1913e:	f01c fea2 	bl	35e86 <z_log_msg_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   19142:	2200      	movs	r2, #0
   19144:	6921      	ldr	r1, [r4, #16]
   19146:	46b5      	mov	sp, r6
   19148:	4620      	mov	r0, r4
   1914a:	f000 fe4f 	bl	19dec <bt_l2cap_recv>
			conn->rx = NULL;
   1914e:	2300      	movs	r3, #0
   19150:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   19152:	e7dc      	b.n	1910e <bt_conn_recv+0xb6>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   19154:	6920      	ldr	r0, [r4, #16]
   19156:	8a2a      	ldrh	r2, [r5, #16]
   19158:	68e9      	ldr	r1, [r5, #12]
   1915a:	300c      	adds	r0, #12
   1915c:	f01e fc8e 	bl	37a7c <net_buf_simple_add_mem>
		net_buf_unref(buf);
   19160:	4628      	mov	r0, r5
   19162:	f014 fb7d 	bl	2d860 <net_buf_unref>
		break;
   19166:	e799      	b.n	1909c <bt_conn_recv+0x44>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   19168:	46e8      	mov	r8, sp
   1916a:	b088      	sub	sp, #32
   1916c:	466b      	mov	r3, sp
   1916e:	4a11      	ldr	r2, [pc, #68]	; (191b4 <bt_conn_recv+0x15c>)
   19170:	615a      	str	r2, [r3, #20]
   19172:	4a0b      	ldr	r2, [pc, #44]	; (191a0 <bt_conn_recv+0x148>)
   19174:	480b      	ldr	r0, [pc, #44]	; (191a4 <bt_conn_recv+0x14c>)
	switch (flags) {
   19176:	e9c3 2606 	strd	r2, r6, [r3, #24]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   1917a:	461a      	mov	r2, r3
   1917c:	2304      	movs	r3, #4
   1917e:	f842 3f10 	str.w	r3, [r2, #16]!
   19182:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   19186:	f01c fe7e 	bl	35e86 <z_log_msg_static_create.constprop.0>
   1918a:	46c5      	mov	sp, r8
   1918c:	e7b9      	b.n	19102 <bt_conn_recv+0xaa>
	conn->rx = NULL;
   1918e:	2300      	movs	r3, #0
   19190:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   19192:	2201      	movs	r2, #1
   19194:	4620      	mov	r0, r4
   19196:	f000 fe29 	bl	19dec <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
   1919a:	e7bb      	b.n	19114 <bt_conn_recv+0xbc>
   1919c:	0003d39a 	.word	0x0003d39a
   191a0:	0003d685 	.word	0x0003d685
   191a4:	00039570 	.word	0x00039570
   191a8:	0003d42a 	.word	0x0003d42a
   191ac:	0003d3bb 	.word	0x0003d3bb
   191b0:	0003d3dd 	.word	0x0003d3dd
   191b4:	0003d408 	.word	0x0003d408

000191b8 <bt_conn_send_cb>:
{
   191b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   191bc:	4699      	mov	r9, r3
	if (conn->state != BT_CONN_CONNECTED) {
   191be:	7b43      	ldrb	r3, [r0, #13]
   191c0:	2b07      	cmp	r3, #7
{
   191c2:	af00      	add	r7, sp, #0
   191c4:	4605      	mov	r5, r0
   191c6:	460e      	mov	r6, r1
   191c8:	4690      	mov	r8, r2
	if (conn->state != BT_CONN_CONNECTED) {
   191ca:	d012      	beq.n	191f2 <bt_conn_send_cb+0x3a>
		LOG_ERR("not connected!");
   191cc:	466c      	mov	r4, sp
   191ce:	b088      	sub	sp, #32
   191d0:	466a      	mov	r2, sp
   191d2:	4b31      	ldr	r3, [pc, #196]	; (19298 <bt_conn_send_cb+0xe0>)
   191d4:	6153      	str	r3, [r2, #20]
   191d6:	4b31      	ldr	r3, [pc, #196]	; (1929c <bt_conn_send_cb+0xe4>)
   191d8:	6193      	str	r3, [r2, #24]
   191da:	2303      	movs	r3, #3
   191dc:	f842 3f10 	str.w	r3, [r2, #16]!
   191e0:	482f      	ldr	r0, [pc, #188]	; (192a0 <bt_conn_send_cb+0xe8>)
   191e2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   191e6:	f01c fe4e 	bl	35e86 <z_log_msg_static_create.constprop.0>
   191ea:	46a5      	mov	sp, r4
		return -ENOTCONN;
   191ec:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   191f0:	e023      	b.n	1923a <bt_conn_send_cb+0x82>
	if (cb) {
   191f2:	2a00      	cmp	r2, #0
   191f4:	d04e      	beq.n	19294 <bt_conn_send_cb+0xdc>
	return z_impl_z_current_get();
   191f6:	f019 f98f 	bl	32518 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   191fa:	4b2a      	ldr	r3, [pc, #168]	; (192a4 <bt_conn_send_cb+0xec>)
   191fc:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   191fe:	482a      	ldr	r0, [pc, #168]	; (192a8 <bt_conn_send_cb+0xf0>)
   19200:	bf07      	ittee	eq
   19202:	2200      	moveq	r2, #0
   19204:	2300      	moveq	r3, #0
   19206:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   1920a:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   1920e:	f018 fc2d 	bl	31a6c <z_impl_k_queue_get>
   19212:	4604      	mov	r4, r0
		if (!tx) {
   19214:	b9a0      	cbnz	r0, 19240 <bt_conn_send_cb+0x88>
			LOG_ERR("Unable to allocate TX context");
   19216:	466c      	mov	r4, sp
   19218:	b088      	sub	sp, #32
   1921a:	466a      	mov	r2, sp
   1921c:	4b23      	ldr	r3, [pc, #140]	; (192ac <bt_conn_send_cb+0xf4>)
   1921e:	6153      	str	r3, [r2, #20]
   19220:	4b1e      	ldr	r3, [pc, #120]	; (1929c <bt_conn_send_cb+0xe4>)
   19222:	6193      	str	r3, [r2, #24]
   19224:	2303      	movs	r3, #3
   19226:	481e      	ldr	r0, [pc, #120]	; (192a0 <bt_conn_send_cb+0xe8>)
   19228:	f842 3f10 	str.w	r3, [r2, #16]!
   1922c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19230:	f01c fe29 	bl	35e86 <z_log_msg_static_create.constprop.0>
			return -ENOBUFS;
   19234:	f06f 0068 	mvn.w	r0, #104	; 0x68
   19238:	46a5      	mov	sp, r4
}
   1923a:	46bd      	mov	sp, r7
   1923c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   19240:	7b6b      	ldrb	r3, [r5, #13]
   19242:	2b07      	cmp	r3, #7
   19244:	d018      	beq.n	19278 <bt_conn_send_cb+0xc0>
			LOG_WRN("Disconnected while allocating context");
   19246:	466d      	mov	r5, sp
   19248:	b088      	sub	sp, #32
   1924a:	466a      	mov	r2, sp
   1924c:	4b18      	ldr	r3, [pc, #96]	; (192b0 <bt_conn_send_cb+0xf8>)
   1924e:	6153      	str	r3, [r2, #20]
   19250:	4b12      	ldr	r3, [pc, #72]	; (1929c <bt_conn_send_cb+0xe4>)
   19252:	6193      	str	r3, [r2, #24]
   19254:	2303      	movs	r3, #3
   19256:	f842 3f10 	str.w	r3, [r2, #16]!
   1925a:	4811      	ldr	r0, [pc, #68]	; (192a0 <bt_conn_send_cb+0xe8>)
   1925c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19260:	f01c fe11 	bl	35e86 <z_log_msg_static_create.constprop.0>
	tx->cb = NULL;
   19264:	2300      	movs	r3, #0
	tx->user_data = NULL;
   19266:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
   1926a:	480f      	ldr	r0, [pc, #60]	; (192a8 <bt_conn_send_cb+0xf0>)
	tx->pending_no_cb = 0U;
   1926c:	60e3      	str	r3, [r4, #12]
   1926e:	46ad      	mov	sp, r5
	k_fifo_put(&free_tx, tx);
   19270:	4621      	mov	r1, r4
   19272:	f01f fb0d 	bl	38890 <k_queue_append>
}
   19276:	e7b9      	b.n	191ec <bt_conn_send_cb+0x34>
		tx->user_data = user_data;
   19278:	e9c0 8901 	strd	r8, r9, [r0, #4]
		tx->pending_no_cb = 0U;
   1927c:	2300      	movs	r3, #0
   1927e:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   19280:	61b4      	str	r4, [r6, #24]
	tx_data(buf)->is_cont = false;
   19282:	2400      	movs	r4, #0
	net_buf_put(&conn->tx_queue, buf);
   19284:	f105 0038 	add.w	r0, r5, #56	; 0x38
	tx_data(buf)->is_cont = false;
   19288:	7734      	strb	r4, [r6, #28]
	net_buf_put(&conn->tx_queue, buf);
   1928a:	4631      	mov	r1, r6
   1928c:	f01e fbbc 	bl	37a08 <net_buf_put>
	return 0;
   19290:	4620      	mov	r0, r4
   19292:	e7d2      	b.n	1923a <bt_conn_send_cb+0x82>
   19294:	4614      	mov	r4, r2
   19296:	e7f3      	b.n	19280 <bt_conn_send_cb+0xc8>
   19298:	0003d449 	.word	0x0003d449
   1929c:	0003d675 	.word	0x0003d675
   192a0:	00039570 	.word	0x00039570
   192a4:	200019b0 	.word	0x200019b0
   192a8:	20000b10 	.word	0x20000b10
   192ac:	0003d45c 	.word	0x0003d45c
   192b0:	0003d47e 	.word	0x0003d47e

000192b4 <bt_conn_prepare_events>:
{
   192b4:	b570      	push	{r4, r5, r6, lr}
   192b6:	4604      	mov	r4, r0
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
   192b8:	481d      	ldr	r0, [pc, #116]	; (19330 <bt_conn_prepare_events+0x7c>)
   192ba:	f01f ff15 	bl	390e8 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   192be:	4b1c      	ldr	r3, [pc, #112]	; (19330 <bt_conn_prepare_events+0x7c>)
   192c0:	2200      	movs	r2, #0
   192c2:	2101      	movs	r1, #1
   192c4:	4620      	mov	r0, r4
   192c6:	f01f fef2 	bl	390ae <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   192ca:	f3bf 8f5b 	dmb	ish
   192ce:	4b19      	ldr	r3, [pc, #100]	; (19334 <bt_conn_prepare_events+0x80>)
   192d0:	681a      	ldr	r2, [r3, #0]
   192d2:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   192d6:	f104 0614 	add.w	r6, r4, #20
	if (!atomic_get(&conn->ref)) {
   192da:	b90a      	cbnz	r2, 192e0 <bt_conn_prepare_events+0x2c>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   192dc:	2001      	movs	r0, #1
}
   192de:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   192e0:	f1a3 05bc 	sub.w	r5, r3, #188	; 0xbc
   192e4:	f813 3caf 	ldrb.w	r3, [r3, #-175]
   192e8:	b953      	cbnz	r3, 19300 <bt_conn_prepare_events+0x4c>
   192ea:	f06f 0140 	mvn.w	r1, #64	; 0x40
   192ee:	1d28      	adds	r0, r5, #4
   192f0:	f01c fdba 	bl	35e68 <atomic_and>
   192f4:	0643      	lsls	r3, r0, #25
   192f6:	d503      	bpl.n	19300 <bt_conn_prepare_events+0x4c>
		conn_cleanup(conn);
   192f8:	4628      	mov	r0, r5
   192fa:	f01c fdd3 	bl	35ea4 <conn_cleanup>
		return -ENOTCONN;
   192fe:	e7ed      	b.n	192dc <bt_conn_prepare_events+0x28>
	if (conn->state != BT_CONN_CONNECTED) {
   19300:	7b6b      	ldrb	r3, [r5, #13]
   19302:	2b07      	cmp	r3, #7
   19304:	d1ea      	bne.n	192dc <bt_conn_prepare_events+0x28>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
   19306:	4b0c      	ldr	r3, [pc, #48]	; (19338 <bt_conn_prepare_events+0x84>)
   19308:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
	if (packets_waiting && !buffers_available) {
   1930c:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   1930e:	b159      	cbz	r1, 19328 <bt_conn_prepare_events+0x74>
   19310:	b952      	cbnz	r2, 19328 <bt_conn_prepare_events+0x74>
		k_poll_event_init(&events[0],
   19312:	f503 7380 	add.w	r3, r3, #256	; 0x100
   19316:	2102      	movs	r1, #2
		k_poll_event_init(&events[0],
   19318:	4630      	mov	r0, r6
   1931a:	f01f fec8 	bl	390ae <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   1931e:	2301      	movs	r3, #1
   19320:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   19324:	2002      	movs	r0, #2
	return ev_count;
   19326:	e7da      	b.n	192de <bt_conn_prepare_events+0x2a>
		k_poll_event_init(&events[0],
   19328:	4b04      	ldr	r3, [pc, #16]	; (1933c <bt_conn_prepare_events+0x88>)
   1932a:	2200      	movs	r2, #0
   1932c:	2104      	movs	r1, #4
   1932e:	e7f3      	b.n	19318 <bt_conn_prepare_events+0x64>
   19330:	200002d8 	.word	0x200002d8
   19334:	200012fc 	.word	0x200012fc
   19338:	20000000 	.word	0x20000000
   1933c:	20001278 	.word	0x20001278

00019340 <bt_conn_lookup_handle>:
{
   19340:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   19342:	2101      	movs	r1, #1
   19344:	4801      	ldr	r0, [pc, #4]	; (1934c <bt_conn_lookup_handle+0xc>)
   19346:	f01c be08 	b.w	35f5a <conn_lookup_handle>
   1934a:	bf00      	nop
   1934c:	20001240 	.word	0x20001240

00019350 <bt_conn_set_state>:
{
   19350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == state) {
   19352:	7b46      	ldrb	r6, [r0, #13]
   19354:	428e      	cmp	r6, r1
{
   19356:	af00      	add	r7, sp, #0
   19358:	4604      	mov	r4, r0
   1935a:	460d      	mov	r5, r1
	if (conn->state == state) {
   1935c:	d11a      	bne.n	19394 <bt_conn_set_state+0x44>
	switch (state) {
   1935e:	2e08      	cmp	r6, #8
   19360:	bf96      	itet	ls
   19362:	4b6f      	ldrls	r3, [pc, #444]	; (19520 <bt_conn_set_state+0x1d0>)
	if (conn->state == state) {
   19364:	4b6f      	ldrhi	r3, [pc, #444]	; (19524 <bt_conn_set_state+0x1d4>)
   19366:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
		LOG_WRN("no transition %s", state2str(state));
   1936a:	466c      	mov	r4, sp
   1936c:	b08a      	sub	sp, #40	; 0x28
   1936e:	466a      	mov	r2, sp
   19370:	496d      	ldr	r1, [pc, #436]	; (19528 <bt_conn_set_state+0x1d8>)
   19372:	6151      	str	r1, [r2, #20]
   19374:	496d      	ldr	r1, [pc, #436]	; (1952c <bt_conn_set_state+0x1dc>)
   19376:	e9c2 1306 	strd	r1, r3, [r2, #24]
   1937a:	f240 3301 	movw	r3, #769	; 0x301
   1937e:	8413      	strh	r3, [r2, #32]
   19380:	4b6b      	ldr	r3, [pc, #428]	; (19530 <bt_conn_set_state+0x1e0>)
   19382:	f842 3f10 	str.w	r3, [r2, #16]!
   19386:	f44f 5112 	mov.w	r1, #9344	; 0x2480
		LOG_WRN("no valid (%u) state was set", state);
   1938a:	486a      	ldr	r0, [pc, #424]	; (19534 <bt_conn_set_state+0x1e4>)
   1938c:	f01c fd7b 	bl	35e86 <z_log_msg_static_create.constprop.0>
   19390:	46a5      	mov	sp, r4
   19392:	e043      	b.n	1941c <bt_conn_set_state+0xcc>
	conn->state = state;
   19394:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   19396:	b926      	cbnz	r6, 193a2 <bt_conn_set_state+0x52>
		if (conn->type != BT_CONN_TYPE_ISO) {
   19398:	7883      	ldrb	r3, [r0, #2]
   1939a:	2b08      	cmp	r3, #8
   1939c:	d001      	beq.n	193a2 <bt_conn_set_state+0x52>
			bt_conn_ref(conn);
   1939e:	f01c fda4 	bl	35eea <bt_conn_ref>
	switch (conn->state) {
   193a2:	7b63      	ldrb	r3, [r4, #13]
   193a4:	2b08      	cmp	r3, #8
   193a6:	f200 80b5 	bhi.w	19514 <bt_conn_set_state+0x1c4>
   193aa:	e8df f003 	tbb	[pc, r3]
   193ae:	0539      	.short	0x0539
   193b0:	37373737 	.word	0x37373737
   193b4:	1c37      	.short	0x1c37
   193b6:	37          	.byte	0x37
   193b7:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
   193b8:	4d5f      	ldr	r5, [pc, #380]	; (19538 <bt_conn_set_state+0x1e8>)
		tx->pending_no_cb = 0U;
   193ba:	2600      	movs	r6, #0
	__asm__ volatile(
   193bc:	f04f 0220 	mov.w	r2, #32
   193c0:	f3ef 8311 	mrs	r3, BASEPRI
   193c4:	f382 8812 	msr	BASEPRI_MAX, r2
   193c8:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   193cc:	69e2      	ldr	r2, [r4, #28]
   193ce:	2a00      	cmp	r2, #0
   193d0:	d07c      	beq.n	194cc <bt_conn_set_state+0x17c>
			conn->pending_no_cb--;
   193d2:	3a01      	subs	r2, #1
   193d4:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   193d6:	f383 8811 	msr	BASEPRI, r3
   193da:	f3bf 8f6f 	isb	sy
   193de:	4628      	mov	r0, r5
   193e0:	f018 fb78 	bl	31ad4 <z_impl_k_sem_give>
}
   193e4:	e7ea      	b.n	193bc <bt_conn_set_state+0x6c>
		if (conn->type == BT_CONN_TYPE_SCO) {
   193e6:	78a3      	ldrb	r3, [r4, #2]
   193e8:	2b04      	cmp	r3, #4
   193ea:	d017      	beq.n	1941c <bt_conn_set_state+0xcc>
	z_impl_k_queue_init(queue);
   193ec:	f104 0038 	add.w	r0, r4, #56	; 0x38
   193f0:	f01f fa22 	bl	38838 <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   193f4:	4851      	ldr	r0, [pc, #324]	; (1953c <bt_conn_set_state+0x1ec>)
   193f6:	2100      	movs	r1, #0
   193f8:	f019 fb72 	bl	32ae0 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   193fc:	2300      	movs	r3, #0
	list->tail = NULL;
   193fe:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   19402:	78e3      	ldrb	r3, [r4, #3]
   19404:	2b01      	cmp	r3, #1
   19406:	d109      	bne.n	1941c <bt_conn_set_state+0xcc>
			conn->le.conn_param_retry_countdown =
   19408:	2303      	movs	r3, #3
   1940a:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
   1940e:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   19412:	2300      	movs	r3, #0
   19414:	f104 0058 	add.w	r0, r4, #88	; 0x58
   19418:	f018 fd62 	bl	31ee0 <k_work_schedule>
}
   1941c:	46bd      	mov	sp, r7
   1941e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   19420:	78a3      	ldrb	r3, [r4, #2]
   19422:	2b04      	cmp	r3, #4
   19424:	d103      	bne.n	1942e <bt_conn_set_state+0xde>
			bt_conn_unref(conn);
   19426:	4620      	mov	r0, r4
   19428:	f01c fd7b 	bl	35f22 <bt_conn_unref>
			break;
   1942c:	e7f6      	b.n	1941c <bt_conn_set_state+0xcc>
		switch (old_state) {
   1942e:	2e08      	cmp	r6, #8
   19430:	d8f4      	bhi.n	1941c <bt_conn_set_state+0xcc>
   19432:	a301      	add	r3, pc, #4	; (adr r3, 19438 <bt_conn_set_state+0xe8>)
   19434:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   19438:	000194b1 	.word	0x000194b1
   1943c:	0001945d 	.word	0x0001945d
   19440:	000194a3 	.word	0x000194a3
   19444:	00019427 	.word	0x00019427
   19448:	00019427 	.word	0x00019427
   1944c:	000194a3 	.word	0x000194a3
   19450:	000194a3 	.word	0x000194a3
   19454:	0001941d 	.word	0x0001941d
   19458:	000194b1 	.word	0x000194b1
			tx_notify(conn);
   1945c:	4620      	mov	r0, r4
   1945e:	f7ff fca5 	bl	18dac <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   19462:	78a3      	ldrb	r3, [r4, #2]
   19464:	2b01      	cmp	r3, #1
   19466:	d10a      	bne.n	1947e <bt_conn_set_state+0x12e>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   19468:	f104 0558 	add.w	r5, r4, #88	; 0x58
   1946c:	4628      	mov	r0, r5
   1946e:	f01f fafa 	bl	38a66 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   19472:	f010 0f0c 	tst.w	r0, #12
   19476:	d002      	beq.n	1947e <bt_conn_set_state+0x12e>
				k_work_cancel_delayable(&conn->deferred_work);
   19478:	4628      	mov	r0, r5
   1947a:	f01f faf6 	bl	38a6a <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1947e:	f3bf 8f5b 	dmb	ish
   19482:	3404      	adds	r4, #4
   19484:	e854 3f00 	ldrex	r3, [r4]
   19488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1948c:	e844 3200 	strex	r2, r3, [r4]
   19490:	2a00      	cmp	r2, #0
   19492:	d1f7      	bne.n	19484 <bt_conn_set_state+0x134>
   19494:	f3bf 8f5b 	dmb	ish
   19498:	2100      	movs	r1, #0
   1949a:	4828      	ldr	r0, [pc, #160]	; (1953c <bt_conn_set_state+0x1ec>)
   1949c:	f019 fb20 	bl	32ae0 <z_impl_k_poll_signal_raise>
   194a0:	e7bc      	b.n	1941c <bt_conn_set_state+0xcc>
			if (conn->err) {
   194a2:	7b23      	ldrb	r3, [r4, #12]
   194a4:	2b00      	cmp	r3, #0
   194a6:	d0be      	beq.n	19426 <bt_conn_set_state+0xd6>
				notify_connected(conn);
   194a8:	4620      	mov	r0, r4
   194aa:	f7ff fc47 	bl	18d3c <notify_connected>
   194ae:	e7ba      	b.n	19426 <bt_conn_set_state+0xd6>
			LOG_WRN("Invalid (%u) old state", state);
   194b0:	466c      	mov	r4, sp
   194b2:	b088      	sub	sp, #32
   194b4:	466a      	mov	r2, sp
   194b6:	4b22      	ldr	r3, [pc, #136]	; (19540 <bt_conn_set_state+0x1f0>)
		LOG_WRN("no valid (%u) state was set", state);
   194b8:	6153      	str	r3, [r2, #20]
   194ba:	4b1c      	ldr	r3, [pc, #112]	; (1952c <bt_conn_set_state+0x1dc>)
   194bc:	e9c2 3506 	strd	r3, r5, [r2, #24]
   194c0:	2304      	movs	r3, #4
   194c2:	f842 3f10 	str.w	r3, [r2, #16]!
   194c6:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   194ca:	e75e      	b.n	1938a <bt_conn_set_state+0x3a>
	return list->head;
   194cc:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   194ce:	b921      	cbnz	r1, 194da <bt_conn_set_state+0x18a>
   194d0:	f383 8811 	msr	BASEPRI, r3
   194d4:	f3bf 8f6f 	isb	sy
		if (!node) {
   194d8:	e7a0      	b.n	1941c <bt_conn_set_state+0xcc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   194da:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   194dc:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   194de:	6162      	str	r2, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   194e0:	4281      	cmp	r1, r0
	list->tail = node;
   194e2:	bf08      	it	eq
   194e4:	61a2      	streq	r2, [r4, #24]
   194e6:	f383 8811 	msr	BASEPRI, r3
   194ea:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   194ee:	f04f 0220 	mov.w	r2, #32
   194f2:	f3ef 8311 	mrs	r3, BASEPRI
   194f6:	f382 8812 	msr	BASEPRI_MAX, r2
   194fa:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   194fe:	68ca      	ldr	r2, [r1, #12]
   19500:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   19502:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   19504:	f383 8811 	msr	BASEPRI, r3
   19508:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   1950c:	4620      	mov	r0, r4
   1950e:	f7ff fc7d 	bl	18e0c <conn_tx_destroy>
   19512:	e764      	b.n	193de <bt_conn_set_state+0x8e>
		LOG_WRN("no valid (%u) state was set", state);
   19514:	466c      	mov	r4, sp
   19516:	b088      	sub	sp, #32
   19518:	466a      	mov	r2, sp
   1951a:	4b0a      	ldr	r3, [pc, #40]	; (19544 <bt_conn_set_state+0x1f4>)
   1951c:	e7cc      	b.n	194b8 <bt_conn_set_state+0x168>
   1951e:	bf00      	nop
   19520:	00039c5c 	.word	0x00039c5c
   19524:	0003d4a8 	.word	0x0003d4a8
   19528:	0003d4b2 	.word	0x0003d4b2
   1952c:	0003d656 	.word	0x0003d656
   19530:	01000004 	.word	0x01000004
   19534:	00039570 	.word	0x00039570
   19538:	20000100 	.word	0x20000100
   1953c:	200002d8 	.word	0x200002d8
   19540:	0003d4c7 	.word	0x0003d4c7
   19544:	0003d4e2 	.word	0x0003d4e2

00019548 <bt_conn_foreach>:
{
   19548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1954a:	4607      	mov	r7, r0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1954c:	4809      	ldr	r0, [pc, #36]	; (19574 <bt_conn_foreach+0x2c>)
{
   1954e:	460d      	mov	r5, r1
   19550:	4616      	mov	r6, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   19552:	f01c fcca 	bl	35eea <bt_conn_ref>
   19556:	4604      	mov	r4, r0
		if (!conn) {
   19558:	b150      	cbz	r0, 19570 <bt_conn_foreach+0x28>
		if (!(conn->type & type)) {
   1955a:	7883      	ldrb	r3, [r0, #2]
   1955c:	423b      	tst	r3, r7
   1955e:	d103      	bne.n	19568 <bt_conn_foreach+0x20>
}
   19560:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   19564:	f01c bcdd 	b.w	35f22 <bt_conn_unref>
		func(conn, data);
   19568:	4631      	mov	r1, r6
   1956a:	47a8      	blx	r5
		bt_conn_unref(conn);
   1956c:	4620      	mov	r0, r4
   1956e:	e7f7      	b.n	19560 <bt_conn_foreach+0x18>
}
   19570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19572:	bf00      	nop
   19574:	20001240 	.word	0x20001240

00019578 <bt_conn_index>:
		index = conn - acl_conns;
   19578:	4b03      	ldr	r3, [pc, #12]	; (19588 <bt_conn_index+0x10>)
   1957a:	1ac0      	subs	r0, r0, r3
   1957c:	4b03      	ldr	r3, [pc, #12]	; (1958c <bt_conn_index+0x14>)
   1957e:	1180      	asrs	r0, r0, #6
   19580:	4358      	muls	r0, r3
}
   19582:	b2c0      	uxtb	r0, r0
   19584:	4770      	bx	lr
   19586:	bf00      	nop
   19588:	20001240 	.word	0x20001240
   1958c:	aaaaaaab 	.word	0xaaaaaaab

00019590 <bt_conn_create_pdu_timeout>:
{
   19590:	b538      	push	{r3, r4, r5, lr}
   19592:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   19594:	4908      	ldr	r1, [pc, #32]	; (195b8 <bt_conn_create_pdu_timeout+0x28>)
   19596:	2800      	cmp	r0, #0
   19598:	bf08      	it	eq
   1959a:	4608      	moveq	r0, r1
   1959c:	f01e f9fc 	bl	37998 <net_buf_alloc_fixed>
	if (!buf) {
   195a0:	4604      	mov	r4, r0
   195a2:	b918      	cbnz	r0, 195ac <bt_conn_create_pdu_timeout+0x1c>
}
   195a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   195a8:	f7ff bbe6 	b.w	18d78 <bt_conn_create_pdu_timeout.part.0>
	net_buf_simple_reserve(&buf->b, reserve);
   195ac:	1d29      	adds	r1, r5, #4
   195ae:	300c      	adds	r0, #12
   195b0:	f01e f9f9 	bl	379a6 <net_buf_simple_reserve>
   195b4:	4620      	mov	r0, r4
   195b6:	bd38      	pop	{r3, r4, r5, pc}
   195b8:	20000b28 	.word	0x20000b28

000195bc <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   195bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   195be:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   195c0:	f3bf 8f5b 	dmb	ish
   195c4:	6863      	ldr	r3, [r4, #4]
   195c6:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   195ca:	059b      	lsls	r3, r3, #22
   195cc:	f100 0004 	add.w	r0, r0, #4
   195d0:	d511      	bpl.n	195f6 <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   195d2:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   195d6:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
   195da:	429a      	cmp	r2, r3
   195dc:	d80b      	bhi.n	195f6 <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   195de:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
   195e2:	429a      	cmp	r2, r3
   195e4:	d307      	bcc.n	195f6 <notify_le_param_updated+0x3a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   195e6:	e9d4 2329 	ldrd	r2, r3, [r4, #164]	; 0xa4
   195ea:	429a      	cmp	r2, r3
   195ec:	d103      	bne.n	195f6 <notify_le_param_updated+0x3a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   195ee:	f46f 7100 	mvn.w	r1, #512	; 0x200
   195f2:	f01c fc39 	bl	35e68 <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   195f6:	4b10      	ldr	r3, [pc, #64]	; (19638 <notify_le_param_updated+0x7c>)
   195f8:	681d      	ldr	r5, [r3, #0]
   195fa:	b925      	cbnz	r5, 19606 <notify_le_param_updated+0x4a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   195fc:	4d0f      	ldr	r5, [pc, #60]	; (1963c <notify_le_param_updated+0x80>)
   195fe:	4f10      	ldr	r7, [pc, #64]	; (19640 <notify_le_param_updated+0x84>)
   19600:	42bd      	cmp	r5, r7
   19602:	d30c      	bcc.n	1961e <notify_le_param_updated+0x62>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   19604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   19606:	68ee      	ldr	r6, [r5, #12]
   19608:	b13e      	cbz	r6, 1961a <notify_le_param_updated+0x5e>
			cb->le_param_updated(conn, conn->le.interval,
   1960a:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   1960e:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   19612:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   19616:	4620      	mov	r0, r4
   19618:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1961a:	69ad      	ldr	r5, [r5, #24]
   1961c:	e7ed      	b.n	195fa <notify_le_param_updated+0x3e>
		if (cb->le_param_updated) {
   1961e:	68ee      	ldr	r6, [r5, #12]
   19620:	b13e      	cbz	r6, 19632 <notify_le_param_updated+0x76>
			cb->le_param_updated(conn, conn->le.interval,
   19622:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   19626:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1962a:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1962e:	4620      	mov	r0, r4
   19630:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19632:	351c      	adds	r5, #28
   19634:	e7e4      	b.n	19600 <notify_le_param_updated+0x44>
   19636:	bf00      	nop
   19638:	20001b6c 	.word	0x20001b6c
   1963c:	000394fc 	.word	0x000394fc
   19640:	00039518 	.word	0x00039518

00019644 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   19644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19648:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   1964a:	4608      	mov	r0, r1
{
   1964c:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   1964e:	f01c f9a1 	bl	35994 <bt_le_conn_params_valid>
   19652:	4605      	mov	r5, r0
   19654:	b918      	cbnz	r0, 1965e <le_param_req+0x1a>
		return false;
   19656:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   19658:	4628      	mov	r0, r5
   1965a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   1965e:	4b13      	ldr	r3, [pc, #76]	; (196ac <le_param_req+0x68>)
   19660:	681e      	ldr	r6, [r3, #0]
   19662:	b946      	cbnz	r6, 19676 <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19664:	4e12      	ldr	r6, [pc, #72]	; (196b0 <le_param_req+0x6c>)
   19666:	f8df 804c 	ldr.w	r8, [pc, #76]	; 196b4 <le_param_req+0x70>
   1966a:	4546      	cmp	r6, r8
   1966c:	d2f4      	bcs.n	19658 <le_param_req+0x14>
		if (!cb->le_param_req) {
   1966e:	68b3      	ldr	r3, [r6, #8]
   19670:	b983      	cbnz	r3, 19694 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19672:	361c      	adds	r6, #28
   19674:	e7f9      	b.n	1966a <le_param_req+0x26>
		if (!cb->le_param_req) {
   19676:	68b3      	ldr	r3, [r6, #8]
   19678:	b90b      	cbnz	r3, 1967e <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   1967a:	69b6      	ldr	r6, [r6, #24]
   1967c:	e7f1      	b.n	19662 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   1967e:	4621      	mov	r1, r4
   19680:	4638      	mov	r0, r7
   19682:	4798      	blx	r3
   19684:	2800      	cmp	r0, #0
   19686:	d0e6      	beq.n	19656 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   19688:	4620      	mov	r0, r4
   1968a:	f01c f983 	bl	35994 <bt_le_conn_params_valid>
   1968e:	2800      	cmp	r0, #0
   19690:	d1f3      	bne.n	1967a <le_param_req+0x36>
   19692:	e7e0      	b.n	19656 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   19694:	4621      	mov	r1, r4
   19696:	4638      	mov	r0, r7
   19698:	4798      	blx	r3
   1969a:	2800      	cmp	r0, #0
   1969c:	d0db      	beq.n	19656 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1969e:	4620      	mov	r0, r4
   196a0:	f01c f978 	bl	35994 <bt_le_conn_params_valid>
   196a4:	2800      	cmp	r0, #0
   196a6:	d1e4      	bne.n	19672 <le_param_req+0x2e>
   196a8:	e7d5      	b.n	19656 <le_param_req+0x12>
   196aa:	bf00      	nop
   196ac:	20001b6c 	.word	0x20001b6c
   196b0:	000394fc 	.word	0x000394fc
   196b4:	00039518 	.word	0x00039518

000196b8 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   196b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   196bc:	78c3      	ldrb	r3, [r0, #3]
{
   196be:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   196c0:	b973      	cbnz	r3, 196e0 <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
   196c2:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   196c6:	4b10      	ldr	r3, [pc, #64]	; (19708 <bt_conn_identity_resolved+0x50>)
   196c8:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   196ca:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   196ce:	b955      	cbnz	r5, 196e6 <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   196d0:	4d0e      	ldr	r5, [pc, #56]	; (1970c <bt_conn_identity_resolved+0x54>)
   196d2:	4f0f      	ldr	r7, [pc, #60]	; (19710 <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   196d4:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   196d8:	42bd      	cmp	r5, r7
   196da:	d30c      	bcc.n	196f6 <bt_conn_identity_resolved+0x3e>
		}
	}
}
   196dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
   196e0:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   196e4:	e7ef      	b.n	196c6 <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   196e6:	692b      	ldr	r3, [r5, #16]
   196e8:	b11b      	cbz	r3, 196f2 <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   196ea:	463a      	mov	r2, r7
   196ec:	4631      	mov	r1, r6
   196ee:	4620      	mov	r0, r4
   196f0:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   196f2:	69ad      	ldr	r5, [r5, #24]
   196f4:	e7eb      	b.n	196ce <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   196f6:	692b      	ldr	r3, [r5, #16]
   196f8:	b11b      	cbz	r3, 19702 <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   196fa:	4642      	mov	r2, r8
   196fc:	4631      	mov	r1, r6
   196fe:	4620      	mov	r0, r4
   19700:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19702:	351c      	adds	r5, #28
   19704:	e7e8      	b.n	196d8 <bt_conn_identity_resolved+0x20>
   19706:	bf00      	nop
   19708:	20001b6c 	.word	0x20001b6c
   1970c:	000394fc 	.word	0x000394fc
   19710:	00039518 	.word	0x00039518

00019714 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   19714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   19716:	7a43      	ldrb	r3, [r0, #9]
   19718:	7283      	strb	r3, [r0, #10]
{
   1971a:	4604      	mov	r4, r0
   1971c:	4615      	mov	r5, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   1971e:	f01c fd30 	bl	36182 <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   19722:	4b13      	ldr	r3, [pc, #76]	; (19770 <bt_conn_security_changed+0x5c>)
   19724:	681e      	ldr	r6, [r3, #0]
   19726:	b98e      	cbnz	r6, 1974c <bt_conn_security_changed+0x38>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19728:	4e12      	ldr	r6, [pc, #72]	; (19774 <bt_conn_security_changed+0x60>)
   1972a:	4f13      	ldr	r7, [pc, #76]	; (19778 <bt_conn_security_changed+0x64>)
   1972c:	42be      	cmp	r6, r7
   1972e:	d315      	bcc.n	1975c <bt_conn_security_changed+0x48>
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

#if defined(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
	if (!err && conn->sec_level >= BT_SECURITY_L2) {
   19730:	b9e5      	cbnz	r5, 1976c <bt_conn_security_changed+0x58>
   19732:	7a63      	ldrb	r3, [r4, #9]
   19734:	2b01      	cmp	r3, #1
   19736:	d919      	bls.n	1976c <bt_conn_security_changed+0x58>
		if (conn->type == BT_CONN_TYPE_LE) {
   19738:	78a3      	ldrb	r3, [r4, #2]
   1973a:	2b01      	cmp	r3, #1
   1973c:	d116      	bne.n	1976c <bt_conn_security_changed+0x58>
			bt_keys_update_usage(conn->id, bt_conn_get_dst(conn));
   1973e:	7a20      	ldrb	r0, [r4, #8]
   19740:	f104 0188 	add.w	r1, r4, #136	; 0x88
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   19744:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			bt_keys_update_usage(conn->id, bt_conn_get_dst(conn));
   19748:	f005 bd38 	b.w	1f1bc <bt_keys_update_usage>
		if (cb->security_changed) {
   1974c:	6973      	ldr	r3, [r6, #20]
   1974e:	b11b      	cbz	r3, 19758 <bt_conn_security_changed+0x44>
			cb->security_changed(conn, conn->sec_level, err);
   19750:	7a61      	ldrb	r1, [r4, #9]
   19752:	462a      	mov	r2, r5
   19754:	4620      	mov	r0, r4
   19756:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   19758:	69b6      	ldr	r6, [r6, #24]
   1975a:	e7e4      	b.n	19726 <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   1975c:	6973      	ldr	r3, [r6, #20]
   1975e:	b11b      	cbz	r3, 19768 <bt_conn_security_changed+0x54>
			cb->security_changed(conn, conn->sec_level, err);
   19760:	7a61      	ldrb	r1, [r4, #9]
   19762:	462a      	mov	r2, r5
   19764:	4620      	mov	r0, r4
   19766:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19768:	361c      	adds	r6, #28
   1976a:	e7df      	b.n	1972c <bt_conn_security_changed+0x18>
}
   1976c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1976e:	bf00      	nop
   19770:	20001b6c 	.word	0x20001b6c
   19774:	000394fc 	.word	0x000394fc
   19778:	00039518 	.word	0x00039518

0001977c <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   1977c:	b570      	push	{r4, r5, r6, lr}
   1977e:	4606      	mov	r6, r0
   19780:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   19782:	480a      	ldr	r0, [pc, #40]	; (197ac <bt_conn_add_le+0x30>)
   19784:	2101      	movs	r1, #1
   19786:	f7ff fc35 	bl	18ff4 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   1978a:	4604      	mov	r4, r0
   1978c:	b160      	cbz	r0, 197a8 <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
   1978e:	7206      	strb	r6, [r0, #8]
   19790:	2207      	movs	r2, #7
   19792:	4629      	mov	r1, r5
   19794:	3088      	adds	r0, #136	; 0x88
   19796:	f01b fece 	bl	35536 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   1979a:	2301      	movs	r3, #1
   1979c:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   1979e:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   197a0:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   197a2:	4b03      	ldr	r3, [pc, #12]	; (197b0 <bt_conn_add_le+0x34>)
   197a4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   197a8:	4620      	mov	r0, r4
   197aa:	bd70      	pop	{r4, r5, r6, pc}
   197ac:	20001240 	.word	0x20001240
   197b0:	00280018 	.word	0x00280018

000197b4 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   197b4:	b570      	push	{r4, r5, r6, lr}
   197b6:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   197b8:	480a      	ldr	r0, [pc, #40]	; (197e4 <bt_conn_lookup_addr_le+0x30>)
{
   197ba:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   197bc:	f01c fb95 	bl	35eea <bt_conn_ref>
   197c0:	4604      	mov	r4, r0

		if (!conn) {
   197c2:	b120      	cbz	r0, 197ce <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   197c4:	7883      	ldrb	r3, [r0, #2]
   197c6:	2b01      	cmp	r3, #1
   197c8:	d004      	beq.n	197d4 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   197ca:	f01c fbaa 	bl	35f22 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   197ce:	2400      	movs	r4, #0
}
   197d0:	4620      	mov	r0, r4
   197d2:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   197d4:	4632      	mov	r2, r6
   197d6:	4629      	mov	r1, r5
   197d8:	f01c fc3c 	bl	36054 <bt_conn_is_peer_addr_le>
   197dc:	2800      	cmp	r0, #0
   197de:	d1f7      	bne.n	197d0 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   197e0:	4620      	mov	r0, r4
   197e2:	e7f2      	b.n	197ca <bt_conn_lookup_addr_le+0x16>
   197e4:	20001240 	.word	0x20001240

000197e8 <bt_conn_exists_le>:
{
   197e8:	b5b0      	push	{r4, r5, r7, lr}
   197ea:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   197ec:	f7ff ffe2 	bl	197b4 <bt_conn_lookup_addr_le>
	if (conn) {
   197f0:	4604      	mov	r4, r0
   197f2:	b1f0      	cbz	r0, 19832 <bt_conn_exists_le+0x4a>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   197f4:	7b43      	ldrb	r3, [r0, #13]
	switch (state) {
   197f6:	2b08      	cmp	r3, #8
   197f8:	bf96      	itet	ls
   197fa:	4a0f      	ldrls	r2, [pc, #60]	; (19838 <bt_conn_exists_le+0x50>)
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   197fc:	4b0f      	ldrhi	r3, [pc, #60]	; (1983c <bt_conn_exists_le+0x54>)
   197fe:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   19802:	466d      	mov	r5, sp
   19804:	b08a      	sub	sp, #40	; 0x28
   19806:	466a      	mov	r2, sp
   19808:	490d      	ldr	r1, [pc, #52]	; (19840 <bt_conn_exists_le+0x58>)
   1980a:	6151      	str	r1, [r2, #20]
   1980c:	490d      	ldr	r1, [pc, #52]	; (19844 <bt_conn_exists_le+0x5c>)
   1980e:	480e      	ldr	r0, [pc, #56]	; (19848 <bt_conn_exists_le+0x60>)
   19810:	e9c2 1306 	strd	r1, r3, [r2, #24]
   19814:	f240 3301 	movw	r3, #769	; 0x301
   19818:	8413      	strh	r3, [r2, #32]
   1981a:	4b0c      	ldr	r3, [pc, #48]	; (1984c <bt_conn_exists_le+0x64>)
   1981c:	f842 3f10 	str.w	r3, [r2, #16]!
   19820:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   19824:	f01c fb2f 	bl	35e86 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   19828:	4620      	mov	r0, r4
   1982a:	46ad      	mov	sp, r5
   1982c:	f01c fb79 	bl	35f22 <bt_conn_unref>
		return true;
   19830:	2001      	movs	r0, #1
}
   19832:	46bd      	mov	sp, r7
   19834:	bdb0      	pop	{r4, r5, r7, pc}
   19836:	bf00      	nop
   19838:	00039c5c 	.word	0x00039c5c
   1983c:	0003d4a8 	.word	0x0003d4a8
   19840:	0003d502 	.word	0x0003d502
   19844:	0003d629 	.word	0x0003d629
   19848:	00039570 	.word	0x00039570
   1984c:	01000004 	.word	0x01000004

00019850 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   19850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19852:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   19854:	480e      	ldr	r0, [pc, #56]	; (19890 <bt_conn_lookup_state_le+0x40>)
{
   19856:	460e      	mov	r6, r1
   19858:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1985a:	f01c fb46 	bl	35eea <bt_conn_ref>

		if (!conn) {
   1985e:	4604      	mov	r4, r0
   19860:	b120      	cbz	r0, 1986c <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   19862:	7883      	ldrb	r3, [r0, #2]
   19864:	2b01      	cmp	r3, #1
   19866:	d003      	beq.n	19870 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   19868:	f01c fb5b 	bl	35f22 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1986c:	2400      	movs	r4, #0
   1986e:	e00d      	b.n	1988c <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   19870:	b136      	cbz	r6, 19880 <bt_conn_lookup_state_le+0x30>
   19872:	4632      	mov	r2, r6
   19874:	4629      	mov	r1, r5
   19876:	f01c fbed 	bl	36054 <bt_conn_is_peer_addr_le>
   1987a:	b908      	cbnz	r0, 19880 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   1987c:	4620      	mov	r0, r4
   1987e:	e7f3      	b.n	19868 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   19880:	7b63      	ldrb	r3, [r4, #13]
   19882:	42bb      	cmp	r3, r7
   19884:	d1fa      	bne.n	1987c <bt_conn_lookup_state_le+0x2c>
   19886:	7a23      	ldrb	r3, [r4, #8]
   19888:	42ab      	cmp	r3, r5
   1988a:	d1f7      	bne.n	1987c <bt_conn_lookup_state_le+0x2c>
}
   1988c:	4620      	mov	r0, r4
   1988e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19890:	20001240 	.word	0x20001240

00019894 <send_conn_le_param_update>:
{
   19894:	b538      	push	{r3, r4, r5, lr}
   19896:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   19898:	4608      	mov	r0, r1
{
   1989a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1989c:	f01c f87a 	bl	35994 <bt_le_conn_params_valid>
   198a0:	b348      	cbz	r0, 198f6 <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   198a2:	4b16      	ldr	r3, [pc, #88]	; (198fc <send_conn_le_param_update+0x68>)
   198a4:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   198a8:	0799      	lsls	r1, r3, #30
   198aa:	d407      	bmi.n	198bc <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   198ac:	78e3      	ldrb	r3, [r4, #3]
   198ae:	b183      	cbz	r3, 198d2 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   198b0:	4629      	mov	r1, r5
   198b2:	4620      	mov	r0, r4
}
   198b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   198b8:	f000 bada 	b.w	19e70 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   198bc:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
   198c0:	079a      	lsls	r2, r3, #30
   198c2:	d5f3      	bpl.n	198ac <send_conn_le_param_update+0x18>
   198c4:	f3bf 8f5b 	dmb	ish
   198c8:	6863      	ldr	r3, [r4, #4]
   198ca:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   198ce:	055b      	lsls	r3, r3, #21
   198d0:	d4ec      	bmi.n	198ac <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   198d2:	4629      	mov	r1, r5
   198d4:	4620      	mov	r0, r4
   198d6:	f01c fbdf 	bl	36098 <bt_conn_le_conn_update>
		if (rc == 0) {
   198da:	b958      	cbnz	r0, 198f4 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   198dc:	882b      	ldrh	r3, [r5, #0]
   198de:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   198e2:	886b      	ldrh	r3, [r5, #2]
   198e4:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   198e8:	88ab      	ldrh	r3, [r5, #4]
   198ea:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   198ee:	88eb      	ldrh	r3, [r5, #6]
   198f0:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   198f4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   198f6:	f06f 0015 	mvn.w	r0, #21
   198fa:	e7fb      	b.n	198f4 <send_conn_le_param_update+0x60>
   198fc:	20000000 	.word	0x20000000

00019900 <deferred_work>:
{
   19900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19904:	b082      	sub	sp, #8
	if (conn->state == BT_CONN_DISCONNECTED) {
   19906:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   1990a:	af00      	add	r7, sp, #0
   1990c:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   1990e:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   19912:	bb0b      	cbnz	r3, 19958 <deferred_work+0x58>
		bt_l2cap_disconnected(conn);
   19914:	4630      	mov	r0, r6
   19916:	f01c fc1c 	bl	36152 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   1991a:	4b3a      	ldr	r3, [pc, #232]	; (19a04 <deferred_work+0x104>)
   1991c:	681d      	ldr	r5, [r3, #0]
   1991e:	b95d      	cbnz	r5, 19938 <deferred_work+0x38>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19920:	4d39      	ldr	r5, [pc, #228]	; (19a08 <deferred_work+0x108>)
   19922:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 19a0c <deferred_work+0x10c>
   19926:	4545      	cmp	r5, r8
   19928:	d30e      	bcc.n	19948 <deferred_work+0x48>
		bt_conn_unref(conn);
   1992a:	4630      	mov	r0, r6
   1992c:	f01c faf9 	bl	35f22 <bt_conn_unref>
}
   19930:	3708      	adds	r7, #8
   19932:	46bd      	mov	sp, r7
   19934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cb->disconnected) {
   19938:	686b      	ldr	r3, [r5, #4]
   1993a:	b11b      	cbz	r3, 19944 <deferred_work+0x44>
			cb->disconnected(conn, conn->err);
   1993c:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   19940:	4630      	mov	r0, r6
   19942:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   19944:	69ad      	ldr	r5, [r5, #24]
   19946:	e7ea      	b.n	1991e <deferred_work+0x1e>
		if (cb->disconnected) {
   19948:	686b      	ldr	r3, [r5, #4]
   1994a:	b11b      	cbz	r3, 19954 <deferred_work+0x54>
			cb->disconnected(conn, conn->err);
   1994c:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   19950:	4630      	mov	r0, r6
   19952:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19954:	351c      	adds	r5, #28
   19956:	e7e6      	b.n	19926 <deferred_work+0x26>
	if (conn->type != BT_CONN_TYPE_LE) {
   19958:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   1995c:	2b01      	cmp	r3, #1
   1995e:	d1e7      	bne.n	19930 <deferred_work+0x30>
	if (atomic_test_and_clear_bit(conn->flags,
   19960:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19964:	f46f 7100 	mvn.w	r1, #512	; 0x200
   19968:	4628      	mov	r0, r5
   1996a:	f01c fa7d 	bl	35e68 <atomic_and>
   1996e:	0581      	lsls	r1, r0, #22
   19970:	d52c      	bpl.n	199cc <deferred_work+0xcc>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   19972:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   19974:	603b      	str	r3, [r7, #0]
   19976:	6d23      	ldr	r3, [r4, #80]	; 0x50
   19978:	607b      	str	r3, [r7, #4]
		err = send_conn_le_param_update(conn, param);
   1997a:	4639      	mov	r1, r7
   1997c:	4630      	mov	r0, r6
   1997e:	f7ff ff89 	bl	19894 <send_conn_le_param_update>
		if (!err) {
   19982:	b988      	cbnz	r0, 199a8 <deferred_work+0xa8>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19984:	f46f 7180 	mvn.w	r1, #256	; 0x100
   19988:	4628      	mov	r0, r5
   1998a:	f01c fa6d 	bl	35e68 <atomic_and>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1998e:	f3bf 8f5b 	dmb	ish
   19992:	e855 3f00 	ldrex	r3, [r5]
   19996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1999a:	e845 3200 	strex	r2, r3, [r5]
   1999e:	2a00      	cmp	r2, #0
   199a0:	d1f7      	bne.n	19992 <deferred_work+0x92>
   199a2:	f3bf 8f5b 	dmb	ish
   199a6:	e7c3      	b.n	19930 <deferred_work+0x30>
			LOG_WRN("Send LE param update failed (err %d)", err);
   199a8:	466c      	mov	r4, sp
   199aa:	b088      	sub	sp, #32
   199ac:	466a      	mov	r2, sp
   199ae:	4b18      	ldr	r3, [pc, #96]	; (19a10 <deferred_work+0x110>)
			LOG_WRN("Send auto LE param update failed (err %d)",
   199b0:	6153      	str	r3, [r2, #20]
   199b2:	4b18      	ldr	r3, [pc, #96]	; (19a14 <deferred_work+0x114>)
   199b4:	e9c2 3006 	strd	r3, r0, [r2, #24]
   199b8:	2304      	movs	r3, #4
   199ba:	f842 3f10 	str.w	r3, [r2, #16]!
   199be:	4816      	ldr	r0, [pc, #88]	; (19a18 <deferred_work+0x118>)
   199c0:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   199c4:	f01c fa5f 	bl	35e86 <z_log_msg_static_create.constprop.0>
   199c8:	46a5      	mov	sp, r4
   199ca:	e7e0      	b.n	1998e <deferred_work+0x8e>
		param = BT_LE_CONN_PARAM(
   199cc:	4a13      	ldr	r2, [pc, #76]	; (19a1c <deferred_work+0x11c>)
   199ce:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
   199d2:	e9c7 2300 	strd	r2, r3, [r7]
		err = send_conn_le_param_update(conn, param);
   199d6:	4639      	mov	r1, r7
   199d8:	4630      	mov	r0, r6
   199da:	f7ff ff5b 	bl	19894 <send_conn_le_param_update>
		if (!err) {
   199de:	b960      	cbnz	r0, 199fa <deferred_work+0xfa>
   199e0:	f3bf 8f5b 	dmb	ish
   199e4:	e855 3f00 	ldrex	r3, [r5]
   199e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   199ec:	e845 3200 	strex	r2, r3, [r5]
   199f0:	2a00      	cmp	r2, #0
   199f2:	d1f7      	bne.n	199e4 <deferred_work+0xe4>
   199f4:	f3bf 8f5b 	dmb	ish
   199f8:	e7c9      	b.n	1998e <deferred_work+0x8e>
			LOG_WRN("Send auto LE param update failed (err %d)",
   199fa:	466c      	mov	r4, sp
   199fc:	b088      	sub	sp, #32
   199fe:	466a      	mov	r2, sp
   19a00:	4b07      	ldr	r3, [pc, #28]	; (19a20 <deferred_work+0x120>)
   19a02:	e7d5      	b.n	199b0 <deferred_work+0xb0>
   19a04:	20001b6c 	.word	0x20001b6c
   19a08:	000394fc 	.word	0x000394fc
   19a0c:	00039518 	.word	0x00039518
   19a10:	0003d529 	.word	0x0003d529
   19a14:	0003d691 	.word	0x0003d691
   19a18:	00039570 	.word	0x00039570
   19a1c:	00280018 	.word	0x00280018
   19a20:	0003d552 	.word	0x0003d552

00019a24 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   19a24:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   19a26:	4801      	ldr	r0, [pc, #4]	; (19a2c <bt_conn_create_frag_timeout+0x8>)
   19a28:	f7ff bdb2 	b.w	19590 <bt_conn_create_pdu_timeout>
   19a2c:	20000b80 	.word	0x20000b80

00019a30 <bt_conn_process_tx>:
{
   19a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   19a34:	7b43      	ldrb	r3, [r0, #13]
{
   19a36:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   19a38:	b95b      	cbnz	r3, 19a52 <bt_conn_process_tx+0x22>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19a3a:	f06f 0140 	mvn.w	r1, #64	; 0x40
   19a3e:	3004      	adds	r0, #4
   19a40:	f01c fa12 	bl	35e68 <atomic_and>
   19a44:	0643      	lsls	r3, r0, #25
   19a46:	d504      	bpl.n	19a52 <bt_conn_process_tx+0x22>
		conn_cleanup(conn);
   19a48:	4628      	mov	r0, r5
}
   19a4a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		conn_cleanup(conn);
   19a4e:	f01c ba29 	b.w	35ea4 <conn_cleanup>
	return z_impl_k_queue_peek_head(queue);
   19a52:	f105 0038 	add.w	r0, r5, #56	; 0x38
   19a56:	f01e ff30 	bl	388ba <z_impl_k_queue_peek_head>
	BT_ASSERT(buf);
   19a5a:	4604      	mov	r4, r0
   19a5c:	b960      	cbnz	r0, 19a78 <bt_conn_process_tx+0x48>
   19a5e:	4a34      	ldr	r2, [pc, #208]	; (19b30 <bt_conn_process_tx+0x100>)
   19a60:	4934      	ldr	r1, [pc, #208]	; (19b34 <bt_conn_process_tx+0x104>)
   19a62:	4835      	ldr	r0, [pc, #212]	; (19b38 <bt_conn_process_tx+0x108>)
   19a64:	f240 335b 	movw	r3, #859	; 0x35b
   19a68:	f019 fcd6 	bl	33418 <assert_print>
   19a6c:	4040      	eors	r0, r0
   19a6e:	f380 8811 	msr	BASEPRI, r0
   19a72:	f04f 0003 	mov.w	r0, #3
   19a76:	df02      	svc	2
	buf = net_buf_ref(buf);
   19a78:	4620      	mov	r0, r4
   19a7a:	f01d ffc7 	bl	37a0c <net_buf_ref>
	return bt_dev.le.acl_mtu;
   19a7e:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 19b3c <bt_conn_process_tx+0x10c>
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
   19a82:	8a02      	ldrh	r2, [r0, #16]
   19a84:	f8b9 30fc 	ldrh.w	r3, [r9, #252]	; 0xfc
   19a88:	429a      	cmp	r2, r3
	buf = net_buf_ref(buf);
   19a8a:	4604      	mov	r4, r0
	return bt_dev.le.acl_mtu;
   19a8c:	7f02      	ldrb	r2, [r0, #28]
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
   19a8e:	d807      	bhi.n	19aa0 <bt_conn_process_tx+0x70>
   19a90:	b932      	cbnz	r2, 19aa0 <bt_conn_process_tx+0x70>
		return send_frag(conn, buf, NULL, FRAG_SINGLE);
   19a92:	2302      	movs	r3, #2
	return send_frag(conn, buf, NULL, FRAG_END);
   19a94:	4621      	mov	r1, r4
   19a96:	4628      	mov	r0, r5
   19a98:	f7ff f9ce 	bl	18e38 <send_frag>
   19a9c:	4606      	mov	r6, r0
   19a9e:	e030      	b.n	19b02 <bt_conn_process_tx+0xd2>
	if (tx_data(buf)->is_cont) {
   19aa0:	4617      	mov	r7, r2
		frag = bt_conn_create_frag(0);
   19aa2:	f04f 0a00 	mov.w	sl, #0
	while (buf->len > conn_mtu(conn)) {
   19aa6:	8a22      	ldrh	r2, [r4, #16]
   19aa8:	f8b9 30fc 	ldrh.w	r3, [r9, #252]	; 0xfc
   19aac:	429a      	cmp	r2, r3
   19aae:	d804      	bhi.n	19aba <bt_conn_process_tx+0x8a>
	tx_data(buf)->is_cont = true;
   19ab0:	2301      	movs	r3, #1
   19ab2:	7723      	strb	r3, [r4, #28]
	return send_frag(conn, buf, NULL, FRAG_END);
   19ab4:	2200      	movs	r2, #0
   19ab6:	2303      	movs	r3, #3
   19ab8:	e7ec      	b.n	19a94 <bt_conn_process_tx+0x64>
		frag = bt_conn_create_frag(0);
   19aba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19abe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19ac2:	2000      	movs	r0, #0
   19ac4:	f7ff ffae 	bl	19a24 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   19ac8:	7b6b      	ldrb	r3, [r5, #13]
   19aca:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   19acc:	4680      	mov	r8, r0
	if (conn->state != BT_CONN_CONNECTED) {
   19ace:	d006      	beq.n	19ade <bt_conn_process_tx+0xae>
		net_buf_unref(frag);
   19ad0:	f013 fec6 	bl	2d860 <net_buf_unref>
	net_buf_unref(buf);
   19ad4:	4620      	mov	r0, r4
}
   19ad6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	net_buf_unref(buf);
   19ada:	f013 bec1 	b.w	2d860 <net_buf_unref>
	tx_data(frag)->tx = NULL;
   19ade:	f8c0 a018 	str.w	sl, [r0, #24]
	tx_data(frag)->is_cont = false;
   19ae2:	f880 a01c 	strb.w	sl, [r0, #28]
		err = send_frag(conn, buf, frag, flags);
   19ae6:	4602      	mov	r2, r0
   19ae8:	463b      	mov	r3, r7
   19aea:	4621      	mov	r1, r4
   19aec:	4628      	mov	r0, r5
   19aee:	f7ff f9a3 	bl	18e38 <send_frag>
		if (err) {
   19af2:	4606      	mov	r6, r0
   19af4:	b1b8      	cbz	r0, 19b26 <bt_conn_process_tx+0xf6>
			tx_data(buf)->is_cont = flags != FRAG_START;
   19af6:	f007 0701 	and.w	r7, r7, #1
   19afa:	7727      	strb	r7, [r4, #28]
			net_buf_unref(frag);
   19afc:	4640      	mov	r0, r8
   19afe:	f013 feaf 	bl	2d860 <net_buf_unref>
	net_buf_unref(buf);
   19b02:	4620      	mov	r0, r4
   19b04:	f013 feac 	bl	2d860 <net_buf_unref>
	if (err  == -EIO) {
   19b08:	3605      	adds	r6, #5
   19b0a:	d10e      	bne.n	19b2a <bt_conn_process_tx+0xfa>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   19b0c:	69a6      	ldr	r6, [r4, #24]
		tx_data(buf)->tx = NULL;
   19b0e:	2300      	movs	r3, #0
   19b10:	61a3      	str	r3, [r4, #24]
		net_buf_unref(buf);
   19b12:	4620      	mov	r0, r4
   19b14:	f013 fea4 	bl	2d860 <net_buf_unref>
		if (tx) {
   19b18:	b13e      	cbz	r6, 19b2a <bt_conn_process_tx+0xfa>
			conn_tx_destroy(conn, tx);
   19b1a:	4631      	mov	r1, r6
   19b1c:	4628      	mov	r0, r5
}
   19b1e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			conn_tx_destroy(conn, tx);
   19b22:	f7ff b973 	b.w	18e0c <conn_tx_destroy>
		flags = FRAG_CONT;
   19b26:	2701      	movs	r7, #1
   19b28:	e7bd      	b.n	19aa6 <bt_conn_process_tx+0x76>
}
   19b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19b2e:	bf00      	nop
   19b30:	0003d580 	.word	0x0003d580
   19b34:	0003e8ba 	.word	0x0003e8ba
   19b38:	0003c56e 	.word	0x0003c56e
   19b3c:	20000000 	.word	0x20000000

00019b40 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   19b40:	4b0b      	ldr	r3, [pc, #44]	; (19b70 <bt_conn_auth_cb_register+0x30>)
   19b42:	b158      	cbz	r0, 19b5c <bt_conn_auth_cb_register+0x1c>
		bt_auth = NULL;
		return 0;
	}

	if (bt_auth) {
   19b44:	681a      	ldr	r2, [r3, #0]
   19b46:	b962      	cbnz	r2, 19b62 <bt_conn_auth_cb_register+0x22>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   19b48:	6902      	ldr	r2, [r0, #16]
   19b4a:	b93a      	cbnz	r2, 19b5c <bt_conn_auth_cb_register+0x1c>
   19b4c:	6802      	ldr	r2, [r0, #0]
   19b4e:	b95a      	cbnz	r2, 19b68 <bt_conn_auth_cb_register+0x28>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   19b50:	6842      	ldr	r2, [r0, #4]
   19b52:	b94a      	cbnz	r2, 19b68 <bt_conn_auth_cb_register+0x28>
   19b54:	6882      	ldr	r2, [r0, #8]
   19b56:	b93a      	cbnz	r2, 19b68 <bt_conn_auth_cb_register+0x28>
   19b58:	6942      	ldr	r2, [r0, #20]
   19b5a:	b92a      	cbnz	r2, 19b68 <bt_conn_auth_cb_register+0x28>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   19b5c:	6018      	str	r0, [r3, #0]
		return 0;
   19b5e:	2000      	movs	r0, #0
   19b60:	4770      	bx	lr
		return -EALREADY;
   19b62:	f06f 0077 	mvn.w	r0, #119	; 0x77
   19b66:	4770      	bx	lr
		return -EINVAL;
   19b68:	f06f 0015 	mvn.w	r0, #21
	return 0;
}
   19b6c:	4770      	bx	lr
   19b6e:	bf00      	nop
   19b70:	20001b78 	.word	0x20001b78

00019b74 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   19b74:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   19b76:	480c      	ldr	r0, [pc, #48]	; (19ba8 <bt_conn_init+0x34>)
   19b78:	f01e fe5e 	bl	38838 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   19b7c:	490b      	ldr	r1, [pc, #44]	; (19bac <bt_conn_init+0x38>)
   19b7e:	480a      	ldr	r0, [pc, #40]	; (19ba8 <bt_conn_init+0x34>)
   19b80:	f01e fe86 	bl	38890 <k_queue_append>
   19b84:	490a      	ldr	r1, [pc, #40]	; (19bb0 <bt_conn_init+0x3c>)
   19b86:	4808      	ldr	r0, [pc, #32]	; (19ba8 <bt_conn_init+0x34>)
   19b88:	f01e fe82 	bl	38890 <k_queue_append>
   19b8c:	4909      	ldr	r1, [pc, #36]	; (19bb4 <bt_conn_init+0x40>)
   19b8e:	4806      	ldr	r0, [pc, #24]	; (19ba8 <bt_conn_init+0x34>)
   19b90:	f01e fe7e 	bl	38890 <k_queue_append>
	}

	bt_att_init();
   19b94:	f001 faa2 	bl	1b0dc <bt_att_init>

	err = bt_smp_init();
   19b98:	f005 f876 	bl	1ec88 <bt_smp_init>
	if (err) {
   19b9c:	4604      	mov	r4, r0
   19b9e:	b908      	cbnz	r0, 19ba4 <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
   19ba0:	f01c fb3c 	bl	3621c <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   19ba4:	4620      	mov	r0, r4
   19ba6:	bd10      	pop	{r4, pc}
   19ba8:	20000b10 	.word	0x20000b10
   19bac:	20001b3c 	.word	0x20001b3c
   19bb0:	20001b4c 	.word	0x20001b4c
   19bb4:	20001b5c 	.word	0x20001b5c

00019bb8 <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   19bb8:	b580      	push	{r7, lr}
   19bba:	af00      	add	r7, sp, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   19bbc:	b088      	sub	sp, #32
   19bbe:	466a      	mov	r2, sp
   19bc0:	4b07      	ldr	r3, [pc, #28]	; (19be0 <l2cap_create_le_sig_pdu.part.0+0x28>)
   19bc2:	6153      	str	r3, [r2, #20]
   19bc4:	4b07      	ldr	r3, [pc, #28]	; (19be4 <l2cap_create_le_sig_pdu.part.0+0x2c>)
   19bc6:	e9c2 3006 	strd	r3, r0, [r2, #24]
   19bca:	2304      	movs	r3, #4
   19bcc:	f842 3f10 	str.w	r3, [r2, #16]!
   19bd0:	4805      	ldr	r0, [pc, #20]	; (19be8 <l2cap_create_le_sig_pdu.part.0+0x30>)
   19bd2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   19bd6:	f01c fa88 	bl	360ea <z_log_msg_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
   19bda:	2000      	movs	r0, #0
   19bdc:	46bd      	mov	sp, r7
   19bde:	bd80      	pop	{r7, pc}
   19be0:	0003d69f 	.word	0x0003d69f
   19be4:	0003d839 	.word	0x0003d839
   19be8:	000395e0 	.word	0x000395e0

00019bec <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   19bec:	b580      	push	{r7, lr}
   19bee:	af00      	add	r7, sp, #0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);
   19bf0:	b088      	sub	sp, #32
   19bf2:	466a      	mov	r2, sp
   19bf4:	4b08      	ldr	r3, [pc, #32]	; (19c18 <l2cap_accept.part.0+0x2c>)
   19bf6:	6153      	str	r3, [r2, #20]
   19bf8:	4b08      	ldr	r3, [pc, #32]	; (19c1c <l2cap_accept.part.0+0x30>)
   19bfa:	e9c2 3006 	strd	r3, r0, [r2, #24]
   19bfe:	2304      	movs	r3, #4
   19c00:	f842 3f10 	str.w	r3, [r2, #16]!
   19c04:	4806      	ldr	r0, [pc, #24]	; (19c20 <l2cap_accept.part.0+0x34>)
   19c06:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   19c0a:	f01c fa6e 	bl	360ea <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   19c0e:	f06f 000b 	mvn.w	r0, #11
   19c12:	46bd      	mov	sp, r7
   19c14:	bd80      	pop	{r7, pc}
   19c16:	bf00      	nop
   19c18:	0003d6cb 	.word	0x0003d6cb
   19c1c:	0003d82c 	.word	0x0003d82c
   19c20:	000395e0 	.word	0x000395e0

00019c24 <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
   19c24:	4b04      	ldr	r3, [pc, #16]	; (19c38 <l2cap_accept+0x14>)
   19c26:	681a      	ldr	r2, [r3, #0]
   19c28:	b10a      	cbz	r2, 19c2e <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   19c2a:	f7ff bfdf 	b.w	19bec <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
   19c2e:	4803      	ldr	r0, [pc, #12]	; (19c3c <l2cap_accept+0x18>)
   19c30:	6058      	str	r0, [r3, #4]
		*chan = &l2cap->chan.chan;
   19c32:	600b      	str	r3, [r1, #0]
}
   19c34:	4610      	mov	r0, r2
   19c36:	4770      	bx	lr
   19c38:	20001b7c 	.word	0x20001b7c
   19c3c:	00039ca0 	.word	0x00039ca0

00019c40 <bt_l2cap_connected>:
{
   19c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   19c42:	4d24      	ldr	r5, [pc, #144]	; (19cd4 <bt_l2cap_connected+0x94>)
   19c44:	4f24      	ldr	r7, [pc, #144]	; (19cd8 <bt_l2cap_connected+0x98>)
{
   19c46:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   19c48:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   19c4a:	42bd      	cmp	r5, r7
   19c4c:	d301      	bcc.n	19c52 <bt_l2cap_connected+0x12>
}
   19c4e:	b003      	add	sp, #12
   19c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
   19c52:	686b      	ldr	r3, [r5, #4]
   19c54:	a901      	add	r1, sp, #4
   19c56:	4620      	mov	r0, r4
   19c58:	4798      	blx	r3
   19c5a:	2800      	cmp	r0, #0
   19c5c:	db34      	blt.n	19cc8 <bt_l2cap_connected+0x88>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   19c5e:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   19c60:	882a      	ldrh	r2, [r5, #0]
   19c62:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   19c64:	849a      	strh	r2, [r3, #36]	; 0x24
   19c66:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   19c6a:	68a8      	ldr	r0, [r5, #8]
   19c6c:	f3bf 8f5b 	dmb	ish
   19c70:	e852 1f00 	ldrex	r1, [r2]
   19c74:	e842 6c00 	strex	ip, r6, [r2]
   19c78:	f1bc 0f00 	cmp.w	ip, #0
   19c7c:	d1f8      	bne.n	19c70 <bt_l2cap_connected+0x30>
   19c7e:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   19c82:	609e      	str	r6, [r3, #8]
	return list->tail;
   19c84:	6d61      	ldr	r1, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   19c86:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   19c8a:	b9f9      	cbnz	r1, 19ccc <bt_l2cap_connected+0x8c>
	list->head = node;
   19c8c:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
	chan->conn = conn;
   19c90:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   19c92:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   19c94:	9801      	ldr	r0, [sp, #4]
   19c96:	6843      	ldr	r3, [r0, #4]
   19c98:	681b      	ldr	r3, [r3, #0]
   19c9a:	b103      	cbz	r3, 19c9e <bt_l2cap_connected+0x5e>
			chan->ops->connected(chan);
   19c9c:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19c9e:	9b01      	ldr	r3, [sp, #4]
   19ca0:	f3bf 8f5b 	dmb	ish
   19ca4:	3310      	adds	r3, #16
   19ca6:	e853 1f00 	ldrex	r1, [r3]
   19caa:	f041 0101 	orr.w	r1, r1, #1
   19cae:	e843 1200 	strex	r2, r1, [r3]
   19cb2:	2a00      	cmp	r2, #0
   19cb4:	d1f7      	bne.n	19ca6 <bt_l2cap_connected+0x66>
   19cb6:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   19cba:	9801      	ldr	r0, [sp, #4]
   19cbc:	6843      	ldr	r3, [r0, #4]
   19cbe:	69db      	ldr	r3, [r3, #28]
   19cc0:	b113      	cbz	r3, 19cc8 <bt_l2cap_connected+0x88>
			chan->ops->status(chan, chan->status);
   19cc2:	f100 0110 	add.w	r1, r0, #16
   19cc6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   19cc8:	350c      	adds	r5, #12
   19cca:	e7be      	b.n	19c4a <bt_l2cap_connected+0xa>
	parent->next = child;
   19ccc:	600a      	str	r2, [r1, #0]
	list->tail = node;
   19cce:	6562      	str	r2, [r4, #84]	; 0x54
}
   19cd0:	e7de      	b.n	19c90 <bt_l2cap_connected+0x50>
   19cd2:	bf00      	nop
   19cd4:	000394d8 	.word	0x000394d8
   19cd8:	000394fc 	.word	0x000394fc

00019cdc <l2cap_recv>:
{
   19cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   19cde:	b083      	sub	sp, #12
	if (buf->len < sizeof(*hdr)) {
   19ce0:	8a0b      	ldrh	r3, [r1, #16]
   19ce2:	2b03      	cmp	r3, #3
{
   19ce4:	af02      	add	r7, sp, #8
   19ce6:	4606      	mov	r6, r0
   19ce8:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   19cea:	d80c      	bhi.n	19d06 <l2cap_recv+0x2a>
		LOG_ERR("Too small L2CAP signaling PDU");
   19cec:	466c      	mov	r4, sp
   19cee:	b088      	sub	sp, #32
   19cf0:	aa02      	add	r2, sp, #8
   19cf2:	4b36      	ldr	r3, [pc, #216]	; (19dcc <l2cap_recv+0xf0>)
		LOG_ERR("Invalid ident value in L2CAP PDU");
   19cf4:	6153      	str	r3, [r2, #20]
   19cf6:	4b36      	ldr	r3, [pc, #216]	; (19dd0 <l2cap_recv+0xf4>)
		LOG_ERR("Too small LE conn param rsp");
   19cf8:	6193      	str	r3, [r2, #24]
   19cfa:	2303      	movs	r3, #3
   19cfc:	f842 3f10 	str.w	r3, [r2, #16]!
   19d00:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19d04:	e017      	b.n	19d36 <l2cap_recv+0x5a>
	return net_buf_simple_pull_mem(&buf->b, len);
   19d06:	2104      	movs	r1, #4
   19d08:	f105 000c 	add.w	r0, r5, #12
   19d0c:	f01d fed7 	bl	37abe <net_buf_simple_pull_mem>
	if (buf->len != len) {
   19d10:	8a29      	ldrh	r1, [r5, #16]
	len = sys_le16_to_cpu(hdr->len);
   19d12:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
   19d14:	4299      	cmp	r1, r3
   19d16:	4604      	mov	r4, r0
   19d18:	d015      	beq.n	19d46 <l2cap_recv+0x6a>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   19d1a:	466c      	mov	r4, sp
   19d1c:	b08a      	sub	sp, #40	; 0x28
   19d1e:	aa02      	add	r2, sp, #8
   19d20:	482c      	ldr	r0, [pc, #176]	; (19dd4 <l2cap_recv+0xf8>)
   19d22:	6150      	str	r0, [r2, #20]
   19d24:	482a      	ldr	r0, [pc, #168]	; (19dd0 <l2cap_recv+0xf4>)
   19d26:	6213      	str	r3, [r2, #32]
   19d28:	2305      	movs	r3, #5
   19d2a:	e9c2 0106 	strd	r0, r1, [r2, #24]
   19d2e:	f842 3f10 	str.w	r3, [r2, #16]!
   19d32:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   19d36:	4828      	ldr	r0, [pc, #160]	; (19dd8 <l2cap_recv+0xfc>)
   19d38:	f01c f9d7 	bl	360ea <z_log_msg_static_create.constprop.0>
   19d3c:	46a5      	mov	sp, r4
}
   19d3e:	2000      	movs	r0, #0
   19d40:	3704      	adds	r7, #4
   19d42:	46bd      	mov	sp, r7
   19d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   19d46:	7843      	ldrb	r3, [r0, #1]
   19d48:	b923      	cbnz	r3, 19d54 <l2cap_recv+0x78>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   19d4a:	466c      	mov	r4, sp
   19d4c:	b088      	sub	sp, #32
   19d4e:	aa02      	add	r2, sp, #8
   19d50:	4b22      	ldr	r3, [pc, #136]	; (19ddc <l2cap_recv+0x100>)
   19d52:	e7cf      	b.n	19cf4 <l2cap_recv+0x18>
	switch (hdr->code) {
   19d54:	7803      	ldrb	r3, [r0, #0]
   19d56:	2b01      	cmp	r3, #1
   19d58:	d0f1      	beq.n	19d3e <l2cap_recv+0x62>
   19d5a:	2b13      	cmp	r3, #19
   19d5c:	d108      	bne.n	19d70 <l2cap_recv+0x94>
	if (buf->len < sizeof(*rsp)) {
   19d5e:	2901      	cmp	r1, #1
   19d60:	d8ed      	bhi.n	19d3e <l2cap_recv+0x62>
		LOG_ERR("Too small LE conn param rsp");
   19d62:	466c      	mov	r4, sp
   19d64:	b088      	sub	sp, #32
   19d66:	aa02      	add	r2, sp, #8
   19d68:	4b1d      	ldr	r3, [pc, #116]	; (19de0 <l2cap_recv+0x104>)
   19d6a:	6153      	str	r3, [r2, #20]
   19d6c:	4b1d      	ldr	r3, [pc, #116]	; (19de4 <l2cap_recv+0x108>)
   19d6e:	e7c3      	b.n	19cf8 <l2cap_recv+0x1c>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   19d70:	466d      	mov	r5, sp
   19d72:	b088      	sub	sp, #32
   19d74:	aa02      	add	r2, sp, #8
   19d76:	491c      	ldr	r1, [pc, #112]	; (19de8 <l2cap_recv+0x10c>)
   19d78:	6151      	str	r1, [r2, #20]
   19d7a:	4915      	ldr	r1, [pc, #84]	; (19dd0 <l2cap_recv+0xf4>)
   19d7c:	4816      	ldr	r0, [pc, #88]	; (19dd8 <l2cap_recv+0xfc>)
	switch (hdr->code) {
   19d7e:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   19d82:	2304      	movs	r3, #4
   19d84:	f842 3f10 	str.w	r3, [r2, #16]!
   19d88:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   19d8c:	f01c f9ad 	bl	360ea <z_log_msg_static_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   19d90:	2202      	movs	r2, #2
   19d92:	7861      	ldrb	r1, [r4, #1]
   19d94:	46ad      	mov	sp, r5
   19d96:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   19d98:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   19d9a:	f01c f9a9 	bl	360f0 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   19d9e:	4604      	mov	r4, r0
   19da0:	2800      	cmp	r0, #0
   19da2:	d0cc      	beq.n	19d3e <l2cap_recv+0x62>
	return net_buf_simple_add(&buf->b, len);
   19da4:	2102      	movs	r1, #2
   19da6:	300c      	adds	r0, #12
   19da8:	f01d fe62 	bl	37a70 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   19dac:	2300      	movs	r3, #0
   19dae:	7003      	strb	r3, [r0, #0]
   19db0:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   19db2:	4622      	mov	r2, r4
   19db4:	9300      	str	r3, [sp, #0]
   19db6:	2105      	movs	r1, #5
   19db8:	4628      	mov	r0, r5
   19dba:	f01c fa02 	bl	361c2 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   19dbe:	2800      	cmp	r0, #0
   19dc0:	d0bd      	beq.n	19d3e <l2cap_recv+0x62>
		net_buf_unref(buf);
   19dc2:	4620      	mov	r0, r4
   19dc4:	f013 fd4c 	bl	2d860 <net_buf_unref>
   19dc8:	e7b9      	b.n	19d3e <l2cap_recv+0x62>
   19dca:	bf00      	nop
   19dcc:	0003d6f6 	.word	0x0003d6f6
   19dd0:	0003d821 	.word	0x0003d821
   19dd4:	0003d718 	.word	0x0003d718
   19dd8:	000395e0 	.word	0x000395e0
   19ddc:	0003d73d 	.word	0x0003d73d
   19de0:	0003d762 	.word	0x0003d762
   19de4:	0003d80f 	.word	0x0003d80f
   19de8:	0003d782 	.word	0x0003d782

00019dec <bt_l2cap_recv>:
{
   19dec:	b5b0      	push	{r4, r5, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   19dee:	8a0b      	ldrh	r3, [r1, #16]
   19df0:	2b03      	cmp	r3, #3
{
   19df2:	af00      	add	r7, sp, #0
   19df4:	4605      	mov	r5, r0
   19df6:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   19df8:	d814      	bhi.n	19e24 <bt_l2cap_recv+0x38>
		LOG_ERR("Too small L2CAP PDU received");
   19dfa:	466d      	mov	r5, sp
   19dfc:	b088      	sub	sp, #32
   19dfe:	466a      	mov	r2, sp
   19e00:	4b17      	ldr	r3, [pc, #92]	; (19e60 <bt_l2cap_recv+0x74>)
   19e02:	6153      	str	r3, [r2, #20]
   19e04:	4b17      	ldr	r3, [pc, #92]	; (19e64 <bt_l2cap_recv+0x78>)
   19e06:	6193      	str	r3, [r2, #24]
   19e08:	2303      	movs	r3, #3
   19e0a:	f842 3f10 	str.w	r3, [r2, #16]!
   19e0e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   19e12:	4815      	ldr	r0, [pc, #84]	; (19e68 <bt_l2cap_recv+0x7c>)
   19e14:	f01c f969 	bl	360ea <z_log_msg_static_create.constprop.0>
   19e18:	46ad      	mov	sp, r5
	net_buf_unref(buf);
   19e1a:	4620      	mov	r0, r4
   19e1c:	f013 fd20 	bl	2d860 <net_buf_unref>
}
   19e20:	46bd      	mov	sp, r7
   19e22:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   19e24:	2104      	movs	r1, #4
   19e26:	f104 000c 	add.w	r0, r4, #12
   19e2a:	f01d fe48 	bl	37abe <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   19e2e:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   19e30:	4628      	mov	r0, r5
   19e32:	f01c f9e9 	bl	36208 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   19e36:	b968      	cbnz	r0, 19e54 <bt_l2cap_recv+0x68>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   19e38:	466d      	mov	r5, sp
   19e3a:	b088      	sub	sp, #32
   19e3c:	466a      	mov	r2, sp
   19e3e:	4b0b      	ldr	r3, [pc, #44]	; (19e6c <bt_l2cap_recv+0x80>)
   19e40:	6153      	str	r3, [r2, #20]
   19e42:	4b08      	ldr	r3, [pc, #32]	; (19e64 <bt_l2cap_recv+0x78>)
   19e44:	e9c2 3106 	strd	r3, r1, [r2, #24]
   19e48:	2304      	movs	r3, #4
   19e4a:	f842 3f10 	str.w	r3, [r2, #16]!
   19e4e:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   19e52:	e7de      	b.n	19e12 <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   19e54:	6843      	ldr	r3, [r0, #4]
   19e56:	4621      	mov	r1, r4
   19e58:	695b      	ldr	r3, [r3, #20]
   19e5a:	4798      	blx	r3
   19e5c:	e7dd      	b.n	19e1a <bt_l2cap_recv+0x2e>
   19e5e:	bf00      	nop
   19e60:	0003d7ae 	.word	0x0003d7ae
   19e64:	0003d851 	.word	0x0003d851
   19e68:	000395e0 	.word	0x000395e0
   19e6c:	0003d7cf 	.word	0x0003d7cf

00019e70 <bt_l2cap_update_conn_param>:
{
   19e70:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   19e72:	4b17      	ldr	r3, [pc, #92]	; (19ed0 <bt_l2cap_update_conn_param+0x60>)
{
   19e74:	460e      	mov	r6, r1
	ident++;
   19e76:	7819      	ldrb	r1, [r3, #0]
   19e78:	3101      	adds	r1, #1
   19e7a:	b2c9      	uxtb	r1, r1
   19e7c:	2901      	cmp	r1, #1
   19e7e:	bf38      	it	cc
   19e80:	2101      	movcc	r1, #1
{
   19e82:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   19e84:	2208      	movs	r2, #8
   19e86:	2012      	movs	r0, #18
	ident++;
   19e88:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   19e8a:	f01c f931 	bl	360f0 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   19e8e:	4604      	mov	r4, r0
   19e90:	b1d0      	cbz	r0, 19ec8 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   19e92:	2108      	movs	r1, #8
   19e94:	300c      	adds	r0, #12
   19e96:	f01d fdeb 	bl	37a70 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   19e9a:	8833      	ldrh	r3, [r6, #0]
   19e9c:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   19e9e:	8873      	ldrh	r3, [r6, #2]
   19ea0:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   19ea2:	88b3      	ldrh	r3, [r6, #4]
   19ea4:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   19ea6:	88f3      	ldrh	r3, [r6, #6]
   19ea8:	80c3      	strh	r3, [r0, #6]
   19eaa:	2300      	movs	r3, #0
   19eac:	4628      	mov	r0, r5
   19eae:	9300      	str	r3, [sp, #0]
   19eb0:	4622      	mov	r2, r4
   19eb2:	2105      	movs	r1, #5
   19eb4:	f01c f985 	bl	361c2 <bt_l2cap_send_cb>
	if (err) {
   19eb8:	4605      	mov	r5, r0
   19eba:	b110      	cbz	r0, 19ec2 <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   19ebc:	4620      	mov	r0, r4
   19ebe:	f013 fccf 	bl	2d860 <net_buf_unref>
}
   19ec2:	4628      	mov	r0, r5
   19ec4:	b002      	add	sp, #8
   19ec6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   19ec8:	f06f 050b 	mvn.w	r5, #11
   19ecc:	e7f9      	b.n	19ec2 <bt_l2cap_update_conn_param+0x52>
   19ece:	bf00      	nop
   19ed0:	200033e5 	.word	0x200033e5

00019ed4 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   19ed4:	2823      	cmp	r0, #35	; 0x23
   19ed6:	d81f      	bhi.n	19f18 <att_op_get_type+0x44>
   19ed8:	281a      	cmp	r0, #26
   19eda:	d804      	bhi.n	19ee6 <att_op_get_type+0x12>
   19edc:	1e43      	subs	r3, r0, #1
   19ede:	2b18      	cmp	r3, #24
   19ee0:	d90e      	bls.n	19f00 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   19ee2:	2006      	movs	r0, #6
   19ee4:	4770      	bx	lr
	switch (op) {
   19ee6:	f1a0 031b 	sub.w	r3, r0, #27
   19eea:	2b08      	cmp	r3, #8
   19eec:	d81e      	bhi.n	19f2c <att_op_get_type+0x58>
   19eee:	e8df f003 	tbb	[pc, r3]
   19ef2:	1d05      	.short	0x1d05
   19ef4:	191d231b 	.word	0x191d231b
   19ef8:	1d25      	.short	0x1d25
   19efa:	05          	.byte	0x05
   19efb:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   19efc:	2003      	movs	r0, #3
   19efe:	4770      	bx	lr
	switch (op) {
   19f00:	4a0f      	ldr	r2, [pc, #60]	; (19f40 <att_op_get_type+0x6c>)
   19f02:	2301      	movs	r3, #1
   19f04:	4083      	lsls	r3, r0
   19f06:	401a      	ands	r2, r3
   19f08:	b9c2      	cbnz	r2, 19f3c <att_op_get_type+0x68>
   19f0a:	4a0e      	ldr	r2, [pc, #56]	; (19f44 <att_op_get_type+0x70>)
   19f0c:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   19f0e:	2a00      	cmp	r2, #0
   19f10:	bf14      	ite	ne
   19f12:	2001      	movne	r0, #1
   19f14:	2006      	moveq	r0, #6
   19f16:	4770      	bx	lr
	switch (op) {
   19f18:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   19f1c:	2b52      	cmp	r3, #82	; 0x52
   19f1e:	d105      	bne.n	19f2c <att_op_get_type+0x58>
		return ATT_COMMAND;
   19f20:	2000      	movs	r0, #0
}
   19f22:	4770      	bx	lr
		return ATT_REQUEST;
   19f24:	2001      	movs	r0, #1
   19f26:	4770      	bx	lr
		return ATT_INDICATION;
   19f28:	2005      	movs	r0, #5
   19f2a:	4770      	bx	lr
		return ATT_COMMAND;
   19f2c:	f010 0f40 	tst.w	r0, #64	; 0x40
   19f30:	bf0c      	ite	eq
   19f32:	2006      	moveq	r0, #6
   19f34:	2000      	movne	r0, #0
   19f36:	4770      	bx	lr
	switch (op) {
   19f38:	2004      	movs	r0, #4
   19f3a:	4770      	bx	lr
		return ATT_RESPONSE;
   19f3c:	2002      	movs	r0, #2
   19f3e:	4770      	bx	lr
   19f40:	028aaaaa 	.word	0x028aaaaa
   19f44:	01455554 	.word	0x01455554

00019f48 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   19f48:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   19f4a:	3804      	subs	r0, #4
   19f4c:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   19f4e:	a901      	add	r1, sp, #4
   19f50:	4802      	ldr	r0, [pc, #8]	; (19f5c <bt_att_released+0x14>)
   19f52:	f01e fbb3 	bl	386bc <k_mem_slab_free>
}
   19f56:	b003      	add	sp, #12
   19f58:	f85d fb04 	ldr.w	pc, [sp], #4
   19f5c:	20000a7c 	.word	0x20000a7c

00019f60 <tx_meta_data_free>:
{
   19f60:	b510      	push	{r4, lr}
	(void)memset(data, 0, sizeof(*data));
   19f62:	2100      	movs	r1, #0
{
   19f64:	4604      	mov	r4, r0
	(void)memset(data, 0, sizeof(*data));
   19f66:	2214      	movs	r2, #20
   19f68:	f01b faf0 	bl	3554c <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   19f6c:	4621      	mov	r1, r4
   19f6e:	4802      	ldr	r0, [pc, #8]	; (19f78 <tx_meta_data_free+0x18>)
}
   19f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   19f74:	f01e bc8c 	b.w	38890 <k_queue_append>
   19f78:	20000af8 	.word	0x20000af8

00019f7c <find_type_cb>:
{
   19f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f80:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   19f82:	f8d2 a000 	ldr.w	sl, [r2]
{
   19f86:	af02      	add	r7, sp, #8
	struct bt_conn *conn = chan->chan.chan.conn;
   19f88:	f8da 3004 	ldr.w	r3, [sl, #4]
   19f8c:	607b      	str	r3, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   19f8e:	2500      	movs	r5, #0
   19f90:	f642 0301 	movw	r3, #10241	; 0x2801
{
   19f94:	4680      	mov	r8, r0
   19f96:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   19f98:	6800      	ldr	r0, [r0, #0]
   19f9a:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   19f9e:	85fb      	strh	r3, [r7, #46]	; 0x2e
   19fa0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
   19fa4:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   19fa6:	f01b fbbe 	bl	35726 <bt_uuid_cmp>
   19faa:	2800      	cmp	r0, #0
   19fac:	d072      	beq.n	1a094 <find_type_cb+0x118>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   19fae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   19fb2:	f8d8 0000 	ldr.w	r0, [r8]
   19fb6:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   19fba:	85fb      	strh	r3, [r7, #46]	; 0x2e
   19fbc:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   19fc0:	f01b fbb1 	bl	35726 <bt_uuid_cmp>
   19fc4:	b138      	cbz	r0, 19fd6 <find_type_cb+0x5a>
		if (data->group &&
   19fc6:	68a3      	ldr	r3, [r4, #8]
   19fc8:	b11b      	cbz	r3, 19fd2 <find_type_cb+0x56>
   19fca:	885a      	ldrh	r2, [r3, #2]
   19fcc:	42b2      	cmp	r2, r6
   19fce:	d200      	bcs.n	19fd2 <find_type_cb+0x56>
	data->group->end_handle = sys_cpu_to_le16(handle);
   19fd0:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   19fd2:	2001      	movs	r0, #1
   19fd4:	e009      	b.n	19fea <find_type_cb+0x6e>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   19fd6:	6861      	ldr	r1, [r4, #4]
   19fd8:	4608      	mov	r0, r1
   19fda:	f01c f92a 	bl	36232 <net_buf_frags_len>
   19fde:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   19fe2:	1a1b      	subs	r3, r3, r0
   19fe4:	2b03      	cmp	r3, #3
   19fe6:	d804      	bhi.n	19ff2 <find_type_cb+0x76>
		return BT_GATT_ITER_STOP;
   19fe8:	2000      	movs	r0, #0
}
   19fea:	3744      	adds	r7, #68	; 0x44
   19fec:	46bd      	mov	sp, r7
   19fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   19ff2:	4608      	mov	r0, r1
   19ff4:	f01d fd0e 	bl	37a14 <net_buf_frag_last>
   19ff8:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   19ffa:	6860      	ldr	r0, [r4, #4]
   19ffc:	f01c f919 	bl	36232 <net_buf_frags_len>
   1a000:	f8ba b02a 	ldrh.w	fp, [sl, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   1a004:	f105 090c 	add.w	r9, r5, #12
   1a008:	ebab 0b00 	sub.w	fp, fp, r0
   1a00c:	4648      	mov	r0, r9
   1a00e:	f01d fd6a 	bl	37ae6 <net_buf_simple_tailroom>
   1a012:	4558      	cmp	r0, fp
   1a014:	d941      	bls.n	1a09a <find_type_cb+0x11e>
   1a016:	6860      	ldr	r0, [r4, #4]
   1a018:	f01c f90b 	bl	36232 <net_buf_frags_len>
   1a01c:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   1a020:	1a18      	subs	r0, r3, r0
	if (!len) {
   1a022:	b970      	cbnz	r0, 1a042 <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1a024:	6863      	ldr	r3, [r4, #4]
   1a026:	7a98      	ldrb	r0, [r3, #10]
   1a028:	f013 fb58 	bl	2d6dc <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1a02c:	2200      	movs	r2, #0
   1a02e:	2300      	movs	r3, #0
   1a030:	f01d fcb2 	bl	37998 <net_buf_alloc_fixed>
		if (!frag) {
   1a034:	4605      	mov	r5, r0
   1a036:	2800      	cmp	r0, #0
   1a038:	d0d6      	beq.n	19fe8 <find_type_cb+0x6c>
		net_buf_frag_add(data->buf, frag);
   1a03a:	4601      	mov	r1, r0
   1a03c:	6860      	ldr	r0, [r4, #4]
   1a03e:	f01d fcfa 	bl	37a36 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1a042:	2300      	movs	r3, #0
   1a044:	9300      	str	r3, [sp, #0]
   1a046:	f8d8 a004 	ldr.w	sl, [r8, #4]
   1a04a:	6878      	ldr	r0, [r7, #4]
   1a04c:	4641      	mov	r1, r8
   1a04e:	2310      	movs	r3, #16
   1a050:	f107 0208 	add.w	r2, r7, #8
   1a054:	47d0      	blx	sl
	if (read < 0) {
   1a056:	f1b0 0800 	subs.w	r8, r0, #0
   1a05a:	db1b      	blt.n	1a094 <find_type_cb+0x118>
	if (read != data->value_len) {
   1a05c:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1a05e:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   1a060:	4542      	cmp	r2, r8
   1a062:	d043      	beq.n	1a0ec <find_type_cb+0x170>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1a064:	4601      	mov	r1, r0
   1a066:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1a06a:	f01b fb8a 	bl	35782 <bt_uuid_create>
   1a06e:	b9c0      	cbnz	r0, 1a0a2 <find_type_cb+0x126>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   1a070:	466d      	mov	r5, sp
   1a072:	b088      	sub	sp, #32
   1a074:	7c23      	ldrb	r3, [r4, #16]
   1a076:	aa02      	add	r2, sp, #8
   1a078:	491f      	ldr	r1, [pc, #124]	; (1a0f8 <find_type_cb+0x17c>)
   1a07a:	6151      	str	r1, [r2, #20]
   1a07c:	491f      	ldr	r1, [pc, #124]	; (1a0fc <find_type_cb+0x180>)
   1a07e:	e9c2 1306 	strd	r1, r3, [r2, #24]
			LOG_WRN("Unable to create UUID: size %d", read);
   1a082:	2304      	movs	r3, #4
   1a084:	f842 3f10 	str.w	r3, [r2, #16]!
   1a088:	481d      	ldr	r0, [pc, #116]	; (1a100 <find_type_cb+0x184>)
   1a08a:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1a08e:	f01c f9bc 	bl	3640a <z_log_msg_static_create.constprop.0>
   1a092:	46ad      	mov	sp, r5
	data->group = NULL;
   1a094:	2300      	movs	r3, #0
   1a096:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   1a098:	e79b      	b.n	19fd2 <find_type_cb+0x56>
	return net_buf_simple_tailroom(&buf->b);
   1a09a:	4648      	mov	r0, r9
   1a09c:	f01d fd23 	bl	37ae6 <net_buf_simple_tailroom>
   1a0a0:	e7bf      	b.n	1a022 <find_type_cb+0xa6>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1a0a2:	fa5f f288 	uxtb.w	r2, r8
   1a0a6:	f107 0108 	add.w	r1, r7, #8
   1a0aa:	f107 0018 	add.w	r0, r7, #24
   1a0ae:	f01b fb68 	bl	35782 <bt_uuid_create>
   1a0b2:	b940      	cbnz	r0, 1a0c6 <find_type_cb+0x14a>
			LOG_WRN("Unable to create UUID: size %d", read);
   1a0b4:	466d      	mov	r5, sp
   1a0b6:	b088      	sub	sp, #32
   1a0b8:	aa02      	add	r2, sp, #8
   1a0ba:	4b12      	ldr	r3, [pc, #72]	; (1a104 <find_type_cb+0x188>)
   1a0bc:	6153      	str	r3, [r2, #20]
   1a0be:	4b0f      	ldr	r3, [pc, #60]	; (1a0fc <find_type_cb+0x180>)
   1a0c0:	e9c2 3806 	strd	r3, r8, [r2, #24]
   1a0c4:	e7dd      	b.n	1a082 <find_type_cb+0x106>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1a0c6:	f107 0118 	add.w	r1, r7, #24
   1a0ca:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1a0ce:	f01b fb2a 	bl	35726 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1a0d2:	2800      	cmp	r0, #0
   1a0d4:	d1de      	bne.n	1a094 <find_type_cb+0x118>
	data->err = 0x00;
   1a0d6:	2300      	movs	r3, #0
   1a0d8:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1a0da:	2104      	movs	r1, #4
   1a0dc:	f105 000c 	add.w	r0, r5, #12
   1a0e0:	f01d fcc6 	bl	37a70 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1a0e4:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1a0e6:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1a0e8:	68a3      	ldr	r3, [r4, #8]
   1a0ea:	e771      	b.n	19fd0 <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
   1a0ec:	f107 0108 	add.w	r1, r7, #8
   1a0f0:	f01b fa11 	bl	35516 <memcmp>
   1a0f4:	e7ed      	b.n	1a0d2 <find_type_cb+0x156>
   1a0f6:	bf00      	nop
   1a0f8:	0003d85f 	.word	0x0003d85f
   1a0fc:	0003da9d 	.word	0x0003da9d
   1a100:	00039568 	.word	0x00039568
   1a104:	0003d882 	.word	0x0003d882

0001a108 <chan_send>:
{
   1a108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a10c:	b082      	sub	sp, #8
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1a10e:	f8d1 9018 	ldr.w	r9, [r1, #24]
	hdr = (void *)buf->data;
   1a112:	68cb      	ldr	r3, [r1, #12]
{
   1a114:	af02      	add	r7, sp, #8
   1a116:	4606      	mov	r6, r0
   1a118:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   1a11a:	3090      	adds	r0, #144	; 0x90
   1a11c:	2102      	movs	r1, #2
   1a11e:	f01c f8a0 	bl	36262 <atomic_test_bit>
   1a122:	2800      	cmp	r0, #0
   1a124:	d049      	beq.n	1a1ba <chan_send+0xb2>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1a126:	781b      	ldrb	r3, [r3, #0]
   1a128:	2bd2      	cmp	r3, #210	; 0xd2
   1a12a:	d120      	bne.n	1a16e <chan_send+0x66>
		err = bt_smp_sign(chan->att->conn, buf);
   1a12c:	6833      	ldr	r3, [r6, #0]
   1a12e:	4621      	mov	r1, r4
   1a130:	6818      	ldr	r0, [r3, #0]
   1a132:	f003 fe69 	bl	1de08 <bt_smp_sign>
		if (err) {
   1a136:	4605      	mov	r5, r0
   1a138:	b1c8      	cbz	r0, 1a16e <chan_send+0x66>
			LOG_ERR("Error signing data");
   1a13a:	466e      	mov	r6, sp
   1a13c:	b088      	sub	sp, #32
   1a13e:	aa02      	add	r2, sp, #8
   1a140:	4b1f      	ldr	r3, [pc, #124]	; (1a1c0 <chan_send+0xb8>)
   1a142:	6153      	str	r3, [r2, #20]
   1a144:	4b1f      	ldr	r3, [pc, #124]	; (1a1c4 <chan_send+0xbc>)
   1a146:	6193      	str	r3, [r2, #24]
   1a148:	2303      	movs	r3, #3
   1a14a:	f842 3f10 	str.w	r3, [r2, #16]!
   1a14e:	481e      	ldr	r0, [pc, #120]	; (1a1c8 <chan_send+0xc0>)
   1a150:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a154:	f01c f959 	bl	3640a <z_log_msg_static_create.constprop.0>
   1a158:	46b5      	mov	sp, r6
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   1a15a:	69a0      	ldr	r0, [r4, #24]
   1a15c:	f7ff ff00 	bl	19f60 <tx_meta_data_free>
			net_buf_unref(buf);
   1a160:	4620      	mov	r0, r4
   1a162:	f013 fb7d 	bl	2d860 <net_buf_unref>
}
   1a166:	4628      	mov	r0, r5
   1a168:	46bd      	mov	sp, r7
   1a16a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	state->offset = net_buf_simple_headroom(buf);
   1a16e:	f104 000c 	add.w	r0, r4, #12
   1a172:	f01d fcb4 	bl	37ade <net_buf_simple_headroom>
	state->len = buf->len;
   1a176:	f8b4 a010 	ldrh.w	sl, [r4, #16]
	data->att_chan = chan;
   1a17a:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1a17e:	6833      	ldr	r3, [r6, #0]
   1a180:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1a182:	68e3      	ldr	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   1a184:	4680      	mov	r8, r0
   1a186:	7818      	ldrb	r0, [r3, #0]
   1a188:	f7ff fea4 	bl	19ed4 <att_op_get_type>
	switch (op_type) {
   1a18c:	2805      	cmp	r0, #5
   1a18e:	bf96      	itet	ls
   1a190:	4b0e      	ldrls	r3, [pc, #56]	; (1a1cc <chan_send+0xc4>)
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1a192:	4b0f      	ldrhi	r3, [pc, #60]	; (1a1d0 <chan_send+0xc8>)
   1a194:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1a198:	f8cd 9000 	str.w	r9, [sp]
   1a19c:	4628      	mov	r0, r5
   1a19e:	4622      	mov	r2, r4
   1a1a0:	2104      	movs	r1, #4
   1a1a2:	f01c f80e 	bl	361c2 <bt_l2cap_send_cb>
	if (err) {
   1a1a6:	4605      	mov	r5, r0
   1a1a8:	2800      	cmp	r0, #0
   1a1aa:	d0dc      	beq.n	1a166 <chan_send+0x5e>
	buf->data = buf->__buf + state->offset;
   1a1ac:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   1a1ae:	f8a4 a010 	strh.w	sl, [r4, #16]
	buf->data = buf->__buf + state->offset;
   1a1b2:	fa13 f388 	uxtah	r3, r3, r8
   1a1b6:	60e3      	str	r3, [r4, #12]
}
   1a1b8:	e7d5      	b.n	1a166 <chan_send+0x5e>
		return -EINVAL;
   1a1ba:	f06f 0515 	mvn.w	r5, #21
   1a1be:	e7d2      	b.n	1a166 <chan_send+0x5e>
   1a1c0:	0003d8a5 	.word	0x0003d8a5
   1a1c4:	0003dada 	.word	0x0003dada
   1a1c8:	00039568 	.word	0x00039568
   1a1cc:	00039cc8 	.word	0x00039cc8
   1a1d0:	000367fb 	.word	0x000367fb

0001a1d4 <att_get>:
{
   1a1d4:	b598      	push	{r3, r4, r7, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1a1d6:	7b43      	ldrb	r3, [r0, #13]
   1a1d8:	2b07      	cmp	r3, #7
{
   1a1da:	af00      	add	r7, sp, #0
	if (conn->state != BT_CONN_CONNECTED) {
   1a1dc:	d012      	beq.n	1a204 <att_get+0x30>
		LOG_WRN("Not connected");
   1a1de:	466c      	mov	r4, sp
   1a1e0:	b088      	sub	sp, #32
   1a1e2:	466a      	mov	r2, sp
   1a1e4:	4b11      	ldr	r3, [pc, #68]	; (1a22c <att_get+0x58>)
   1a1e6:	6153      	str	r3, [r2, #20]
   1a1e8:	4b11      	ldr	r3, [pc, #68]	; (1a230 <att_get+0x5c>)
   1a1ea:	6193      	str	r3, [r2, #24]
   1a1ec:	2303      	movs	r3, #3
   1a1ee:	f842 3f10 	str.w	r3, [r2, #16]!
   1a1f2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
		LOG_ERR("Unable to find ATT channel");
   1a1f6:	480f      	ldr	r0, [pc, #60]	; (1a234 <att_get+0x60>)
   1a1f8:	f01c f907 	bl	3640a <z_log_msg_static_create.constprop.0>
		return NULL;
   1a1fc:	2000      	movs	r0, #0
   1a1fe:	46a5      	mov	sp, r4
}
   1a200:	46bd      	mov	sp, r7
   1a202:	bd98      	pop	{r3, r4, r7, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1a204:	2104      	movs	r1, #4
   1a206:	f01b ffff 	bl	36208 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1a20a:	b960      	cbnz	r0, 1a226 <att_get+0x52>
		LOG_ERR("Unable to find ATT channel");
   1a20c:	466c      	mov	r4, sp
   1a20e:	b088      	sub	sp, #32
   1a210:	466a      	mov	r2, sp
   1a212:	4b09      	ldr	r3, [pc, #36]	; (1a238 <att_get+0x64>)
   1a214:	6153      	str	r3, [r2, #20]
   1a216:	4b06      	ldr	r3, [pc, #24]	; (1a230 <att_get+0x5c>)
   1a218:	6193      	str	r3, [r2, #24]
   1a21a:	2303      	movs	r3, #3
   1a21c:	f842 3f10 	str.w	r3, [r2, #16]!
   1a220:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a224:	e7e7      	b.n	1a1f6 <att_get+0x22>
	return att_chan->att;
   1a226:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1a22a:	e7e9      	b.n	1a200 <att_get+0x2c>
   1a22c:	0003d8bc 	.word	0x0003d8bc
   1a230:	0003daff 	.word	0x0003daff
   1a234:	00039568 	.word	0x00039568
   1a238:	0003d8ce 	.word	0x0003d8ce

0001a23c <bt_att_connected>:
{
   1a23c:	b510      	push	{r4, lr}
   1a23e:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   1a242:	4604      	mov	r4, r0
   1a244:	f3bf 8f5b 	dmb	ish
   1a248:	e853 1f00 	ldrex	r1, [r3]
   1a24c:	f041 0104 	orr.w	r1, r1, #4
   1a250:	e843 1200 	strex	r2, r1, [r3]
   1a254:	2a00      	cmp	r2, #0
   1a256:	d1f7      	bne.n	1a248 <bt_att_connected+0xc>
   1a258:	f3bf 8f5b 	dmb	ish
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1a25c:	2317      	movs	r3, #23
   1a25e:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1a260:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   1a262:	1f20      	subs	r0, r4, #4
   1a264:	f01c f88e 	bl	36384 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1a268:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   1a26c:	4903      	ldr	r1, [pc, #12]	; (1a27c <bt_att_connected+0x40>)
   1a26e:	f01e fbee 	bl	38a4e <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   1a272:	6820      	ldr	r0, [r4, #0]
}
   1a274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   1a278:	f002 bc04 	b.w	1ca84 <bt_gatt_connected>
   1a27c:	0001b30d 	.word	0x0001b30d

0001a280 <read_group_cb>:
{
   1a280:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1a284:	4605      	mov	r5, r0
   1a286:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a288:	f04f 0800 	mov.w	r8, #0
   1a28c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1a290:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   1a292:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a294:	f88d 8008 	strb.w	r8, [sp, #8]
   1a298:	a902      	add	r1, sp, #8
{
   1a29a:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a29c:	f8ad 300a 	strh.w	r3, [sp, #10]
   1a2a0:	f01b fa41 	bl	35726 <bt_uuid_cmp>
   1a2a4:	b1a0      	cbz	r0, 1a2d0 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1a2a6:	f642 0301 	movw	r3, #10241	; 0x2801
   1a2aa:	6828      	ldr	r0, [r5, #0]
   1a2ac:	f88d 800c 	strb.w	r8, [sp, #12]
   1a2b0:	a903      	add	r1, sp, #12
   1a2b2:	f8ad 300e 	strh.w	r3, [sp, #14]
   1a2b6:	f01b fa36 	bl	35726 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a2ba:	b148      	cbz	r0, 1a2d0 <read_group_cb+0x50>
		if (data->group &&
   1a2bc:	6923      	ldr	r3, [r4, #16]
   1a2be:	b11b      	cbz	r3, 1a2c8 <read_group_cb+0x48>
   1a2c0:	885a      	ldrh	r2, [r3, #2]
   1a2c2:	42b2      	cmp	r2, r6
   1a2c4:	d200      	bcs.n	1a2c8 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1a2c6:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1a2c8:	2001      	movs	r0, #1
}
   1a2ca:	b004      	add	sp, #16
   1a2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1a2d0:	6861      	ldr	r1, [r4, #4]
   1a2d2:	6828      	ldr	r0, [r5, #0]
   1a2d4:	f01b fa27 	bl	35726 <bt_uuid_cmp>
   1a2d8:	b110      	cbz	r0, 1a2e0 <read_group_cb+0x60>
		data->group = NULL;
   1a2da:	2300      	movs	r3, #0
   1a2dc:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1a2de:	e7f3      	b.n	1a2c8 <read_group_cb+0x48>
	if (data->rsp->len &&
   1a2e0:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1a2e2:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   1a2e4:	781a      	ldrb	r2, [r3, #0]
   1a2e6:	b132      	cbz	r2, 1a2f6 <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1a2e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1a2ea:	8a01      	ldrh	r1, [r0, #16]
   1a2ec:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1a2ee:	4293      	cmp	r3, r2
   1a2f0:	da01      	bge.n	1a2f6 <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   1a2f2:	2000      	movs	r0, #0
   1a2f4:	e7e9      	b.n	1a2ca <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1a2f6:	2104      	movs	r1, #4
   1a2f8:	300c      	adds	r0, #12
   1a2fa:	f01d fbb9 	bl	37a70 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1a2fe:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1a300:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1a302:	6923      	ldr	r3, [r4, #16]
   1a304:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1a306:	4b08      	ldr	r3, [pc, #32]	; (1a328 <read_group_cb+0xa8>)
   1a308:	9300      	str	r3, [sp, #0]
   1a30a:	9401      	str	r4, [sp, #4]
   1a30c:	68a2      	ldr	r2, [r4, #8]
   1a30e:	2300      	movs	r3, #0
   1a310:	4629      	mov	r1, r5
   1a312:	4638      	mov	r0, r7
   1a314:	f01c f8eb 	bl	364ee <att_chan_read>
	if (read < 0) {
   1a318:	2800      	cmp	r0, #0
   1a31a:	dbea      	blt.n	1a2f2 <read_group_cb+0x72>
	if (!data->group) {
   1a31c:	6920      	ldr	r0, [r4, #16]
   1a31e:	3800      	subs	r0, #0
   1a320:	bf18      	it	ne
   1a322:	2001      	movne	r0, #1
   1a324:	e7d1      	b.n	1a2ca <read_group_cb+0x4a>
   1a326:	bf00      	nop
   1a328:	000363eb 	.word	0x000363eb

0001a32c <read_type_cb>:
{
   1a32c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   1a330:	6817      	ldr	r7, [r2, #0]
{
   1a332:	4605      	mov	r5, r0
   1a334:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1a336:	6800      	ldr	r0, [r0, #0]
   1a338:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   1a33a:	687e      	ldr	r6, [r7, #4]
{
   1a33c:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1a33e:	f01b f9f2 	bl	35726 <bt_uuid_cmp>
   1a342:	4681      	mov	r9, r0
   1a344:	2800      	cmp	r0, #0
   1a346:	d13c      	bne.n	1a3c2 <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1a348:	4630      	mov	r0, r6
   1a34a:	2295      	movs	r2, #149	; 0x95
   1a34c:	4629      	mov	r1, r5
   1a34e:	f01c fe40 	bl	36fd2 <bt_gatt_check_perm>
   1a352:	4606      	mov	r6, r0
   1a354:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1a356:	b140      	cbz	r0, 1a36a <read_type_cb+0x3e>
		if (data->rsp->len) {
   1a358:	68e3      	ldr	r3, [r4, #12]
   1a35a:	781b      	ldrb	r3, [r3, #0]
   1a35c:	b10b      	cbz	r3, 1a362 <read_type_cb+0x36>
			data->err = 0x00;
   1a35e:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   1a362:	2000      	movs	r0, #0
}
   1a364:	b003      	add	sp, #12
   1a366:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1a36a:	68a0      	ldr	r0, [r4, #8]
   1a36c:	f01d fb52 	bl	37a14 <net_buf_frag_last>
   1a370:	2102      	movs	r1, #2
   1a372:	300c      	adds	r0, #12
   1a374:	f01d fb7c 	bl	37a70 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1a378:	4b13      	ldr	r3, [pc, #76]	; (1a3c8 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1a37a:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   1a37c:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1a380:	9300      	str	r3, [sp, #0]
   1a382:	9401      	str	r4, [sp, #4]
   1a384:	68a2      	ldr	r2, [r4, #8]
   1a386:	4633      	mov	r3, r6
   1a388:	4629      	mov	r1, r5
   1a38a:	4638      	mov	r0, r7
   1a38c:	f01c f8af 	bl	364ee <att_chan_read>
	if (read < 0) {
   1a390:	2800      	cmp	r0, #0
   1a392:	da07      	bge.n	1a3a4 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   1a394:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   1a398:	bf26      	itte	cs
   1a39a:	4240      	negcs	r0, r0
   1a39c:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   1a39e:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   1a3a0:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1a3a2:	e7de      	b.n	1a362 <read_type_cb+0x36>
	if (!data->item) {
   1a3a4:	6923      	ldr	r3, [r4, #16]
   1a3a6:	2b00      	cmp	r3, #0
   1a3a8:	d0db      	beq.n	1a362 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1a3aa:	68a0      	ldr	r0, [r4, #8]
   1a3ac:	f01b ff41 	bl	36232 <net_buf_frags_len>
   1a3b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1a3b2:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1a3b4:	68e3      	ldr	r3, [r4, #12]
   1a3b6:	781b      	ldrb	r3, [r3, #0]
   1a3b8:	4298      	cmp	r0, r3
   1a3ba:	bf94      	ite	ls
   1a3bc:	2000      	movls	r0, #0
   1a3be:	2001      	movhi	r0, #1
   1a3c0:	e7d0      	b.n	1a364 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1a3c2:	2001      	movs	r0, #1
   1a3c4:	e7ce      	b.n	1a364 <read_type_cb+0x38>
   1a3c6:	bf00      	nop
   1a3c8:	00036243 	.word	0x00036243

0001a3cc <prep_write_cb>:
{
   1a3cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a3ce:	4614      	mov	r4, r2
   1a3d0:	4605      	mov	r5, r0
   1a3d2:	460e      	mov	r6, r1
	data->err = bt_gatt_check_perm(data->conn, attr,
   1a3d4:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1a3d8:	4601      	mov	r1, r0
   1a3da:	6820      	ldr	r0, [r4, #0]
   1a3dc:	f01c fdf9 	bl	36fd2 <bt_gatt_check_perm>
   1a3e0:	7420      	strb	r0, [r4, #16]
	if (data->err) {
   1a3e2:	b9a0      	cbnz	r0, 1a40e <prep_write_cb+0x42>
	if (!(attr->perm & BT_GATT_PERM_PREPARE_WRITE)) {
   1a3e4:	8a6b      	ldrh	r3, [r5, #18]
   1a3e6:	065b      	lsls	r3, r3, #25
   1a3e8:	d514      	bpl.n	1a414 <prep_write_cb+0x48>
	write = attr->write(data->conn, attr, data->value, data->len,
   1a3ea:	2301      	movs	r3, #1
   1a3ec:	9301      	str	r3, [sp, #4]
   1a3ee:	89e3      	ldrh	r3, [r4, #14]
   1a3f0:	9300      	str	r3, [sp, #0]
   1a3f2:	68af      	ldr	r7, [r5, #8]
   1a3f4:	89a3      	ldrh	r3, [r4, #12]
   1a3f6:	68a2      	ldr	r2, [r4, #8]
   1a3f8:	6820      	ldr	r0, [r4, #0]
   1a3fa:	4629      	mov	r1, r5
   1a3fc:	47b8      	blx	r7
	if (write != 0) {
   1a3fe:	b148      	cbz	r0, 1a414 <prep_write_cb+0x48>
	if (err < 0 && err >= -0xff) {
   1a400:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   1a404:	bf26      	itte	cs
   1a406:	4240      	negcs	r0, r0
   1a408:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   1a40a:	200e      	movcc	r0, #14
		data->err = err_to_att(write);
   1a40c:	7420      	strb	r0, [r4, #16]
		return BT_GATT_ITER_STOP;
   1a40e:	2000      	movs	r0, #0
}
   1a410:	b003      	add	sp, #12
   1a412:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_alloc_fixed(pool, timeout);
   1a414:	480b      	ldr	r0, [pc, #44]	; (1a444 <prep_write_cb+0x78>)
   1a416:	2200      	movs	r2, #0
   1a418:	2300      	movs	r3, #0
   1a41a:	f01d fabd 	bl	37998 <net_buf_alloc_fixed>
	data->buf = net_buf_alloc(&prep_pool, K_NO_WAIT);
   1a41e:	6060      	str	r0, [r4, #4]
	if (!data->buf) {
   1a420:	b910      	cbnz	r0, 1a428 <prep_write_cb+0x5c>
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
   1a422:	2309      	movs	r3, #9
   1a424:	7423      	strb	r3, [r4, #16]
		return BT_GATT_ITER_STOP;
   1a426:	e7f2      	b.n	1a40e <prep_write_cb+0x42>
	attr_data->handle = handle;
   1a428:	8306      	strh	r6, [r0, #24]
	attr_data->offset = data->offset;
   1a42a:	89e3      	ldrh	r3, [r4, #14]
   1a42c:	8343      	strh	r3, [r0, #26]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1a42e:	6860      	ldr	r0, [r4, #4]
   1a430:	89a2      	ldrh	r2, [r4, #12]
   1a432:	68a1      	ldr	r1, [r4, #8]
   1a434:	300c      	adds	r0, #12
   1a436:	f01d fb21 	bl	37a7c <net_buf_simple_add_mem>
	data->err = 0U;
   1a43a:	2300      	movs	r3, #0
   1a43c:	7423      	strb	r3, [r4, #16]
	return BT_GATT_ITER_CONTINUE;
   1a43e:	2001      	movs	r0, #1
   1a440:	e7e6      	b.n	1a410 <prep_write_cb+0x44>
   1a442:	bf00      	nop
   1a444:	20000c30 	.word	0x20000c30

0001a448 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1a448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a44c:	b082      	sub	sp, #8
   1a44e:	af00      	add	r7, sp, #0
   1a450:	4604      	mov	r4, r0
   1a452:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1a454:	483e      	ldr	r0, [pc, #248]	; (1a550 <bt_att_accept+0x108>)
   1a456:	2200      	movs	r2, #0
   1a458:	2300      	movs	r3, #0
   1a45a:	4639      	mov	r1, r7
   1a45c:	f017 f94c 	bl	316f8 <k_mem_slab_alloc>
   1a460:	4605      	mov	r5, r0
   1a462:	b1b8      	cbz	r0, 1a494 <bt_att_accept+0x4c>
		LOG_ERR("No available ATT context for conn %p", conn);
   1a464:	466d      	mov	r5, sp
   1a466:	b088      	sub	sp, #32
   1a468:	466a      	mov	r2, sp
   1a46a:	4b3a      	ldr	r3, [pc, #232]	; (1a554 <bt_att_accept+0x10c>)
   1a46c:	6153      	str	r3, [r2, #20]
   1a46e:	4b3a      	ldr	r3, [pc, #232]	; (1a558 <bt_att_accept+0x110>)
   1a470:	483a      	ldr	r0, [pc, #232]	; (1a55c <bt_att_accept+0x114>)
   1a472:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1a476:	2304      	movs	r3, #4
   1a478:	f842 3f10 	str.w	r3, [r2, #16]!
   1a47c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1a480:	f01b ffc3 	bl	3640a <z_log_msg_static_create.constprop.0>
   1a484:	46ad      	mov	sp, r5
		return -ENOMEM;
   1a486:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   1a48a:	4628      	mov	r0, r5
   1a48c:	3708      	adds	r7, #8
   1a48e:	46bd      	mov	sp, r7
   1a490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_z_current_get();
   1a494:	f018 f840 	bl	32518 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   1a498:	4b31      	ldr	r3, [pc, #196]	; (1a560 <bt_att_accept+0x118>)
	(void)memset(att, 0, sizeof(*att));
   1a49a:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   1a49c:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   1a49e:	2234      	movs	r2, #52	; 0x34
   1a4a0:	6838      	ldr	r0, [r7, #0]
   1a4a2:	f01b f853 	bl	3554c <memset>
	att->conn = conn;
   1a4a6:	683b      	ldr	r3, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1a4a8:	482e      	ldr	r0, [pc, #184]	; (1a564 <bt_att_accept+0x11c>)
	att->conn = conn;
   1a4aa:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   1a4ac:	683c      	ldr	r4, [r7, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1a4ae:	607d      	str	r5, [r7, #4]
	list->tail = NULL;
   1a4b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
   1a4b4:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1a4b8:	2200      	movs	r2, #0
   1a4ba:	2300      	movs	r3, #0
   1a4bc:	1d39      	adds	r1, r7, #4
   1a4be:	f017 f91b 	bl	316f8 <k_mem_slab_alloc>
   1a4c2:	4605      	mov	r5, r0
   1a4c4:	b190      	cbz	r0, 1a4ec <bt_att_accept+0xa4>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   1a4c6:	6823      	ldr	r3, [r4, #0]
   1a4c8:	466c      	mov	r4, sp
   1a4ca:	b088      	sub	sp, #32
   1a4cc:	466a      	mov	r2, sp
   1a4ce:	4926      	ldr	r1, [pc, #152]	; (1a568 <bt_att_accept+0x120>)
   1a4d0:	6151      	str	r1, [r2, #20]
   1a4d2:	4926      	ldr	r1, [pc, #152]	; (1a56c <bt_att_accept+0x124>)
   1a4d4:	4821      	ldr	r0, [pc, #132]	; (1a55c <bt_att_accept+0x114>)
   1a4d6:	e9c2 1306 	strd	r1, r3, [r2, #24]
   1a4da:	2304      	movs	r3, #4
   1a4dc:	f842 3f10 	str.w	r3, [r2, #16]!
   1a4e0:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1a4e4:	f01b ff91 	bl	3640a <z_log_msg_static_create.constprop.0>
   1a4e8:	46a5      	mov	sp, r4
	if (!chan) {
   1a4ea:	e7cc      	b.n	1a486 <bt_att_accept+0x3e>
	(void)memset(chan, 0, sizeof(*chan));
   1a4ec:	4601      	mov	r1, r0
   1a4ee:	22e8      	movs	r2, #232	; 0xe8
   1a4f0:	6878      	ldr	r0, [r7, #4]
   1a4f2:	f01b f82b 	bl	3554c <memset>
	chan->chan.chan.ops = &ops;
   1a4f6:	6878      	ldr	r0, [r7, #4]
   1a4f8:	4b1d      	ldr	r3, [pc, #116]	; (1a570 <bt_att_accept+0x128>)
   1a4fa:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   1a4fc:	3098      	adds	r0, #152	; 0x98
   1a4fe:	f01e f99b 	bl	38838 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a502:	687b      	ldr	r3, [r7, #4]
   1a504:	f3bf 8f5b 	dmb	ish
   1a508:	3390      	adds	r3, #144	; 0x90
   1a50a:	e853 2f00 	ldrex	r2, [r3]
   1a50e:	e843 5100 	strex	r1, r5, [r3]
   1a512:	2900      	cmp	r1, #0
   1a514:	d1f9      	bne.n	1a50a <bt_att_accept+0xc2>
   1a516:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   1a51a:	687b      	ldr	r3, [r7, #4]
   1a51c:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   1a51e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	att_chan_attach(att, chan);
   1a520:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
   1a524:	b92b      	cbnz	r3, 1a532 <bt_att_accept+0xea>
   1a526:	f104 000c 	add.w	r0, r4, #12
   1a52a:	f01e f985 	bl	38838 <z_impl_k_queue_init>
   1a52e:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
	return list->head;
   1a532:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	parent->next = child;
   1a534:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
Z_GENLIST_PREPEND(slist, snode)
   1a538:	6b22      	ldr	r2, [r4, #48]	; 0x30
	sys_slist_prepend(&att->chans, &chan->node);
   1a53a:	f108 03e0 	add.w	r3, r8, #224	; 0xe0
	list->head = node;
   1a53e:	62e3      	str	r3, [r4, #44]	; 0x2c
Z_GENLIST_PREPEND(slist, snode)
   1a540:	b902      	cbnz	r2, 1a544 <bt_att_accept+0xfc>
	list->tail = node;
   1a542:	6323      	str	r3, [r4, #48]	; 0x30
	return chan;
   1a544:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
   1a546:	2b00      	cmp	r3, #0
   1a548:	d09d      	beq.n	1a486 <bt_att_accept+0x3e>
	*ch = &chan->chan.chan;
   1a54a:	3304      	adds	r3, #4
   1a54c:	6033      	str	r3, [r6, #0]
	return 0;
   1a54e:	e79c      	b.n	1a48a <bt_att_accept+0x42>
   1a550:	20000a60 	.word	0x20000a60
   1a554:	0003d8ed 	.word	0x0003d8ed
   1a558:	0003daf1 	.word	0x0003daf1
   1a55c:	00039568 	.word	0x00039568
   1a560:	20001c44 	.word	0x20001c44
   1a564:	20000a7c 	.word	0x20000a7c
   1a568:	0003d916 	.word	0x0003d916
   1a56c:	0003dae4 	.word	0x0003dae4
   1a570:	200002f4 	.word	0x200002f4

0001a574 <bt_att_chan_create_pdu>:
{
   1a574:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   1a578:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a57a:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1a57c:	1c53      	adds	r3, r2, #1
   1a57e:	428b      	cmp	r3, r1
{
   1a580:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a582:	d916      	bls.n	1a5b2 <bt_att_chan_create_pdu+0x3e>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   1a584:	466c      	mov	r4, sp
   1a586:	b08a      	sub	sp, #40	; 0x28
   1a588:	466a      	mov	r2, sp
   1a58a:	482e      	ldr	r0, [pc, #184]	; (1a644 <bt_att_chan_create_pdu+0xd0>)
   1a58c:	6150      	str	r0, [r2, #20]
   1a58e:	482e      	ldr	r0, [pc, #184]	; (1a648 <bt_att_chan_create_pdu+0xd4>)
   1a590:	6213      	str	r3, [r2, #32]
   1a592:	2305      	movs	r3, #5
   1a594:	e9c2 0106 	strd	r0, r1, [r2, #24]
   1a598:	f842 3f10 	str.w	r3, [r2, #16]!
   1a59c:	f44f 5122 	mov.w	r1, #10368	; 0x2880
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1a5a0:	482a      	ldr	r0, [pc, #168]	; (1a64c <bt_att_chan_create_pdu+0xd8>)
   1a5a2:	f01b ff32 	bl	3640a <z_log_msg_static_create.constprop.0>
   1a5a6:	46a5      	mov	sp, r4
		return NULL;
   1a5a8:	2400      	movs	r4, #0
}
   1a5aa:	4620      	mov	r0, r4
   1a5ac:	46bd      	mov	sp, r7
   1a5ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   1a5b2:	4628      	mov	r0, r5
   1a5b4:	f7ff fc8e 	bl	19ed4 <att_op_get_type>
   1a5b8:	2802      	cmp	r0, #2
   1a5ba:	d01b      	beq.n	1a5f4 <bt_att_chan_create_pdu+0x80>
   1a5bc:	2804      	cmp	r0, #4
   1a5be:	d019      	beq.n	1a5f4 <bt_att_chan_create_pdu+0x80>
		timeout = K_FOREVER;
   1a5c0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1a5c4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1a5c8:	2100      	movs	r1, #0
   1a5ca:	4642      	mov	r2, r8
   1a5cc:	464b      	mov	r3, r9
   1a5ce:	4608      	mov	r0, r1
   1a5d0:	f01b fdf4 	bl	361bc <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1a5d4:	4604      	mov	r4, r0
   1a5d6:	b990      	cbnz	r0, 1a5fe <bt_att_chan_create_pdu+0x8a>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1a5d8:	466c      	mov	r4, sp
   1a5da:	b088      	sub	sp, #32
   1a5dc:	466a      	mov	r2, sp
   1a5de:	4b1c      	ldr	r3, [pc, #112]	; (1a650 <bt_att_chan_create_pdu+0xdc>)
   1a5e0:	6153      	str	r3, [r2, #20]
   1a5e2:	4b19      	ldr	r3, [pc, #100]	; (1a648 <bt_att_chan_create_pdu+0xd4>)
   1a5e4:	e9c2 3506 	strd	r3, r5, [r2, #24]
   1a5e8:	2304      	movs	r3, #4
   1a5ea:	f842 3f10 	str.w	r3, [r2, #16]!
   1a5ee:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1a5f2:	e7d5      	b.n	1a5a0 <bt_att_chan_create_pdu+0x2c>
	switch (att_op_get_type(op)) {
   1a5f4:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   1a5f8:	f04f 0900 	mov.w	r9, #0
   1a5fc:	e7e4      	b.n	1a5c8 <bt_att_chan_create_pdu+0x54>
	return z_impl_k_queue_get(queue, timeout);
   1a5fe:	4815      	ldr	r0, [pc, #84]	; (1a654 <bt_att_chan_create_pdu+0xe0>)
   1a600:	4642      	mov	r2, r8
   1a602:	464b      	mov	r3, r9
   1a604:	f017 fa32 	bl	31a6c <z_impl_k_queue_get>
	if (!data) {
   1a608:	b998      	cbnz	r0, 1a632 <bt_att_chan_create_pdu+0xbe>
		LOG_WRN("Unable to allocate ATT TX meta");
   1a60a:	466d      	mov	r5, sp
   1a60c:	b088      	sub	sp, #32
   1a60e:	466a      	mov	r2, sp
   1a610:	4b11      	ldr	r3, [pc, #68]	; (1a658 <bt_att_chan_create_pdu+0xe4>)
   1a612:	6153      	str	r3, [r2, #20]
   1a614:	4b0c      	ldr	r3, [pc, #48]	; (1a648 <bt_att_chan_create_pdu+0xd4>)
   1a616:	6193      	str	r3, [r2, #24]
   1a618:	2303      	movs	r3, #3
   1a61a:	f842 3f10 	str.w	r3, [r2, #16]!
   1a61e:	480b      	ldr	r0, [pc, #44]	; (1a64c <bt_att_chan_create_pdu+0xd8>)
   1a620:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1a624:	f01b fef1 	bl	3640a <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   1a628:	4620      	mov	r0, r4
   1a62a:	46ad      	mov	sp, r5
   1a62c:	f013 f918 	bl	2d860 <net_buf_unref>
		return NULL;
   1a630:	e7ba      	b.n	1a5a8 <bt_att_chan_create_pdu+0x34>
	bt_att_tx_meta_data(buf) = data;
   1a632:	61a0      	str	r0, [r4, #24]
	return net_buf_simple_add(&buf->b, len);
   1a634:	2101      	movs	r1, #1
   1a636:	f104 000c 	add.w	r0, r4, #12
   1a63a:	f01d fa19 	bl	37a70 <net_buf_simple_add>
	hdr->code = op;
   1a63e:	7005      	strb	r5, [r0, #0]
	return buf;
   1a640:	e7b3      	b.n	1a5aa <bt_att_chan_create_pdu+0x36>
   1a642:	bf00      	nop
   1a644:	0003d93f 	.word	0x0003d93f
   1a648:	0003db19 	.word	0x0003db19
   1a64c:	00039568 	.word	0x00039568
   1a650:	0003d69f 	.word	0x0003d69f
   1a654:	20000af8 	.word	0x20000af8
   1a658:	0003d968 	.word	0x0003d968

0001a65c <bt_att_recv>:
{
   1a65c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buf->len < sizeof(*hdr)) {
   1a660:	8a0b      	ldrh	r3, [r1, #16]
{
   1a662:	af00      	add	r7, sp, #0
   1a664:	4605      	mov	r5, r0
   1a666:	4689      	mov	r9, r1
	if (buf->len < sizeof(*hdr)) {
   1a668:	b99b      	cbnz	r3, 1a692 <bt_att_recv+0x36>
		LOG_ERR("Too small ATT PDU received");
   1a66a:	466c      	mov	r4, sp
   1a66c:	b088      	sub	sp, #32
   1a66e:	466a      	mov	r2, sp
   1a670:	4b52      	ldr	r3, [pc, #328]	; (1a7bc <bt_att_recv+0x160>)
   1a672:	6153      	str	r3, [r2, #20]
   1a674:	4b52      	ldr	r3, [pc, #328]	; (1a7c0 <bt_att_recv+0x164>)
   1a676:	6193      	str	r3, [r2, #24]
   1a678:	2303      	movs	r3, #3
   1a67a:	f842 3f10 	str.w	r3, [r2, #16]!
   1a67e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
			LOG_WRN("Ignoring unexpected request");
   1a682:	4850      	ldr	r0, [pc, #320]	; (1a7c4 <bt_att_recv+0x168>)
   1a684:	f01b fec1 	bl	3640a <z_log_msg_static_create.constprop.0>
   1a688:	46a5      	mov	sp, r4
}
   1a68a:	2000      	movs	r0, #0
   1a68c:	46bd      	mov	sp, r7
   1a68e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1a692:	2101      	movs	r1, #1
   1a694:	f109 000c 	add.w	r0, r9, #12
   1a698:	f01d fa11 	bl	37abe <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   1a69c:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1a6a0:	4604      	mov	r4, r0
   1a6a2:	2b00      	cmp	r3, #0
   1a6a4:	d0f1      	beq.n	1a68a <bt_att_recv+0x2e>
		if (hdr->code == handlers[i].op) {
   1a6a6:	7801      	ldrb	r1, [r0, #0]
   1a6a8:	f8df b11c 	ldr.w	fp, [pc, #284]	; 1a7c8 <bt_att_recv+0x16c>
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1a6ac:	1f2e      	subs	r6, r5, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1a6ae:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   1a6b0:	f81b 0033 	ldrb.w	r0, [fp, r3, lsl #3]
   1a6b4:	4288      	cmp	r0, r1
   1a6b6:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
   1a6ba:	eb0b 02c3 	add.w	r2, fp, r3, lsl #3
   1a6be:	d118      	bne.n	1a6f2 <bt_att_recv+0x96>
		if (handler->type == ATT_REQUEST &&
   1a6c0:	f892 8002 	ldrb.w	r8, [r2, #2]
   1a6c4:	f1b8 0f01 	cmp.w	r8, #1
   1a6c8:	d137      	bne.n	1a73a <bt_att_recv+0xde>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   1a6ca:	2100      	movs	r1, #0
   1a6cc:	f105 008c 	add.w	r0, r5, #140	; 0x8c
   1a6d0:	f01b fef8 	bl	364c4 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   1a6d4:	2800      	cmp	r0, #0
   1a6d6:	d03e      	beq.n	1a756 <bt_att_recv+0xfa>
			LOG_WRN("Ignoring unexpected request");
   1a6d8:	466c      	mov	r4, sp
   1a6da:	b088      	sub	sp, #32
   1a6dc:	466a      	mov	r2, sp
   1a6de:	4b3b      	ldr	r3, [pc, #236]	; (1a7cc <bt_att_recv+0x170>)
   1a6e0:	6153      	str	r3, [r2, #20]
   1a6e2:	4b37      	ldr	r3, [pc, #220]	; (1a7c0 <bt_att_recv+0x164>)
   1a6e4:	6193      	str	r3, [r2, #24]
   1a6e6:	2303      	movs	r3, #3
   1a6e8:	f842 3f10 	str.w	r3, [r2, #16]!
   1a6ec:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1a6f0:	e7c7      	b.n	1a682 <bt_att_recv+0x26>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1a6f2:	3301      	adds	r3, #1
   1a6f4:	2b0f      	cmp	r3, #15
   1a6f6:	d1db      	bne.n	1a6b0 <bt_att_recv+0x54>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   1a6f8:	466d      	mov	r5, sp
   1a6fa:	b088      	sub	sp, #32
   1a6fc:	466a      	mov	r2, sp
   1a6fe:	4b34      	ldr	r3, [pc, #208]	; (1a7d0 <bt_att_recv+0x174>)
   1a700:	6153      	str	r3, [r2, #20]
   1a702:	4b2f      	ldr	r3, [pc, #188]	; (1a7c0 <bt_att_recv+0x164>)
   1a704:	482f      	ldr	r0, [pc, #188]	; (1a7c4 <bt_att_recv+0x168>)
   1a706:	e9c2 3106 	strd	r3, r1, [r2, #24]
   1a70a:	2304      	movs	r3, #4
   1a70c:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1a710:	f842 3f10 	str.w	r3, [r2, #16]!
   1a714:	f01b fe79 	bl	3640a <z_log_msg_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1a718:	7821      	ldrb	r1, [r4, #0]
   1a71a:	46ad      	mov	sp, r5
   1a71c:	4608      	mov	r0, r1
   1a71e:	f7ff fbd9 	bl	19ed4 <att_op_get_type>
   1a722:	2800      	cmp	r0, #0
   1a724:	d0b1      	beq.n	1a68a <bt_att_recv+0x2e>
   1a726:	2805      	cmp	r0, #5
   1a728:	d0af      	beq.n	1a68a <bt_att_recv+0x2e>
	if (!req) {
   1a72a:	2900      	cmp	r1, #0
   1a72c:	d0ad      	beq.n	1a68a <bt_att_recv+0x2e>
   1a72e:	2306      	movs	r3, #6
   1a730:	2200      	movs	r2, #0
   1a732:	4630      	mov	r0, r6
   1a734:	f01c f8cf 	bl	368d6 <send_err_rsp.part.0>
   1a738:	e7a7      	b.n	1a68a <bt_att_recv+0x2e>
		} else if (handler->type == ATT_INDICATION &&
   1a73a:	f1b8 0f05 	cmp.w	r8, #5
   1a73e:	d10a      	bne.n	1a756 <bt_att_recv+0xfa>
			   atomic_test_and_set_bit(att_chan->flags,
   1a740:	2101      	movs	r1, #1
   1a742:	f105 008c 	add.w	r0, r5, #140	; 0x8c
   1a746:	f01b febd 	bl	364c4 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   1a74a:	b120      	cbz	r0, 1a756 <bt_att_recv+0xfa>
			LOG_WRN("Ignoring unexpected indication");
   1a74c:	466c      	mov	r4, sp
   1a74e:	b088      	sub	sp, #32
   1a750:	466a      	mov	r2, sp
   1a752:	4b20      	ldr	r3, [pc, #128]	; (1a7d4 <bt_att_recv+0x178>)
   1a754:	e7c4      	b.n	1a6e0 <bt_att_recv+0x84>
	if (buf->len < handler->expect_len) {
   1a756:	44da      	add	sl, fp
   1a758:	f8b9 3010 	ldrh.w	r3, [r9, #16]
   1a75c:	f89a 2001 	ldrb.w	r2, [sl, #1]
   1a760:	429a      	cmp	r2, r3
   1a762:	d919      	bls.n	1a798 <bt_att_recv+0x13c>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1a764:	46e8      	mov	r8, sp
   1a766:	b08a      	sub	sp, #40	; 0x28
   1a768:	7821      	ldrb	r1, [r4, #0]
   1a76a:	466a      	mov	r2, sp
   1a76c:	481a      	ldr	r0, [pc, #104]	; (1a7d8 <bt_att_recv+0x17c>)
   1a76e:	6150      	str	r0, [r2, #20]
   1a770:	4813      	ldr	r0, [pc, #76]	; (1a7c0 <bt_att_recv+0x164>)
   1a772:	6211      	str	r1, [r2, #32]
   1a774:	e9c2 0306 	strd	r0, r3, [r2, #24]
   1a778:	2305      	movs	r3, #5
   1a77a:	f842 3f10 	str.w	r3, [r2, #16]!
   1a77e:	4811      	ldr	r0, [pc, #68]	; (1a7c4 <bt_att_recv+0x168>)
   1a780:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1a784:	f01b fe41 	bl	3640a <z_log_msg_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   1a788:	f89a 3002 	ldrb.w	r3, [sl, #2]
   1a78c:	2b01      	cmp	r3, #1
   1a78e:	46c5      	mov	sp, r8
   1a790:	f47f af7b 	bne.w	1a68a <bt_att_recv+0x2e>
		err = BT_ATT_ERR_INVALID_PDU;
   1a794:	2304      	movs	r3, #4
   1a796:	e00c      	b.n	1a7b2 <bt_att_recv+0x156>
		err = handler->func(att_chan, buf);
   1a798:	f8da 3004 	ldr.w	r3, [sl, #4]
   1a79c:	4649      	mov	r1, r9
   1a79e:	4630      	mov	r0, r6
   1a7a0:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   1a7a2:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
   1a7a6:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1a7a8:	f47f af6f 	bne.w	1a68a <bt_att_recv+0x2e>
   1a7ac:	2800      	cmp	r0, #0
   1a7ae:	f43f af6c 	beq.w	1a68a <bt_att_recv+0x2e>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1a7b2:	7821      	ldrb	r1, [r4, #0]
	if (!req) {
   1a7b4:	2900      	cmp	r1, #0
   1a7b6:	f43f af68 	beq.w	1a68a <bt_att_recv+0x2e>
   1a7ba:	e7b9      	b.n	1a730 <bt_att_recv+0xd4>
   1a7bc:	0003d98b 	.word	0x0003d98b
   1a7c0:	0003dace 	.word	0x0003dace
   1a7c4:	00039568 	.word	0x00039568
   1a7c8:	00039ce0 	.word	0x00039ce0
   1a7cc:	0003d9c8 	.word	0x0003d9c8
   1a7d0:	0003d9aa 	.word	0x0003d9aa
   1a7d4:	0003d9e8 	.word	0x0003d9e8
   1a7d8:	0003da0b 	.word	0x0003da0b

0001a7dc <att_write_rsp>:
{
   1a7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a7de:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1a7e0:	6803      	ldr	r3, [r0, #0]
   1a7e2:	460d      	mov	r5, r1
   1a7e4:	3900      	subs	r1, #0
{
   1a7e6:	b087      	sub	sp, #28
   1a7e8:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1a7ea:	bf18      	it	ne
   1a7ec:	2101      	movne	r1, #1
   1a7ee:	6818      	ldr	r0, [r3, #0]
{
   1a7f0:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1a7f2:	f01c fca6 	bl	37142 <bt_gatt_change_aware>
   1a7f6:	b940      	cbnz	r0, 1a80a <att_write_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1a7f8:	2105      	movs	r1, #5
   1a7fa:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1a7fe:	f01b fe61 	bl	364c4 <atomic_test_and_set_bit>
   1a802:	2800      	cmp	r0, #0
   1a804:	d149      	bne.n	1a89a <att_write_rsp+0xbe>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1a806:	2012      	movs	r0, #18
   1a808:	e036      	b.n	1a878 <att_write_rsp+0x9c>
	if (!handle) {
   1a80a:	2e00      	cmp	r6, #0
   1a80c:	d047      	beq.n	1a89e <att_write_rsp+0xc2>
	(void)memset(&data, 0, sizeof(data));
   1a80e:	2218      	movs	r2, #24
   1a810:	2100      	movs	r1, #0
   1a812:	4668      	mov	r0, sp
   1a814:	f01a fe9a 	bl	3554c <memset>
	if (rsp) {
   1a818:	bb87      	cbnz	r7, 1a87c <att_write_rsp+0xa0>
	data.conn = chan->att->conn;
   1a81a:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1a81c:	4a21      	ldr	r2, [pc, #132]	; (1a8a4 <att_write_rsp+0xc8>)
	data.conn = chan->att->conn;
   1a81e:	681b      	ldr	r3, [r3, #0]
   1a820:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   1a822:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   1a826:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   1a82a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a82c:	9303      	str	r3, [sp, #12]
	data.len = len;
   1a82e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1a832:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1a836:	2301      	movs	r3, #1
   1a838:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1a83c:	4631      	mov	r1, r6
   1a83e:	466b      	mov	r3, sp
   1a840:	4630      	mov	r0, r6
	data.req = req;
   1a842:	f88d 5008 	strb.w	r5, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1a846:	f01b fd46 	bl	362d6 <bt_gatt_foreach_attr>
	if (data.err) {
   1a84a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1a84e:	b1fb      	cbz	r3, 1a890 <att_write_rsp+0xb4>
		if (rsp) {
   1a850:	b177      	cbz	r7, 1a870 <att_write_rsp+0x94>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1a852:	9b01      	ldr	r3, [sp, #4]
   1a854:	6998      	ldr	r0, [r3, #24]
   1a856:	f7ff fb83 	bl	19f60 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1a85a:	9801      	ldr	r0, [sp, #4]
   1a85c:	f013 f800 	bl	2d860 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   1a860:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   1a864:	b1cd      	cbz	r5, 1a89a <att_write_rsp+0xbe>
   1a866:	4632      	mov	r2, r6
   1a868:	4629      	mov	r1, r5
   1a86a:	4620      	mov	r0, r4
   1a86c:	f01c f833 	bl	368d6 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   1a870:	2d18      	cmp	r5, #24
   1a872:	d112      	bne.n	1a89a <att_write_rsp+0xbe>
   1a874:	f89d 0014 	ldrb.w	r0, [sp, #20]
}
   1a878:	b007      	add	sp, #28
   1a87a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1a87c:	2200      	movs	r2, #0
   1a87e:	4639      	mov	r1, r7
   1a880:	4620      	mov	r0, r4
   1a882:	f7ff fe77 	bl	1a574 <bt_att_chan_create_pdu>
   1a886:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1a888:	2800      	cmp	r0, #0
   1a88a:	d1c6      	bne.n	1a81a <att_write_rsp+0x3e>
			return BT_ATT_ERR_UNLIKELY;
   1a88c:	200e      	movs	r0, #14
   1a88e:	e7f3      	b.n	1a878 <att_write_rsp+0x9c>
	if (data.buf) {
   1a890:	9901      	ldr	r1, [sp, #4]
   1a892:	b111      	cbz	r1, 1a89a <att_write_rsp+0xbe>
		bt_att_chan_send_rsp(chan, data.buf);
   1a894:	4620      	mov	r0, r4
   1a896:	f01b fdee 	bl	36476 <bt_att_chan_send_rsp>
			return 0;
   1a89a:	2000      	movs	r0, #0
   1a89c:	e7ec      	b.n	1a878 <att_write_rsp+0x9c>
		return BT_ATT_ERR_INVALID_HANDLE;
   1a89e:	2001      	movs	r0, #1
   1a8a0:	e7ea      	b.n	1a878 <att_write_rsp+0x9c>
   1a8a2:	bf00      	nop
   1a8a4:	00036275 	.word	0x00036275

0001a8a8 <att_signed_write_cmd>:
{
   1a8a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a8ac:	b085      	sub	sp, #20
	struct bt_conn *conn = chan->chan.chan.conn;
   1a8ae:	6846      	ldr	r6, [r0, #4]
{
   1a8b0:	af04      	add	r7, sp, #16
   1a8b2:	4605      	mov	r5, r0
   1a8b4:	460c      	mov	r4, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1a8b6:	3090      	adds	r0, #144	; 0x90
   1a8b8:	2103      	movs	r1, #3
   1a8ba:	f01b fcd2 	bl	36262 <atomic_test_bit>
   1a8be:	b9f0      	cbnz	r0, 1a8fe <att_signed_write_cmd+0x56>
	handle = sys_le16_to_cpu(req->handle);
   1a8c0:	46a1      	mov	r9, r4
	return net_buf_simple_push(&buf->b, len);
   1a8c2:	2101      	movs	r1, #1
   1a8c4:	f859 3f0c 	ldr.w	r3, [r9, #12]!
   1a8c8:	4648      	mov	r0, r9
   1a8ca:	f8b3 8000 	ldrh.w	r8, [r3]
   1a8ce:	f01d f8e6 	bl	37a9e <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
   1a8d2:	4630      	mov	r0, r6
   1a8d4:	4621      	mov	r1, r4
   1a8d6:	f003 fa05 	bl	1dce4 <bt_smp_sign_verify>
	if (err) {
   1a8da:	4606      	mov	r6, r0
   1a8dc:	b1a0      	cbz	r0, 1a908 <att_signed_write_cmd+0x60>
		LOG_ERR("Error verifying data");
   1a8de:	466c      	mov	r4, sp
   1a8e0:	b088      	sub	sp, #32
   1a8e2:	aa04      	add	r2, sp, #16
   1a8e4:	4b13      	ldr	r3, [pc, #76]	; (1a934 <att_signed_write_cmd+0x8c>)
   1a8e6:	6153      	str	r3, [r2, #20]
   1a8e8:	4b13      	ldr	r3, [pc, #76]	; (1a938 <att_signed_write_cmd+0x90>)
   1a8ea:	6193      	str	r3, [r2, #24]
   1a8ec:	2303      	movs	r3, #3
   1a8ee:	f842 3f10 	str.w	r3, [r2, #16]!
   1a8f2:	4812      	ldr	r0, [pc, #72]	; (1a93c <att_signed_write_cmd+0x94>)
   1a8f4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a8f8:	f01b fd87 	bl	3640a <z_log_msg_static_create.constprop.0>
   1a8fc:	46a5      	mov	sp, r4
		return 0;
   1a8fe:	2000      	movs	r0, #0
}
   1a900:	3704      	adds	r7, #4
   1a902:	46bd      	mov	sp, r7
   1a904:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return net_buf_simple_pull(&buf->b, len);
   1a908:	2101      	movs	r1, #1
   1a90a:	4648      	mov	r0, r9
   1a90c:	f01d f8cf 	bl	37aae <net_buf_simple_pull>
   1a910:	2102      	movs	r1, #2
   1a912:	4648      	mov	r0, r9
   1a914:	f01d f8cb 	bl	37aae <net_buf_simple_pull>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data,
   1a918:	8a23      	ldrh	r3, [r4, #16]
   1a91a:	3b0c      	subs	r3, #12
   1a91c:	b29b      	uxth	r3, r3
   1a91e:	9302      	str	r3, [sp, #8]
   1a920:	68e3      	ldr	r3, [r4, #12]
   1a922:	4632      	mov	r2, r6
   1a924:	e9cd 6300 	strd	r6, r3, [sp]
   1a928:	4631      	mov	r1, r6
   1a92a:	4643      	mov	r3, r8
   1a92c:	4628      	mov	r0, r5
   1a92e:	f7ff ff55 	bl	1a7dc <att_write_rsp>
   1a932:	e7e5      	b.n	1a900 <att_signed_write_cmd+0x58>
   1a934:	0003da2e 	.word	0x0003da2e
   1a938:	0003dab9 	.word	0x0003dab9
   1a93c:	00039568 	.word	0x00039568

0001a940 <bt_att_create_pdu>:
{
   1a940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a942:	af00      	add	r7, sp, #0
   1a944:	460e      	mov	r6, r1
   1a946:	4615      	mov	r5, r2
	att = att_get(conn);
   1a948:	f7ff fc44 	bl	1a1d4 <att_get>
	if (!att) {
   1a94c:	b1f0      	cbz	r0, 1a98c <bt_att_create_pdu+0x4c>
	return list->head;
   1a94e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a950:	4618      	mov	r0, r3
   1a952:	b11b      	cbz	r3, 1a95c <bt_att_create_pdu+0x1c>
	return node->next;
   1a954:	f850 39e0 	ldr.w	r3, [r0], #-224
   1a958:	b103      	cbz	r3, 1a95c <bt_att_create_pdu+0x1c>
   1a95a:	3be0      	subs	r3, #224	; 0xe0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a95c:	1c6c      	adds	r4, r5, #1
   1a95e:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a960:	b118      	cbz	r0, 1a96a <bt_att_create_pdu+0x2a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a962:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1a964:	42a1      	cmp	r1, r4
   1a966:	d21c      	bcs.n	1a9a2 <bt_att_create_pdu+0x62>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a968:	b993      	cbnz	r3, 1a990 <bt_att_create_pdu+0x50>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   1a96a:	466d      	mov	r5, sp
   1a96c:	b088      	sub	sp, #32
   1a96e:	466a      	mov	r2, sp
   1a970:	4b10      	ldr	r3, [pc, #64]	; (1a9b4 <bt_att_create_pdu+0x74>)
   1a972:	6153      	str	r3, [r2, #20]
   1a974:	4b10      	ldr	r3, [pc, #64]	; (1a9b8 <bt_att_create_pdu+0x78>)
   1a976:	4811      	ldr	r0, [pc, #68]	; (1a9bc <bt_att_create_pdu+0x7c>)
   1a978:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1a97c:	2304      	movs	r3, #4
   1a97e:	f842 3f10 	str.w	r3, [r2, #16]!
   1a982:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1a986:	f01b fd40 	bl	3640a <z_log_msg_static_create.constprop.0>
   1a98a:	46ad      	mov	sp, r5
		return NULL;
   1a98c:	2000      	movs	r0, #0
   1a98e:	e00c      	b.n	1a9aa <bt_att_create_pdu+0x6a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a990:	4618      	mov	r0, r3
   1a992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   1a996:	b153      	cbz	r3, 1a9ae <bt_att_create_pdu+0x6e>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a998:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1a99a:	428a      	cmp	r2, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a99c:	f1a3 03e0 	sub.w	r3, r3, #224	; 0xe0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a9a0:	d8f6      	bhi.n	1a990 <bt_att_create_pdu+0x50>
		return bt_att_chan_create_pdu(chan, op, len);
   1a9a2:	462a      	mov	r2, r5
   1a9a4:	4631      	mov	r1, r6
   1a9a6:	f7ff fde5 	bl	1a574 <bt_att_chan_create_pdu>
}
   1a9aa:	46bd      	mov	sp, r7
   1a9ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a9ae:	4614      	mov	r4, r2
   1a9b0:	e7d7      	b.n	1a962 <bt_att_create_pdu+0x22>
   1a9b2:	bf00      	nop
   1a9b4:	0003da47 	.word	0x0003da47
   1a9b8:	0003db07 	.word	0x0003db07
   1a9bc:	00039568 	.word	0x00039568

0001a9c0 <att_exec_write_req>:
{
   1a9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return att_exec_write_rsp(chan, req->flags);
   1a9c4:	68cb      	ldr	r3, [r1, #12]
	buf->len  = 0U;
   1a9c6:	4f4d      	ldr	r7, [pc, #308]	; (1aafc <att_exec_write_req+0x13c>)
   1a9c8:	781b      	ldrb	r3, [r3, #0]
{
   1a9ca:	b089      	sub	sp, #36	; 0x24
   1a9cc:	4605      	mov	r5, r0
	return att_exec_write_rsp(chan, req->flags);
   1a9ce:	9305      	str	r3, [sp, #20]
	struct bt_conn *conn = chan->chan.chan.conn;
   1a9d0:	6843      	ldr	r3, [r0, #4]
   1a9d2:	9306      	str	r3, [sp, #24]
	uint8_t err = 0U;
   1a9d4:	2400      	movs	r4, #0
	while (!sys_slist_is_empty(&chan->att->prep_queue)) {
   1a9d6:	6828      	ldr	r0, [r5, #0]
   1a9d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1a9da:	b92b      	cbnz	r3, 1a9e8 <att_exec_write_req+0x28>
	if (err) {
   1a9dc:	2c00      	cmp	r4, #0
   1a9de:	d076      	beq.n	1aace <att_exec_write_req+0x10e>
			return 0;
   1a9e0:	2000      	movs	r0, #0
}
   1a9e2:	b009      	add	sp, #36	; 0x24
   1a9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf = net_buf_slist_get(&chan->att->prep_queue);
   1a9e8:	3024      	adds	r0, #36	; 0x24
   1a9ea:	f01c fff6 	bl	379da <net_buf_slist_get>
   1a9ee:	f04f 0300 	mov.w	r3, #0
		handle = data->handle;
   1a9f2:	f8b0 a018 	ldrh.w	sl, [r0, #24]
		net_buf_simple_add_mem(&reassembled_data, buf->data, buf->len);
   1a9f6:	8a02      	ldrh	r2, [r0, #16]
   1a9f8:	68c1      	ldr	r1, [r0, #12]
   1a9fa:	80bb      	strh	r3, [r7, #4]
		buf = net_buf_slist_get(&chan->att->prep_queue);
   1a9fc:	4606      	mov	r6, r0
	buf->data = buf->__buf;
   1a9fe:	68bb      	ldr	r3, [r7, #8]
		net_buf_simple_add_mem(&reassembled_data, buf->data, buf->len);
   1aa00:	483e      	ldr	r0, [pc, #248]	; (1aafc <att_exec_write_req+0x13c>)
   1aa02:	603b      	str	r3, [r7, #0]
   1aa04:	f01d f83a 	bl	37a7c <net_buf_simple_add_mem>
					    &chan->att->prep_queue,
   1aa08:	f8d5 8000 	ldr.w	r8, [r5]
		err = exec_write_reassemble(handle, data->offset,
   1aa0c:	8b73      	ldrh	r3, [r6, #26]
	return list->head;
   1aa0e:	f8d8 4024 	ldr.w	r4, [r8, #36]	; 0x24
   1aa12:	9307      	str	r3, [sp, #28]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, entry, next, node) {
   1aa14:	b124      	cbz	r4, 1aa20 <att_exec_write_req+0x60>
	return node->next;
   1aa16:	f8d4 9000 	ldr.w	r9, [r4]
   1aa1a:	f04f 0b00 	mov.w	fp, #0
   1aa1e:	b9d4      	cbnz	r4, 1aa56 <att_exec_write_req+0x96>
		if (!err && flags == BT_ATT_FLAG_EXEC) {
   1aa20:	9b05      	ldr	r3, [sp, #20]
   1aa22:	2b01      	cmp	r3, #1
   1aa24:	d151      	bne.n	1aaca <att_exec_write_req+0x10a>
			err = att_write_rsp(chan, BT_ATT_OP_EXEC_WRITE_REQ, 0,
   1aa26:	88bb      	ldrh	r3, [r7, #4]
   1aa28:	9302      	str	r3, [sp, #8]
   1aa2a:	683b      	ldr	r3, [r7, #0]
   1aa2c:	9301      	str	r3, [sp, #4]
   1aa2e:	8b73      	ldrh	r3, [r6, #26]
   1aa30:	9300      	str	r3, [sp, #0]
   1aa32:	2200      	movs	r2, #0
   1aa34:	4653      	mov	r3, sl
   1aa36:	2118      	movs	r1, #24
   1aa38:	4628      	mov	r0, r5
   1aa3a:	f7ff fecf 	bl	1a7dc <att_write_rsp>
			if (err) {
   1aa3e:	4604      	mov	r4, r0
   1aa40:	b128      	cbz	r0, 1aa4e <att_exec_write_req+0x8e>
	if (!req) {
   1aa42:	4603      	mov	r3, r0
   1aa44:	8b32      	ldrh	r2, [r6, #24]
   1aa46:	2118      	movs	r1, #24
   1aa48:	4628      	mov	r0, r5
   1aa4a:	f01b ff44 	bl	368d6 <send_err_rsp.part.0>
		net_buf_unref(buf);
   1aa4e:	4630      	mov	r0, r6
   1aa50:	f012 ff06 	bl	2d860 <net_buf_unref>
   1aa54:	e7bf      	b.n	1a9d6 <att_exec_write_req+0x16>
		if (tmp_data->handle == handle) {
   1aa56:	8b22      	ldrh	r2, [r4, #24]
   1aa58:	4552      	cmp	r2, sl
   1aa5a:	d132      	bne.n	1aac2 <att_exec_write_req+0x102>
			if (tmp_data->offset == 0) {
   1aa5c:	8b62      	ldrh	r2, [r4, #26]
   1aa5e:	2a00      	cmp	r2, #0
   1aa60:	d0de      	beq.n	1aa20 <att_exec_write_req+0x60>
			if (tmp_data->offset != buf->len + offset) {
   1aa62:	88b9      	ldrh	r1, [r7, #4]
   1aa64:	9b07      	ldr	r3, [sp, #28]
   1aa66:	1858      	adds	r0, r3, r1
   1aa68:	4282      	cmp	r2, r0
   1aa6a:	d13d      	bne.n	1aae8 <att_exec_write_req+0x128>
			if (buf->len + entry->len > buf->size) {
   1aa6c:	8a22      	ldrh	r2, [r4, #16]
   1aa6e:	88f8      	ldrh	r0, [r7, #6]
   1aa70:	4411      	add	r1, r2
   1aa72:	4281      	cmp	r1, r0
   1aa74:	dc3f      	bgt.n	1aaf6 <att_exec_write_req+0x136>
			net_buf_simple_add_mem(buf, entry->data, entry->len);
   1aa76:	68e1      	ldr	r1, [r4, #12]
   1aa78:	4638      	mov	r0, r7
   1aa7a:	f01c ffff 	bl	37a7c <net_buf_simple_add_mem>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   1aa7e:	6822      	ldr	r2, [r4, #0]
   1aa80:	f1bb 0f00 	cmp.w	fp, #0
   1aa84:	d114      	bne.n	1aab0 <att_exec_write_req+0xf0>
   1aa86:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
	list->head = node;
   1aa8a:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
Z_GENLIST_REMOVE(slist, snode)
   1aa8e:	428c      	cmp	r4, r1
   1aa90:	d101      	bne.n	1aa96 <att_exec_write_req+0xd6>
	list->tail = node;
   1aa92:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
	parent->next = child;
   1aa96:	2300      	movs	r3, #0
   1aa98:	6023      	str	r3, [r4, #0]
			net_buf_unref(entry);
   1aa9a:	4620      	mov	r0, r4
   1aa9c:	f012 fee0 	bl	2d860 <net_buf_unref>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, entry, next, node) {
   1aaa0:	f1b9 0f00 	cmp.w	r9, #0
   1aaa4:	d00f      	beq.n	1aac6 <att_exec_write_req+0x106>
	return node->next;
   1aaa6:	f8d9 2000 	ldr.w	r2, [r9]
   1aaaa:	464c      	mov	r4, r9
   1aaac:	4691      	mov	r9, r2
   1aaae:	e7b6      	b.n	1aa1e <att_exec_write_req+0x5e>
	parent->next = child;
   1aab0:	f8cb 2000 	str.w	r2, [fp]
Z_GENLIST_REMOVE(slist, snode)
   1aab4:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
   1aab8:	4294      	cmp	r4, r2
	list->tail = node;
   1aaba:	bf08      	it	eq
   1aabc:	f8c8 b028 	streq.w	fp, [r8, #40]	; 0x28
}
   1aac0:	e7e9      	b.n	1aa96 <att_exec_write_req+0xd6>
			prev = &entry->node;
   1aac2:	46a3      	mov	fp, r4
   1aac4:	e7ec      	b.n	1aaa0 <att_exec_write_req+0xe0>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, entry, next, node) {
   1aac6:	464a      	mov	r2, r9
   1aac8:	e7ef      	b.n	1aaaa <att_exec_write_req+0xea>
		err = exec_write_reassemble(handle, data->offset,
   1aaca:	2400      	movs	r4, #0
   1aacc:	e7bf      	b.n	1aa4e <att_exec_write_req+0x8e>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
   1aace:	2119      	movs	r1, #25
   1aad0:	9806      	ldr	r0, [sp, #24]
   1aad2:	4622      	mov	r2, r4
   1aad4:	f7ff ff34 	bl	1a940 <bt_att_create_pdu>
	if (!buf) {
   1aad8:	4601      	mov	r1, r0
   1aada:	b118      	cbz	r0, 1aae4 <att_exec_write_req+0x124>
	bt_att_chan_send_rsp(chan, buf);
   1aadc:	4628      	mov	r0, r5
   1aade:	f01b fcca 	bl	36476 <bt_att_chan_send_rsp>
	return 0;
   1aae2:	e77d      	b.n	1a9e0 <att_exec_write_req+0x20>
		return BT_ATT_ERR_UNLIKELY;
   1aae4:	200e      	movs	r0, #14
	return att_exec_write_rsp(chan, req->flags);
   1aae6:	e77c      	b.n	1a9e2 <att_exec_write_req+0x22>
				return BT_ATT_ERR_INVALID_OFFSET;
   1aae8:	2307      	movs	r3, #7
	if (!req) {
   1aaea:	4652      	mov	r2, sl
   1aaec:	2118      	movs	r1, #24
   1aaee:	4628      	mov	r0, r5
   1aaf0:	f01b fef1 	bl	368d6 <send_err_rsp.part.0>
			return 0;
   1aaf4:	e774      	b.n	1a9e0 <att_exec_write_req+0x20>
				return BT_ATT_ERR_INVALID_ATTRIBUTE_LEN;
   1aaf6:	230d      	movs	r3, #13
   1aaf8:	e7f7      	b.n	1aaea <att_exec_write_req+0x12a>
   1aafa:	bf00      	nop
   1aafc:	200002e8 	.word	0x200002e8

0001ab00 <att_prepare_write_req>:
{
   1ab00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab04:	460d      	mov	r5, r1
   1ab06:	b087      	sub	sp, #28
   1ab08:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1ab0a:	2104      	movs	r1, #4
   1ab0c:	f105 000c 	add.w	r0, r5, #12
   1ab10:	f01c ffd5 	bl	37abe <net_buf_simple_pull_mem>
	return att_prep_write_rsp(chan, handle, offset, buf->data, buf->len);
   1ab14:	68ef      	ldr	r7, [r5, #12]
   1ab16:	8a2e      	ldrh	r6, [r5, #16]
	struct bt_conn *conn = chan->chan.chan.conn;
   1ab18:	6865      	ldr	r5, [r4, #4]
	handle = sys_le16_to_cpu(req->handle);
   1ab1a:	f8b0 9000 	ldrh.w	r9, [r0]
	offset = sys_le16_to_cpu(req->offset);
   1ab1e:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	if (!bt_gatt_change_aware(conn, true)) {
   1ab22:	2101      	movs	r1, #1
   1ab24:	4628      	mov	r0, r5
	handle = sys_le16_to_cpu(req->handle);
   1ab26:	fa1f fa89 	uxth.w	sl, r9
	if (!bt_gatt_change_aware(conn, true)) {
   1ab2a:	f01c fb0a 	bl	37142 <bt_gatt_change_aware>
   1ab2e:	b948      	cbnz	r0, 1ab44 <att_prepare_write_req+0x44>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1ab30:	2105      	movs	r1, #5
   1ab32:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1ab36:	f01b fcc5 	bl	364c4 <atomic_test_and_set_bit>
   1ab3a:	bb30      	cbnz	r0, 1ab8a <att_prepare_write_req+0x8a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1ab3c:	2012      	movs	r0, #18
}
   1ab3e:	b007      	add	sp, #28
   1ab40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!handle) {
   1ab44:	f1ba 0f00 	cmp.w	sl, #0
   1ab48:	d045      	beq.n	1abd6 <att_prepare_write_req+0xd6>
	(void)memset(&data, 0, sizeof(data));
   1ab4a:	2214      	movs	r2, #20
   1ab4c:	2100      	movs	r1, #0
   1ab4e:	a801      	add	r0, sp, #4
   1ab50:	f01a fcfc 	bl	3554c <memset>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1ab54:	2301      	movs	r3, #1
   1ab56:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
   1ab5a:	4a21      	ldr	r2, [pc, #132]	; (1abe0 <att_prepare_write_req+0xe0>)
	data.conn = conn;
   1ab5c:	9501      	str	r5, [sp, #4]
	data.len = len;
   1ab5e:	b2f6      	uxtb	r6, r6
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
   1ab60:	ab01      	add	r3, sp, #4
   1ab62:	4651      	mov	r1, sl
   1ab64:	4650      	mov	r0, sl
	data.offset = offset;
   1ab66:	f8ad 8012 	strh.w	r8, [sp, #18]
	data.value = value;
   1ab6a:	9703      	str	r7, [sp, #12]
	data.len = len;
   1ab6c:	f8ad 6010 	strh.w	r6, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
   1ab70:	f01b fbb1 	bl	362d6 <bt_gatt_foreach_attr>
	if (data.err) {
   1ab74:	f89d b014 	ldrb.w	fp, [sp, #20]
   1ab78:	f1bb 0f00 	cmp.w	fp, #0
   1ab7c:	d007      	beq.n	1ab8e <att_prepare_write_req+0x8e>
	if (!req) {
   1ab7e:	465b      	mov	r3, fp
   1ab80:	4652      	mov	r2, sl
   1ab82:	2116      	movs	r1, #22
   1ab84:	4620      	mov	r0, r4
   1ab86:	f01b fea6 	bl	368d6 <send_err_rsp.part.0>
			return 0;
   1ab8a:	2000      	movs	r0, #0
   1ab8c:	e7d7      	b.n	1ab3e <att_prepare_write_req+0x3e>
	net_buf_slist_put(&chan->att->prep_queue, data.buf);
   1ab8e:	6820      	ldr	r0, [r4, #0]
   1ab90:	9902      	ldr	r1, [sp, #8]
   1ab92:	3024      	adds	r0, #36	; 0x24
   1ab94:	f01c ff0b 	bl	379ae <net_buf_slist_put>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
   1ab98:	465a      	mov	r2, fp
   1ab9a:	2117      	movs	r1, #23
   1ab9c:	4628      	mov	r0, r5
   1ab9e:	f7ff fecf 	bl	1a940 <bt_att_create_pdu>
   1aba2:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1aba4:	b1c8      	cbz	r0, 1abda <att_prepare_write_req+0xda>
	return net_buf_simple_add(&buf->b, len);
   1aba6:	2104      	movs	r1, #4
   1aba8:	300c      	adds	r0, #12
   1abaa:	f01c ff61 	bl	37a70 <net_buf_simple_add>
	rsp->handle = sys_cpu_to_le16(handle);
   1abae:	f8a0 9000 	strh.w	r9, [r0]
	rsp->offset = sys_cpu_to_le16(offset);
   1abb2:	f8a0 8002 	strh.w	r8, [r0, #2]
   1abb6:	4605      	mov	r5, r0
   1abb8:	9802      	ldr	r0, [sp, #8]
   1abba:	4631      	mov	r1, r6
   1abbc:	300c      	adds	r0, #12
   1abbe:	f01c ff57 	bl	37a70 <net_buf_simple_add>
	memcpy(rsp->value, value, len);
   1abc2:	4639      	mov	r1, r7
   1abc4:	4632      	mov	r2, r6
   1abc6:	1d28      	adds	r0, r5, #4
   1abc8:	f01a fcb5 	bl	35536 <memcpy>
	bt_att_chan_send_rsp(chan, data.buf);
   1abcc:	9902      	ldr	r1, [sp, #8]
   1abce:	4620      	mov	r0, r4
   1abd0:	f01b fc51 	bl	36476 <bt_att_chan_send_rsp>
	return 0;
   1abd4:	e7d9      	b.n	1ab8a <att_prepare_write_req+0x8a>
		return BT_ATT_ERR_INVALID_HANDLE;
   1abd6:	2001      	movs	r0, #1
   1abd8:	e7b1      	b.n	1ab3e <att_prepare_write_req+0x3e>
		return BT_ATT_ERR_UNLIKELY;
   1abda:	200e      	movs	r0, #14
   1abdc:	e7af      	b.n	1ab3e <att_prepare_write_req+0x3e>
   1abde:	bf00      	nop
   1abe0:	0001a3cd 	.word	0x0001a3cd

0001abe4 <att_read_group_req>:
{
   1abe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1abe8:	8a0e      	ldrh	r6, [r1, #16]
   1abea:	3e04      	subs	r6, #4
   1abec:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   1abee:	2e02      	cmp	r6, #2
{
   1abf0:	4604      	mov	r4, r0
   1abf2:	b08c      	sub	sp, #48	; 0x30
   1abf4:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1abf6:	d001      	beq.n	1abfc <att_read_group_req+0x18>
   1abf8:	2e10      	cmp	r6, #16
   1abfa:	d16a      	bne.n	1acd2 <att_read_group_req+0xee>
	return net_buf_simple_pull_mem(&buf->b, len);
   1abfc:	2104      	movs	r1, #4
   1abfe:	300c      	adds	r0, #12
   1ac00:	f01c ff5d 	bl	37abe <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1ac04:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   1ac08:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1ac0a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1ac0c:	1d01      	adds	r1, r0, #4
   1ac0e:	4632      	mov	r2, r6
   1ac10:	4640      	mov	r0, r8
   1ac12:	f01a fdb6 	bl	35782 <bt_uuid_create>
   1ac16:	2800      	cmp	r0, #0
   1ac18:	d05d      	beq.n	1acd6 <att_read_group_req+0xf2>
	if (!start || !end) {
   1ac1a:	2d00      	cmp	r5, #0
   1ac1c:	d03a      	beq.n	1ac94 <att_read_group_req+0xb0>
   1ac1e:	2600      	movs	r6, #0
   1ac20:	2f00      	cmp	r7, #0
   1ac22:	d036      	beq.n	1ac92 <att_read_group_req+0xae>
	if (start > end) {
   1ac24:	42bd      	cmp	r5, r7
   1ac26:	d835      	bhi.n	1ac94 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1ac28:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1ac2c:	a901      	add	r1, sp, #4
   1ac2e:	4640      	mov	r0, r8
   1ac30:	f88d 6004 	strb.w	r6, [sp, #4]
   1ac34:	f8ad 3006 	strh.w	r3, [sp, #6]
   1ac38:	f01a fd75 	bl	35726 <bt_uuid_cmp>
   1ac3c:	bb70      	cbnz	r0, 1ac9c <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   1ac3e:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   1ac40:	2214      	movs	r2, #20
   1ac42:	2100      	movs	r1, #0
   1ac44:	a807      	add	r0, sp, #28
   1ac46:	f01a fc81 	bl	3554c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1ac4a:	2201      	movs	r2, #1
   1ac4c:	2111      	movs	r1, #17
   1ac4e:	4630      	mov	r0, r6
   1ac50:	f7ff fe76 	bl	1a940 <bt_att_create_pdu>
   1ac54:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   1ac56:	2800      	cmp	r0, #0
   1ac58:	d03d      	beq.n	1acd6 <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   1ac5a:	2101      	movs	r1, #1
   1ac5c:	300c      	adds	r0, #12
	data.uuid = uuid;
   1ac5e:	e9cd 4807 	strd	r4, r8, [sp, #28]
   1ac62:	f01c ff05 	bl	37a70 <net_buf_simple_add>
	data.rsp->len = 0U;
   1ac66:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1ac68:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1ac6a:	4a1c      	ldr	r2, [pc, #112]	; (1acdc <att_read_group_req+0xf8>)
	data.rsp->len = 0U;
   1ac6c:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1ac6e:	4639      	mov	r1, r7
	data.group = NULL;
   1ac70:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1ac72:	4628      	mov	r0, r5
   1ac74:	ab07      	add	r3, sp, #28
   1ac76:	f01b fb2e 	bl	362d6 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1ac7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ac7c:	781b      	ldrb	r3, [r3, #0]
   1ac7e:	bb1b      	cbnz	r3, 1acc8 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1ac80:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ac82:	6998      	ldr	r0, [r3, #24]
   1ac84:	f7ff f96c 	bl	19f60 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1ac88:	9809      	ldr	r0, [sp, #36]	; 0x24
   1ac8a:	f012 fde9 	bl	2d860 <net_buf_unref>
	if (!req) {
   1ac8e:	230a      	movs	r3, #10
   1ac90:	e001      	b.n	1ac96 <att_read_group_req+0xb2>
			*err = 0U;
   1ac92:	463d      	mov	r5, r7
	if (!req) {
   1ac94:	2301      	movs	r3, #1
   1ac96:	462a      	mov	r2, r5
   1ac98:	2110      	movs	r1, #16
   1ac9a:	e00e      	b.n	1acba <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   1ac9c:	f642 0301 	movw	r3, #10241	; 0x2801
   1aca0:	a907      	add	r1, sp, #28
   1aca2:	4640      	mov	r0, r8
   1aca4:	f88d 601c 	strb.w	r6, [sp, #28]
   1aca8:	f8ad 301e 	strh.w	r3, [sp, #30]
   1acac:	f01a fd3b 	bl	35726 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1acb0:	2800      	cmp	r0, #0
   1acb2:	d0c4      	beq.n	1ac3e <att_read_group_req+0x5a>
	if (!req) {
   1acb4:	2310      	movs	r3, #16
   1acb6:	462a      	mov	r2, r5
   1acb8:	4619      	mov	r1, r3
   1acba:	4620      	mov	r0, r4
   1acbc:	f01b fe0b 	bl	368d6 <send_err_rsp.part.0>
		return 0;
   1acc0:	2000      	movs	r0, #0
}
   1acc2:	b00c      	add	sp, #48	; 0x30
   1acc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   1acc8:	9909      	ldr	r1, [sp, #36]	; 0x24
   1acca:	4620      	mov	r0, r4
   1accc:	f01b fbd3 	bl	36476 <bt_att_chan_send_rsp>
	return 0;
   1acd0:	e7f6      	b.n	1acc0 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   1acd2:	2004      	movs	r0, #4
   1acd4:	e7f5      	b.n	1acc2 <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   1acd6:	200e      	movs	r0, #14
   1acd8:	e7f3      	b.n	1acc2 <att_read_group_req+0xde>
   1acda:	bf00      	nop
   1acdc:	0001a281 	.word	0x0001a281

0001ace0 <att_read_mult_vl_req>:
{
   1ace0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1ace4:	6846      	ldr	r6, [r0, #4]
{
   1ace6:	b085      	sub	sp, #20
   1ace8:	4604      	mov	r4, r0
   1acea:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1acec:	4630      	mov	r0, r6
   1acee:	2101      	movs	r1, #1
   1acf0:	f01c fa27 	bl	37142 <bt_gatt_change_aware>
   1acf4:	b950      	cbnz	r0, 1ad0c <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1acf6:	2105      	movs	r1, #5
   1acf8:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1acfc:	f01b fbe2 	bl	364c4 <atomic_test_and_set_bit>
   1ad00:	2800      	cmp	r0, #0
   1ad02:	d13b      	bne.n	1ad7c <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1ad04:	2012      	movs	r0, #18
}
   1ad06:	b005      	add	sp, #20
   1ad08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1ad0c:	2210      	movs	r2, #16
   1ad0e:	2100      	movs	r1, #0
   1ad10:	4668      	mov	r0, sp
   1ad12:	f01a fc1b 	bl	3554c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   1ad16:	2200      	movs	r2, #0
   1ad18:	2121      	movs	r1, #33	; 0x21
   1ad1a:	4630      	mov	r0, r6
   1ad1c:	f7ff fe10 	bl	1a940 <bt_att_create_pdu>
   1ad20:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1ad22:	b368      	cbz	r0, 1ad80 <att_read_mult_vl_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1ad24:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1ad84 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   1ad28:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   1ad2a:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1ad2e:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   1ad32:	8a2b      	ldrh	r3, [r5, #16]
   1ad34:	2b01      	cmp	r3, #1
   1ad36:	d804      	bhi.n	1ad42 <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   1ad38:	9902      	ldr	r1, [sp, #8]
   1ad3a:	4620      	mov	r0, r4
   1ad3c:	f01b fb9b 	bl	36476 <bt_att_chan_send_rsp>
	return 0;
   1ad40:	e01c      	b.n	1ad7c <att_read_mult_vl_req+0x9c>
   1ad42:	4638      	mov	r0, r7
   1ad44:	f01c fec3 	bl	37ace <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1ad48:	466b      	mov	r3, sp
   1ad4a:	464a      	mov	r2, r9
   1ad4c:	4601      	mov	r1, r0
   1ad4e:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1ad50:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1ad54:	f01b fabf 	bl	362d6 <bt_gatt_foreach_attr>
		if (data.err) {
   1ad58:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1ad5c:	2b00      	cmp	r3, #0
   1ad5e:	d0e8      	beq.n	1ad32 <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1ad60:	9b02      	ldr	r3, [sp, #8]
   1ad62:	6998      	ldr	r0, [r3, #24]
   1ad64:	f7ff f8fc 	bl	19f60 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1ad68:	9802      	ldr	r0, [sp, #8]
   1ad6a:	f012 fd79 	bl	2d860 <net_buf_unref>
	if (!req) {
   1ad6e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1ad72:	4632      	mov	r2, r6
   1ad74:	2120      	movs	r1, #32
   1ad76:	4620      	mov	r0, r4
   1ad78:	f01b fdad 	bl	368d6 <send_err_rsp.part.0>
			return 0;
   1ad7c:	2000      	movs	r0, #0
   1ad7e:	e7c2      	b.n	1ad06 <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   1ad80:	200e      	movs	r0, #14
   1ad82:	e7c0      	b.n	1ad06 <att_read_mult_vl_req+0x26>
   1ad84:	0003664b 	.word	0x0003664b

0001ad88 <att_read_mult_req>:
{
   1ad88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1ad8c:	6846      	ldr	r6, [r0, #4]
{
   1ad8e:	b085      	sub	sp, #20
   1ad90:	4604      	mov	r4, r0
   1ad92:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1ad94:	4630      	mov	r0, r6
   1ad96:	2101      	movs	r1, #1
   1ad98:	f01c f9d3 	bl	37142 <bt_gatt_change_aware>
   1ad9c:	b950      	cbnz	r0, 1adb4 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1ad9e:	2105      	movs	r1, #5
   1ada0:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1ada4:	f01b fb8e 	bl	364c4 <atomic_test_and_set_bit>
   1ada8:	2800      	cmp	r0, #0
   1adaa:	d13b      	bne.n	1ae24 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1adac:	2012      	movs	r0, #18
}
   1adae:	b005      	add	sp, #20
   1adb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1adb4:	2210      	movs	r2, #16
   1adb6:	2100      	movs	r1, #0
   1adb8:	4668      	mov	r0, sp
   1adba:	f01a fbc7 	bl	3554c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1adbe:	2200      	movs	r2, #0
   1adc0:	210f      	movs	r1, #15
   1adc2:	4630      	mov	r0, r6
   1adc4:	f7ff fdbc 	bl	1a940 <bt_att_create_pdu>
   1adc8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1adca:	b368      	cbz	r0, 1ae28 <att_read_mult_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1adcc:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1ae2c <att_read_mult_req+0xa4>
	data.chan = chan;
   1add0:	9400      	str	r4, [sp, #0]
   1add2:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1add6:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   1adda:	8a2b      	ldrh	r3, [r5, #16]
   1addc:	2b01      	cmp	r3, #1
   1adde:	d804      	bhi.n	1adea <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   1ade0:	9902      	ldr	r1, [sp, #8]
   1ade2:	4620      	mov	r0, r4
   1ade4:	f01b fb47 	bl	36476 <bt_att_chan_send_rsp>
	return 0;
   1ade8:	e01c      	b.n	1ae24 <att_read_mult_req+0x9c>
   1adea:	4638      	mov	r0, r7
   1adec:	f01c fe6f 	bl	37ace <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1adf0:	466b      	mov	r3, sp
   1adf2:	464a      	mov	r2, r9
   1adf4:	4601      	mov	r1, r0
   1adf6:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1adf8:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1adfc:	f01b fa6b 	bl	362d6 <bt_gatt_foreach_attr>
		if (data.err) {
   1ae00:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1ae04:	2b00      	cmp	r3, #0
   1ae06:	d0e8      	beq.n	1adda <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1ae08:	9b02      	ldr	r3, [sp, #8]
   1ae0a:	6998      	ldr	r0, [r3, #24]
   1ae0c:	f7ff f8a8 	bl	19f60 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1ae10:	9802      	ldr	r0, [sp, #8]
   1ae12:	f012 fd25 	bl	2d860 <net_buf_unref>
	if (!req) {
   1ae16:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1ae1a:	4632      	mov	r2, r6
   1ae1c:	210e      	movs	r1, #14
   1ae1e:	4620      	mov	r0, r4
   1ae20:	f01b fd59 	bl	368d6 <send_err_rsp.part.0>
			return 0;
   1ae24:	2000      	movs	r0, #0
   1ae26:	e7c2      	b.n	1adae <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   1ae28:	200e      	movs	r0, #14
   1ae2a:	e7c0      	b.n	1adae <att_read_mult_req+0x26>
   1ae2c:	00036605 	.word	0x00036605

0001ae30 <att_read_rsp>:
{
   1ae30:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1ae34:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   1ae38:	4604      	mov	r4, r0
   1ae3a:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1ae3c:	4640      	mov	r0, r8
   1ae3e:	2101      	movs	r1, #1
{
   1ae40:	4617      	mov	r7, r2
   1ae42:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   1ae44:	f01c f97d 	bl	37142 <bt_gatt_change_aware>
   1ae48:	b948      	cbnz	r0, 1ae5e <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1ae4a:	2105      	movs	r1, #5
   1ae4c:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1ae50:	f01b fb38 	bl	364c4 <atomic_test_and_set_bit>
   1ae54:	bb78      	cbnz	r0, 1aeb6 <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1ae56:	2012      	movs	r0, #18
}
   1ae58:	b004      	add	sp, #16
   1ae5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   1ae5e:	b38d      	cbz	r5, 1aec4 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   1ae60:	2210      	movs	r2, #16
   1ae62:	2100      	movs	r1, #0
   1ae64:	4668      	mov	r0, sp
   1ae66:	f01a fb71 	bl	3554c <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1ae6a:	2200      	movs	r2, #0
   1ae6c:	4639      	mov	r1, r7
   1ae6e:	4640      	mov	r0, r8
   1ae70:	f7ff fd66 	bl	1a940 <bt_att_create_pdu>
   1ae74:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1ae76:	b338      	cbz	r0, 1aec8 <att_read_rsp+0x98>
	data.offset = offset;
   1ae78:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1ae7c:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1ae80:	2301      	movs	r3, #1
   1ae82:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1ae86:	4a11      	ldr	r2, [pc, #68]	; (1aecc <att_read_rsp+0x9c>)
	data.chan = chan;
   1ae88:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1ae8a:	466b      	mov	r3, sp
   1ae8c:	4629      	mov	r1, r5
   1ae8e:	4628      	mov	r0, r5
   1ae90:	f01b fa21 	bl	362d6 <bt_gatt_foreach_attr>
	if (data.err) {
   1ae94:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1ae98:	b17b      	cbz	r3, 1aeba <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1ae9a:	9b02      	ldr	r3, [sp, #8]
   1ae9c:	6998      	ldr	r0, [r3, #24]
   1ae9e:	f7ff f85f 	bl	19f60 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1aea2:	9802      	ldr	r0, [sp, #8]
   1aea4:	f012 fcdc 	bl	2d860 <net_buf_unref>
	if (!req) {
   1aea8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1aeac:	462a      	mov	r2, r5
   1aeae:	4631      	mov	r1, r6
   1aeb0:	4620      	mov	r0, r4
   1aeb2:	f01b fd10 	bl	368d6 <send_err_rsp.part.0>
			return 0;
   1aeb6:	2000      	movs	r0, #0
   1aeb8:	e7ce      	b.n	1ae58 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   1aeba:	9902      	ldr	r1, [sp, #8]
   1aebc:	4620      	mov	r0, r4
   1aebe:	f01b fada 	bl	36476 <bt_att_chan_send_rsp>
	return 0;
   1aec2:	e7f8      	b.n	1aeb6 <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   1aec4:	2001      	movs	r0, #1
   1aec6:	e7c7      	b.n	1ae58 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   1aec8:	200e      	movs	r0, #14
   1aeca:	e7c5      	b.n	1ae58 <att_read_rsp+0x28>
   1aecc:	00036605 	.word	0x00036605

0001aed0 <att_read_type_req>:
{
   1aed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1aed4:	8a0d      	ldrh	r5, [r1, #16]
   1aed6:	3d04      	subs	r5, #4
   1aed8:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   1aeda:	2d02      	cmp	r5, #2
{
   1aedc:	4604      	mov	r4, r0
   1aede:	b08c      	sub	sp, #48	; 0x30
   1aee0:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1aee2:	d001      	beq.n	1aee8 <att_read_type_req+0x18>
   1aee4:	2d10      	cmp	r5, #16
   1aee6:	d150      	bne.n	1af8a <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   1aee8:	2104      	movs	r1, #4
   1aeea:	300c      	adds	r0, #12
   1aeec:	f01c fde7 	bl	37abe <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1aef0:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   1aef4:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1aef6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1aef8:	1d01      	adds	r1, r0, #4
   1aefa:	462a      	mov	r2, r5
   1aefc:	4640      	mov	r0, r8
   1aefe:	f01a fc40 	bl	35782 <bt_uuid_create>
   1af02:	b188      	cbz	r0, 1af28 <att_read_type_req+0x58>
	if (!start || !end) {
   1af04:	b19e      	cbz	r6, 1af2e <att_read_type_req+0x5e>
   1af06:	b18f      	cbz	r7, 1af2c <att_read_type_req+0x5c>
	if (start > end) {
   1af08:	42b7      	cmp	r7, r6
   1af0a:	d310      	bcc.n	1af2e <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   1af0c:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   1af0e:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   1af10:	2100      	movs	r1, #0
   1af12:	eb0d 0002 	add.w	r0, sp, r2
   1af16:	f01a fb19 	bl	3554c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1af1a:	2201      	movs	r2, #1
   1af1c:	2109      	movs	r1, #9
   1af1e:	4628      	mov	r0, r5
   1af20:	f7ff fd0e 	bl	1a940 <bt_att_create_pdu>
   1af24:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   1af26:	b960      	cbnz	r0, 1af42 <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   1af28:	200e      	movs	r0, #14
   1af2a:	e007      	b.n	1af3c <att_read_type_req+0x6c>
			*err = 0U;
   1af2c:	463e      	mov	r6, r7
	if (!req) {
   1af2e:	2301      	movs	r3, #1
   1af30:	4632      	mov	r2, r6
   1af32:	2108      	movs	r1, #8
   1af34:	4620      	mov	r0, r4
   1af36:	f01b fcce 	bl	368d6 <send_err_rsp.part.0>
		return 0;
   1af3a:	2000      	movs	r0, #0
}
   1af3c:	b00c      	add	sp, #48	; 0x30
   1af3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   1af42:	2101      	movs	r1, #1
   1af44:	300c      	adds	r0, #12
	data.uuid = uuid;
   1af46:	e9cd 4806 	strd	r4, r8, [sp, #24]
   1af4a:	f01c fd91 	bl	37a70 <net_buf_simple_add>
	data.rsp->len = 0U;
   1af4e:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1af50:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   1af52:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1af54:	230a      	movs	r3, #10
   1af56:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1af5a:	4a0d      	ldr	r2, [pc, #52]	; (1af90 <att_read_type_req+0xc0>)
   1af5c:	ab06      	add	r3, sp, #24
   1af5e:	4639      	mov	r1, r7
   1af60:	4630      	mov	r0, r6
   1af62:	f01b f9b8 	bl	362d6 <bt_gatt_foreach_attr>
	if (data.err) {
   1af66:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1af6a:	b14b      	cbz	r3, 1af80 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1af6c:	9b08      	ldr	r3, [sp, #32]
   1af6e:	6998      	ldr	r0, [r3, #24]
   1af70:	f7fe fff6 	bl	19f60 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1af74:	9808      	ldr	r0, [sp, #32]
   1af76:	f012 fc73 	bl	2d860 <net_buf_unref>
	if (!req) {
   1af7a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1af7e:	e7d7      	b.n	1af30 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   1af80:	9908      	ldr	r1, [sp, #32]
   1af82:	4620      	mov	r0, r4
   1af84:	f01b fa77 	bl	36476 <bt_att_chan_send_rsp>
	return 0;
   1af88:	e7d7      	b.n	1af3a <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   1af8a:	2004      	movs	r0, #4
   1af8c:	e7d6      	b.n	1af3c <att_read_type_req+0x6c>
   1af8e:	bf00      	nop
   1af90:	0001a32d 	.word	0x0001a32d

0001af94 <att_find_type_req>:
{
   1af94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1af98:	460f      	mov	r7, r1
   1af9a:	b086      	sub	sp, #24
   1af9c:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1af9e:	2106      	movs	r1, #6
   1afa0:	f107 000c 	add.w	r0, r7, #12
   1afa4:	f01c fd8b 	bl	37abe <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1afa8:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1afaa:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   1afae:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   1afb0:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   1afb4:	b1c5      	cbz	r5, 1afe8 <att_find_type_req+0x54>
   1afb6:	2300      	movs	r3, #0
   1afb8:	f1b8 0f00 	cmp.w	r8, #0
   1afbc:	d013      	beq.n	1afe6 <att_find_type_req+0x52>
	if (start > end) {
   1afbe:	4545      	cmp	r5, r8
   1afc0:	d812      	bhi.n	1afe8 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1afc2:	f88d 3000 	strb.w	r3, [sp]
   1afc6:	f88d 3004 	strb.w	r3, [sp, #4]
   1afca:	a901      	add	r1, sp, #4
   1afcc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1afd0:	4668      	mov	r0, sp
   1afd2:	f8ad 2002 	strh.w	r2, [sp, #2]
   1afd6:	f8ad 3006 	strh.w	r3, [sp, #6]
   1afda:	f01a fba4 	bl	35726 <bt_uuid_cmp>
   1afde:	4606      	mov	r6, r0
   1afe0:	b160      	cbz	r0, 1affc <att_find_type_req+0x68>
	if (!req) {
   1afe2:	230a      	movs	r3, #10
   1afe4:	e001      	b.n	1afea <att_find_type_req+0x56>
			*err = 0U;
   1afe6:	4645      	mov	r5, r8
	if (!req) {
   1afe8:	2301      	movs	r3, #1
   1afea:	462a      	mov	r2, r5
   1afec:	2106      	movs	r1, #6
   1afee:	4620      	mov	r0, r4
   1aff0:	f01b fc71 	bl	368d6 <send_err_rsp.part.0>
		return 0;
   1aff4:	2000      	movs	r0, #0
}
   1aff6:	b006      	add	sp, #24
   1aff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   1affc:	f8d4 a004 	ldr.w	sl, [r4, #4]
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1b000:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   1b002:	4601      	mov	r1, r0
   1b004:	2214      	movs	r2, #20
   1b006:	a801      	add	r0, sp, #4
   1b008:	f01a faa0 	bl	3554c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1b00c:	4632      	mov	r2, r6
   1b00e:	2107      	movs	r1, #7
   1b010:	4650      	mov	r0, sl
   1b012:	f7ff fc95 	bl	1a940 <bt_att_create_pdu>
   1b016:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1b018:	b1f8      	cbz	r0, 1b05a <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1b01a:	230a      	movs	r3, #10
   1b01c:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1b020:	4a0f      	ldr	r2, [pc, #60]	; (1b060 <att_find_type_req+0xcc>)
	data.chan = chan;
   1b022:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1b024:	ab01      	add	r3, sp, #4
   1b026:	4641      	mov	r1, r8
   1b028:	4628      	mov	r0, r5
	data.value = value;
   1b02a:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.value_len = value_len;
   1b02e:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1b032:	f01b f950 	bl	362d6 <bt_gatt_foreach_attr>
	if (data.err) {
   1b036:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1b03a:	b14b      	cbz	r3, 1b050 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b03c:	9b02      	ldr	r3, [sp, #8]
   1b03e:	6998      	ldr	r0, [r3, #24]
   1b040:	f7fe ff8e 	bl	19f60 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1b044:	9802      	ldr	r0, [sp, #8]
   1b046:	f012 fc0b 	bl	2d860 <net_buf_unref>
	if (!req) {
   1b04a:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1b04e:	e7cc      	b.n	1afea <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   1b050:	9902      	ldr	r1, [sp, #8]
   1b052:	4620      	mov	r0, r4
   1b054:	f01b fa0f 	bl	36476 <bt_att_chan_send_rsp>
	return 0;
   1b058:	e7cc      	b.n	1aff4 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   1b05a:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1b05c:	e7cb      	b.n	1aff6 <att_find_type_req+0x62>
   1b05e:	bf00      	nop
   1b060:	00019f7d 	.word	0x00019f7d

0001b064 <att_find_info_req>:
{
   1b064:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1b066:	68cb      	ldr	r3, [r1, #12]
	start_handle = sys_le16_to_cpu(req->start_handle);
   1b068:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1b06a:	885e      	ldrh	r6, [r3, #2]
{
   1b06c:	b085      	sub	sp, #20
   1b06e:	4604      	mov	r4, r0
	if (!start || !end) {
   1b070:	b195      	cbz	r5, 1b098 <att_find_info_req+0x34>
   1b072:	b186      	cbz	r6, 1b096 <att_find_info_req+0x32>
	if (start > end) {
   1b074:	42b5      	cmp	r5, r6
   1b076:	d80f      	bhi.n	1b098 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   1b078:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1b07a:	2210      	movs	r2, #16
   1b07c:	2100      	movs	r1, #0
   1b07e:	4668      	mov	r0, sp
   1b080:	f01a fa64 	bl	3554c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1b084:	2200      	movs	r2, #0
   1b086:	2105      	movs	r1, #5
   1b088:	4638      	mov	r0, r7
   1b08a:	f7ff fc59 	bl	1a940 <bt_att_create_pdu>
   1b08e:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   1b090:	b958      	cbnz	r0, 1b0aa <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   1b092:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   1b094:	e007      	b.n	1b0a6 <att_find_info_req+0x42>
			*err = 0U;
   1b096:	4635      	mov	r5, r6
	if (!req) {
   1b098:	2301      	movs	r3, #1
   1b09a:	462a      	mov	r2, r5
   1b09c:	2104      	movs	r1, #4
   1b09e:	4620      	mov	r0, r4
   1b0a0:	f01b fc19 	bl	368d6 <send_err_rsp.part.0>
		return 0;
   1b0a4:	2000      	movs	r0, #0
}
   1b0a6:	b005      	add	sp, #20
   1b0a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1b0aa:	466b      	mov	r3, sp
   1b0ac:	4a0a      	ldr	r2, [pc, #40]	; (1b0d8 <att_find_info_req+0x74>)
	data.chan = chan;
   1b0ae:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1b0b0:	4631      	mov	r1, r6
   1b0b2:	4628      	mov	r0, r5
   1b0b4:	f01b f90f 	bl	362d6 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1b0b8:	9b02      	ldr	r3, [sp, #8]
   1b0ba:	b943      	cbnz	r3, 1b0ce <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b0bc:	9b01      	ldr	r3, [sp, #4]
   1b0be:	6998      	ldr	r0, [r3, #24]
   1b0c0:	f7fe ff4e 	bl	19f60 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1b0c4:	9801      	ldr	r0, [sp, #4]
   1b0c6:	f012 fbcb 	bl	2d860 <net_buf_unref>
	if (!req) {
   1b0ca:	230a      	movs	r3, #10
   1b0cc:	e7e5      	b.n	1b09a <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   1b0ce:	9901      	ldr	r1, [sp, #4]
   1b0d0:	4620      	mov	r0, r4
   1b0d2:	f01b f9d0 	bl	36476 <bt_att_chan_send_rsp>
	return 0;
   1b0d6:	e7e5      	b.n	1b0a4 <att_find_info_req+0x40>
   1b0d8:	000362ed 	.word	0x000362ed

0001b0dc <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   1b0dc:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   1b0de:	4c0b      	ldr	r4, [pc, #44]	; (1b10c <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   1b0e0:	4d0b      	ldr	r5, [pc, #44]	; (1b110 <bt_att_init+0x34>)
   1b0e2:	4620      	mov	r0, r4
   1b0e4:	f01d fba8 	bl	38838 <z_impl_k_queue_init>
   1b0e8:	4629      	mov	r1, r5
   1b0ea:	4620      	mov	r0, r4
   1b0ec:	f01d fbd0 	bl	38890 <k_queue_append>
   1b0f0:	f105 0114 	add.w	r1, r5, #20
   1b0f4:	4620      	mov	r0, r4
   1b0f6:	f01d fbcb 	bl	38890 <k_queue_append>
   1b0fa:	f105 0128 	add.w	r1, r5, #40	; 0x28
   1b0fe:	4620      	mov	r0, r4
   1b100:	f01d fbc6 	bl	38890 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   1b104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   1b108:	f000 beb6 	b.w	1be78 <bt_gatt_init>
   1b10c:	20000af8 	.word	0x20000af8
   1b110:	20001c08 	.word	0x20001c08

0001b114 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1b114:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   1b116:	2300      	movs	r3, #0
{
   1b118:	4605      	mov	r5, r0
   1b11a:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   1b11c:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   1b11e:	f017 f9fb 	bl	32518 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   1b122:	4b0b      	ldr	r3, [pc, #44]	; (1b150 <bt_att_req_alloc+0x3c>)
   1b124:	681b      	ldr	r3, [r3, #0]
   1b126:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   1b128:	bf04      	itt	eq
   1b12a:	2500      	moveq	r5, #0
   1b12c:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1b12e:	a901      	add	r1, sp, #4
   1b130:	4808      	ldr	r0, [pc, #32]	; (1b154 <bt_att_req_alloc+0x40>)
   1b132:	462a      	mov	r2, r5
   1b134:	4623      	mov	r3, r4
   1b136:	f016 fadf 	bl	316f8 <k_mem_slab_alloc>
   1b13a:	4601      	mov	r1, r0
   1b13c:	b930      	cbnz	r0, 1b14c <bt_att_req_alloc+0x38>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1b13e:	9801      	ldr	r0, [sp, #4]
   1b140:	221c      	movs	r2, #28
   1b142:	f01a fa03 	bl	3554c <memset>

	return req;
   1b146:	9801      	ldr	r0, [sp, #4]
}
   1b148:	b003      	add	sp, #12
   1b14a:	bd30      	pop	{r4, r5, pc}
		return NULL;
   1b14c:	2000      	movs	r0, #0
   1b14e:	e7fb      	b.n	1b148 <bt_att_req_alloc+0x34>
   1b150:	20001c44 	.word	0x20001c44
   1b154:	20000a98 	.word	0x20000a98

0001b158 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1b158:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   1b15a:	6883      	ldr	r3, [r0, #8]
{
   1b15c:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   1b15e:	b14b      	cbz	r3, 1b174 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   1b160:	6998      	ldr	r0, [r3, #24]
   1b162:	f7fe fefd 	bl	19f60 <tx_meta_data_free>
		net_buf_unref(req->buf);
   1b166:	9b01      	ldr	r3, [sp, #4]
   1b168:	6898      	ldr	r0, [r3, #8]
   1b16a:	f012 fb79 	bl	2d860 <net_buf_unref>
		req->buf = NULL;
   1b16e:	9b01      	ldr	r3, [sp, #4]
   1b170:	2200      	movs	r2, #0
   1b172:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1b174:	4803      	ldr	r0, [pc, #12]	; (1b184 <bt_att_req_free+0x2c>)
   1b176:	a901      	add	r1, sp, #4
   1b178:	f01d faa0 	bl	386bc <k_mem_slab_free>
}
   1b17c:	b003      	add	sp, #12
   1b17e:	f85d fb04 	ldr.w	pc, [sp], #4
   1b182:	bf00      	nop
   1b184:	20000a98 	.word	0x20000a98

0001b188 <att_handle_rsp>:
{
   1b188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b18c:	4604      	mov	r4, r0
   1b18e:	b083      	sub	sp, #12
	k_work_cancel_delayable(&chan->timeout_work);
   1b190:	30b0      	adds	r0, #176	; 0xb0
{
   1b192:	af02      	add	r7, sp, #8
   1b194:	460e      	mov	r6, r1
   1b196:	4690      	mov	r8, r2
   1b198:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1b19a:	f01d fc66 	bl	38a6a <k_work_cancel_delayable>
	if (!chan->req) {
   1b19e:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   1b1a2:	b9b8      	cbnz	r0, 1b1d4 <att_handle_rsp+0x4c>
		LOG_WRN("No pending ATT request");
   1b1a4:	466d      	mov	r5, sp
   1b1a6:	b088      	sub	sp, #32
   1b1a8:	aa02      	add	r2, sp, #8
   1b1aa:	4b1c      	ldr	r3, [pc, #112]	; (1b21c <att_handle_rsp+0x94>)
   1b1ac:	6153      	str	r3, [r2, #20]
   1b1ae:	4b1c      	ldr	r3, [pc, #112]	; (1b220 <att_handle_rsp+0x98>)
   1b1b0:	6193      	str	r3, [r2, #24]
   1b1b2:	2303      	movs	r3, #3
   1b1b4:	f842 3f10 	str.w	r3, [r2, #16]!
   1b1b8:	481a      	ldr	r0, [pc, #104]	; (1b224 <att_handle_rsp+0x9c>)
   1b1ba:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1b1be:	f01b f924 	bl	3640a <z_log_msg_static_create.constprop.0>
   1b1c2:	46ad      	mov	sp, r5
	att_req_send_process(chan->att);
   1b1c4:	6820      	ldr	r0, [r4, #0]
   1b1c6:	f01b faac 	bl	36722 <att_req_send_process>
}
   1b1ca:	2000      	movs	r0, #0
   1b1cc:	3704      	adds	r7, #4
   1b1ce:	46bd      	mov	sp, r7
   1b1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   1b1d4:	4b14      	ldr	r3, [pc, #80]	; (1b228 <att_handle_rsp+0xa0>)
   1b1d6:	4298      	cmp	r0, r3
   1b1d8:	f04f 0900 	mov.w	r9, #0
   1b1dc:	d102      	bne.n	1b1e4 <att_handle_rsp+0x5c>
		chan->req = NULL;
   1b1de:	f8c4 9094 	str.w	r9, [r4, #148]	; 0x94
   1b1e2:	e7ef      	b.n	1b1c4 <att_handle_rsp+0x3c>
	func = chan->req->func;
   1b1e4:	f8d0 a004 	ldr.w	sl, [r0, #4]
	chan->req->func = NULL;
   1b1e8:	f8c0 9004 	str.w	r9, [r0, #4]
	params = chan->req->user_data;
   1b1ec:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   1b1f0:	f8d0 b018 	ldr.w	fp, [r0, #24]
	bt_att_req_free(chan->req);
   1b1f4:	f7ff ffb0 	bl	1b158 <bt_att_req_free>
	att_req_send_process(chan->att);
   1b1f8:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   1b1fa:	f8c4 9094 	str.w	r9, [r4, #148]	; 0x94
	att_req_send_process(chan->att);
   1b1fe:	f01b fa90 	bl	36722 <att_req_send_process>
	if (func) {
   1b202:	f1ba 0f00 	cmp.w	sl, #0
   1b206:	d0e0      	beq.n	1b1ca <att_handle_rsp+0x42>
		func(chan->att->conn, err, pdu, len, params);
   1b208:	6820      	ldr	r0, [r4, #0]
   1b20a:	f8cd b000 	str.w	fp, [sp]
   1b20e:	6800      	ldr	r0, [r0, #0]
   1b210:	4643      	mov	r3, r8
   1b212:	4632      	mov	r2, r6
   1b214:	4629      	mov	r1, r5
   1b216:	47d0      	blx	sl
   1b218:	e7d7      	b.n	1b1ca <att_handle_rsp+0x42>
   1b21a:	bf00      	nop
   1b21c:	0003da66 	.word	0x0003da66
   1b220:	0003daaa 	.word	0x0003daaa
   1b224:	00039568 	.word	0x00039568
   1b228:	20001c48 	.word	0x20001c48

0001b22c <bt_att_disconnected>:
{
   1b22c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   1b230:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   1b234:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1b236:	2e00      	cmp	r6, #0
   1b238:	d063      	beq.n	1b302 <bt_att_disconnected+0xd6>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1b23a:	f100 01dc 	add.w	r1, r0, #220	; 0xdc
   1b23e:	f106 002c 	add.w	r0, r6, #44	; 0x2c
   1b242:	f01b f926 	bl	36492 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1b246:	1f27      	subs	r7, r4, #4
   1b248:	f104 0894 	add.w	r8, r4, #148	; 0x94
   1b24c:	2200      	movs	r2, #0
   1b24e:	2300      	movs	r3, #0
   1b250:	4640      	mov	r0, r8
   1b252:	f01c fba6 	bl	379a2 <net_buf_get>
   1b256:	4605      	mov	r5, r0
   1b258:	bb58      	cbnz	r0, 1b2b2 <bt_att_disconnected+0x86>
	if (chan->req) {
   1b25a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   1b25e:	b12b      	cbz	r3, 1b26c <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1b260:	4602      	mov	r2, r0
   1b262:	4601      	mov	r1, r0
   1b264:	230e      	movs	r3, #14
   1b266:	4638      	mov	r0, r7
   1b268:	f7ff ff8e 	bl	1b188 <att_handle_rsp>
	chan->att = NULL;
   1b26c:	2300      	movs	r3, #0
   1b26e:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   1b272:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   1b274:	2b00      	cmp	r3, #0
   1b276:	d144      	bne.n	1b302 <bt_att_disconnected+0xd6>
	att_reset(att);
   1b278:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_slist_get(&att->prep_queue))) {
   1b27a:	9803      	ldr	r0, [sp, #12]
   1b27c:	3024      	adds	r0, #36	; 0x24
   1b27e:	f01c fbac 	bl	379da <net_buf_slist_get>
   1b282:	4605      	mov	r5, r0
   1b284:	b9e0      	cbnz	r0, 1b2c0 <bt_att_disconnected+0x94>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1b286:	9803      	ldr	r0, [sp, #12]
   1b288:	2200      	movs	r2, #0
   1b28a:	2300      	movs	r3, #0
   1b28c:	300c      	adds	r0, #12
   1b28e:	f01c fb88 	bl	379a2 <net_buf_get>
   1b292:	4605      	mov	r5, r0
   1b294:	b9d8      	cbnz	r0, 1b2ce <bt_att_disconnected+0xa2>
	while (!sys_slist_is_empty(&att->reqs)) {
   1b296:	9803      	ldr	r0, [sp, #12]
	return list->head;
   1b298:	6845      	ldr	r5, [r0, #4]
   1b29a:	b9fd      	cbnz	r5, 1b2dc <bt_att_disconnected+0xb0>
	att->conn = NULL;
   1b29c:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   1b29e:	a903      	add	r1, sp, #12
   1b2a0:	4819      	ldr	r0, [pc, #100]	; (1b308 <bt_att_disconnected+0xdc>)
   1b2a2:	f01d fa0b 	bl	386bc <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   1b2a6:	6820      	ldr	r0, [r4, #0]
}
   1b2a8:	b004      	add	sp, #16
   1b2aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   1b2ae:	f001 bd03 	b.w	1ccb8 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1b2b2:	69a8      	ldr	r0, [r5, #24]
   1b2b4:	f7fe fe54 	bl	19f60 <tx_meta_data_free>
		net_buf_unref(buf);
   1b2b8:	4628      	mov	r0, r5
   1b2ba:	f012 fad1 	bl	2d860 <net_buf_unref>
   1b2be:	e7c5      	b.n	1b24c <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1b2c0:	69a8      	ldr	r0, [r5, #24]
   1b2c2:	f7fe fe4d 	bl	19f60 <tx_meta_data_free>
		net_buf_unref(buf);
   1b2c6:	4628      	mov	r0, r5
   1b2c8:	f012 faca 	bl	2d860 <net_buf_unref>
   1b2cc:	e7d5      	b.n	1b27a <bt_att_disconnected+0x4e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1b2ce:	69a8      	ldr	r0, [r5, #24]
   1b2d0:	f7fe fe46 	bl	19f60 <tx_meta_data_free>
		net_buf_unref(buf);
   1b2d4:	4628      	mov	r0, r5
   1b2d6:	f012 fac3 	bl	2d860 <net_buf_unref>
   1b2da:	e7d4      	b.n	1b286 <bt_att_disconnected+0x5a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b2dc:	6882      	ldr	r2, [r0, #8]
	return node->next;
   1b2de:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1b2e0:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b2e2:	4295      	cmp	r5, r2
	list->tail = node;
   1b2e4:	bf08      	it	eq
   1b2e6:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   1b2e8:	686e      	ldr	r6, [r5, #4]
   1b2ea:	b136      	cbz	r6, 1b2fa <bt_att_disconnected+0xce>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1b2ec:	69ab      	ldr	r3, [r5, #24]
   1b2ee:	9300      	str	r3, [sp, #0]
   1b2f0:	2300      	movs	r3, #0
   1b2f2:	6800      	ldr	r0, [r0, #0]
   1b2f4:	461a      	mov	r2, r3
   1b2f6:	210e      	movs	r1, #14
   1b2f8:	47b0      	blx	r6
		bt_att_req_free(req);
   1b2fa:	4628      	mov	r0, r5
   1b2fc:	f7ff ff2c 	bl	1b158 <bt_att_req_free>
   1b300:	e7c9      	b.n	1b296 <bt_att_disconnected+0x6a>
}
   1b302:	b004      	add	sp, #16
   1b304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b308:	20000a60 	.word	0x20000a60

0001b30c <att_timeout>:
{
   1b30c:	b5b0      	push	{r4, r5, r7, lr}
   1b30e:	af00      	add	r7, sp, #0
	LOG_ERR("ATT Timeout");
   1b310:	466d      	mov	r5, sp
   1b312:	b088      	sub	sp, #32
{
   1b314:	4604      	mov	r4, r0
	LOG_ERR("ATT Timeout");
   1b316:	466a      	mov	r2, sp
   1b318:	4b09      	ldr	r3, [pc, #36]	; (1b340 <att_timeout+0x34>)
   1b31a:	6153      	str	r3, [r2, #20]
   1b31c:	4b09      	ldr	r3, [pc, #36]	; (1b344 <att_timeout+0x38>)
   1b31e:	6193      	str	r3, [r2, #24]
   1b320:	2303      	movs	r3, #3
   1b322:	f842 3f10 	str.w	r3, [r2, #16]!
   1b326:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b32a:	4807      	ldr	r0, [pc, #28]	; (1b348 <att_timeout+0x3c>)
   1b32c:	f01b f86d 	bl	3640a <z_log_msg_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   1b330:	f1a4 00ac 	sub.w	r0, r4, #172	; 0xac
   1b334:	46ad      	mov	sp, r5
   1b336:	f7ff ff79 	bl	1b22c <bt_att_disconnected>
}
   1b33a:	46bd      	mov	sp, r7
   1b33c:	bdb0      	pop	{r4, r5, r7, pc}
   1b33e:	bf00      	nop
   1b340:	0003da81 	.word	0x0003da81
   1b344:	0003da91 	.word	0x0003da91
   1b348:	00039568 	.word	0x00039568

0001b34c <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   1b34c:	b570      	push	{r4, r5, r6, lr}
   1b34e:	4d14      	ldr	r5, [pc, #80]	; (1b3a0 <find_cf_cfg+0x54>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   1b350:	4606      	mov	r6, r0
   1b352:	b140      	cbz	r0, 1b366 <find_cf_cfg+0x1a>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1b354:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1b358:	462a      	mov	r2, r5
   1b35a:	1e6c      	subs	r4, r5, #1
   1b35c:	f01a fe7a 	bl	36054 <bt_conn_is_peer_addr_le>
   1b360:	b198      	cbz	r0, 1b38a <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1b362:	4620      	mov	r0, r4
   1b364:	e00c      	b.n	1b380 <find_cf_cfg+0x34>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1b366:	490f      	ldr	r1, [pc, #60]	; (1b3a4 <find_cf_cfg+0x58>)
   1b368:	4628      	mov	r0, r5
   1b36a:	f01b fcab 	bl	36cc4 <bt_addr_le_eq>
   1b36e:	b940      	cbnz	r0, 1b382 <find_cf_cfg+0x36>
   1b370:	490c      	ldr	r1, [pc, #48]	; (1b3a4 <find_cf_cfg+0x58>)
   1b372:	f105 0010 	add.w	r0, r5, #16
   1b376:	f01b fca5 	bl	36cc4 <bt_addr_le_eq>
   1b37a:	b120      	cbz	r0, 1b386 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1b37c:	f105 000f 	add.w	r0, r5, #15
			return cfg;
		}
	}

	return NULL;
}
   1b380:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1b382:	1e68      	subs	r0, r5, #1
   1b384:	e7fc      	b.n	1b380 <find_cf_cfg+0x34>
	return NULL;
   1b386:	2000      	movs	r0, #0
   1b388:	e7fa      	b.n	1b380 <find_cf_cfg+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1b38a:	7c21      	ldrb	r1, [r4, #16]
   1b38c:	f104 0211 	add.w	r2, r4, #17
   1b390:	4630      	mov	r0, r6
   1b392:	f01a fe5f 	bl	36054 <bt_conn_is_peer_addr_le>
   1b396:	2800      	cmp	r0, #0
   1b398:	d0f5      	beq.n	1b386 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1b39a:	f104 0010 	add.w	r0, r4, #16
   1b39e:	e7ef      	b.n	1b380 <find_cf_cfg+0x34>
   1b3a0:	20001c7d 	.word	0x20001c7d
   1b3a4:	0003c0a9 	.word	0x0003c0a9

0001b3a8 <find_sc_cfg>:
{
   1b3a8:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   1b3aa:	4c0e      	ldr	r4, [pc, #56]	; (1b3e4 <find_sc_cfg+0x3c>)
   1b3ac:	7823      	ldrb	r3, [r4, #0]
   1b3ae:	4283      	cmp	r3, r0
{
   1b3b0:	4605      	mov	r5, r0
   1b3b2:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   1b3b4:	d00c      	beq.n	1b3d0 <find_sc_cfg+0x28>
   1b3b6:	7b23      	ldrb	r3, [r4, #12]
   1b3b8:	42ab      	cmp	r3, r5
   1b3ba:	d110      	bne.n	1b3de <find_sc_cfg+0x36>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   1b3bc:	480a      	ldr	r0, [pc, #40]	; (1b3e8 <find_sc_cfg+0x40>)
   1b3be:	4631      	mov	r1, r6
   1b3c0:	f01b fc80 	bl	36cc4 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   1b3c4:	b158      	cbz	r0, 1b3de <find_sc_cfg+0x36>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1b3c6:	2301      	movs	r3, #1
			return &sc_cfg[i];
   1b3c8:	220c      	movs	r2, #12
   1b3ca:	fb02 4003 	mla	r0, r2, r3, r4
   1b3ce:	e007      	b.n	1b3e0 <find_sc_cfg+0x38>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   1b3d0:	1c60      	adds	r0, r4, #1
   1b3d2:	f01b fc77 	bl	36cc4 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   1b3d6:	2800      	cmp	r0, #0
   1b3d8:	d0ed      	beq.n	1b3b6 <find_sc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1b3da:	2300      	movs	r3, #0
   1b3dc:	e7f4      	b.n	1b3c8 <find_sc_cfg+0x20>
	return NULL;
   1b3de:	2000      	movs	r0, #0
}
   1b3e0:	bd70      	pop	{r4, r5, r6, pc}
   1b3e2:	bf00      	nop
   1b3e4:	2000327a 	.word	0x2000327a
   1b3e8:	20003287 	.word	0x20003287

0001b3ec <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   1b3ec:	b510      	push	{r4, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   1b3ee:	1c4a      	adds	r2, r1, #1
{
   1b3f0:	460c      	mov	r4, r1
		if (conn) {
   1b3f2:	b138      	cbz	r0, 1b404 <find_ccc_cfg+0x18>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1b3f4:	7809      	ldrb	r1, [r1, #0]
   1b3f6:	f01a fe2d 	bl	36054 <bt_conn_is_peer_addr_le>
   1b3fa:	b108      	cbz	r0, 1b400 <find_ccc_cfg+0x14>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1b3fc:	4620      	mov	r0, r4
			return cfg;
		}
	}

	return NULL;
}
   1b3fe:	bd10      	pop	{r4, pc}
	return NULL;
   1b400:	2000      	movs	r0, #0
   1b402:	e7fc      	b.n	1b3fe <find_ccc_cfg+0x12>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1b404:	4902      	ldr	r1, [pc, #8]	; (1b410 <find_ccc_cfg+0x24>)
   1b406:	4610      	mov	r0, r2
   1b408:	f01b fc5c 	bl	36cc4 <bt_addr_le_eq>
   1b40c:	e7f5      	b.n	1b3fa <find_ccc_cfg+0xe>
   1b40e:	bf00      	nop
   1b410:	0003c0a9 	.word	0x0003c0a9

0001b414 <ccc_load>:
	clear_ccc_cfg(cfg);
}

static uint8_t ccc_load(const struct bt_gatt_attr *attr, uint16_t handle,
			void *user_data)
{
   1b414:	b570      	push	{r4, r5, r6, lr}
	struct ccc_load *load = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b416:	4b20      	ldr	r3, [pc, #128]	; (1b498 <ccc_load+0x84>)
{
   1b418:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b41a:	6882      	ldr	r2, [r0, #8]
   1b41c:	429a      	cmp	r2, r3
   1b41e:	d10f      	bne.n	1b440 <ccc_load+0x2c>
	}

	ccc = attr->user_data;

	/* Clear if value was invalidated */
	if (!load->entry) {
   1b420:	68a5      	ldr	r5, [r4, #8]
	ccc = attr->user_data;
   1b422:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
   1b424:	b975      	cbnz	r5, 1b444 <ccc_load+0x30>
	cfg = ccc_find_cfg(ccc, addr, id);
   1b426:	7922      	ldrb	r2, [r4, #4]
   1b428:	6821      	ldr	r1, [r4, #0]
   1b42a:	4630      	mov	r0, r6
   1b42c:	f01b fc52 	bl	36cd4 <ccc_find_cfg>
	if (!cfg) {
   1b430:	4604      	mov	r4, r0
   1b432:	b128      	cbz	r0, 1b440 <ccc_load+0x2c>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1b434:	4919      	ldr	r1, [pc, #100]	; (1b49c <ccc_load+0x88>)
   1b436:	3001      	adds	r0, #1
   1b438:	f01b fbcc 	bl	36bd4 <bt_addr_le_copy>
	cfg->id = 0U;
   1b43c:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1b43e:	8125      	strh	r5, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
   1b440:	2001      	movs	r0, #1
next:
	load->entry++;
	load->count--;

	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
}
   1b442:	bd70      	pop	{r4, r5, r6, pc}
	} else if (!load->count) {
   1b444:	68e0      	ldr	r0, [r4, #12]
   1b446:	2800      	cmp	r0, #0
   1b448:	d0fb      	beq.n	1b442 <ccc_load+0x2e>
	if (load->entry->handle != handle) {
   1b44a:	882b      	ldrh	r3, [r5, #0]
   1b44c:	428b      	cmp	r3, r1
   1b44e:	d00a      	beq.n	1b466 <ccc_load+0x52>
		if (load->entry->handle < handle) {
   1b450:	d2f6      	bcs.n	1b440 <ccc_load+0x2c>
	load->count--;
   1b452:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   1b454:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   1b456:	3801      	subs	r0, #1
	load->entry++;
   1b458:	3304      	adds	r3, #4
	load->count--;
   1b45a:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1b45c:	3800      	subs	r0, #0
	load->entry++;
   1b45e:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1b460:	bf18      	it	ne
   1b462:	2001      	movne	r0, #1
   1b464:	e7ed      	b.n	1b442 <ccc_load+0x2e>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   1b466:	7922      	ldrb	r2, [r4, #4]
   1b468:	6821      	ldr	r1, [r4, #0]
   1b46a:	4630      	mov	r0, r6
   1b46c:	f01b fc32 	bl	36cd4 <ccc_find_cfg>
	if (!cfg) {
   1b470:	4605      	mov	r5, r0
   1b472:	b968      	cbnz	r0, 1b490 <ccc_load+0x7c>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   1b474:	4602      	mov	r2, r0
   1b476:	4909      	ldr	r1, [pc, #36]	; (1b49c <ccc_load+0x88>)
   1b478:	4630      	mov	r0, r6
   1b47a:	f01b fc2b 	bl	36cd4 <ccc_find_cfg>
		if (!cfg) {
   1b47e:	4605      	mov	r5, r0
   1b480:	2800      	cmp	r0, #0
   1b482:	d0e6      	beq.n	1b452 <ccc_load+0x3e>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   1b484:	6821      	ldr	r1, [r4, #0]
   1b486:	3001      	adds	r0, #1
   1b488:	f01b fba4 	bl	36bd4 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   1b48c:	7923      	ldrb	r3, [r4, #4]
   1b48e:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   1b490:	68a3      	ldr	r3, [r4, #8]
   1b492:	885b      	ldrh	r3, [r3, #2]
   1b494:	812b      	strh	r3, [r5, #8]
   1b496:	e7dc      	b.n	1b452 <ccc_load+0x3e>
   1b498:	0001bcd5 	.word	0x0001bcd5
   1b49c:	0003c0a9 	.word	0x0003c0a9

0001b4a0 <find_cf_cfg_by_addr>:
#endif
}

static struct gatt_cf_cfg *find_cf_cfg_by_addr(uint8_t id,
					       const bt_addr_le_t *addr)
{
   1b4a0:	b570      	push	{r4, r5, r6, lr}
	if (IS_ENABLED(CONFIG_BT_GATT_CACHING)) {
		int i;

		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
			if (id == cf_cfg[i].id &&
   1b4a2:	4c0e      	ldr	r4, [pc, #56]	; (1b4dc <find_cf_cfg_by_addr+0x3c>)
   1b4a4:	7823      	ldrb	r3, [r4, #0]
   1b4a6:	4283      	cmp	r3, r0
{
   1b4a8:	4606      	mov	r6, r0
   1b4aa:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
   1b4ac:	d00b      	beq.n	1b4c6 <find_cf_cfg_by_addr+0x26>
   1b4ae:	7c23      	ldrb	r3, [r4, #16]
   1b4b0:	42b3      	cmp	r3, r6
   1b4b2:	d110      	bne.n	1b4d6 <find_cf_cfg_by_addr+0x36>
			    bt_addr_le_eq(addr, &cf_cfg[i].peer)) {
   1b4b4:	490a      	ldr	r1, [pc, #40]	; (1b4e0 <find_cf_cfg_by_addr+0x40>)
   1b4b6:	4628      	mov	r0, r5
   1b4b8:	f01b fc04 	bl	36cc4 <bt_addr_le_eq>
			if (id == cf_cfg[i].id &&
   1b4bc:	b158      	cbz	r0, 1b4d6 <find_cf_cfg_by_addr+0x36>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1b4be:	2301      	movs	r3, #1
				return &cf_cfg[i];
   1b4c0:	eb04 1003 	add.w	r0, r4, r3, lsl #4
   1b4c4:	e008      	b.n	1b4d8 <find_cf_cfg_by_addr+0x38>
			    bt_addr_le_eq(addr, &cf_cfg[i].peer)) {
   1b4c6:	1c61      	adds	r1, r4, #1
   1b4c8:	4628      	mov	r0, r5
   1b4ca:	f01b fbfb 	bl	36cc4 <bt_addr_le_eq>
			if (id == cf_cfg[i].id &&
   1b4ce:	2800      	cmp	r0, #0
   1b4d0:	d0ed      	beq.n	1b4ae <find_cf_cfg_by_addr+0xe>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1b4d2:	2300      	movs	r3, #0
   1b4d4:	e7f4      	b.n	1b4c0 <find_cf_cfg_by_addr+0x20>
			}
		}
	}

	return NULL;
   1b4d6:	2000      	movs	r0, #0
}
   1b4d8:	bd70      	pop	{r4, r5, r6, pc}
   1b4da:	bf00      	nop
   1b4dc:	20001c7c 	.word	0x20001c7c
   1b4e0:	20001c8d 	.word	0x20001c8d

0001b4e4 <ccc_set_direct.part.0>:
static int ccc_set_direct(const char *key, size_t len, settings_read_cb read_cb,
   1b4e4:	b580      	push	{r7, lr}
   1b4e6:	af00      	add	r7, sp, #0
			LOG_ERR("Invalid key");
   1b4e8:	b088      	sub	sp, #32
   1b4ea:	466a      	mov	r2, sp
   1b4ec:	4b07      	ldr	r3, [pc, #28]	; (1b50c <ccc_set_direct.part.0+0x28>)
   1b4ee:	6153      	str	r3, [r2, #20]
   1b4f0:	4b07      	ldr	r3, [pc, #28]	; (1b510 <ccc_set_direct.part.0+0x2c>)
   1b4f2:	6193      	str	r3, [r2, #24]
   1b4f4:	2303      	movs	r3, #3
   1b4f6:	f842 3f10 	str.w	r3, [r2, #16]!
   1b4fa:	4806      	ldr	r0, [pc, #24]	; (1b514 <ccc_set_direct.part.0+0x30>)
   1b4fc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b500:	f01b fc19 	bl	36d36 <z_log_msg_static_create.constprop.0>
}
   1b504:	f06f 0015 	mvn.w	r0, #21
   1b508:	46bd      	mov	sp, r7
   1b50a:	bd80      	pop	{r7, pc}
   1b50c:	0003db37 	.word	0x0003db37
   1b510:	0003df1b 	.word	0x0003df1b
   1b514:	000395b8 	.word	0x000395b8

0001b518 <db_hash_commit>:

	return 0;
}

static int db_hash_commit(void)
{
   1b518:	b5b0      	push	{r4, r5, r7, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b51a:	2108      	movs	r1, #8
   1b51c:	af00      	add	r7, sp, #0
   1b51e:	4810      	ldr	r0, [pc, #64]	; (1b560 <db_hash_commit+0x48>)
   1b520:	f01b fbeb 	bl	36cfa <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	if (IS_ENABLED(CONFIG_BT_LONG_WQ)) {
		err = bt_long_wq_reschedule(&db_hash.work, K_NO_WAIT);
   1b524:	480f      	ldr	r0, [pc, #60]	; (1b564 <db_hash_commit+0x4c>)
   1b526:	2200      	movs	r2, #0
   1b528:	2300      	movs	r3, #0
   1b52a:	f7fa fc11 	bl	15d50 <bt_long_wq_reschedule>
	/* Settings commit uses non-zero value to indicate failure. */
	if (err > 0) {
		err = 0;
	}

	if (err) {
   1b52e:	1e04      	subs	r4, r0, #0
   1b530:	da13      	bge.n	1b55a <db_hash_commit+0x42>
		LOG_ERR("Unable to reschedule database hash process (err %d)", err);
   1b532:	466d      	mov	r5, sp
   1b534:	b088      	sub	sp, #32
   1b536:	466a      	mov	r2, sp
   1b538:	4b0b      	ldr	r3, [pc, #44]	; (1b568 <db_hash_commit+0x50>)
   1b53a:	6153      	str	r3, [r2, #20]
   1b53c:	4b0b      	ldr	r3, [pc, #44]	; (1b56c <db_hash_commit+0x54>)
   1b53e:	480c      	ldr	r0, [pc, #48]	; (1b570 <db_hash_commit+0x58>)
   1b540:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1b544:	2304      	movs	r3, #4
   1b546:	f842 3f10 	str.w	r3, [r2, #16]!
   1b54a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1b54e:	f01b fbf2 	bl	36d36 <z_log_msg_static_create.constprop.0>
   1b552:	46ad      	mov	sp, r5
	}

	return err;
}
   1b554:	4620      	mov	r0, r4
   1b556:	46bd      	mov	sp, r7
   1b558:	bdb0      	pop	{r4, r5, r7, pc}
		err = bt_long_wq_reschedule(&db_hash.work, K_NO_WAIT);
   1b55a:	2400      	movs	r4, #0
	return err;
   1b55c:	e7fa      	b.n	1b554 <db_hash_commit+0x3c>
   1b55e:	bf00      	nop
   1b560:	20001400 	.word	0x20001400
   1b564:	20001358 	.word	0x20001358
   1b568:	0003db47 	.word	0x0003db47
   1b56c:	0003dee4 	.word	0x0003dee4
   1b570:	000395b8 	.word	0x000395b8

0001b574 <sc_set>:
{
   1b574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b578:	b085      	sub	sp, #20
   1b57a:	460e      	mov	r6, r1
   1b57c:	af00      	add	r7, sp, #0
   1b57e:	4690      	mov	r8, r2
   1b580:	4699      	mov	r9, r3
	if (!name) {
   1b582:	4604      	mov	r4, r0
   1b584:	b980      	cbnz	r0, 1b5a8 <sc_set+0x34>
		LOG_ERR("Insufficient number of arguments");
   1b586:	466c      	mov	r4, sp
   1b588:	b088      	sub	sp, #32
   1b58a:	466a      	mov	r2, sp
   1b58c:	4b48      	ldr	r3, [pc, #288]	; (1b6b0 <sc_set+0x13c>)
   1b58e:	6153      	str	r3, [r2, #20]
   1b590:	4b48      	ldr	r3, [pc, #288]	; (1b6b4 <sc_set+0x140>)
   1b592:	6193      	str	r3, [r2, #24]
   1b594:	2303      	movs	r3, #3
   1b596:	f842 3f10 	str.w	r3, [r2, #16]!
   1b59a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
			LOG_ERR("Invalid local identity %lu", next_id);
   1b59e:	4846      	ldr	r0, [pc, #280]	; (1b6b8 <sc_set+0x144>)
   1b5a0:	f01b fbc9 	bl	36d36 <z_log_msg_static_create.constprop.0>
   1b5a4:	46a5      	mov	sp, r4
			return -EINVAL;
   1b5a6:	e019      	b.n	1b5dc <sc_set+0x68>
	err = bt_settings_decode_key(name, &addr);
   1b5a8:	f107 0108 	add.w	r1, r7, #8
   1b5ac:	f01a f897 	bl	356de <bt_settings_decode_key>
	if (err) {
   1b5b0:	4605      	mov	r5, r0
   1b5b2:	b1d0      	cbz	r0, 1b5ea <sc_set+0x76>
		LOG_ERR("Unable to decode address %s", name);
   1b5b4:	466d      	mov	r5, sp
   1b5b6:	b08a      	sub	sp, #40	; 0x28
   1b5b8:	466a      	mov	r2, sp
   1b5ba:	4b40      	ldr	r3, [pc, #256]	; (1b6bc <sc_set+0x148>)
   1b5bc:	6153      	str	r3, [r2, #20]
   1b5be:	4b3d      	ldr	r3, [pc, #244]	; (1b6b4 <sc_set+0x140>)
   1b5c0:	483d      	ldr	r0, [pc, #244]	; (1b6b8 <sc_set+0x144>)
   1b5c2:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1b5c6:	f240 3301 	movw	r3, #769	; 0x301
   1b5ca:	8413      	strh	r3, [r2, #32]
   1b5cc:	4b3c      	ldr	r3, [pc, #240]	; (1b6c0 <sc_set+0x14c>)
   1b5ce:	f842 3f10 	str.w	r3, [r2, #16]!
   1b5d2:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1b5d6:	f01b fbae 	bl	36d36 <z_log_msg_static_create.constprop.0>
   1b5da:	46ad      	mov	sp, r5
		return -EINVAL;
   1b5dc:	f06f 0515 	mvn.w	r5, #21
}
   1b5e0:	4628      	mov	r0, r5
   1b5e2:	3714      	adds	r7, #20
   1b5e4:	46bd      	mov	sp, r7
   1b5e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	settings_name_next(name, &next);
   1b5ea:	1d39      	adds	r1, r7, #4
   1b5ec:	4620      	mov	r0, r4
   1b5ee:	f018 fce1 	bl	33fb4 <settings_name_next>
	if (!next) {
   1b5f2:	6878      	ldr	r0, [r7, #4]
   1b5f4:	b190      	cbz	r0, 1b61c <sc_set+0xa8>
		unsigned long next_id = strtoul(next, NULL, 10);
   1b5f6:	220a      	movs	r2, #10
   1b5f8:	4629      	mov	r1, r5
   1b5fa:	f019 fec7 	bl	3538c <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1b5fe:	b168      	cbz	r0, 1b61c <sc_set+0xa8>
			LOG_ERR("Invalid local identity %lu", next_id);
   1b600:	466c      	mov	r4, sp
   1b602:	b088      	sub	sp, #32
   1b604:	466a      	mov	r2, sp
   1b606:	4b2f      	ldr	r3, [pc, #188]	; (1b6c4 <sc_set+0x150>)
   1b608:	6153      	str	r3, [r2, #20]
   1b60a:	4b2a      	ldr	r3, [pc, #168]	; (1b6b4 <sc_set+0x140>)
   1b60c:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1b610:	2304      	movs	r3, #4
   1b612:	f842 3f10 	str.w	r3, [r2, #16]!
   1b616:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1b61a:	e7c0      	b.n	1b59e <sc_set+0x2a>
	cfg = find_sc_cfg(id, &addr);
   1b61c:	f107 0108 	add.w	r1, r7, #8
   1b620:	2000      	movs	r0, #0
   1b622:	f7ff fec1 	bl	1b3a8 <find_sc_cfg>
	if (!cfg && len_rd) {
   1b626:	4604      	mov	r4, r0
   1b628:	2800      	cmp	r0, #0
   1b62a:	d13a      	bne.n	1b6a2 <sc_set+0x12e>
   1b62c:	2e00      	cmp	r6, #0
   1b62e:	d0d7      	beq.n	1b5e0 <sc_set+0x6c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1b630:	4925      	ldr	r1, [pc, #148]	; (1b6c8 <sc_set+0x154>)
   1b632:	f7ff feb9 	bl	1b3a8 <find_sc_cfg>
		if (!cfg) {
   1b636:	4604      	mov	r4, r0
   1b638:	b990      	cbnz	r0, 1b660 <sc_set+0xec>
			LOG_ERR("Unable to restore SC: no cfg left");
   1b63a:	466c      	mov	r4, sp
   1b63c:	b088      	sub	sp, #32
   1b63e:	466a      	mov	r2, sp
   1b640:	4b22      	ldr	r3, [pc, #136]	; (1b6cc <sc_set+0x158>)
   1b642:	6153      	str	r3, [r2, #20]
   1b644:	4b1b      	ldr	r3, [pc, #108]	; (1b6b4 <sc_set+0x140>)
   1b646:	6193      	str	r3, [r2, #24]
   1b648:	2303      	movs	r3, #3
   1b64a:	f842 3f10 	str.w	r3, [r2, #16]!
   1b64e:	481a      	ldr	r0, [pc, #104]	; (1b6b8 <sc_set+0x144>)
   1b650:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b654:	f01b fb6f 	bl	36d36 <z_log_msg_static_create.constprop.0>
			return -ENOMEM;
   1b658:	f06f 050b 	mvn.w	r5, #11
   1b65c:	46a5      	mov	sp, r4
   1b65e:	e7bf      	b.n	1b5e0 <sc_set+0x6c>
		cfg->id = id;
   1b660:	2300      	movs	r3, #0
   1b662:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1b666:	f107 0108 	add.w	r1, r7, #8
   1b66a:	f01b fab3 	bl	36bd4 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   1b66e:	f104 0108 	add.w	r1, r4, #8
   1b672:	2204      	movs	r2, #4
   1b674:	4648      	mov	r0, r9
   1b676:	47c0      	blx	r8
		if (len < 0) {
   1b678:	1e04      	subs	r4, r0, #0
   1b67a:	dab1      	bge.n	1b5e0 <sc_set+0x6c>
			LOG_ERR("Failed to decode value (err %zd)", len);
   1b67c:	466d      	mov	r5, sp
   1b67e:	b088      	sub	sp, #32
   1b680:	466a      	mov	r2, sp
   1b682:	4b13      	ldr	r3, [pc, #76]	; (1b6d0 <sc_set+0x15c>)
   1b684:	6153      	str	r3, [r2, #20]
   1b686:	4b0b      	ldr	r3, [pc, #44]	; (1b6b4 <sc_set+0x140>)
   1b688:	480b      	ldr	r0, [pc, #44]	; (1b6b8 <sc_set+0x144>)
   1b68a:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1b68e:	2304      	movs	r3, #4
   1b690:	f842 3f10 	str.w	r3, [r2, #16]!
   1b694:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1b698:	f01b fb4d 	bl	36d36 <z_log_msg_static_create.constprop.0>
   1b69c:	46ad      	mov	sp, r5
			return len;
   1b69e:	4625      	mov	r5, r4
   1b6a0:	e79e      	b.n	1b5e0 <sc_set+0x6c>
	if (len_rd) {
   1b6a2:	2e00      	cmp	r6, #0
   1b6a4:	d1e3      	bne.n	1b66e <sc_set+0xfa>
		memset(cfg, 0, sizeof(*cfg));
   1b6a6:	220c      	movs	r2, #12
   1b6a8:	4631      	mov	r1, r6
   1b6aa:	f019 ff4f 	bl	3554c <memset>
		LOG_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   1b6ae:	e797      	b.n	1b5e0 <sc_set+0x6c>
   1b6b0:	0003c1d3 	.word	0x0003c1d3
   1b6b4:	0003defa 	.word	0x0003defa
   1b6b8:	000395b8 	.word	0x000395b8
   1b6bc:	0003db7f 	.word	0x0003db7f
   1b6c0:	01000004 	.word	0x01000004
   1b6c4:	0003db9f 	.word	0x0003db9f
   1b6c8:	0003c0a9 	.word	0x0003c0a9
   1b6cc:	0003dbbe 	.word	0x0003dbbe
   1b6d0:	0003dbe4 	.word	0x0003dbe4

0001b6d4 <sc_store>:
{
   1b6d4:	b5b0      	push	{r4, r5, r7, lr}
	if (cfg->id) {
   1b6d6:	4605      	mov	r5, r0
{
   1b6d8:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   1b6da:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1b6de:	af02      	add	r7, sp, #8
   1b6e0:	4604      	mov	r4, r0
	if (cfg->id) {
   1b6e2:	b32a      	cbz	r2, 1b730 <sc_store+0x5c>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1b6e4:	2104      	movs	r1, #4
   1b6e6:	4638      	mov	r0, r7
   1b6e8:	f017 fab3 	bl	32c52 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   1b6ec:	9700      	str	r7, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   1b6ee:	4a11      	ldr	r2, [pc, #68]	; (1b734 <sc_store+0x60>)
   1b6f0:	2124      	movs	r1, #36	; 0x24
   1b6f2:	1d38      	adds	r0, r7, #4
   1b6f4:	462b      	mov	r3, r5
   1b6f6:	f7fa fa55 	bl	15ba4 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   1b6fa:	2204      	movs	r2, #4
   1b6fc:	f104 0108 	add.w	r1, r4, #8
   1b700:	18b8      	adds	r0, r7, r2
   1b702:	f7f8 fbef 	bl	13ee4 <settings_save_one>
	if (err) {
   1b706:	b180      	cbz	r0, 1b72a <sc_store+0x56>
		LOG_ERR("failed to store SC (err %d)", err);
   1b708:	466c      	mov	r4, sp
   1b70a:	b088      	sub	sp, #32
   1b70c:	aa02      	add	r2, sp, #8
   1b70e:	4b0a      	ldr	r3, [pc, #40]	; (1b738 <sc_store+0x64>)
   1b710:	6153      	str	r3, [r2, #20]
   1b712:	4b0a      	ldr	r3, [pc, #40]	; (1b73c <sc_store+0x68>)
   1b714:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1b718:	2304      	movs	r3, #4
   1b71a:	f842 3f10 	str.w	r3, [r2, #16]!
   1b71e:	4808      	ldr	r0, [pc, #32]	; (1b740 <sc_store+0x6c>)
   1b720:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1b724:	f01b fb07 	bl	36d36 <z_log_msg_static_create.constprop.0>
   1b728:	46a5      	mov	sp, r4
}
   1b72a:	3728      	adds	r7, #40	; 0x28
   1b72c:	46bd      	mov	sp, r7
   1b72e:	bdb0      	pop	{r4, r5, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   1b730:	9200      	str	r2, [sp, #0]
   1b732:	e7dc      	b.n	1b6ee <sc_store+0x1a>
   1b734:	0003dfe4 	.word	0x0003dfe4
   1b738:	0003dc09 	.word	0x0003dc09
   1b73c:	0003dfa7 	.word	0x0003dfa7
   1b740:	000395b8 	.word	0x000395b8

0001b744 <sc_save>:
{
   1b744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b748:	af00      	add	r7, sp, #0
   1b74a:	4681      	mov	r9, r0
   1b74c:	4688      	mov	r8, r1
   1b74e:	4616      	mov	r6, r2
   1b750:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1b752:	f7ff fe29 	bl	1b3a8 <find_sc_cfg>
	if (!cfg) {
   1b756:	4604      	mov	r4, r0
   1b758:	b9e0      	cbnz	r0, 1b794 <sc_save+0x50>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1b75a:	491b      	ldr	r1, [pc, #108]	; (1b7c8 <sc_save+0x84>)
   1b75c:	f7ff fe24 	bl	1b3a8 <find_sc_cfg>
		if (!cfg) {
   1b760:	4604      	mov	r4, r0
   1b762:	b990      	cbnz	r0, 1b78a <sc_save+0x46>
			LOG_ERR("unable to save SC: no cfg left");
   1b764:	466c      	mov	r4, sp
   1b766:	b088      	sub	sp, #32
   1b768:	466a      	mov	r2, sp
   1b76a:	4b18      	ldr	r3, [pc, #96]	; (1b7cc <sc_save+0x88>)
   1b76c:	6153      	str	r3, [r2, #20]
   1b76e:	4b18      	ldr	r3, [pc, #96]	; (1b7d0 <sc_save+0x8c>)
   1b770:	6193      	str	r3, [r2, #24]
   1b772:	2303      	movs	r3, #3
   1b774:	f842 3f10 	str.w	r3, [r2, #16]!
   1b778:	4816      	ldr	r0, [pc, #88]	; (1b7d4 <sc_save+0x90>)
   1b77a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b77e:	f01b fada 	bl	36d36 <z_log_msg_static_create.constprop.0>
   1b782:	46a5      	mov	sp, r4
}
   1b784:	46bd      	mov	sp, r7
   1b786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg->id = id;
   1b78a:	f800 9b01 	strb.w	r9, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1b78e:	4641      	mov	r1, r8
   1b790:	f01b fa20 	bl	36bd4 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1b794:	8922      	ldrh	r2, [r4, #8]
   1b796:	8963      	ldrh	r3, [r4, #10]
   1b798:	b96a      	cbnz	r2, 1b7b6 <sc_save+0x72>
   1b79a:	b973      	cbnz	r3, 1b7ba <sc_save+0x76>
		cfg->data.start = start;
   1b79c:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1b79e:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   1b7a0:	4621      	mov	r1, r4
   1b7a2:	f811 0b01 	ldrb.w	r0, [r1], #1
   1b7a6:	f01a f91b 	bl	359e0 <bt_addr_le_is_bonded>
   1b7aa:	2800      	cmp	r0, #0
   1b7ac:	d0ea      	beq.n	1b784 <sc_save+0x40>
		sc_store(cfg);
   1b7ae:	4620      	mov	r0, r4
   1b7b0:	f7ff ff90 	bl	1b6d4 <sc_store>
   1b7b4:	e7e6      	b.n	1b784 <sc_save+0x40>
	if (new_start >= *start && new_end <= *end) {
   1b7b6:	4296      	cmp	r6, r2
   1b7b8:	d302      	bcc.n	1b7c0 <sc_save+0x7c>
   1b7ba:	429d      	cmp	r5, r3
   1b7bc:	d8ef      	bhi.n	1b79e <sc_save+0x5a>
   1b7be:	e7e1      	b.n	1b784 <sc_save+0x40>
	if (*end < new_end) {
   1b7c0:	429d      	cmp	r5, r3
		*start = new_start;
   1b7c2:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1b7c4:	d9ec      	bls.n	1b7a0 <sc_save+0x5c>
   1b7c6:	e7ea      	b.n	1b79e <sc_save+0x5a>
   1b7c8:	0003c0a9 	.word	0x0003c0a9
   1b7cc:	0003dc29 	.word	0x0003dc29
   1b7d0:	0003dfb0 	.word	0x0003dfb0
   1b7d4:	000395b8 	.word	0x000395b8

0001b7d8 <cf_write>:
{
   1b7d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b7dc:	af00      	add	r7, sp, #0
   1b7de:	4698      	mov	r8, r3
   1b7e0:	8c3b      	ldrh	r3, [r7, #32]
	if (offset > sizeof(cfg->data)) {
   1b7e2:	2b01      	cmp	r3, #1
{
   1b7e4:	4606      	mov	r6, r0
   1b7e6:	4691      	mov	r9, r2
	if (offset > sizeof(cfg->data)) {
   1b7e8:	d844      	bhi.n	1b874 <cf_write+0x9c>
	if (offset + len > sizeof(cfg->data)) {
   1b7ea:	4443      	add	r3, r8
   1b7ec:	2b01      	cmp	r3, #1
   1b7ee:	4645      	mov	r5, r8
   1b7f0:	dc43      	bgt.n	1b87a <cf_write+0xa2>
	cfg = find_cf_cfg(conn);
   1b7f2:	f7ff fdab 	bl	1b34c <find_cf_cfg>
	if (!cfg) {
   1b7f6:	4604      	mov	r4, r0
   1b7f8:	b9c8      	cbnz	r0, 1b82e <cf_write+0x56>
		cfg = find_cf_cfg(NULL);
   1b7fa:	f7ff fda7 	bl	1b34c <find_cf_cfg>
	if (!cfg) {
   1b7fe:	4604      	mov	r4, r0
   1b800:	b9a8      	cbnz	r0, 1b82e <cf_write+0x56>
		LOG_WRN("No space to store Client Supported Features");
   1b802:	466c      	mov	r4, sp
   1b804:	b088      	sub	sp, #32
   1b806:	466a      	mov	r2, sp
   1b808:	4b1f      	ldr	r3, [pc, #124]	; (1b888 <cf_write+0xb0>)
   1b80a:	6153      	str	r3, [r2, #20]
   1b80c:	4b1f      	ldr	r3, [pc, #124]	; (1b88c <cf_write+0xb4>)
   1b80e:	6193      	str	r3, [r2, #24]
   1b810:	2303      	movs	r3, #3
   1b812:	f842 3f10 	str.w	r3, [r2, #16]!
   1b816:	481e      	ldr	r0, [pc, #120]	; (1b890 <cf_write+0xb8>)
   1b818:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1b81c:	f01b fa8b 	bl	36d36 <z_log_msg_static_create.constprop.0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1b820:	f06f 0510 	mvn.w	r5, #16
   1b824:	46a5      	mov	sp, r4
}
   1b826:	4628      	mov	r0, r5
   1b828:	46bd      	mov	sp, r7
   1b82a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1b82e:	f1b8 0f00 	cmp.w	r8, #0
   1b832:	d012      	beq.n	1b85a <cf_write+0x82>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1b834:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   1b836:	f899 2000 	ldrb.w	r2, [r9]
   1b83a:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1b83c:	fa21 f003 	lsr.w	r0, r1, r3
   1b840:	07c0      	lsls	r0, r0, #31
   1b842:	d503      	bpl.n	1b84c <cf_write+0x74>
		    !(value[i / 8] & BIT(i % 8))) {
   1b844:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1b848:	07c0      	lsls	r0, r0, #31
   1b84a:	d519      	bpl.n	1b880 <cf_write+0xa8>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1b84c:	3301      	adds	r3, #1
   1b84e:	2b03      	cmp	r3, #3
   1b850:	d1f4      	bne.n	1b83c <cf_write+0x64>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1b852:	f002 0207 	and.w	r2, r2, #7
   1b856:	4311      	orrs	r1, r2
   1b858:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1b85a:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1b85e:	1c60      	adds	r0, r4, #1
   1b860:	f01b f9b8 	bl	36bd4 <bt_addr_le_copy>
	cfg->id = conn->id;
   1b864:	4620      	mov	r0, r4
   1b866:	7a33      	ldrb	r3, [r6, #8]
   1b868:	f800 3b0c 	strb.w	r3, [r0], #12
   1b86c:	2101      	movs	r1, #1
   1b86e:	f01b fa44 	bl	36cfa <atomic_or>
}
   1b872:	e7d8      	b.n	1b826 <cf_write+0x4e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b874:	f06f 0506 	mvn.w	r5, #6
   1b878:	e7d5      	b.n	1b826 <cf_write+0x4e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1b87a:	f06f 050c 	mvn.w	r5, #12
   1b87e:	e7d2      	b.n	1b826 <cf_write+0x4e>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1b880:	f06f 0512 	mvn.w	r5, #18
   1b884:	e7cf      	b.n	1b826 <cf_write+0x4e>
   1b886:	bf00      	nop
   1b888:	0003dc4c 	.word	0x0003dc4c
   1b88c:	0003dfb8 	.word	0x0003dfb8
   1b890:	000395b8 	.word	0x000395b8

0001b894 <db_hash_store>:
{
   1b894:	b598      	push	{r3, r4, r7, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   1b896:	490d      	ldr	r1, [pc, #52]	; (1b8cc <db_hash_store+0x38>)
   1b898:	480d      	ldr	r0, [pc, #52]	; (1b8d0 <db_hash_store+0x3c>)
{
   1b89a:	af00      	add	r7, sp, #0
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   1b89c:	2210      	movs	r2, #16
   1b89e:	f7f8 fb21 	bl	13ee4 <settings_save_one>
	if (err) {
   1b8a2:	b180      	cbz	r0, 1b8c6 <db_hash_store+0x32>
		LOG_ERR("Failed to save Database Hash (err %d)", err);
   1b8a4:	466c      	mov	r4, sp
   1b8a6:	b088      	sub	sp, #32
   1b8a8:	466a      	mov	r2, sp
   1b8aa:	4b0a      	ldr	r3, [pc, #40]	; (1b8d4 <db_hash_store+0x40>)
   1b8ac:	6153      	str	r3, [r2, #20]
   1b8ae:	4b0a      	ldr	r3, [pc, #40]	; (1b8d8 <db_hash_store+0x44>)
   1b8b0:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1b8b4:	2304      	movs	r3, #4
   1b8b6:	f842 3f10 	str.w	r3, [r2, #16]!
   1b8ba:	4808      	ldr	r0, [pc, #32]	; (1b8dc <db_hash_store+0x48>)
   1b8bc:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1b8c0:	f01b fa39 	bl	36d36 <z_log_msg_static_create.constprop.0>
   1b8c4:	46a5      	mov	sp, r4
}
   1b8c6:	46bd      	mov	sp, r7
   1b8c8:	bd98      	pop	{r3, r4, r7, pc}
   1b8ca:	bf00      	nop
   1b8cc:	20001338 	.word	0x20001338
   1b8d0:	0003dc7c 	.word	0x0003dc7c
   1b8d4:	0003dc84 	.word	0x0003dc84
   1b8d8:	0003dfc1 	.word	0x0003dfc1
   1b8dc:	000395b8 	.word	0x000395b8

0001b8e0 <db_hash_set>:
{
   1b8e0:	b5b0      	push	{r4, r5, r7, lr}
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   1b8e2:	490f      	ldr	r1, [pc, #60]	; (1b920 <db_hash_set+0x40>)
{
   1b8e4:	4614      	mov	r4, r2
   1b8e6:	af00      	add	r7, sp, #0
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   1b8e8:	2210      	movs	r2, #16
   1b8ea:	4618      	mov	r0, r3
   1b8ec:	47a0      	blx	r4
	if (len < 0) {
   1b8ee:	1e04      	subs	r4, r0, #0
   1b8f0:	da13      	bge.n	1b91a <db_hash_set+0x3a>
		LOG_ERR("Failed to decode value (err %zd)", len);
   1b8f2:	466d      	mov	r5, sp
   1b8f4:	b088      	sub	sp, #32
   1b8f6:	466a      	mov	r2, sp
   1b8f8:	4b0a      	ldr	r3, [pc, #40]	; (1b924 <db_hash_set+0x44>)
   1b8fa:	6153      	str	r3, [r2, #20]
   1b8fc:	4b0a      	ldr	r3, [pc, #40]	; (1b928 <db_hash_set+0x48>)
   1b8fe:	480b      	ldr	r0, [pc, #44]	; (1b92c <db_hash_set+0x4c>)
   1b900:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1b904:	2304      	movs	r3, #4
   1b906:	f842 3f10 	str.w	r3, [r2, #16]!
   1b90a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1b90e:	f01b fa12 	bl	36d36 <z_log_msg_static_create.constprop.0>
   1b912:	46ad      	mov	sp, r5
}
   1b914:	4620      	mov	r0, r4
   1b916:	46bd      	mov	sp, r7
   1b918:	bdb0      	pop	{r4, r5, r7, pc}
	return 0;
   1b91a:	2400      	movs	r4, #0
   1b91c:	e7fa      	b.n	1b914 <db_hash_set+0x34>
   1b91e:	bf00      	nop
   1b920:	20001348 	.word	0x20001348
   1b924:	0003dbe4 	.word	0x0003dbe4
   1b928:	0003ded8 	.word	0x0003ded8
   1b92c:	000395b8 	.word	0x000395b8

0001b930 <clear_cf_cfg>:
{
   1b930:	b510      	push	{r4, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1b932:	490c      	ldr	r1, [pc, #48]	; (1b964 <clear_cf_cfg+0x34>)
{
   1b934:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1b936:	3001      	adds	r0, #1
   1b938:	f01b f94c 	bl	36bd4 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1b93c:	f104 0008 	add.w	r0, r4, #8
   1b940:	2201      	movs	r2, #1
   1b942:	2100      	movs	r1, #0
   1b944:	f019 fe02 	bl	3554c <memset>
   1b948:	f3bf 8f5b 	dmb	ish
   1b94c:	340c      	adds	r4, #12
   1b94e:	2300      	movs	r3, #0
   1b950:	e854 2f00 	ldrex	r2, [r4]
   1b954:	e844 3100 	strex	r1, r3, [r4]
   1b958:	2900      	cmp	r1, #0
   1b95a:	d1f9      	bne.n	1b950 <clear_cf_cfg+0x20>
   1b95c:	f3bf 8f5b 	dmb	ish
}
   1b960:	bd10      	pop	{r4, pc}
   1b962:	bf00      	nop
   1b964:	0003c0a9 	.word	0x0003c0a9

0001b968 <cf_set>:
{
   1b968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b96c:	b085      	sub	sp, #20
   1b96e:	4689      	mov	r9, r1
   1b970:	af00      	add	r7, sp, #0
   1b972:	4616      	mov	r6, r2
   1b974:	4698      	mov	r8, r3
	if (!name) {
   1b976:	4604      	mov	r4, r0
   1b978:	b980      	cbnz	r0, 1b99c <cf_set+0x34>
		LOG_ERR("Insufficient number of arguments");
   1b97a:	466c      	mov	r4, sp
   1b97c:	b088      	sub	sp, #32
   1b97e:	466a      	mov	r2, sp
   1b980:	4b46      	ldr	r3, [pc, #280]	; (1ba9c <cf_set+0x134>)
   1b982:	6153      	str	r3, [r2, #20]
   1b984:	4b46      	ldr	r3, [pc, #280]	; (1baa0 <cf_set+0x138>)
   1b986:	6193      	str	r3, [r2, #24]
   1b988:	2303      	movs	r3, #3
   1b98a:	f842 3f10 	str.w	r3, [r2, #16]!
   1b98e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
			LOG_ERR("Invalid local identity %lu", next_id);
   1b992:	4844      	ldr	r0, [pc, #272]	; (1baa4 <cf_set+0x13c>)
   1b994:	f01b f9cf 	bl	36d36 <z_log_msg_static_create.constprop.0>
   1b998:	46a5      	mov	sp, r4
			return -EINVAL;
   1b99a:	e019      	b.n	1b9d0 <cf_set+0x68>
	err = bt_settings_decode_key(name, &addr);
   1b99c:	f107 0108 	add.w	r1, r7, #8
   1b9a0:	f019 fe9d 	bl	356de <bt_settings_decode_key>
	if (err) {
   1b9a4:	4605      	mov	r5, r0
   1b9a6:	b1d0      	cbz	r0, 1b9de <cf_set+0x76>
		LOG_ERR("Unable to decode address %s", name);
   1b9a8:	466d      	mov	r5, sp
   1b9aa:	b08a      	sub	sp, #40	; 0x28
   1b9ac:	466a      	mov	r2, sp
   1b9ae:	4b3e      	ldr	r3, [pc, #248]	; (1baa8 <cf_set+0x140>)
   1b9b0:	6153      	str	r3, [r2, #20]
   1b9b2:	4b3b      	ldr	r3, [pc, #236]	; (1baa0 <cf_set+0x138>)
   1b9b4:	483b      	ldr	r0, [pc, #236]	; (1baa4 <cf_set+0x13c>)
   1b9b6:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1b9ba:	f240 3301 	movw	r3, #769	; 0x301
   1b9be:	8413      	strh	r3, [r2, #32]
   1b9c0:	4b3a      	ldr	r3, [pc, #232]	; (1baac <cf_set+0x144>)
   1b9c2:	f842 3f10 	str.w	r3, [r2, #16]!
   1b9c6:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1b9ca:	f01b f9b4 	bl	36d36 <z_log_msg_static_create.constprop.0>
   1b9ce:	46ad      	mov	sp, r5
		return -EINVAL;
   1b9d0:	f06f 0515 	mvn.w	r5, #21
}
   1b9d4:	4628      	mov	r0, r5
   1b9d6:	3714      	adds	r7, #20
   1b9d8:	46bd      	mov	sp, r7
   1b9da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	settings_name_next(name, &next);
   1b9de:	1d39      	adds	r1, r7, #4
   1b9e0:	4620      	mov	r0, r4
   1b9e2:	f018 fae7 	bl	33fb4 <settings_name_next>
	if (!next) {
   1b9e6:	6878      	ldr	r0, [r7, #4]
   1b9e8:	b190      	cbz	r0, 1ba10 <cf_set+0xa8>
		unsigned long next_id = strtoul(next, NULL, 10);
   1b9ea:	220a      	movs	r2, #10
   1b9ec:	4629      	mov	r1, r5
   1b9ee:	f019 fccd 	bl	3538c <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1b9f2:	b168      	cbz	r0, 1ba10 <cf_set+0xa8>
			LOG_ERR("Invalid local identity %lu", next_id);
   1b9f4:	466c      	mov	r4, sp
   1b9f6:	b088      	sub	sp, #32
   1b9f8:	466a      	mov	r2, sp
   1b9fa:	4b2d      	ldr	r3, [pc, #180]	; (1bab0 <cf_set+0x148>)
   1b9fc:	6153      	str	r3, [r2, #20]
   1b9fe:	4b28      	ldr	r3, [pc, #160]	; (1baa0 <cf_set+0x138>)
   1ba00:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1ba04:	2304      	movs	r3, #4
   1ba06:	f842 3f10 	str.w	r3, [r2, #16]!
   1ba0a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1ba0e:	e7c0      	b.n	1b992 <cf_set+0x2a>
	cfg = find_cf_cfg_by_addr(id, &addr);
   1ba10:	f107 0108 	add.w	r1, r7, #8
   1ba14:	2000      	movs	r0, #0
   1ba16:	f7ff fd43 	bl	1b4a0 <find_cf_cfg_by_addr>
	if (!cfg) {
   1ba1a:	4604      	mov	r4, r0
   1ba1c:	b9e8      	cbnz	r0, 1ba5a <cf_set+0xf2>
		cfg = find_cf_cfg(NULL);
   1ba1e:	f7ff fc95 	bl	1b34c <find_cf_cfg>
		if (!cfg) {
   1ba22:	4604      	mov	r4, r0
   1ba24:	b990      	cbnz	r0, 1ba4c <cf_set+0xe4>
			LOG_ERR("Unable to restore CF: no cfg left");
   1ba26:	466c      	mov	r4, sp
   1ba28:	b088      	sub	sp, #32
   1ba2a:	466a      	mov	r2, sp
   1ba2c:	4b21      	ldr	r3, [pc, #132]	; (1bab4 <cf_set+0x14c>)
   1ba2e:	6153      	str	r3, [r2, #20]
   1ba30:	4b1b      	ldr	r3, [pc, #108]	; (1baa0 <cf_set+0x138>)
   1ba32:	6193      	str	r3, [r2, #24]
   1ba34:	2303      	movs	r3, #3
   1ba36:	f842 3f10 	str.w	r3, [r2, #16]!
   1ba3a:	481a      	ldr	r0, [pc, #104]	; (1baa4 <cf_set+0x13c>)
   1ba3c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ba40:	f01b f979 	bl	36d36 <z_log_msg_static_create.constprop.0>
			return -ENOMEM;
   1ba44:	f06f 050b 	mvn.w	r5, #11
   1ba48:	46a5      	mov	sp, r4
   1ba4a:	e7c3      	b.n	1b9d4 <cf_set+0x6c>
		cfg->id = id;
   1ba4c:	2300      	movs	r3, #0
   1ba4e:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1ba52:	f107 0108 	add.w	r1, r7, #8
   1ba56:	f01b f8bd 	bl	36bd4 <bt_addr_le_copy>
	if (len_rd) {
   1ba5a:	f1b9 0f00 	cmp.w	r9, #0
   1ba5e:	d019      	beq.n	1ba94 <cf_set+0x12c>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   1ba60:	f104 0108 	add.w	r1, r4, #8
   1ba64:	2201      	movs	r2, #1
   1ba66:	4640      	mov	r0, r8
   1ba68:	47b0      	blx	r6
		if (len < 0) {
   1ba6a:	1e04      	subs	r4, r0, #0
   1ba6c:	dab2      	bge.n	1b9d4 <cf_set+0x6c>
			LOG_ERR("Failed to decode value (err %zd)", len);
   1ba6e:	466d      	mov	r5, sp
   1ba70:	b088      	sub	sp, #32
   1ba72:	466a      	mov	r2, sp
   1ba74:	4b10      	ldr	r3, [pc, #64]	; (1bab8 <cf_set+0x150>)
   1ba76:	6153      	str	r3, [r2, #20]
   1ba78:	4b09      	ldr	r3, [pc, #36]	; (1baa0 <cf_set+0x138>)
   1ba7a:	480a      	ldr	r0, [pc, #40]	; (1baa4 <cf_set+0x13c>)
   1ba7c:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1ba80:	2304      	movs	r3, #4
   1ba82:	f842 3f10 	str.w	r3, [r2, #16]!
   1ba86:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1ba8a:	f01b f954 	bl	36d36 <z_log_msg_static_create.constprop.0>
   1ba8e:	46ad      	mov	sp, r5
			return len;
   1ba90:	4625      	mov	r5, r4
   1ba92:	e79f      	b.n	1b9d4 <cf_set+0x6c>
		clear_cf_cfg(cfg);
   1ba94:	4620      	mov	r0, r4
   1ba96:	f7ff ff4b 	bl	1b930 <clear_cf_cfg>
   1ba9a:	e79b      	b.n	1b9d4 <cf_set+0x6c>
   1ba9c:	0003c1d3 	.word	0x0003c1d3
   1baa0:	0003def3 	.word	0x0003def3
   1baa4:	000395b8 	.word	0x000395b8
   1baa8:	0003db7f 	.word	0x0003db7f
   1baac:	01000004 	.word	0x01000004
   1bab0:	0003db9f 	.word	0x0003db9f
   1bab4:	0003dcae 	.word	0x0003dcae
   1bab8:	0003dbe4 	.word	0x0003dbe4

0001babc <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   1babc:	b508      	push	{r3, lr}
   1babe:	4613      	mov	r3, r2
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1bac0:	6881      	ldr	r1, [r0, #8]
   1bac2:	4a07      	ldr	r2, [pc, #28]	; (1bae0 <remove_peer_from_attr+0x24>)
   1bac4:	4291      	cmp	r1, r2
   1bac6:	d109      	bne.n	1badc <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   1bac8:	791a      	ldrb	r2, [r3, #4]
   1baca:	6819      	ldr	r1, [r3, #0]
   1bacc:	68c0      	ldr	r0, [r0, #12]
   1bace:	f01b f901 	bl	36cd4 <ccc_find_cfg>
	if (cfg) {
   1bad2:	b118      	cbz	r0, 1badc <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   1bad4:	220a      	movs	r2, #10
   1bad6:	2100      	movs	r1, #0
   1bad8:	f019 fd38 	bl	3554c <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   1badc:	2001      	movs	r0, #1
   1bade:	bd08      	pop	{r3, pc}
   1bae0:	0001bcd5 	.word	0x0001bcd5

0001bae4 <ccc_save>:
{
   1bae4:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1bae6:	4b0c      	ldr	r3, [pc, #48]	; (1bb18 <ccc_save+0x34>)
{
   1bae8:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1baea:	6882      	ldr	r2, [r0, #8]
   1baec:	429a      	cmp	r2, r3
{
   1baee:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   1baf0:	d10f      	bne.n	1bb12 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   1baf2:	7922      	ldrb	r2, [r4, #4]
   1baf4:	6821      	ldr	r1, [r4, #0]
   1baf6:	68c0      	ldr	r0, [r0, #12]
   1baf8:	f01b f8ec 	bl	36cd4 <ccc_find_cfg>
	if (!cfg) {
   1bafc:	b148      	cbz	r0, 1bb12 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   1bafe:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
   1bb02:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   1bb06:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   1bb08:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   1bb0a:	8901      	ldrh	r1, [r0, #8]
   1bb0c:	8151      	strh	r1, [r2, #10]
	save->count++;
   1bb0e:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   1bb12:	2001      	movs	r0, #1
   1bb14:	bd38      	pop	{r3, r4, r5, pc}
   1bb16:	bf00      	nop
   1bb18:	0001bcd5 	.word	0x0001bcd5

0001bb1c <bt_gatt_clear_sc>:
{
   1bb1c:	b5b0      	push	{r4, r5, r7, lr}
   1bb1e:	b08c      	sub	sp, #48	; 0x30
   1bb20:	af02      	add	r7, sp, #8
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1bb22:	f7ff fc41 	bl	1b3a8 <find_sc_cfg>
	if (!cfg) {
   1bb26:	4604      	mov	r4, r0
   1bb28:	b340      	cbz	r0, 1bb7c <bt_gatt_clear_sc+0x60>
		if (cfg->id) {
   1bb2a:	4605      	mov	r5, r0
   1bb2c:	f815 2b01 	ldrb.w	r2, [r5], #1
   1bb30:	b342      	cbz	r2, 1bb84 <bt_gatt_clear_sc+0x68>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1bb32:	2104      	movs	r1, #4
   1bb34:	4638      	mov	r0, r7
   1bb36:	f017 f88c 	bl	32c52 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   1bb3a:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   1bb3c:	1d38      	adds	r0, r7, #4
   1bb3e:	4a12      	ldr	r2, [pc, #72]	; (1bb88 <bt_gatt_clear_sc+0x6c>)
   1bb40:	462b      	mov	r3, r5
   1bb42:	2124      	movs	r1, #36	; 0x24
   1bb44:	f7fa f82e 	bl	15ba4 <bt_settings_encode_key>
		err = settings_delete(key);
   1bb48:	1d38      	adds	r0, r7, #4
   1bb4a:	f018 fa0b 	bl	33f64 <settings_delete>
		if (err) {
   1bb4e:	b180      	cbz	r0, 1bb72 <bt_gatt_clear_sc+0x56>
			LOG_ERR("failed to delete SC (err %d)", err);
   1bb50:	466d      	mov	r5, sp
   1bb52:	b088      	sub	sp, #32
   1bb54:	aa02      	add	r2, sp, #8
   1bb56:	4b0d      	ldr	r3, [pc, #52]	; (1bb8c <bt_gatt_clear_sc+0x70>)
   1bb58:	6153      	str	r3, [r2, #20]
   1bb5a:	4b0d      	ldr	r3, [pc, #52]	; (1bb90 <bt_gatt_clear_sc+0x74>)
   1bb5c:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1bb60:	2304      	movs	r3, #4
   1bb62:	f842 3f10 	str.w	r3, [r2, #16]!
   1bb66:	480b      	ldr	r0, [pc, #44]	; (1bb94 <bt_gatt_clear_sc+0x78>)
   1bb68:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1bb6c:	f01b f8e3 	bl	36d36 <z_log_msg_static_create.constprop.0>
   1bb70:	46ad      	mov	sp, r5
	memset(cfg, 0, sizeof(*cfg));
   1bb72:	220c      	movs	r2, #12
   1bb74:	2100      	movs	r1, #0
   1bb76:	4620      	mov	r0, r4
   1bb78:	f019 fce8 	bl	3554c <memset>
}
   1bb7c:	2000      	movs	r0, #0
   1bb7e:	3728      	adds	r7, #40	; 0x28
   1bb80:	46bd      	mov	sp, r7
   1bb82:	bdb0      	pop	{r4, r5, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   1bb84:	9200      	str	r2, [sp, #0]
   1bb86:	e7d9      	b.n	1bb3c <bt_gatt_clear_sc+0x20>
   1bb88:	0003dfe4 	.word	0x0003dfe4
   1bb8c:	0003dcd4 	.word	0x0003dcd4
   1bb90:	0003df8d 	.word	0x0003df8d
   1bb94:	000395b8 	.word	0x000395b8

0001bb98 <sc_clear>:
{
   1bb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1bb9a:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1bb9e:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1bba0:	4631      	mov	r1, r6
   1bba2:	7a00      	ldrb	r0, [r0, #8]
{
   1bba4:	af00      	add	r7, sp, #0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1bba6:	f019 ff1b 	bl	359e0 <bt_addr_le_is_bonded>
   1bbaa:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1bbac:	4631      	mov	r1, r6
   1bbae:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1bbb0:	b1ad      	cbz	r5, 1bbde <sc_clear+0x46>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1bbb2:	f7ff ffb3 	bl	1bb1c <bt_gatt_clear_sc>
		if (err) {
   1bbb6:	b180      	cbz	r0, 1bbda <sc_clear+0x42>
			LOG_ERR("Failed to clear SC %d", err);
   1bbb8:	466c      	mov	r4, sp
   1bbba:	b088      	sub	sp, #32
   1bbbc:	466a      	mov	r2, sp
   1bbbe:	4b0c      	ldr	r3, [pc, #48]	; (1bbf0 <sc_clear+0x58>)
   1bbc0:	6153      	str	r3, [r2, #20]
   1bbc2:	4b0c      	ldr	r3, [pc, #48]	; (1bbf4 <sc_clear+0x5c>)
   1bbc4:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1bbc8:	2304      	movs	r3, #4
   1bbca:	f842 3f10 	str.w	r3, [r2, #16]!
   1bbce:	480a      	ldr	r0, [pc, #40]	; (1bbf8 <sc_clear+0x60>)
   1bbd0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1bbd4:	f01b f8af 	bl	36d36 <z_log_msg_static_create.constprop.0>
   1bbd8:	46a5      	mov	sp, r4
}
   1bbda:	46bd      	mov	sp, r7
   1bbdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1bbde:	f7ff fbe3 	bl	1b3a8 <find_sc_cfg>
		if (cfg) {
   1bbe2:	2800      	cmp	r0, #0
   1bbe4:	d0f9      	beq.n	1bbda <sc_clear+0x42>
	memset(cfg, 0, sizeof(*cfg));
   1bbe6:	220c      	movs	r2, #12
   1bbe8:	4629      	mov	r1, r5
   1bbea:	f019 fcaf 	bl	3554c <memset>
}
   1bbee:	e7f4      	b.n	1bbda <sc_clear+0x42>
   1bbf0:	0003dcf5 	.word	0x0003dcf5
   1bbf4:	0003df9e 	.word	0x0003df9e
   1bbf8:	000395b8 	.word	0x000395b8

0001bbfc <read_ppcp>:
{
   1bbfc:	b513      	push	{r0, r1, r4, lr}
   1bbfe:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1bc02:	4c0b      	ldr	r4, [pc, #44]	; (1bc30 <read_ppcp+0x34>)
{
   1bc04:	4610      	mov	r0, r2
	if (offset > value_len) {
   1bc06:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1bc08:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
   1bc0c:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   1bc10:	d80b      	bhi.n	1bc2a <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
   1bc12:	f1c1 0408 	rsb	r4, r1, #8
   1bc16:	429c      	cmp	r4, r3
   1bc18:	bfa8      	it	ge
   1bc1a:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1bc1c:	4622      	mov	r2, r4
   1bc1e:	4469      	add	r1, sp
   1bc20:	f019 fc89 	bl	35536 <memcpy>
}
   1bc24:	4620      	mov	r0, r4
   1bc26:	b002      	add	sp, #8
   1bc28:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1bc2a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1bc2e:	e7f9      	b.n	1bc24 <read_ppcp+0x28>
   1bc30:	00280018 	.word	0x00280018

0001bc34 <disconnected_cb>:
{
   1bc34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1bc38:	4b23      	ldr	r3, [pc, #140]	; (1bcc8 <disconnected_cb+0x94>)
{
   1bc3a:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1bc3c:	6882      	ldr	r2, [r0, #8]
   1bc3e:	429a      	cmp	r2, r3
{
   1bc40:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1bc42:	d102      	bne.n	1bc4a <disconnected_cb+0x16>
	ccc = attr->user_data;
   1bc44:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   1bc46:	8963      	ldrh	r3, [r4, #10]
   1bc48:	bb33      	cbnz	r3, 1bc98 <disconnected_cb+0x64>
}
   1bc4a:	2001      	movs	r0, #1
   1bc4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
   1bc50:	f01a f967 	bl	35f22 <bt_conn_unref>
		if (ccc->cfg_changed) {
   1bc54:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   1bc56:	2100      	movs	r1, #0
   1bc58:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   1bc5a:	2b00      	cmp	r3, #0
   1bc5c:	d0f5      	beq.n	1bc4a <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   1bc5e:	4638      	mov	r0, r7
   1bc60:	4798      	blx	r3
   1bc62:	e7f2      	b.n	1bc4a <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1bc64:	f105 0888 	add.w	r8, r5, #136	; 0x88
   1bc68:	7a28      	ldrb	r0, [r5, #8]
   1bc6a:	4641      	mov	r1, r8
   1bc6c:	f019 feb8 	bl	359e0 <bt_addr_le_is_bonded>
   1bc70:	b968      	cbnz	r0, 1bc8e <disconnected_cb+0x5a>
				if (ccc == &sc_ccc) {
   1bc72:	4b16      	ldr	r3, [pc, #88]	; (1bccc <disconnected_cb+0x98>)
   1bc74:	429c      	cmp	r4, r3
   1bc76:	d102      	bne.n	1bc7e <disconnected_cb+0x4a>
					sc_clear(conn);
   1bc78:	4628      	mov	r0, r5
   1bc7a:	f7ff ff8d 	bl	1bb98 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1bc7e:	4914      	ldr	r1, [pc, #80]	; (1bcd0 <disconnected_cb+0x9c>)
   1bc80:	4630      	mov	r0, r6
   1bc82:	f01a ffa7 	bl	36bd4 <bt_addr_le_copy>
	cfg->id = 0U;
   1bc86:	2300      	movs	r3, #0
   1bc88:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   1bc8a:	8123      	strh	r3, [r4, #8]
}
   1bc8c:	e7e2      	b.n	1bc54 <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1bc8e:	4641      	mov	r1, r8
   1bc90:	4630      	mov	r0, r6
   1bc92:	f01a ff9f 	bl	36bd4 <bt_addr_le_copy>
   1bc96:	e7dd      	b.n	1bc54 <disconnected_cb+0x20>
		if (!cfg->value) {
   1bc98:	8923      	ldrh	r3, [r4, #8]
   1bc9a:	2b00      	cmp	r3, #0
   1bc9c:	d0da      	beq.n	1bc54 <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1bc9e:	4626      	mov	r6, r4
   1bca0:	4628      	mov	r0, r5
   1bca2:	f816 1b01 	ldrb.w	r1, [r6], #1
   1bca6:	4632      	mov	r2, r6
   1bca8:	f01a f9d4 	bl	36054 <bt_conn_is_peer_addr_le>
   1bcac:	2800      	cmp	r0, #0
   1bcae:	d1d9      	bne.n	1bc64 <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1bcb0:	7820      	ldrb	r0, [r4, #0]
   1bcb2:	4631      	mov	r1, r6
   1bcb4:	f7fd fd7e 	bl	197b4 <bt_conn_lookup_addr_le>
			if (tmp) {
   1bcb8:	2800      	cmp	r0, #0
   1bcba:	d0cb      	beq.n	1bc54 <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
   1bcbc:	7b43      	ldrb	r3, [r0, #13]
   1bcbe:	2b07      	cmp	r3, #7
   1bcc0:	d1c6      	bne.n	1bc50 <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
   1bcc2:	f01a f92e 	bl	35f22 <bt_conn_unref>
	if (!value_used) {
   1bcc6:	e7c0      	b.n	1bc4a <disconnected_cb+0x16>
   1bcc8:	0001bcd5 	.word	0x0001bcd5
   1bccc:	20000334 	.word	0x20000334
   1bcd0:	0003c0a9 	.word	0x0003c0a9

0001bcd4 <bt_gatt_attr_write_ccc>:
{
   1bcd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bcd8:	af00      	add	r7, sp, #0
   1bcda:	4698      	mov	r8, r3
   1bcdc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1bcde:	f8d1 a00c 	ldr.w	sl, [r1, #12]
{
   1bce2:	4605      	mov	r5, r0
   1bce4:	4689      	mov	r9, r1
	if (offset) {
   1bce6:	2b00      	cmp	r3, #0
   1bce8:	d175      	bne.n	1bdd6 <bt_gatt_attr_write_ccc+0x102>
	if (!len || len > sizeof(uint16_t)) {
   1bcea:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   1bcee:	2b01      	cmp	r3, #1
   1bcf0:	d874      	bhi.n	1bddc <bt_gatt_attr_write_ccc+0x108>
	if (len < sizeof(uint16_t)) {
   1bcf2:	f1b8 0f01 	cmp.w	r8, #1
	cfg = find_ccc_cfg(conn, ccc);
   1bcf6:	4651      	mov	r1, sl
		value = *(uint8_t *)buf;
   1bcf8:	7816      	ldrb	r6, [r2, #0]
   1bcfa:	bf18      	it	ne
   1bcfc:	8816      	ldrhne	r6, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   1bcfe:	f7ff fb75 	bl	1b3ec <find_ccc_cfg>
	if (!cfg) {
   1bd02:	4604      	mov	r4, r0
   1bd04:	bb18      	cbnz	r0, 1bd4e <bt_gatt_attr_write_ccc+0x7a>
		if (!value) {
   1bd06:	b91e      	cbnz	r6, 1bd10 <bt_gatt_attr_write_ccc+0x3c>
			return len;
   1bd08:	4640      	mov	r0, r8
}
   1bd0a:	46bd      	mov	sp, r7
   1bd0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1bd10:	4651      	mov	r1, sl
   1bd12:	f7ff fb6b 	bl	1b3ec <find_ccc_cfg>
		if (!cfg) {
   1bd16:	4604      	mov	r4, r0
   1bd18:	b990      	cbnz	r0, 1bd40 <bt_gatt_attr_write_ccc+0x6c>
			LOG_WRN("No space to store CCC cfg");
   1bd1a:	466c      	mov	r4, sp
   1bd1c:	b088      	sub	sp, #32
   1bd1e:	466a      	mov	r2, sp
   1bd20:	4b30      	ldr	r3, [pc, #192]	; (1bde4 <bt_gatt_attr_write_ccc+0x110>)
   1bd22:	6153      	str	r3, [r2, #20]
   1bd24:	4b30      	ldr	r3, [pc, #192]	; (1bde8 <bt_gatt_attr_write_ccc+0x114>)
   1bd26:	6193      	str	r3, [r2, #24]
   1bd28:	2303      	movs	r3, #3
   1bd2a:	4830      	ldr	r0, [pc, #192]	; (1bdec <bt_gatt_attr_write_ccc+0x118>)
   1bd2c:	f842 3f10 	str.w	r3, [r2, #16]!
   1bd30:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1bd34:	f01a ffff 	bl	36d36 <z_log_msg_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1bd38:	f06f 0010 	mvn.w	r0, #16
   1bd3c:	46a5      	mov	sp, r4
   1bd3e:	e7e4      	b.n	1bd0a <bt_gatt_attr_write_ccc+0x36>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1bd40:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1bd44:	3001      	adds	r0, #1
   1bd46:	f01a ff45 	bl	36bd4 <bt_addr_le_copy>
		cfg->id = conn->id;
   1bd4a:	7a2b      	ldrb	r3, [r5, #8]
   1bd4c:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1bd4e:	f8da 3010 	ldr.w	r3, [sl, #16]
   1bd52:	bba3      	cbnz	r3, 1bdbe <bt_gatt_attr_write_ccc+0xea>
	value_changed = cfg->value != value;
   1bd54:	f8b4 b008 	ldrh.w	fp, [r4, #8]
	cfg->value = value;
   1bd58:	8126      	strh	r6, [r4, #8]
	if (cfg->value != ccc->value) {
   1bd5a:	f8ba 300a 	ldrh.w	r3, [sl, #10]
   1bd5e:	42b3      	cmp	r3, r6
   1bd60:	d003      	beq.n	1bd6a <bt_gatt_attr_write_ccc+0x96>
		gatt_ccc_changed(attr, ccc);
   1bd62:	4651      	mov	r1, sl
   1bd64:	4648      	mov	r0, r9
   1bd66:	f01a ff12 	bl	36b8e <gatt_ccc_changed>
	if (value_changed) {
   1bd6a:	45b3      	cmp	fp, r6
   1bd6c:	d01e      	beq.n	1bdac <bt_gatt_attr_write_ccc+0xd8>
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   1bd6e:	4628      	mov	r0, r5
   1bd70:	f7fd fc02 	bl	19578 <bt_conn_index>
   1bd74:	f8df 9078 	ldr.w	r9, [pc, #120]	; 1bdf0 <bt_gatt_attr_write_ccc+0x11c>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   1bd78:	f859 3020 	ldr.w	r3, [r9, r0, lsl #2]
   1bd7c:	429d      	cmp	r5, r3
   1bd7e:	d015      	beq.n	1bdac <bt_gatt_attr_write_ccc+0xd8>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1bd80:	7a28      	ldrb	r0, [r5, #8]
   1bd82:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1bd86:	f019 fe2b 	bl	359e0 <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   1bd8a:	b178      	cbz	r0, 1bdac <bt_gatt_attr_write_ccc+0xd8>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   1bd8c:	4628      	mov	r0, r5
   1bd8e:	f7fd fbf3 	bl	19578 <bt_conn_index>
   1bd92:	4682      	mov	sl, r0
			bt_conn_ref(conn);
   1bd94:	4628      	mov	r0, r5
   1bd96:	f01a f8a8 	bl	35eea <bt_conn_ref>
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   1bd9a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   1bd9e:	f849 002a 	str.w	r0, [r9, sl, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   1bda2:	2300      	movs	r3, #0
   1bda4:	f109 0008 	add.w	r0, r9, #8
   1bda8:	f016 f8ce 	bl	31f48 <k_work_reschedule>
	if (!value) {
   1bdac:	2e00      	cmp	r6, #0
   1bdae:	d1ab      	bne.n	1bd08 <bt_gatt_attr_write_ccc+0x34>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1bdb0:	4910      	ldr	r1, [pc, #64]	; (1bdf4 <bt_gatt_attr_write_ccc+0x120>)
   1bdb2:	1c60      	adds	r0, r4, #1
   1bdb4:	f01a ff0e 	bl	36bd4 <bt_addr_le_copy>
	cfg->id = 0U;
   1bdb8:	7026      	strb	r6, [r4, #0]
	cfg->value = 0U;
   1bdba:	8126      	strh	r6, [r4, #8]
}
   1bdbc:	e7a4      	b.n	1bd08 <bt_gatt_attr_write_ccc+0x34>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1bdbe:	4632      	mov	r2, r6
   1bdc0:	4649      	mov	r1, r9
   1bdc2:	4628      	mov	r0, r5
   1bdc4:	4798      	blx	r3
		if (write < 0) {
   1bdc6:	2800      	cmp	r0, #0
   1bdc8:	db9f      	blt.n	1bd0a <bt_gatt_attr_write_ccc+0x36>
		if (write != sizeof(value) && write != 1) {
   1bdca:	3801      	subs	r0, #1
   1bdcc:	2801      	cmp	r0, #1
   1bdce:	d9c1      	bls.n	1bd54 <bt_gatt_attr_write_ccc+0x80>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1bdd0:	f06f 000d 	mvn.w	r0, #13
   1bdd4:	e799      	b.n	1bd0a <bt_gatt_attr_write_ccc+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1bdd6:	f06f 0006 	mvn.w	r0, #6
   1bdda:	e796      	b.n	1bd0a <bt_gatt_attr_write_ccc+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1bddc:	f06f 000c 	mvn.w	r0, #12
   1bde0:	e793      	b.n	1bd0a <bt_gatt_attr_write_ccc+0x36>
   1bde2:	bf00      	nop
   1bde4:	0003dd0f 	.word	0x0003dd0f
   1bde8:	0003df76 	.word	0x0003df76
   1bdec:	000395b8 	.word	0x000395b8
   1bdf0:	20001300 	.word	0x20001300
   1bdf4:	0003c0a9 	.word	0x0003c0a9

0001bdf8 <sc_commit>:
{
   1bdf8:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1bdfa:	4809      	ldr	r0, [pc, #36]	; (1be20 <sc_commit+0x28>)
   1bdfc:	f06f 0102 	mvn.w	r1, #2
   1be00:	f01a ff8a 	bl	36d18 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1be04:	4806      	ldr	r0, [pc, #24]	; (1be20 <sc_commit+0x28>)
   1be06:	f01a ff72 	bl	36cee <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1be0a:	07c3      	lsls	r3, r0, #31
   1be0c:	d505      	bpl.n	1be1a <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   1be0e:	4805      	ldr	r0, [pc, #20]	; (1be24 <sc_commit+0x2c>)
   1be10:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1be14:	2300      	movs	r3, #0
   1be16:	f016 f897 	bl	31f48 <k_work_reschedule>
}
   1be1a:	2000      	movs	r0, #0
   1be1c:	bd08      	pop	{r3, pc}
   1be1e:	bf00      	nop
   1be20:	20001400 	.word	0x20001400
   1be24:	200013d0 	.word	0x200013d0

0001be28 <sc_indicate_rsp>:
{
   1be28:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1be2a:	f06f 0102 	mvn.w	r1, #2
   1be2e:	4604      	mov	r4, r0
   1be30:	480f      	ldr	r0, [pc, #60]	; (1be70 <sc_indicate_rsp+0x48>)
   1be32:	f01a ff71 	bl	36d18 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1be36:	480e      	ldr	r0, [pc, #56]	; (1be70 <sc_indicate_rsp+0x48>)
   1be38:	f01a ff59 	bl	36cee <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1be3c:	07c2      	lsls	r2, r0, #31
   1be3e:	d504      	bpl.n	1be4a <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   1be40:	480c      	ldr	r0, [pc, #48]	; (1be74 <sc_indicate_rsp+0x4c>)
   1be42:	2200      	movs	r2, #0
   1be44:	2300      	movs	r3, #0
   1be46:	f016 f87f 	bl	31f48 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   1be4a:	4620      	mov	r0, r4
   1be4c:	f01a fe6e 	bl	36b2c <bt_att_fixed_chan_only>
   1be50:	b160      	cbz	r0, 1be6c <sc_indicate_rsp+0x44>
		cfg = find_cf_cfg(conn);
   1be52:	4620      	mov	r0, r4
   1be54:	f7ff fa7a 	bl	1b34c <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1be58:	b140      	cbz	r0, 1be6c <sc_indicate_rsp+0x44>
   1be5a:	7a03      	ldrb	r3, [r0, #8]
   1be5c:	07db      	lsls	r3, r3, #31
   1be5e:	d505      	bpl.n	1be6c <sc_indicate_rsp+0x44>
}
   1be60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1be64:	2101      	movs	r1, #1
   1be66:	300c      	adds	r0, #12
   1be68:	f01a bf47 	b.w	36cfa <atomic_or>
   1be6c:	bd10      	pop	{r4, pc}
   1be6e:	bf00      	nop
   1be70:	20001400 	.word	0x20001400
   1be74:	200013d0 	.word	0x200013d0

0001be78 <bt_gatt_init>:
{
   1be78:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1be7a:	4b24      	ldr	r3, [pc, #144]	; (1bf0c <bt_gatt_init+0x94>)
   1be7c:	f3bf 8f5b 	dmb	ish
   1be80:	2201      	movs	r2, #1
   1be82:	e853 1f00 	ldrex	r1, [r3]
   1be86:	2900      	cmp	r1, #0
   1be88:	d103      	bne.n	1be92 <bt_gatt_init+0x1a>
   1be8a:	e843 2000 	strex	r0, r2, [r3]
   1be8e:	2800      	cmp	r0, #0
   1be90:	d1f7      	bne.n	1be82 <bt_gatt_init+0xa>
   1be92:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1be96:	d138      	bne.n	1bf0a <bt_gatt_init+0x92>
   1be98:	f3bf 8f5b 	dmb	ish
   1be9c:	4b1c      	ldr	r3, [pc, #112]	; (1bf10 <bt_gatt_init+0x98>)
   1be9e:	e853 1f00 	ldrex	r1, [r3]
   1bea2:	2900      	cmp	r1, #0
   1bea4:	d103      	bne.n	1beae <bt_gatt_init+0x36>
   1bea6:	e843 2000 	strex	r0, r2, [r3]
   1beaa:	2800      	cmp	r0, #0
   1beac:	d1f7      	bne.n	1be9e <bt_gatt_init+0x26>
   1beae:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   1beb2:	d108      	bne.n	1bec6 <bt_gatt_init+0x4e>
   1beb4:	4917      	ldr	r1, [pc, #92]	; (1bf14 <bt_gatt_init+0x9c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1beb6:	4a18      	ldr	r2, [pc, #96]	; (1bf18 <bt_gatt_init+0xa0>)
   1beb8:	880b      	ldrh	r3, [r1, #0]
   1beba:	4c18      	ldr	r4, [pc, #96]	; (1bf1c <bt_gatt_init+0xa4>)
	if (!atomic_cas(&service_init, 0, 1)) {
   1bebc:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1bebe:	42a2      	cmp	r2, r4
   1bec0:	d31d      	bcc.n	1befe <bt_gatt_init+0x86>
   1bec2:	b100      	cbz	r0, 1bec6 <bt_gatt_init+0x4e>
   1bec4:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   1bec6:	4b16      	ldr	r3, [pc, #88]	; (1bf20 <bt_gatt_init+0xa8>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1bec8:	4916      	ldr	r1, [pc, #88]	; (1bf24 <bt_gatt_init+0xac>)
   1beca:	4817      	ldr	r0, [pc, #92]	; (1bf28 <bt_gatt_init+0xb0>)
   1becc:	2200      	movs	r2, #0
	list->tail = NULL;
   1bece:	e9c3 2200 	strd	r2, r2, [r3]
   1bed2:	f01c fdbc 	bl	38a4e <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1bed6:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1beda:	2300      	movs	r3, #0
   1bedc:	4812      	ldr	r0, [pc, #72]	; (1bf28 <bt_gatt_init+0xb0>)
   1bede:	f7f9 ff31 	bl	15d44 <bt_long_wq_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1bee2:	4912      	ldr	r1, [pc, #72]	; (1bf2c <bt_gatt_init+0xb4>)
   1bee4:	4812      	ldr	r0, [pc, #72]	; (1bf30 <bt_gatt_init+0xb8>)
   1bee6:	f01c fdb2 	bl	38a4e <k_work_init_delayable>
   1beea:	2102      	movs	r1, #2
   1beec:	4811      	ldr	r0, [pc, #68]	; (1bf34 <bt_gatt_init+0xbc>)
   1beee:	f01a ff04 	bl	36cfa <atomic_or>
}
   1bef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   1bef6:	4910      	ldr	r1, [pc, #64]	; (1bf38 <bt_gatt_init+0xc0>)
   1bef8:	4810      	ldr	r0, [pc, #64]	; (1bf3c <bt_gatt_init+0xc4>)
   1befa:	f01c bda8 	b.w	38a4e <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   1befe:	6850      	ldr	r0, [r2, #4]
   1bf00:	4403      	add	r3, r0
   1bf02:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1bf04:	3208      	adds	r2, #8
   1bf06:	2001      	movs	r0, #1
   1bf08:	e7d9      	b.n	1bebe <bt_gatt_init+0x46>
}
   1bf0a:	bd10      	pop	{r4, pc}
   1bf0c:	20001ca0 	.word	0x20001ca0
   1bf10:	20001c9c 	.word	0x20001c9c
   1bf14:	20003292 	.word	0x20003292
   1bf18:	00039518 	.word	0x00039518
   1bf1c:	00039538 	.word	0x00039538
   1bf20:	20001ca4 	.word	0x20001ca4
   1bf24:	0001c1a1 	.word	0x0001c1a1
   1bf28:	20001358 	.word	0x20001358
   1bf2c:	0001c5e1 	.word	0x0001c5e1
   1bf30:	200013d0 	.word	0x200013d0
   1bf34:	20001400 	.word	0x20001400
   1bf38:	000371ab 	.word	0x000371ab
   1bf3c:	20001308 	.word	0x20001308

0001bf40 <bt_gatt_cb_register>:
	parent->next = child;
   1bf40:	2300      	movs	r3, #0
   1bf42:	6043      	str	r3, [r0, #4]
	return list->tail;
   1bf44:	4b04      	ldr	r3, [pc, #16]	; (1bf58 <bt_gatt_cb_register+0x18>)
   1bf46:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&callback_list, &cb->node);
   1bf48:	1d02      	adds	r2, r0, #4
Z_GENLIST_APPEND(slist, snode)
   1bf4a:	b911      	cbnz	r1, 1bf52 <bt_gatt_cb_register+0x12>
	list->head = node;
   1bf4c:	e9c3 2200 	strd	r2, r2, [r3]
}
   1bf50:	4770      	bx	lr
	parent->next = child;
   1bf52:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1bf54:	605a      	str	r2, [r3, #4]
}
   1bf56:	4770      	bx	lr
   1bf58:	20001ca4 	.word	0x20001ca4

0001bf5c <bt_gatt_attr_get_handle>:
{
   1bf5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1bf60:	4603      	mov	r3, r0
   1bf62:	b148      	cbz	r0, 1bf78 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   1bf64:	8a00      	ldrh	r0, [r0, #16]
   1bf66:	b938      	cbnz	r0, 1bf78 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1bf68:	4912      	ldr	r1, [pc, #72]	; (1bfb4 <bt_gatt_attr_get_handle+0x58>)
   1bf6a:	f8df e04c 	ldr.w	lr, [pc, #76]	; 1bfb8 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   1bf6e:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1bf70:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1bf74:	4571      	cmp	r1, lr
   1bf76:	d301      	bcc.n	1bf7c <bt_gatt_attr_get_handle+0x20>
}
   1bf78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1bf7c:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   1bf80:	42bb      	cmp	r3, r7
   1bf82:	d304      	bcc.n	1bf8e <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1bf84:	fb0c 7206 	mla	r2, ip, r6, r7
   1bf88:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   1bf8a:	4293      	cmp	r3, r2
   1bf8c:	d90e      	bls.n	1bfac <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   1bf8e:	4434      	add	r4, r6
   1bf90:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1bf92:	3108      	adds	r1, #8
   1bf94:	4614      	mov	r4, r2
   1bf96:	e7ed      	b.n	1bf74 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   1bf98:	fb0c 7805 	mla	r8, ip, r5, r7
   1bf9c:	4543      	cmp	r3, r8
   1bf9e:	d007      	beq.n	1bfb0 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1bfa0:	3501      	adds	r5, #1
   1bfa2:	1962      	adds	r2, r4, r5
   1bfa4:	42b5      	cmp	r5, r6
   1bfa6:	b292      	uxth	r2, r2
   1bfa8:	d1f6      	bne.n	1bf98 <bt_gatt_attr_get_handle+0x3c>
   1bfaa:	e7f2      	b.n	1bf92 <bt_gatt_attr_get_handle+0x36>
   1bfac:	2500      	movs	r5, #0
   1bfae:	e7f8      	b.n	1bfa2 <bt_gatt_attr_get_handle+0x46>
   1bfb0:	4610      	mov	r0, r2
   1bfb2:	e7e1      	b.n	1bf78 <bt_gatt_attr_get_handle+0x1c>
   1bfb4:	00039518 	.word	0x00039518
   1bfb8:	00039538 	.word	0x00039538

0001bfbc <bt_gatt_foreach_attr_type>:
{
   1bfbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bfc0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   1bfc4:	9100      	str	r1, [sp, #0]
   1bfc6:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   1bfc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1bfcc:	2d00      	cmp	r5, #0
   1bfce:	bf08      	it	eq
   1bfd0:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1bfd2:	4b24      	ldr	r3, [pc, #144]	; (1c064 <bt_gatt_foreach_attr_type+0xa8>)
   1bfd4:	881b      	ldrh	r3, [r3, #0]
   1bfd6:	4283      	cmp	r3, r0
{
   1bfd8:	4607      	mov	r7, r0
   1bfda:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1bfdc:	d23c      	bcs.n	1c058 <bt_gatt_foreach_attr_type+0x9c>
}
   1bfde:	b003      	add	sp, #12
   1bfe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   1bfe4:	6873      	ldr	r3, [r6, #4]
   1bfe6:	4423      	add	r3, r4
   1bfe8:	42bb      	cmp	r3, r7
   1bfea:	d232      	bcs.n	1c052 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   1bfec:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1bfee:	3608      	adds	r6, #8
   1bff0:	4b1d      	ldr	r3, [pc, #116]	; (1c068 <bt_gatt_foreach_attr_type+0xac>)
   1bff2:	429e      	cmp	r6, r3
   1bff4:	d3f6      	bcc.n	1bfe4 <bt_gatt_foreach_attr_type+0x28>
   1bff6:	e7f2      	b.n	1bfde <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1bff8:	5889      	ldr	r1, [r1, r2]
   1bffa:	9301      	str	r3, [sp, #4]
   1bffc:	4640      	mov	r0, r8
   1bffe:	f019 fb92 	bl	35726 <bt_uuid_cmp>
   1c002:	9b01      	ldr	r3, [sp, #4]
   1c004:	b190      	cbz	r0, 1c02c <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1c006:	3401      	adds	r4, #1
   1c008:	f10a 0a01 	add.w	sl, sl, #1
   1c00c:	b2a4      	uxth	r4, r4
   1c00e:	6873      	ldr	r3, [r6, #4]
   1c010:	4553      	cmp	r3, sl
   1c012:	d9ec      	bls.n	1bfee <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   1c014:	9b00      	ldr	r3, [sp, #0]
   1c016:	429c      	cmp	r4, r3
   1c018:	d8e1      	bhi.n	1bfde <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   1c01a:	42bc      	cmp	r4, r7
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1c01c:	6831      	ldr	r1, [r6, #0]
	if (handle < start_handle) {
   1c01e:	d3f2      	bcc.n	1c006 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1c020:	fb0b f20a 	mul.w	r2, fp, sl
   1c024:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1c026:	f1b8 0f00 	cmp.w	r8, #0
   1c02a:	d1e5      	bne.n	1bff8 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   1c02c:	f1b9 0f00 	cmp.w	r9, #0
   1c030:	d10b      	bne.n	1c04a <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   1c032:	3d01      	subs	r5, #1
   1c034:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1c036:	4618      	mov	r0, r3
   1c038:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1c03a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1c03c:	4621      	mov	r1, r4
   1c03e:	4798      	blx	r3
	if (!*num_matches) {
   1c040:	2d00      	cmp	r5, #0
   1c042:	d0cc      	beq.n	1bfde <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1c044:	2800      	cmp	r0, #0
   1c046:	d1de      	bne.n	1c006 <bt_gatt_foreach_attr_type+0x4a>
   1c048:	e7c9      	b.n	1bfde <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   1c04a:	68da      	ldr	r2, [r3, #12]
   1c04c:	4591      	cmp	r9, r2
   1c04e:	d1da      	bne.n	1c006 <bt_gatt_foreach_attr_type+0x4a>
   1c050:	e7ef      	b.n	1c032 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1c052:	f04f 0a00 	mov.w	sl, #0
   1c056:	e7da      	b.n	1c00e <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1c058:	4e04      	ldr	r6, [pc, #16]	; (1c06c <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   1c05a:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1c05c:	f04f 0b14 	mov.w	fp, #20
   1c060:	e7c6      	b.n	1bff0 <bt_gatt_foreach_attr_type+0x34>
   1c062:	bf00      	nop
   1c064:	20003292 	.word	0x20003292
   1c068:	00039538 	.word	0x00039538
   1c06c:	00039518 	.word	0x00039518

0001c070 <db_hash_gen>:
{
   1c070:	b5b0      	push	{r4, r5, r7, lr}
   1c072:	b0c8      	sub	sp, #288	; 0x120
   1c074:	af00      	add	r7, sp, #0
	uint8_t key[16] = {};
   1c076:	2400      	movs	r4, #0
{
   1c078:	4605      	mov	r5, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1c07a:	f107 0270 	add.w	r2, r7, #112	; 0x70
   1c07e:	4639      	mov	r1, r7
   1c080:	f107 0010 	add.w	r0, r7, #16
	uint8_t key[16] = {};
   1c084:	e9c7 4400 	strd	r4, r4, [r7]
   1c088:	e9c7 4402 	strd	r4, r4, [r7, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1c08c:	f019 f8a2 	bl	351d4 <tc_cmac_setup>
   1c090:	b998      	cbnz	r0, 1c0ba <db_hash_gen+0x4a>
		LOG_ERR("Unable to setup AES CMAC");
   1c092:	466c      	mov	r4, sp
   1c094:	b088      	sub	sp, #32
   1c096:	466a      	mov	r2, sp
   1c098:	4b1b      	ldr	r3, [pc, #108]	; (1c108 <db_hash_gen+0x98>)
		LOG_ERR("Unable to calculate hash");
   1c09a:	6153      	str	r3, [r2, #20]
   1c09c:	4b1b      	ldr	r3, [pc, #108]	; (1c10c <db_hash_gen+0x9c>)
   1c09e:	6193      	str	r3, [r2, #24]
   1c0a0:	2303      	movs	r3, #3
   1c0a2:	f842 3f10 	str.w	r3, [r2, #16]!
   1c0a6:	481a      	ldr	r0, [pc, #104]	; (1c110 <db_hash_gen+0xa0>)
   1c0a8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c0ac:	f01a fe43 	bl	36d36 <z_log_msg_static_create.constprop.0>
   1c0b0:	46a5      	mov	sp, r4
}
   1c0b2:	f507 7790 	add.w	r7, r7, #288	; 0x120
   1c0b6:	46bd      	mov	sp, r7
   1c0b8:	bdb0      	pop	{r4, r5, r7, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1c0ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c0be:	2001      	movs	r0, #1
   1c0c0:	4a14      	ldr	r2, [pc, #80]	; (1c114 <db_hash_gen+0xa4>)
   1c0c2:	f107 0310 	add.w	r3, r7, #16
   1c0c6:	f01a ff79 	bl	36fbc <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1c0ca:	4813      	ldr	r0, [pc, #76]	; (1c118 <db_hash_gen+0xa8>)
   1c0cc:	f107 0110 	add.w	r1, r7, #16
   1c0d0:	f019 f915 	bl	352fe <tc_cmac_final>
   1c0d4:	b920      	cbnz	r0, 1c0e0 <db_hash_gen+0x70>
		LOG_ERR("Unable to calculate hash");
   1c0d6:	466c      	mov	r4, sp
   1c0d8:	b088      	sub	sp, #32
   1c0da:	466a      	mov	r2, sp
   1c0dc:	4b0f      	ldr	r3, [pc, #60]	; (1c11c <db_hash_gen+0xac>)
   1c0de:	e7dc      	b.n	1c09a <db_hash_gen+0x2a>
   1c0e0:	4b0d      	ldr	r3, [pc, #52]	; (1c118 <db_hash_gen+0xa8>)
   1c0e2:	f103 0210 	add.w	r2, r3, #16
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   1c0e6:	3401      	adds	r4, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
   1c0e8:	7819      	ldrb	r1, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1c0ea:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   1c0ee:	f803 0b01 	strb.w	r0, [r3], #1
	for (i = 0; i < (length/2); i++) {
   1c0f2:	2c08      	cmp	r4, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1c0f4:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1c0f6:	d1f6      	bne.n	1c0e6 <db_hash_gen+0x76>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   1c0f8:	b10d      	cbz	r5, 1c0fe <db_hash_gen+0x8e>
		db_hash_store();
   1c0fa:	f7ff fbcb 	bl	1b894 <db_hash_store>
   1c0fe:	2104      	movs	r1, #4
   1c100:	4807      	ldr	r0, [pc, #28]	; (1c120 <db_hash_gen+0xb0>)
   1c102:	f01a fdfa 	bl	36cfa <atomic_or>
   1c106:	e7d4      	b.n	1c0b2 <db_hash_gen+0x42>
   1c108:	0003dd2d 	.word	0x0003dd2d
   1c10c:	0003dfcf 	.word	0x0003dfcf
   1c110:	000395b8 	.word	0x000395b8
   1c114:	00036c1f 	.word	0x00036c1f
   1c118:	20001338 	.word	0x20001338
   1c11c:	0003dd4a 	.word	0x0003dd4a
   1c120:	20001400 	.word	0x20001400

0001c124 <db_hash_read>:
{
   1c124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1c126:	491b      	ldr	r1, [pc, #108]	; (1c194 <db_hash_read+0x70>)
{
   1c128:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1c12c:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1c12e:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1c132:	4615      	mov	r5, r2
   1c134:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1c136:	f01c fcac 	bl	38a92 <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c13a:	4817      	ldr	r0, [pc, #92]	; (1c198 <db_hash_read+0x74>)
   1c13c:	f01a fdd7 	bl	36cee <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1c140:	0741      	lsls	r1, r0, #29
   1c142:	d402      	bmi.n	1c14a <db_hash_read+0x26>
		db_hash_gen(true);
   1c144:	2001      	movs	r0, #1
   1c146:	f7ff ff93 	bl	1c070 <db_hash_gen>
	cfg = find_cf_cfg(conn);
   1c14a:	4620      	mov	r0, r4
   1c14c:	f7ff f8fe 	bl	1b34c <find_cf_cfg>
	if (cfg &&
   1c150:	b168      	cbz	r0, 1c16e <db_hash_read+0x4a>
   1c152:	7a03      	ldrb	r3, [r0, #8]
   1c154:	07da      	lsls	r2, r3, #31
   1c156:	d50a      	bpl.n	1c16e <db_hash_read+0x4a>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1c158:	f100 040c 	add.w	r4, r0, #12
   1c15c:	4620      	mov	r0, r4
   1c15e:	f01a fdc6 	bl	36cee <atomic_get>
	    CF_ROBUST_CACHING(cfg) &&
   1c162:	07c3      	lsls	r3, r0, #31
   1c164:	d403      	bmi.n	1c16e <db_hash_read+0x4a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c166:	2102      	movs	r1, #2
   1c168:	4620      	mov	r0, r4
   1c16a:	f01a fdc6 	bl	36cfa <atomic_or>
	if (offset > value_len) {
   1c16e:	2e10      	cmp	r6, #16
   1c170:	d80c      	bhi.n	1c18c <db_hash_read+0x68>
	len = MIN(buf_len, value_len - offset);
   1c172:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   1c176:	4909      	ldr	r1, [pc, #36]	; (1c19c <db_hash_read+0x78>)
	len = MIN(buf_len, value_len - offset);
   1c178:	42bc      	cmp	r4, r7
   1c17a:	bfa8      	it	ge
   1c17c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1c17e:	4622      	mov	r2, r4
   1c180:	4431      	add	r1, r6
   1c182:	4628      	mov	r0, r5
   1c184:	f019 f9d7 	bl	35536 <memcpy>
}
   1c188:	4620      	mov	r0, r4
   1c18a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c18c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1c190:	e7fa      	b.n	1c188 <db_hash_read+0x64>
   1c192:	bf00      	nop
   1c194:	20001388 	.word	0x20001388
   1c198:	20001400 	.word	0x20001400
   1c19c:	20001338 	.word	0x20001338

0001c1a0 <db_hash_process>:
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c1a0:	f06f 0108 	mvn.w	r1, #8
{
   1c1a4:	b508      	push	{r3, lr}
   1c1a6:	4826      	ldr	r0, [pc, #152]	; (1c240 <db_hash_process+0xa0>)
   1c1a8:	f01a fdb6 	bl	36d18 <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   1c1ac:	0701      	lsls	r1, r0, #28
   1c1ae:	d542      	bpl.n	1c236 <db_hash_process+0x96>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c1b0:	4823      	ldr	r0, [pc, #140]	; (1c240 <db_hash_process+0xa0>)
   1c1b2:	f01a fd9c 	bl	36cee <atomic_get>
   1c1b6:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1c1b8:	075a      	lsls	r2, r3, #29
   1c1ba:	f3c0 0080 	ubfx	r0, r0, #2, #1
   1c1be:	d401      	bmi.n	1c1c4 <db_hash_process+0x24>
			db_hash_gen(false);
   1c1c0:	f7ff ff56 	bl	1c070 <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   1c1c4:	491f      	ldr	r1, [pc, #124]	; (1c244 <db_hash_process+0xa4>)
   1c1c6:	2210      	movs	r2, #16
   1c1c8:	1888      	adds	r0, r1, r2
   1c1ca:	f019 f9a4 	bl	35516 <memcmp>
   1c1ce:	b948      	cbnz	r0, 1c1e4 <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   1c1d0:	481d      	ldr	r0, [pc, #116]	; (1c248 <db_hash_process+0xa8>)
   1c1d2:	f01c fc4a 	bl	38a6a <k_work_cancel_delayable>
}
   1c1d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c1da:	4819      	ldr	r0, [pc, #100]	; (1c240 <db_hash_process+0xa0>)
   1c1dc:	f06f 0101 	mvn.w	r1, #1
   1c1e0:	f01a bd9a 	b.w	36d18 <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c1e4:	4816      	ldr	r0, [pc, #88]	; (1c240 <db_hash_process+0xa0>)
   1c1e6:	2101      	movs	r1, #1
   1c1e8:	f01a fd87 	bl	36cfa <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1c1ec:	f010 0f01 	tst.w	r0, #1
   1c1f0:	4b16      	ldr	r3, [pc, #88]	; (1c24c <db_hash_process+0xac>)
   1c1f2:	d110      	bne.n	1c216 <db_hash_process+0x76>
		gatt_sc.start = start;
   1c1f4:	4a16      	ldr	r2, [pc, #88]	; (1c250 <db_hash_process+0xb0>)
   1c1f6:	619a      	str	r2, [r3, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c1f8:	4811      	ldr	r0, [pc, #68]	; (1c240 <db_hash_process+0xa0>)
   1c1fa:	f01a fd78 	bl	36cee <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   1c1fe:	0783      	lsls	r3, r0, #30
   1c200:	d405      	bmi.n	1c20e <db_hash_process+0x6e>
	k_work_reschedule(&gatt_sc.work, timeout);
   1c202:	4811      	ldr	r0, [pc, #68]	; (1c248 <db_hash_process+0xa8>)
   1c204:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1c208:	2300      	movs	r3, #0
   1c20a:	f015 fe9d 	bl	31f48 <k_work_reschedule>
}
   1c20e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		db_hash_store();
   1c212:	f7ff bb3f 	b.w	1b894 <db_hash_store>
	if (new_start >= *start && new_end <= *end) {
   1c216:	8b1a      	ldrh	r2, [r3, #24]
   1c218:	8b58      	ldrh	r0, [r3, #26]
   1c21a:	2a01      	cmp	r2, #1
   1c21c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c220:	d805      	bhi.n	1c22e <db_hash_process+0x8e>
   1c222:	4290      	cmp	r0, r2
   1c224:	d0f3      	beq.n	1c20e <db_hash_process+0x6e>
		*end = new_end;
   1c226:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c22a:	835a      	strh	r2, [r3, #26]
   1c22c:	e7e4      	b.n	1c1f8 <db_hash_process+0x58>
	if (*end < new_end) {
   1c22e:	4290      	cmp	r0, r2
		*start = new_start;
   1c230:	8319      	strh	r1, [r3, #24]
	if (*end < new_end) {
   1c232:	d0e1      	beq.n	1c1f8 <db_hash_process+0x58>
   1c234:	e7f7      	b.n	1c226 <db_hash_process+0x86>
}
   1c236:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	db_hash_gen(true);
   1c23a:	2001      	movs	r0, #1
   1c23c:	f7ff bf18 	b.w	1c070 <db_hash_gen>
   1c240:	20001400 	.word	0x20001400
   1c244:	20001338 	.word	0x20001338
   1c248:	200013d0 	.word	0x200013d0
   1c24c:	200013b0 	.word	0x200013b0
   1c250:	ffff0001 	.word	0xffff0001

0001c254 <ccc_set_direct>:
{
   1c254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c258:	b0b8      	sub	sp, #224	; 0xe0
   1c25a:	af00      	add	r7, sp, #0
   1c25c:	460c      	mov	r4, r1
   1c25e:	4690      	mov	r8, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1c260:	4943      	ldr	r1, [pc, #268]	; (1c370 <ccc_set_direct+0x11c>)
   1c262:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
   1c266:	463a      	mov	r2, r7
{
   1c268:	4699      	mov	r9, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1c26a:	f017 fe7f 	bl	33f6c <settings_name_steq>
   1c26e:	b938      	cbnz	r0, 1c280 <ccc_set_direct+0x2c>
   1c270:	f7ff f938 	bl	1b4e4 <ccc_set_direct.part.0>
   1c274:	4605      	mov	r5, r0
}
   1c276:	4628      	mov	r0, r5
   1c278:	37e0      	adds	r7, #224	; 0xe0
   1c27a:	46bd      	mov	sp, r7
   1c27c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   1c280:	683e      	ldr	r6, [r7, #0]
		settings_name_next(name, &next);
   1c282:	1d39      	adds	r1, r7, #4
   1c284:	4630      	mov	r0, r6
   1c286:	f017 fe95 	bl	33fb4 <settings_name_next>
		if (!name) {
   1c28a:	b99e      	cbnz	r6, 1c2b4 <ccc_set_direct+0x60>
			LOG_ERR("Insufficient number of arguments");
   1c28c:	466c      	mov	r4, sp
   1c28e:	b088      	sub	sp, #32
   1c290:	466a      	mov	r2, sp
   1c292:	4b38      	ldr	r3, [pc, #224]	; (1c374 <ccc_set_direct+0x120>)
   1c294:	6153      	str	r3, [r2, #20]
   1c296:	4b38      	ldr	r3, [pc, #224]	; (1c378 <ccc_set_direct+0x124>)
   1c298:	6193      	str	r3, [r2, #24]
   1c29a:	2303      	movs	r3, #3
   1c29c:	f842 3f10 	str.w	r3, [r2, #16]!
   1c2a0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
				LOG_ERR("Invalid local identity %lu", next_id);
   1c2a4:	4835      	ldr	r0, [pc, #212]	; (1c37c <ccc_set_direct+0x128>)
   1c2a6:	f01a fd46 	bl	36d36 <z_log_msg_static_create.constprop.0>
   1c2aa:	46a5      	mov	sp, r4
			return -EINVAL;
   1c2ac:	f06f 0415 	mvn.w	r4, #21
   1c2b0:	4625      	mov	r5, r4
   1c2b2:	e7e0      	b.n	1c276 <ccc_set_direct+0x22>
		} else if (!next) {
   1c2b4:	6878      	ldr	r0, [r7, #4]
   1c2b6:	b9d0      	cbnz	r0, 1c2ee <ccc_set_direct+0x9a>
		err = bt_settings_decode_key(name, &addr);
   1c2b8:	f107 0a08 	add.w	sl, r7, #8
			load.addr_with_id.id = BT_ID_DEFAULT;
   1c2bc:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   1c2be:	4651      	mov	r1, sl
   1c2c0:	4630      	mov	r0, r6
			load.addr_with_id.id = BT_ID_DEFAULT;
   1c2c2:	753b      	strb	r3, [r7, #20]
		err = bt_settings_decode_key(name, &addr);
   1c2c4:	f019 fa0b 	bl	356de <bt_settings_decode_key>
		if (err) {
   1c2c8:	4605      	mov	r5, r0
   1c2ca:	b320      	cbz	r0, 1c316 <ccc_set_direct+0xc2>
			LOG_ERR("Unable to decode address %s", name);
   1c2cc:	466c      	mov	r4, sp
   1c2ce:	b08a      	sub	sp, #40	; 0x28
   1c2d0:	466a      	mov	r2, sp
   1c2d2:	4b2b      	ldr	r3, [pc, #172]	; (1c380 <ccc_set_direct+0x12c>)
   1c2d4:	6153      	str	r3, [r2, #20]
   1c2d6:	4b28      	ldr	r3, [pc, #160]	; (1c378 <ccc_set_direct+0x124>)
   1c2d8:	e9c2 3606 	strd	r3, r6, [r2, #24]
   1c2dc:	f240 3301 	movw	r3, #769	; 0x301
   1c2e0:	8413      	strh	r3, [r2, #32]
   1c2e2:	4b28      	ldr	r3, [pc, #160]	; (1c384 <ccc_set_direct+0x130>)
   1c2e4:	f842 3f10 	str.w	r3, [r2, #16]!
   1c2e8:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1c2ec:	e7da      	b.n	1c2a4 <ccc_set_direct+0x50>
			unsigned long next_id = strtoul(next, NULL, 10);
   1c2ee:	220a      	movs	r2, #10
   1c2f0:	2100      	movs	r1, #0
   1c2f2:	f019 f84b 	bl	3538c <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   1c2f6:	2800      	cmp	r0, #0
   1c2f8:	d0de      	beq.n	1c2b8 <ccc_set_direct+0x64>
				LOG_ERR("Invalid local identity %lu", next_id);
   1c2fa:	466c      	mov	r4, sp
   1c2fc:	b088      	sub	sp, #32
   1c2fe:	466a      	mov	r2, sp
   1c300:	4b21      	ldr	r3, [pc, #132]	; (1c388 <ccc_set_direct+0x134>)
   1c302:	6153      	str	r3, [r2, #20]
   1c304:	4b1c      	ldr	r3, [pc, #112]	; (1c378 <ccc_set_direct+0x124>)
   1c306:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1c30a:	2304      	movs	r3, #4
   1c30c:	f842 3f10 	str.w	r3, [r2, #16]!
   1c310:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1c314:	e7c6      	b.n	1c2a4 <ccc_set_direct+0x50>
		load.addr_with_id.addr = &addr;
   1c316:	f8c7 a010 	str.w	sl, [r7, #16]
		if (len_rd) {
   1c31a:	b334      	cbz	r4, 1c36a <ccc_set_direct+0x116>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   1c31c:	22c0      	movs	r2, #192	; 0xc0
   1c31e:	f107 0120 	add.w	r1, r7, #32
   1c322:	4648      	mov	r0, r9
   1c324:	47c0      	blx	r8
			if (len < 0) {
   1c326:	1e04      	subs	r4, r0, #0
   1c328:	da11      	bge.n	1c34e <ccc_set_direct+0xfa>
				LOG_ERR("Failed to decode value (err %zd)", len);
   1c32a:	466d      	mov	r5, sp
   1c32c:	b088      	sub	sp, #32
   1c32e:	466a      	mov	r2, sp
   1c330:	4b16      	ldr	r3, [pc, #88]	; (1c38c <ccc_set_direct+0x138>)
   1c332:	6153      	str	r3, [r2, #20]
   1c334:	4b10      	ldr	r3, [pc, #64]	; (1c378 <ccc_set_direct+0x124>)
   1c336:	4811      	ldr	r0, [pc, #68]	; (1c37c <ccc_set_direct+0x128>)
   1c338:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1c33c:	2304      	movs	r3, #4
   1c33e:	f842 3f10 	str.w	r3, [r2, #16]!
   1c342:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1c346:	f01a fcf6 	bl	36d36 <z_log_msg_static_create.constprop.0>
   1c34a:	46ad      	mov	sp, r5
				return len;
   1c34c:	e7b0      	b.n	1c2b0 <ccc_set_direct+0x5c>
			load.count = len / sizeof(*ccc_store);
   1c34e:	08a4      	lsrs	r4, r4, #2
			for (size_t i = 0; i < load.count; i++) {
   1c350:	f107 0320 	add.w	r3, r7, #32
			load.count = len / sizeof(*ccc_store);
   1c354:	e9c7 3406 	strd	r3, r4, [r7, #24]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   1c358:	4a0d      	ldr	r2, [pc, #52]	; (1c390 <ccc_set_direct+0x13c>)
   1c35a:	f107 0310 	add.w	r3, r7, #16
   1c35e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c362:	2001      	movs	r0, #1
   1c364:	f01a fe2a 	bl	36fbc <bt_gatt_foreach_attr>
	return 0;
   1c368:	e785      	b.n	1c276 <ccc_set_direct+0x22>
   1c36a:	4623      	mov	r3, r4
   1c36c:	e7f2      	b.n	1c354 <ccc_set_direct+0x100>
   1c36e:	bf00      	nop
   1c370:	0003dd67 	.word	0x0003dd67
   1c374:	0003c1d3 	.word	0x0003c1d3
   1c378:	0003df13 	.word	0x0003df13
   1c37c:	000395b8 	.word	0x000395b8
   1c380:	0003db7f 	.word	0x0003db7f
   1c384:	01000004 	.word	0x01000004
   1c388:	0003db9f 	.word	0x0003db9f
   1c38c:	0003dbe4 	.word	0x0003dbe4
   1c390:	0001b415 	.word	0x0001b415

0001c394 <bt_gatt_attr_next>:
{
   1c394:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   1c396:	2300      	movs	r3, #0
   1c398:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1c39a:	f7ff fddf 	bl	1bf5c <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1c39e:	1c41      	adds	r1, r0, #1
   1c3a0:	b289      	uxth	r1, r1
   1c3a2:	4608      	mov	r0, r1
   1c3a4:	4a03      	ldr	r2, [pc, #12]	; (1c3b4 <bt_gatt_attr_next+0x20>)
   1c3a6:	ab01      	add	r3, sp, #4
   1c3a8:	f01a fe08 	bl	36fbc <bt_gatt_foreach_attr>
}
   1c3ac:	9801      	ldr	r0, [sp, #4]
   1c3ae:	b003      	add	sp, #12
   1c3b0:	f85d fb04 	ldr.w	pc, [sp], #4
   1c3b4:	00036b89 	.word	0x00036b89

0001c3b8 <gatt_indicate>:
{
   1c3b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c3bc:	4615      	mov	r5, r2
   1c3be:	af00      	add	r7, sp, #0
   1c3c0:	468a      	mov	sl, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1c3c2:	2294      	movs	r2, #148	; 0x94
   1c3c4:	6869      	ldr	r1, [r5, #4]
{
   1c3c6:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1c3c8:	f01a fe03 	bl	36fd2 <bt_gatt_check_perm>
   1c3cc:	4681      	mov	r9, r0
   1c3ce:	b1a8      	cbz	r0, 1c3fc <gatt_indicate+0x44>
		LOG_WRN("Link is not encrypted");
   1c3d0:	466c      	mov	r4, sp
   1c3d2:	b088      	sub	sp, #32
   1c3d4:	466a      	mov	r2, sp
   1c3d6:	4b40      	ldr	r3, [pc, #256]	; (1c4d8 <gatt_indicate+0x120>)
   1c3d8:	6153      	str	r3, [r2, #20]
   1c3da:	4b40      	ldr	r3, [pc, #256]	; (1c4dc <gatt_indicate+0x124>)
   1c3dc:	6193      	str	r3, [r2, #24]
   1c3de:	2303      	movs	r3, #3
   1c3e0:	f842 3f10 	str.w	r3, [r2, #16]!
   1c3e4:	483e      	ldr	r0, [pc, #248]	; (1c4e0 <gatt_indicate+0x128>)
   1c3e6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1c3ea:	f01a fca4 	bl	36d36 <z_log_msg_static_create.constprop.0>
		return -EPERM;
   1c3ee:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1c3f2:	46a5      	mov	sp, r4
}
   1c3f4:	4628      	mov	r0, r5
   1c3f6:	46bd      	mov	sp, r7
   1c3f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   1c3fc:	6869      	ldr	r1, [r5, #4]
   1c3fe:	2202      	movs	r2, #2
   1c400:	4630      	mov	r0, r6
   1c402:	f01a fe1a 	bl	3703a <bt_gatt_is_subscribed>
   1c406:	b990      	cbnz	r0, 1c42e <gatt_indicate+0x76>
			LOG_WRN("Device is not subscribed to characteristic");
   1c408:	466c      	mov	r4, sp
   1c40a:	b088      	sub	sp, #32
   1c40c:	466a      	mov	r2, sp
   1c40e:	4b35      	ldr	r3, [pc, #212]	; (1c4e4 <gatt_indicate+0x12c>)
   1c410:	6153      	str	r3, [r2, #20]
   1c412:	4b32      	ldr	r3, [pc, #200]	; (1c4dc <gatt_indicate+0x124>)
   1c414:	6193      	str	r3, [r2, #24]
   1c416:	2303      	movs	r3, #3
   1c418:	f842 3f10 	str.w	r3, [r2, #16]!
   1c41c:	4830      	ldr	r0, [pc, #192]	; (1c4e0 <gatt_indicate+0x128>)
   1c41e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1c422:	f01a fc88 	bl	36d36 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1c426:	f06f 0515 	mvn.w	r5, #21
   1c42a:	46a5      	mov	sp, r4
   1c42c:	e7e2      	b.n	1c3f4 <gatt_indicate+0x3c>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1c42e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1c432:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1c434:	f8b5 8014 	ldrh.w	r8, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1c438:	f7fe fe6c 	bl	1b114 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1c43c:	f108 0802 	add.w	r8, r8, #2
	if (!req) {
   1c440:	4604      	mov	r4, r0
   1c442:	b308      	cbz	r0, 1c488 <gatt_indicate+0xd0>
	req->func = func;
   1c444:	4b28      	ldr	r3, [pc, #160]	; (1c4e8 <gatt_indicate+0x130>)
	req->len = len;
   1c446:	f8c0 8014 	str.w	r8, [r0, #20]
	req->att_op = op;
   1c44a:	211d      	movs	r1, #29
   1c44c:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   1c44e:	f8c0 900c 	str.w	r9, [r0, #12]
	req->func = func;
   1c452:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1c454:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1c456:	4642      	mov	r2, r8
   1c458:	4630      	mov	r0, r6
   1c45a:	f7fe fa71 	bl	1a940 <bt_att_create_pdu>
	if (!buf) {
   1c45e:	4680      	mov	r8, r0
   1c460:	b9a8      	cbnz	r0, 1c48e <gatt_indicate+0xd6>
		LOG_WRN("No buffer available to send indication");
   1c462:	466d      	mov	r5, sp
   1c464:	b088      	sub	sp, #32
   1c466:	466a      	mov	r2, sp
   1c468:	4b20      	ldr	r3, [pc, #128]	; (1c4ec <gatt_indicate+0x134>)
   1c46a:	6153      	str	r3, [r2, #20]
   1c46c:	4b1b      	ldr	r3, [pc, #108]	; (1c4dc <gatt_indicate+0x124>)
   1c46e:	6193      	str	r3, [r2, #24]
   1c470:	2303      	movs	r3, #3
   1c472:	481b      	ldr	r0, [pc, #108]	; (1c4e0 <gatt_indicate+0x128>)
   1c474:	f842 3f10 	str.w	r3, [r2, #16]!
   1c478:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1c47c:	f01a fc5b 	bl	36d36 <z_log_msg_static_create.constprop.0>
		bt_att_req_free(req);
   1c480:	4620      	mov	r0, r4
   1c482:	46ad      	mov	sp, r5
   1c484:	f7fe fe68 	bl	1b158 <bt_att_req_free>
		return -ENOMEM;
   1c488:	f06f 050b 	mvn.w	r5, #11
   1c48c:	e7b2      	b.n	1c3f4 <gatt_indicate+0x3c>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   1c48e:	2301      	movs	r3, #1
   1c490:	464a      	mov	r2, r9
   1c492:	4649      	mov	r1, r9
	return net_buf_simple_add(&buf->b, len);
   1c494:	f108 0b0c 	add.w	fp, r8, #12
   1c498:	f01a fb6f 	bl	36b7a <bt_att_set_tx_meta_data>
   1c49c:	2102      	movs	r1, #2
   1c49e:	4658      	mov	r0, fp
   1c4a0:	f01b fae6 	bl	37a70 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1c4a4:	4681      	mov	r9, r0
   1c4a6:	4658      	mov	r0, fp
   1c4a8:	f829 ab02 	strh.w	sl, [r9], #2
   1c4ac:	8aa9      	ldrh	r1, [r5, #20]
   1c4ae:	f01b fadf 	bl	37a70 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1c4b2:	8aaa      	ldrh	r2, [r5, #20]
   1c4b4:	6929      	ldr	r1, [r5, #16]
   1c4b6:	4648      	mov	r0, r9
   1c4b8:	f019 f83d 	bl	35536 <memcpy>
	req->buf = buf;
   1c4bc:	f8c4 8008 	str.w	r8, [r4, #8]
	err = bt_att_req_send(conn, req);
   1c4c0:	4621      	mov	r1, r4
   1c4c2:	4630      	mov	r0, r6
   1c4c4:	f01a fb1d 	bl	36b02 <bt_att_req_send>
	if (err) {
   1c4c8:	4605      	mov	r5, r0
   1c4ca:	2800      	cmp	r0, #0
   1c4cc:	d092      	beq.n	1c3f4 <gatt_indicate+0x3c>
		bt_att_req_free(req);
   1c4ce:	4620      	mov	r0, r4
   1c4d0:	f7fe fe42 	bl	1b158 <bt_att_req_free>
   1c4d4:	e78e      	b.n	1c3f4 <gatt_indicate+0x3c>
   1c4d6:	bf00      	nop
   1c4d8:	0003dd6e 	.word	0x0003dd6e
   1c4dc:	0003df5e 	.word	0x0003df5e
   1c4e0:	000395b8 	.word	0x000395b8
   1c4e4:	0003dd88 	.word	0x0003dd88
   1c4e8:	00036ba3 	.word	0x00036ba3
   1c4ec:	0003ddb7 	.word	0x0003ddb7

0001c4f0 <bt_gatt_indicate>:
{
   1c4f0:	b530      	push	{r4, r5, lr}
   1c4f2:	4604      	mov	r4, r0
   1c4f4:	b08b      	sub	sp, #44	; 0x2c
   1c4f6:	4837      	ldr	r0, [pc, #220]	; (1c5d4 <bt_gatt_indicate+0xe4>)
   1c4f8:	f01a fbf9 	bl	36cee <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1c4fc:	0742      	lsls	r2, r0, #29
{
   1c4fe:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1c500:	d561      	bpl.n	1c5c6 <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1c502:	b114      	cbz	r4, 1c50a <bt_gatt_indicate+0x1a>
   1c504:	7b63      	ldrb	r3, [r4, #13]
   1c506:	2b07      	cmp	r3, #7
   1c508:	d160      	bne.n	1c5cc <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   1c50a:	6868      	ldr	r0, [r5, #4]
   1c50c:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1c50e:	f7ff fd25 	bl	1bf5c <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1c512:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1c514:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1c518:	b33a      	cbz	r2, 1c56a <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1c51a:	a905      	add	r1, sp, #20
   1c51c:	9102      	str	r1, [sp, #8]
   1c51e:	492e      	ldr	r1, [pc, #184]	; (1c5d8 <bt_gatt_indicate+0xe8>)
   1c520:	9101      	str	r1, [sp, #4]
   1c522:	2101      	movs	r1, #1
	found->attr = NULL;
   1c524:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1c526:	9100      	str	r1, [sp, #0]
   1c528:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1c52c:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1c52e:	f7ff fd45 	bl	1bfbc <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1c532:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1c534:	b91b      	cbnz	r3, 1c53e <bt_gatt_indicate+0x4e>
			return -ENOENT;
   1c536:	f06f 0001 	mvn.w	r0, #1
}
   1c53a:	b00b      	add	sp, #44	; 0x2c
   1c53c:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1c53e:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1c540:	9b05      	ldr	r3, [sp, #20]
   1c542:	6818      	ldr	r0, [r3, #0]
   1c544:	2300      	movs	r3, #0
   1c546:	f88d 3010 	strb.w	r3, [sp, #16]
   1c54a:	a904      	add	r1, sp, #16
   1c54c:	f642 0303 	movw	r3, #10243	; 0x2803
   1c550:	f8ad 3012 	strh.w	r3, [sp, #18]
   1c554:	f019 f8e7 	bl	35726 <bt_uuid_cmp>
   1c558:	b970      	cbnz	r0, 1c578 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1c55a:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1c55c:	68c3      	ldr	r3, [r0, #12]
   1c55e:	799b      	ldrb	r3, [r3, #6]
   1c560:	069b      	lsls	r3, r3, #26
   1c562:	d405      	bmi.n	1c570 <bt_gatt_indicate+0x80>
			return -EINVAL;
   1c564:	f06f 0015 	mvn.w	r0, #21
   1c568:	e7e7      	b.n	1c53a <bt_gatt_indicate+0x4a>
		if (!data.handle) {
   1c56a:	2800      	cmp	r0, #0
   1c56c:	d1e8      	bne.n	1c540 <bt_gatt_indicate+0x50>
   1c56e:	e7e2      	b.n	1c536 <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1c570:	f01a fcd6 	bl	36f20 <bt_gatt_attr_value_handle>
   1c574:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   1c578:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1c57c:	b13c      	cbz	r4, 1c58e <bt_gatt_indicate+0x9e>
		params->_ref = 1;
   1c57e:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1c580:	4601      	mov	r1, r0
		params->_ref = 1;
   1c582:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   1c584:	462a      	mov	r2, r5
   1c586:	4620      	mov	r0, r4
   1c588:	f7ff ff16 	bl	1c3b8 <gatt_indicate>
   1c58c:	e7d5      	b.n	1c53a <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
   1c58e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1c592:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1c594:	2302      	movs	r3, #2
   1c596:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1c59a:	f642 1302 	movw	r3, #10498	; 0x2902
   1c59e:	f8ad 3012 	strh.w	r3, [sp, #18]
   1c5a2:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1c5a4:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1c5a6:	9302      	str	r3, [sp, #8]
   1c5a8:	4b0c      	ldr	r3, [pc, #48]	; (1c5dc <bt_gatt_indicate+0xec>)
   1c5aa:	9301      	str	r3, [sp, #4]
   1c5ac:	2301      	movs	r3, #1
   1c5ae:	9300      	str	r3, [sp, #0]
   1c5b0:	aa04      	add	r2, sp, #16
   1c5b2:	4623      	mov	r3, r4
   1c5b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   1c5b8:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1c5ba:	f88d 4010 	strb.w	r4, [sp, #16]
   1c5be:	f7ff fcfd 	bl	1bfbc <bt_gatt_foreach_attr_type>
	return data.err;
   1c5c2:	9807      	ldr	r0, [sp, #28]
   1c5c4:	e7b9      	b.n	1c53a <bt_gatt_indicate+0x4a>
		return -EAGAIN;
   1c5c6:	f06f 000a 	mvn.w	r0, #10
   1c5ca:	e7b6      	b.n	1c53a <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
   1c5cc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1c5d0:	e7b3      	b.n	1c53a <bt_gatt_indicate+0x4a>
   1c5d2:	bf00      	nop
   1c5d4:	200000cc 	.word	0x200000cc
   1c5d8:	00036bc9 	.word	0x00036bc9
   1c5dc:	0001c945 	.word	0x0001c945

0001c5e0 <sc_process>:
{
   1c5e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1c5e2:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   1c5e6:	4604      	mov	r4, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1c5e8:	f850 3c08 	ldr.w	r3, [r0, #-8]
   1c5ec:	9301      	str	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1c5ee:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c5f2:	f06f 0101 	mvn.w	r1, #1
   1c5f6:	4628      	mov	r0, r5
   1c5f8:	f01a fb8e 	bl	36d18 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1c5fc:	4b0d      	ldr	r3, [pc, #52]	; (1c634 <sc_process+0x54>)
   1c5fe:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   1c602:	4b0d      	ldr	r3, [pc, #52]	; (1c638 <sc_process+0x58>)
   1c604:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1c608:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   1c60a:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   1c60c:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   1c610:	2304      	movs	r3, #4
	sc->start = 0U;
   1c612:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   1c616:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   1c61a:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1c61e:	4631      	mov	r1, r6
   1c620:	f7ff ff66 	bl	1c4f0 <bt_gatt_indicate>
   1c624:	b918      	cbnz	r0, 1c62e <sc_process+0x4e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c626:	2102      	movs	r1, #2
   1c628:	4628      	mov	r0, r5
   1c62a:	f01a fb66 	bl	36cfa <atomic_or>
}
   1c62e:	b002      	add	sp, #8
   1c630:	bd70      	pop	{r4, r5, r6, pc}
   1c632:	bf00      	nop
   1c634:	00039d90 	.word	0x00039d90
   1c638:	0001be29 	.word	0x0001be29

0001c63c <update_ccc>:
{
   1c63c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c640:	b083      	sub	sp, #12
	struct bt_conn *conn = data->conn;
   1c642:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c644:	4b3d      	ldr	r3, [pc, #244]	; (1c73c <update_ccc+0x100>)
{
   1c646:	4690      	mov	r8, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c648:	6882      	ldr	r2, [r0, #8]
   1c64a:	429a      	cmp	r2, r3
{
   1c64c:	af00      	add	r7, sp, #0
   1c64e:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c650:	d134      	bne.n	1c6bc <update_ccc+0x80>
	ccc = attr->user_data;
   1c652:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   1c654:	8933      	ldrh	r3, [r6, #8]
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1c656:	1c72      	adds	r2, r6, #1
		if (!cfg->value ||
   1c658:	b383      	cbz	r3, 1c6bc <update_ccc+0x80>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1c65a:	7831      	ldrb	r1, [r6, #0]
   1c65c:	4620      	mov	r0, r4
   1c65e:	f019 fcf9 	bl	36054 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1c662:	b358      	cbz	r0, 1c6bc <update_ccc+0x80>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1c664:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1c668:	4629      	mov	r1, r5
   1c66a:	4620      	mov	r0, r4
   1c66c:	f01a fcb1 	bl	36fd2 <bt_gatt_check_perm>
		if (err) {
   1c670:	b348      	cbz	r0, 1c6c6 <update_ccc+0x8a>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1c672:	2803      	cmp	r0, #3
   1c674:	d111      	bne.n	1c69a <update_ccc+0x5e>
				LOG_WRN("CCC %p not writable", attr);
   1c676:	466c      	mov	r4, sp
   1c678:	b088      	sub	sp, #32
   1c67a:	466a      	mov	r2, sp
   1c67c:	4b30      	ldr	r3, [pc, #192]	; (1c740 <update_ccc+0x104>)
   1c67e:	6153      	str	r3, [r2, #20]
   1c680:	4b30      	ldr	r3, [pc, #192]	; (1c744 <update_ccc+0x108>)
   1c682:	e9c2 3506 	strd	r3, r5, [r2, #24]
   1c686:	2304      	movs	r3, #4
   1c688:	f842 3f10 	str.w	r3, [r2, #16]!
   1c68c:	f44f 5102 	mov.w	r1, #8320	; 0x2080
		LOG_ERR("SC restore indication failed");
   1c690:	482d      	ldr	r0, [pc, #180]	; (1c748 <update_ccc+0x10c>)
   1c692:	f01a fb50 	bl	36d36 <z_log_msg_static_create.constprop.0>
   1c696:	46a5      	mov	sp, r4
   1c698:	e010      	b.n	1c6bc <update_ccc+0x80>
			sec = BT_SECURITY_L2;
   1c69a:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   1c69c:	4620      	mov	r0, r4
			sec = BT_SECURITY_L2;
   1c69e:	bf0c      	ite	eq
   1c6a0:	f04f 0903 	moveq.w	r9, #3
   1c6a4:	f04f 0902 	movne.w	r9, #2
			    bt_conn_get_security(conn) < sec) {
   1c6a8:	f019 fcd2 	bl	36050 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   1c6ac:	4581      	cmp	r9, r0
   1c6ae:	d90a      	bls.n	1c6c6 <update_ccc+0x8a>
				if (data->sec < sec) {
   1c6b0:	f898 3004 	ldrb.w	r3, [r8, #4]
   1c6b4:	454b      	cmp	r3, r9
   1c6b6:	d201      	bcs.n	1c6bc <update_ccc+0x80>
					data->sec = sec;
   1c6b8:	f888 9004 	strb.w	r9, [r8, #4]
}
   1c6bc:	2001      	movs	r0, #1
   1c6be:	370c      	adds	r7, #12
   1c6c0:	46bd      	mov	sp, r7
   1c6c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		gatt_ccc_changed(attr, ccc);
   1c6c6:	4631      	mov	r1, r6
   1c6c8:	4628      	mov	r0, r5
   1c6ca:	f01a fa60 	bl	36b8e <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1c6ce:	4b1f      	ldr	r3, [pc, #124]	; (1c74c <update_ccc+0x110>)
   1c6d0:	429e      	cmp	r6, r3
   1c6d2:	d1f3      	bne.n	1c6bc <update_ccc+0x80>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1c6d4:	7a20      	ldrb	r0, [r4, #8]
   1c6d6:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1c6da:	f7fe fe65 	bl	1b3a8 <find_sc_cfg>
	if (!cfg) {
   1c6de:	2800      	cmp	r0, #0
   1c6e0:	d0ec      	beq.n	1c6bc <update_ccc+0x80>
	if (!(cfg->data.start || cfg->data.end)) {
   1c6e2:	8902      	ldrh	r2, [r0, #8]
   1c6e4:	8943      	ldrh	r3, [r0, #10]
   1c6e6:	ea52 0103 	orrs.w	r1, r2, r3
   1c6ea:	d0e7      	beq.n	1c6bc <update_ccc+0x80>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1c6ec:	80ba      	strh	r2, [r7, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1c6ee:	80fb      	strh	r3, [r7, #6]
	index = bt_conn_index(conn);
   1c6f0:	4620      	mov	r0, r4
   1c6f2:	f7fc ff41 	bl	19578 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1c6f6:	4916      	ldr	r1, [pc, #88]	; (1c750 <update_ccc+0x114>)
   1c6f8:	4a16      	ldr	r2, [pc, #88]	; (1c754 <update_ccc+0x118>)
   1c6fa:	2318      	movs	r3, #24
   1c6fc:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1c700:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1c702:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1c704:	4a14      	ldr	r2, [pc, #80]	; (1c758 <update_ccc+0x11c>)
   1c706:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1c708:	1d3a      	adds	r2, r7, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1c70a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   1c70e:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1c710:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1c712:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   1c716:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1c718:	4620      	mov	r0, r4
   1c71a:	f7ff fee9 	bl	1c4f0 <bt_gatt_indicate>
   1c71e:	2800      	cmp	r0, #0
   1c720:	d0cc      	beq.n	1c6bc <update_ccc+0x80>
		LOG_ERR("SC restore indication failed");
   1c722:	466c      	mov	r4, sp
   1c724:	b088      	sub	sp, #32
   1c726:	466a      	mov	r2, sp
   1c728:	4b0c      	ldr	r3, [pc, #48]	; (1c75c <update_ccc+0x120>)
   1c72a:	6153      	str	r3, [r2, #20]
   1c72c:	4b0c      	ldr	r3, [pc, #48]	; (1c760 <update_ccc+0x124>)
   1c72e:	6193      	str	r3, [r2, #24]
   1c730:	2303      	movs	r3, #3
   1c732:	f842 3f10 	str.w	r3, [r2, #16]!
   1c736:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c73a:	e7a9      	b.n	1c690 <update_ccc+0x54>
   1c73c:	0001bcd5 	.word	0x0001bcd5
   1c740:	0003dde2 	.word	0x0003dde2
   1c744:	0003df35 	.word	0x0003df35
   1c748:	000395b8 	.word	0x000395b8
   1c74c:	20000334 	.word	0x20000334
   1c750:	20001c64 	.word	0x20001c64
   1c754:	00039d90 	.word	0x00039d90
   1c758:	00036eab 	.word	0x00036eab
   1c75c:	0003ddfa 	.word	0x0003ddfa
   1c760:	0003df2a 	.word	0x0003df2a

0001c764 <gatt_notify>:
{
   1c764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c768:	4614      	mov	r4, r2
   1c76a:	af00      	add	r7, sp, #0
   1c76c:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1c76e:	2294      	movs	r2, #148	; 0x94
   1c770:	6861      	ldr	r1, [r4, #4]
{
   1c772:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1c774:	f01a fc2d 	bl	36fd2 <bt_gatt_check_perm>
   1c778:	b1a0      	cbz	r0, 1c7a4 <gatt_notify+0x40>
		LOG_WRN("Link is not encrypted");
   1c77a:	466c      	mov	r4, sp
   1c77c:	b088      	sub	sp, #32
   1c77e:	466a      	mov	r2, sp
   1c780:	4b31      	ldr	r3, [pc, #196]	; (1c848 <gatt_notify+0xe4>)
   1c782:	6153      	str	r3, [r2, #20]
   1c784:	4b31      	ldr	r3, [pc, #196]	; (1c84c <gatt_notify+0xe8>)
   1c786:	6193      	str	r3, [r2, #24]
   1c788:	2303      	movs	r3, #3
   1c78a:	4831      	ldr	r0, [pc, #196]	; (1c850 <gatt_notify+0xec>)
   1c78c:	f842 3f10 	str.w	r3, [r2, #16]!
   1c790:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1c794:	f01a facf 	bl	36d36 <z_log_msg_static_create.constprop.0>
		return -EPERM;
   1c798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c79c:	46a5      	mov	sp, r4
}
   1c79e:	46bd      	mov	sp, r7
   1c7a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1c7a4:	6861      	ldr	r1, [r4, #4]
   1c7a6:	2201      	movs	r2, #1
   1c7a8:	4630      	mov	r0, r6
   1c7aa:	f01a fc46 	bl	3703a <bt_gatt_is_subscribed>
   1c7ae:	b990      	cbnz	r0, 1c7d6 <gatt_notify+0x72>
			LOG_WRN("Device is not subscribed to characteristic");
   1c7b0:	466c      	mov	r4, sp
   1c7b2:	b088      	sub	sp, #32
   1c7b4:	466a      	mov	r2, sp
   1c7b6:	4b27      	ldr	r3, [pc, #156]	; (1c854 <gatt_notify+0xf0>)
   1c7b8:	6153      	str	r3, [r2, #20]
   1c7ba:	4b24      	ldr	r3, [pc, #144]	; (1c84c <gatt_notify+0xe8>)
   1c7bc:	6193      	str	r3, [r2, #24]
   1c7be:	2303      	movs	r3, #3
   1c7c0:	4823      	ldr	r0, [pc, #140]	; (1c850 <gatt_notify+0xec>)
   1c7c2:	f842 3f10 	str.w	r3, [r2, #16]!
   1c7c6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1c7ca:	f01a fab4 	bl	36d36 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1c7ce:	f06f 0015 	mvn.w	r0, #21
   1c7d2:	46a5      	mov	sp, r4
   1c7d4:	e7e3      	b.n	1c79e <gatt_notify+0x3a>
				sizeof(*nfy) + params->len);
   1c7d6:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1c7d8:	211b      	movs	r1, #27
   1c7da:	3202      	adds	r2, #2
   1c7dc:	4630      	mov	r0, r6
   1c7de:	f7fe f8af 	bl	1a940 <bt_att_create_pdu>
	if (!buf) {
   1c7e2:	4605      	mov	r5, r0
   1c7e4:	b990      	cbnz	r0, 1c80c <gatt_notify+0xa8>
		LOG_WRN("No buffer available to send notification");
   1c7e6:	466c      	mov	r4, sp
   1c7e8:	b088      	sub	sp, #32
   1c7ea:	466a      	mov	r2, sp
   1c7ec:	4b1a      	ldr	r3, [pc, #104]	; (1c858 <gatt_notify+0xf4>)
   1c7ee:	6153      	str	r3, [r2, #20]
   1c7f0:	4b16      	ldr	r3, [pc, #88]	; (1c84c <gatt_notify+0xe8>)
   1c7f2:	6193      	str	r3, [r2, #24]
   1c7f4:	2303      	movs	r3, #3
   1c7f6:	4816      	ldr	r0, [pc, #88]	; (1c850 <gatt_notify+0xec>)
   1c7f8:	f842 3f10 	str.w	r3, [r2, #16]!
   1c7fc:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1c800:	f01a fa99 	bl	36d36 <z_log_msg_static_create.constprop.0>
		return -ENOMEM;
   1c804:	f06f 000b 	mvn.w	r0, #11
   1c808:	46a5      	mov	sp, r4
   1c80a:	e7c8      	b.n	1c79e <gatt_notify+0x3a>
   1c80c:	f100 0a0c 	add.w	sl, r0, #12
   1c810:	2102      	movs	r1, #2
   1c812:	4650      	mov	r0, sl
   1c814:	f01b f92c 	bl	37a70 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1c818:	4680      	mov	r8, r0
   1c81a:	4650      	mov	r0, sl
   1c81c:	f828 9b02 	strh.w	r9, [r8], #2
   1c820:	89a1      	ldrh	r1, [r4, #12]
   1c822:	f01b f925 	bl	37a70 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1c826:	89a2      	ldrh	r2, [r4, #12]
   1c828:	68a1      	ldr	r1, [r4, #8]
   1c82a:	4640      	mov	r0, r8
   1c82c:	f018 fe83 	bl	35536 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1c830:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1c834:	4628      	mov	r0, r5
   1c836:	2301      	movs	r3, #1
   1c838:	f01a f99f 	bl	36b7a <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1c83c:	4629      	mov	r1, r5
   1c83e:	4630      	mov	r0, r6
   1c840:	f01a f921 	bl	36a86 <bt_att_send>
   1c844:	e7ab      	b.n	1c79e <gatt_notify+0x3a>
   1c846:	bf00      	nop
   1c848:	0003dd6e 	.word	0x0003dd6e
   1c84c:	0003df52 	.word	0x0003df52
   1c850:	000395b8 	.word	0x000395b8
   1c854:	0003dd88 	.word	0x0003dd88
   1c858:	0003de1b 	.word	0x0003de1b

0001c85c <bt_gatt_notify_cb>:
{
   1c85c:	b530      	push	{r4, r5, lr}
   1c85e:	4604      	mov	r4, r0
   1c860:	b08b      	sub	sp, #44	; 0x2c
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c862:	4835      	ldr	r0, [pc, #212]	; (1c938 <bt_gatt_notify_cb+0xdc>)
   1c864:	f01a fa43 	bl	36cee <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1c868:	0742      	lsls	r2, r0, #29
{
   1c86a:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1c86c:	d55d      	bpl.n	1c92a <bt_gatt_notify_cb+0xce>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1c86e:	b114      	cbz	r4, 1c876 <bt_gatt_notify_cb+0x1a>
   1c870:	7b63      	ldrb	r3, [r4, #13]
   1c872:	2b07      	cmp	r3, #7
   1c874:	d15c      	bne.n	1c930 <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
   1c876:	6868      	ldr	r0, [r5, #4]
   1c878:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1c87a:	f7ff fb6f 	bl	1bf5c <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1c87e:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1c880:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1c884:	b33a      	cbz	r2, 1c8d6 <bt_gatt_notify_cb+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1c886:	a905      	add	r1, sp, #20
   1c888:	9102      	str	r1, [sp, #8]
   1c88a:	492c      	ldr	r1, [pc, #176]	; (1c93c <bt_gatt_notify_cb+0xe0>)
   1c88c:	9101      	str	r1, [sp, #4]
   1c88e:	2101      	movs	r1, #1
	found->attr = NULL;
   1c890:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1c892:	9100      	str	r1, [sp, #0]
   1c894:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1c898:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1c89a:	f7ff fb8f 	bl	1bfbc <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1c89e:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1c8a0:	b91b      	cbnz	r3, 1c8aa <bt_gatt_notify_cb+0x4e>
			return -ENOENT;
   1c8a2:	f06f 0001 	mvn.w	r0, #1
}
   1c8a6:	b00b      	add	sp, #44	; 0x2c
   1c8a8:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1c8aa:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1c8ac:	9b05      	ldr	r3, [sp, #20]
   1c8ae:	6818      	ldr	r0, [r3, #0]
   1c8b0:	2300      	movs	r3, #0
   1c8b2:	f88d 3010 	strb.w	r3, [sp, #16]
   1c8b6:	a904      	add	r1, sp, #16
   1c8b8:	f642 0303 	movw	r3, #10243	; 0x2803
   1c8bc:	f8ad 3012 	strh.w	r3, [sp, #18]
   1c8c0:	f018 ff31 	bl	35726 <bt_uuid_cmp>
   1c8c4:	b970      	cbnz	r0, 1c8e4 <bt_gatt_notify_cb+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1c8c6:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   1c8c8:	68c3      	ldr	r3, [r0, #12]
   1c8ca:	799b      	ldrb	r3, [r3, #6]
   1c8cc:	06db      	lsls	r3, r3, #27
   1c8ce:	d405      	bmi.n	1c8dc <bt_gatt_notify_cb+0x80>
			return -EINVAL;
   1c8d0:	f06f 0015 	mvn.w	r0, #21
   1c8d4:	e7e7      	b.n	1c8a6 <bt_gatt_notify_cb+0x4a>
		if (!data.handle) {
   1c8d6:	2800      	cmp	r0, #0
   1c8d8:	d1e8      	bne.n	1c8ac <bt_gatt_notify_cb+0x50>
   1c8da:	e7e2      	b.n	1c8a2 <bt_gatt_notify_cb+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1c8dc:	f01a fb20 	bl	36f20 <bt_gatt_attr_value_handle>
   1c8e0:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   1c8e4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1c8e8:	b12c      	cbz	r4, 1c8f6 <bt_gatt_notify_cb+0x9a>
		return gatt_notify(conn, data.handle, params);
   1c8ea:	4601      	mov	r1, r0
   1c8ec:	462a      	mov	r2, r5
   1c8ee:	4620      	mov	r0, r4
   1c8f0:	f7ff ff38 	bl	1c764 <gatt_notify>
   1c8f4:	e7d7      	b.n	1c8a6 <bt_gatt_notify_cb+0x4a>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1c8f6:	f642 1202 	movw	r2, #10498	; 0x2902
   1c8fa:	f8ad 2012 	strh.w	r2, [sp, #18]
   1c8fe:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   1c900:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1c904:	9202      	str	r2, [sp, #8]
   1c906:	4a0e      	ldr	r2, [pc, #56]	; (1c940 <bt_gatt_notify_cb+0xe4>)
	data.err = -ENOTCONN;
   1c908:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   1c90a:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1c90c:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   1c910:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1c914:	aa04      	add	r2, sp, #16
   1c916:	4623      	mov	r3, r4
   1c918:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   1c91c:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1c91e:	f88d 4010 	strb.w	r4, [sp, #16]
   1c922:	f7ff fb4b 	bl	1bfbc <bt_gatt_foreach_attr_type>
	return data.err;
   1c926:	9807      	ldr	r0, [sp, #28]
   1c928:	e7bd      	b.n	1c8a6 <bt_gatt_notify_cb+0x4a>
		return -EAGAIN;
   1c92a:	f06f 000a 	mvn.w	r0, #10
   1c92e:	e7ba      	b.n	1c8a6 <bt_gatt_notify_cb+0x4a>
		return -ENOTCONN;
   1c930:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1c934:	e7b7      	b.n	1c8a6 <bt_gatt_notify_cb+0x4a>
   1c936:	bf00      	nop
   1c938:	200000cc 	.word	0x200000cc
   1c93c:	00036bc9 	.word	0x00036bc9
   1c940:	0001c945 	.word	0x0001c945

0001c944 <notify_cb>:
{
   1c944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c948:	4b47      	ldr	r3, [pc, #284]	; (1ca68 <notify_cb+0x124>)
{
   1c94a:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c94c:	6882      	ldr	r2, [r0, #8]
   1c94e:	429a      	cmp	r2, r3
{
   1c950:	af00      	add	r7, sp, #0
   1c952:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c954:	d005      	beq.n	1c962 <notify_cb+0x1e>
		return BT_GATT_ITER_CONTINUE;
   1c956:	f04f 0801 	mov.w	r8, #1
}
   1c95a:	4640      	mov	r0, r8
   1c95c:	46bd      	mov	sp, r7
   1c95e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ccc = attr->user_data;
   1c962:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1c964:	4b41      	ldr	r3, [pc, #260]	; (1ca6c <notify_cb+0x128>)
   1c966:	429e      	cmp	r6, r3
   1c968:	d011      	beq.n	1c98e <notify_cb+0x4a>
		if (cfg->value != data->type) {
   1c96a:	8932      	ldrh	r2, [r6, #8]
   1c96c:	89ab      	ldrh	r3, [r5, #12]
   1c96e:	429a      	cmp	r2, r3
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1c970:	f106 0101 	add.w	r1, r6, #1
		if (cfg->value != data->type) {
   1c974:	d1ef      	bne.n	1c956 <notify_cb+0x12>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1c976:	7830      	ldrb	r0, [r6, #0]
   1c978:	f7fc ff1c 	bl	197b4 <bt_conn_lookup_addr_le>
		if (!conn) {
   1c97c:	4604      	mov	r4, r0
   1c97e:	2800      	cmp	r0, #0
   1c980:	d0e9      	beq.n	1c956 <notify_cb+0x12>
		if (conn->state != BT_CONN_CONNECTED) {
   1c982:	7b43      	ldrb	r3, [r0, #13]
   1c984:	2b07      	cmp	r3, #7
   1c986:	d026      	beq.n	1c9d6 <notify_cb+0x92>
			bt_conn_unref(conn);
   1c988:	f019 facb 	bl	35f22 <bt_conn_unref>
			continue;
   1c98c:	e7e3      	b.n	1c956 <notify_cb+0x12>
   1c98e:	4c38      	ldr	r4, [pc, #224]	; (1ca70 <notify_cb+0x12c>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1c990:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 1ca74 <notify_cb+0x130>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1c994:	f04f 0900 	mov.w	r9, #0
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1c998:	4651      	mov	r1, sl
   1c99a:	4620      	mov	r0, r4
   1c99c:	f01a f992 	bl	36cc4 <bt_addr_le_eq>
   1c9a0:	b978      	cbnz	r0, 1c9c2 <notify_cb+0x7e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1c9a2:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1c9a6:	2207      	movs	r2, #7
   1c9a8:	4621      	mov	r1, r4
   1c9aa:	f7fc ff51 	bl	19850 <bt_conn_lookup_state_le>
			if (!conn) {
   1c9ae:	b978      	cbnz	r0, 1c9d0 <notify_cb+0x8c>
				sc = (struct sc_data *)data->ind_params->data;
   1c9b0:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   1c9b2:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   1c9b6:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1c9b8:	4621      	mov	r1, r4
   1c9ba:	8853      	ldrh	r3, [r2, #2]
   1c9bc:	8812      	ldrh	r2, [r2, #0]
   1c9be:	f7fe fec1 	bl	1b744 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1c9c2:	340c      	adds	r4, #12
   1c9c4:	f1b9 0f00 	cmp.w	r9, #0
   1c9c8:	d1cf      	bne.n	1c96a <notify_cb+0x26>
   1c9ca:	f04f 0901 	mov.w	r9, #1
   1c9ce:	e7e3      	b.n	1c998 <notify_cb+0x54>
			bt_conn_unref(conn);
   1c9d0:	f019 faa7 	bl	35f22 <bt_conn_unref>
   1c9d4:	e7f5      	b.n	1c9c2 <notify_cb+0x7e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1c9d6:	6973      	ldr	r3, [r6, #20]
   1c9d8:	b123      	cbz	r3, 1c9e4 <notify_cb+0xa0>
   1c9da:	4641      	mov	r1, r8
   1c9dc:	4798      	blx	r3
   1c9de:	b908      	cbnz	r0, 1c9e4 <notify_cb+0xa0>
			bt_conn_unref(conn);
   1c9e0:	4620      	mov	r0, r4
   1c9e2:	e7d1      	b.n	1c988 <notify_cb+0x44>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1c9e4:	4641      	mov	r1, r8
   1c9e6:	2294      	movs	r2, #148	; 0x94
   1c9e8:	4620      	mov	r0, r4
   1c9ea:	f01a faf2 	bl	36fd2 <bt_gatt_check_perm>
   1c9ee:	4680      	mov	r8, r0
   1c9f0:	b180      	cbz	r0, 1ca14 <notify_cb+0xd0>
			LOG_WRN("Link is not encrypted");
   1c9f2:	466d      	mov	r5, sp
   1c9f4:	b088      	sub	sp, #32
   1c9f6:	466a      	mov	r2, sp
   1c9f8:	4b1f      	ldr	r3, [pc, #124]	; (1ca78 <notify_cb+0x134>)
   1c9fa:	6153      	str	r3, [r2, #20]
   1c9fc:	4b1f      	ldr	r3, [pc, #124]	; (1ca7c <notify_cb+0x138>)
   1c9fe:	6193      	str	r3, [r2, #24]
   1ca00:	2303      	movs	r3, #3
   1ca02:	f842 3f10 	str.w	r3, [r2, #16]!
   1ca06:	481e      	ldr	r0, [pc, #120]	; (1ca80 <notify_cb+0x13c>)
   1ca08:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1ca0c:	f01a f993 	bl	36d36 <z_log_msg_static_create.constprop.0>
   1ca10:	46ad      	mov	sp, r5
   1ca12:	e7e5      	b.n	1c9e0 <notify_cb+0x9c>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1ca14:	89ab      	ldrh	r3, [r5, #12]
   1ca16:	2b02      	cmp	r3, #2
   1ca18:	d114      	bne.n	1ca44 <notify_cb+0x100>
   1ca1a:	8933      	ldrh	r3, [r6, #8]
   1ca1c:	079a      	lsls	r2, r3, #30
   1ca1e:	d405      	bmi.n	1ca2c <notify_cb+0xe8>
		bt_conn_unref(conn);
   1ca20:	4620      	mov	r0, r4
   1ca22:	f019 fa7e 	bl	35f22 <bt_conn_unref>
		data->err = 0;
   1ca26:	2300      	movs	r3, #0
   1ca28:	60ab      	str	r3, [r5, #8]
   1ca2a:	e794      	b.n	1c956 <notify_cb+0x12>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1ca2c:	692a      	ldr	r2, [r5, #16]
   1ca2e:	88a9      	ldrh	r1, [r5, #4]
   1ca30:	4620      	mov	r0, r4
   1ca32:	f7ff fcc1 	bl	1c3b8 <gatt_indicate>
			if (err == 0) {
   1ca36:	4606      	mov	r6, r0
   1ca38:	b978      	cbnz	r0, 1ca5a <notify_cb+0x116>
				data->ind_params->_ref++;
   1ca3a:	692a      	ldr	r2, [r5, #16]
   1ca3c:	7d93      	ldrb	r3, [r2, #22]
   1ca3e:	3301      	adds	r3, #1
   1ca40:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1ca42:	e7ed      	b.n	1ca20 <notify_cb+0xdc>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1ca44:	2b01      	cmp	r3, #1
   1ca46:	d1eb      	bne.n	1ca20 <notify_cb+0xdc>
   1ca48:	8933      	ldrh	r3, [r6, #8]
   1ca4a:	07db      	lsls	r3, r3, #31
   1ca4c:	d5e8      	bpl.n	1ca20 <notify_cb+0xdc>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1ca4e:	692a      	ldr	r2, [r5, #16]
   1ca50:	88a9      	ldrh	r1, [r5, #4]
   1ca52:	4620      	mov	r0, r4
   1ca54:	f7ff fe86 	bl	1c764 <gatt_notify>
   1ca58:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   1ca5a:	4620      	mov	r0, r4
   1ca5c:	f019 fa61 	bl	35f22 <bt_conn_unref>
		if (err < 0) {
   1ca60:	2e00      	cmp	r6, #0
   1ca62:	f6ff af7a 	blt.w	1c95a <notify_cb+0x16>
   1ca66:	e7de      	b.n	1ca26 <notify_cb+0xe2>
   1ca68:	0001bcd5 	.word	0x0001bcd5
   1ca6c:	20000334 	.word	0x20000334
   1ca70:	2000327b 	.word	0x2000327b
   1ca74:	0003c0a9 	.word	0x0003c0a9
   1ca78:	0003dd6e 	.word	0x0003dd6e
   1ca7c:	0003df6c 	.word	0x0003df6c
   1ca80:	000395b8 	.word	0x000395b8

0001ca84 <bt_gatt_connected>:
{
   1ca84:	b5b0      	push	{r4, r5, r7, lr}
   1ca86:	b08e      	sub	sp, #56	; 0x38
   1ca88:	af02      	add	r7, sp, #8
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ca8a:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
   1ca8e:	4604      	mov	r4, r0
	data.conn = conn;
   1ca90:	6078      	str	r0, [r7, #4]
	data.sec = BT_SECURITY_L1;
   1ca92:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ca94:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   1ca96:	723b      	strb	r3, [r7, #8]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ca98:	4629      	mov	r1, r5
   1ca9a:	f018 ffa1 	bl	359e0 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1ca9e:	b1a0      	cbz	r0, 1caca <bt_gatt_connected+0x46>
		if (conn->id) {
   1caa0:	7a22      	ldrb	r2, [r4, #8]
   1caa2:	2a00      	cmp	r2, #0
   1caa4:	d036      	beq.n	1cb14 <bt_gatt_connected+0x90>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1caa6:	2104      	movs	r1, #4
   1caa8:	4638      	mov	r0, r7
   1caaa:	f016 f8d2 	bl	32c52 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1caae:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1cab0:	4a19      	ldr	r2, [pc, #100]	; (1cb18 <bt_gatt_connected+0x94>)
   1cab2:	2124      	movs	r1, #36	; 0x24
   1cab4:	f107 000c 	add.w	r0, r7, #12
   1cab8:	462b      	mov	r3, r5
   1caba:	f7f9 f873 	bl	15ba4 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   1cabe:	f107 020c 	add.w	r2, r7, #12
   1cac2:	4916      	ldr	r1, [pc, #88]	; (1cb1c <bt_gatt_connected+0x98>)
   1cac4:	4610      	mov	r0, r2
   1cac6:	f7f7 fa6d 	bl	13fa4 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1caca:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1cace:	4a14      	ldr	r2, [pc, #80]	; (1cb20 <bt_gatt_connected+0x9c>)
   1cad0:	1d3b      	adds	r3, r7, #4
   1cad2:	2001      	movs	r0, #1
   1cad4:	f01a fa72 	bl	36fbc <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   1cad8:	4620      	mov	r0, r4
   1cada:	f019 fab9 	bl	36050 <bt_conn_get_security>
   1cade:	7a39      	ldrb	r1, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1cae0:	4288      	cmp	r0, r1
   1cae2:	d214      	bcs.n	1cb0e <bt_gatt_connected+0x8a>
		int err = bt_conn_set_security(conn, data.sec);
   1cae4:	4620      	mov	r0, r4
   1cae6:	f019 fa83 	bl	35ff0 <bt_conn_set_security>
		if (err) {
   1caea:	b180      	cbz	r0, 1cb0e <bt_gatt_connected+0x8a>
			LOG_WRN("Failed to set security for bonded peer (%d)", err);
   1caec:	466c      	mov	r4, sp
   1caee:	b088      	sub	sp, #32
   1caf0:	aa02      	add	r2, sp, #8
   1caf2:	4b0c      	ldr	r3, [pc, #48]	; (1cb24 <bt_gatt_connected+0xa0>)
   1caf4:	6153      	str	r3, [r2, #20]
   1caf6:	4b0c      	ldr	r3, [pc, #48]	; (1cb28 <bt_gatt_connected+0xa4>)
   1caf8:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1cafc:	2304      	movs	r3, #4
   1cafe:	f842 3f10 	str.w	r3, [r2, #16]!
   1cb02:	480a      	ldr	r0, [pc, #40]	; (1cb2c <bt_gatt_connected+0xa8>)
   1cb04:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1cb08:	f01a f915 	bl	36d36 <z_log_msg_static_create.constprop.0>
   1cb0c:	46a5      	mov	sp, r4
}
   1cb0e:	3730      	adds	r7, #48	; 0x30
   1cb10:	46bd      	mov	sp, r7
   1cb12:	bdb0      	pop	{r4, r5, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1cb14:	9200      	str	r2, [sp, #0]
   1cb16:	e7cb      	b.n	1cab0 <bt_gatt_connected+0x2c>
   1cb18:	0003dd6a 	.word	0x0003dd6a
   1cb1c:	0001c255 	.word	0x0001c255
   1cb20:	0001c63d 	.word	0x0001c63d
   1cb24:	0003de48 	.word	0x0003de48
   1cb28:	0003df40 	.word	0x0003df40
   1cb2c:	000395b8 	.word	0x000395b8

0001cb30 <bt_gatt_att_max_mtu_changed>:
{
   1cb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   1cb32:	4b08      	ldr	r3, [pc, #32]	; (1cb54 <bt_gatt_att_max_mtu_changed+0x24>)
   1cb34:	681c      	ldr	r4, [r3, #0]
   1cb36:	4605      	mov	r5, r0
   1cb38:	460e      	mov	r6, r1
   1cb3a:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1cb3c:	b14c      	cbz	r4, 1cb52 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   1cb3e:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1cb42:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1cb44:	b11b      	cbz	r3, 1cb4e <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1cb46:	463a      	mov	r2, r7
   1cb48:	4631      	mov	r1, r6
   1cb4a:	4628      	mov	r0, r5
   1cb4c:	4798      	blx	r3
	return node->next;
   1cb4e:	6864      	ldr	r4, [r4, #4]
   1cb50:	e7f4      	b.n	1cb3c <bt_gatt_att_max_mtu_changed+0xc>
}
   1cb52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cb54:	20001ca4 	.word	0x20001ca4

0001cb58 <bt_gatt_encrypt_change>:
{
   1cb58:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1cb5a:	4a06      	ldr	r2, [pc, #24]	; (1cb74 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   1cb5c:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1cb5e:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   1cb60:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1cb62:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   1cb66:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1cb6a:	f01a fa27 	bl	36fbc <bt_gatt_foreach_attr>
}
   1cb6e:	b003      	add	sp, #12
   1cb70:	f85d fb04 	ldr.w	pc, [sp], #4
   1cb74:	0001c63d 	.word	0x0001c63d

0001cb78 <bt_gatt_store_ccc>:
{
   1cb78:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cb7a:	b0c1      	sub	sp, #260	; 0x104
   1cb7c:	af02      	add	r7, sp, #8
	save.count = 0;
   1cb7e:	2300      	movs	r3, #0
{
   1cb80:	4604      	mov	r4, r0
   1cb82:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   1cb84:	62f9      	str	r1, [r7, #44]	; 0x2c
	save.addr_with_id.id = id;
   1cb86:	f887 0030 	strb.w	r0, [r7, #48]	; 0x30
	save.count = 0;
   1cb8a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   1cb8e:	4a1e      	ldr	r2, [pc, #120]	; (1cc08 <bt_gatt_store_ccc+0x90>)
   1cb90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1cb94:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1cb98:	2001      	movs	r0, #1
   1cb9a:	f01a fa0f 	bl	36fbc <bt_gatt_foreach_attr>
	if (id) {
   1cb9e:	b374      	cbz	r4, 1cbfe <bt_gatt_store_ccc+0x86>
		u8_to_dec(id_str, sizeof(id_str), id);
   1cba0:	1d3e      	adds	r6, r7, #4
   1cba2:	4622      	mov	r2, r4
   1cba4:	2104      	movs	r1, #4
   1cba6:	4630      	mov	r0, r6
   1cba8:	f016 f853 	bl	32c52 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   1cbac:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1cbae:	4a17      	ldr	r2, [pc, #92]	; (1cc0c <bt_gatt_store_ccc+0x94>)
   1cbb0:	462b      	mov	r3, r5
   1cbb2:	2124      	movs	r1, #36	; 0x24
   1cbb4:	f107 0008 	add.w	r0, r7, #8
   1cbb8:	f7f8 fff4 	bl	15ba4 <bt_settings_encode_key>
	if (save.count) {
   1cbbc:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
   1cbc0:	b1fa      	cbz	r2, 1cc02 <bt_gatt_store_ccc+0x8a>
		len = save.count * sizeof(*save.store);
   1cbc2:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   1cbc4:	f107 0134 	add.w	r1, r7, #52	; 0x34
	err = settings_save_one(key, str, len);
   1cbc8:	f107 0008 	add.w	r0, r7, #8
   1cbcc:	f7f7 f98a 	bl	13ee4 <settings_save_one>
	if (err) {
   1cbd0:	4604      	mov	r4, r0
   1cbd2:	b180      	cbz	r0, 1cbf6 <bt_gatt_store_ccc+0x7e>
		LOG_ERR("Failed to store CCCs (err %d)", err);
   1cbd4:	466d      	mov	r5, sp
   1cbd6:	b088      	sub	sp, #32
   1cbd8:	aa02      	add	r2, sp, #8
   1cbda:	4b0d      	ldr	r3, [pc, #52]	; (1cc10 <bt_gatt_store_ccc+0x98>)
   1cbdc:	6153      	str	r3, [r2, #20]
   1cbde:	4b0d      	ldr	r3, [pc, #52]	; (1cc14 <bt_gatt_store_ccc+0x9c>)
   1cbe0:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1cbe4:	2304      	movs	r3, #4
   1cbe6:	f842 3f10 	str.w	r3, [r2, #16]!
   1cbea:	480b      	ldr	r0, [pc, #44]	; (1cc18 <bt_gatt_store_ccc+0xa0>)
   1cbec:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1cbf0:	f01a f8a1 	bl	36d36 <z_log_msg_static_create.constprop.0>
   1cbf4:	46ad      	mov	sp, r5
}
   1cbf6:	4620      	mov	r0, r4
   1cbf8:	37fc      	adds	r7, #252	; 0xfc
   1cbfa:	46bd      	mov	sp, r7
   1cbfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1cbfe:	9400      	str	r4, [sp, #0]
   1cc00:	e7d5      	b.n	1cbae <bt_gatt_store_ccc+0x36>
		str = NULL;
   1cc02:	4611      	mov	r1, r2
   1cc04:	e7e0      	b.n	1cbc8 <bt_gatt_store_ccc+0x50>
   1cc06:	bf00      	nop
   1cc08:	0001bae5 	.word	0x0001bae5
   1cc0c:	0003dd6a 	.word	0x0003dd6a
   1cc10:	0003de78 	.word	0x0003de78
   1cc14:	0003df01 	.word	0x0003df01
   1cc18:	000395b8 	.word	0x000395b8

0001cc1c <bt_gatt_clear>:
		gatt_sub_remove(NULL, sub, prev, params);
	}
}

int bt_gatt_clear(uint8_t id, const bt_addr_le_t *addr)
{
   1cc1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cc1e:	b08f      	sub	sp, #60	; 0x3c
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   1cc20:	ae03      	add	r6, sp, #12
{
   1cc22:	4604      	mov	r4, r0
   1cc24:	460d      	mov	r5, r1
	struct addr_with_id addr_with_id = {
   1cc26:	9103      	str	r1, [sp, #12]
   1cc28:	f88d 0010 	strb.w	r0, [sp, #16]
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   1cc2c:	4a1f      	ldr	r2, [pc, #124]	; (1ccac <bt_gatt_clear+0x90>)
   1cc2e:	4633      	mov	r3, r6
   1cc30:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1cc34:	2001      	movs	r0, #1
   1cc36:	f01a f9c1 	bl	36fbc <bt_gatt_foreach_attr>
		if (id) {
   1cc3a:	b394      	cbz	r4, 1cca2 <bt_gatt_clear+0x86>
			u8_to_dec(id_str, sizeof(id_str), id);
   1cc3c:	af02      	add	r7, sp, #8
   1cc3e:	4622      	mov	r2, r4
   1cc40:	2104      	movs	r1, #4
   1cc42:	4638      	mov	r0, r7
   1cc44:	f016 f805 	bl	32c52 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1cc48:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1cc4a:	4a19      	ldr	r2, [pc, #100]	; (1ccb0 <bt_gatt_clear+0x94>)
   1cc4c:	462b      	mov	r3, r5
   1cc4e:	2124      	movs	r1, #36	; 0x24
   1cc50:	a805      	add	r0, sp, #20
   1cc52:	f7f8 ffa7 	bl	15ba4 <bt_settings_encode_key>
		return settings_delete(key);
   1cc56:	a805      	add	r0, sp, #20
   1cc58:	f017 f984 	bl	33f64 <settings_delete>
	int err;

	err = bt_gatt_clear_ccc(id, addr);
	if (err < 0) {
   1cc5c:	2800      	cmp	r0, #0
   1cc5e:	db1e      	blt.n	1cc9e <bt_gatt_clear+0x82>
		return err;
	}

	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
		err = bt_gatt_clear_sc(id, addr);
   1cc60:	4629      	mov	r1, r5
   1cc62:	4620      	mov	r0, r4
   1cc64:	f7fe ff5a 	bl	1bb1c <bt_gatt_clear_sc>
		if (err < 0) {
   1cc68:	2800      	cmp	r0, #0
   1cc6a:	db18      	blt.n	1cc9e <bt_gatt_clear+0x82>
	cfg = find_cf_cfg_by_addr(id, addr);
   1cc6c:	4629      	mov	r1, r5
   1cc6e:	4620      	mov	r0, r4
   1cc70:	f7fe fc16 	bl	1b4a0 <find_cf_cfg_by_addr>
	if (cfg) {
   1cc74:	b108      	cbz	r0, 1cc7a <bt_gatt_clear+0x5e>
		clear_cf_cfg(cfg);
   1cc76:	f7fe fe5b 	bl	1b930 <clear_cf_cfg>
		if (id) {
   1cc7a:	b1a4      	cbz	r4, 1cca6 <bt_gatt_clear+0x8a>
			u8_to_dec(id_str, sizeof(id_str), id);
   1cc7c:	4622      	mov	r2, r4
   1cc7e:	2104      	movs	r1, #4
   1cc80:	4630      	mov	r0, r6
   1cc82:	f015 ffe6 	bl	32c52 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1cc86:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "cf",
   1cc88:	4a0a      	ldr	r2, [pc, #40]	; (1ccb4 <bt_gatt_clear+0x98>)
   1cc8a:	462b      	mov	r3, r5
   1cc8c:	2124      	movs	r1, #36	; 0x24
   1cc8e:	a805      	add	r0, sp, #20
   1cc90:	f7f8 ff88 	bl	15ba4 <bt_settings_encode_key>
		return settings_delete(key);
   1cc94:	a805      	add	r0, sp, #20
   1cc96:	f017 f965 	bl	33f64 <settings_delete>
		}
	}

	if (IS_ENABLED(CONFIG_BT_GATT_CACHING)) {
		err = bt_gatt_clear_cf(id, addr);
		if (err < 0) {
   1cc9a:	ea00 70e0 	and.w	r0, r0, r0, asr #31
	if (IS_ENABLED(CONFIG_BT_GATT_CLIENT)) {
		bt_gatt_clear_subscriptions(id, addr);
	}

	return 0;
}
   1cc9e:	b00f      	add	sp, #60	; 0x3c
   1cca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1cca2:	9400      	str	r4, [sp, #0]
   1cca4:	e7d1      	b.n	1cc4a <bt_gatt_clear+0x2e>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1cca6:	9400      	str	r4, [sp, #0]
   1cca8:	e7ee      	b.n	1cc88 <bt_gatt_clear+0x6c>
   1ccaa:	bf00      	nop
   1ccac:	0001babd 	.word	0x0001babd
   1ccb0:	0003dd6a 	.word	0x0003dd6a
   1ccb4:	0003dfde 	.word	0x0003dfde

0001ccb8 <bt_gatt_disconnected>:

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1ccb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ccbc:	b08c      	sub	sp, #48	; 0x30
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1ccbe:	4603      	mov	r3, r0
   1ccc0:	4a40      	ldr	r2, [pc, #256]	; (1cdc4 <bt_gatt_disconnected+0x10c>)
	if (gatt_ccc_store.conn_list[index] != NULL) {
   1ccc2:	4e41      	ldr	r6, [pc, #260]	; (1cdc8 <bt_gatt_disconnected+0x110>)
{
   1ccc4:	4604      	mov	r4, r0
   1ccc6:	af02      	add	r7, sp, #8
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1ccc8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1cccc:	2001      	movs	r0, #1
   1ccce:	f01a f975 	bl	36fbc <bt_gatt_foreach_attr>
	uint8_t index = bt_conn_index(conn);
   1ccd2:	4620      	mov	r0, r4
   1ccd4:	f7fc fc50 	bl	19578 <bt_conn_index>
   1ccd8:	4605      	mov	r5, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   1ccda:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   1ccde:	b120      	cbz	r0, 1ccea <bt_gatt_disconnected+0x32>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   1cce0:	f019 f91f 	bl	35f22 <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   1cce4:	2300      	movs	r3, #0
   1cce6:	f846 3025 	str.w	r3, [r6, r5, lsl #2]

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);

	if (gatt_ccc_conn_queue_is_empty()) {
		k_work_cancel_delayable(&gatt_ccc_store.work);
   1ccea:	4838      	ldr	r0, [pc, #224]	; (1cdcc <bt_gatt_disconnected+0x114>)
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ccec:	f104 0588 	add.w	r5, r4, #136	; 0x88
		k_work_cancel_delayable(&gatt_ccc_store.work);
   1ccf0:	f01b febb 	bl	38a6a <k_work_cancel_delayable>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ccf4:	7a20      	ldrb	r0, [r4, #8]
   1ccf6:	4629      	mov	r1, r5
   1ccf8:	f018 fe72 	bl	359e0 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1ccfc:	2800      	cmp	r0, #0
   1ccfe:	d03a      	beq.n	1cd76 <bt_gatt_disconnected+0xbe>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   1cd00:	4629      	mov	r1, r5
   1cd02:	7a20      	ldrb	r0, [r4, #8]
   1cd04:	f7ff ff38 	bl	1cb78 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   1cd08:	4620      	mov	r0, r4
   1cd0a:	f7fe fb1f 	bl	1b34c <find_cf_cfg>
	if (!cfg) {
   1cd0e:	4606      	mov	r6, r0
   1cd10:	2800      	cmp	r0, #0
   1cd12:	d050      	beq.n	1cdb6 <bt_gatt_disconnected+0xfe>
		if (conn->id) {
   1cd14:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   1cd16:	3608      	adds	r6, #8
		len = 0;
   1cd18:	f04f 0801 	mov.w	r8, #1
		if (conn->id) {
   1cd1c:	b162      	cbz	r2, 1cd38 <bt_gatt_disconnected+0x80>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1cd1e:	2104      	movs	r1, #4
   1cd20:	4638      	mov	r0, r7
   1cd22:	f015 ff96 	bl	32c52 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1cd26:	462b      	mov	r3, r5
   1cd28:	4a29      	ldr	r2, [pc, #164]	; (1cdd0 <bt_gatt_disconnected+0x118>)
   1cd2a:	9700      	str	r7, [sp, #0]
   1cd2c:	2124      	movs	r1, #36	; 0x24
   1cd2e:	1d38      	adds	r0, r7, #4
   1cd30:	f7f8 ff38 	bl	15ba4 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   1cd34:	7a23      	ldrb	r3, [r4, #8]
   1cd36:	b93b      	cbnz	r3, 1cd48 <bt_gatt_disconnected+0x90>
		bt_settings_encode_key(key, sizeof(key), "cf",
   1cd38:	2300      	movs	r3, #0
   1cd3a:	9300      	str	r3, [sp, #0]
   1cd3c:	4a24      	ldr	r2, [pc, #144]	; (1cdd0 <bt_gatt_disconnected+0x118>)
   1cd3e:	462b      	mov	r3, r5
   1cd40:	2124      	movs	r1, #36	; 0x24
   1cd42:	1d38      	adds	r0, r7, #4
   1cd44:	f7f8 ff2e 	bl	15ba4 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   1cd48:	4642      	mov	r2, r8
   1cd4a:	4631      	mov	r1, r6
   1cd4c:	1d38      	adds	r0, r7, #4
   1cd4e:	f7f7 f8c9 	bl	13ee4 <settings_save_one>
	if (err) {
   1cd52:	b180      	cbz	r0, 1cd76 <bt_gatt_disconnected+0xbe>
		LOG_ERR("Failed to store Client Features (err %d)", err);
   1cd54:	466e      	mov	r6, sp
   1cd56:	b088      	sub	sp, #32
   1cd58:	aa02      	add	r2, sp, #8
   1cd5a:	4b1e      	ldr	r3, [pc, #120]	; (1cdd4 <bt_gatt_disconnected+0x11c>)
   1cd5c:	6153      	str	r3, [r2, #20]
   1cd5e:	4b1e      	ldr	r3, [pc, #120]	; (1cdd8 <bt_gatt_disconnected+0x120>)
   1cd60:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1cd64:	2304      	movs	r3, #4
   1cd66:	f842 3f10 	str.w	r3, [r2, #16]!
   1cd6a:	481c      	ldr	r0, [pc, #112]	; (1cddc <bt_gatt_disconnected+0x124>)
   1cd6c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1cd70:	f019 ffe1 	bl	36d36 <z_log_msg_static_create.constprop.0>
   1cd74:	46b5      	mov	sp, r6
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1cd76:	7a20      	ldrb	r0, [r4, #8]
   1cd78:	4629      	mov	r1, r5
   1cd7a:	f018 fe31 	bl	359e0 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1cd7e:	b148      	cbz	r0, 1cd94 <bt_gatt_disconnected+0xdc>
		struct addr_with_id addr_with_id = {
   1cd80:	7a23      	ldrb	r3, [r4, #8]
   1cd82:	723b      	strb	r3, [r7, #8]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1cd84:	4a16      	ldr	r2, [pc, #88]	; (1cde0 <bt_gatt_disconnected+0x128>)
		struct addr_with_id addr_with_id = {
   1cd86:	607d      	str	r5, [r7, #4]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1cd88:	1d3b      	adds	r3, r7, #4
   1cd8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1cd8e:	2001      	movs	r0, #1
   1cd90:	f01a f914 	bl	36fbc <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   1cd94:	4620      	mov	r0, r4
   1cd96:	f7fe fad9 	bl	1b34c <find_cf_cfg>
	if (!cfg) {
   1cd9a:	4606      	mov	r6, r0
   1cd9c:	b138      	cbz	r0, 1cdae <bt_gatt_disconnected+0xf6>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1cd9e:	7a20      	ldrb	r0, [r4, #8]
   1cda0:	4629      	mov	r1, r5
   1cda2:	f018 fe1d 	bl	359e0 <bt_addr_le_is_bonded>
   1cda6:	b940      	cbnz	r0, 1cdba <bt_gatt_disconnected+0x102>
		clear_cf_cfg(cfg);
   1cda8:	4630      	mov	r0, r6
   1cdaa:	f7fe fdc1 	bl	1b930 <clear_cf_cfg>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1cdae:	3728      	adds	r7, #40	; 0x28
   1cdb0:	46bd      	mov	sp, r7
   1cdb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
   1cdb6:	4680      	mov	r8, r0
   1cdb8:	e7be      	b.n	1cd38 <bt_gatt_disconnected+0x80>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1cdba:	4629      	mov	r1, r5
   1cdbc:	1c70      	adds	r0, r6, #1
   1cdbe:	f019 ff09 	bl	36bd4 <bt_addr_le_copy>
}
   1cdc2:	e7f4      	b.n	1cdae <bt_gatt_disconnected+0xf6>
   1cdc4:	0001bc35 	.word	0x0001bc35
   1cdc8:	20001300 	.word	0x20001300
   1cdcc:	20001308 	.word	0x20001308
   1cdd0:	0003dfde 	.word	0x0003dfde
   1cdd4:	0003de9a 	.word	0x0003de9a
   1cdd8:	0003dec7 	.word	0x0003dec7
   1cddc:	000395b8 	.word	0x000395b8
   1cde0:	0001babd 	.word	0x0001babd

0001cde4 <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   1cde4:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1cde6:	4b05      	ldr	r3, [pc, #20]	; (1cdfc <smp_find+0x18>)
{
   1cde8:	4601      	mov	r1, r0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1cdea:	4618      	mov	r0, r3
   1cdec:	f01a fa03 	bl	371f6 <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   1cdf0:	3b04      	subs	r3, #4
   1cdf2:	2800      	cmp	r0, #0
}
   1cdf4:	bf14      	ite	ne
   1cdf6:	4618      	movne	r0, r3
   1cdf8:	2000      	moveq	r0, #0
   1cdfa:	bd08      	pop	{r3, pc}
   1cdfc:	2000140c 	.word	0x2000140c

0001ce00 <latch_auth_cb>:
{
   1ce00:	b510      	push	{r4, lr}
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   1ce02:	4a0c      	ldr	r2, [pc, #48]	; (1ce34 <latch_auth_cb+0x34>)
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1ce04:	6811      	ldr	r1, [r2, #0]
   1ce06:	4a0c      	ldr	r2, [pc, #48]	; (1ce38 <latch_auth_cb+0x38>)
   1ce08:	f3bf 8f5b 	dmb	ish
   1ce0c:	f500 73d4 	add.w	r3, r0, #424	; 0x1a8
   1ce10:	e853 4f00 	ldrex	r4, [r3]
   1ce14:	4294      	cmp	r4, r2
   1ce16:	d104      	bne.n	1ce22 <latch_auth_cb+0x22>
   1ce18:	e843 1c00 	strex	ip, r1, [r3]
   1ce1c:	f1bc 0f00 	cmp.w	ip, #0
   1ce20:	d1f6      	bne.n	1ce10 <latch_auth_cb+0x10>
   1ce22:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ce26:	f3bf 8f5b 	dmb	ish
   1ce2a:	f8d0 01a8 	ldr.w	r0, [r0, #424]	; 0x1a8
   1ce2e:	f3bf 8f5b 	dmb	ish
}
   1ce32:	bd10      	pop	{r4, pc}
   1ce34:	20001b78 	.word	0x20001b78
   1ce38:	20001408 	.word	0x20001408

0001ce3c <get_io_capa>:
{
   1ce3c:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ce3e:	f7ff ffdf 	bl	1ce00 <latch_auth_cb>
	if (!smp_auth_cb) {
   1ce42:	4603      	mov	r3, r0
   1ce44:	b1c8      	cbz	r0, 1ce7a <get_io_capa+0x3e>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1ce46:	e9d0 1200 	ldrd	r1, r2, [r0]
   1ce4a:	b921      	cbnz	r1, 1ce56 <get_io_capa+0x1a>
			return BT_SMP_IO_KEYBOARD_ONLY;
   1ce4c:	2a00      	cmp	r2, #0
   1ce4e:	bf0c      	ite	eq
   1ce50:	2003      	moveq	r0, #3
   1ce52:	2002      	movne	r0, #2
   1ce54:	e010      	b.n	1ce78 <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1ce56:	b132      	cbz	r2, 1ce66 <get_io_capa+0x2a>
   1ce58:	6883      	ldr	r3, [r0, #8]
   1ce5a:	b913      	cbnz	r3, 1ce62 <get_io_capa+0x26>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   1ce5c:	4b09      	ldr	r3, [pc, #36]	; (1ce84 <get_io_capa+0x48>)
   1ce5e:	781b      	ldrb	r3, [r3, #0]
   1ce60:	b933      	cbnz	r3, 1ce70 <get_io_capa+0x34>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1ce62:	2004      	movs	r0, #4
   1ce64:	e008      	b.n	1ce78 <get_io_capa+0x3c>
	if (sc_supported && smp_auth_cb->passkey_display &&
   1ce66:	4907      	ldr	r1, [pc, #28]	; (1ce84 <get_io_capa+0x48>)
   1ce68:	7808      	ldrb	r0, [r1, #0]
   1ce6a:	b128      	cbz	r0, 1ce78 <get_io_capa+0x3c>
   1ce6c:	689b      	ldr	r3, [r3, #8]
   1ce6e:	b933      	cbnz	r3, 1ce7e <get_io_capa+0x42>
	if (smp_auth_cb->passkey_entry) {
   1ce70:	3a00      	subs	r2, #0
   1ce72:	bf18      	it	ne
   1ce74:	2201      	movne	r2, #1
   1ce76:	0050      	lsls	r0, r2, #1
}
   1ce78:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1ce7a:	2003      	movs	r0, #3
   1ce7c:	e7fc      	b.n	1ce78 <get_io_capa+0x3c>
		return BT_SMP_IO_DISPLAY_YESNO;
   1ce7e:	2001      	movs	r0, #1
   1ce80:	e7fa      	b.n	1ce78 <get_io_capa+0x3c>
   1ce82:	bf00      	nop
   1ce84:	200033e6 	.word	0x200033e6

0001ce88 <get_auth>:
{
   1ce88:	b510      	push	{r4, lr}
	if (sc_supported) {
   1ce8a:	4b0c      	ldr	r3, [pc, #48]	; (1cebc <get_auth+0x34>)
   1ce8c:	781b      	ldrb	r3, [r3, #0]
   1ce8e:	b17b      	cbz	r3, 1ceb0 <get_auth+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   1ce90:	f001 040f 	and.w	r4, r1, #15
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1ce94:	f7ff ffd2 	bl	1ce3c <get_io_capa>
	if (bondable) {
   1ce98:	4b09      	ldr	r3, [pc, #36]	; (1cec0 <get_auth+0x38>)
   1ce9a:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1ce9c:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   1ce9e:	bf0c      	ite	eq
   1cea0:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   1cea4:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   1cea8:	b12b      	cbz	r3, 1ceb6 <get_auth+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   1ceaa:	f044 0001 	orr.w	r0, r4, #1
}
   1ceae:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   1ceb0:	f001 0407 	and.w	r4, r1, #7
   1ceb4:	e7ee      	b.n	1ce94 <get_auth+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   1ceb6:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   1ceba:	e7f8      	b.n	1ceae <get_auth+0x26>
   1cebc:	200033e6 	.word	0x200033e6
   1cec0:	20000a00 	.word	0x20000a00

0001cec4 <bt_smp_pkey_ready.part.0>:
	}

	return 0;
}

static void bt_smp_pkey_ready(const uint8_t *pkey)
   1cec4:	b580      	push	{r7, lr}
   1cec6:	af00      	add	r7, sp, #0
	LOG_DBG("");

	sc_public_key = pkey;

	if (!pkey) {
		LOG_WRN("Public key not available");
   1cec8:	b088      	sub	sp, #32
   1ceca:	466a      	mov	r2, sp
   1cecc:	4b06      	ldr	r3, [pc, #24]	; (1cee8 <bt_smp_pkey_ready.part.0+0x24>)
   1cece:	6153      	str	r3, [r2, #20]
   1ced0:	4b06      	ldr	r3, [pc, #24]	; (1ceec <bt_smp_pkey_ready.part.0+0x28>)
   1ced2:	6193      	str	r3, [r2, #24]
   1ced4:	2303      	movs	r3, #3
   1ced6:	f842 3f10 	str.w	r3, [r2, #16]!
   1ceda:	4805      	ldr	r0, [pc, #20]	; (1cef0 <bt_smp_pkey_ready.part.0+0x2c>)
   1cedc:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1cee0:	f01a f9df 	bl	372a2 <z_log_msg_static_create.constprop.0>
		if (err) {
			smp_error(smp, err);
		}
#endif /* CONFIG_BT_PERIPHERAL */
	}
}
   1cee4:	46bd      	mov	sp, r7
   1cee6:	bd80      	pop	{r7, pc}
   1cee8:	0003dfef 	.word	0x0003dfef
   1ceec:	0003e54e 	.word	0x0003e54e
   1cef0:	000395f8 	.word	0x000395f8

0001cef4 <smp_chan_get.part.0>:
static struct bt_smp *smp_chan_get(struct bt_conn *conn)
   1cef4:	b580      	push	{r7, lr}
   1cef6:	af00      	add	r7, sp, #0
		LOG_ERR("Unable to find SMP channel");
   1cef8:	b088      	sub	sp, #32
   1cefa:	466a      	mov	r2, sp
   1cefc:	4b07      	ldr	r3, [pc, #28]	; (1cf1c <smp_chan_get.part.0+0x28>)
   1cefe:	6153      	str	r3, [r2, #20]
   1cf00:	4b07      	ldr	r3, [pc, #28]	; (1cf20 <smp_chan_get.part.0+0x2c>)
   1cf02:	6193      	str	r3, [r2, #24]
   1cf04:	2303      	movs	r3, #3
   1cf06:	f842 3f10 	str.w	r3, [r2, #16]!
   1cf0a:	4806      	ldr	r0, [pc, #24]	; (1cf24 <smp_chan_get.part.0+0x30>)
   1cf0c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1cf10:	f01a f9c7 	bl	372a2 <z_log_msg_static_create.constprop.0>
}
   1cf14:	2000      	movs	r0, #0
   1cf16:	46bd      	mov	sp, r7
   1cf18:	bd80      	pop	{r7, pc}
   1cf1a:	bf00      	nop
   1cf1c:	0003e00c 	.word	0x0003e00c
   1cf20:	0003e759 	.word	0x0003e759
   1cf24:	000395f8 	.word	0x000395f8

0001cf28 <smp_sign_buf>:
 * msg buffer contains message itself, 32 bit count and signature,
 * so total buffer size is len + 4 + 8 octets.
 * API is Little Endian to make it suitable for Bluetooth.
 */
static int smp_sign_buf(const uint8_t *key, uint8_t *msg, uint16_t len)
{
   1cf28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cf2c:	b08a      	sub	sp, #40	; 0x28
	uint8_t key_s[16], tmp[16];
	int err;

	LOG_DBG("Signing msg %s len %u key %s", bt_hex(msg, len), len, bt_hex(key, 16));

	sys_mem_swap(m, len + sizeof(cnt));
   1cf2e:	1d14      	adds	r4, r2, #4
{
   1cf30:	af00      	add	r7, sp, #0
   1cf32:	460d      	mov	r5, r1
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
   1cf34:	588b      	ldr	r3, [r1, r2]
   1cf36:	607b      	str	r3, [r7, #4]
   1cf38:	eb01 0802 	add.w	r8, r1, r2
{
   1cf3c:	4606      	mov	r6, r0
	sys_mem_swap(m, len + sizeof(cnt));
   1cf3e:	4621      	mov	r1, r4
   1cf40:	4628      	mov	r0, r5
   1cf42:	f01a f949 	bl	371d8 <sys_mem_swap>
	for (; length > 0; length--) {
   1cf46:	f107 0208 	add.w	r2, r7, #8
   1cf4a:	f106 0310 	add.w	r3, r6, #16
   1cf4e:	4610      	mov	r0, r2
		*pdst++ = *psrc--;
   1cf50:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
   1cf54:	f802 1b01 	strb.w	r1, [r2], #1
	for (; length > 0; length--) {
   1cf58:	42b3      	cmp	r3, r6
   1cf5a:	d1f9      	bne.n	1cf50 <smp_sign_buf+0x28>
	sys_memcpy_swap(key_s, key, 16);

	err = bt_crypto_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
   1cf5c:	f107 0318 	add.w	r3, r7, #24
   1cf60:	4622      	mov	r2, r4
   1cf62:	4629      	mov	r1, r5
   1cf64:	f01a fc88 	bl	37878 <bt_crypto_aes_cmac>
	if (err) {
   1cf68:	4606      	mov	r6, r0
   1cf6a:	b1a0      	cbz	r0, 1cf96 <smp_sign_buf+0x6e>
		LOG_ERR("Data signing failed");
   1cf6c:	466c      	mov	r4, sp
   1cf6e:	b088      	sub	sp, #32
   1cf70:	466a      	mov	r2, sp
   1cf72:	4b14      	ldr	r3, [pc, #80]	; (1cfc4 <smp_sign_buf+0x9c>)
   1cf74:	6153      	str	r3, [r2, #20]
   1cf76:	4b14      	ldr	r3, [pc, #80]	; (1cfc8 <smp_sign_buf+0xa0>)
   1cf78:	6193      	str	r3, [r2, #24]
   1cf7a:	2303      	movs	r3, #3
   1cf7c:	f842 3f10 	str.w	r3, [r2, #16]!
   1cf80:	4812      	ldr	r0, [pc, #72]	; (1cfcc <smp_sign_buf+0xa4>)
   1cf82:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1cf86:	f01a f98c 	bl	372a2 <z_log_msg_static_create.constprop.0>
   1cf8a:	46a5      	mov	sp, r4
	memcpy(sig, tmp + 4, 12);

	LOG_DBG("sig %s", bt_hex(sig, 12));

	return 0;
}
   1cf8c:	4630      	mov	r0, r6
   1cf8e:	3728      	adds	r7, #40	; 0x28
   1cf90:	46bd      	mov	sp, r7
   1cf92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	sys_mem_swap(tmp, sizeof(tmp));
   1cf96:	f107 0018 	add.w	r0, r7, #24
   1cf9a:	2110      	movs	r1, #16
   1cf9c:	f01a f91c 	bl	371d8 <sys_mem_swap>
	memcpy(tmp + 4, &cnt, sizeof(cnt));
   1cfa0:	2204      	movs	r2, #4
   1cfa2:	18b9      	adds	r1, r7, r2
   1cfa4:	f107 001c 	add.w	r0, r7, #28
   1cfa8:	f018 fac5 	bl	35536 <memcpy>
	sys_mem_swap(m, len + sizeof(cnt));
   1cfac:	4621      	mov	r1, r4
   1cfae:	4628      	mov	r0, r5
   1cfb0:	f01a f912 	bl	371d8 <sys_mem_swap>
	memcpy(sig, tmp + 4, 12);
   1cfb4:	220c      	movs	r2, #12
   1cfb6:	f107 011c 	add.w	r1, r7, #28
   1cfba:	4640      	mov	r0, r8
   1cfbc:	f018 fabb 	bl	35536 <memcpy>
	return 0;
   1cfc0:	e7e4      	b.n	1cf8c <smp_sign_buf+0x64>
   1cfc2:	bf00      	nop
   1cfc4:	0003e02b 	.word	0x0003e02b
   1cfc8:	0003e739 	.word	0x0003e739
   1cfcc:	000395f8 	.word	0x000395f8

0001cfd0 <bt_smp_accept.part.0>:
	} else {
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   1cfd0:	b580      	push	{r7, lr}
   1cfd2:	af00      	add	r7, sp, #0
		*chan = &smp->chan.chan;

		return 0;
	}

	LOG_ERR("No available SMP context for conn %p", conn);
   1cfd4:	b088      	sub	sp, #32
   1cfd6:	466a      	mov	r2, sp
   1cfd8:	4b08      	ldr	r3, [pc, #32]	; (1cffc <bt_smp_accept.part.0+0x2c>)
   1cfda:	6153      	str	r3, [r2, #20]
   1cfdc:	4b08      	ldr	r3, [pc, #32]	; (1d000 <bt_smp_accept.part.0+0x30>)
   1cfde:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1cfe2:	2304      	movs	r3, #4
   1cfe4:	f842 3f10 	str.w	r3, [r2, #16]!
   1cfe8:	4806      	ldr	r0, [pc, #24]	; (1d004 <bt_smp_accept.part.0+0x34>)
   1cfea:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1cfee:	f01a f958 	bl	372a2 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   1cff2:	f06f 000b 	mvn.w	r0, #11
   1cff6:	46bd      	mov	sp, r7
   1cff8:	bd80      	pop	{r7, pc}
   1cffa:	bf00      	nop
   1cffc:	0003e043 	.word	0x0003e043
   1d000:	0003e6bf 	.word	0x0003e6bf
   1d004:	000395f8 	.word	0x000395f8

0001d008 <bt_smp_accept>:
		if (smp->chan.chan.conn) {
   1d008:	4b06      	ldr	r3, [pc, #24]	; (1d024 <bt_smp_accept+0x1c>)
   1d00a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
   1d00e:	b10a      	cbz	r2, 1d014 <bt_smp_accept+0xc>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1d010:	f7ff bfde 	b.w	1cfd0 <bt_smp_accept.part.0>
		smp->chan.chan.ops = &ops;
   1d014:	4804      	ldr	r0, [pc, #16]	; (1d028 <bt_smp_accept+0x20>)
   1d016:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
		*chan = &smp->chan.chan;
   1d01a:	33ec      	adds	r3, #236	; 0xec
   1d01c:	600b      	str	r3, [r1, #0]
}
   1d01e:	4610      	mov	r0, r2
   1d020:	4770      	bx	lr
   1d022:	bf00      	nop
   1d024:	20001408 	.word	0x20001408
   1d028:	00039e94 	.word	0x00039e94

0001d02c <smp_init>:
{
   1d02c:	b538      	push	{r3, r4, r5, lr}
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1d02e:	22ec      	movs	r2, #236	; 0xec
{
   1d030:	4605      	mov	r5, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1d032:	2100      	movs	r1, #0
   1d034:	f018 fa8a 	bl	3554c <memset>
	if (bt_rand(smp->prnd, 16)) {
   1d038:	2110      	movs	r1, #16
   1d03a:	f105 0027 	add.w	r0, r5, #39	; 0x27
   1d03e:	f005 f88b 	bl	22158 <bt_rand>
   1d042:	4604      	mov	r4, r0
   1d044:	b948      	cbnz	r0, 1d05a <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   1d046:	2105      	movs	r1, #5
   1d048:	4628      	mov	r0, r5
   1d04a:	f01a f938 	bl	372be <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   1d04e:	f7fb fdb9 	bl	18bc4 <bt_pub_key_get>
   1d052:	4b03      	ldr	r3, [pc, #12]	; (1d060 <smp_init+0x34>)
   1d054:	6018      	str	r0, [r3, #0]
}
   1d056:	4620      	mov	r0, r4
   1d058:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1d05a:	2408      	movs	r4, #8
   1d05c:	e7fb      	b.n	1d056 <smp_init+0x2a>
   1d05e:	bf00      	nop
   1d060:	20001cac 	.word	0x20001cac

0001d064 <smp_dhkey_generate>:
{
   1d064:	b5b0      	push	{r4, r5, r7, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1d066:	1d05      	adds	r5, r0, #4
{
   1d068:	af00      	add	r7, sp, #0
   1d06a:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1d06c:	2108      	movs	r1, #8
   1d06e:	4628      	mov	r0, r5
   1d070:	f01a f925 	bl	372be <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   1d074:	490e      	ldr	r1, [pc, #56]	; (1d0b0 <smp_dhkey_generate+0x4c>)
   1d076:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1d07a:	f7fb fdb3 	bl	18be4 <bt_dh_key_gen>
	if (err) {
   1d07e:	b1a0      	cbz	r0, 1d0aa <smp_dhkey_generate+0x46>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1d080:	2108      	movs	r1, #8
   1d082:	4628      	mov	r0, r5
   1d084:	f01a f8e1 	bl	3724a <atomic_clear_bit>
		LOG_ERR("Failed to generate DHKey");
   1d088:	466c      	mov	r4, sp
   1d08a:	b088      	sub	sp, #32
   1d08c:	466a      	mov	r2, sp
   1d08e:	4b09      	ldr	r3, [pc, #36]	; (1d0b4 <smp_dhkey_generate+0x50>)
   1d090:	6153      	str	r3, [r2, #20]
   1d092:	4b09      	ldr	r3, [pc, #36]	; (1d0b8 <smp_dhkey_generate+0x54>)
   1d094:	6193      	str	r3, [r2, #24]
   1d096:	2303      	movs	r3, #3
   1d098:	4808      	ldr	r0, [pc, #32]	; (1d0bc <smp_dhkey_generate+0x58>)
   1d09a:	f842 3f10 	str.w	r3, [r2, #16]!
   1d09e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d0a2:	f01a f8fe 	bl	372a2 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1d0a6:	2008      	movs	r0, #8
   1d0a8:	46a5      	mov	sp, r4
}
   1d0aa:	46bd      	mov	sp, r7
   1d0ac:	bdb0      	pop	{r4, r5, r7, pc}
   1d0ae:	bf00      	nop
   1d0b0:	000376db 	.word	0x000376db
   1d0b4:	0003e06c 	.word	0x0003e06c
   1d0b8:	0003e67b 	.word	0x0003e67b
   1d0bc:	000395f8 	.word	0x000395f8

0001d0c0 <smp_ident_info>:
{
   1d0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d0c2:	4604      	mov	r4, r0
   1d0c4:	af00      	add	r7, sp, #0
   1d0c6:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1d0c8:	3004      	adds	r0, #4
   1d0ca:	210d      	movs	r1, #13
   1d0cc:	f01a f893 	bl	371f6 <atomic_test_bit>
   1d0d0:	b348      	cbz	r0, 1d126 <smp_ident_info+0x66>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1d0d2:	68de      	ldr	r6, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   1d0d4:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1d0d8:	f103 0588 	add.w	r5, r3, #136	; 0x88
   1d0dc:	7a19      	ldrb	r1, [r3, #8]
   1d0de:	462a      	mov	r2, r5
   1d0e0:	2002      	movs	r0, #2
   1d0e2:	f01a fb9d 	bl	37820 <bt_keys_get_type>
		if (!keys) {
   1d0e6:	b9c8      	cbnz	r0, 1d11c <smp_ident_info+0x5c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1d0e8:	4628      	mov	r0, r5
   1d0ea:	f7f8 fa4d 	bl	15588 <bt_addr_le_str>
   1d0ee:	466c      	mov	r4, sp
   1d0f0:	b08a      	sub	sp, #40	; 0x28
   1d0f2:	466a      	mov	r2, sp
   1d0f4:	4b0f      	ldr	r3, [pc, #60]	; (1d134 <smp_ident_info+0x74>)
   1d0f6:	6153      	str	r3, [r2, #20]
   1d0f8:	4b0f      	ldr	r3, [pc, #60]	; (1d138 <smp_ident_info+0x78>)
   1d0fa:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1d0fe:	f240 3301 	movw	r3, #769	; 0x301
   1d102:	8413      	strh	r3, [r2, #32]
   1d104:	4b0d      	ldr	r3, [pc, #52]	; (1d13c <smp_ident_info+0x7c>)
   1d106:	480e      	ldr	r0, [pc, #56]	; (1d140 <smp_ident_info+0x80>)
   1d108:	f842 3f10 	str.w	r3, [r2, #16]!
   1d10c:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1d110:	f01a f8c7 	bl	372a2 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1d114:	2008      	movs	r0, #8
   1d116:	46a5      	mov	sp, r4
}
   1d118:	46bd      	mov	sp, r7
   1d11a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->irk.val, req->irk, 16);
   1d11c:	2210      	movs	r2, #16
   1d11e:	4631      	mov	r1, r6
   1d120:	302a      	adds	r0, #42	; 0x2a
   1d122:	f018 fa08 	bl	35536 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1d126:	4620      	mov	r0, r4
   1d128:	2109      	movs	r1, #9
   1d12a:	f01a f8c8 	bl	372be <atomic_set_bit>
	return 0;
   1d12e:	2000      	movs	r0, #0
   1d130:	e7f2      	b.n	1d118 <smp_ident_info+0x58>
   1d132:	bf00      	nop
   1d134:	0003e089 	.word	0x0003e089
   1d138:	0003e634 	.word	0x0003e634
   1d13c:	01000004 	.word	0x01000004
   1d140:	000395f8 	.word	0x000395f8

0001d144 <smp_encrypt_info>:
{
   1d144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d146:	4604      	mov	r4, r0
   1d148:	af00      	add	r7, sp, #0
   1d14a:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1d14c:	3004      	adds	r0, #4
   1d14e:	210d      	movs	r1, #13
   1d150:	f01a f851 	bl	371f6 <atomic_test_bit>
   1d154:	b348      	cbz	r0, 1d1aa <smp_encrypt_info+0x66>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1d156:	68de      	ldr	r6, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   1d158:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1d15c:	f103 0588 	add.w	r5, r3, #136	; 0x88
   1d160:	7a19      	ldrb	r1, [r3, #8]
   1d162:	462a      	mov	r2, r5
   1d164:	2004      	movs	r0, #4
   1d166:	f01a fb5b 	bl	37820 <bt_keys_get_type>
		if (!keys) {
   1d16a:	b9c8      	cbnz	r0, 1d1a0 <smp_encrypt_info+0x5c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1d16c:	4628      	mov	r0, r5
   1d16e:	f7f8 fa0b 	bl	15588 <bt_addr_le_str>
   1d172:	466c      	mov	r4, sp
   1d174:	b08a      	sub	sp, #40	; 0x28
   1d176:	466a      	mov	r2, sp
   1d178:	4b0f      	ldr	r3, [pc, #60]	; (1d1b8 <smp_encrypt_info+0x74>)
   1d17a:	6153      	str	r3, [r2, #20]
   1d17c:	4b0f      	ldr	r3, [pc, #60]	; (1d1bc <smp_encrypt_info+0x78>)
   1d17e:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1d182:	f240 3301 	movw	r3, #769	; 0x301
   1d186:	8413      	strh	r3, [r2, #32]
   1d188:	4b0d      	ldr	r3, [pc, #52]	; (1d1c0 <smp_encrypt_info+0x7c>)
   1d18a:	480e      	ldr	r0, [pc, #56]	; (1d1c4 <smp_encrypt_info+0x80>)
   1d18c:	f842 3f10 	str.w	r3, [r2, #16]!
   1d190:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1d194:	f01a f885 	bl	372a2 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1d198:	2008      	movs	r0, #8
   1d19a:	46a5      	mov	sp, r4
}
   1d19c:	46bd      	mov	sp, r7
   1d19e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
   1d1a0:	2210      	movs	r2, #16
   1d1a2:	4631      	mov	r1, r6
   1d1a4:	301a      	adds	r0, #26
   1d1a6:	f018 f9c6 	bl	35536 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   1d1aa:	4620      	mov	r0, r4
   1d1ac:	2107      	movs	r1, #7
   1d1ae:	f01a f886 	bl	372be <atomic_set_bit>
	return 0;
   1d1b2:	2000      	movs	r0, #0
   1d1b4:	e7f2      	b.n	1d19c <smp_encrypt_info+0x58>
   1d1b6:	bf00      	nop
   1d1b8:	0003e089 	.word	0x0003e089
   1d1bc:	0003e611 	.word	0x0003e611
   1d1c0:	01000004 	.word	0x01000004
   1d1c4:	000395f8 	.word	0x000395f8

0001d1c8 <smp_send_pairing_confirm>:
{
   1d1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d1ca:	b083      	sub	sp, #12
	switch (smp->method) {
   1d1cc:	7a04      	ldrb	r4, [r0, #8]
   1d1ce:	2c02      	cmp	r4, #2
{
   1d1d0:	af02      	add	r7, sp, #8
   1d1d2:	4605      	mov	r5, r0
	switch (smp->method) {
   1d1d4:	d823      	bhi.n	1d21e <smp_send_pairing_confirm+0x56>
   1d1d6:	b144      	cbz	r4, 1d1ea <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1d1d8:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   1d1dc:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   1d1e0:	40dc      	lsrs	r4, r3
   1d1e2:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1d1e6:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1d1ea:	2103      	movs	r1, #3
   1d1ec:	4628      	mov	r0, r5
   1d1ee:	f01a f87a 	bl	372e6 <smp_create_pdu.constprop.0>
	if (!buf) {
   1d1f2:	4606      	mov	r6, r0
   1d1f4:	b330      	cbz	r0, 1d244 <smp_send_pairing_confirm+0x7c>
   1d1f6:	2110      	movs	r1, #16
   1d1f8:	300c      	adds	r0, #12
   1d1fa:	f01a fc39 	bl	37a70 <net_buf_simple_add>
	if (bt_crypto_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   1d1fe:	9000      	str	r0, [sp, #0]
   1d200:	4819      	ldr	r0, [pc, #100]	; (1d268 <smp_send_pairing_confirm+0xa0>)
   1d202:	4623      	mov	r3, r4
   1d204:	6800      	ldr	r0, [r0, #0]
   1d206:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1d20a:	f105 0157 	add.w	r1, r5, #87	; 0x57
   1d20e:	f01a fb51 	bl	378b4 <bt_crypto_f4>
   1d212:	4604      	mov	r4, r0
   1d214:	b1e0      	cbz	r0, 1d250 <smp_send_pairing_confirm+0x88>
		net_buf_unref(buf);
   1d216:	4630      	mov	r0, r6
   1d218:	f010 fb22 	bl	2d860 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1d21c:	e012      	b.n	1d244 <smp_send_pairing_confirm+0x7c>
	switch (smp->method) {
   1d21e:	2c03      	cmp	r4, #3
   1d220:	d014      	beq.n	1d24c <smp_send_pairing_confirm+0x84>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1d222:	466d      	mov	r5, sp
   1d224:	b088      	sub	sp, #32
   1d226:	aa02      	add	r2, sp, #8
   1d228:	4b10      	ldr	r3, [pc, #64]	; (1d26c <smp_send_pairing_confirm+0xa4>)
   1d22a:	6153      	str	r3, [r2, #20]
   1d22c:	4b10      	ldr	r3, [pc, #64]	; (1d270 <smp_send_pairing_confirm+0xa8>)
   1d22e:	4811      	ldr	r0, [pc, #68]	; (1d274 <smp_send_pairing_confirm+0xac>)
	switch (smp->method) {
   1d230:	e9c2 3406 	strd	r3, r4, [r2, #24]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1d234:	2304      	movs	r3, #4
   1d236:	f842 3f10 	str.w	r3, [r2, #16]!
   1d23a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d23e:	f01a f830 	bl	372a2 <z_log_msg_static_create.constprop.0>
   1d242:	46ad      	mov	sp, r5
		return BT_SMP_ERR_UNSPECIFIED;
   1d244:	2008      	movs	r0, #8
}
   1d246:	3704      	adds	r7, #4
   1d248:	46bd      	mov	sp, r7
   1d24a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (smp->method) {
   1d24c:	2400      	movs	r4, #0
   1d24e:	e7cc      	b.n	1d1ea <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
   1d250:	4602      	mov	r2, r0
   1d252:	4631      	mov	r1, r6
   1d254:	4628      	mov	r0, r5
   1d256:	f01a f807 	bl	37268 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1d25a:	1d28      	adds	r0, r5, #4
   1d25c:	4621      	mov	r1, r4
   1d25e:	f019 fff4 	bl	3724a <atomic_clear_bit>
	return 0;
   1d262:	4620      	mov	r0, r4
   1d264:	e7ef      	b.n	1d246 <smp_send_pairing_confirm+0x7e>
   1d266:	bf00      	nop
   1d268:	20001cac 	.word	0x20001cac
   1d26c:	0003e0a7 	.word	0x0003e0a7
   1d270:	0003e714 	.word	0x0003e714
   1d274:	000395f8 	.word	0x000395f8

0001d278 <smp_public_key_periph>:
{
   1d278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d27c:	af00      	add	r7, sp, #0
   1d27e:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d280:	f7ff fdbe 	bl	1ce00 <latch_auth_cb>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1d284:	1d26      	adds	r6, r4, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d286:	4680      	mov	r8, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1d288:	210e      	movs	r1, #14
   1d28a:	4630      	mov	r0, r6
   1d28c:	f019 ffb3 	bl	371f6 <atomic_test_bit>
   1d290:	b9c8      	cbnz	r0, 1d2c6 <smp_public_key_periph+0x4e>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   1d292:	4b54      	ldr	r3, [pc, #336]	; (1d3e4 <smp_public_key_periph+0x16c>)
   1d294:	2220      	movs	r2, #32
   1d296:	6819      	ldr	r1, [r3, #0]
   1d298:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1d29c:	f018 f93b 	bl	35516 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1d2a0:	b988      	cbnz	r0, 1d2c6 <smp_public_key_periph+0x4e>
		LOG_WRN("Remote public key rejected");
   1d2a2:	466c      	mov	r4, sp
   1d2a4:	b088      	sub	sp, #32
   1d2a6:	466a      	mov	r2, sp
   1d2a8:	4b4f      	ldr	r3, [pc, #316]	; (1d3e8 <smp_public_key_periph+0x170>)
   1d2aa:	6153      	str	r3, [r2, #20]
   1d2ac:	4b4f      	ldr	r3, [pc, #316]	; (1d3ec <smp_public_key_periph+0x174>)
   1d2ae:	6193      	str	r3, [r2, #24]
   1d2b0:	2303      	movs	r3, #3
   1d2b2:	f842 3f10 	str.w	r3, [r2, #16]!
   1d2b6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1d2ba:	484d      	ldr	r0, [pc, #308]	; (1d3f0 <smp_public_key_periph+0x178>)
   1d2bc:	f019 fff1 	bl	372a2 <z_log_msg_static_create.constprop.0>
   1d2c0:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1d2c2:	2008      	movs	r0, #8
   1d2c4:	e02f      	b.n	1d326 <smp_public_key_periph+0xae>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1d2c6:	210c      	movs	r1, #12
   1d2c8:	4620      	mov	r0, r4
   1d2ca:	f01a f80c 	bl	372e6 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1d2ce:	4605      	mov	r5, r0
   1d2d0:	2800      	cmp	r0, #0
   1d2d2:	d0f6      	beq.n	1d2c2 <smp_public_key_periph+0x4a>
   1d2d4:	2140      	movs	r1, #64	; 0x40
   1d2d6:	300c      	adds	r0, #12
   1d2d8:	f01a fbca 	bl	37a70 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   1d2dc:	f8df a104 	ldr.w	sl, [pc, #260]	; 1d3e4 <smp_public_key_periph+0x16c>
   1d2e0:	2220      	movs	r2, #32
   1d2e2:	f8da 1000 	ldr.w	r1, [sl]
   1d2e6:	4681      	mov	r9, r0
   1d2e8:	f018 f925 	bl	35536 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   1d2ec:	f8da 1000 	ldr.w	r1, [sl]
   1d2f0:	2220      	movs	r2, #32
   1d2f2:	4411      	add	r1, r2
   1d2f4:	eb09 0002 	add.w	r0, r9, r2
   1d2f8:	f018 f91d 	bl	35536 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   1d2fc:	2200      	movs	r2, #0
   1d2fe:	4629      	mov	r1, r5
   1d300:	4620      	mov	r0, r4
   1d302:	f019 ffb1 	bl	37268 <smp_send.constprop.0>
	switch (smp->method) {
   1d306:	7a23      	ldrb	r3, [r4, #8]
   1d308:	2b05      	cmp	r3, #5
   1d30a:	d85a      	bhi.n	1d3c2 <smp_public_key_periph+0x14a>
   1d30c:	e8df f003 	tbb	[pc, r3]
   1d310:	030e3a03 	.word	0x030e3a03
   1d314:	5659      	.short	0x5659
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1d316:	2104      	movs	r1, #4
   1d318:	4620      	mov	r0, r4
   1d31a:	f019 ffd0 	bl	372be <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   1d31e:	f7ff ff53 	bl	1d1c8 <smp_send_pairing_confirm>
		if (err) {
   1d322:	2800      	cmp	r0, #0
   1d324:	d03e      	beq.n	1d3a4 <smp_public_key_periph+0x12c>
}
   1d326:	46bd      	mov	sp, r7
   1d328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d32c:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1d32e:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d332:	f7ff fd65 	bl	1ce00 <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1d336:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d338:	4605      	mov	r5, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1d33a:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1d33e:	f004 ff0b 	bl	22158 <bt_rand>
   1d342:	2800      	cmp	r0, #0
   1d344:	d1bd      	bne.n	1d2c2 <smp_public_key_periph+0x4a>
		smp->passkey %= 1000000;
   1d346:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1d34a:	4a2a      	ldr	r2, [pc, #168]	; (1d3f4 <smp_public_key_periph+0x17c>)
   1d34c:	fbb3 f1f2 	udiv	r1, r3, r2
   1d350:	fb02 3311 	mls	r3, r2, r1, r3
   1d354:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	smp->passkey_round = 0U;
   1d358:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1d35c:	b155      	cbz	r5, 1d374 <smp_public_key_periph+0xfc>
   1d35e:	682b      	ldr	r3, [r5, #0]
   1d360:	b143      	cbz	r3, 1d374 <smp_public_key_periph+0xfc>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1d362:	210b      	movs	r1, #11
   1d364:	4630      	mov	r0, r6
   1d366:	f019 ffaa 	bl	372be <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   1d36a:	682b      	ldr	r3, [r5, #0]
   1d36c:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1d370:	4640      	mov	r0, r8
   1d372:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1d374:	2103      	movs	r1, #3
   1d376:	4620      	mov	r0, r4
   1d378:	f019 ffa1 	bl	372be <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1d37c:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1d37e:	f019 ff9e 	bl	372be <atomic_set_bit>
		break;
   1d382:	e00f      	b.n	1d3a4 <smp_public_key_periph+0x12c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1d384:	4620      	mov	r0, r4
   1d386:	2103      	movs	r1, #3
   1d388:	f019 ff99 	bl	372be <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1d38c:	210e      	movs	r1, #14
   1d38e:	f019 ff96 	bl	372be <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1d392:	4630      	mov	r0, r6
   1d394:	210a      	movs	r1, #10
   1d396:	f019 ff92 	bl	372be <atomic_set_bit>
		smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   1d39a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1d39e:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1d3a2:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1d3a4:	4630      	mov	r0, r6
   1d3a6:	2107      	movs	r1, #7
   1d3a8:	f019 ff89 	bl	372be <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   1d3ac:	2008      	movs	r0, #8
   1d3ae:	f7ff fd19 	bl	1cde4 <smp_find>
   1d3b2:	b9a0      	cbnz	r0, 1d3de <smp_public_key_periph+0x166>
		return smp_dhkey_generate(smp);
   1d3b4:	4620      	mov	r0, r4
   1d3b6:	f7ff fe55 	bl	1d064 <smp_dhkey_generate>
   1d3ba:	e7b4      	b.n	1d326 <smp_public_key_periph+0xae>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1d3bc:	2104      	movs	r1, #4
   1d3be:	4620      	mov	r0, r4
   1d3c0:	e7dd      	b.n	1d37e <smp_public_key_periph+0x106>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1d3c2:	466c      	mov	r4, sp
   1d3c4:	b088      	sub	sp, #32
   1d3c6:	466a      	mov	r2, sp
   1d3c8:	490b      	ldr	r1, [pc, #44]	; (1d3f8 <smp_public_key_periph+0x180>)
   1d3ca:	6151      	str	r1, [r2, #20]
   1d3cc:	4907      	ldr	r1, [pc, #28]	; (1d3ec <smp_public_key_periph+0x174>)
	switch (smp->method) {
   1d3ce:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1d3d2:	2304      	movs	r3, #4
   1d3d4:	f842 3f10 	str.w	r3, [r2, #16]!
   1d3d8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d3dc:	e76d      	b.n	1d2ba <smp_public_key_periph+0x42>
	return 0;
   1d3de:	2000      	movs	r0, #0
   1d3e0:	e7a1      	b.n	1d326 <smp_public_key_periph+0xae>
   1d3e2:	bf00      	nop
   1d3e4:	20001cac 	.word	0x20001cac
   1d3e8:	0003e0c7 	.word	0x0003e0c7
   1d3ec:	0003e68e 	.word	0x0003e68e
   1d3f0:	000395f8 	.word	0x000395f8
   1d3f4:	000f4240 	.word	0x000f4240
   1d3f8:	0003e0a7 	.word	0x0003e0a7

0001d3fc <smp_public_key>:
{
   1d3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d3fe:	460c      	mov	r4, r1
   1d400:	af00      	add	r7, sp, #0
   1d402:	4605      	mov	r5, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d404:	f7ff fcfc 	bl	1ce00 <latch_auth_cb>
	struct bt_smp_public_key *req = (void *)buf->data;
   1d408:	68e6      	ldr	r6, [r4, #12]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1d40a:	f105 0457 	add.w	r4, r5, #87	; 0x57
   1d40e:	2220      	movs	r2, #32
   1d410:	4631      	mov	r1, r6
   1d412:	4620      	mov	r0, r4
   1d414:	f018 f88f 	bl	35536 <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   1d418:	2220      	movs	r2, #32
   1d41a:	18b1      	adds	r1, r6, r2
   1d41c:	f105 0077 	add.w	r0, r5, #119	; 0x77
   1d420:	f018 f889 	bl	35536 <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   1d424:	4620      	mov	r0, r4
   1d426:	f7fb fb15 	bl	18a54 <bt_pub_key_is_debug>
   1d42a:	b948      	cbnz	r0, 1d440 <smp_public_key+0x44>
	if (!sc_public_key) {
   1d42c:	4b1e      	ldr	r3, [pc, #120]	; (1d4a8 <smp_public_key+0xac>)
   1d42e:	681c      	ldr	r4, [r3, #0]
   1d430:	2c00      	cmp	r4, #0
   1d432:	d134      	bne.n	1d49e <smp_public_key+0xa2>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1d434:	1d28      	adds	r0, r5, #4
   1d436:	2106      	movs	r1, #6
   1d438:	f019 ff41 	bl	372be <atomic_set_bit>
	return 0;
   1d43c:	4620      	mov	r0, r4
		return 0;
   1d43e:	e02c      	b.n	1d49a <smp_public_key+0x9e>
		LOG_INF("Remote is using Debug Public key");
   1d440:	466c      	mov	r4, sp
   1d442:	b088      	sub	sp, #32
   1d444:	466a      	mov	r2, sp
   1d446:	4b19      	ldr	r3, [pc, #100]	; (1d4ac <smp_public_key+0xb0>)
   1d448:	6153      	str	r3, [r2, #20]
   1d44a:	4b19      	ldr	r3, [pc, #100]	; (1d4b0 <smp_public_key+0xb4>)
   1d44c:	6193      	str	r3, [r2, #24]
   1d44e:	2303      	movs	r3, #3
   1d450:	f842 3f10 	str.w	r3, [r2, #16]!
   1d454:	4817      	ldr	r0, [pc, #92]	; (1d4b4 <smp_public_key+0xb8>)
   1d456:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   1d45a:	f019 ff22 	bl	372a2 <z_log_msg_static_create.constprop.0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   1d45e:	210e      	movs	r1, #14
   1d460:	46a5      	mov	sp, r4
   1d462:	1d28      	adds	r0, r5, #4
   1d464:	f019 ff2b 	bl	372be <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   1d468:	f8d5 40ec 	ldr.w	r4, [r5, #236]	; 0xec
	if (!conn->le.keys) {
   1d46c:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1d470:	b933      	cbnz	r3, 1d480 <smp_public_key+0x84>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1d472:	7a20      	ldrb	r0, [r4, #8]
   1d474:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1d478:	f001 fc1c 	bl	1ecb4 <bt_keys_get_addr>
   1d47c:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	if (!conn->le.keys ||
   1d480:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1d484:	2b00      	cmp	r3, #0
   1d486:	d0d1      	beq.n	1d42c <smp_public_key+0x30>
   1d488:	89da      	ldrh	r2, [r3, #14]
   1d48a:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1d48e:	2a00      	cmp	r2, #0
   1d490:	d0cc      	beq.n	1d42c <smp_public_key+0x30>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   1d492:	7b5b      	ldrb	r3, [r3, #13]
   1d494:	079b      	lsls	r3, r3, #30
   1d496:	d4c9      	bmi.n	1d42c <smp_public_key+0x30>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1d498:	2003      	movs	r0, #3
}
   1d49a:	46bd      	mov	sp, r7
   1d49c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	err = smp_public_key_periph(smp);
   1d49e:	4628      	mov	r0, r5
   1d4a0:	f7ff feea 	bl	1d278 <smp_public_key_periph>
	if (err) {
   1d4a4:	e7f9      	b.n	1d49a <smp_public_key+0x9e>
   1d4a6:	bf00      	nop
   1d4a8:	20001cac 	.word	0x20001cac
   1d4ac:	0003e0e6 	.word	0x0003e0e6
   1d4b0:	0003e6a4 	.word	0x0003e6a4
   1d4b4:	000395f8 	.word	0x000395f8

0001d4b8 <smp_pairing_req>:
{
   1d4b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d4bc:	460d      	mov	r5, r1
   1d4be:	b083      	sub	sp, #12
   1d4c0:	af00      	add	r7, sp, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   1d4c2:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
{
   1d4c6:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d4c8:	f7ff fc9a 	bl	1ce00 <latch_auth_cb>
	struct bt_smp_pairing *req = (void *)buf->data;
   1d4cc:	f8d5 900c 	ldr.w	r9, [r5, #12]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1d4d0:	f899 3003 	ldrb.w	r3, [r9, #3]
   1d4d4:	3b07      	subs	r3, #7
   1d4d6:	2b09      	cmp	r3, #9
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d4d8:	4680      	mov	r8, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1d4da:	d904      	bls.n	1d4e6 <smp_pairing_req+0x2e>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1d4dc:	2006      	movs	r0, #6
}
   1d4de:	370c      	adds	r7, #12
   1d4e0:	46bd      	mov	sp, r7
   1d4e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   1d4e6:	f8d6 30b8 	ldr.w	r3, [r6, #184]	; 0xb8
   1d4ea:	b15b      	cbz	r3, 1d504 <smp_pairing_req+0x4c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1d4ec:	1d25      	adds	r5, r4, #4
   1d4ee:	210f      	movs	r1, #15
   1d4f0:	4628      	mov	r0, r5
   1d4f2:	f019 fe80 	bl	371f6 <atomic_test_bit>
   1d4f6:	b980      	cbnz	r0, 1d51a <smp_pairing_req+0x62>
		int ret = smp_init(smp);
   1d4f8:	4620      	mov	r0, r4
   1d4fa:	f7ff fd97 	bl	1d02c <smp_init>
		if (ret) {
   1d4fe:	b160      	cbz	r0, 1d51a <smp_pairing_req+0x62>
			return ret;
   1d500:	b2c0      	uxtb	r0, r0
   1d502:	e7ec      	b.n	1d4de <smp_pairing_req+0x26>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1d504:	7a30      	ldrb	r0, [r6, #8]
   1d506:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1d50a:	f001 fbd3 	bl	1ecb4 <bt_keys_get_addr>
   1d50e:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
		if (!conn->le.keys) {
   1d512:	2800      	cmp	r0, #0
   1d514:	d1ea      	bne.n	1d4ec <smp_pairing_req+0x34>
			return BT_SMP_ERR_UNSPECIFIED;
   1d516:	2008      	movs	r0, #8
   1d518:	e7e1      	b.n	1d4de <smp_pairing_req+0x26>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1d51a:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   1d51c:	2206      	movs	r2, #6
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1d51e:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   1d520:	4649      	mov	r1, r9
   1d522:	f104 000a 	add.w	r0, r4, #10
   1d526:	f018 f806 	bl	35536 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   1d52a:	2302      	movs	r3, #2
   1d52c:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(smp, req->auth_req);
   1d52e:	f899 1002 	ldrb.w	r1, [r9, #2]
   1d532:	4620      	mov	r0, r4
   1d534:	f7ff fca8 	bl	1ce88 <get_auth>
   1d538:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa(smp);
   1d53a:	4620      	mov	r0, r4
   1d53c:	f7ff fc7e 	bl	1ce3c <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1d540:	4ba9      	ldr	r3, [pc, #676]	; (1d7e8 <smp_pairing_req+0x330>)
	rsp->io_capability = get_io_capa(smp);
   1d542:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1d544:	781b      	ldrb	r3, [r3, #0]
   1d546:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1d548:	2310      	movs	r3, #16
   1d54a:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   1d54c:	f899 3004 	ldrb.w	r3, [r9, #4]
   1d550:	f003 0307 	and.w	r3, r3, #7
   1d554:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1d556:	f899 3005 	ldrb.w	r3, [r9, #5]
   1d55a:	f003 0307 	and.w	r3, r3, #7
   1d55e:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1d560:	7ce3      	ldrb	r3, [r4, #19]
   1d562:	071b      	lsls	r3, r3, #28
   1d564:	d50f      	bpl.n	1d586 <smp_pairing_req+0xce>
   1d566:	f899 3002 	ldrb.w	r3, [r9, #2]
   1d56a:	0718      	lsls	r0, r3, #28
   1d56c:	d50b      	bpl.n	1d586 <smp_pairing_req+0xce>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1d56e:	2105      	movs	r1, #5
   1d570:	4628      	mov	r0, r5
   1d572:	f019 fea4 	bl	372be <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   1d576:	7d63      	ldrb	r3, [r4, #21]
   1d578:	f003 0306 	and.w	r3, r3, #6
   1d57c:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   1d57e:	7da3      	ldrb	r3, [r4, #22]
   1d580:	f003 0306 	and.w	r3, r3, #6
   1d584:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1d586:	7ce3      	ldrb	r3, [r4, #19]
   1d588:	0699      	lsls	r1, r3, #26
   1d58a:	d507      	bpl.n	1d59c <smp_pairing_req+0xe4>
   1d58c:	f899 3002 	ldrb.w	r3, [r9, #2]
   1d590:	069a      	lsls	r2, r3, #26
   1d592:	d503      	bpl.n	1d59c <smp_pairing_req+0xe4>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   1d594:	2114      	movs	r1, #20
   1d596:	4628      	mov	r0, r5
   1d598:	f019 fe91 	bl	372be <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   1d59c:	7da3      	ldrb	r3, [r4, #22]
   1d59e:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   1d5a2:	7d63      	ldrb	r3, [r4, #21]
   1d5a4:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1d5a8:	7ce3      	ldrb	r3, [r4, #19]
   1d5aa:	07db      	lsls	r3, r3, #31
   1d5ac:	d507      	bpl.n	1d5be <smp_pairing_req+0x106>
   1d5ae:	f899 3002 	ldrb.w	r3, [r9, #2]
   1d5b2:	07d8      	lsls	r0, r3, #31
   1d5b4:	d503      	bpl.n	1d5be <smp_pairing_req+0x106>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   1d5b6:	210d      	movs	r1, #13
   1d5b8:	4628      	mov	r0, r5
   1d5ba:	f019 fe80 	bl	372be <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   1d5be:	2103      	movs	r1, #3
   1d5c0:	4628      	mov	r0, r5
   1d5c2:	f019 fe7c 	bl	372be <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d5c6:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   1d5c8:	f899 9000 	ldrb.w	r9, [r9]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d5cc:	f019 fe13 	bl	371f6 <atomic_test_bit>
   1d5d0:	bb40      	cbnz	r0, 1d624 <smp_pairing_req+0x16c>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1d5d2:	f1b9 0f04 	cmp.w	r9, #4
   1d5d6:	d845      	bhi.n	1d664 <smp_pairing_req+0x1ac>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1d5d8:	7ae3      	ldrb	r3, [r4, #11]
   1d5da:	7ca2      	ldrb	r2, [r4, #18]
   1d5dc:	4013      	ands	r3, r2
   1d5de:	07d9      	lsls	r1, r3, #31
   1d5e0:	d43e      	bmi.n	1d660 <smp_pairing_req+0x1a8>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1d5e2:	7b21      	ldrb	r1, [r4, #12]
   1d5e4:	7ce3      	ldrb	r3, [r4, #19]
   1d5e6:	4319      	orrs	r1, r3
   1d5e8:	f011 0104 	ands.w	r1, r1, #4
   1d5ec:	d011      	beq.n	1d612 <smp_pairing_req+0x15a>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   1d5ee:	4620      	mov	r0, r4
   1d5f0:	f7ff fc24 	bl	1ce3c <get_io_capa>
   1d5f4:	4b7d      	ldr	r3, [pc, #500]	; (1d7ec <smp_pairing_req+0x334>)
   1d5f6:	eb09 0989 	add.w	r9, r9, r9, lsl #2
   1d5fa:	4499      	add	r9, r3
   1d5fc:	f819 1000 	ldrb.w	r1, [r9, r0]
	if (method == PASSKEY_ROLE) {
   1d600:	2904      	cmp	r1, #4
   1d602:	d106      	bne.n	1d612 <smp_pairing_req+0x15a>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1d604:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1d608:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_DISPLAY;
   1d60a:	2b00      	cmp	r3, #0
   1d60c:	bf14      	ite	ne
   1d60e:	2101      	movne	r1, #1
   1d610:	2102      	moveq	r1, #2
	smp->method = get_pair_method(smp, req->io_capability);
   1d612:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1d614:	f8d6 10b8 	ldr.w	r1, [r6, #184]	; 0xb8
   1d618:	4620      	mov	r0, r4
   1d61a:	f019 fdf5 	bl	37208 <update_keys_check>
   1d61e:	bb18      	cbnz	r0, 1d668 <smp_pairing_req+0x1b0>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1d620:	2003      	movs	r0, #3
   1d622:	e75c      	b.n	1d4de <smp_pairing_req+0x26>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1d624:	7b23      	ldrb	r3, [r4, #12]
   1d626:	7ce0      	ldrb	r0, [r4, #19]
   1d628:	ea03 0200 	and.w	r2, r3, r0
   1d62c:	0712      	lsls	r2, r2, #28
   1d62e:	d506      	bpl.n	1d63e <smp_pairing_req+0x186>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1d630:	7ae2      	ldrb	r2, [r4, #11]
   1d632:	f894 c012 	ldrb.w	ip, [r4, #18]
   1d636:	ea42 020c 	orr.w	r2, r2, ip
   1d63a:	07d2      	lsls	r2, r2, #31
   1d63c:	d4e9      	bmi.n	1d612 <smp_pairing_req+0x15a>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1d63e:	f1b9 0f04 	cmp.w	r9, #4
   1d642:	d80f      	bhi.n	1d664 <smp_pairing_req+0x1ac>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1d644:	ea43 0100 	orr.w	r1, r3, r0
   1d648:	f011 0104 	ands.w	r1, r1, #4
   1d64c:	d0e1      	beq.n	1d612 <smp_pairing_req+0x15a>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   1d64e:	4620      	mov	r0, r4
   1d650:	f7ff fbf4 	bl	1ce3c <get_io_capa>
   1d654:	4b66      	ldr	r3, [pc, #408]	; (1d7f0 <smp_pairing_req+0x338>)
   1d656:	eb09 0989 	add.w	r9, r9, r9, lsl #2
   1d65a:	444b      	add	r3, r9
   1d65c:	5c19      	ldrb	r1, [r3, r0]
   1d65e:	e7d8      	b.n	1d612 <smp_pairing_req+0x15a>
		return LEGACY_OOB;
   1d660:	2106      	movs	r1, #6
   1d662:	e7d6      	b.n	1d612 <smp_pairing_req+0x15a>
		return JUST_WORKS;
   1d664:	2100      	movs	r1, #0
   1d666:	e7d4      	b.n	1d612 <smp_pairing_req+0x15a>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1d668:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1d66c:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   1d66e:	2b03      	cmp	r3, #3
   1d670:	d043      	beq.n	1d6fa <smp_pairing_req+0x242>
   1d672:	d831      	bhi.n	1d6d8 <smp_pairing_req+0x220>
   1d674:	3b01      	subs	r3, #1
   1d676:	2b01      	cmp	r3, #1
   1d678:	f63f af4d 	bhi.w	1d516 <smp_pairing_req+0x5e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d67c:	2105      	movs	r1, #5
   1d67e:	4628      	mov	r0, r5
   1d680:	f019 fdb9 	bl	371f6 <atomic_test_bit>
   1d684:	2800      	cmp	r0, #0
   1d686:	f040 80c9 	bne.w	1d81c <smp_pairing_req+0x364>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d68a:	4620      	mov	r0, r4
   1d68c:	f7ff fbb8 	bl	1ce00 <latch_auth_cb>
   1d690:	4680      	mov	r8, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d692:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1d694:	f8d4 90ec 	ldr.w	r9, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d698:	f7ff fbb2 	bl	1ce00 <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1d69c:	f109 0188 	add.w	r1, r9, #136	; 0x88
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d6a0:	4606      	mov	r6, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1d6a2:	f899 0008 	ldrb.w	r0, [r9, #8]
   1d6a6:	f001 fbef 	bl	1ee88 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1d6aa:	7a23      	ldrb	r3, [r4, #8]
   1d6ac:	b348      	cbz	r0, 1d702 <smp_pairing_req+0x24a>
   1d6ae:	7b42      	ldrb	r2, [r0, #13]
   1d6b0:	07d2      	lsls	r2, r2, #31
   1d6b2:	d526      	bpl.n	1d702 <smp_pairing_req+0x24a>
   1d6b4:	bb2b      	cbnz	r3, 1d702 <smp_pairing_req+0x24a>
		LOG_ERR("JustWorks failed, authenticated keys present");
   1d6b6:	466c      	mov	r4, sp
   1d6b8:	b088      	sub	sp, #32
   1d6ba:	466a      	mov	r2, sp
   1d6bc:	4b4d      	ldr	r3, [pc, #308]	; (1d7f4 <smp_pairing_req+0x33c>)
   1d6be:	6153      	str	r3, [r2, #20]
   1d6c0:	4b4d      	ldr	r3, [pc, #308]	; (1d7f8 <smp_pairing_req+0x340>)
   1d6c2:	6193      	str	r3, [r2, #24]
   1d6c4:	2303      	movs	r3, #3
   1d6c6:	f842 3f10 	str.w	r3, [r2, #16]!
   1d6ca:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1d6ce:	484b      	ldr	r0, [pc, #300]	; (1d7fc <smp_pairing_req+0x344>)
   1d6d0:	f019 fde7 	bl	372a2 <z_log_msg_static_create.constprop.0>
   1d6d4:	46a5      	mov	sp, r4
	if (ret) {
   1d6d6:	e71e      	b.n	1d516 <smp_pairing_req+0x5e>
	switch (sec) {
   1d6d8:	2b04      	cmp	r3, #4
   1d6da:	f47f af1c 	bne.w	1d516 <smp_pairing_req+0x5e>
	return MIN(req->max_key_size, rsp->max_key_size);
   1d6de:	7d23      	ldrb	r3, [r4, #20]
   1d6e0:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   1d6e2:	4293      	cmp	r3, r2
   1d6e4:	bf28      	it	cs
   1d6e6:	4613      	movcs	r3, r2
   1d6e8:	2b10      	cmp	r3, #16
   1d6ea:	f47f aef7 	bne.w	1d4dc <smp_pairing_req+0x24>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d6ee:	2105      	movs	r1, #5
   1d6f0:	4628      	mov	r0, r5
   1d6f2:	f019 fd80 	bl	371f6 <atomic_test_bit>
   1d6f6:	2800      	cmp	r0, #0
   1d6f8:	d092      	beq.n	1d620 <smp_pairing_req+0x168>
		if (smp->method == JUST_WORKS) {
   1d6fa:	7a23      	ldrb	r3, [r4, #8]
   1d6fc:	2b00      	cmp	r3, #0
   1d6fe:	d1bd      	bne.n	1d67c <smp_pairing_req+0x1c4>
   1d700:	e78e      	b.n	1d620 <smp_pairing_req+0x168>
	switch (smp->method) {
   1d702:	2b06      	cmp	r3, #6
   1d704:	d85f      	bhi.n	1d7c6 <smp_pairing_req+0x30e>
   1d706:	e8df f003 	tbb	[pc, r3]
   1d70a:	5617      	.short	0x5617
   1d70c:	5e5e5e2f 	.word	0x5e5e5e2f
   1d710:	04          	.byte	0x04
   1d711:	00          	.byte	0x00
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1d712:	2e00      	cmp	r6, #0
   1d714:	d065      	beq.n	1d7e2 <smp_pairing_req+0x32a>
   1d716:	68f3      	ldr	r3, [r6, #12]
   1d718:	2b00      	cmp	r3, #0
   1d71a:	d062      	beq.n	1d7e2 <smp_pairing_req+0x32a>
			struct bt_conn_oob_info info = {
   1d71c:	2300      	movs	r3, #0
   1d71e:	80bb      	strh	r3, [r7, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1d720:	210a      	movs	r1, #10
   1d722:	4628      	mov	r0, r5
   1d724:	f019 fdcb 	bl	372be <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1d728:	68f3      	ldr	r3, [r6, #12]
   1d72a:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1d72e:	1d39      	adds	r1, r7, #4
   1d730:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1d732:	7a23      	ldrb	r3, [r4, #8]
   1d734:	2b00      	cmp	r3, #0
   1d736:	d167      	bne.n	1d808 <smp_pairing_req+0x350>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1d738:	210f      	movs	r1, #15
   1d73a:	4628      	mov	r0, r5
   1d73c:	f019 fd5b 	bl	371f6 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1d740:	2800      	cmp	r0, #0
   1d742:	d161      	bne.n	1d808 <smp_pairing_req+0x350>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1d744:	f1b8 0f00 	cmp.w	r8, #0
   1d748:	d05e      	beq.n	1d808 <smp_pairing_req+0x350>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1d74a:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1d74e:	2b00      	cmp	r3, #0
   1d750:	d05a      	beq.n	1d808 <smp_pairing_req+0x350>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1d752:	4628      	mov	r0, r5
   1d754:	210a      	movs	r1, #10
   1d756:	f019 fdb2 	bl	372be <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   1d75a:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1d75e:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		smp_auth_cb->pairing_confirm(conn);
   1d762:	4798      	blx	r3
		return 0;
   1d764:	2000      	movs	r0, #0
   1d766:	e6ba      	b.n	1d4de <smp_pairing_req+0x26>
			if (bt_rand(&passkey, sizeof(passkey))) {
   1d768:	2104      	movs	r1, #4
   1d76a:	1878      	adds	r0, r7, r1
   1d76c:	f004 fcf4 	bl	22158 <bt_rand>
   1d770:	2800      	cmp	r0, #0
   1d772:	f47f aed0 	bne.w	1d516 <smp_pairing_req+0x5e>
			passkey %= 1000000;
   1d776:	687b      	ldr	r3, [r7, #4]
   1d778:	4a21      	ldr	r2, [pc, #132]	; (1d800 <smp_pairing_req+0x348>)
   1d77a:	fbb3 f1f2 	udiv	r1, r3, r2
   1d77e:	fb02 3311 	mls	r3, r2, r1, r3
   1d782:	607b      	str	r3, [r7, #4]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1d784:	b14e      	cbz	r6, 1d79a <smp_pairing_req+0x2e2>
   1d786:	6833      	ldr	r3, [r6, #0]
   1d788:	b13b      	cbz	r3, 1d79a <smp_pairing_req+0x2e2>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1d78a:	210b      	movs	r1, #11
   1d78c:	4628      	mov	r0, r5
   1d78e:	f019 fd96 	bl	372be <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   1d792:	6833      	ldr	r3, [r6, #0]
   1d794:	6879      	ldr	r1, [r7, #4]
   1d796:	4648      	mov	r0, r9
   1d798:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1d79a:	687b      	ldr	r3, [r7, #4]
	dst[0] = val;
   1d79c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   1d7a0:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1d7a4:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1d7a6:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1d7aa:	0a1b      	lsrs	r3, r3, #8
   1d7ac:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   1d7b0:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   1d7b4:	e7bd      	b.n	1d732 <smp_pairing_req+0x27a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1d7b6:	4628      	mov	r0, r5
   1d7b8:	210a      	movs	r1, #10
   1d7ba:	f019 fd80 	bl	372be <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   1d7be:	6873      	ldr	r3, [r6, #4]
   1d7c0:	4648      	mov	r0, r9
   1d7c2:	4798      	blx	r3
	if (ret) {
   1d7c4:	e7b5      	b.n	1d732 <smp_pairing_req+0x27a>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1d7c6:	466c      	mov	r4, sp
   1d7c8:	b088      	sub	sp, #32
   1d7ca:	466a      	mov	r2, sp
   1d7cc:	490d      	ldr	r1, [pc, #52]	; (1d804 <smp_pairing_req+0x34c>)
   1d7ce:	6151      	str	r1, [r2, #20]
   1d7d0:	4909      	ldr	r1, [pc, #36]	; (1d7f8 <smp_pairing_req+0x340>)
	switch (smp->method) {
   1d7d2:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1d7d6:	2304      	movs	r3, #4
   1d7d8:	f842 3f10 	str.w	r3, [r2, #16]!
   1d7dc:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d7e0:	e775      	b.n	1d6ce <smp_pairing_req+0x216>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1d7e2:	2002      	movs	r0, #2
   1d7e4:	e67b      	b.n	1d4de <smp_pairing_req+0x26>
   1d7e6:	bf00      	nop
   1d7e8:	200033e7 	.word	0x200033e7
   1d7ec:	0003e77f 	.word	0x0003e77f
   1d7f0:	0003e766 	.word	0x0003e766
   1d7f4:	0003e10b 	.word	0x0003e10b
   1d7f8:	0003e59a 	.word	0x0003e59a
   1d7fc:	000395f8 	.word	0x000395f8
   1d800:	000f4240 	.word	0x000f4240
   1d804:	0003e0a7 	.word	0x0003e0a7
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1d808:	2103      	movs	r1, #3
   1d80a:	4620      	mov	r0, r4
   1d80c:	f019 fd57 	bl	372be <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1d810:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1d812:	f019 fd54 	bl	372be <atomic_set_bit>
	return send_pairing_rsp(smp);
   1d816:	f019 fd85 	bl	37324 <send_pairing_rsp>
   1d81a:	e660      	b.n	1d4de <smp_pairing_req+0x26>
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   1d81c:	7a23      	ldrb	r3, [r4, #8]
   1d81e:	b993      	cbnz	r3, 1d846 <smp_pairing_req+0x38e>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1d820:	210f      	movs	r1, #15
   1d822:	4628      	mov	r0, r5
   1d824:	f019 fce7 	bl	371f6 <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1d828:	b968      	cbnz	r0, 1d846 <smp_pairing_req+0x38e>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1d82a:	f1b8 0f00 	cmp.w	r8, #0
   1d82e:	d00a      	beq.n	1d846 <smp_pairing_req+0x38e>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1d830:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1d834:	b13b      	cbz	r3, 1d846 <smp_pairing_req+0x38e>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1d836:	4628      	mov	r0, r5
   1d838:	210a      	movs	r1, #10
   1d83a:	f019 fd40 	bl	372be <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   1d83e:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1d842:	4630      	mov	r0, r6
   1d844:	e78d      	b.n	1d762 <smp_pairing_req+0x2aa>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1d846:	210c      	movs	r1, #12
   1d848:	4620      	mov	r0, r4
   1d84a:	e7e2      	b.n	1d812 <smp_pairing_req+0x35a>

0001d84c <compute_and_check_and_send_periph_dhcheck>:
{
   1d84c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d850:	b091      	sub	sp, #68	; 0x44
   1d852:	4604      	mov	r4, r0
   1d854:	af04      	add	r7, sp, #16
	(void)memset(r, 0, sizeof(r));
   1d856:	2210      	movs	r2, #16
   1d858:	2100      	movs	r1, #0
   1d85a:	f107 0020 	add.w	r0, r7, #32
   1d85e:	f017 fe75 	bl	3554c <memset>
	switch (smp->method) {
   1d862:	7a23      	ldrb	r3, [r4, #8]
   1d864:	2b05      	cmp	r3, #5
   1d866:	d835      	bhi.n	1d8d4 <compute_and_check_and_send_periph_dhcheck+0x88>
   1d868:	e8df f003 	tbb	[pc, r3]
   1d86c:	0a03030a 	.word	0x0a03030a
   1d870:	2e34      	.short	0x2e34
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1d872:	2204      	movs	r2, #4
   1d874:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1d878:	f107 0020 	add.w	r0, r7, #32
   1d87c:	f017 fe5b 	bl	35536 <memcpy>
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   1d880:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   1d884:	f104 0247 	add.w	r2, r4, #71	; 0x47
   1d888:	f104 05c7 	add.w	r5, r4, #199	; 0xc7
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   1d88c:	e9cd 5201 	strd	r5, r2, [sp, #4]
   1d890:	f104 0637 	add.w	r6, r4, #55	; 0x37
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   1d894:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   1d898:	f104 0927 	add.w	r9, r4, #39	; 0x27
   1d89c:	9200      	str	r2, [sp, #0]
   1d89e:	338f      	adds	r3, #143	; 0x8f
   1d8a0:	464a      	mov	r2, r9
   1d8a2:	4631      	mov	r1, r6
   1d8a4:	f104 0097 	add.w	r0, r4, #151	; 0x97
   1d8a8:	f001 fc9c 	bl	1f1e4 <bt_crypto_f5>
   1d8ac:	b340      	cbz	r0, 1d900 <compute_and_check_and_send_periph_dhcheck+0xb4>
		LOG_ERR("Calculate LTK failed");
   1d8ae:	466c      	mov	r4, sp
   1d8b0:	b088      	sub	sp, #32
   1d8b2:	aa04      	add	r2, sp, #16
   1d8b4:	4b45      	ldr	r3, [pc, #276]	; (1d9cc <compute_and_check_and_send_periph_dhcheck+0x180>)
   1d8b6:	6153      	str	r3, [r2, #20]
   1d8b8:	4b45      	ldr	r3, [pc, #276]	; (1d9d0 <compute_and_check_and_send_periph_dhcheck+0x184>)
   1d8ba:	6193      	str	r3, [r2, #24]
   1d8bc:	2303      	movs	r3, #3
   1d8be:	f842 3f10 	str.w	r3, [r2, #16]!
   1d8c2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d8c6:	e012      	b.n	1d8ee <compute_and_check_and_send_periph_dhcheck+0xa2>
		if (smp->oobd_remote) {
   1d8c8:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   1d8cc:	2900      	cmp	r1, #0
   1d8ce:	d0d7      	beq.n	1d880 <compute_and_check_and_send_periph_dhcheck+0x34>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1d8d0:	2210      	movs	r2, #16
   1d8d2:	e7d1      	b.n	1d878 <compute_and_check_and_send_periph_dhcheck+0x2c>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1d8d4:	466c      	mov	r4, sp
   1d8d6:	b088      	sub	sp, #32
   1d8d8:	aa04      	add	r2, sp, #16
   1d8da:	493e      	ldr	r1, [pc, #248]	; (1d9d4 <compute_and_check_and_send_periph_dhcheck+0x188>)
   1d8dc:	6151      	str	r1, [r2, #20]
   1d8de:	493c      	ldr	r1, [pc, #240]	; (1d9d0 <compute_and_check_and_send_periph_dhcheck+0x184>)
	switch (smp->method) {
   1d8e0:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1d8e4:	2304      	movs	r3, #4
   1d8e6:	f842 3f10 	str.w	r3, [r2, #16]!
   1d8ea:	f44f 5101 	mov.w	r1, #8256	; 0x2040
		LOG_ERR("Calculate LTK failed");
   1d8ee:	483a      	ldr	r0, [pc, #232]	; (1d9d8 <compute_and_check_and_send_periph_dhcheck+0x18c>)
   1d8f0:	f019 fcd7 	bl	372a2 <z_log_msg_static_create.constprop.0>
   1d8f4:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1d8f6:	2008      	movs	r0, #8
}
   1d8f8:	3734      	adds	r7, #52	; 0x34
   1d8fa:	46bd      	mov	sp, r7
   1d8fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   1d900:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1d904:	f103 028f 	add.w	r2, r3, #143	; 0x8f
   1d908:	3396      	adds	r3, #150	; 0x96
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1d90a:	f107 0810 	add.w	r8, r7, #16
   1d90e:	9301      	str	r3, [sp, #4]
   1d910:	f104 0311 	add.w	r3, r4, #17
   1d914:	9202      	str	r2, [sp, #8]
   1d916:	9300      	str	r3, [sp, #0]
   1d918:	f8cd 800c 	str.w	r8, [sp, #12]
   1d91c:	f107 0320 	add.w	r3, r7, #32
   1d920:	4632      	mov	r2, r6
   1d922:	4649      	mov	r1, r9
   1d924:	4628      	mov	r0, r5
   1d926:	f019 ffea 	bl	378fe <bt_crypto_f6>
   1d92a:	b120      	cbz	r0, 1d936 <compute_and_check_and_send_periph_dhcheck+0xea>
		LOG_ERR("Calculate local DHKey check failed");
   1d92c:	466c      	mov	r4, sp
   1d92e:	b088      	sub	sp, #32
   1d930:	aa04      	add	r2, sp, #16
   1d932:	4b2a      	ldr	r3, [pc, #168]	; (1d9dc <compute_and_check_and_send_periph_dhcheck+0x190>)
   1d934:	e7bf      	b.n	1d8b6 <compute_and_check_and_send_periph_dhcheck+0x6a>
	if (smp->method == LE_SC_OOB) {
   1d936:	7a23      	ldrb	r3, [r4, #8]
   1d938:	2b05      	cmp	r3, #5
   1d93a:	d107      	bne.n	1d94c <compute_and_check_and_send_periph_dhcheck+0x100>
		if (smp->oobd_local) {
   1d93c:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1d940:	2210      	movs	r2, #16
   1d942:	f107 0020 	add.w	r0, r7, #32
		if (smp->oobd_local) {
   1d946:	b1c9      	cbz	r1, 1d97c <compute_and_check_and_send_periph_dhcheck+0x130>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1d948:	f017 fdf5 	bl	35536 <memcpy>
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   1d94c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1d950:	9703      	str	r7, [sp, #12]
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   1d952:	f103 0296 	add.w	r2, r3, #150	; 0x96
   1d956:	338f      	adds	r3, #143	; 0x8f
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1d958:	9301      	str	r3, [sp, #4]
   1d95a:	f104 030a 	add.w	r3, r4, #10
   1d95e:	9202      	str	r2, [sp, #8]
   1d960:	9300      	str	r3, [sp, #0]
   1d962:	464a      	mov	r2, r9
   1d964:	f107 0320 	add.w	r3, r7, #32
   1d968:	4631      	mov	r1, r6
   1d96a:	4628      	mov	r0, r5
   1d96c:	f019 ffc7 	bl	378fe <bt_crypto_f6>
   1d970:	b138      	cbz	r0, 1d982 <compute_and_check_and_send_periph_dhcheck+0x136>
		LOG_ERR("Calculate remote DHKey check failed");
   1d972:	466c      	mov	r4, sp
   1d974:	b088      	sub	sp, #32
   1d976:	aa04      	add	r2, sp, #16
   1d978:	4b19      	ldr	r3, [pc, #100]	; (1d9e0 <compute_and_check_and_send_periph_dhcheck+0x194>)
   1d97a:	e79c      	b.n	1d8b6 <compute_and_check_and_send_periph_dhcheck+0x6a>
			memset(r, 0, sizeof(r));
   1d97c:	f017 fde6 	bl	3554c <memset>
   1d980:	e7e4      	b.n	1d94c <compute_and_check_and_send_periph_dhcheck+0x100>
	if (memcmp(smp->e, re, 16)) {
   1d982:	2210      	movs	r2, #16
   1d984:	4639      	mov	r1, r7
   1d986:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   1d98a:	f017 fdc4 	bl	35516 <memcmp>
   1d98e:	4605      	mov	r5, r0
   1d990:	b9c8      	cbnz	r0, 1d9c6 <compute_and_check_and_send_periph_dhcheck+0x17a>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1d992:	210d      	movs	r1, #13
   1d994:	4620      	mov	r0, r4
   1d996:	f019 fca6 	bl	372e6 <smp_create_pdu.constprop.0>
	if (!buf) {
   1d99a:	4606      	mov	r6, r0
   1d99c:	2800      	cmp	r0, #0
   1d99e:	d0aa      	beq.n	1d8f6 <compute_and_check_and_send_periph_dhcheck+0xaa>
   1d9a0:	2110      	movs	r1, #16
   1d9a2:	300c      	adds	r0, #12
   1d9a4:	f01a f864 	bl	37a70 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   1d9a8:	2210      	movs	r2, #16
   1d9aa:	4641      	mov	r1, r8
   1d9ac:	f017 fdc3 	bl	35536 <memcpy>
	smp_send(smp, buf, NULL, NULL);
   1d9b0:	462a      	mov	r2, r5
   1d9b2:	4631      	mov	r1, r6
   1d9b4:	4620      	mov	r0, r4
   1d9b6:	f019 fc57 	bl	37268 <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1d9ba:	1d20      	adds	r0, r4, #4
   1d9bc:	2101      	movs	r1, #1
   1d9be:	f019 fc7e 	bl	372be <atomic_set_bit>
	return 0;
   1d9c2:	4628      	mov	r0, r5
   1d9c4:	e798      	b.n	1d8f8 <compute_and_check_and_send_periph_dhcheck+0xac>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1d9c6:	200b      	movs	r0, #11
   1d9c8:	e796      	b.n	1d8f8 <compute_and_check_and_send_periph_dhcheck+0xac>
   1d9ca:	bf00      	nop
   1d9cc:	0003e13c 	.word	0x0003e13c
   1d9d0:	0003e6e0 	.word	0x0003e6e0
   1d9d4:	0003e0a7 	.word	0x0003e0a7
   1d9d8:	000395f8 	.word	0x000395f8
   1d9dc:	0003e155 	.word	0x0003e155
   1d9e0:	0003e17c 	.word	0x0003e17c

0001d9e4 <bt_smp_connected>:
{
   1d9e4:	b538      	push	{r3, r4, r5, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   1d9e6:	490b      	ldr	r1, [pc, #44]	; (1da14 <bt_smp_connected+0x30>)
{
   1d9e8:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   1d9ea:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   1d9ee:	308c      	adds	r0, #140	; 0x8c
   1d9f0:	f01b f82d 	bl	38a4e <k_work_init_delayable>
	smp_reset(smp);
   1d9f4:	4628      	mov	r0, r5
   1d9f6:	f019 fd08 	bl	3740a <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d9fa:	f3bf 8f5b 	dmb	ish
   1d9fe:	4b06      	ldr	r3, [pc, #24]	; (1da18 <bt_smp_connected+0x34>)
   1da00:	34bc      	adds	r4, #188	; 0xbc
   1da02:	e854 2f00 	ldrex	r2, [r4]
   1da06:	e844 3100 	strex	r1, r3, [r4]
   1da0a:	2900      	cmp	r1, #0
   1da0c:	d1f9      	bne.n	1da02 <bt_smp_connected+0x1e>
   1da0e:	f3bf 8f5b 	dmb	ish
}
   1da12:	bd38      	pop	{r3, r4, r5, pc}
   1da14:	0001eaf5 	.word	0x0001eaf5
   1da18:	20001408 	.word	0x20001408

0001da1c <smp_pairing_confirm>:
{
   1da1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1da1e:	1d05      	adds	r5, r0, #4
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   1da20:	68ce      	ldr	r6, [r1, #12]
{
   1da22:	af00      	add	r7, sp, #0
   1da24:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1da26:	210b      	movs	r1, #11
   1da28:	4628      	mov	r0, r5
   1da2a:	f019 fc0e 	bl	3724a <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   1da2e:	4631      	mov	r1, r6
   1da30:	2210      	movs	r2, #16
   1da32:	f104 0017 	add.w	r0, r4, #23
   1da36:	f017 fd7e 	bl	35536 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1da3a:	2105      	movs	r1, #5
   1da3c:	4628      	mov	r0, r5
   1da3e:	f019 fbda 	bl	371f6 <atomic_test_bit>
   1da42:	b920      	cbnz	r0, 1da4e <smp_pairing_confirm+0x32>
		return legacy_pairing_confirm(smp);
   1da44:	4620      	mov	r0, r4
   1da46:	f019 fd5d 	bl	37504 <legacy_pairing_confirm>
}
   1da4a:	46bd      	mov	sp, r7
   1da4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (smp->method) {
   1da4e:	7a23      	ldrb	r3, [r4, #8]
   1da50:	2b01      	cmp	r3, #1
   1da52:	d008      	beq.n	1da66 <smp_pairing_confirm+0x4a>
   1da54:	2b02      	cmp	r3, #2
   1da56:	d112      	bne.n	1da7e <smp_pairing_confirm+0x62>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1da58:	2104      	movs	r1, #4
   1da5a:	4620      	mov	r0, r4
   1da5c:	f019 fc2f 	bl	372be <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   1da60:	f7ff fbb2 	bl	1d1c8 <smp_send_pairing_confirm>
   1da64:	e7f1      	b.n	1da4a <smp_pairing_confirm+0x2e>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1da66:	210a      	movs	r1, #10
   1da68:	4628      	mov	r0, r5
   1da6a:	f019 fbc4 	bl	371f6 <atomic_test_bit>
   1da6e:	2800      	cmp	r0, #0
   1da70:	d0f2      	beq.n	1da58 <smp_pairing_confirm+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1da72:	4628      	mov	r0, r5
   1da74:	2100      	movs	r1, #0
   1da76:	f019 fc22 	bl	372be <atomic_set_bit>
			return 0;
   1da7a:	2000      	movs	r0, #0
   1da7c:	e7e5      	b.n	1da4a <smp_pairing_confirm+0x2e>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1da7e:	466c      	mov	r4, sp
   1da80:	b088      	sub	sp, #32
   1da82:	466a      	mov	r2, sp
   1da84:	4907      	ldr	r1, [pc, #28]	; (1daa4 <smp_pairing_confirm+0x88>)
   1da86:	6151      	str	r1, [r2, #20]
   1da88:	4907      	ldr	r1, [pc, #28]	; (1daa8 <smp_pairing_confirm+0x8c>)
   1da8a:	4808      	ldr	r0, [pc, #32]	; (1daac <smp_pairing_confirm+0x90>)
	switch (smp->method) {
   1da8c:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1da90:	2304      	movs	r3, #4
   1da92:	f842 3f10 	str.w	r3, [r2, #16]!
   1da96:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1da9a:	f019 fc02 	bl	372a2 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1da9e:	2008      	movs	r0, #8
   1daa0:	46a5      	mov	sp, r4
   1daa2:	e7d2      	b.n	1da4a <smp_pairing_confirm+0x2e>
   1daa4:	0003e0a7 	.word	0x0003e0a7
   1daa8:	0003e5ac 	.word	0x0003e5ac
   1daac:	000395f8 	.word	0x000395f8

0001dab0 <smp_pairing_random>:
{
   1dab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dab4:	b088      	sub	sp, #32
   1dab6:	af04      	add	r7, sp, #16
   1dab8:	4604      	mov	r4, r0
   1daba:	460d      	mov	r5, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1dabc:	f7ff f9a0 	bl	1ce00 <latch_auth_cb>
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1dac0:	f104 0837 	add.w	r8, r4, #55	; 0x37
   1dac4:	68e9      	ldr	r1, [r5, #12]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1dac6:	4606      	mov	r6, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1dac8:	2210      	movs	r2, #16
   1daca:	4640      	mov	r0, r8
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1dacc:	1d25      	adds	r5, r4, #4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1dace:	f017 fd32 	bl	35536 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1dad2:	2105      	movs	r1, #5
   1dad4:	4628      	mov	r0, r5
   1dad6:	f019 fb8e 	bl	371f6 <atomic_test_bit>
   1dada:	2800      	cmp	r0, #0
   1dadc:	d14d      	bne.n	1db7a <smp_pairing_random+0xca>
	struct bt_conn *conn = smp->chan.chan.conn;
   1dade:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1dae2:	9702      	str	r7, [sp, #8]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1dae4:	f103 0296 	add.w	r2, r3, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1dae8:	f104 0647 	add.w	r6, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1daec:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1daee:	9201      	str	r2, [sp, #4]
   1daf0:	9300      	str	r3, [sp, #0]
   1daf2:	f104 0209 	add.w	r2, r4, #9
   1daf6:	f104 0310 	add.w	r3, r4, #16
   1dafa:	4641      	mov	r1, r8
   1dafc:	4630      	mov	r0, r6
   1dafe:	f019 fca7 	bl	37450 <smp_c1>
	if (err) {
   1db02:	bb40      	cbnz	r0, 1db56 <smp_pairing_random+0xa6>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1db04:	2210      	movs	r2, #16
   1db06:	4639      	mov	r1, r7
   1db08:	f104 0017 	add.w	r0, r4, #23
   1db0c:	f017 fd03 	bl	35516 <memcmp>
   1db10:	2800      	cmp	r0, #0
   1db12:	d176      	bne.n	1dc02 <smp_pairing_random+0x152>
	memcpy(out, r2, 8);
   1db14:	2208      	movs	r2, #8
   1db16:	4641      	mov	r1, r8
   1db18:	4638      	mov	r0, r7
   1db1a:	f017 fd0c 	bl	35536 <memcpy>
	memcpy(out + 8, r1, 8);
   1db1e:	2208      	movs	r2, #8
   1db20:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1db24:	18b8      	adds	r0, r7, r2
   1db26:	f017 fd06 	bl	35536 <memcpy>
	return bt_encrypt_le(k, out, out);
   1db2a:	463a      	mov	r2, r7
   1db2c:	4639      	mov	r1, r7
   1db2e:	4630      	mov	r0, r6
   1db30:	f004 fb14 	bl	2215c <bt_encrypt_le>
		if (err) {
   1db34:	b1a0      	cbz	r0, 1db60 <smp_pairing_random+0xb0>
			LOG_ERR("Calculate STK failed");
   1db36:	466c      	mov	r4, sp
   1db38:	b088      	sub	sp, #32
   1db3a:	aa04      	add	r2, sp, #16
   1db3c:	4b60      	ldr	r3, [pc, #384]	; (1dcc0 <smp_pairing_random+0x210>)
   1db3e:	6153      	str	r3, [r2, #20]
   1db40:	4b60      	ldr	r3, [pc, #384]	; (1dcc4 <smp_pairing_random+0x214>)
		LOG_ERR("Calculate confirm failed");
   1db42:	6193      	str	r3, [r2, #24]
   1db44:	2303      	movs	r3, #3
   1db46:	f842 3f10 	str.w	r3, [r2, #16]!
   1db4a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1db4e:	485e      	ldr	r0, [pc, #376]	; (1dcc8 <smp_pairing_random+0x218>)
   1db50:	f019 fba7 	bl	372a2 <z_log_msg_static_create.constprop.0>
   1db54:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1db56:	2008      	movs	r0, #8
}
   1db58:	3710      	adds	r7, #16
   1db5a:	46bd      	mov	sp, r7
   1db5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(smp->tk, tmp, sizeof(smp->tk));
   1db60:	4639      	mov	r1, r7
   1db62:	2210      	movs	r2, #16
   1db64:	4630      	mov	r0, r6
   1db66:	f017 fce6 	bl	35536 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1db6a:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1db6c:	4628      	mov	r0, r5
   1db6e:	f019 fba6 	bl	372be <atomic_set_bit>
	return smp_send_pairing_random(smp);
   1db72:	4620      	mov	r0, r4
   1db74:	f019 fbef 	bl	37356 <smp_send_pairing_random>
   1db78:	e7ee      	b.n	1db58 <smp_pairing_random+0xa8>
	switch (smp->method) {
   1db7a:	7a23      	ldrb	r3, [r4, #8]
   1db7c:	2b05      	cmp	r3, #5
   1db7e:	f200 808e 	bhi.w	1dc9e <smp_pairing_random+0x1ee>
   1db82:	e8df f003 	tbb	[pc, r3]
   1db86:	1e18      	.short	0x1e18
   1db88:	648c031e 	.word	0x648c031e
		if (bt_crypto_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd, &passkey)) {
   1db8c:	494f      	ldr	r1, [pc, #316]	; (1dccc <smp_pairing_random+0x21c>)
   1db8e:	9700      	str	r7, [sp, #0]
   1db90:	6809      	ldr	r1, [r1, #0]
   1db92:	f104 0327 	add.w	r3, r4, #39	; 0x27
   1db96:	4642      	mov	r2, r8
   1db98:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1db9c:	f001 fb8a 	bl	1f2b4 <bt_crypto_g2>
   1dba0:	2800      	cmp	r0, #0
   1dba2:	d1d8      	bne.n	1db56 <smp_pairing_random+0xa6>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1dba4:	210a      	movs	r1, #10
   1dba6:	4628      	mov	r0, r5
   1dba8:	f019 fb89 	bl	372be <atomic_set_bit>
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   1dbac:	68b3      	ldr	r3, [r6, #8]
   1dbae:	6839      	ldr	r1, [r7, #0]
   1dbb0:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1dbb4:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1dbb6:	210d      	movs	r1, #13
   1dbb8:	4620      	mov	r0, r4
   1dbba:	f019 fb80 	bl	372be <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1dbbe:	2110      	movs	r1, #16
   1dbc0:	e7d4      	b.n	1db6c <smp_pairing_random+0xbc>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1dbc2:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   1dbc6:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1dbca:	4940      	ldr	r1, [pc, #256]	; (1dccc <smp_pairing_random+0x21c>)
   1dbcc:	9700      	str	r7, [sp, #0]
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1dbce:	40d3      	lsrs	r3, r2
   1dbd0:	f003 0301 	and.w	r3, r3, #1
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1dbd4:	6809      	ldr	r1, [r1, #0]
   1dbd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1dbda:	4642      	mov	r2, r8
   1dbdc:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1dbe0:	f019 fe68 	bl	378b4 <bt_crypto_f4>
   1dbe4:	b130      	cbz	r0, 1dbf4 <smp_pairing_random+0x144>
		LOG_ERR("Calculate confirm failed");
   1dbe6:	466c      	mov	r4, sp
   1dbe8:	b088      	sub	sp, #32
   1dbea:	aa04      	add	r2, sp, #16
   1dbec:	4b38      	ldr	r3, [pc, #224]	; (1dcd0 <smp_pairing_random+0x220>)
   1dbee:	6153      	str	r3, [r2, #20]
   1dbf0:	4b38      	ldr	r3, [pc, #224]	; (1dcd4 <smp_pairing_random+0x224>)
   1dbf2:	e7a6      	b.n	1db42 <smp_pairing_random+0x92>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1dbf4:	2210      	movs	r2, #16
   1dbf6:	4639      	mov	r1, r7
   1dbf8:	f104 0017 	add.w	r0, r4, #23
   1dbfc:	f017 fc8b 	bl	35516 <memcmp>
   1dc00:	b108      	cbz	r0, 1dc06 <smp_pairing_random+0x156>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1dc02:	2004      	movs	r0, #4
   1dc04:	e7a8      	b.n	1db58 <smp_pairing_random+0xa8>
		atomic_set_bit(smp->allowed_cmds,
   1dc06:	2103      	movs	r1, #3
   1dc08:	4620      	mov	r0, r4
   1dc0a:	f019 fb58 	bl	372be <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   1dc0e:	f019 fba2 	bl	37356 <smp_send_pairing_random>
		if (err) {
   1dc12:	2800      	cmp	r0, #0
   1dc14:	d1a0      	bne.n	1db58 <smp_pairing_random+0xa8>
		smp->passkey_round++;
   1dc16:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1dc1a:	3301      	adds	r3, #1
   1dc1c:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   1dc1e:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   1dc20:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   1dc24:	d109      	bne.n	1dc3a <smp_pairing_random+0x18a>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1dc26:	210d      	movs	r1, #13
   1dc28:	4620      	mov	r0, r4
   1dc2a:	f019 fb48 	bl	372be <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1dc2e:	2110      	movs	r1, #16
   1dc30:	4628      	mov	r0, r5
   1dc32:	f019 fb44 	bl	372be <atomic_set_bit>
			return 0;
   1dc36:	2000      	movs	r0, #0
   1dc38:	e78e      	b.n	1db58 <smp_pairing_random+0xa8>
		if (bt_rand(smp->prnd, 16)) {
   1dc3a:	2110      	movs	r1, #16
   1dc3c:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1dc40:	f004 fa8a 	bl	22158 <bt_rand>
   1dc44:	3800      	subs	r0, #0
   1dc46:	bf18      	it	ne
   1dc48:	2001      	movne	r0, #1
   1dc4a:	00c0      	lsls	r0, r0, #3
   1dc4c:	e784      	b.n	1db58 <smp_pairing_random+0xa8>
		if (bt_rand(smp->prnd, 16)) {
   1dc4e:	2110      	movs	r1, #16
   1dc50:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1dc54:	f004 fa80 	bl	22158 <bt_rand>
   1dc58:	2800      	cmp	r0, #0
   1dc5a:	f47f af7c 	bne.w	1db56 <smp_pairing_random+0xa6>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1dc5e:	b366      	cbz	r6, 1dcba <smp_pairing_random+0x20a>
   1dc60:	68f3      	ldr	r3, [r6, #12]
   1dc62:	b353      	cbz	r3, 1dcba <smp_pairing_random+0x20a>
			struct bt_conn_oob_info info = {
   1dc64:	4b1c      	ldr	r3, [pc, #112]	; (1dcd8 <smp_pairing_random+0x228>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1dc66:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   1dc68:	881b      	ldrh	r3, [r3, #0]
   1dc6a:	803b      	strh	r3, [r7, #0]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1dc6c:	7ca3      	ldrb	r3, [r4, #18]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1dc6e:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1dc70:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1dc74:	d411      	bmi.n	1dc9a <smp_pairing_random+0x1ea>
   1dc76:	2b00      	cmp	r3, #0
   1dc78:	bf14      	ite	ne
   1dc7a:	2301      	movne	r3, #1
   1dc7c:	2303      	moveq	r3, #3
	info->lesc.oob_config = oob_config;
   1dc7e:	707b      	strb	r3, [r7, #1]
			smp->oobd_local = NULL;
   1dc80:	2300      	movs	r3, #0
			smp->oobd_remote = NULL;
   1dc82:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   1dc86:	4628      	mov	r0, r5
   1dc88:	210c      	movs	r1, #12
   1dc8a:	f019 fb18 	bl	372be <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1dc8e:	68f3      	ldr	r3, [r6, #12]
   1dc90:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1dc94:	4639      	mov	r1, r7
   1dc96:	4798      	blx	r3
			return 0;
   1dc98:	e7cd      	b.n	1dc36 <smp_pairing_random+0x186>
		if (rsp_oob_present) {
   1dc9a:	005b      	lsls	r3, r3, #1
   1dc9c:	e7ef      	b.n	1dc7e <smp_pairing_random+0x1ce>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1dc9e:	466c      	mov	r4, sp
   1dca0:	b088      	sub	sp, #32
   1dca2:	aa04      	add	r2, sp, #16
   1dca4:	490d      	ldr	r1, [pc, #52]	; (1dcdc <smp_pairing_random+0x22c>)
   1dca6:	6151      	str	r1, [r2, #20]
   1dca8:	490d      	ldr	r1, [pc, #52]	; (1dce0 <smp_pairing_random+0x230>)
	switch (smp->method) {
   1dcaa:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1dcae:	2304      	movs	r3, #4
   1dcb0:	f842 3f10 	str.w	r3, [r2, #16]!
   1dcb4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1dcb8:	e749      	b.n	1db4e <smp_pairing_random+0x9e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1dcba:	2002      	movs	r0, #2
   1dcbc:	e74c      	b.n	1db58 <smp_pairing_random+0xa8>
   1dcbe:	bf00      	nop
   1dcc0:	0003e1a4 	.word	0x0003e1a4
   1dcc4:	0003e5d5 	.word	0x0003e5d5
   1dcc8:	000395f8 	.word	0x000395f8
   1dccc:	20001cac 	.word	0x20001cac
   1dcd0:	0003e1bd 	.word	0x0003e1bd
   1dcd4:	0003e5c0 	.word	0x0003e5c0
   1dcd8:	000397a4 	.word	0x000397a4
   1dcdc:	0003e0a7 	.word	0x0003e0a7
   1dce0:	0003e5eb 	.word	0x0003e5eb

0001dce4 <bt_smp_sign_verify>:
{
   1dce4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dce6:	b085      	sub	sp, #20
	return buf->data + buf->len;
   1dce8:	8a0b      	ldrh	r3, [r1, #16]
   1dcea:	460c      	mov	r4, r1
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   1dcec:	68c9      	ldr	r1, [r1, #12]
{
   1dcee:	4605      	mov	r5, r0
   1dcf0:	af00      	add	r7, sp, #0
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   1dcf2:	3b0c      	subs	r3, #12
   1dcf4:	4419      	add	r1, r3
   1dcf6:	220c      	movs	r2, #12
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
   1dcf8:	f105 0688 	add.w	r6, r5, #136	; 0x88
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   1dcfc:	1d38      	adds	r0, r7, #4
   1dcfe:	f017 fc1a 	bl	35536 <memcpy>
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
   1dd02:	7a29      	ldrb	r1, [r5, #8]
   1dd04:	4632      	mov	r2, r6
   1dd06:	2010      	movs	r0, #16
   1dd08:	f001 f858 	bl	1edbc <bt_keys_find>
	if (!keys) {
   1dd0c:	4605      	mov	r5, r0
   1dd0e:	b9d8      	cbnz	r0, 1dd48 <bt_smp_sign_verify+0x64>
		LOG_ERR("Unable to find Remote CSRK for %s", bt_addr_le_str(&conn->le.dst));
   1dd10:	4630      	mov	r0, r6
   1dd12:	f7f7 fc39 	bl	15588 <bt_addr_le_str>
   1dd16:	466c      	mov	r4, sp
   1dd18:	b08a      	sub	sp, #40	; 0x28
   1dd1a:	466a      	mov	r2, sp
   1dd1c:	4b34      	ldr	r3, [pc, #208]	; (1ddf0 <bt_smp_sign_verify+0x10c>)
   1dd1e:	6153      	str	r3, [r2, #20]
   1dd20:	4b34      	ldr	r3, [pc, #208]	; (1ddf4 <bt_smp_sign_verify+0x110>)
   1dd22:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1dd26:	f240 3301 	movw	r3, #769	; 0x301
   1dd2a:	8413      	strh	r3, [r2, #32]
   1dd2c:	4b32      	ldr	r3, [pc, #200]	; (1ddf8 <bt_smp_sign_verify+0x114>)
   1dd2e:	4833      	ldr	r0, [pc, #204]	; (1ddfc <bt_smp_sign_verify+0x118>)
   1dd30:	f842 3f10 	str.w	r3, [r2, #16]!
   1dd34:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1dd38:	f019 fab3 	bl	372a2 <z_log_msg_static_create.constprop.0>
		return -ENOENT;
   1dd3c:	f06f 0001 	mvn.w	r0, #1
   1dd40:	46a5      	mov	sp, r4
}
   1dd42:	3714      	adds	r7, #20
   1dd44:	46bd      	mov	sp, r7
   1dd46:	bdf0      	pop	{r4, r5, r6, r7, pc}
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
   1dd48:	6e43      	ldr	r3, [r0, #100]	; 0x64
   1dd4a:	603b      	str	r3, [r7, #0]
   1dd4c:	8a23      	ldrh	r3, [r4, #16]
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
   1dd4e:	68e0      	ldr	r0, [r4, #12]
   1dd50:	3b0c      	subs	r3, #12
   1dd52:	2204      	movs	r2, #4
   1dd54:	4639      	mov	r1, r7
   1dd56:	4418      	add	r0, r3
   1dd58:	f017 fbed 	bl	35536 <memcpy>
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
   1dd5c:	8a22      	ldrh	r2, [r4, #16]
   1dd5e:	68e1      	ldr	r1, [r4, #12]
   1dd60:	3a0c      	subs	r2, #12
   1dd62:	b292      	uxth	r2, r2
   1dd64:	f105 0054 	add.w	r0, r5, #84	; 0x54
   1dd68:	f7ff f8de 	bl	1cf28 <smp_sign_buf>
	if (err) {
   1dd6c:	b1c8      	cbz	r0, 1dda2 <bt_smp_sign_verify+0xbe>
		LOG_ERR("Unable to create signature for %s", bt_addr_le_str(&conn->le.dst));
   1dd6e:	4630      	mov	r0, r6
   1dd70:	f7f7 fc0a 	bl	15588 <bt_addr_le_str>
   1dd74:	466c      	mov	r4, sp
   1dd76:	b08a      	sub	sp, #40	; 0x28
   1dd78:	466a      	mov	r2, sp
   1dd7a:	4b21      	ldr	r3, [pc, #132]	; (1de00 <bt_smp_sign_verify+0x11c>)
   1dd7c:	6153      	str	r3, [r2, #20]
   1dd7e:	4b1d      	ldr	r3, [pc, #116]	; (1ddf4 <bt_smp_sign_verify+0x110>)
   1dd80:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1dd84:	f240 3301 	movw	r3, #769	; 0x301
   1dd88:	8413      	strh	r3, [r2, #32]
   1dd8a:	4b1b      	ldr	r3, [pc, #108]	; (1ddf8 <bt_smp_sign_verify+0x114>)
   1dd8c:	481b      	ldr	r0, [pc, #108]	; (1ddfc <bt_smp_sign_verify+0x118>)
   1dd8e:	f842 3f10 	str.w	r3, [r2, #16]!
   1dd92:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1dd96:	f019 fa84 	bl	372a2 <z_log_msg_static_create.constprop.0>
		return -EIO;
   1dd9a:	f06f 0004 	mvn.w	r0, #4
   1dd9e:	46a5      	mov	sp, r4
   1dda0:	e7cf      	b.n	1dd42 <bt_smp_sign_verify+0x5e>
   1dda2:	8a23      	ldrh	r3, [r4, #16]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
   1dda4:	68e1      	ldr	r1, [r4, #12]
   1dda6:	3b0c      	subs	r3, #12
   1dda8:	220c      	movs	r2, #12
   1ddaa:	4419      	add	r1, r3
   1ddac:	1d38      	adds	r0, r7, #4
   1ddae:	f017 fbb2 	bl	35516 <memcmp>
   1ddb2:	b1c8      	cbz	r0, 1dde8 <bt_smp_sign_verify+0x104>
		LOG_ERR("Unable to verify signature for %s", bt_addr_le_str(&conn->le.dst));
   1ddb4:	4630      	mov	r0, r6
   1ddb6:	f7f7 fbe7 	bl	15588 <bt_addr_le_str>
   1ddba:	466c      	mov	r4, sp
   1ddbc:	b08a      	sub	sp, #40	; 0x28
   1ddbe:	466a      	mov	r2, sp
   1ddc0:	4b10      	ldr	r3, [pc, #64]	; (1de04 <bt_smp_sign_verify+0x120>)
   1ddc2:	6153      	str	r3, [r2, #20]
   1ddc4:	4b0b      	ldr	r3, [pc, #44]	; (1ddf4 <bt_smp_sign_verify+0x110>)
   1ddc6:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1ddca:	f240 3301 	movw	r3, #769	; 0x301
   1ddce:	8413      	strh	r3, [r2, #32]
   1ddd0:	4b09      	ldr	r3, [pc, #36]	; (1ddf8 <bt_smp_sign_verify+0x114>)
   1ddd2:	480a      	ldr	r0, [pc, #40]	; (1ddfc <bt_smp_sign_verify+0x118>)
   1ddd4:	f842 3f10 	str.w	r3, [r2, #16]!
   1ddd8:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1dddc:	f019 fa61 	bl	372a2 <z_log_msg_static_create.constprop.0>
		return -EBADMSG;
   1dde0:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   1dde4:	46a5      	mov	sp, r4
   1dde6:	e7ac      	b.n	1dd42 <bt_smp_sign_verify+0x5e>
	keys->remote_csrk.cnt++;
   1dde8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1ddea:	3301      	adds	r3, #1
   1ddec:	666b      	str	r3, [r5, #100]	; 0x64
	return 0;
   1ddee:	e7a8      	b.n	1dd42 <bt_smp_sign_verify+0x5e>
   1ddf0:	0003e1da 	.word	0x0003e1da
   1ddf4:	0003e746 	.word	0x0003e746
   1ddf8:	01000004 	.word	0x01000004
   1ddfc:	000395f8 	.word	0x000395f8
   1de00:	0003e200 	.word	0x0003e200
   1de04:	0003e226 	.word	0x0003e226

0001de08 <bt_smp_sign>:
{
   1de08:	b5f0      	push	{r4, r5, r6, r7, lr}
   1de0a:	b083      	sub	sp, #12
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
   1de0c:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1de10:	af00      	add	r7, sp, #0
   1de12:	460d      	mov	r5, r1
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
   1de14:	4632      	mov	r2, r6
   1de16:	7a01      	ldrb	r1, [r0, #8]
   1de18:	2008      	movs	r0, #8
   1de1a:	f000 ffcf 	bl	1edbc <bt_keys_find>
	if (!keys) {
   1de1e:	4604      	mov	r4, r0
   1de20:	b9d8      	cbnz	r0, 1de5a <bt_smp_sign+0x52>
		LOG_ERR("Unable to find local CSRK for %s", bt_addr_le_str(&conn->le.dst));
   1de22:	4630      	mov	r0, r6
   1de24:	f7f7 fbb0 	bl	15588 <bt_addr_le_str>
   1de28:	466c      	mov	r4, sp
   1de2a:	b08a      	sub	sp, #40	; 0x28
   1de2c:	466a      	mov	r2, sp
   1de2e:	4b25      	ldr	r3, [pc, #148]	; (1dec4 <bt_smp_sign+0xbc>)
   1de30:	6153      	str	r3, [r2, #20]
   1de32:	4b25      	ldr	r3, [pc, #148]	; (1dec8 <bt_smp_sign+0xc0>)
   1de34:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1de38:	f240 3301 	movw	r3, #769	; 0x301
   1de3c:	8413      	strh	r3, [r2, #32]
   1de3e:	4b23      	ldr	r3, [pc, #140]	; (1decc <bt_smp_sign+0xc4>)
   1de40:	4823      	ldr	r0, [pc, #140]	; (1ded0 <bt_smp_sign+0xc8>)
   1de42:	f842 3f10 	str.w	r3, [r2, #16]!
   1de46:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1de4a:	f019 fa2a 	bl	372a2 <z_log_msg_static_create.constprop.0>
		return -ENOENT;
   1de4e:	f06f 0001 	mvn.w	r0, #1
   1de52:	46a5      	mov	sp, r4
}
   1de54:	370c      	adds	r7, #12
   1de56:	46bd      	mov	sp, r7
   1de58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   1de5a:	210c      	movs	r1, #12
   1de5c:	1868      	adds	r0, r5, r1
   1de5e:	f019 fe07 	bl	37a70 <net_buf_simple_add>
	cnt = sys_cpu_to_le32(keys->local_csrk.cnt);
   1de62:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1de64:	607b      	str	r3, [r7, #4]
	return buf->data + buf->len;
   1de66:	8a2b      	ldrh	r3, [r5, #16]
	memcpy(net_buf_tail(buf) - 12, &cnt, sizeof(cnt));
   1de68:	68e8      	ldr	r0, [r5, #12]
   1de6a:	2204      	movs	r2, #4
   1de6c:	3b0c      	subs	r3, #12
   1de6e:	18b9      	adds	r1, r7, r2
   1de70:	4418      	add	r0, r3
   1de72:	f017 fb60 	bl	35536 <memcpy>
	err = smp_sign_buf(keys->local_csrk.val, buf->data, buf->len - 12);
   1de76:	8a2a      	ldrh	r2, [r5, #16]
   1de78:	68e9      	ldr	r1, [r5, #12]
   1de7a:	3a0c      	subs	r2, #12
   1de7c:	b292      	uxth	r2, r2
   1de7e:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1de82:	f7ff f851 	bl	1cf28 <smp_sign_buf>
	if (err) {
   1de86:	b1c8      	cbz	r0, 1debc <bt_smp_sign+0xb4>
		LOG_ERR("Unable to create signature for %s", bt_addr_le_str(&conn->le.dst));
   1de88:	4630      	mov	r0, r6
   1de8a:	f7f7 fb7d 	bl	15588 <bt_addr_le_str>
   1de8e:	466c      	mov	r4, sp
   1de90:	b08a      	sub	sp, #40	; 0x28
   1de92:	466a      	mov	r2, sp
   1de94:	4b0f      	ldr	r3, [pc, #60]	; (1ded4 <bt_smp_sign+0xcc>)
   1de96:	6153      	str	r3, [r2, #20]
   1de98:	4b0b      	ldr	r3, [pc, #44]	; (1dec8 <bt_smp_sign+0xc0>)
   1de9a:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1de9e:	f240 3301 	movw	r3, #769	; 0x301
   1dea2:	8413      	strh	r3, [r2, #32]
   1dea4:	4b09      	ldr	r3, [pc, #36]	; (1decc <bt_smp_sign+0xc4>)
   1dea6:	480a      	ldr	r0, [pc, #40]	; (1ded0 <bt_smp_sign+0xc8>)
   1dea8:	f842 3f10 	str.w	r3, [r2, #16]!
   1deac:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1deb0:	f019 f9f7 	bl	372a2 <z_log_msg_static_create.constprop.0>
		return -EIO;
   1deb4:	f06f 0004 	mvn.w	r0, #4
   1deb8:	46a5      	mov	sp, r4
   1deba:	e7cb      	b.n	1de54 <bt_smp_sign+0x4c>
	keys->local_csrk.cnt++;
   1debc:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1debe:	3301      	adds	r3, #1
   1dec0:	6523      	str	r3, [r4, #80]	; 0x50
	return 0;
   1dec2:	e7c7      	b.n	1de54 <bt_smp_sign+0x4c>
   1dec4:	0003e24c 	.word	0x0003e24c
   1dec8:	0003e72d 	.word	0x0003e72d
   1decc:	01000004 	.word	0x01000004
   1ded0:	000395f8 	.word	0x000395f8
   1ded4:	0003e200 	.word	0x0003e200

0001ded8 <bt_smp_start_security>:
{
   1ded8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   1dedc:	78c6      	ldrb	r6, [r0, #3]
   1dede:	2e01      	cmp	r6, #1
{
   1dee0:	4604      	mov	r4, r0
	switch (conn->role) {
   1dee2:	d005      	beq.n	1def0 <bt_smp_start_security+0x18>
		return -EINVAL;
   1dee4:	f06f 0415 	mvn.w	r4, #21
}
   1dee8:	4620      	mov	r0, r4
   1deea:	b003      	add	sp, #12
   1deec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   1def0:	f019 f9da 	bl	372a8 <smp_chan_get>
	if (!smp) {
   1def4:	4605      	mov	r5, r0
   1def6:	2800      	cmp	r0, #0
   1def8:	f000 80ac 	beq.w	1e054 <bt_smp_start_security+0x17c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1defc:	1d07      	adds	r7, r0, #4
   1defe:	2104      	movs	r1, #4
   1df00:	4638      	mov	r0, r7
   1df02:	f019 f978 	bl	371f6 <atomic_test_bit>
   1df06:	2800      	cmp	r0, #0
   1df08:	f040 80a7 	bne.w	1e05a <bt_smp_start_security+0x182>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1df0c:	2103      	movs	r1, #3
   1df0e:	4638      	mov	r0, r7
   1df10:	f019 f971 	bl	371f6 <atomic_test_bit>
   1df14:	b110      	cbz	r0, 1df1c <bt_smp_start_security+0x44>
		return -EBUSY;
   1df16:	f06f 040f 	mvn.w	r4, #15
   1df1a:	e7e5      	b.n	1dee8 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1df1c:	4631      	mov	r1, r6
   1df1e:	4638      	mov	r0, r7
   1df20:	f019 f969 	bl	371f6 <atomic_test_bit>
   1df24:	2800      	cmp	r0, #0
   1df26:	d1f6      	bne.n	1df16 <bt_smp_start_security+0x3e>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1df28:	4628      	mov	r0, r5
   1df2a:	f7fe ff69 	bl	1ce00 <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   1df2e:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   1df32:	7a9b      	ldrb	r3, [r3, #10]
   1df34:	2b03      	cmp	r3, #3
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1df36:	4606      	mov	r6, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   1df38:	d042      	beq.n	1dfc0 <bt_smp_start_security+0xe8>
   1df3a:	d832      	bhi.n	1dfa2 <bt_smp_start_security+0xca>
   1df3c:	3b01      	subs	r3, #1
   1df3e:	2b01      	cmp	r3, #1
   1df40:	d948      	bls.n	1dfd4 <bt_smp_start_security+0xfc>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   1df42:	210b      	movs	r1, #11
   1df44:	1d20      	adds	r0, r4, #4
   1df46:	f019 f956 	bl	371f6 <atomic_test_bit>
   1df4a:	2800      	cmp	r0, #0
   1df4c:	d1ca      	bne.n	1dee4 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   1df4e:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1df52:	b983      	cbnz	r3, 1df76 <bt_smp_start_security+0x9e>
						     conn->id, &conn->le.dst);
   1df54:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   1df58:	7a21      	ldrb	r1, [r4, #8]
   1df5a:	4632      	mov	r2, r6
   1df5c:	2020      	movs	r0, #32
   1df5e:	f000 ff2d 	bl	1edbc <bt_keys_find>
   1df62:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		if (!conn->le.keys) {
   1df66:	b930      	cbnz	r0, 1df76 <bt_smp_start_security+0x9e>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   1df68:	7a21      	ldrb	r1, [r4, #8]
   1df6a:	4632      	mov	r2, r6
   1df6c:	2004      	movs	r0, #4
   1df6e:	f000 ff25 	bl	1edbc <bt_keys_find>
   1df72:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	if (!conn->le.keys ||
   1df76:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1df7a:	2b00      	cmp	r3, #0
   1df7c:	d0b2      	beq.n	1dee4 <bt_smp_start_security+0xc>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   1df7e:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   1df80:	f012 0f24 	tst.w	r2, #36	; 0x24
   1df84:	d0ae      	beq.n	1dee4 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   1df86:	7aa1      	ldrb	r1, [r4, #10]
   1df88:	2902      	cmp	r1, #2
   1df8a:	d923      	bls.n	1dfd4 <bt_smp_start_security+0xfc>
   1df8c:	7b58      	ldrb	r0, [r3, #13]
   1df8e:	07c0      	lsls	r0, r0, #31
   1df90:	d5a8      	bpl.n	1dee4 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   1df92:	2903      	cmp	r1, #3
   1df94:	d01e      	beq.n	1dfd4 <bt_smp_start_security+0xfc>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   1df96:	0692      	lsls	r2, r2, #26
   1df98:	d5a4      	bpl.n	1dee4 <bt_smp_start_security+0xc>
   1df9a:	7b1b      	ldrb	r3, [r3, #12]
   1df9c:	2b10      	cmp	r3, #16
   1df9e:	d1a1      	bne.n	1dee4 <bt_smp_start_security+0xc>
   1dfa0:	e018      	b.n	1dfd4 <bt_smp_start_security+0xfc>
	switch (smp->chan.chan.conn->required_sec_level) {
   1dfa2:	2b04      	cmp	r3, #4
   1dfa4:	d1cd      	bne.n	1df42 <bt_smp_start_security+0x6a>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1dfa6:	4628      	mov	r0, r5
   1dfa8:	f7fe ff48 	bl	1ce3c <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1dfac:	2803      	cmp	r0, #3
   1dfae:	d104      	bne.n	1dfba <bt_smp_start_security+0xe2>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1dfb0:	2e00      	cmp	r6, #0
   1dfb2:	d0c6      	beq.n	1df42 <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1dfb4:	68f3      	ldr	r3, [r6, #12]
   1dfb6:	2b00      	cmp	r3, #0
   1dfb8:	d0c3      	beq.n	1df42 <bt_smp_start_security+0x6a>
   1dfba:	4b29      	ldr	r3, [pc, #164]	; (1e060 <bt_smp_start_security+0x188>)
   1dfbc:	781b      	ldrb	r3, [r3, #0]
   1dfbe:	e007      	b.n	1dfd0 <bt_smp_start_security+0xf8>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1dfc0:	4628      	mov	r0, r5
   1dfc2:	f7fe ff3b 	bl	1ce3c <get_io_capa>
   1dfc6:	2803      	cmp	r0, #3
   1dfc8:	d104      	bne.n	1dfd4 <bt_smp_start_security+0xfc>
   1dfca:	2e00      	cmp	r6, #0
   1dfcc:	d0b9      	beq.n	1df42 <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   1dfce:	68f3      	ldr	r3, [r6, #12]
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1dfd0:	2b00      	cmp	r3, #0
   1dfd2:	d0b6      	beq.n	1df42 <bt_smp_start_security+0x6a>
	if (!conn->le.keys) {
   1dfd4:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1dfd8:	b13b      	cbz	r3, 1dfea <bt_smp_start_security+0x112>
	if (smp_init(smp) != 0) {
   1dfda:	4628      	mov	r0, r5
   1dfdc:	f7ff f826 	bl	1d02c <smp_init>
   1dfe0:	4680      	mov	r8, r0
   1dfe2:	b170      	cbz	r0, 1e002 <bt_smp_start_security+0x12a>
		return -ENOBUFS;
   1dfe4:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1dfe8:	e77e      	b.n	1dee8 <bt_smp_start_security+0x10>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1dfea:	7a20      	ldrb	r0, [r4, #8]
   1dfec:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1dff0:	f000 fe60 	bl	1ecb4 <bt_keys_get_addr>
   1dff4:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		if (!conn->le.keys) {
   1dff8:	2800      	cmp	r0, #0
   1dffa:	d1ee      	bne.n	1dfda <bt_smp_start_security+0x102>
			return -ENOMEM;
   1dffc:	f06f 040b 	mvn.w	r4, #11
   1e000:	e772      	b.n	1dee8 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   1e002:	210b      	movs	r1, #11
   1e004:	4628      	mov	r0, r5
   1e006:	f019 f96e 	bl	372e6 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1e00a:	4606      	mov	r6, r0
   1e00c:	2800      	cmp	r0, #0
   1e00e:	d0e9      	beq.n	1dfe4 <bt_smp_start_security+0x10c>
	return net_buf_simple_add(&buf->b, len);
   1e010:	2101      	movs	r1, #1
   1e012:	300c      	adds	r0, #12
   1e014:	f019 fd2c 	bl	37a70 <net_buf_simple_add>
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   1e018:	2109      	movs	r1, #9
   1e01a:	4681      	mov	r9, r0
   1e01c:	4628      	mov	r0, r5
   1e01e:	f7fe ff33 	bl	1ce88 <get_auth>
   1e022:	4643      	mov	r3, r8
   1e024:	f889 0000 	strb.w	r0, [r9]
   1e028:	4632      	mov	r2, r6
   1e02a:	4620      	mov	r0, r4
   1e02c:	f8cd 8000 	str.w	r8, [sp]
   1e030:	2106      	movs	r1, #6
   1e032:	f018 f8c6 	bl	361c2 <bt_l2cap_send_cb>
	if (err) {
   1e036:	4604      	mov	r4, r0
   1e038:	b118      	cbz	r0, 1e042 <bt_smp_start_security+0x16a>
		net_buf_unref(req_buf);
   1e03a:	4630      	mov	r0, r6
   1e03c:	f00f fc10 	bl	2d860 <net_buf_unref>
		return err;
   1e040:	e752      	b.n	1dee8 <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1e042:	4638      	mov	r0, r7
   1e044:	210f      	movs	r1, #15
   1e046:	f019 f93a 	bl	372be <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1e04a:	2101      	movs	r1, #1
   1e04c:	4628      	mov	r0, r5
   1e04e:	f019 f936 	bl	372be <atomic_set_bit>
	return 0;
   1e052:	e749      	b.n	1dee8 <bt_smp_start_security+0x10>
		return -ENOTCONN;
   1e054:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   1e058:	e746      	b.n	1dee8 <bt_smp_start_security+0x10>
		return -EIO;
   1e05a:	f06f 0404 	mvn.w	r4, #4
   1e05e:	e743      	b.n	1dee8 <bt_smp_start_security+0x10>
   1e060:	200033e6 	.word	0x200033e6

0001e064 <smp_pairing_complete>:
{
   1e064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e066:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1e068:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1e06c:	1d04      	adds	r4, r0, #4
	if (!status) {
   1e06e:	bb61      	cbnz	r1, 1e0ca <smp_pairing_complete+0x66>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1e070:	210d      	movs	r1, #13
   1e072:	4620      	mov	r0, r4
   1e074:	f019 f8bf 	bl	371f6 <atomic_test_bit>
		if (bond_flag) {
   1e078:	4607      	mov	r7, r0
   1e07a:	b118      	cbz	r0, 1e084 <smp_pairing_complete+0x20>
			bt_keys_store(conn->le.keys);
   1e07c:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
   1e080:	f001 f860 	bl	1f144 <bt_keys_store>
	return list->head;
   1e084:	4b36      	ldr	r3, [pc, #216]	; (1e160 <smp_pairing_complete+0xfc>)
   1e086:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1e088:	b19b      	cbz	r3, 1e0b2 <smp_pairing_complete+0x4e>
	return node->next;
   1e08a:	681c      	ldr	r4, [r3, #0]
   1e08c:	b104      	cbz	r4, 1e090 <smp_pairing_complete+0x2c>
   1e08e:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   1e090:	f853 3c0c 	ldr.w	r3, [r3, #-12]
   1e094:	b113      	cbz	r3, 1e09c <smp_pairing_complete+0x38>
				listener->pairing_complete(conn, bond_flag);
   1e096:	4639      	mov	r1, r7
   1e098:	4628      	mov	r0, r5
   1e09a:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1e09c:	b14c      	cbz	r4, 1e0b2 <smp_pairing_complete+0x4e>
   1e09e:	4623      	mov	r3, r4
   1e0a0:	68e4      	ldr	r4, [r4, #12]
   1e0a2:	681b      	ldr	r3, [r3, #0]
   1e0a4:	b11c      	cbz	r4, 1e0ae <smp_pairing_complete+0x4a>
   1e0a6:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   1e0a8:	2b00      	cmp	r3, #0
   1e0aa:	d1f4      	bne.n	1e096 <smp_pairing_complete+0x32>
   1e0ac:	e7f7      	b.n	1e09e <smp_pairing_complete+0x3a>
   1e0ae:	2b00      	cmp	r3, #0
   1e0b0:	d1f1      	bne.n	1e096 <smp_pairing_complete+0x32>
	smp_reset(smp);
   1e0b2:	4630      	mov	r0, r6
   1e0b4:	f019 f9a9 	bl	3740a <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   1e0b8:	7a6a      	ldrb	r2, [r5, #9]
   1e0ba:	7aab      	ldrb	r3, [r5, #10]
   1e0bc:	429a      	cmp	r2, r3
   1e0be:	d04d      	beq.n	1e15c <smp_pairing_complete+0xf8>
		bt_smp_start_security(conn);
   1e0c0:	4628      	mov	r0, r5
}
   1e0c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   1e0c6:	f7ff bf07 	b.w	1ded8 <bt_smp_start_security>
	switch (smp_err) {
   1e0ca:	3901      	subs	r1, #1
   1e0cc:	b2c9      	uxtb	r1, r1
   1e0ce:	290e      	cmp	r1, #14
   1e0d0:	bf9c      	itt	ls
   1e0d2:	4b24      	ldrls	r3, [pc, #144]	; (1e164 <smp_pairing_complete+0x100>)
   1e0d4:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
   1e0d6:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
	if (!status) {
   1e0da:	bf88      	it	hi
   1e0dc:	2709      	movhi	r7, #9
		if (conn->le.keys &&
   1e0de:	b143      	cbz	r3, 1e0f2 <smp_pairing_complete+0x8e>
   1e0e0:	7b1b      	ldrb	r3, [r3, #12]
   1e0e2:	bb2b      	cbnz	r3, 1e130 <smp_pairing_complete+0xcc>
			bt_keys_clear(conn->le.keys);
   1e0e4:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
   1e0e8:	f000 fef8 	bl	1eedc <bt_keys_clear>
			conn->le.keys = NULL;
   1e0ec:	2300      	movs	r3, #0
   1e0ee:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1e0f2:	2102      	movs	r1, #2
   1e0f4:	4620      	mov	r0, r4
   1e0f6:	f019 f87e 	bl	371f6 <atomic_test_bit>
   1e0fa:	b940      	cbnz	r0, 1e10e <smp_pairing_complete+0xaa>
	switch (err) {
   1e0fc:	2f07      	cmp	r7, #7
   1e0fe:	bf96      	itet	ls
   1e100:	4b19      	ldrls	r3, [pc, #100]	; (1e168 <smp_pairing_complete+0x104>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1e102:	211f      	movhi	r1, #31
   1e104:	5dd9      	ldrbls	r1, [r3, r7]
			bt_conn_security_changed(conn,
   1e106:	463a      	mov	r2, r7
   1e108:	4628      	mov	r0, r5
   1e10a:	f7fb fb03 	bl	19714 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1e10e:	2103      	movs	r1, #3
   1e110:	4620      	mov	r0, r4
   1e112:	f019 f870 	bl	371f6 <atomic_test_bit>
   1e116:	2800      	cmp	r0, #0
   1e118:	d0cb      	beq.n	1e0b2 <smp_pairing_complete+0x4e>
	return list->head;
   1e11a:	4b11      	ldr	r3, [pc, #68]	; (1e160 <smp_pairing_complete+0xfc>)
   1e11c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1e11e:	2b00      	cmp	r3, #0
   1e120:	d0c7      	beq.n	1e0b2 <smp_pairing_complete+0x4e>
	return node->next;
   1e122:	681c      	ldr	r4, [r3, #0]
   1e124:	b104      	cbz	r4, 1e128 <smp_pairing_complete+0xc4>
   1e126:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   1e128:	f853 3c08 	ldr.w	r3, [r3, #-8]
   1e12c:	b94b      	cbnz	r3, 1e142 <smp_pairing_complete+0xde>
   1e12e:	e00b      	b.n	1e148 <smp_pairing_complete+0xe4>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1e130:	2102      	movs	r1, #2
   1e132:	4620      	mov	r0, r4
   1e134:	f019 f85f 	bl	371f6 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1e138:	2800      	cmp	r0, #0
   1e13a:	d1d3      	bne.n	1e0e4 <smp_pairing_complete+0x80>
   1e13c:	e7d9      	b.n	1e0f2 <smp_pairing_complete+0x8e>
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1e13e:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   1e140:	b123      	cbz	r3, 1e14c <smp_pairing_complete+0xe8>
					listener->pairing_failed(conn, security_err);
   1e142:	4639      	mov	r1, r7
   1e144:	4628      	mov	r0, r5
   1e146:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1e148:	2c00      	cmp	r4, #0
   1e14a:	d0b2      	beq.n	1e0b2 <smp_pairing_complete+0x4e>
   1e14c:	4623      	mov	r3, r4
   1e14e:	68e4      	ldr	r4, [r4, #12]
   1e150:	685b      	ldr	r3, [r3, #4]
   1e152:	2c00      	cmp	r4, #0
   1e154:	d1f3      	bne.n	1e13e <smp_pairing_complete+0xda>
				if (listener->pairing_failed) {
   1e156:	2b00      	cmp	r3, #0
   1e158:	d1f3      	bne.n	1e142 <smp_pairing_complete+0xde>
   1e15a:	e7aa      	b.n	1e0b2 <smp_pairing_complete+0x4e>
}
   1e15c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e15e:	bf00      	nop
   1e160:	20001b70 	.word	0x20001b70
   1e164:	0003e53f 	.word	0x0003e53f
   1e168:	0003e52e 	.word	0x0003e52e

0001e16c <smp_error>:
{
   1e16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1e170:	1d03      	adds	r3, r0, #4
{
   1e172:	b082      	sub	sp, #8
   1e174:	4605      	mov	r5, r0
   1e176:	af02      	add	r7, sp, #8
   1e178:	4688      	mov	r8, r1
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1e17a:	4618      	mov	r0, r3
   1e17c:	2102      	movs	r1, #2
   1e17e:	f019 f83a 	bl	371f6 <atomic_test_bit>
				    !smp->local_dist && !smp->remote_dist);
   1e182:	4604      	mov	r4, r0
   1e184:	b120      	cbz	r0, 1e190 <smp_error+0x24>
   1e186:	f8b5 40e8 	ldrh.w	r4, [r5, #232]	; 0xe8
   1e18a:	fab4 f484 	clz	r4, r4
   1e18e:	0964      	lsrs	r4, r4, #5
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1e190:	2103      	movs	r1, #3
   1e192:	4618      	mov	r0, r3
   1e194:	f019 f82f 	bl	371f6 <atomic_test_bit>
   1e198:	b1e8      	cbz	r0, 1e1d6 <smp_error+0x6a>
		smp_pairing_complete(smp, reason);
   1e19a:	4641      	mov	r1, r8
   1e19c:	4628      	mov	r0, r5
   1e19e:	f7ff ff61 	bl	1e064 <smp_pairing_complete>
	if (remote_already_completed) {
   1e1a2:	b32c      	cbz	r4, 1e1f0 <smp_error+0x84>
		LOG_WRN("SMP does not allow a pairing failure at this point. Known issue. "
   1e1a4:	466c      	mov	r4, sp
   1e1a6:	b088      	sub	sp, #32
   1e1a8:	aa02      	add	r2, sp, #8
   1e1aa:	4b20      	ldr	r3, [pc, #128]	; (1e22c <smp_error+0xc0>)
   1e1ac:	6153      	str	r3, [r2, #20]
   1e1ae:	4b20      	ldr	r3, [pc, #128]	; (1e230 <smp_error+0xc4>)
   1e1b0:	6193      	str	r3, [r2, #24]
   1e1b2:	2303      	movs	r3, #3
   1e1b4:	481f      	ldr	r0, [pc, #124]	; (1e234 <smp_error+0xc8>)
   1e1b6:	f842 3f10 	str.w	r3, [r2, #16]!
   1e1ba:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1e1be:	f019 f870 	bl	372a2 <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(smp->chan.chan.conn, BT_HCI_ERR_AUTH_FAIL);
   1e1c2:	2105      	movs	r1, #5
   1e1c4:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
   1e1c8:	46a5      	mov	sp, r4
   1e1ca:	f017 fef1 	bl	35fb0 <bt_conn_disconnect>
		return 0;
   1e1ce:	2000      	movs	r0, #0
}
   1e1d0:	46bd      	mov	sp, r7
   1e1d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1e1d6:	2101      	movs	r1, #1
   1e1d8:	4618      	mov	r0, r3
   1e1da:	f019 f80c 	bl	371f6 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1e1de:	2800      	cmp	r0, #0
   1e1e0:	d1db      	bne.n	1e19a <smp_error+0x2e>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1e1e2:	210f      	movs	r1, #15
   1e1e4:	4618      	mov	r0, r3
   1e1e6:	f019 f806 	bl	371f6 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1e1ea:	2800      	cmp	r0, #0
   1e1ec:	d1d5      	bne.n	1e19a <smp_error+0x2e>
   1e1ee:	e7d8      	b.n	1e1a2 <smp_error+0x36>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   1e1f0:	2105      	movs	r1, #5
   1e1f2:	4628      	mov	r0, r5
   1e1f4:	f019 f877 	bl	372e6 <smp_create_pdu.constprop.0>
	if (!buf) {
   1e1f8:	4606      	mov	r6, r0
   1e1fa:	b198      	cbz	r0, 1e224 <smp_error+0xb8>
   1e1fc:	2101      	movs	r1, #1
   1e1fe:	300c      	adds	r0, #12
   1e200:	f019 fc36 	bl	37a70 <net_buf_simple_add>
	rsp->reason = reason;
   1e204:	f880 8000 	strb.w	r8, [r0]
   1e208:	9400      	str	r4, [sp, #0]
   1e20a:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
   1e20e:	4623      	mov	r3, r4
   1e210:	4632      	mov	r2, r6
   1e212:	2106      	movs	r1, #6
   1e214:	f017 ffd5 	bl	361c2 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   1e218:	2800      	cmp	r0, #0
   1e21a:	d0d8      	beq.n	1e1ce <smp_error+0x62>
		net_buf_unref(buf);
   1e21c:	4630      	mov	r0, r6
   1e21e:	f00f fb1f 	bl	2d860 <net_buf_unref>
   1e222:	e7d4      	b.n	1e1ce <smp_error+0x62>
		return -ENOBUFS;
   1e224:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e228:	e7d2      	b.n	1e1d0 <smp_error+0x64>
   1e22a:	bf00      	nop
   1e22c:	0003e271 	.word	0x0003e271
   1e230:	0003e70a 	.word	0x0003e70a
   1e234:	000395f8 	.word	0x000395f8

0001e238 <bt_smp_recv>:
{
   1e238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
   1e23c:	8a0b      	ldrh	r3, [r1, #16]
{
   1e23e:	af00      	add	r7, sp, #0
   1e240:	4680      	mov	r8, r0
   1e242:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1e244:	b99b      	cbnz	r3, 1e26e <bt_smp_recv+0x36>
		LOG_ERR("Too small SMP PDU received");
   1e246:	466c      	mov	r4, sp
   1e248:	b088      	sub	sp, #32
   1e24a:	466a      	mov	r2, sp
   1e24c:	4b46      	ldr	r3, [pc, #280]	; (1e368 <bt_smp_recv+0x130>)
   1e24e:	6153      	str	r3, [r2, #20]
   1e250:	4b46      	ldr	r3, [pc, #280]	; (1e36c <bt_smp_recv+0x134>)
   1e252:	6193      	str	r3, [r2, #24]
   1e254:	2303      	movs	r3, #3
   1e256:	f842 3f10 	str.w	r3, [r2, #16]!
   1e25a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		LOG_WRN("SMP command (code 0x%02x) received after timeout", hdr->code);
   1e25e:	4844      	ldr	r0, [pc, #272]	; (1e370 <bt_smp_recv+0x138>)
   1e260:	f019 f81f 	bl	372a2 <z_log_msg_static_create.constprop.0>
   1e264:	46a5      	mov	sp, r4
}
   1e266:	2000      	movs	r0, #0
   1e268:	46bd      	mov	sp, r7
   1e26a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1e26e:	2101      	movs	r1, #1
   1e270:	f105 000c 	add.w	r0, r5, #12
   1e274:	f019 fc23 	bl	37abe <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1e278:	2104      	movs	r1, #4
   1e27a:	4606      	mov	r6, r0
   1e27c:	f1a8 00e8 	sub.w	r0, r8, #232	; 0xe8
   1e280:	f018 ffb9 	bl	371f6 <atomic_test_bit>
   1e284:	f1a8 04ec 	sub.w	r4, r8, #236	; 0xec
   1e288:	7833      	ldrb	r3, [r6, #0]
   1e28a:	b160      	cbz	r0, 1e2a6 <bt_smp_recv+0x6e>
		LOG_WRN("SMP command (code 0x%02x) received after timeout", hdr->code);
   1e28c:	466c      	mov	r4, sp
   1e28e:	b088      	sub	sp, #32
   1e290:	466a      	mov	r2, sp
   1e292:	4838      	ldr	r0, [pc, #224]	; (1e374 <bt_smp_recv+0x13c>)
   1e294:	6150      	str	r0, [r2, #20]
   1e296:	4835      	ldr	r0, [pc, #212]	; (1e36c <bt_smp_recv+0x134>)
   1e298:	e9c2 0306 	strd	r0, r3, [r2, #24]
   1e29c:	f842 1f10 	str.w	r1, [r2, #16]!
   1e2a0:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1e2a4:	e7db      	b.n	1e25e <bt_smp_recv+0x26>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1e2a6:	2b0e      	cmp	r3, #14
   1e2a8:	d904      	bls.n	1e2b4 <bt_smp_recv+0x7c>
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   1e2aa:	466c      	mov	r4, sp
   1e2ac:	b088      	sub	sp, #32
   1e2ae:	466a      	mov	r2, sp
   1e2b0:	4831      	ldr	r0, [pc, #196]	; (1e378 <bt_smp_recv+0x140>)
   1e2b2:	e7ef      	b.n	1e294 <bt_smp_recv+0x5c>
	if (!handlers[hdr->code].func) {
   1e2b4:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1e37c <bt_smp_recv+0x144>
   1e2b8:	f858 2033 	ldr.w	r2, [r8, r3, lsl #3]
   1e2bc:	b9a2      	cbnz	r2, 1e2e8 <bt_smp_recv+0xb0>
		LOG_WRN("Unhandled SMP code 0x%02x", hdr->code);
   1e2be:	466d      	mov	r5, sp
   1e2c0:	b088      	sub	sp, #32
   1e2c2:	466a      	mov	r2, sp
   1e2c4:	482e      	ldr	r0, [pc, #184]	; (1e380 <bt_smp_recv+0x148>)
   1e2c6:	6150      	str	r0, [r2, #20]
   1e2c8:	4828      	ldr	r0, [pc, #160]	; (1e36c <bt_smp_recv+0x134>)
   1e2ca:	e9c2 0306 	strd	r0, r3, [r2, #24]
   1e2ce:	f842 1f10 	str.w	r1, [r2, #16]!
   1e2d2:	4827      	ldr	r0, [pc, #156]	; (1e370 <bt_smp_recv+0x138>)
   1e2d4:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1e2d8:	f018 ffe3 	bl	372a2 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1e2dc:	2107      	movs	r1, #7
   1e2de:	46ad      	mov	sp, r5
		smp_error(smp, err);
   1e2e0:	4620      	mov	r0, r4
   1e2e2:	f7ff ff43 	bl	1e16c <smp_error>
   1e2e6:	e7be      	b.n	1e266 <bt_smp_recv+0x2e>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1e2e8:	4619      	mov	r1, r3
   1e2ea:	4620      	mov	r0, r4
   1e2ec:	f019 f877 	bl	373de <atomic_test_and_clear_bit>
   1e2f0:	7833      	ldrb	r3, [r6, #0]
   1e2f2:	b9a8      	cbnz	r0, 1e320 <bt_smp_recv+0xe8>
		LOG_WRN("Unexpected SMP code 0x%02x", hdr->code);
   1e2f4:	466d      	mov	r5, sp
   1e2f6:	b088      	sub	sp, #32
   1e2f8:	466a      	mov	r2, sp
   1e2fa:	4922      	ldr	r1, [pc, #136]	; (1e384 <bt_smp_recv+0x14c>)
   1e2fc:	6151      	str	r1, [r2, #20]
   1e2fe:	491b      	ldr	r1, [pc, #108]	; (1e36c <bt_smp_recv+0x134>)
   1e300:	481b      	ldr	r0, [pc, #108]	; (1e370 <bt_smp_recv+0x138>)
   1e302:	e9c2 1306 	strd	r1, r3, [r2, #24]
   1e306:	2304      	movs	r3, #4
   1e308:	f842 3f10 	str.w	r3, [r2, #16]!
   1e30c:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1e310:	f018 ffc7 	bl	372a2 <z_log_msg_static_create.constprop.0>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   1e314:	7833      	ldrb	r3, [r6, #0]
   1e316:	2b05      	cmp	r3, #5
   1e318:	46ad      	mov	sp, r5
   1e31a:	d0a4      	beq.n	1e266 <bt_smp_recv+0x2e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1e31c:	2108      	movs	r1, #8
   1e31e:	e7df      	b.n	1e2e0 <bt_smp_recv+0xa8>
	if (buf->len != handlers[hdr->code].expect_len) {
   1e320:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   1e324:	8a29      	ldrh	r1, [r5, #16]
   1e326:	7912      	ldrb	r2, [r2, #4]
   1e328:	428a      	cmp	r2, r1
   1e32a:	d013      	beq.n	1e354 <bt_smp_recv+0x11c>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1e32c:	466d      	mov	r5, sp
   1e32e:	b08a      	sub	sp, #40	; 0x28
   1e330:	466a      	mov	r2, sp
   1e332:	4815      	ldr	r0, [pc, #84]	; (1e388 <bt_smp_recv+0x150>)
   1e334:	6150      	str	r0, [r2, #20]
   1e336:	480d      	ldr	r0, [pc, #52]	; (1e36c <bt_smp_recv+0x134>)
   1e338:	6213      	str	r3, [r2, #32]
   1e33a:	2305      	movs	r3, #5
   1e33c:	e9c2 0106 	strd	r0, r1, [r2, #24]
   1e340:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1e344:	f842 3f10 	str.w	r3, [r2, #16]!
   1e348:	4809      	ldr	r0, [pc, #36]	; (1e370 <bt_smp_recv+0x138>)
   1e34a:	f018 ffaa 	bl	372a2 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1e34e:	210a      	movs	r1, #10
   1e350:	46ad      	mov	sp, r5
   1e352:	e7c5      	b.n	1e2e0 <bt_smp_recv+0xa8>
	err = handlers[hdr->code].func(smp, buf);
   1e354:	4629      	mov	r1, r5
   1e356:	f858 3033 	ldr.w	r3, [r8, r3, lsl #3]
   1e35a:	4620      	mov	r0, r4
   1e35c:	4798      	blx	r3
	if (err) {
   1e35e:	4601      	mov	r1, r0
   1e360:	2800      	cmp	r0, #0
   1e362:	d080      	beq.n	1e266 <bt_smp_recv+0x2e>
   1e364:	e7bc      	b.n	1e2e0 <bt_smp_recv+0xa8>
   1e366:	bf00      	nop
   1e368:	0003e2cd 	.word	0x0003e2cd
   1e36c:	0003e6b3 	.word	0x0003e6b3
   1e370:	000395f8 	.word	0x000395f8
   1e374:	0003e2ec 	.word	0x0003e2ec
   1e378:	0003e321 	.word	0x0003e321
   1e37c:	00039ebc 	.word	0x00039ebc
   1e380:	0003e347 	.word	0x0003e347
   1e384:	0003e365 	.word	0x0003e365
   1e388:	0003da0b 	.word	0x0003da0b

0001e38c <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   1e38c:	4b0e      	ldr	r3, [pc, #56]	; (1e3c8 <bt_smp_pkey_ready+0x3c>)
{
   1e38e:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   1e390:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   1e392:	b918      	cbnz	r0, 1e39c <bt_smp_pkey_ready+0x10>
}
   1e394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e398:	f7fe bd94 	b.w	1cec4 <bt_smp_pkey_ready.part.0>
		err = smp_public_key_periph(smp);
   1e39c:	4c0b      	ldr	r4, [pc, #44]	; (1e3cc <bt_smp_pkey_ready+0x40>)
	z_impl_k_sem_give(sem);
   1e39e:	480c      	ldr	r0, [pc, #48]	; (1e3d0 <bt_smp_pkey_ready+0x44>)
   1e3a0:	f013 fb98 	bl	31ad4 <z_impl_k_sem_give>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e3a4:	f3bf 8f5b 	dmb	ish
   1e3a8:	f854 3904 	ldr.w	r3, [r4], #-4
   1e3ac:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1e3b0:	065b      	lsls	r3, r3, #25
   1e3b2:	d507      	bpl.n	1e3c4 <bt_smp_pkey_ready+0x38>
		err = smp_public_key_periph(smp);
   1e3b4:	4620      	mov	r0, r4
   1e3b6:	f7fe ff5f 	bl	1d278 <smp_public_key_periph>
		if (err) {
   1e3ba:	4601      	mov	r1, r0
   1e3bc:	b110      	cbz	r0, 1e3c4 <bt_smp_pkey_ready+0x38>
			smp_error(smp, err);
   1e3be:	4620      	mov	r0, r4
   1e3c0:	f7ff fed4 	bl	1e16c <smp_error>
}
   1e3c4:	bd10      	pop	{r4, pc}
   1e3c6:	bf00      	nop
   1e3c8:	20001cac 	.word	0x20001cac
   1e3cc:	2000140c 	.word	0x2000140c
   1e3d0:	20000ae0 	.word	0x20000ae0

0001e3d4 <smp_signing_info>:
{
   1e3d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e3d8:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   1e3da:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
{
   1e3de:	af00      	add	r7, sp, #0
   1e3e0:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1e3e2:	210d      	movs	r1, #13
   1e3e4:	3004      	adds	r0, #4
   1e3e6:	f018 ff06 	bl	371f6 <atomic_test_bit>
   1e3ea:	b348      	cbz	r0, 1e440 <smp_signing_info+0x6c>
					&conn->le.dst);
   1e3ec:	f106 0588 	add.w	r5, r6, #136	; 0x88
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
   1e3f0:	7a31      	ldrb	r1, [r6, #8]
		struct bt_smp_signing_info *req = (void *)buf->data;
   1e3f2:	f8d3 800c 	ldr.w	r8, [r3, #12]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
   1e3f6:	462a      	mov	r2, r5
   1e3f8:	2010      	movs	r0, #16
   1e3fa:	f019 fa11 	bl	37820 <bt_keys_get_type>
		if (!keys) {
   1e3fe:	b9d0      	cbnz	r0, 1e436 <smp_signing_info+0x62>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1e400:	4628      	mov	r0, r5
   1e402:	f7f7 f8c1 	bl	15588 <bt_addr_le_str>
   1e406:	466c      	mov	r4, sp
   1e408:	b08a      	sub	sp, #40	; 0x28
   1e40a:	466a      	mov	r2, sp
   1e40c:	4b14      	ldr	r3, [pc, #80]	; (1e460 <smp_signing_info+0x8c>)
   1e40e:	6153      	str	r3, [r2, #20]
   1e410:	4b14      	ldr	r3, [pc, #80]	; (1e464 <smp_signing_info+0x90>)
   1e412:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1e416:	f240 3301 	movw	r3, #769	; 0x301
   1e41a:	8413      	strh	r3, [r2, #32]
   1e41c:	4b12      	ldr	r3, [pc, #72]	; (1e468 <smp_signing_info+0x94>)
   1e41e:	4813      	ldr	r0, [pc, #76]	; (1e46c <smp_signing_info+0x98>)
   1e420:	f842 3f10 	str.w	r3, [r2, #16]!
   1e424:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1e428:	f018 ff3b 	bl	372a2 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1e42c:	2008      	movs	r0, #8
   1e42e:	46a5      	mov	sp, r4
}
   1e430:	46bd      	mov	sp, r7
   1e432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->remote_csrk.val, req->csrk,
   1e436:	2210      	movs	r2, #16
   1e438:	4641      	mov	r1, r8
   1e43a:	3054      	adds	r0, #84	; 0x54
   1e43c:	f017 f87b 	bl	35536 <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
   1e440:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1e444:	f023 0304 	bic.w	r3, r3, #4
   1e448:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if (!smp->local_dist && !smp->remote_dist) {
   1e44c:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   1e450:	b109      	cbz	r1, 1e456 <smp_signing_info+0x82>
	return 0;
   1e452:	2000      	movs	r0, #0
   1e454:	e7ec      	b.n	1e430 <smp_signing_info+0x5c>
		smp_pairing_complete(smp, 0);
   1e456:	4620      	mov	r0, r4
   1e458:	f7ff fe04 	bl	1e064 <smp_pairing_complete>
   1e45c:	e7f9      	b.n	1e452 <smp_signing_info+0x7e>
   1e45e:	bf00      	nop
   1e460:	0003e089 	.word	0x0003e089
   1e464:	0003e66a 	.word	0x0003e66a
   1e468:	01000004 	.word	0x01000004
   1e46c:	000395f8 	.word	0x000395f8

0001e470 <smp_ident_addr_info>:
{
   1e470:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1e474:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1e478:	f8d1 800c 	ldr.w	r8, [r1, #12]
	struct bt_conn *conn = smp->chan.chan.conn;
   1e47c:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1e480:	f023 0302 	bic.w	r3, r3, #2
   1e484:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1e488:	f898 3000 	ldrb.w	r3, [r8]
{
   1e48c:	af00      	add	r7, sp, #0
   1e48e:	4604      	mov	r4, r0
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1e490:	f105 0988 	add.w	r9, r5, #136	; 0x88
   1e494:	b3c3      	cbz	r3, 1e508 <smp_ident_addr_info+0x98>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1e496:	f898 3006 	ldrb.w	r3, [r8, #6]
   1e49a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1e49e:	2bc0      	cmp	r3, #192	; 0xc0
   1e4a0:	d032      	beq.n	1e508 <smp_ident_addr_info+0x98>
		LOG_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1e4a2:	4640      	mov	r0, r8
   1e4a4:	f7f7 f870 	bl	15588 <bt_addr_le_str>
   1e4a8:	466e      	mov	r6, sp
   1e4aa:	b08a      	sub	sp, #40	; 0x28
   1e4ac:	466c      	mov	r4, sp
   1e4ae:	f8df b178 	ldr.w	fp, [pc, #376]	; 1e628 <smp_ident_addr_info+0x1b8>
   1e4b2:	4b5e      	ldr	r3, [pc, #376]	; (1e62c <smp_ident_addr_info+0x1bc>)
   1e4b4:	f8df 8178 	ldr.w	r8, [pc, #376]	; 1e630 <smp_ident_addr_info+0x1c0>
   1e4b8:	6163      	str	r3, [r4, #20]
   1e4ba:	4625      	mov	r5, r4
   1e4bc:	f240 3a01 	movw	sl, #769	; 0x301
   1e4c0:	e9c4 b006 	strd	fp, r0, [r4, #24]
   1e4c4:	f8a4 a020 	strh.w	sl, [r4, #32]
   1e4c8:	f845 8f10 	str.w	r8, [r5, #16]!
   1e4cc:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1e4d0:	462a      	mov	r2, r5
   1e4d2:	4858      	ldr	r0, [pc, #352]	; (1e634 <smp_ident_addr_info+0x1c4>)
   1e4d4:	f018 fee5 	bl	372a2 <z_log_msg_static_create.constprop.0>
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1e4d8:	4648      	mov	r0, r9
   1e4da:	46b5      	mov	sp, r6
   1e4dc:	f7f7 f854 	bl	15588 <bt_addr_le_str>
   1e4e0:	46a5      	mov	sp, r4
   1e4e2:	4b55      	ldr	r3, [pc, #340]	; (1e638 <smp_ident_addr_info+0x1c8>)
   1e4e4:	61e0      	str	r0, [r4, #28]
   1e4e6:	e9c4 3b05 	strd	r3, fp, [r4, #20]
   1e4ea:	4852      	ldr	r0, [pc, #328]	; (1e634 <smp_ident_addr_info+0x1c4>)
   1e4ec:	f8a4 a020 	strh.w	sl, [r4, #32]
   1e4f0:	f8c4 8010 	str.w	r8, [r4, #16]
   1e4f4:	462a      	mov	r2, r5
   1e4f6:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1e4fa:	f018 fed2 	bl	372a2 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_INVALID_PARAMS;
   1e4fe:	200a      	movs	r0, #10
   1e500:	46b5      	mov	sp, r6
}
   1e502:	46bd      	mov	sp, r7
   1e504:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return memcmp(a, b, sizeof(*a));
   1e508:	2207      	movs	r2, #7
   1e50a:	4641      	mov	r1, r8
   1e50c:	4648      	mov	r0, r9
   1e50e:	f017 f802 	bl	35516 <memcmp>
	if (!bt_addr_le_eq(&conn->le.dst, &req->addr)) {
   1e512:	b168      	cbz	r0, 1e530 <smp_ident_addr_info+0xc0>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1e514:	7a28      	ldrb	r0, [r5, #8]
   1e516:	4641      	mov	r1, r8
   1e518:	f000 fcb6 	bl	1ee88 <bt_keys_find_addr>
		if (keys) {
   1e51c:	4606      	mov	r6, r0
   1e51e:	b138      	cbz	r0, 1e530 <smp_ident_addr_info+0xc0>
			if (!update_keys_check(smp, keys)) {
   1e520:	4601      	mov	r1, r0
   1e522:	4620      	mov	r0, r4
   1e524:	f018 fe70 	bl	37208 <update_keys_check>
   1e528:	b330      	cbz	r0, 1e578 <smp_ident_addr_info+0x108>
			bt_keys_clear(keys);
   1e52a:	4630      	mov	r0, r6
   1e52c:	f000 fcd6 	bl	1eedc <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1e530:	210d      	movs	r1, #13
   1e532:	1d20      	adds	r0, r4, #4
   1e534:	f018 fe5f 	bl	371f6 <atomic_test_bit>
   1e538:	2800      	cmp	r0, #0
   1e53a:	d064      	beq.n	1e606 <smp_ident_addr_info+0x196>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1e53c:	7a29      	ldrb	r1, [r5, #8]
   1e53e:	464a      	mov	r2, r9
   1e540:	2002      	movs	r0, #2
   1e542:	f019 f96d 	bl	37820 <bt_keys_get_type>
		if (!keys) {
   1e546:	4606      	mov	r6, r0
   1e548:	b9c0      	cbnz	r0, 1e57c <smp_ident_addr_info+0x10c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1e54a:	4648      	mov	r0, r9
   1e54c:	f7f7 f81c 	bl	15588 <bt_addr_le_str>
   1e550:	466c      	mov	r4, sp
   1e552:	b08a      	sub	sp, #40	; 0x28
   1e554:	466a      	mov	r2, sp
   1e556:	4b39      	ldr	r3, [pc, #228]	; (1e63c <smp_ident_addr_info+0x1cc>)
   1e558:	6153      	str	r3, [r2, #20]
   1e55a:	4b33      	ldr	r3, [pc, #204]	; (1e628 <smp_ident_addr_info+0x1b8>)
   1e55c:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1e560:	f240 3301 	movw	r3, #769	; 0x301
   1e564:	8413      	strh	r3, [r2, #32]
   1e566:	4b32      	ldr	r3, [pc, #200]	; (1e630 <smp_ident_addr_info+0x1c0>)
   1e568:	f842 3f10 	str.w	r3, [r2, #16]!
   1e56c:	4831      	ldr	r0, [pc, #196]	; (1e634 <smp_ident_addr_info+0x1c4>)
   1e56e:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1e572:	f018 fe96 	bl	372a2 <z_log_msg_static_create.constprop.0>
   1e576:	46a5      	mov	sp, r4
				return BT_SMP_ERR_UNSPECIFIED;
   1e578:	2008      	movs	r0, #8
   1e57a:	e7c2      	b.n	1e502 <smp_ident_addr_info+0x92>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1e57c:	78eb      	ldrb	r3, [r5, #3]
   1e57e:	2b00      	cmp	r3, #0
   1e580:	d13b      	bne.n	1e5fa <smp_ident_addr_info+0x18a>
			dst = &conn->le.resp_addr;
   1e582:	f105 0196 	add.w	r1, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1e586:	780b      	ldrb	r3, [r1, #0]
   1e588:	2b01      	cmp	r3, #1
   1e58a:	d120      	bne.n	1e5ce <smp_ident_addr_info+0x15e>
		if (bt_addr_le_is_rpa(dst)) {
   1e58c:	798b      	ldrb	r3, [r1, #6]
   1e58e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1e592:	2b40      	cmp	r3, #64	; 0x40
   1e594:	d11b      	bne.n	1e5ce <smp_ident_addr_info+0x15e>
	memcpy(dst, src, sizeof(*dst));
   1e596:	2206      	movs	r2, #6
   1e598:	3101      	adds	r1, #1
   1e59a:	f106 003a 	add.w	r0, r6, #58	; 0x3a
   1e59e:	f016 ffca 	bl	35536 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1e5a2:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
   1e5a6:	b193      	cbz	r3, 1e5ce <smp_ident_addr_info+0x15e>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1e5a8:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   1e5ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1e5b0:	2bc0      	cmp	r3, #192	; 0xc0
   1e5b2:	d00c      	beq.n	1e5ce <smp_ident_addr_info+0x15e>
	memcpy(dst, src, sizeof(*dst));
   1e5b4:	2207      	movs	r2, #7
   1e5b6:	4641      	mov	r1, r8
   1e5b8:	1c70      	adds	r0, r6, #1
   1e5ba:	f016 ffbc 	bl	35536 <memcpy>
   1e5be:	2207      	movs	r2, #7
   1e5c0:	4641      	mov	r1, r8
   1e5c2:	4648      	mov	r0, r9
   1e5c4:	f016 ffb7 	bl	35536 <memcpy>
				bt_conn_identity_resolved(conn);
   1e5c8:	4628      	mov	r0, r5
   1e5ca:	f7fb f875 	bl	196b8 <bt_conn_identity_resolved>
	conflict = bt_id_find_conflict(new_bond);
   1e5ce:	4630      	mov	r0, r6
   1e5d0:	f7f9 fc50 	bl	17e74 <bt_id_find_conflict>
	if (conflict) {
   1e5d4:	b1a0      	cbz	r0, 1e600 <smp_ident_addr_info+0x190>
		LOG_WRN("Refusing new pairing. The old bond must be unpaired first.");
   1e5d6:	466d      	mov	r5, sp
   1e5d8:	b088      	sub	sp, #32
   1e5da:	466a      	mov	r2, sp
   1e5dc:	4b18      	ldr	r3, [pc, #96]	; (1e640 <smp_ident_addr_info+0x1d0>)
   1e5de:	6153      	str	r3, [r2, #20]
   1e5e0:	2403      	movs	r4, #3
   1e5e2:	4b18      	ldr	r3, [pc, #96]	; (1e644 <smp_ident_addr_info+0x1d4>)
   1e5e4:	4813      	ldr	r0, [pc, #76]	; (1e634 <smp_ident_addr_info+0x1c4>)
   1e5e6:	6193      	str	r3, [r2, #24]
   1e5e8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1e5ec:	f842 4f10 	str.w	r4, [r2, #16]!
   1e5f0:	f018 fe57 	bl	372a2 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1e5f4:	4620      	mov	r0, r4
   1e5f6:	46ad      	mov	sp, r5
		if (err) {
   1e5f8:	e783      	b.n	1e502 <smp_ident_addr_info+0x92>
			dst = &conn->le.init_addr;
   1e5fa:	f105 018f 	add.w	r1, r5, #143	; 0x8f
   1e5fe:	e7c2      	b.n	1e586 <smp_ident_addr_info+0x116>
	bt_id_add(new_bond);
   1e600:	4630      	mov	r0, r6
   1e602:	f7f9 fc47 	bl	17e94 <bt_id_add>
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1e606:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1e60a:	075b      	lsls	r3, r3, #29
   1e60c:	d503      	bpl.n	1e616 <smp_ident_addr_info+0x1a6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1e60e:	210a      	movs	r1, #10
   1e610:	4620      	mov	r0, r4
   1e612:	f018 fe54 	bl	372be <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1e616:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   1e61a:	b109      	cbz	r1, 1e620 <smp_ident_addr_info+0x1b0>
	return 0;
   1e61c:	2000      	movs	r0, #0
   1e61e:	e770      	b.n	1e502 <smp_ident_addr_info+0x92>
		smp_pairing_complete(smp, 0);
   1e620:	4620      	mov	r0, r4
   1e622:	f7ff fd1f 	bl	1e064 <smp_pairing_complete>
   1e626:	e7f9      	b.n	1e61c <smp_ident_addr_info+0x1ac>
   1e628:	0003e656 	.word	0x0003e656
   1e62c:	0003e384 	.word	0x0003e384
   1e630:	01000004 	.word	0x01000004
   1e634:	000395f8 	.word	0x000395f8
   1e638:	0003e39c 	.word	0x0003e39c
   1e63c:	0003e089 	.word	0x0003e089
   1e640:	0003e3a8 	.word	0x0003e3a8
   1e644:	0003e643 	.word	0x0003e643

0001e648 <smp_central_ident>:
{
   1e648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e64c:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   1e64e:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
{
   1e652:	af00      	add	r7, sp, #0
   1e654:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1e656:	210d      	movs	r1, #13
   1e658:	3004      	adds	r0, #4
   1e65a:	f018 fdcc 	bl	371f6 <atomic_test_bit>
   1e65e:	b378      	cbz	r0, 1e6c0 <smp_central_ident+0x78>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1e660:	f105 0888 	add.w	r8, r5, #136	; 0x88
   1e664:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   1e666:	68de      	ldr	r6, [r3, #12]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1e668:	4642      	mov	r2, r8
   1e66a:	2004      	movs	r0, #4
   1e66c:	f019 f8d8 	bl	37820 <bt_keys_get_type>
		if (!keys) {
   1e670:	4605      	mov	r5, r0
   1e672:	b9d0      	cbnz	r0, 1e6aa <smp_central_ident+0x62>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1e674:	4640      	mov	r0, r8
   1e676:	f7f6 ff87 	bl	15588 <bt_addr_le_str>
   1e67a:	466c      	mov	r4, sp
   1e67c:	b08a      	sub	sp, #40	; 0x28
   1e67e:	466a      	mov	r2, sp
   1e680:	4b1c      	ldr	r3, [pc, #112]	; (1e6f4 <smp_central_ident+0xac>)
   1e682:	6153      	str	r3, [r2, #20]
   1e684:	4b1c      	ldr	r3, [pc, #112]	; (1e6f8 <smp_central_ident+0xb0>)
   1e686:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1e68a:	f240 3301 	movw	r3, #769	; 0x301
   1e68e:	8413      	strh	r3, [r2, #32]
   1e690:	4b1a      	ldr	r3, [pc, #104]	; (1e6fc <smp_central_ident+0xb4>)
   1e692:	481b      	ldr	r0, [pc, #108]	; (1e700 <smp_central_ident+0xb8>)
   1e694:	f842 3f10 	str.w	r3, [r2, #16]!
   1e698:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1e69c:	f018 fe01 	bl	372a2 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1e6a0:	2008      	movs	r0, #8
   1e6a2:	46a5      	mov	sp, r4
}
   1e6a4:	46bd      	mov	sp, r7
   1e6a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   1e6aa:	2202      	movs	r2, #2
   1e6ac:	4631      	mov	r1, r6
   1e6ae:	3018      	adds	r0, #24
   1e6b0:	f016 ff41 	bl	35536 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   1e6b4:	2208      	movs	r2, #8
   1e6b6:	1cb1      	adds	r1, r6, #2
   1e6b8:	f105 0010 	add.w	r0, r5, #16
   1e6bc:	f016 ff3b 	bl	35536 <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1e6c0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1e6c4:	f023 0201 	bic.w	r2, r3, #1
   1e6c8:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1e6cc:	079a      	lsls	r2, r3, #30
   1e6ce:	d508      	bpl.n	1e6e2 <smp_central_ident+0x9a>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1e6d0:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1e6d2:	4620      	mov	r0, r4
   1e6d4:	f018 fdf3 	bl	372be <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1e6d8:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   1e6dc:	b129      	cbz	r1, 1e6ea <smp_central_ident+0xa2>
	return 0;
   1e6de:	2000      	movs	r0, #0
   1e6e0:	e7e0      	b.n	1e6a4 <smp_central_ident+0x5c>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1e6e2:	075b      	lsls	r3, r3, #29
   1e6e4:	d5f8      	bpl.n	1e6d8 <smp_central_ident+0x90>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1e6e6:	210a      	movs	r1, #10
   1e6e8:	e7f3      	b.n	1e6d2 <smp_central_ident+0x8a>
		smp_pairing_complete(smp, 0);
   1e6ea:	4620      	mov	r0, r4
   1e6ec:	f7ff fcba 	bl	1e064 <smp_pairing_complete>
   1e6f0:	e7f5      	b.n	1e6de <smp_central_ident+0x96>
   1e6f2:	bf00      	nop
   1e6f4:	0003e089 	.word	0x0003e089
   1e6f8:	0003e622 	.word	0x0003e622
   1e6fc:	01000004 	.word	0x01000004
   1e700:	000395f8 	.word	0x000395f8

0001e704 <smp_pairing_failed>:
{
   1e704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e708:	460e      	mov	r6, r1
   1e70a:	af00      	add	r7, sp, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   1e70c:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
{
   1e710:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1e712:	f7fe fb75 	bl	1ce00 <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1e716:	68f6      	ldr	r6, [r6, #12]
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   1e718:	46e9      	mov	r9, sp
   1e71a:	b088      	sub	sp, #32
   1e71c:	7833      	ldrb	r3, [r6, #0]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1e71e:	4605      	mov	r5, r0
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   1e720:	466a      	mov	r2, sp
   1e722:	4915      	ldr	r1, [pc, #84]	; (1e778 <smp_pairing_failed+0x74>)
   1e724:	6151      	str	r1, [r2, #20]
   1e726:	4915      	ldr	r1, [pc, #84]	; (1e77c <smp_pairing_failed+0x78>)
   1e728:	4815      	ldr	r0, [pc, #84]	; (1e780 <smp_pairing_failed+0x7c>)
   1e72a:	e9c2 1306 	strd	r1, r3, [r2, #24]
   1e72e:	2304      	movs	r3, #4
   1e730:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1e734:	f842 3f10 	str.w	r3, [r2, #16]!
   1e738:	f018 fdb3 	bl	372a2 <z_log_msg_static_create.constprop.0>
   1e73c:	46cd      	mov	sp, r9
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1e73e:	f104 0904 	add.w	r9, r4, #4
   1e742:	210a      	movs	r1, #10
   1e744:	4648      	mov	r0, r9
   1e746:	f018 fe4a 	bl	373de <atomic_test_and_clear_bit>
   1e74a:	b140      	cbz	r0, 1e75e <smp_pairing_failed+0x5a>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1e74c:	b975      	cbnz	r5, 1e76c <smp_pairing_failed+0x68>
	smp_pairing_complete(smp, req->reason);
   1e74e:	4620      	mov	r0, r4
   1e750:	7831      	ldrb	r1, [r6, #0]
   1e752:	f7ff fc87 	bl	1e064 <smp_pairing_complete>
}
   1e756:	2000      	movs	r0, #0
   1e758:	46bd      	mov	sp, r7
   1e75a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   1e75e:	210b      	movs	r1, #11
   1e760:	4648      	mov	r0, r9
   1e762:	f018 fe3c 	bl	373de <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1e766:	2800      	cmp	r0, #0
   1e768:	d1f0      	bne.n	1e74c <smp_pairing_failed+0x48>
   1e76a:	e7f0      	b.n	1e74e <smp_pairing_failed+0x4a>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1e76c:	692b      	ldr	r3, [r5, #16]
   1e76e:	2b00      	cmp	r3, #0
   1e770:	d0ed      	beq.n	1e74e <smp_pairing_failed+0x4a>
			smp_auth_cb->cancel(conn);
   1e772:	4640      	mov	r0, r8
   1e774:	4798      	blx	r3
   1e776:	e7ea      	b.n	1e74e <smp_pairing_failed+0x4a>
   1e778:	0003e3e7 	.word	0x0003e3e7
   1e77c:	0003e5fe 	.word	0x0003e5fe
   1e780:	000395f8 	.word	0x000395f8

0001e784 <bt_smp_encrypt_change>:
{
   1e784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = chan->conn;
   1e788:	4604      	mov	r4, r0
{
   1e78a:	b08b      	sub	sp, #44	; 0x2c
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1e78c:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   1e790:	4605      	mov	r5, r0
   1e792:	af00      	add	r7, sp, #0
   1e794:	4688      	mov	r8, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1e796:	4630      	mov	r0, r6
   1e798:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   1e79a:	f854 99ec 	ldr.w	r9, [r4], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1e79e:	f018 fe1e 	bl	373de <atomic_test_and_clear_bit>
   1e7a2:	b328      	cbz	r0, 1e7f0 <bt_smp_encrypt_change+0x6c>
	if (hci_status) {
   1e7a4:	f1b8 0f00 	cmp.w	r8, #0
   1e7a8:	d017      	beq.n	1e7da <bt_smp_encrypt_change+0x56>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1e7aa:	2103      	movs	r1, #3
   1e7ac:	4630      	mov	r0, r6
   1e7ae:	f018 fd22 	bl	371f6 <atomic_test_bit>
   1e7b2:	b1e8      	cbz	r0, 1e7f0 <bt_smp_encrypt_change+0x6c>
			uint8_t smp_err = smp_err_get(
   1e7b4:	4640      	mov	r0, r8
   1e7b6:	f7f8 fc6d 	bl	17094 <bt_security_err_get>
	switch (auth_err) {
   1e7ba:	3801      	subs	r0, #1
   1e7bc:	b2c0      	uxtb	r0, r0
   1e7be:	2808      	cmp	r0, #8
   1e7c0:	bf9a      	itte	ls
   1e7c2:	4bbc      	ldrls	r3, [pc, #752]	; (1eab4 <bt_smp_encrypt_change+0x330>)
   1e7c4:	5c1d      	ldrbls	r5, [r3, r0]
			uint8_t smp_err = smp_err_get(
   1e7c6:	2500      	movhi	r5, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1e7c8:	2102      	movs	r1, #2
   1e7ca:	4630      	mov	r0, r6
   1e7cc:	f018 fd77 	bl	372be <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   1e7d0:	4629      	mov	r1, r5
		smp_pairing_complete(smp, 0);
   1e7d2:	4620      	mov	r0, r4
   1e7d4:	f7ff fc46 	bl	1e064 <smp_pairing_complete>
   1e7d8:	e00a      	b.n	1e7f0 <bt_smp_encrypt_change+0x6c>
	if (!conn->encrypt) {
   1e7da:	f899 300b 	ldrb.w	r3, [r9, #11]
   1e7de:	b13b      	cbz	r3, 1e7f0 <bt_smp_encrypt_change+0x6c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1e7e0:	2103      	movs	r1, #3
   1e7e2:	4630      	mov	r0, r6
   1e7e4:	f018 fd07 	bl	371f6 <atomic_test_bit>
   1e7e8:	b930      	cbnz	r0, 1e7f8 <bt_smp_encrypt_change+0x74>
		smp_reset(smp);
   1e7ea:	4620      	mov	r0, r4
   1e7ec:	f018 fe0d 	bl	3740a <smp_reset>
}
   1e7f0:	372c      	adds	r7, #44	; 0x2c
   1e7f2:	46bd      	mov	sp, r7
   1e7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1e7f8:	2105      	movs	r1, #5
   1e7fa:	4630      	mov	r0, r6
   1e7fc:	f018 fcfb 	bl	371f6 <atomic_test_bit>
   1e800:	b1b8      	cbz	r0, 1e832 <bt_smp_encrypt_change+0xae>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   1e802:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1e806:	071b      	lsls	r3, r3, #28
   1e808:	d507      	bpl.n	1e81a <bt_smp_encrypt_change+0x96>
   1e80a:	f815 3c03 	ldrb.w	r3, [r5, #-3]
   1e80e:	0718      	lsls	r0, r3, #28
   1e810:	d503      	bpl.n	1e81a <bt_smp_encrypt_change+0x96>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1e812:	2111      	movs	r1, #17
   1e814:	4630      	mov	r0, r6
   1e816:	f018 fd52 	bl	372be <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   1e81a:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1e81e:	f023 0308 	bic.w	r3, r3, #8
   1e822:	f805 3c04 	strb.w	r3, [r5, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   1e826:	f815 3c03 	ldrb.w	r3, [r5, #-3]
   1e82a:	f023 0308 	bic.w	r3, r3, #8
   1e82e:	f805 3c03 	strb.w	r3, [r5, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   1e832:	f815 3c03 	ldrb.w	r3, [r5, #-3]
   1e836:	07d9      	lsls	r1, r3, #31
   1e838:	d527      	bpl.n	1e88a <bt_smp_encrypt_change+0x106>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   1e83a:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1e83c:	4620      	mov	r0, r4
   1e83e:	f018 fd3e 	bl	372be <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1e842:	2102      	movs	r1, #2
   1e844:	4630      	mov	r0, r6
   1e846:	f018 fd3a 	bl	372be <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   1e84a:	f8d5 b000 	ldr.w	fp, [r5]
	struct bt_keys *keys = conn->le.keys;
   1e84e:	f8db a0b8 	ldr.w	sl, [fp, #184]	; 0xb8
	if (!keys) {
   1e852:	f1ba 0f00 	cmp.w	sl, #0
   1e856:	d120      	bne.n	1e89a <bt_smp_encrypt_change+0x116>
		LOG_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1e858:	f10b 0088 	add.w	r0, fp, #136	; 0x88
   1e85c:	f7f6 fe94 	bl	15588 <bt_addr_le_str>
   1e860:	466c      	mov	r4, sp
   1e862:	b08a      	sub	sp, #40	; 0x28
   1e864:	466a      	mov	r2, sp
   1e866:	4b94      	ldr	r3, [pc, #592]	; (1eab8 <bt_smp_encrypt_change+0x334>)
   1e868:	6153      	str	r3, [r2, #20]
   1e86a:	4b94      	ldr	r3, [pc, #592]	; (1eabc <bt_smp_encrypt_change+0x338>)
   1e86c:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1e870:	f240 3301 	movw	r3, #769	; 0x301
   1e874:	8413      	strh	r3, [r2, #32]
   1e876:	4b92      	ldr	r3, [pc, #584]	; (1eac0 <bt_smp_encrypt_change+0x33c>)
   1e878:	f842 3f10 	str.w	r3, [r2, #16]!
   1e87c:	f44f 5111 	mov.w	r1, #9280	; 0x2440
			LOG_ERR("Unable to allocate Signing Info buffer");
   1e880:	4890      	ldr	r0, [pc, #576]	; (1eac4 <bt_smp_encrypt_change+0x340>)
   1e882:	f018 fd0e 	bl	372a2 <z_log_msg_static_create.constprop.0>
   1e886:	46a5      	mov	sp, r4
			return BT_SMP_ERR_UNSPECIFIED;
   1e888:	e7b2      	b.n	1e7f0 <bt_smp_encrypt_change+0x6c>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1e88a:	079a      	lsls	r2, r3, #30
   1e88c:	d501      	bpl.n	1e892 <bt_smp_encrypt_change+0x10e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1e88e:	2108      	movs	r1, #8
   1e890:	e7d4      	b.n	1e83c <bt_smp_encrypt_change+0xb8>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1e892:	0758      	lsls	r0, r3, #29
   1e894:	d5d5      	bpl.n	1e842 <bt_smp_encrypt_change+0xbe>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1e896:	210a      	movs	r1, #10
   1e898:	e7d0      	b.n	1e83c <bt_smp_encrypt_change+0xb8>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1e89a:	2105      	movs	r1, #5
   1e89c:	f018 fcab 	bl	371f6 <atomic_test_bit>
   1e8a0:	b9e8      	cbnz	r0, 1e8de <bt_smp_encrypt_change+0x15a>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1e8a2:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1e8a6:	07d9      	lsls	r1, r3, #31
   1e8a8:	d519      	bpl.n	1e8de <bt_smp_encrypt_change+0x15a>
	struct bt_keys *keys = conn->le.keys;
   1e8aa:	682b      	ldr	r3, [r5, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1e8ac:	211a      	movs	r1, #26
   1e8ae:	f107 000c 	add.w	r0, r7, #12
	struct bt_keys *keys = conn->le.keys;
   1e8b2:	f8d3 80b8 	ldr.w	r8, [r3, #184]	; 0xb8
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1e8b6:	f003 fc4f 	bl	22158 <bt_rand>
   1e8ba:	6078      	str	r0, [r7, #4]
   1e8bc:	b340      	cbz	r0, 1e910 <bt_smp_encrypt_change+0x18c>
			LOG_ERR("Unable to get random bytes");
   1e8be:	46e8      	mov	r8, sp
   1e8c0:	b088      	sub	sp, #32
   1e8c2:	466a      	mov	r2, sp
   1e8c4:	4b80      	ldr	r3, [pc, #512]	; (1eac8 <bt_smp_encrypt_change+0x344>)
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   1e8c6:	6153      	str	r3, [r2, #20]
   1e8c8:	4b80      	ldr	r3, [pc, #512]	; (1eacc <bt_smp_encrypt_change+0x348>)
   1e8ca:	6193      	str	r3, [r2, #24]
   1e8cc:	2303      	movs	r3, #3
   1e8ce:	f842 3f10 	str.w	r3, [r2, #16]!
   1e8d2:	487c      	ldr	r0, [pc, #496]	; (1eac4 <bt_smp_encrypt_change+0x340>)
   1e8d4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e8d8:	f018 fce3 	bl	372a2 <z_log_msg_static_create.constprop.0>
   1e8dc:	46c5      	mov	sp, r8
	if (smp->local_dist & BT_SMP_DIST_ID_KEY) {
   1e8de:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1e8e2:	079a      	lsls	r2, r3, #30
   1e8e4:	f140 80ae 	bpl.w	1ea44 <bt_smp_encrypt_change+0x2c0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_INFO,
   1e8e8:	2108      	movs	r1, #8
   1e8ea:	4620      	mov	r0, r4
   1e8ec:	f018 fcfb 	bl	372e6 <smp_create_pdu.constprop.0>
		if (!buf) {
   1e8f0:	4680      	mov	r8, r0
   1e8f2:	2800      	cmp	r0, #0
   1e8f4:	d175      	bne.n	1e9e2 <bt_smp_encrypt_change+0x25e>
			LOG_ERR("Unable to allocate Ident Info buffer");
   1e8f6:	466c      	mov	r4, sp
   1e8f8:	b088      	sub	sp, #32
   1e8fa:	466a      	mov	r2, sp
   1e8fc:	4b74      	ldr	r3, [pc, #464]	; (1ead0 <bt_smp_encrypt_change+0x34c>)
			LOG_ERR("Unable to allocate Signing Info buffer");
   1e8fe:	6153      	str	r3, [r2, #20]
   1e900:	4b6e      	ldr	r3, [pc, #440]	; (1eabc <bt_smp_encrypt_change+0x338>)
   1e902:	6193      	str	r3, [r2, #24]
   1e904:	2303      	movs	r3, #3
   1e906:	f842 3f10 	str.w	r3, [r2, #16]!
   1e90a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e90e:	e7b7      	b.n	1e880 <bt_smp_encrypt_change+0xfc>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1e910:	2106      	movs	r1, #6
   1e912:	4620      	mov	r0, r4
   1e914:	f018 fce7 	bl	372e6 <smp_create_pdu.constprop.0>
		if (!buf) {
   1e918:	4681      	mov	r9, r0
   1e91a:	b920      	cbnz	r0, 1e926 <bt_smp_encrypt_change+0x1a2>
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   1e91c:	46e8      	mov	r8, sp
   1e91e:	b088      	sub	sp, #32
   1e920:	466a      	mov	r2, sp
   1e922:	4b6c      	ldr	r3, [pc, #432]	; (1ead4 <bt_smp_encrypt_change+0x350>)
   1e924:	e7cf      	b.n	1e8c6 <bt_smp_encrypt_change+0x142>
	return net_buf_simple_add(&buf->b, len);
   1e926:	2110      	movs	r1, #16
   1e928:	300c      	adds	r0, #12
   1e92a:	f019 f8a1 	bl	37a70 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   1e92e:	f898 200c 	ldrb.w	r2, [r8, #12]
   1e932:	6038      	str	r0, [r7, #0]
   1e934:	f107 010c 	add.w	r1, r7, #12
   1e938:	f016 fdfd 	bl	35536 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1e93c:	f898 000c 	ldrb.w	r0, [r8, #12]
   1e940:	683b      	ldr	r3, [r7, #0]
   1e942:	280f      	cmp	r0, #15
   1e944:	d805      	bhi.n	1e952 <bt_smp_encrypt_change+0x1ce>
			(void)memset(info->ltk + keys->enc_size, 0,
   1e946:	f1c0 0210 	rsb	r2, r0, #16
   1e94a:	6879      	ldr	r1, [r7, #4]
   1e94c:	4418      	add	r0, r3
   1e94e:	f016 fdfd 	bl	3554c <memset>
		smp_send(smp, buf, NULL, NULL);
   1e952:	4649      	mov	r1, r9
   1e954:	2200      	movs	r2, #0
   1e956:	4620      	mov	r0, r4
   1e958:	f018 fc86 	bl	37268 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   1e95c:	2107      	movs	r1, #7
   1e95e:	4620      	mov	r0, r4
   1e960:	f018 fcc1 	bl	372e6 <smp_create_pdu.constprop.0>
		if (!buf) {
   1e964:	4681      	mov	r9, r0
   1e966:	b920      	cbnz	r0, 1e972 <bt_smp_encrypt_change+0x1ee>
			LOG_ERR("Unable to allocate Central Ident buffer");
   1e968:	46e8      	mov	r8, sp
   1e96a:	b088      	sub	sp, #32
   1e96c:	466a      	mov	r2, sp
   1e96e:	4b5a      	ldr	r3, [pc, #360]	; (1ead8 <bt_smp_encrypt_change+0x354>)
   1e970:	e7a9      	b.n	1e8c6 <bt_smp_encrypt_change+0x142>
   1e972:	210a      	movs	r1, #10
   1e974:	300c      	adds	r0, #12
   1e976:	f019 f87b 	bl	37a70 <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   1e97a:	2208      	movs	r2, #8
   1e97c:	4603      	mov	r3, r0
   1e97e:	f107 011c 	add.w	r1, r7, #28
   1e982:	3002      	adds	r0, #2
   1e984:	607b      	str	r3, [r7, #4]
   1e986:	f016 fdd6 	bl	35536 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   1e98a:	687b      	ldr	r3, [r7, #4]
   1e98c:	2202      	movs	r2, #2
   1e98e:	f107 0124 	add.w	r1, r7, #36	; 0x24
   1e992:	4618      	mov	r0, r3
   1e994:	f016 fdcf 	bl	35536 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   1e998:	4649      	mov	r1, r9
   1e99a:	4620      	mov	r0, r4
   1e99c:	4a4f      	ldr	r2, [pc, #316]	; (1eadc <bt_smp_encrypt_change+0x358>)
   1e99e:	f018 fc63 	bl	37268 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1e9a2:	210d      	movs	r1, #13
   1e9a4:	4630      	mov	r0, r6
   1e9a6:	f018 fc26 	bl	371f6 <atomic_test_bit>
   1e9aa:	2800      	cmp	r0, #0
   1e9ac:	d097      	beq.n	1e8de <bt_smp_encrypt_change+0x15a>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   1e9ae:	4640      	mov	r0, r8
   1e9b0:	2101      	movs	r1, #1
   1e9b2:	f018 ff45 	bl	37840 <bt_keys_add_type>
			memcpy(keys->periph_ltk.val, rand.key,
   1e9b6:	f107 010c 	add.w	r1, r7, #12
   1e9ba:	2210      	movs	r2, #16
   1e9bc:	f108 0072 	add.w	r0, r8, #114	; 0x72
   1e9c0:	f016 fdb9 	bl	35536 <memcpy>
			memcpy(keys->periph_ltk.rand, rand.rand,
   1e9c4:	f107 011c 	add.w	r1, r7, #28
   1e9c8:	2208      	movs	r2, #8
   1e9ca:	f108 0068 	add.w	r0, r8, #104	; 0x68
   1e9ce:	f016 fdb2 	bl	35536 <memcpy>
			memcpy(keys->periph_ltk.ediv, rand.ediv,
   1e9d2:	2202      	movs	r2, #2
   1e9d4:	f107 0124 	add.w	r1, r7, #36	; 0x24
   1e9d8:	f108 0070 	add.w	r0, r8, #112	; 0x70
   1e9dc:	f016 fdab 	bl	35536 <memcpy>
   1e9e0:	e77d      	b.n	1e8de <bt_smp_encrypt_change+0x15a>
   1e9e2:	2110      	movs	r1, #16
   1e9e4:	300c      	adds	r0, #12
   1e9e6:	f019 f843 	bl	37a70 <net_buf_simple_add>
		memcpy(id_info->irk, bt_dev.irk[conn->id], 16);
   1e9ea:	f89b 1008 	ldrb.w	r1, [fp, #8]
   1e9ee:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 1eae0 <bt_smp_encrypt_change+0x35c>
   1e9f2:	f44f 73ac 	mov.w	r3, #344	; 0x158
   1e9f6:	2210      	movs	r2, #16
   1e9f8:	fb12 3101 	smlabb	r1, r2, r1, r3
   1e9fc:	4449      	add	r1, r9
   1e9fe:	f016 fd9a 	bl	35536 <memcpy>
		smp_send(smp, buf, NULL, NULL);
   1ea02:	4641      	mov	r1, r8
   1ea04:	2200      	movs	r2, #0
   1ea06:	4620      	mov	r0, r4
   1ea08:	f018 fc2e 	bl	37268 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_ADDR_INFO,
   1ea0c:	2109      	movs	r1, #9
   1ea0e:	4620      	mov	r0, r4
   1ea10:	f018 fc69 	bl	372e6 <smp_create_pdu.constprop.0>
		if (!buf) {
   1ea14:	4680      	mov	r8, r0
   1ea16:	b920      	cbnz	r0, 1ea22 <bt_smp_encrypt_change+0x29e>
			LOG_ERR("Unable to allocate Ident Addr Info buffer");
   1ea18:	466c      	mov	r4, sp
   1ea1a:	b088      	sub	sp, #32
   1ea1c:	466a      	mov	r2, sp
   1ea1e:	4b31      	ldr	r3, [pc, #196]	; (1eae4 <bt_smp_encrypt_change+0x360>)
   1ea20:	e76d      	b.n	1e8fe <bt_smp_encrypt_change+0x17a>
   1ea22:	2107      	movs	r1, #7
   1ea24:	300c      	adds	r0, #12
   1ea26:	f019 f823 	bl	37a70 <net_buf_simple_add>
		bt_addr_le_copy(&id_addr_info->addr, &bt_dev.id_addr[conn->id]);
   1ea2a:	f89b 1008 	ldrb.w	r1, [fp, #8]
   1ea2e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   1ea32:	2207      	movs	r2, #7
   1ea34:	4449      	add	r1, r9
   1ea36:	f016 fd7e 	bl	35536 <memcpy>
		smp_send(smp, buf, smp_id_sent, NULL);
   1ea3a:	4a2b      	ldr	r2, [pc, #172]	; (1eae8 <bt_smp_encrypt_change+0x364>)
   1ea3c:	4641      	mov	r1, r8
   1ea3e:	4620      	mov	r0, r4
   1ea40:	f018 fc12 	bl	37268 <smp_send.constprop.0>
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
   1ea44:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1ea48:	075b      	lsls	r3, r3, #29
   1ea4a:	d52c      	bpl.n	1eaa6 <bt_smp_encrypt_change+0x322>
		buf = smp_create_pdu(smp, BT_SMP_CMD_SIGNING_INFO,
   1ea4c:	210a      	movs	r1, #10
   1ea4e:	4620      	mov	r0, r4
   1ea50:	f018 fc49 	bl	372e6 <smp_create_pdu.constprop.0>
		if (!buf) {
   1ea54:	4680      	mov	r8, r0
   1ea56:	b920      	cbnz	r0, 1ea62 <bt_smp_encrypt_change+0x2de>
			LOG_ERR("Unable to allocate Signing Info buffer");
   1ea58:	466c      	mov	r4, sp
   1ea5a:	b088      	sub	sp, #32
   1ea5c:	466a      	mov	r2, sp
   1ea5e:	4b23      	ldr	r3, [pc, #140]	; (1eaec <bt_smp_encrypt_change+0x368>)
   1ea60:	e74d      	b.n	1e8fe <bt_smp_encrypt_change+0x17a>
   1ea62:	2110      	movs	r1, #16
   1ea64:	300c      	adds	r0, #12
   1ea66:	f019 f803 	bl	37a70 <net_buf_simple_add>
		if (bt_rand(info->csrk, sizeof(info->csrk))) {
   1ea6a:	2110      	movs	r1, #16
   1ea6c:	4683      	mov	fp, r0
   1ea6e:	f003 fb73 	bl	22158 <bt_rand>
   1ea72:	4681      	mov	r9, r0
   1ea74:	2800      	cmp	r0, #0
   1ea76:	f47f aebb 	bne.w	1e7f0 <bt_smp_encrypt_change+0x6c>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1ea7a:	210d      	movs	r1, #13
   1ea7c:	4630      	mov	r0, r6
   1ea7e:	f018 fbba 	bl	371f6 <atomic_test_bit>
   1ea82:	b158      	cbz	r0, 1ea9c <bt_smp_encrypt_change+0x318>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
   1ea84:	2108      	movs	r1, #8
   1ea86:	4650      	mov	r0, sl
   1ea88:	f018 feda 	bl	37840 <bt_keys_add_type>
			memcpy(keys->local_csrk.val, info->csrk, 16);
   1ea8c:	2210      	movs	r2, #16
   1ea8e:	4659      	mov	r1, fp
   1ea90:	f10a 0040 	add.w	r0, sl, #64	; 0x40
   1ea94:	f016 fd4f 	bl	35536 <memcpy>
			keys->local_csrk.cnt = 0U;
   1ea98:	f8ca 9050 	str.w	r9, [sl, #80]	; 0x50
		smp_send(smp, buf, smp_sign_info_sent, NULL);
   1ea9c:	4a14      	ldr	r2, [pc, #80]	; (1eaf0 <bt_smp_encrypt_change+0x36c>)
   1ea9e:	4641      	mov	r1, r8
   1eaa0:	4620      	mov	r0, r4
   1eaa2:	f018 fbe1 	bl	37268 <smp_send.constprop.0>
	if (!smp->local_dist && !smp->remote_dist) {
   1eaa6:	f835 1c04 	ldrh.w	r1, [r5, #-4]
   1eaaa:	2900      	cmp	r1, #0
   1eaac:	f47f aea0 	bne.w	1e7f0 <bt_smp_encrypt_change+0x6c>
   1eab0:	e68f      	b.n	1e7d2 <bt_smp_encrypt_change+0x4e>
   1eab2:	bf00      	nop
   1eab4:	0003e536 	.word	0x0003e536
   1eab8:	0003e40d 	.word	0x0003e40d
   1eabc:	0003e583 	.word	0x0003e583
   1eac0:	01000004 	.word	0x01000004
   1eac4:	000395f8 	.word	0x000395f8
   1eac8:	0003e426 	.word	0x0003e426
   1eacc:	0003e56c 	.word	0x0003e56c
   1ead0:	0003e49c 	.word	0x0003e49c
   1ead4:	0003e445 	.word	0x0003e445
   1ead8:	0003e470 	.word	0x0003e470
   1eadc:	0003779f 	.word	0x0003779f
   1eae0:	20000000 	.word	0x20000000
   1eae4:	0003e4c5 	.word	0x0003e4c5
   1eae8:	00037795 	.word	0x00037795
   1eaec:	0003e4f3 	.word	0x0003e4f3
   1eaf0:	0003778b 	.word	0x0003778b

0001eaf4 <smp_timeout>:
{
   1eaf4:	b5b0      	push	{r4, r5, r7, lr}
   1eaf6:	af00      	add	r7, sp, #0
	LOG_ERR("SMP Timeout");
   1eaf8:	466d      	mov	r5, sp
   1eafa:	b088      	sub	sp, #32
{
   1eafc:	4604      	mov	r4, r0
	LOG_ERR("SMP Timeout");
   1eafe:	466a      	mov	r2, sp
   1eb00:	4b0c      	ldr	r3, [pc, #48]	; (1eb34 <smp_timeout+0x40>)
   1eb02:	6153      	str	r3, [r2, #20]
   1eb04:	4b0c      	ldr	r3, [pc, #48]	; (1eb38 <smp_timeout+0x44>)
   1eb06:	6193      	str	r3, [r2, #24]
   1eb08:	2303      	movs	r3, #3
   1eb0a:	f842 3f10 	str.w	r3, [r2, #16]!
   1eb0e:	480b      	ldr	r0, [pc, #44]	; (1eb3c <smp_timeout+0x48>)
   1eb10:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1eb14:	f018 fbc5 	bl	372a2 <z_log_msg_static_create.constprop.0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1eb18:	f5a4 70bc 	sub.w	r0, r4, #376	; 0x178
   1eb1c:	46ad      	mov	sp, r5
   1eb1e:	2108      	movs	r1, #8
   1eb20:	f7ff faa0 	bl	1e064 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1eb24:	2104      	movs	r1, #4
   1eb26:	f5a4 70ba 	sub.w	r0, r4, #372	; 0x174
   1eb2a:	f018 fbc8 	bl	372be <atomic_set_bit>
}
   1eb2e:	46bd      	mov	sp, r7
   1eb30:	bdb0      	pop	{r4, r5, r7, pc}
   1eb32:	bf00      	nop
   1eb34:	0003e51e 	.word	0x0003e51e
   1eb38:	0003e560 	.word	0x0003e560
   1eb3c:	000395f8 	.word	0x000395f8

0001eb40 <bt_smp_update_keys>:
{
   1eb40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eb44:	af00      	add	r7, sp, #0
   1eb46:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1eb48:	f018 fbae 	bl	372a8 <smp_chan_get>
	if (!smp) {
   1eb4c:	4605      	mov	r5, r0
   1eb4e:	b370      	cbz	r0, 1ebae <bt_smp_update_keys+0x6e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1eb50:	1d06      	adds	r6, r0, #4
   1eb52:	2103      	movs	r1, #3
   1eb54:	4630      	mov	r0, r6
   1eb56:	f018 fb4e 	bl	371f6 <atomic_test_bit>
   1eb5a:	b340      	cbz	r0, 1ebae <bt_smp_update_keys+0x6e>
	if (conn->le.keys) {
   1eb5c:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   1eb60:	b108      	cbz	r0, 1eb66 <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   1eb62:	f000 f9bb 	bl	1eedc <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1eb66:	f104 0888 	add.w	r8, r4, #136	; 0x88
   1eb6a:	7a20      	ldrb	r0, [r4, #8]
   1eb6c:	4641      	mov	r1, r8
   1eb6e:	f000 f8a1 	bl	1ecb4 <bt_keys_get_addr>
   1eb72:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	if (!conn->le.keys) {
   1eb76:	b9e8      	cbnz	r0, 1ebb4 <bt_smp_update_keys+0x74>
		LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1eb78:	4640      	mov	r0, r8
   1eb7a:	f7f6 fd05 	bl	15588 <bt_addr_le_str>
   1eb7e:	466c      	mov	r4, sp
   1eb80:	b08a      	sub	sp, #40	; 0x28
   1eb82:	466a      	mov	r2, sp
   1eb84:	4b3c      	ldr	r3, [pc, #240]	; (1ec78 <bt_smp_update_keys+0x138>)
   1eb86:	6153      	str	r3, [r2, #20]
   1eb88:	4b3c      	ldr	r3, [pc, #240]	; (1ec7c <bt_smp_update_keys+0x13c>)
   1eb8a:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1eb8e:	f240 3301 	movw	r3, #769	; 0x301
   1eb92:	8413      	strh	r3, [r2, #32]
   1eb94:	4b3a      	ldr	r3, [pc, #232]	; (1ec80 <bt_smp_update_keys+0x140>)
   1eb96:	483b      	ldr	r0, [pc, #236]	; (1ec84 <bt_smp_update_keys+0x144>)
   1eb98:	f842 3f10 	str.w	r3, [r2, #16]!
   1eb9c:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1eba0:	f018 fb7f 	bl	372a2 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1eba4:	2108      	movs	r1, #8
   1eba6:	46a5      	mov	sp, r4
   1eba8:	4628      	mov	r0, r5
   1ebaa:	f7ff fadf 	bl	1e16c <smp_error>
}
   1ebae:	46bd      	mov	sp, r7
   1ebb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1ebb4:	210e      	movs	r1, #14
   1ebb6:	4630      	mov	r0, r6
   1ebb8:	f018 fb1d 	bl	371f6 <atomic_test_bit>
   1ebbc:	b128      	cbz	r0, 1ebca <bt_smp_update_keys+0x8a>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1ebbe:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   1ebc2:	7b53      	ldrb	r3, [r2, #13]
   1ebc4:	f043 0302 	orr.w	r3, r3, #2
   1ebc8:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1ebca:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_OOB;
   1ebcc:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
	switch (smp->method) {
   1ebd0:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_OOB;
   1ebd2:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   1ebd4:	d83c      	bhi.n	1ec50 <bt_smp_update_keys+0x110>
   1ebd6:	2a00      	cmp	r2, #0
   1ebd8:	d041      	beq.n	1ec5e <bt_smp_update_keys+0x11e>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1ebda:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   1ebde:	7b53      	ldrb	r3, [r2, #13]
   1ebe0:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1ebe4:	7353      	strb	r3, [r2, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1ebe6:	7b6b      	ldrb	r3, [r5, #13]
   1ebe8:	7d29      	ldrb	r1, [r5, #20]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1ebea:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
	return MIN(req->max_key_size, rsp->max_key_size);
   1ebee:	428b      	cmp	r3, r1
   1ebf0:	bf28      	it	cs
   1ebf2:	460b      	movcs	r3, r1
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1ebf4:	7313      	strb	r3, [r2, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1ebf6:	2105      	movs	r1, #5
   1ebf8:	4630      	mov	r0, r6
   1ebfa:	f018 fafc 	bl	371f6 <atomic_test_bit>
   1ebfe:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
		conn->le.keys->flags |= BT_KEYS_SC;
   1ec02:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1ec04:	b3a0      	cbz	r0, 1ec70 <bt_smp_update_keys+0x130>
		conn->le.keys->flags |= BT_KEYS_SC;
   1ec06:	f042 0210 	orr.w	r2, r2, #16
   1ec0a:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1ec0c:	210d      	movs	r1, #13
   1ec0e:	4630      	mov	r0, r6
   1ec10:	f018 faf1 	bl	371f6 <atomic_test_bit>
   1ec14:	2800      	cmp	r0, #0
   1ec16:	d0ca      	beq.n	1ebae <bt_smp_update_keys+0x6e>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1ec18:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   1ec1c:	2120      	movs	r1, #32
   1ec1e:	f018 fe0f 	bl	37840 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   1ec22:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   1ec26:	f105 0147 	add.w	r1, r5, #71	; 0x47
   1ec2a:	2210      	movs	r2, #16
   1ec2c:	301a      	adds	r0, #26
   1ec2e:	f016 fc82 	bl	35536 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   1ec32:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   1ec36:	2208      	movs	r2, #8
   1ec38:	2100      	movs	r1, #0
   1ec3a:	3010      	adds	r0, #16
   1ec3c:	f016 fc86 	bl	3554c <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1ec40:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   1ec44:	2202      	movs	r2, #2
   1ec46:	2100      	movs	r1, #0
   1ec48:	3018      	adds	r0, #24
   1ec4a:	f016 fc7f 	bl	3554c <memset>
   1ec4e:	e7ae      	b.n	1ebae <bt_smp_update_keys+0x6e>
	switch (smp->method) {
   1ec50:	3a05      	subs	r2, #5
   1ec52:	2a01      	cmp	r2, #1
   1ec54:	d803      	bhi.n	1ec5e <bt_smp_update_keys+0x11e>
		conn->le.keys->flags |= BT_KEYS_OOB;
   1ec56:	f043 0320 	orr.w	r3, r3, #32
   1ec5a:	734b      	strb	r3, [r1, #13]
   1ec5c:	e7bd      	b.n	1ebda <bt_smp_update_keys+0x9a>
		conn->le.keys->flags &= ~BT_KEYS_OOB;
   1ec5e:	f023 0320 	bic.w	r3, r3, #32
   1ec62:	734b      	strb	r3, [r1, #13]
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1ec64:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   1ec68:	7b53      	ldrb	r3, [r2, #13]
   1ec6a:	f023 0301 	bic.w	r3, r3, #1
   1ec6e:	e7b9      	b.n	1ebe4 <bt_smp_update_keys+0xa4>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1ec70:	f022 0210 	bic.w	r2, r2, #16
   1ec74:	735a      	strb	r2, [r3, #13]
   1ec76:	e79a      	b.n	1ebae <bt_smp_update_keys+0x6e>
   1ec78:	0003e089 	.word	0x0003e089
   1ec7c:	0003e6cd 	.word	0x0003e6cd
   1ec80:	01000004 	.word	0x01000004
   1ec84:	000395f8 	.word	0x000395f8

0001ec88 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1ec88:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1ec8a:	4b07      	ldr	r3, [pc, #28]	; (1eca8 <bt_smp_init+0x20>)
	}

	LOG_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1ec8c:	4807      	ldr	r0, [pc, #28]	; (1ecac <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1ec8e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1ec92:	f003 0306 	and.w	r3, r3, #6
   1ec96:	1f9a      	subs	r2, r3, #6
   1ec98:	4253      	negs	r3, r2
   1ec9a:	4153      	adcs	r3, r2
   1ec9c:	4a04      	ldr	r2, [pc, #16]	; (1ecb0 <bt_smp_init+0x28>)
   1ec9e:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   1eca0:	f7f9 fee4 	bl	18a6c <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1eca4:	2000      	movs	r0, #0
   1eca6:	bd08      	pop	{r3, pc}
   1eca8:	20000000 	.word	0x20000000
   1ecac:	20000364 	.word	0x20000364
   1ecb0:	200033e6 	.word	0x200033e6

0001ecb4 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   1ecb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	LOG_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1ecb6:	4c20      	ldr	r4, [pc, #128]	; (1ed38 <bt_keys_get_addr+0x84>)
   1ecb8:	4626      	mov	r6, r4
{
   1ecba:	4605      	mov	r5, r0
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1ecbc:	f816 3b01 	ldrb.w	r3, [r6], #1
   1ecc0:	4283      	cmp	r3, r0
{
   1ecc2:	460f      	mov	r7, r1
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1ecc4:	d013      	beq.n	1ecee <bt_keys_get_addr+0x3a>
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    bt_addr_le_eq(&keys->addr, BT_ADDR_LE_ANY)) {
   1ecc6:	491d      	ldr	r1, [pc, #116]	; (1ed3c <bt_keys_get_addr+0x88>)
   1ecc8:	481d      	ldr	r0, [pc, #116]	; (1ed40 <bt_keys_get_addr+0x8c>)
   1ecca:	f018 fd9f 	bl	3780c <bt_addr_le_eq>
			first_free_slot = i;
		}
	}

#if defined(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
	if (first_free_slot == ARRAY_SIZE(key_pool)) {
   1ecce:	b1a8      	cbz	r0, 1ecfc <bt_keys_get_addr+0x48>
   1ecd0:	2207      	movs	r2, #7
   1ecd2:	481b      	ldr	r0, [pc, #108]	; (1ed40 <bt_keys_get_addr+0x8c>)
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
		keys = &key_pool[first_free_slot];
		keys->id = id;
   1ecd4:	7025      	strb	r5, [r4, #0]
   1ecd6:	4639      	mov	r1, r7
   1ecd8:	f016 fc2d 	bl	35536 <memcpy>
		bt_addr_le_copy(&keys->addr, addr);
#if defined(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
		keys->aging_counter = ++aging_counter_val;
   1ecdc:	4a19      	ldr	r2, [pc, #100]	; (1ed44 <bt_keys_get_addr+0x90>)
   1ecde:	6813      	ldr	r3, [r2, #0]
   1ece0:	3301      	adds	r3, #1
   1ece2:	6013      	str	r3, [r2, #0]
   1ece4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		last_keys_updated = keys;
   1ece8:	4b17      	ldr	r3, [pc, #92]	; (1ed48 <bt_keys_get_addr+0x94>)
   1ecea:	601c      	str	r4, [r3, #0]
#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
		LOG_DBG("created %p for %s", keys, bt_addr_le_str(addr));
		return keys;
   1ecec:	e004      	b.n	1ecf8 <bt_keys_get_addr+0x44>
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1ecee:	4630      	mov	r0, r6
   1ecf0:	f018 fd8c 	bl	3780c <bt_addr_le_eq>
   1ecf4:	2800      	cmp	r0, #0
   1ecf6:	d0e6      	beq.n	1ecc6 <bt_keys_get_addr+0x12>
		keys = &key_pool[i];
   1ecf8:	480f      	ldr	r0, [pc, #60]	; (1ed38 <bt_keys_get_addr+0x84>)
   1ecfa:	e01a      	b.n	1ed32 <bt_keys_get_addr+0x7e>
	struct key_data kdata = { false, id };
   1ecfc:	f8ad 0000 	strh.w	r0, [sp]
	bt_conn_foreach(BT_CONN_TYPE_ALL, find_key_in_use, &kdata);
   1ed00:	4912      	ldr	r1, [pc, #72]	; (1ed4c <bt_keys_get_addr+0x98>)
   1ed02:	466a      	mov	r2, sp
   1ed04:	200f      	movs	r0, #15
   1ed06:	f7fa fc1f 	bl	19548 <bt_conn_foreach>
	return kdata.in_use;
   1ed0a:	f89d 3000 	ldrb.w	r3, [sp]
			if (key_in_use) {
   1ed0e:	b97b      	cbnz	r3, 1ed30 <bt_keys_get_addr+0x7c>
   1ed10:	490b      	ldr	r1, [pc, #44]	; (1ed40 <bt_keys_get_addr+0x8c>)
   1ed12:	2207      	movs	r2, #7
   1ed14:	4668      	mov	r0, sp
   1ed16:	f016 fc0e 	bl	35536 <memcpy>
		bt_unpair(oldest->id, &oldest_addr);
   1ed1a:	4669      	mov	r1, sp
   1ed1c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   1ed20:	f7f8 f994 	bl	1704c <bt_unpair>
		if (bt_addr_le_eq(&oldest->addr, BT_ADDR_LE_ANY)) {
   1ed24:	4905      	ldr	r1, [pc, #20]	; (1ed3c <bt_keys_get_addr+0x88>)
   1ed26:	4806      	ldr	r0, [pc, #24]	; (1ed40 <bt_keys_get_addr+0x8c>)
   1ed28:	f018 fd70 	bl	3780c <bt_addr_le_eq>
   1ed2c:	2800      	cmp	r0, #0
   1ed2e:	d1cf      	bne.n	1ecd0 <bt_keys_get_addr+0x1c>
			return NULL;
   1ed30:	2000      	movs	r0, #0
	}

	LOG_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
}
   1ed32:	b003      	add	sp, #12
   1ed34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ed36:	bf00      	nop
   1ed38:	20001cb8 	.word	0x20001cb8
   1ed3c:	0003c0a9 	.word	0x0003c0a9
   1ed40:	20001cb9 	.word	0x20001cb9
   1ed44:	20001cb4 	.word	0x20001cb4
   1ed48:	20001cb0 	.word	0x20001cb0
   1ed4c:	0001eea9 	.word	0x0001eea9

0001ed50 <bt_foreach_bond>:

void bt_foreach_bond(uint8_t id, void (*func)(const struct bt_bond_info *info,
					   void *user_data),
		     void *user_data)
{
   1ed50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	__ASSERT_NO_MSG(func != NULL);

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		struct bt_keys *keys = &key_pool[i];

		if (keys->keys && keys->id == id) {
   1ed52:	4f0c      	ldr	r7, [pc, #48]	; (1ed84 <bt_foreach_bond+0x34>)
{
   1ed54:	4604      	mov	r4, r0
   1ed56:	460d      	mov	r5, r1
   1ed58:	4616      	mov	r6, r2
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1ed5a:	2300      	movs	r3, #0
		if (keys->keys && keys->id == id) {
   1ed5c:	89f9      	ldrh	r1, [r7, #14]
   1ed5e:	783a      	ldrb	r2, [r7, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1ed60:	b10b      	cbz	r3, 1ed66 <bt_foreach_bond+0x16>

			bt_addr_le_copy(&info.addr, &keys->addr);
			func(&info, user_data);
		}
	}
}
   1ed62:	b003      	add	sp, #12
   1ed64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (keys->keys && keys->id == id) {
   1ed66:	2900      	cmp	r1, #0
   1ed68:	d0fb      	beq.n	1ed62 <bt_foreach_bond+0x12>
   1ed6a:	42a2      	cmp	r2, r4
   1ed6c:	d1f9      	bne.n	1ed62 <bt_foreach_bond+0x12>
   1ed6e:	4906      	ldr	r1, [pc, #24]	; (1ed88 <bt_foreach_bond+0x38>)
   1ed70:	2207      	movs	r2, #7
   1ed72:	4668      	mov	r0, sp
   1ed74:	f016 fbdf 	bl	35536 <memcpy>
			func(&info, user_data);
   1ed78:	4631      	mov	r1, r6
   1ed7a:	4668      	mov	r0, sp
   1ed7c:	47a8      	blx	r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1ed7e:	2301      	movs	r3, #1
   1ed80:	e7ec      	b.n	1ed5c <bt_foreach_bond+0xc>
   1ed82:	bf00      	nop
   1ed84:	20001cb8 	.word	0x20001cb8
   1ed88:	20001cb9 	.word	0x20001cb9

0001ed8c <bt_keys_foreach_type>:

void bt_keys_foreach_type(enum bt_keys_type type, void (*func)(struct bt_keys *keys, void *data),
			  void *data)
{
   1ed8c:	b410      	push	{r4}
   1ed8e:	460b      	mov	r3, r1
   1ed90:	4611      	mov	r1, r2
	int i;

	__ASSERT_NO_MSG(func != NULL);

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   1ed92:	4a04      	ldr	r2, [pc, #16]	; (1eda4 <bt_keys_foreach_type+0x18>)
   1ed94:	89d4      	ldrh	r4, [r2, #14]
   1ed96:	4204      	tst	r4, r0
   1ed98:	d002      	beq.n	1eda0 <bt_keys_foreach_type+0x14>
			func(&key_pool[i], data);
		}
	}
}
   1ed9a:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   1ed9c:	4610      	mov	r0, r2
   1ed9e:	4718      	bx	r3
}
   1eda0:	bc10      	pop	{r4}
   1eda2:	4770      	bx	lr
   1eda4:	20001cb8 	.word	0x20001cb8

0001eda8 <keys_commit>:

	bt_id_add(keys);
}

static int keys_commit(void)
{
   1eda8:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach_type(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach_type(BT_KEYS_IRK, id_add, NULL);
   1edaa:	4903      	ldr	r1, [pc, #12]	; (1edb8 <keys_commit+0x10>)
   1edac:	2200      	movs	r2, #0
   1edae:	2002      	movs	r0, #2
   1edb0:	f7ff ffec 	bl	1ed8c <bt_keys_foreach_type>
	}

	return 0;
}
   1edb4:	2000      	movs	r0, #0
   1edb6:	bd08      	pop	{r3, pc}
   1edb8:	0003781d 	.word	0x0003781d

0001edbc <bt_keys_find>:
{
   1edbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1edc0:	f8df 8034 	ldr.w	r8, [pc, #52]	; 1edf8 <bt_keys_find+0x3c>
{
   1edc4:	4605      	mov	r5, r0
   1edc6:	460e      	mov	r6, r1
   1edc8:	4617      	mov	r7, r2
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1edca:	2300      	movs	r3, #0
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1edcc:	f8b8 400e 	ldrh.w	r4, [r8, #14]
   1edd0:	f898 2000 	ldrb.w	r2, [r8]
   1edd4:	402c      	ands	r4, r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1edd6:	b113      	cbz	r3, 1edde <bt_keys_find+0x22>
	return NULL;
   1edd8:	2000      	movs	r0, #0
}
   1edda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1edde:	2c00      	cmp	r4, #0
   1ede0:	d0fa      	beq.n	1edd8 <bt_keys_find+0x1c>
   1ede2:	4296      	cmp	r6, r2
   1ede4:	d1f8      	bne.n	1edd8 <bt_keys_find+0x1c>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
   1ede6:	4805      	ldr	r0, [pc, #20]	; (1edfc <bt_keys_find+0x40>)
   1ede8:	4639      	mov	r1, r7
   1edea:	f018 fd0f 	bl	3780c <bt_addr_le_eq>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1edee:	2301      	movs	r3, #1
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1edf0:	2800      	cmp	r0, #0
   1edf2:	d0eb      	beq.n	1edcc <bt_keys_find+0x10>
			return &key_pool[i];
   1edf4:	4800      	ldr	r0, [pc, #0]	; (1edf8 <bt_keys_find+0x3c>)
   1edf6:	e7f0      	b.n	1edda <bt_keys_find+0x1e>
   1edf8:	20001cb8 	.word	0x20001cb8
   1edfc:	20001cb9 	.word	0x20001cb9

0001ee00 <bt_keys_find_irk>:
{
   1ee00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1ee02:	780b      	ldrb	r3, [r1, #0]
   1ee04:	2b01      	cmp	r3, #1
   1ee06:	4606      	mov	r6, r0
   1ee08:	460c      	mov	r4, r1
   1ee0a:	d001      	beq.n	1ee10 <bt_keys_find_irk+0x10>
		return NULL;
   1ee0c:	2000      	movs	r0, #0
}
   1ee0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   1ee10:	798b      	ldrb	r3, [r1, #6]
   1ee12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1ee16:	2b40      	cmp	r3, #64	; 0x40
   1ee18:	d1f8      	bne.n	1ee0c <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1ee1a:	4d18      	ldr	r5, [pc, #96]	; (1ee7c <bt_keys_find_irk+0x7c>)
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1ee1c:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   1ee1e:	f105 073a 	add.w	r7, r5, #58	; 0x3a
   1ee22:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id == id &&
   1ee24:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1ee26:	f002 0202 	and.w	r2, r2, #2
   1ee2a:	b1c3      	cbz	r3, 1ee5e <bt_keys_find_irk+0x5e>
   1ee2c:	2300      	movs	r3, #0
   1ee2e:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id != id) {
   1ee30:	7829      	ldrb	r1, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1ee32:	f002 0202 	and.w	r2, r2, #2
   1ee36:	2b00      	cmp	r3, #0
   1ee38:	d1e8      	bne.n	1ee0c <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1ee3a:	2a00      	cmp	r2, #0
   1ee3c:	d0e6      	beq.n	1ee0c <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   1ee3e:	42b1      	cmp	r1, r6
   1ee40:	d1e4      	bne.n	1ee0c <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1ee42:	1c67      	adds	r7, r4, #1
   1ee44:	480e      	ldr	r0, [pc, #56]	; (1ee80 <bt_keys_find_irk+0x80>)
   1ee46:	4639      	mov	r1, r7
   1ee48:	f016 fbda 	bl	35600 <bt_rpa_irk_matches>
   1ee4c:	2301      	movs	r3, #1
   1ee4e:	2800      	cmp	r0, #0
   1ee50:	d0ed      	beq.n	1ee2e <bt_keys_find_irk+0x2e>
	memcpy(dst, src, sizeof(*dst));
   1ee52:	2206      	movs	r2, #6
   1ee54:	4639      	mov	r1, r7
   1ee56:	480b      	ldr	r0, [pc, #44]	; (1ee84 <bt_keys_find_irk+0x84>)
   1ee58:	f016 fb6d 	bl	35536 <memcpy>
}
   1ee5c:	e00b      	b.n	1ee76 <bt_keys_find_irk+0x76>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1ee5e:	2a00      	cmp	r2, #0
   1ee60:	d0e5      	beq.n	1ee2e <bt_keys_find_irk+0x2e>
		if (key_pool[i].id == id &&
   1ee62:	42b0      	cmp	r0, r6
   1ee64:	d1e3      	bne.n	1ee2e <bt_keys_find_irk+0x2e>
	return memcmp(a, b, sizeof(*a));
   1ee66:	2206      	movs	r2, #6
   1ee68:	4639      	mov	r1, r7
   1ee6a:	1c60      	adds	r0, r4, #1
   1ee6c:	f016 fb53 	bl	35516 <memcmp>
   1ee70:	2301      	movs	r3, #1
   1ee72:	2800      	cmp	r0, #0
   1ee74:	d1d5      	bne.n	1ee22 <bt_keys_find_irk+0x22>
			return &key_pool[i];
   1ee76:	4801      	ldr	r0, [pc, #4]	; (1ee7c <bt_keys_find_irk+0x7c>)
   1ee78:	e7c9      	b.n	1ee0e <bt_keys_find_irk+0xe>
   1ee7a:	bf00      	nop
   1ee7c:	20001cb8 	.word	0x20001cb8
   1ee80:	20001ce2 	.word	0x20001ce2
   1ee84:	20001cf2 	.word	0x20001cf2

0001ee88 <bt_keys_find_addr>:
{
   1ee88:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
   1ee8a:	4c06      	ldr	r4, [pc, #24]	; (1eea4 <bt_keys_find_addr+0x1c>)
   1ee8c:	7823      	ldrb	r3, [r4, #0]
   1ee8e:	4283      	cmp	r3, r0
   1ee90:	d103      	bne.n	1ee9a <bt_keys_find_addr+0x12>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
   1ee92:	1c60      	adds	r0, r4, #1
   1ee94:	f018 fcba 	bl	3780c <bt_addr_le_eq>
		if (key_pool[i].id == id &&
   1ee98:	b908      	cbnz	r0, 1ee9e <bt_keys_find_addr+0x16>
	return NULL;
   1ee9a:	2000      	movs	r0, #0
}
   1ee9c:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1ee9e:	4620      	mov	r0, r4
   1eea0:	e7fc      	b.n	1ee9c <bt_keys_find_addr+0x14>
   1eea2:	bf00      	nop
   1eea4:	20001cb8 	.word	0x20001cb8

0001eea8 <find_key_in_use>:
{
   1eea8:	b538      	push	{r3, r4, r5, lr}
	if (conn->state == BT_CONN_CONNECTED) {
   1eeaa:	7b42      	ldrb	r2, [r0, #13]
   1eeac:	2a07      	cmp	r2, #7
{
   1eeae:	460c      	mov	r4, r1
	if (conn->state == BT_CONN_CONNECTED) {
   1eeb0:	d111      	bne.n	1eed6 <find_key_in_use+0x2e>
		key = bt_keys_find_addr(conn->id, bt_conn_get_dst(conn));
   1eeb2:	7a05      	ldrb	r5, [r0, #8]
   1eeb4:	f017 f8ee 	bl	36094 <bt_conn_get_dst>
   1eeb8:	4601      	mov	r1, r0
   1eeba:	4628      	mov	r0, r5
   1eebc:	f7ff ffe4 	bl	1ee88 <bt_keys_find_addr>
		if (key == NULL) {
   1eec0:	b148      	cbz	r0, 1eed6 <find_key_in_use+0x2e>
		if (key == &key_pool[kdata->id]) {
   1eec2:	7863      	ldrb	r3, [r4, #1]
   1eec4:	4a04      	ldr	r2, [pc, #16]	; (1eed8 <find_key_in_use+0x30>)
   1eec6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   1eeca:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1eece:	4298      	cmp	r0, r3
			kdata->in_use = true;
   1eed0:	bf04      	itt	eq
   1eed2:	2301      	moveq	r3, #1
   1eed4:	7023      	strbeq	r3, [r4, #0]
}
   1eed6:	bd38      	pop	{r3, r4, r5, pc}
   1eed8:	20001cb8 	.word	0x20001cb8

0001eedc <bt_keys_clear>:
{
   1eedc:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   1eede:	7a03      	ldrb	r3, [r0, #8]
   1eee0:	075b      	lsls	r3, r3, #29
{
   1eee2:	b08c      	sub	sp, #48	; 0x30
   1eee4:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1eee6:	d501      	bpl.n	1eeec <bt_keys_clear+0x10>
		bt_id_del(keys);
   1eee8:	f7f8 ffee 	bl	17ec8 <bt_id_del>
		if (keys->id) {
   1eeec:	4625      	mov	r5, r4
   1eeee:	f815 2b01 	ldrb.w	r2, [r5], #1
   1eef2:	b1b2      	cbz	r2, 1ef22 <bt_keys_clear+0x46>
			u8_to_dec(id, sizeof(id), keys->id);
   1eef4:	ae02      	add	r6, sp, #8
   1eef6:	2104      	movs	r1, #4
   1eef8:	4630      	mov	r0, r6
   1eefa:	f013 feaa 	bl	32c52 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1eefe:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   1ef00:	4a09      	ldr	r2, [pc, #36]	; (1ef28 <bt_keys_clear+0x4c>)
   1ef02:	462b      	mov	r3, r5
   1ef04:	2124      	movs	r1, #36	; 0x24
   1ef06:	a803      	add	r0, sp, #12
   1ef08:	f7f6 fe4c 	bl	15ba4 <bt_settings_encode_key>
		settings_delete(key);
   1ef0c:	a803      	add	r0, sp, #12
   1ef0e:	f015 f829 	bl	33f64 <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   1ef12:	2288      	movs	r2, #136	; 0x88
   1ef14:	2100      	movs	r1, #0
   1ef16:	4620      	mov	r0, r4
}
   1ef18:	b00c      	add	sp, #48	; 0x30
   1ef1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(keys, 0, sizeof(*keys));
   1ef1e:	f016 bb15 	b.w	3554c <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1ef22:	9200      	str	r2, [sp, #0]
   1ef24:	e7ec      	b.n	1ef00 <bt_keys_clear+0x24>
   1ef26:	bf00      	nop
   1ef28:	0003e88f 	.word	0x0003e88f

0001ef2c <keys_set>:
{
   1ef2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ef30:	b0a3      	sub	sp, #140	; 0x8c
   1ef32:	4614      	mov	r4, r2
   1ef34:	af00      	add	r7, sp, #0
	if (!name) {
   1ef36:	4605      	mov	r5, r0
   1ef38:	b988      	cbnz	r0, 1ef5e <keys_set+0x32>
		LOG_ERR("Insufficient number of arguments");
   1ef3a:	466c      	mov	r4, sp
   1ef3c:	b088      	sub	sp, #32
   1ef3e:	466a      	mov	r2, sp
   1ef40:	4b74      	ldr	r3, [pc, #464]	; (1f114 <keys_set+0x1e8>)
   1ef42:	6153      	str	r3, [r2, #20]
   1ef44:	4b74      	ldr	r3, [pc, #464]	; (1f118 <keys_set+0x1ec>)
   1ef46:	6193      	str	r3, [r2, #24]
   1ef48:	2303      	movs	r3, #3
   1ef4a:	f842 3f10 	str.w	r3, [r2, #16]!
   1ef4e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ef52:	4603      	mov	r3, r0
   1ef54:	4871      	ldr	r0, [pc, #452]	; (1f11c <keys_set+0x1f0>)
   1ef56:	f7f4 f90d 	bl	13174 <z_impl_z_log_msg_static_create>
   1ef5a:	46a5      	mov	sp, r4
			return -EINVAL;
   1ef5c:	e018      	b.n	1ef90 <keys_set+0x64>
	len = read_cb(cb_arg, val, sizeof(val));
   1ef5e:	227c      	movs	r2, #124	; 0x7c
   1ef60:	f107 010c 	add.w	r1, r7, #12
   1ef64:	4618      	mov	r0, r3
   1ef66:	47a0      	blx	r4
	if (len < 0) {
   1ef68:	1e04      	subs	r4, r0, #0
   1ef6a:	da18      	bge.n	1ef9e <keys_set+0x72>
		LOG_ERR("Failed to read value (err %zd)", len);
   1ef6c:	466d      	mov	r5, sp
   1ef6e:	b088      	sub	sp, #32
   1ef70:	466a      	mov	r2, sp
   1ef72:	4b6b      	ldr	r3, [pc, #428]	; (1f120 <keys_set+0x1f4>)
   1ef74:	6153      	str	r3, [r2, #20]
   1ef76:	4b68      	ldr	r3, [pc, #416]	; (1f118 <keys_set+0x1ec>)
   1ef78:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1ef7c:	2304      	movs	r3, #4
   1ef7e:	f842 3f10 	str.w	r3, [r2, #16]!
   1ef82:	4866      	ldr	r0, [pc, #408]	; (1f11c <keys_set+0x1f0>)
   1ef84:	2300      	movs	r3, #0
   1ef86:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1ef8a:	f7f4 f8f3 	bl	13174 <z_impl_z_log_msg_static_create>
   1ef8e:	46ad      	mov	sp, r5
		return -EINVAL;
   1ef90:	f06f 0615 	mvn.w	r6, #21
}
   1ef94:	4630      	mov	r0, r6
   1ef96:	378c      	adds	r7, #140	; 0x8c
   1ef98:	46bd      	mov	sp, r7
   1ef9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   1ef9e:	1d39      	adds	r1, r7, #4
   1efa0:	4628      	mov	r0, r5
   1efa2:	f016 fb9c 	bl	356de <bt_settings_decode_key>
	if (err) {
   1efa6:	4606      	mov	r6, r0
   1efa8:	b188      	cbz	r0, 1efce <keys_set+0xa2>
		LOG_ERR("Unable to decode address %s", name);
   1efaa:	466c      	mov	r4, sp
   1efac:	b08a      	sub	sp, #40	; 0x28
   1efae:	466a      	mov	r2, sp
   1efb0:	4b5c      	ldr	r3, [pc, #368]	; (1f124 <keys_set+0x1f8>)
   1efb2:	6153      	str	r3, [r2, #20]
   1efb4:	4b58      	ldr	r3, [pc, #352]	; (1f118 <keys_set+0x1ec>)
   1efb6:	e9c2 3506 	strd	r3, r5, [r2, #24]
   1efba:	f240 3301 	movw	r3, #769	; 0x301
   1efbe:	8413      	strh	r3, [r2, #32]
   1efc0:	4b59      	ldr	r3, [pc, #356]	; (1f128 <keys_set+0x1fc>)
   1efc2:	f842 3f10 	str.w	r3, [r2, #16]!
   1efc6:	2300      	movs	r3, #0
   1efc8:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1efcc:	e7c2      	b.n	1ef54 <keys_set+0x28>
	settings_name_next(name, &next);
   1efce:	4639      	mov	r1, r7
   1efd0:	4628      	mov	r0, r5
   1efd2:	f014 ffef 	bl	33fb4 <settings_name_next>
	if (!next) {
   1efd6:	6838      	ldr	r0, [r7, #0]
   1efd8:	b198      	cbz	r0, 1f002 <keys_set+0xd6>
		unsigned long next_id = strtoul(next, NULL, 10);
   1efda:	220a      	movs	r2, #10
   1efdc:	4631      	mov	r1, r6
   1efde:	f016 f9d5 	bl	3538c <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1efe2:	b170      	cbz	r0, 1f002 <keys_set+0xd6>
			LOG_ERR("Invalid local identity %lu", next_id);
   1efe4:	466c      	mov	r4, sp
   1efe6:	b088      	sub	sp, #32
   1efe8:	466a      	mov	r2, sp
   1efea:	4b50      	ldr	r3, [pc, #320]	; (1f12c <keys_set+0x200>)
   1efec:	6153      	str	r3, [r2, #20]
   1efee:	4b4a      	ldr	r3, [pc, #296]	; (1f118 <keys_set+0x1ec>)
   1eff0:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1eff4:	2304      	movs	r3, #4
   1eff6:	f842 3f10 	str.w	r3, [r2, #16]!
   1effa:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1effe:	4633      	mov	r3, r6
   1f000:	e7a8      	b.n	1ef54 <keys_set+0x28>
	if (!len) {
   1f002:	bb1c      	cbnz	r4, 1f04c <keys_set+0x120>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1f004:	1d3a      	adds	r2, r7, #4
   1f006:	4621      	mov	r1, r4
   1f008:	203f      	movs	r0, #63	; 0x3f
   1f00a:	f7ff fed7 	bl	1edbc <bt_keys_find>
		if (keys) {
   1f00e:	b120      	cbz	r0, 1f01a <keys_set+0xee>
			(void)memset(keys, 0, sizeof(*keys));
   1f010:	2288      	movs	r2, #136	; 0x88
   1f012:	4621      	mov	r1, r4
   1f014:	f016 fa9a 	bl	3554c <memset>
			LOG_DBG("Cleared keys for %s", bt_addr_le_str(&addr));
   1f018:	e7bc      	b.n	1ef94 <keys_set+0x68>
			LOG_WRN("Unable to find deleted keys for %s", bt_addr_le_str(&addr));
   1f01a:	1d38      	adds	r0, r7, #4
   1f01c:	f7f6 fab4 	bl	15588 <bt_addr_le_str>
   1f020:	466d      	mov	r5, sp
   1f022:	b08a      	sub	sp, #40	; 0x28
   1f024:	466a      	mov	r2, sp
   1f026:	4b42      	ldr	r3, [pc, #264]	; (1f130 <keys_set+0x204>)
   1f028:	6153      	str	r3, [r2, #20]
   1f02a:	4b3b      	ldr	r3, [pc, #236]	; (1f118 <keys_set+0x1ec>)
   1f02c:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1f030:	f240 3301 	movw	r3, #769	; 0x301
   1f034:	8413      	strh	r3, [r2, #32]
   1f036:	4b3c      	ldr	r3, [pc, #240]	; (1f128 <keys_set+0x1fc>)
   1f038:	f842 3f10 	str.w	r3, [r2, #16]!
   1f03c:	4837      	ldr	r0, [pc, #220]	; (1f11c <keys_set+0x1f0>)
   1f03e:	4623      	mov	r3, r4
   1f040:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   1f044:	f7f4 f896 	bl	13174 <z_impl_z_log_msg_static_create>
   1f048:	46ad      	mov	sp, r5
   1f04a:	e7a3      	b.n	1ef94 <keys_set+0x68>
	keys = bt_keys_get_addr(id, &addr);
   1f04c:	1d39      	adds	r1, r7, #4
   1f04e:	2000      	movs	r0, #0
   1f050:	f7ff fe30 	bl	1ecb4 <bt_keys_get_addr>
	if (!keys) {
   1f054:	4605      	mov	r5, r0
   1f056:	b9d0      	cbnz	r0, 1f08e <keys_set+0x162>
		LOG_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1f058:	1d38      	adds	r0, r7, #4
   1f05a:	f7f6 fa95 	bl	15588 <bt_addr_le_str>
   1f05e:	466c      	mov	r4, sp
   1f060:	b08a      	sub	sp, #40	; 0x28
   1f062:	466a      	mov	r2, sp
   1f064:	4b33      	ldr	r3, [pc, #204]	; (1f134 <keys_set+0x208>)
   1f066:	6153      	str	r3, [r2, #20]
   1f068:	4b2b      	ldr	r3, [pc, #172]	; (1f118 <keys_set+0x1ec>)
   1f06a:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1f06e:	f240 3301 	movw	r3, #769	; 0x301
   1f072:	8413      	strh	r3, [r2, #32]
   1f074:	4b2c      	ldr	r3, [pc, #176]	; (1f128 <keys_set+0x1fc>)
   1f076:	f842 3f10 	str.w	r3, [r2, #16]!
   1f07a:	4828      	ldr	r0, [pc, #160]	; (1f11c <keys_set+0x1f0>)
   1f07c:	462b      	mov	r3, r5
   1f07e:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1f082:	f7f4 f877 	bl	13174 <z_impl_z_log_msg_static_create>
		return -ENOMEM;
   1f086:	f06f 060b 	mvn.w	r6, #11
   1f08a:	46a5      	mov	sp, r4
   1f08c:	e782      	b.n	1ef94 <keys_set+0x68>
	if (len != BT_KEYS_STORAGE_LEN) {
   1f08e:	2c7c      	cmp	r4, #124	; 0x7c
   1f090:	d01a      	beq.n	1f0c8 <keys_set+0x19c>
		if (IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST) &&
   1f092:	2c78      	cmp	r4, #120	; 0x78
   1f094:	f8df 9080 	ldr.w	r9, [pc, #128]	; 1f118 <keys_set+0x1ec>
   1f098:	d125      	bne.n	1f0e6 <keys_set+0x1ba>
			LOG_WRN("Keys for %s have no aging counter", bt_addr_le_str(&addr));
   1f09a:	1d38      	adds	r0, r7, #4
   1f09c:	f7f6 fa74 	bl	15588 <bt_addr_le_str>
   1f0a0:	46e8      	mov	r8, sp
   1f0a2:	b08a      	sub	sp, #40	; 0x28
   1f0a4:	466a      	mov	r2, sp
   1f0a6:	4b24      	ldr	r3, [pc, #144]	; (1f138 <keys_set+0x20c>)
   1f0a8:	61d0      	str	r0, [r2, #28]
   1f0aa:	e9c2 3905 	strd	r3, r9, [r2, #20]
   1f0ae:	f240 3301 	movw	r3, #769	; 0x301
   1f0b2:	8413      	strh	r3, [r2, #32]
   1f0b4:	4b1c      	ldr	r3, [pc, #112]	; (1f128 <keys_set+0x1fc>)
   1f0b6:	f842 3f10 	str.w	r3, [r2, #16]!
   1f0ba:	4818      	ldr	r0, [pc, #96]	; (1f11c <keys_set+0x1f0>)
   1f0bc:	2300      	movs	r3, #0
   1f0be:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   1f0c2:	f7f4 f857 	bl	13174 <z_impl_z_log_msg_static_create>
   1f0c6:	46c5      	mov	sp, r8
		memcpy(keys->storage_start, val, len);
   1f0c8:	4622      	mov	r2, r4
   1f0ca:	f107 010c 	add.w	r1, r7, #12
   1f0ce:	f105 000c 	add.w	r0, r5, #12
   1f0d2:	f016 fa30 	bl	35536 <memcpy>
	if (aging_counter_val < keys->aging_counter) {
   1f0d6:	4b19      	ldr	r3, [pc, #100]	; (1f13c <keys_set+0x210>)
   1f0d8:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
   1f0dc:	6819      	ldr	r1, [r3, #0]
   1f0de:	428a      	cmp	r2, r1
		aging_counter_val = keys->aging_counter;
   1f0e0:	bf88      	it	hi
   1f0e2:	601a      	strhi	r2, [r3, #0]
   1f0e4:	e756      	b.n	1ef94 <keys_set+0x68>
			LOG_ERR("Invalid key length %zd != %zu", len, BT_KEYS_STORAGE_LEN);
   1f0e6:	466e      	mov	r6, sp
   1f0e8:	b08a      	sub	sp, #40	; 0x28
   1f0ea:	466a      	mov	r2, sp
   1f0ec:	4b14      	ldr	r3, [pc, #80]	; (1f140 <keys_set+0x214>)
   1f0ee:	61d4      	str	r4, [r2, #28]
   1f0f0:	e9c2 3905 	strd	r3, r9, [r2, #20]
   1f0f4:	237c      	movs	r3, #124	; 0x7c
   1f0f6:	6213      	str	r3, [r2, #32]
   1f0f8:	2305      	movs	r3, #5
   1f0fa:	f842 3f10 	str.w	r3, [r2, #16]!
   1f0fe:	4807      	ldr	r0, [pc, #28]	; (1f11c <keys_set+0x1f0>)
   1f100:	2300      	movs	r3, #0
   1f102:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1f106:	f7f4 f835 	bl	13174 <z_impl_z_log_msg_static_create>
			bt_keys_clear(keys);
   1f10a:	4628      	mov	r0, r5
   1f10c:	46b5      	mov	sp, r6
   1f10e:	f7ff fee5 	bl	1eedc <bt_keys_clear>
			return -EINVAL;
   1f112:	e73d      	b.n	1ef90 <keys_set+0x64>
   1f114:	0003c1d3 	.word	0x0003c1d3
   1f118:	0003e875 	.word	0x0003e875
   1f11c:	000395d8 	.word	0x000395d8
   1f120:	0003e79f 	.word	0x0003e79f
   1f124:	0003db7f 	.word	0x0003db7f
   1f128:	01000004 	.word	0x01000004
   1f12c:	0003db9f 	.word	0x0003db9f
   1f130:	0003e7c2 	.word	0x0003e7c2
   1f134:	0003e7e9 	.word	0x0003e7e9
   1f138:	0003e80c 	.word	0x0003e80c
   1f13c:	20001cb4 	.word	0x20001cb4
   1f140:	0003e832 	.word	0x0003e832

0001f144 <bt_keys_store>:
{
   1f144:	b5b0      	push	{r4, r5, r7, lr}
	if (keys->id) {
   1f146:	4605      	mov	r5, r0
{
   1f148:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   1f14a:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1f14e:	af02      	add	r7, sp, #8
   1f150:	4604      	mov	r4, r0
	if (keys->id) {
   1f152:	b342      	cbz	r2, 1f1a6 <bt_keys_store+0x62>
		u8_to_dec(id, sizeof(id), keys->id);
   1f154:	2104      	movs	r1, #4
   1f156:	4638      	mov	r0, r7
   1f158:	f013 fd7b 	bl	32c52 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1f15c:	9700      	str	r7, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1f15e:	4a13      	ldr	r2, [pc, #76]	; (1f1ac <bt_keys_store+0x68>)
   1f160:	462b      	mov	r3, r5
   1f162:	2124      	movs	r1, #36	; 0x24
   1f164:	1d38      	adds	r0, r7, #4
   1f166:	f7f6 fd1d 	bl	15ba4 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1f16a:	f104 010c 	add.w	r1, r4, #12
   1f16e:	227c      	movs	r2, #124	; 0x7c
   1f170:	1d38      	adds	r0, r7, #4
   1f172:	f7f4 feb7 	bl	13ee4 <settings_save_one>
	if (err) {
   1f176:	4604      	mov	r4, r0
   1f178:	b188      	cbz	r0, 1f19e <bt_keys_store+0x5a>
		LOG_ERR("Failed to save keys (err %d)", err);
   1f17a:	466d      	mov	r5, sp
   1f17c:	b088      	sub	sp, #32
   1f17e:	aa02      	add	r2, sp, #8
   1f180:	4b0b      	ldr	r3, [pc, #44]	; (1f1b0 <bt_keys_store+0x6c>)
   1f182:	6153      	str	r3, [r2, #20]
   1f184:	4b0b      	ldr	r3, [pc, #44]	; (1f1b4 <bt_keys_store+0x70>)
   1f186:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1f18a:	2304      	movs	r3, #4
   1f18c:	f842 3f10 	str.w	r3, [r2, #16]!
   1f190:	4809      	ldr	r0, [pc, #36]	; (1f1b8 <bt_keys_store+0x74>)
   1f192:	2300      	movs	r3, #0
   1f194:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f198:	f7f3 ffec 	bl	13174 <z_impl_z_log_msg_static_create>
   1f19c:	46ad      	mov	sp, r5
}
   1f19e:	4620      	mov	r0, r4
   1f1a0:	3728      	adds	r7, #40	; 0x28
   1f1a2:	46bd      	mov	sp, r7
   1f1a4:	bdb0      	pop	{r4, r5, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1f1a6:	9200      	str	r2, [sp, #0]
   1f1a8:	e7d9      	b.n	1f15e <bt_keys_store+0x1a>
   1f1aa:	bf00      	nop
   1f1ac:	0003e88f 	.word	0x0003e88f
   1f1b0:	0003e854 	.word	0x0003e854
   1f1b4:	0003e87e 	.word	0x0003e87e
   1f1b8:	000395d8 	.word	0x000395d8

0001f1bc <bt_keys_update_usage>:

#endif /* CONFIG_BT_SETTINGS */

#if defined(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
void bt_keys_update_usage(uint8_t id, const bt_addr_le_t *addr)
{
   1f1bc:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(addr != NULL);

	struct bt_keys *keys = bt_keys_find_addr(id, addr);
   1f1be:	f7ff fe63 	bl	1ee88 <bt_keys_find_addr>

	if (!keys) {
   1f1c2:	b150      	cbz	r0, 1f1da <bt_keys_update_usage+0x1e>
		return;
	}

	if (last_keys_updated == keys) {
   1f1c4:	4a05      	ldr	r2, [pc, #20]	; (1f1dc <bt_keys_update_usage+0x20>)
   1f1c6:	6813      	ldr	r3, [r2, #0]
   1f1c8:	4283      	cmp	r3, r0
   1f1ca:	d006      	beq.n	1f1da <bt_keys_update_usage+0x1e>
		return;
	}

	keys->aging_counter = ++aging_counter_val;
   1f1cc:	4904      	ldr	r1, [pc, #16]	; (1f1e0 <bt_keys_update_usage+0x24>)
	last_keys_updated = keys;
   1f1ce:	6010      	str	r0, [r2, #0]
	keys->aging_counter = ++aging_counter_val;
   1f1d0:	680b      	ldr	r3, [r1, #0]
   1f1d2:	3301      	adds	r3, #1
   1f1d4:	600b      	str	r3, [r1, #0]
   1f1d6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	LOG_DBG("Aging counter for %s is set to %u", bt_addr_le_str(addr), keys->aging_counter);

	if (IS_ENABLED(CONFIG_BT_KEYS_SAVE_AGING_COUNTER_ON_PAIRING)) {
		bt_keys_store(keys);
	}
}
   1f1da:	bd08      	pop	{r3, pc}
   1f1dc:	20001cb0 	.word	0x20001cb0
   1f1e0:	20001cb4 	.word	0x20001cb4

0001f1e4 <bt_crypto_f5>:
	return err;
}

int bt_crypto_f5(const uint8_t *w, const uint8_t *n1, const uint8_t *n2, const bt_addr_le_t *a1,
		 const bt_addr_le_t *a2, uint8_t *mackey, uint8_t *ltk)
{
   1f1e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f1e8:	b09a      	sub	sp, #104	; 0x68
   1f1ea:	461d      	mov	r5, r3
   1f1ec:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	static const uint8_t salt[16] = {0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5, 0xa5, 0x38,
					 0x60, 0x37, 0x0b, 0xdb, 0x5a, 0x60, 0x83, 0xbe};
	uint8_t m[53] = {0x00,						 /* counter */
   1f1f0:	4b2e      	ldr	r3, [pc, #184]	; (1f2ac <bt_crypto_f5+0xc8>)
{
   1f1f2:	4616      	mov	r6, r2
	uint8_t m[53] = {0x00,						 /* counter */
   1f1f4:	aa0c      	add	r2, sp, #48	; 0x30
{
   1f1f6:	4684      	mov	ip, r0
   1f1f8:	468a      	mov	sl, r1
	uint8_t m[53] = {0x00,						 /* counter */
   1f1fa:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   1f1fe:	4690      	mov	r8, r2
   1f200:	6818      	ldr	r0, [r3, #0]
   1f202:	6859      	ldr	r1, [r3, #4]
   1f204:	4614      	mov	r4, r2
   1f206:	c403      	stmia	r4!, {r0, r1}
   1f208:	3308      	adds	r3, #8
   1f20a:	4573      	cmp	r3, lr
   1f20c:	4622      	mov	r2, r4
   1f20e:	d1f7      	bne.n	1f200 <bt_crypto_f5+0x1c>
   1f210:	6818      	ldr	r0, [r3, #0]
   1f212:	791b      	ldrb	r3, [r3, #4]
   1f214:	6020      	str	r0, [r4, #0]
   1f216:	7123      	strb	r3, [r4, #4]

	LOG_DBG("w %s", bt_hex(w, 32));
	LOG_DBG("n1 %s", bt_hex(n1, 16));
	LOG_DBG("n2 %s", bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
   1f218:	4661      	mov	r1, ip
   1f21a:	2220      	movs	r2, #32
   1f21c:	a804      	add	r0, sp, #16
   1f21e:	f018 fb13 	bl	37848 <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(salt, ws, 32, t);
   1f222:	4823      	ldr	r0, [pc, #140]	; (1f2b0 <bt_crypto_f5+0xcc>)
   1f224:	466b      	mov	r3, sp
   1f226:	2220      	movs	r2, #32
   1f228:	a904      	add	r1, sp, #16
   1f22a:	f018 fb25 	bl	37878 <bt_crypto_aes_cmac>
	if (err) {
   1f22e:	4604      	mov	r4, r0
   1f230:	bbc0      	cbnz	r0, 1f2a4 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("t %s", bt_hex(t, 16));

	sys_memcpy_swap(m + 5, n1, 16);
   1f232:	2210      	movs	r2, #16
   1f234:	4651      	mov	r1, sl
   1f236:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   1f23a:	f018 fb05 	bl	37848 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   1f23e:	2210      	movs	r2, #16
   1f240:	4631      	mov	r1, r6
   1f242:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   1f246:	f018 faff 	bl	37848 <sys_memcpy_swap>
	m[37] = a1->type;
   1f24a:	4629      	mov	r1, r5
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1f24c:	2206      	movs	r2, #6
	m[37] = a1->type;
   1f24e:	f811 3b01 	ldrb.w	r3, [r1], #1
   1f252:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1f256:	f10d 0056 	add.w	r0, sp, #86	; 0x56
   1f25a:	f018 faf5 	bl	37848 <sys_memcpy_swap>
	m[44] = a2->type;
   1f25e:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1f260:	2206      	movs	r2, #6
	m[44] = a2->type;
   1f262:	f811 3b01 	ldrb.w	r3, [r1], #1
   1f266:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1f26a:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
   1f26e:	f018 faeb 	bl	37848 <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(t, m, sizeof(m), mackey);
   1f272:	464b      	mov	r3, r9
   1f274:	2235      	movs	r2, #53	; 0x35
   1f276:	4641      	mov	r1, r8
   1f278:	4668      	mov	r0, sp
   1f27a:	f018 fafd 	bl	37878 <bt_crypto_aes_cmac>
	if (err) {
   1f27e:	4604      	mov	r4, r0
   1f280:	b980      	cbnz	r0, 1f2a4 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("mackey %1s", bt_hex(mackey, 16));

	sys_mem_swap(mackey, 16);
   1f282:	4648      	mov	r0, r9
   1f284:	f018 faea 	bl	3785c <sys_mem_swap.constprop.0>

	/* counter for ltk is 1 */
	m[0] = 0x01;
   1f288:	2301      	movs	r3, #1
   1f28a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30

	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   1f28e:	2235      	movs	r2, #53	; 0x35
   1f290:	463b      	mov	r3, r7
   1f292:	4641      	mov	r1, r8
   1f294:	4668      	mov	r0, sp
   1f296:	f018 faef 	bl	37878 <bt_crypto_aes_cmac>
	if (err) {
   1f29a:	4604      	mov	r4, r0
   1f29c:	b910      	cbnz	r0, 1f2a4 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("ltk %s", bt_hex(ltk, 16));

	sys_mem_swap(ltk, 16);
   1f29e:	4638      	mov	r0, r7
   1f2a0:	f018 fadc 	bl	3785c <sys_mem_swap.constprop.0>

	return 0;
}
   1f2a4:	4620      	mov	r0, r4
   1f2a6:	b01a      	add	sp, #104	; 0x68
   1f2a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1f2ac:	000397a6 	.word	0x000397a6
   1f2b0:	0003e89c 	.word	0x0003e89c

0001f2b4 <bt_crypto_g2>:
	return 0;
}

int bt_crypto_g2(const uint8_t u[32], const uint8_t v[32], const uint8_t x[16], const uint8_t y[16],
		 uint32_t *passkey)
{
   1f2b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f2b6:	b099      	sub	sp, #100	; 0x64
   1f2b8:	4614      	mov	r4, r2
   1f2ba:	460f      	mov	r7, r1
	LOG_DBG("u %s", bt_hex(u, 32));
	LOG_DBG("v %s", bt_hex(v, 32));
	LOG_DBG("x %s", bt_hex(x, 16));
	LOG_DBG("y %s", bt_hex(y, 16));

	sys_memcpy_swap(m, u, 32);
   1f2bc:	2220      	movs	r2, #32
   1f2be:	4601      	mov	r1, r0
   1f2c0:	a804      	add	r0, sp, #16
{
   1f2c2:	461e      	mov	r6, r3
   1f2c4:	9d1e      	ldr	r5, [sp, #120]	; 0x78
	sys_memcpy_swap(m, u, 32);
   1f2c6:	f018 fabf 	bl	37848 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1f2ca:	2220      	movs	r2, #32
   1f2cc:	4639      	mov	r1, r7
   1f2ce:	a80c      	add	r0, sp, #48	; 0x30
   1f2d0:	f018 faba 	bl	37848 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   1f2d4:	2210      	movs	r2, #16
   1f2d6:	4631      	mov	r1, r6
   1f2d8:	a814      	add	r0, sp, #80	; 0x50
   1f2da:	f018 fab5 	bl	37848 <sys_memcpy_swap>

	sys_memcpy_swap(xs, x, 16);
   1f2de:	4621      	mov	r1, r4
   1f2e0:	2210      	movs	r2, #16
   1f2e2:	4668      	mov	r0, sp
   1f2e4:	f018 fab0 	bl	37848 <sys_memcpy_swap>

	/* reuse xs (key) as buffer for result */
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), xs);
   1f2e8:	466b      	mov	r3, sp
   1f2ea:	2250      	movs	r2, #80	; 0x50
   1f2ec:	a904      	add	r1, sp, #16
   1f2ee:	4618      	mov	r0, r3
   1f2f0:	f018 fac2 	bl	37878 <bt_crypto_aes_cmac>
	if (err) {
   1f2f4:	4604      	mov	r4, r0
   1f2f6:	b960      	cbnz	r0, 1f312 <bt_crypto_g2+0x5e>
		return err;
	}
	LOG_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
   1f2f8:	2204      	movs	r2, #4
   1f2fa:	a903      	add	r1, sp, #12
   1f2fc:	4628      	mov	r0, r5
   1f2fe:	f016 f91a 	bl	35536 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1f302:	682b      	ldr	r3, [r5, #0]
   1f304:	4a04      	ldr	r2, [pc, #16]	; (1f318 <bt_crypto_g2+0x64>)
   1f306:	ba1b      	rev	r3, r3
   1f308:	fbb3 f1f2 	udiv	r1, r3, r2
   1f30c:	fb02 3311 	mls	r3, r2, r1, r3
   1f310:	602b      	str	r3, [r5, #0]

	LOG_DBG("passkey %u", *passkey);

	return 0;
}
   1f312:	4620      	mov	r0, r4
   1f314:	b019      	add	sp, #100	; 0x64
   1f316:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f318:	000f4240 	.word	0x000f4240

0001f31c <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
   1f31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f320:	4616      	mov	r6, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   1f322:	1dc2      	adds	r2, r0, #7
   1f324:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   1f328:	1e75      	subs	r5, r6, #1
{
   1f32a:	460f      	mov	r7, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   1f32c:	b2ad      	uxth	r5, r5
	*mem_head = mem_pool;
   1f32e:	6018      	str	r0, [r3, #0]
{
   1f330:	b082      	sub	sp, #8
   1f332:	4604      	mov	r4, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   1f334:	8016      	strh	r6, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   1f336:	2100      	movs	r1, #0
   1f338:	2204      	movs	r2, #4
   1f33a:	fb07 0005 	mla	r0, r7, r5, r0
   1f33e:	f016 f905 	bl	3554c <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   1f342:	b1bd      	cbz	r5, 1f374 <mem_init+0x58>
   1f344:	3e02      	subs	r6, #2
   1f346:	b2b6      	uxth	r6, r6
   1f348:	fb06 7307 	mla	r3, r6, r7, r7
   1f34c:	fb06 f807 	mul.w	r8, r6, r7
   1f350:	441c      	add	r4, r3
   1f352:	eba8 0803 	sub.w	r8, r8, r3
   1f356:	2500      	movs	r5, #0
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   1f358:	2204      	movs	r2, #4
   1f35a:	eb04 0008 	add.w	r0, r4, r8
   1f35e:	eb0d 0102 	add.w	r1, sp, r2
		next = (uint32_t)((uint8_t *) mem_pool +
   1f362:	9401      	str	r4, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   1f364:	f016 f8e7 	bl	35536 <memcpy>
	while (mem_count--) {
   1f368:	42b5      	cmp	r5, r6
   1f36a:	eba4 0407 	sub.w	r4, r4, r7
   1f36e:	f105 0501 	add.w	r5, r5, #1
   1f372:	d1f1      	bne.n	1f358 <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
   1f374:	b002      	add	sp, #8
   1f376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f37a:	bf00      	nop

0001f37c <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   1f37c:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
   1f37e:	6805      	ldr	r5, [r0, #0]
{
   1f380:	b082      	sub	sp, #8
	if (*mem_head) {
   1f382:	b19d      	cbz	r5, 1f3ac <mem_acquire+0x30>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   1f384:	1deb      	adds	r3, r5, #7
   1f386:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   1f38a:	2204      	movs	r2, #4
   1f38c:	4604      	mov	r4, r0
   1f38e:	4629      	mov	r1, r5
   1f390:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   1f394:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   1f396:	f016 f8ce 	bl	35536 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   1f39a:	9b01      	ldr	r3, [sp, #4]
   1f39c:	b12b      	cbz	r3, 1f3aa <mem_acquire+0x2e>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   1f39e:	3307      	adds	r3, #7
   1f3a0:	f023 0303 	bic.w	r3, r3, #3
		free_count--;
   1f3a4:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   1f3a6:	801e      	strh	r6, [r3, #0]
				free_count;
		}

		*mem_head = head;
   1f3a8:	9b01      	ldr	r3, [sp, #4]
   1f3aa:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
   1f3ac:	4628      	mov	r0, r5
   1f3ae:	b002      	add	sp, #8
   1f3b0:	bd70      	pop	{r4, r5, r6, pc}
   1f3b2:	bf00      	nop

0001f3b4 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
   1f3b4:	b570      	push	{r4, r5, r6, lr}
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   1f3b6:	680b      	ldr	r3, [r1, #0]
{
   1f3b8:	460c      	mov	r4, r1
   1f3ba:	4605      	mov	r5, r0
	if (*mem_head) {
   1f3bc:	b183      	cbz	r3, 1f3e0 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   1f3be:	3307      	adds	r3, #7
   1f3c0:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
	}
	free_count++;
   1f3c4:	881e      	ldrh	r6, [r3, #0]
   1f3c6:	3601      	adds	r6, #1
   1f3c8:	b2b6      	uxth	r6, r6

	memcpy(mem, mem_head, sizeof(mem));
   1f3ca:	2204      	movs	r2, #4
   1f3cc:	4621      	mov	r1, r4
   1f3ce:	4628      	mov	r0, r5
   1f3d0:	f016 f8b1 	bl	35536 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   1f3d4:	1deb      	adds	r3, r5, #7
   1f3d6:	f023 0303 	bic.w	r3, r3, #3
   1f3da:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
   1f3dc:	6025      	str	r5, [r4, #0]
}
   1f3de:	bd70      	pop	{r4, r5, r6, pc}
   1f3e0:	2601      	movs	r6, #1
   1f3e2:	e7f2      	b.n	1f3ca <mem_release+0x16>

0001f3e4 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
   1f3e4:	fb02 0001 	mla	r0, r2, r1, r0
   1f3e8:	4770      	bx	lr
   1f3ea:	bf00      	nop

0001f3ec <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size;
   1f3ec:	1a40      	subs	r0, r0, r1
   1f3ee:	fb90 f0f2 	sdiv	r0, r0, r2
}
   1f3f2:	b280      	uxth	r0, r0
   1f3f4:	4770      	bx	lr
   1f3f6:	bf00      	nop

0001f3f8 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
   1f3f8:	1e53      	subs	r3, r2, #1
	src += len;
   1f3fa:	4411      	add	r1, r2
	while (len--) {
   1f3fc:	b29b      	uxth	r3, r3
   1f3fe:	b142      	cbz	r2, 1f412 <mem_rcopy+0x1a>
   1f400:	43db      	mvns	r3, r3
   1f402:	3801      	subs	r0, #1
   1f404:	18ca      	adds	r2, r1, r3
		*dst++ = *--src;
   1f406:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   1f40a:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
   1f40e:	4291      	cmp	r1, r2
   1f410:	d1f9      	bne.n	1f406 <mem_rcopy+0xe>
	}
}
   1f412:	4770      	bx	lr

0001f414 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   1f414:	4401      	add	r1, r0
   1f416:	e002      	b.n	1f41e <mem_nz+0xa>
		if (*src++) {
   1f418:	f810 3b01 	ldrb.w	r3, [r0], #1
   1f41c:	b91b      	cbnz	r3, 1f426 <mem_nz+0x12>
	while (len--) {
   1f41e:	4288      	cmp	r0, r1
   1f420:	d1fa      	bne.n	1f418 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
   1f422:	2000      	movs	r0, #0
   1f424:	4770      	bx	lr
			return 1;
   1f426:	2001      	movs	r0, #1
}
   1f428:	4770      	bx	lr
   1f42a:	bf00      	nop

0001f42c <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   1f42c:	6010      	str	r0, [r2, #0]
   1f42e:	6008      	str	r0, [r1, #0]

	return link;
}
   1f430:	4770      	bx	lr
   1f432:	bf00      	nop

0001f434 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   1f434:	680a      	ldr	r2, [r1, #0]
{
   1f436:	4603      	mov	r3, r0
	if (*head != *tail) {
   1f438:	6800      	ldr	r0, [r0, #0]
   1f43a:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
   1f43c:	bf05      	ittet	eq
   1f43e:	2200      	moveq	r2, #0
   1f440:	600a      	streq	r2, [r1, #0]
		return NULL;
   1f442:	2000      	movne	r0, #0
	*head = *tail = NULL;
   1f444:	601a      	streq	r2, [r3, #0]

	return old_head;
}
   1f446:	4770      	bx	lr

0001f448 <memq_enqueue>:
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   1f448:	f8d2 c000 	ldr.w	ip, [r2]
   1f44c:	f8cc 0000 	str.w	r0, [ip]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   1f450:	f8d2 c000 	ldr.w	ip, [r2]
   1f454:	f8cc 1004 	str.w	r1, [ip, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
   1f458:	6010      	str	r0, [r2, #0]

	return link;
}
   1f45a:	4770      	bx	lr

0001f45c <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   1f45c:	4288      	cmp	r0, r1
   1f45e:	d003      	beq.n	1f468 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   1f460:	b11a      	cbz	r2, 1f46a <memq_peek+0xe>
		*mem = head->mem;
   1f462:	6843      	ldr	r3, [r0, #4]
   1f464:	6013      	str	r3, [r2, #0]
   1f466:	4770      	bx	lr
		return NULL;
   1f468:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   1f46a:	4770      	bx	lr

0001f46c <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   1f46c:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   1f46e:	4283      	cmp	r3, r0
   1f470:	d009      	beq.n	1f486 <memq_dequeue+0x1a>
	if (mem) {
   1f472:	b12a      	cbz	r2, 1f480 <memq_dequeue+0x14>
		*mem = head->mem;
   1f474:	6858      	ldr	r0, [r3, #4]
   1f476:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   1f478:	681a      	ldr	r2, [r3, #0]
   1f47a:	600a      	str	r2, [r1, #0]

	return old_head;
}
   1f47c:	4618      	mov	r0, r3
   1f47e:	4770      	bx	lr
	if (old_head == NULL) {
   1f480:	2b00      	cmp	r3, #0
   1f482:	d1f9      	bne.n	1f478 <memq_dequeue+0xc>
   1f484:	e7fa      	b.n	1f47c <memq_dequeue+0x10>
		return NULL; /* queue is empty */
   1f486:	2300      	movs	r3, #0
   1f488:	e7f8      	b.n	1f47c <memq_dequeue+0x10>
   1f48a:	bf00      	nop

0001f48c <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
   1f48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f490:	f8df 8030 	ldr.w	r8, [pc, #48]	; 1f4c4 <mayfly_init+0x38>
   1f494:	4e0c      	ldr	r6, [pc, #48]	; (1f4c8 <mayfly_init+0x3c>)
   1f496:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
   1f498:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
   1f49c:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
   1f49e:	1d22      	adds	r2, r4, #4
   1f4a0:	4621      	mov	r1, r4
   1f4a2:	4628      	mov	r0, r5
		while (caller_id--) {
   1f4a4:	3c0c      	subs	r4, #12
			memq_init(&mfl[callee_id][caller_id],
   1f4a6:	f7ff ffc1 	bl	1f42c <memq_init>
		while (caller_id--) {
   1f4aa:	42a6      	cmp	r6, r4
   1f4ac:	f1a5 0508 	sub.w	r5, r5, #8
   1f4b0:	d1f5      	bne.n	1f49e <mayfly_init+0x12>
	while (callee_id--) {
   1f4b2:	3f04      	subs	r7, #4
   1f4b4:	1d3b      	adds	r3, r7, #4
   1f4b6:	f1a8 0820 	sub.w	r8, r8, #32
   1f4ba:	f1a6 0630 	sub.w	r6, r6, #48	; 0x30
   1f4be:	d1eb      	bne.n	1f498 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   1f4c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f4c4:	20001dbc 	.word	0x20001dbc
   1f4c8:	20001e48 	.word	0x20001e48

0001f4cc <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
   1f4cc:	b410      	push	{r4}
   1f4ce:	4603      	mov	r3, r0
   1f4d0:	468c      	mov	ip, r1
	if (enable) {
   1f4d2:	b19a      	cbz	r2, 1f4fc <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
   1f4d4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1f4d8:	4814      	ldr	r0, [pc, #80]	; (1f52c <mayfly_enable+0x60>)
   1f4da:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   1f4de:	0109      	lsls	r1, r1, #4
   1f4e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   1f4e4:	4401      	add	r1, r0
   1f4e6:	7a48      	ldrb	r0, [r1, #9]
   1f4e8:	7a0c      	ldrb	r4, [r1, #8]
   1f4ea:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   1f4ec:	bf04      	itt	eq
   1f4ee:	3001      	addeq	r0, #1
   1f4f0:	7208      	strbeq	r0, [r1, #8]

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
   1f4f2:	bc10      	pop	{r4}
		mayfly_enable_cb(caller_id, callee_id, enable);
   1f4f4:	4661      	mov	r1, ip
   1f4f6:	4618      	mov	r0, r3
   1f4f8:	f00d bf16 	b.w	2d328 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   1f4fc:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   1f500:	4c0a      	ldr	r4, [pc, #40]	; (1f52c <mayfly_enable+0x60>)
   1f502:	0112      	lsls	r2, r2, #4
   1f504:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1f508:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1f50c:	4423      	add	r3, r4
   1f50e:	7a9c      	ldrb	r4, [r3, #10]
   1f510:	7ada      	ldrb	r2, [r3, #11]
   1f512:	42a2      	cmp	r2, r4
   1f514:	d001      	beq.n	1f51a <mayfly_enable+0x4e>
}
   1f516:	bc10      	pop	{r4}
   1f518:	4770      	bx	lr
			mft[callee_id][caller_id].disable_req++;
   1f51a:	3201      	adds	r2, #1
   1f51c:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
   1f51e:	4b04      	ldr	r3, [pc, #16]	; (1f530 <mayfly_enable+0x64>)
   1f520:	2201      	movs	r2, #1
   1f522:	545a      	strb	r2, [r3, r1]
}
   1f524:	bc10      	pop	{r4}
			mayfly_pend(caller_id, callee_id);
   1f526:	f00d bf53 	b.w	2d3d0 <mayfly_pend>
   1f52a:	bf00      	nop
   1f52c:	20001dc4 	.word	0x20001dc4
   1f530:	20001d40 	.word	0x20001d40

0001f534 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
   1f534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f536:	4606      	mov	r6, r0
   1f538:	461c      	mov	r4, r3
   1f53a:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   1f53c:	b302      	cbz	r2, 1f580 <mayfly_enqueue+0x4c>

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   1f53e:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   1f540:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   1f542:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   1f544:	f012 0203 	ands.w	r2, r2, #3
   1f548:	d13a      	bne.n	1f5c0 <mayfly_enqueue+0x8c>
   1f54a:	4f27      	ldr	r7, [pc, #156]	; (1f5e8 <mayfly_enqueue+0xb4>)
   1f54c:	0071      	lsls	r1, r6, #1
   1f54e:	ea4f 0c45 	mov.w	ip, r5, lsl #1
		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   1f552:	4431      	add	r1, r6
   1f554:	44ac      	add	ip, r5
   1f556:	0089      	lsls	r1, r1, #2
   1f558:	eb01 110c 	add.w	r1, r1, ip, lsl #4
	m->_req = ack + 1;
   1f55c:	3301      	adds	r3, #1
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   1f55e:	3104      	adds	r1, #4
	m->_req = ack + 1;
   1f560:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   1f562:	187a      	adds	r2, r7, r1
   1f564:	6860      	ldr	r0, [r4, #4]
	m->_req = ack + 1;
   1f566:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   1f568:	4621      	mov	r1, r4
   1f56a:	f7ff ff6d 	bl	1f448 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
   1f56e:	4b1f      	ldr	r3, [pc, #124]	; (1f5ec <mayfly_enqueue+0xb8>)
   1f570:	2201      	movs	r2, #1
   1f572:	555a      	strb	r2, [r3, r5]

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   1f574:	4629      	mov	r1, r5
   1f576:	4630      	mov	r0, r6
   1f578:	f00d ff2a 	bl	2d3d0 <mayfly_pend>
		return 0;
   1f57c:	2000      	movs	r0, #0

	return 0;
}
   1f57e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   1f580:	f00d ff10 	bl	2d3a4 <mayfly_prio_is_equal>
   1f584:	2800      	cmp	r0, #0
   1f586:	d0da      	beq.n	1f53e <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
   1f588:	4629      	mov	r1, r5
   1f58a:	4630      	mov	r0, r6
   1f58c:	f00d feea 	bl	2d364 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   1f590:	2800      	cmp	r0, #0
   1f592:	d0d4      	beq.n	1f53e <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
   1f594:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   1f598:	eb06 0146 	add.w	r1, r6, r6, lsl #1
   1f59c:	4f12      	ldr	r7, [pc, #72]	; (1f5e8 <mayfly_enqueue+0xb4>)
	ack = m->_ack;
   1f59e:	7863      	ldrb	r3, [r4, #1]
		(mft[callee_id][caller_id].disable_req !=
   1f5a0:	0112      	lsls	r2, r2, #4
   1f5a2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   1f5a6:	443a      	add	r2, r7
   1f5a8:	0071      	lsls	r1, r6, #1
		!mayfly_is_enabled(caller_id, callee_id) ||
   1f5aa:	7a90      	ldrb	r0, [r2, #10]
   1f5ac:	7ad2      	ldrb	r2, [r2, #11]
   1f5ae:	4290      	cmp	r0, r2
		(mft[callee_id][caller_id].disable_req !=
   1f5b0:	ea4f 0c45 	mov.w	ip, r5, lsl #1
		!mayfly_is_enabled(caller_id, callee_id) ||
   1f5b4:	d00c      	beq.n	1f5d0 <mayfly_enqueue+0x9c>
	state = (m->_req - ack) & 0x03;
   1f5b6:	7820      	ldrb	r0, [r4, #0]
   1f5b8:	1ac0      	subs	r0, r0, r3
	if (state != 0U) {
   1f5ba:	f010 0203 	ands.w	r2, r0, #3
   1f5be:	d0c8      	beq.n	1f552 <mayfly_enqueue+0x1e>
			if (state != 1U) {
   1f5c0:	2a01      	cmp	r2, #1
   1f5c2:	d003      	beq.n	1f5cc <mayfly_enqueue+0x98>
				m->_req = ack + 1;
   1f5c4:	3301      	adds	r3, #1
   1f5c6:	b2db      	uxtb	r3, r3
   1f5c8:	7023      	strb	r3, [r4, #0]
				goto mayfly_enqueue_pend;
   1f5ca:	e7d0      	b.n	1f56e <mayfly_enqueue+0x3a>
			return 1;
   1f5cc:	4610      	mov	r0, r2
}
   1f5ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	state = (m->_req - ack) & 0x03;
   1f5d0:	7822      	ldrb	r2, [r4, #0]
   1f5d2:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   1f5d4:	0792      	lsls	r2, r2, #30
   1f5d6:	d002      	beq.n	1f5de <mayfly_enqueue+0xaa>
		m->_req = ack + 2;
   1f5d8:	3302      	adds	r3, #2
   1f5da:	b2db      	uxtb	r3, r3
   1f5dc:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
   1f5de:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   1f5e2:	4798      	blx	r3
		return 0;
   1f5e4:	e7ca      	b.n	1f57c <mayfly_enqueue+0x48>
   1f5e6:	bf00      	nop
   1f5e8:	20001dc4 	.word	0x20001dc4
   1f5ec:	20001d40 	.word	0x20001d40

0001f5f0 <mayfly_run>:
		}
	}
}

void mayfly_run(uint8_t callee_id)
{
   1f5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
   1f5f4:	f8df 9140 	ldr.w	r9, [pc, #320]	; 1f738 <mayfly_run+0x148>
   1f5f8:	f819 3000 	ldrb.w	r3, [r9, r0]
{
   1f5fc:	b089      	sub	sp, #36	; 0x24
	if (!mfp[callee_id]) {
   1f5fe:	2b00      	cmp	r3, #0
   1f600:	d060      	beq.n	1f6c4 <mayfly_run+0xd4>
		return;
	}
	mfp[callee_id] = 0U;
   1f602:	f8df a138 	ldr.w	sl, [pc, #312]	; 1f73c <mayfly_run+0x14c>
   1f606:	9003      	str	r0, [sp, #12]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   1f608:	223c      	movs	r2, #60	; 0x3c
   1f60a:	2304      	movs	r3, #4
	mfp[callee_id] = 0U;
   1f60c:	2500      	movs	r5, #0
   1f60e:	eb00 0b40 	add.w	fp, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   1f612:	fb12 3300 	smlabb	r3, r2, r0, r3

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
   1f616:	2403      	movs	r4, #3
   1f618:	e9cd 5504 	strd	r5, r5, [sp, #16]
	mfp[callee_id] = 0U;
   1f61c:	f809 5000 	strb.w	r5, [r9, r0]
	while (caller_id--) {
   1f620:	eb0a 1b0b 	add.w	fp, sl, fp, lsl #4
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   1f624:	9302      	str	r3, [sp, #8]
   1f626:	4625      	mov	r5, r4
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
   1f628:	465c      	mov	r4, fp
		struct mayfly *m = 0;
   1f62a:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
   1f62c:	f8db 1028 	ldr.w	r1, [fp, #40]	; 0x28
   1f630:	f854 0f24 	ldr.w	r0, [r4, #36]!
		struct mayfly *m = 0;
   1f634:	9307      	str	r3, [sp, #28]
		link = memq_peek(mft[callee_id][caller_id].head,
   1f636:	aa07      	add	r2, sp, #28
   1f638:	f7ff ff10 	bl	1f45c <memq_peek>
   1f63c:	9501      	str	r5, [sp, #4]
   1f63e:	4607      	mov	r7, r0
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
   1f640:	2f00      	cmp	r7, #0
   1f642:	d04b      	beq.n	1f6dc <mayfly_run+0xec>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
   1f644:	9d07      	ldr	r5, [sp, #28]
   1f646:	7868      	ldrb	r0, [r5, #1]
   1f648:	782e      	ldrb	r6, [r5, #0]
   1f64a:	1a36      	subs	r6, r6, r0
   1f64c:	f006 0603 	and.w	r6, r6, #3
			if (state == 1U) {
   1f650:	2e01      	cmp	r6, #1
   1f652:	d107      	bne.n	1f664 <mayfly_run+0x74>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
   1f654:	3801      	subs	r0, #1
   1f656:	7068      	strb	r0, [r5, #1]

				/* call the mayfly function */
				m->fp(m->param);
   1f658:	9b07      	ldr	r3, [sp, #28]
   1f65a:	e9d3 0302 	ldrd	r0, r3, [r3, #8]
   1f65e:	4798      	blx	r3
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
   1f660:	9d07      	ldr	r5, [sp, #28]
	if (((req - m->_ack) & 0x03) != 1U) {
   1f662:	7868      	ldrb	r0, [r5, #1]
	req = m->_req;
   1f664:	782b      	ldrb	r3, [r5, #0]
		memq_dequeue(mft[callee_id][caller_id].tail,
   1f666:	f8db c028 	ldr.w	ip, [fp, #40]	; 0x28
	if (((req - m->_ack) & 0x03) != 1U) {
   1f66a:	1a18      	subs	r0, r3, r0
   1f66c:	f000 0003 	and.w	r0, r0, #3
   1f670:	2801      	cmp	r0, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
   1f672:	f04f 0200 	mov.w	r2, #0
   1f676:	4621      	mov	r1, r4
	req = m->_req;
   1f678:	fa5f f883 	uxtb.w	r8, r3
		memq_dequeue(mft[callee_id][caller_id].tail,
   1f67c:	4660      	mov	r0, ip
	if (((req - m->_ack) & 0x03) != 1U) {
   1f67e:	d00d      	beq.n	1f69c <mayfly_run+0xac>
		memq_dequeue(mft[callee_id][caller_id].tail,
   1f680:	f7ff fef4 	bl	1f46c <memq_dequeue>
		ack = m->_ack;
   1f684:	7869      	ldrb	r1, [r5, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   1f686:	782a      	ldrb	r2, [r5, #0]
		m->_link = link;
   1f688:	606f      	str	r7, [r5, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
   1f68a:	1a52      	subs	r2, r2, r1
   1f68c:	f002 0203 	and.w	r2, r2, #3
   1f690:	2a01      	cmp	r2, #1
		m->_ack = req;
   1f692:	f885 8001 	strb.w	r8, [r5, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   1f696:	d018      	beq.n	1f6ca <mayfly_run+0xda>
   1f698:	f8db c028 	ldr.w	ip, [fp, #40]	; 0x28

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
   1f69c:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
   1f6a0:	aa07      	add	r2, sp, #28
   1f6a2:	4661      	mov	r1, ip
   1f6a4:	f7ff feda 	bl	1f45c <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
   1f6a8:	2e01      	cmp	r6, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   1f6aa:	4607      	mov	r7, r0
			if (state == 1U) {
   1f6ac:	d1c8      	bne.n	1f640 <mayfly_run+0x50>
				/* pend callee (tailchain) if mayfly queue is
				 * not empty or all caller queues are not
				 * processed.
				 */
				if (caller_id || link) {
   1f6ae:	9d01      	ldr	r5, [sp, #4]
   1f6b0:	2d00      	cmp	r5, #0
   1f6b2:	d03d      	beq.n	1f730 <mayfly_run+0x140>
					/* set mayfly callee pending */
					mfp[callee_id] = 1U;
   1f6b4:	9f03      	ldr	r7, [sp, #12]
   1f6b6:	2301      	movs	r3, #1
   1f6b8:	f809 3007 	strb.w	r3, [r9, r7]

					/* pend the callee for execution */
					mayfly_pend(callee_id, callee_id);
   1f6bc:	4639      	mov	r1, r7
   1f6be:	4638      	mov	r0, r7
   1f6c0:	f00d fe86 	bl	2d3d0 <mayfly_pend>
	}

	if (disable && !enable) {
		mayfly_enable_cb(callee_id, callee_id, 0);
	}
}
   1f6c4:	b009      	add	sp, #36	; 0x24
   1f6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   1f6ca:	9b02      	ldr	r3, [sp, #8]
			m->_ack = ack;
   1f6cc:	7069      	strb	r1, [r5, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   1f6ce:	4638      	mov	r0, r7
   1f6d0:	4629      	mov	r1, r5
   1f6d2:	eb0a 0203 	add.w	r2, sl, r3
   1f6d6:	f7ff feb7 	bl	1f448 <memq_enqueue>
   1f6da:	e7dd      	b.n	1f698 <mayfly_run+0xa8>
   1f6dc:	9d01      	ldr	r5, [sp, #4]
		if (mft[callee_id][caller_id].disable_req !=
   1f6de:	f89b 302e 	ldrb.w	r3, [fp, #46]	; 0x2e
   1f6e2:	f89b 202f 	ldrb.w	r2, [fp, #47]	; 0x2f
   1f6e6:	429a      	cmp	r2, r3
   1f6e8:	d003      	beq.n	1f6f2 <mayfly_run+0x102>
			mft[callee_id][caller_id].disable_ack =
   1f6ea:	f88b 302f 	strb.w	r3, [fp, #47]	; 0x2f
			disable = 1U;
   1f6ee:	2301      	movs	r3, #1
   1f6f0:	9304      	str	r3, [sp, #16]
		if (mft[callee_id][caller_id].enable_req !=
   1f6f2:	f89b 302c 	ldrb.w	r3, [fp, #44]	; 0x2c
   1f6f6:	f89b 202d 	ldrb.w	r2, [fp, #45]	; 0x2d
   1f6fa:	429a      	cmp	r2, r3
   1f6fc:	d003      	beq.n	1f706 <mayfly_run+0x116>
			mft[callee_id][caller_id].enable_ack =
   1f6fe:	f88b 302d 	strb.w	r3, [fp, #45]	; 0x2d
			enable = 1U;
   1f702:	2301      	movs	r3, #1
   1f704:	9305      	str	r3, [sp, #20]
	while (caller_id--) {
   1f706:	3d01      	subs	r5, #1
   1f708:	b2ed      	uxtb	r5, r5
   1f70a:	2dff      	cmp	r5, #255	; 0xff
   1f70c:	f1ab 0b0c 	sub.w	fp, fp, #12
   1f710:	d18a      	bne.n	1f628 <mayfly_run+0x38>
	if (disable && !enable) {
   1f712:	e9dd 2504 	ldrd	r2, r5, [sp, #16]
   1f716:	9f03      	ldr	r7, [sp, #12]
   1f718:	2a00      	cmp	r2, #0
   1f71a:	d0d3      	beq.n	1f6c4 <mayfly_run+0xd4>
   1f71c:	2d00      	cmp	r5, #0
   1f71e:	d1d1      	bne.n	1f6c4 <mayfly_run+0xd4>
		mayfly_enable_cb(callee_id, callee_id, 0);
   1f720:	462a      	mov	r2, r5
   1f722:	4639      	mov	r1, r7
   1f724:	4638      	mov	r0, r7
}
   1f726:	b009      	add	sp, #36	; 0x24
   1f728:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
   1f72c:	f00d bdfc 	b.w	2d328 <mayfly_enable_cb>
				if (caller_id || link) {
   1f730:	2800      	cmp	r0, #0
   1f732:	d0d4      	beq.n	1f6de <mayfly_run+0xee>
   1f734:	e7be      	b.n	1f6b4 <mayfly_run+0xc4>
   1f736:	bf00      	nop
   1f738:	20001d40 	.word	0x20001d40
   1f73c:	20001dc4 	.word	0x20001dc4

0001f740 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(const uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
   1f740:	1e4b      	subs	r3, r1, #1
   1f742:	b2db      	uxtb	r3, r3
   1f744:	b171      	cbz	r1, 1f764 <util_ones_count_get+0x24>
   1f746:	1e41      	subs	r1, r0, #1
   1f748:	eb00 0c03 	add.w	ip, r0, r3
	uint8_t one_count = 0U;
   1f74c:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
   1f74e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
   1f752:	b123      	cbz	r3, 1f75e <util_ones_count_get+0x1e>
			bite &= (bite - 1);
   1f754:	1e5a      	subs	r2, r3, #1
			one_count++;
   1f756:	3001      	adds	r0, #1
		while (bite) {
   1f758:	4013      	ands	r3, r2
			one_count++;
   1f75a:	b2c0      	uxtb	r0, r0
		while (bite) {
   1f75c:	d1fa      	bne.n	1f754 <util_ones_count_get+0x14>
	while (octets_len--) {
   1f75e:	4561      	cmp	r1, ip
   1f760:	d1f5      	bne.n	1f74e <util_ones_count_get+0xe>
   1f762:	4770      	bx	lr
	uint8_t one_count = 0U;
   1f764:	4608      	mov	r0, r1
		}
		octets++;
	}

	return one_count;
}
   1f766:	4770      	bx	lr

0001f768 <ticker_dequeue>:
 * @return Total ticks until expiration for dequeued ticker node, or 0 if
 * node was not found
 * @internal
 */
static uint32_t ticker_dequeue(struct ticker_instance *instance, uint8_t id)
{
   1f768:	b530      	push	{r4, r5, lr}

	/* Find the ticker's position in ticker node list while accumulating
	 * ticks_to_expire
	 */
	node = &instance->nodes[0];
	previous = instance->ticker_id_head;
   1f76a:	7e03      	ldrb	r3, [r0, #24]
	node = &instance->nodes[0];
   1f76c:	6805      	ldr	r5, [r0, #0]
	current = previous;
	total = 0U;
	ticker_current = 0;
	while (current != TICKER_NULL) {
   1f76e:	2bff      	cmp	r3, #255	; 0xff
   1f770:	d014      	beq.n	1f79c <ticker_dequeue+0x34>
		ticker_current = &node[current];
   1f772:	eb03 0243 	add.w	r2, r3, r3, lsl #1

		if (current == id) {
   1f776:	428b      	cmp	r3, r1
		ticker_current = &node[current];
   1f778:	eb05 1202 	add.w	r2, r5, r2, lsl #4
		if (current == id) {
   1f77c:	d027      	beq.n	1f7ce <ticker_dequeue+0x66>
	total = 0U;
   1f77e:	f04f 0c00 	mov.w	ip, #0
   1f782:	e001      	b.n	1f788 <ticker_dequeue+0x20>
		if (current == id) {
   1f784:	4299      	cmp	r1, r3
   1f786:	d00b      	beq.n	1f7a0 <ticker_dequeue+0x38>
			break;
		}

		total += ticker_current->ticks_to_expire;
   1f788:	469e      	mov	lr, r3
		previous = current;
		current = ticker_current->next;
   1f78a:	7813      	ldrb	r3, [r2, #0]
		total += ticker_current->ticks_to_expire;
   1f78c:	6894      	ldr	r4, [r2, #8]
	while (current != TICKER_NULL) {
   1f78e:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
   1f790:	eb03 0243 	add.w	r2, r3, r3, lsl #1
		total += ticker_current->ticks_to_expire;
   1f794:	44a4      	add	ip, r4
		ticker_current = &node[current];
   1f796:	eb05 1202 	add.w	r2, r5, r2, lsl #4
	while (current != TICKER_NULL) {
   1f79a:	d1f3      	bne.n	1f784 <ticker_dequeue+0x1c>
	}

	if (current == TICKER_NULL) {
		/* Ticker not in active list */
		return 0;
   1f79c:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
   1f79e:	bd30      	pop	{r4, r5, pc}
	if (previous == current) {
   1f7a0:	4571      	cmp	r1, lr
   1f7a2:	d017      	beq.n	1f7d4 <ticker_dequeue+0x6c>
	node[previous].next = ticker_current->next;
   1f7a4:	fa0f fe8e 	sxth.w	lr, lr
   1f7a8:	7813      	ldrb	r3, [r2, #0]
	timeout = ticker_current->ticks_to_expire;
   1f7aa:	6890      	ldr	r0, [r2, #8]
	node[previous].next = ticker_current->next;
   1f7ac:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   1f7b0:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
	if (ticker_current->next != TICKER_NULL) {
   1f7b4:	2bff      	cmp	r3, #255	; 0xff
	node[previous].next = ticker_current->next;
   1f7b6:	f805 300e 	strb.w	r3, [r5, lr]
	if (ticker_current->next != TICKER_NULL) {
   1f7ba:	d006      	beq.n	1f7ca <ticker_dequeue+0x62>
		node[ticker_current->next].ticks_to_expire += timeout;
   1f7bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1f7c0:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   1f7c4:	689a      	ldr	r2, [r3, #8]
   1f7c6:	4402      	add	r2, r0
   1f7c8:	609a      	str	r2, [r3, #8]
	return (total + timeout);
   1f7ca:	4460      	add	r0, ip
}
   1f7cc:	bd30      	pop	{r4, r5, pc}
	previous = instance->ticker_id_head;
   1f7ce:	469e      	mov	lr, r3
	total = 0U;
   1f7d0:	f04f 0c00 	mov.w	ip, #0
		instance->ticker_id_head = ticker_current->next;
   1f7d4:	7813      	ldrb	r3, [r2, #0]
   1f7d6:	7603      	strb	r3, [r0, #24]
   1f7d8:	e7e4      	b.n	1f7a4 <ticker_dequeue+0x3c>
   1f7da:	bf00      	nop

0001f7dc <ticks_to_expire_prep>:
{
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   1f7dc:	eba2 0c01 	sub.w	ip, r2, r1
   1f7e0:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
{
   1f7e4:	b410      	push	{r4}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
   1f7e6:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   1f7e8:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   1f7ea:	d10a      	bne.n	1f802 <ticks_to_expire_prep+0x26>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1f7ec:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   1f7f0:	4463      	add	r3, ip
	if (ticks_to_expire > ticks_to_expire_minus) {
   1f7f2:	42a3      	cmp	r3, r4
   1f7f4:	d80d      	bhi.n	1f812 <ticks_to_expire_prep+0x36>
		ticks_to_expire_minus -= ticks_to_expire;
   1f7f6:	1ae4      	subs	r4, r4, r3
		ticks_to_expire = 0U;
   1f7f8:	2300      	movs	r3, #0
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   1f7fa:	6144      	str	r4, [r0, #20]
	ticker->ticks_to_expire = ticks_to_expire;
   1f7fc:	6083      	str	r3, [r0, #8]
}
   1f7fe:	bc10      	pop	{r4}
   1f800:	4770      	bx	lr
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1f802:	1a89      	subs	r1, r1, r2
   1f804:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   1f808:	428b      	cmp	r3, r1
   1f80a:	d908      	bls.n	1f81e <ticks_to_expire_prep+0x42>
			ticks_to_expire -= delta_current_start;
   1f80c:	1a5b      	subs	r3, r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   1f80e:	42a3      	cmp	r3, r4
   1f810:	d9f1      	bls.n	1f7f6 <ticks_to_expire_prep+0x1a>
		ticks_to_expire -= ticks_to_expire_minus;
   1f812:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
   1f814:	2400      	movs	r4, #0
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   1f816:	6144      	str	r4, [r0, #20]
	ticker->ticks_to_expire = ticks_to_expire;
   1f818:	6083      	str	r3, [r0, #8]
}
   1f81a:	bc10      	pop	{r4}
   1f81c:	4770      	bx	lr
			ticks_to_expire_minus +=
   1f81e:	440c      	add	r4, r1
   1f820:	1ae4      	subs	r4, r4, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
   1f822:	e7e9      	b.n	1f7f8 <ticks_to_expire_prep+0x1c>

0001f824 <ticker_job_list_insert>:
{
   1f824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f828:	4607      	mov	r7, r0
   1f82a:	b087      	sub	sp, #28
	count_user = instance->count_user;
   1f82c:	7a40      	ldrb	r0, [r0, #9]
	node = &instance->nodes[0];
   1f82e:	683b      	ldr	r3, [r7, #0]
	users = &instance->users[0];
   1f830:	687c      	ldr	r4, [r7, #4]
	node = &instance->nodes[0];
   1f832:	9301      	str	r3, [sp, #4]
	while (count_user--) {
   1f834:	2800      	cmp	r0, #0
   1f836:	f000 80e9 	beq.w	1fa0c <ticker_job_list_insert+0x1e8>
   1f83a:	1e42      	subs	r2, r0, #1
   1f83c:	b2d2      	uxtb	r2, r2
   1f83e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
   1f842:	46bb      	mov	fp, r7
   1f844:	9202      	str	r2, [sp, #8]
   1f846:	9405      	str	r4, [sp, #20]
   1f848:	460f      	mov	r7, r1
		user_ops = (void *)&user->user_op[0];
   1f84a:	9b02      	ldr	r3, [sp, #8]
   1f84c:	685a      	ldr	r2, [r3, #4]
		user_ops_first = user->first;
   1f84e:	f893 8001 	ldrb.w	r8, [r3, #1]
		user_ops = (void *)&user->user_op[0];
   1f852:	9204      	str	r2, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
   1f854:	f8cd 800c 	str.w	r8, [sp, #12]
   1f858:	2fff      	cmp	r7, #255	; 0xff
   1f85a:	d05d      	beq.n	1f918 <ticker_job_list_insert+0xf4>
				ticker = &node[id_insert];
   1f85c:	eb07 0447 	add.w	r4, r7, r7, lsl #1
   1f860:	9b01      	ldr	r3, [sp, #4]
   1f862:	0126      	lsls	r6, r4, #4
   1f864:	46ba      	mov	sl, r7
				insert_head = ticker->next;
   1f866:	5d9f      	ldrb	r7, [r3, r6]
				ticker = &node[id_insert];
   1f868:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				user_op = NULL;
   1f86c:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
   1f86e:	f04f 0eff 	mov.w	lr, #255	; 0xff
   1f872:	f884 e000 	strb.w	lr, [r4]
	node = &instance->nodes[0];
   1f876:	f8db c000 	ldr.w	ip, [fp]
	current = instance->ticker_id_head;
   1f87a:	f89b 2018 	ldrb.w	r2, [fp, #24]
	ticker_new = &node[id];
   1f87e:	eb0c 0906 	add.w	r9, ip, r6
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   1f882:	4572      	cmp	r2, lr
	ticks_to_expire = ticker_new->ticks_to_expire;
   1f884:	f8d9 1008 	ldr.w	r1, [r9, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   1f888:	d10d      	bne.n	1f8a6 <ticker_job_list_insert+0x82>
   1f88a:	e0ba      	b.n	1fa02 <ticker_job_list_insert+0x1de>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   1f88c:	1a09      	subs	r1, r1, r0
   1f88e:	d104      	bne.n	1f89a <ticker_job_list_insert+0x76>
   1f890:	f8b9 801e 	ldrh.w	r8, [r9, #30]
   1f894:	8bf6      	ldrh	r6, [r6, #30]
   1f896:	45b0      	cmp	r8, r6
   1f898:	d875      	bhi.n	1f986 <ticker_job_list_insert+0x162>
		current = ticker_current->next;
   1f89a:	f81c 3003 	ldrb.w	r3, [ip, r3]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   1f89e:	2bff      	cmp	r3, #255	; 0xff
   1f8a0:	4696      	mov	lr, r2
		current = ticker_current->next;
   1f8a2:	461a      	mov	r2, r3
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   1f8a4:	d007      	beq.n	1f8b6 <ticker_job_list_insert+0x92>
		(ticker_current = &node[current])->ticks_to_expire))) {
   1f8a6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   1f8aa:	eb0c 1603 	add.w	r6, ip, r3, lsl #4
   1f8ae:	011b      	lsls	r3, r3, #4
		(ticks_to_expire_current =
   1f8b0:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   1f8b2:	4288      	cmp	r0, r1
   1f8b4:	d9ea      	bls.n	1f88c <ticker_job_list_insert+0x68>
	if (previous == TICKER_NULL) {
   1f8b6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
	ticker_new->ticks_to_expire = ticks_to_expire;
   1f8ba:	f8c9 1008 	str.w	r1, [r9, #8]
	ticker_new->next = current;
   1f8be:	f889 2000 	strb.w	r2, [r9]
	if (previous == TICKER_NULL) {
   1f8c2:	d05d      	beq.n	1f980 <ticker_job_list_insert+0x15c>
		node[previous].next = id;
   1f8c4:	fa0f fe8e 	sxth.w	lr, lr
   1f8c8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   1f8cc:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   1f8d0:	f80c a00e 	strb.w	sl, [ip, lr]
	if (current != TICKER_NULL) {
   1f8d4:	2aff      	cmp	r2, #255	; 0xff
   1f8d6:	d008      	beq.n	1f8ea <ticker_job_list_insert+0xc6>
		node[current].ticks_to_expire -= ticks_to_expire;
   1f8d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1f8dc:	eb0c 1c02 	add.w	ip, ip, r2, lsl #4
   1f8e0:	f8dc 3008 	ldr.w	r3, [ip, #8]
   1f8e4:	1a5b      	subs	r3, r3, r1
   1f8e6:	f8cc 3008 	str.w	r3, [ip, #8]
	ticker->req = ticker->ack + 1;
   1f8ea:	78a3      	ldrb	r3, [r4, #2]
   1f8ec:	3301      	adds	r3, #1
   1f8ee:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   1f8f0:	2d00      	cmp	r5, #0
   1f8f2:	d0b1      	beq.n	1f858 <ticker_job_list_insert+0x34>
	if (user_op->fp_op_func) {
   1f8f4:	6aab      	ldr	r3, [r5, #40]	; 0x28
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1f8f6:	f04f 0200 	mov.w	r2, #0
   1f8fa:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
   1f8fc:	70aa      	strb	r2, [r5, #2]
	if (user_op->fp_op_func) {
   1f8fe:	b113      	cbz	r3, 1f906 <ticker_job_list_insert+0xe2>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   1f900:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   1f902:	2000      	movs	r0, #0
   1f904:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   1f906:	6863      	ldr	r3, [r4, #4]
   1f908:	2b00      	cmp	r3, #0
   1f90a:	d1a5      	bne.n	1f858 <ticker_job_list_insert+0x34>
						user_op->fp_op_func;
   1f90c:	6aab      	ldr	r3, [r5, #40]	; 0x28
					ticker->fp_op_func =
   1f90e:	6223      	str	r3, [r4, #32]
						user_op->op_context;
   1f910:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
					ticker->op_context =
   1f912:	6263      	str	r3, [r4, #36]	; 0x24
		while ((insert_head != TICKER_NULL) ||
   1f914:	2fff      	cmp	r7, #255	; 0xff
   1f916:	d1a1      	bne.n	1f85c <ticker_job_list_insert+0x38>
   1f918:	9b02      	ldr	r3, [sp, #8]
   1f91a:	e9dd 8903 	ldrd	r8, r9, [sp, #12]
   1f91e:	789b      	ldrb	r3, [r3, #2]
				user_op = &user_ops[user_ops_first];
   1f920:	eb08 0248 	add.w	r2, r8, r8, lsl #1
				first = user_ops_first + 1;
   1f924:	f108 0001 	add.w	r0, r8, #1
		while ((insert_head != TICKER_NULL) ||
   1f928:	4543      	cmp	r3, r8
				user_op = &user_ops[user_ops_first];
   1f92a:	ea4f 1102 	mov.w	r1, r2, lsl #4
   1f92e:	eb09 1502 	add.w	r5, r9, r2, lsl #4
				first = user_ops_first + 1;
   1f932:	fa5f f880 	uxtb.w	r8, r0
				if (first == user->count_user_op) {
   1f936:	9a02      	ldr	r2, [sp, #8]
		while ((insert_head != TICKER_NULL) ||
   1f938:	d05b      	beq.n	1f9f2 <ticker_job_list_insert+0x1ce>
				if (first == user->count_user_op) {
   1f93a:	7810      	ldrb	r0, [r2, #0]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   1f93c:	f819 2001 	ldrb.w	r2, [r9, r1]
					first = 0U;
   1f940:	4540      	cmp	r0, r8
   1f942:	bf08      	it	eq
   1f944:	f04f 0800 	moveq.w	r8, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   1f948:	2a04      	cmp	r2, #4
   1f94a:	d1e9      	bne.n	1f920 <ticker_job_list_insert+0xfc>
				id_insert = user_op->id;
   1f94c:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
   1f950:	9a01      	ldr	r2, [sp, #4]
   1f952:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
   1f956:	eb02 1403 	add.w	r4, r2, r3, lsl #4
   1f95a:	011e      	lsls	r6, r3, #4
				if (((ticker->req -
   1f95c:	7862      	ldrb	r2, [r4, #1]
   1f95e:	78a3      	ldrb	r3, [r4, #2]
   1f960:	429a      	cmp	r2, r3
	user_op->status = status;
   1f962:	f04f 0001 	mov.w	r0, #1
				if (((ticker->req -
   1f966:	d010      	beq.n	1f98a <ticker_job_list_insert+0x166>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1f968:	f04f 0300 	mov.w	r3, #0
   1f96c:	f809 3001 	strb.w	r3, [r9, r1]
	if (user_op->fp_op_func) {
   1f970:	6aab      	ldr	r3, [r5, #40]	; 0x28
	user_op->status = status;
   1f972:	70a8      	strb	r0, [r5, #2]
	if (user_op->fp_op_func) {
   1f974:	b10b      	cbz	r3, 1f97a <ticker_job_list_insert+0x156>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   1f976:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   1f978:	4798      	blx	r3
   1f97a:	9b02      	ldr	r3, [sp, #8]
   1f97c:	789b      	ldrb	r3, [r3, #2]
		while ((insert_head != TICKER_NULL) ||
   1f97e:	e7cf      	b.n	1f920 <ticker_job_list_insert+0xfc>
		instance->ticker_id_head = id;
   1f980:	f88b a018 	strb.w	sl, [fp, #24]
   1f984:	e7a6      	b.n	1f8d4 <ticker_job_list_insert+0xb0>
		(ticks_to_expire_current =
   1f986:	4601      	mov	r1, r0
   1f988:	e795      	b.n	1f8b6 <ticker_job_list_insert+0x92>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   1f98a:	8aab      	ldrh	r3, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   1f98c:	f8db 1014 	ldr.w	r1, [fp, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   1f990:	f8cd 800c 	str.w	r8, [sp, #12]
   1f994:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   1f998:	4293      	cmp	r3, r2
   1f99a:	d007      	beq.n	1f9ac <ticker_job_list_insert+0x188>
		ticker->must_expire =
   1f99c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1f9a0:	1a9b      	subs	r3, r3, r2
   1f9a2:	fab3 f383 	clz	r3, r3
   1f9a6:	095b      	lsrs	r3, r3, #5
   1f9a8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   1f9ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1f9ae:	62a3      	str	r3, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   1f9b0:	68eb      	ldr	r3, [r5, #12]
   1f9b2:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   1f9b4:	692b      	ldr	r3, [r5, #16]
   1f9b6:	6223      	str	r3, [r4, #32]
		(start->lazy < TICKER_LAZY_MUST_EXPIRE_KEEP) ? start->lazy :
   1f9b8:	8aab      	ldrh	r3, [r5, #20]
	ticker->lazy_periodic =
   1f9ba:	f64f 72fd 	movw	r2, #65533	; 0xfffd
   1f9be:	4293      	cmp	r3, r2
   1f9c0:	bf88      	it	hi
   1f9c2:	2300      	movhi	r3, #0
   1f9c4:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
   1f9c6:	69ab      	ldr	r3, [r5, #24]
   1f9c8:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
   1f9ca:	69eb      	ldr	r3, [r5, #28]
   1f9cc:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   1f9ce:	6a2b      	ldr	r3, [r5, #32]
   1f9d0:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
   1f9d2:	68ab      	ldr	r3, [r5, #8]
   1f9d4:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
   1f9d6:	2300      	movs	r3, #0
   1f9d8:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   1f9da:	686a      	ldr	r2, [r5, #4]
   1f9dc:	4620      	mov	r0, r4
	ticker->ticks_to_expire_minus = 0U;
   1f9de:	4698      	mov	r8, r3
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   1f9e0:	f7ff fefc 	bl	1f7dc <ticks_to_expire_prep>
	ticker->force = 1U;
   1f9e4:	2301      	movs	r3, #1
	ticker->remainder_current = 0U;
   1f9e6:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   1f9ea:	f8a4 801e 	strh.w	r8, [r4, #30]
	ticker->force = 1U;
   1f9ee:	70e3      	strb	r3, [r4, #3]
}
   1f9f0:	e73d      	b.n	1f86e <ticker_job_list_insert+0x4a>
	while (count_user--) {
   1f9f2:	9905      	ldr	r1, [sp, #20]
		user->first = user_ops_first;
   1f9f4:	7053      	strb	r3, [r2, #1]
	while (count_user--) {
   1f9f6:	4291      	cmp	r1, r2
   1f9f8:	f1a2 0308 	sub.w	r3, r2, #8
   1f9fc:	d006      	beq.n	1fa0c <ticker_job_list_insert+0x1e8>
   1f9fe:	9302      	str	r3, [sp, #8]
   1fa00:	e723      	b.n	1f84a <ticker_job_list_insert+0x26>
	ticker_new->next = current;
   1fa02:	f80c 2006 	strb.w	r2, [ip, r6]
		instance->ticker_id_head = id;
   1fa06:	f88b a018 	strb.w	sl, [fp, #24]
	if (current != TICKER_NULL) {
   1fa0a:	e76e      	b.n	1f8ea <ticker_job_list_insert+0xc6>
}
   1fa0c:	b007      	add	sp, #28
   1fa0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fa12:	bf00      	nop

0001fa14 <ticker_worker>:
{
   1fa14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   1fa18:	7e47      	ldrb	r7, [r0, #25]
	instance->worker_trigger = 1U;
   1fa1a:	2301      	movs	r3, #1
{
   1fa1c:	b089      	sub	sp, #36	; 0x24
	instance->worker_trigger = 1U;
   1fa1e:	7683      	strb	r3, [r0, #26]
	if (instance->job_guard) {
   1fa20:	2f00      	cmp	r7, #0
   1fa22:	f040 809a 	bne.w	1fb5a <ticker_worker+0x146>
	if (instance->ticker_id_head == TICKER_NULL) {
   1fa26:	7e03      	ldrb	r3, [r0, #24]
   1fa28:	2bff      	cmp	r3, #255	; 0xff
   1fa2a:	4606      	mov	r6, r0
   1fa2c:	f000 8094 	beq.w	1fb58 <ticker_worker+0x144>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   1fa30:	f00c ffaa 	bl	2c988 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1fa34:	6972      	ldr	r2, [r6, #20]
	if (instance->ticks_slot_previous > ticks_elapsed) {
   1fa36:	69f3      	ldr	r3, [r6, #28]
	ticker_id_head = instance->ticker_id_head;
   1fa38:	7e34      	ldrb	r4, [r6, #24]
	node = &instance->nodes[0];
   1fa3a:	f8d6 9000 	ldr.w	r9, [r6]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1fa3e:	1a80      	subs	r0, r0, r2
   1fa40:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
	if (instance->ticks_slot_previous > ticks_elapsed) {
   1fa44:	4553      	cmp	r3, sl
   1fa46:	bf94      	ite	ls
   1fa48:	2300      	movls	r3, #0
   1fa4a:	2301      	movhi	r3, #1
	while (ticker_id_head != TICKER_NULL) {
   1fa4c:	2cff      	cmp	r4, #255	; 0xff
	if (instance->ticks_slot_previous > ticks_elapsed) {
   1fa4e:	9303      	str	r3, [sp, #12]
	ticks_expired = 0U;
   1fa50:	46bb      	mov	fp, r7
	while (ticker_id_head != TICKER_NULL) {
   1fa52:	d065      	beq.n	1fb20 <ticker_worker+0x10c>
			ticker->ext_data->ticks_drift = 0U;
   1fa54:	9704      	str	r7, [sp, #16]
   1fa56:	46b0      	mov	r8, r6
		ticker = &node[ticker_id_head];
   1fa58:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1fa5c:	eb09 1504 	add.w	r5, r9, r4, lsl #4
   1fa60:	0124      	lsls	r4, r4, #4
		ticks_to_expire = ticker->ticks_to_expire;
   1fa62:	68ab      	ldr	r3, [r5, #8]
		if (ticks_elapsed < ticks_to_expire) {
   1fa64:	4553      	cmp	r3, sl
   1fa66:	d859      	bhi.n	1fb1c <ticker_worker+0x108>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   1fa68:	78aa      	ldrb	r2, [r5, #2]
		ticker_id_head = ticker->next;
   1fa6a:	f819 4004 	ldrb.w	r4, [r9, r4]
		ticks_elapsed -= ticks_to_expire;
   1fa6e:	ebaa 0a03 	sub.w	sl, sl, r3
		ticks_expired += ticks_to_expire;
   1fa72:	449b      	add	fp, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   1fa74:	786b      	ldrb	r3, [r5, #1]
   1fa76:	1a9b      	subs	r3, r3, r2
   1fa78:	b2db      	uxtb	r3, r3
   1fa7a:	2b01      	cmp	r3, #1
   1fa7c:	d14c      	bne.n	1fb18 <ticker_worker+0x104>
		if (ticker->ticks_slot != 0U &&
   1fa7e:	69a9      	ldr	r1, [r5, #24]
   1fa80:	2900      	cmp	r1, #0
   1fa82:	d06f      	beq.n	1fb64 <ticker_worker+0x150>
   1fa84:	9b03      	ldr	r3, [sp, #12]
   1fa86:	b923      	cbnz	r3, 1fa92 <ticker_worker+0x7e>
		   (slot_reserved ||
   1fa88:	f8d8 301c 	ldr.w	r3, [r8, #28]
   1fa8c:	455b      	cmp	r3, fp
   1fa8e:	f240 8081 	bls.w	1fb94 <ticker_worker+0x180>
			struct ticker_ext *ext_data = ticker->ext_data;
   1fa92:	6aab      	ldr	r3, [r5, #40]	; 0x28
			if (ext_data &&
   1fa94:	b13b      	cbz	r3, 1faa6 <ticker_worker+0x92>
   1fa96:	681a      	ldr	r2, [r3, #0]
   1fa98:	b112      	cbz	r2, 1faa0 <ticker_worker+0x8c>
			    ext_data->ticks_slot_window != 0U &&
   1fa9a:	7a1a      	ldrb	r2, [r3, #8]
   1fa9c:	2a00      	cmp	r2, #0
   1fa9e:	d072      	beq.n	1fb86 <ticker_worker+0x172>
				ext_data->reschedule_state =
   1faa0:	f04f 0200 	mov.w	r2, #0
   1faa4:	721a      	strb	r2, [r3, #8]
			ticker->lazy_current++;
   1faa6:	8beb      	ldrh	r3, [r5, #30]
			if ((ticker->must_expire == 0U) ||
   1faa8:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
			ticker->lazy_current++;
   1faac:	3301      	adds	r3, #1
   1faae:	b29b      	uxth	r3, r3
   1fab0:	83eb      	strh	r3, [r5, #30]
			if ((ticker->must_expire == 0U) ||
   1fab2:	2a00      	cmp	r2, #0
   1fab4:	d05a      	beq.n	1fb6c <ticker_worker+0x158>
   1fab6:	8baa      	ldrh	r2, [r5, #28]
   1fab8:	429a      	cmp	r2, r3
   1faba:	d257      	bcs.n	1fb6c <ticker_worker+0x158>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   1fabc:	6aab      	ldr	r3, [r5, #40]	; 0x28
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   1fabe:	2b00      	cmp	r3, #0
   1fac0:	f000 80b9 	beq.w	1fc36 <ticker_worker+0x222>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   1fac4:	7a1a      	ldrb	r2, [r3, #8]
   1fac6:	2a01      	cmp	r2, #1
   1fac8:	d050      	beq.n	1fb6c <ticker_worker+0x158>
			must_expire_skip = 1U;
   1faca:	2601      	movs	r6, #1
			ticker->ext_data->ticks_drift = 0U;
   1facc:	2200      	movs	r2, #0
			ticks_drift = ticker->ext_data->ticks_drift;
   1face:	6859      	ldr	r1, [r3, #4]
			ticker->ext_data->ticks_drift = 0U;
   1fad0:	605a      	str	r2, [r3, #4]
			ticker->ext_data->reschedule_state =
   1fad2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1fad4:	721a      	strb	r2, [r3, #8]
		ticker->ack--;
   1fad6:	78aa      	ldrb	r2, [r5, #2]
		if (ticker->timeout_func) {
   1fad8:	68ef      	ldr	r7, [r5, #12]
		ticker->ack--;
   1fada:	3a01      	subs	r2, #1
   1fadc:	70aa      	strb	r2, [r5, #2]
		if (ticker->timeout_func) {
   1fade:	b1df      	cbz	r7, 1fb18 <ticker_worker+0x104>
					   ticks_expired -
   1fae0:	696b      	ldr	r3, [r5, #20]
   1fae2:	f8d8 2014 	ldr.w	r2, [r8, #20]
			ticker->timeout_func(ticks_at_expire,
   1fae6:	f895 c003 	ldrb.w	ip, [r5, #3]
					   ticks_expired -
   1faea:	ebab 0303 	sub.w	r3, fp, r3
   1faee:	4413      	add	r3, r2
			ticks_at_expire = (instance->ticks_current +
   1faf0:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   1faf4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1faf6:	692b      	ldr	r3, [r5, #16]
   1faf8:	2e00      	cmp	r6, #0
   1fafa:	d13b      	bne.n	1fb74 <ticker_worker+0x160>
   1fafc:	f8b5 e01e 	ldrh.w	lr, [r5, #30]
   1fb00:	e9cd c300 	strd	ip, r3, [sp]
   1fb04:	4673      	mov	r3, lr
   1fb06:	47b8      	blx	r7
				if (ticker->ticks_slot != 0U) {
   1fb08:	69ab      	ldr	r3, [r5, #24]
				ticker->lazy_current = 0U;
   1fb0a:	83ee      	strh	r6, [r5, #30]
					slot_reserved = 1U;
   1fb0c:	2b00      	cmp	r3, #0
   1fb0e:	9b03      	ldr	r3, [sp, #12]
				ticker->force = 0U;
   1fb10:	70ee      	strb	r6, [r5, #3]
					slot_reserved = 1U;
   1fb12:	bf18      	it	ne
   1fb14:	2301      	movne	r3, #1
   1fb16:	9303      	str	r3, [sp, #12]
	while (ticker_id_head != TICKER_NULL) {
   1fb18:	2cff      	cmp	r4, #255	; 0xff
   1fb1a:	d19d      	bne.n	1fa58 <ticker_worker+0x44>
   1fb1c:	9f04      	ldr	r7, [sp, #16]
   1fb1e:	4646      	mov	r6, r8
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   1fb20:	7af3      	ldrb	r3, [r6, #11]
   1fb22:	7ab2      	ldrb	r2, [r6, #10]
   1fb24:	429a      	cmp	r2, r3
   1fb26:	d107      	bne.n	1fb38 <ticker_worker+0x124>
	uint8_t idx = *ticks_elapsed_index + 1;
   1fb28:	3201      	adds	r2, #1
   1fb2a:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
   1fb2c:	2a02      	cmp	r2, #2
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1fb2e:	bf1a      	itte	ne
   1fb30:	4617      	movne	r7, r2
   1fb32:	463b      	movne	r3, r7
   1fb34:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
   1fb36:	72f7      	strb	r7, [r6, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1fb38:	eb06 0383 	add.w	r3, r6, r3, lsl #2
	instance->worker_trigger = 0U;
   1fb3c:	2200      	movs	r2, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1fb3e:	f8c3 b00c 	str.w	fp, [r3, #12]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1fb42:	6a74      	ldr	r4, [r6, #36]	; 0x24
	instance->worker_trigger = 0U;
   1fb44:	76b2      	strb	r2, [r6, #26]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1fb46:	4633      	mov	r3, r6
   1fb48:	2201      	movs	r2, #1
   1fb4a:	2104      	movs	r1, #4
   1fb4c:	2003      	movs	r0, #3
   1fb4e:	46a4      	mov	ip, r4
}
   1fb50:	b009      	add	sp, #36	; 0x24
   1fb52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1fb56:	4760      	bx	ip
		instance->worker_trigger = 0U;
   1fb58:	7687      	strb	r7, [r0, #26]
}
   1fb5a:	b009      	add	sp, #36	; 0x24
   1fb5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fb60:	e9dd 4205 	ldrd	r4, r2, [sp, #20]
		if (ticker->ext_data) {
   1fb64:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1fb66:	b15b      	cbz	r3, 1fb80 <ticker_worker+0x16c>
   1fb68:	2600      	movs	r6, #0
   1fb6a:	e7af      	b.n	1facc <ticker_worker+0xb8>
				ticker->ack--;
   1fb6c:	78ab      	ldrb	r3, [r5, #2]
   1fb6e:	3b01      	subs	r3, #1
   1fb70:	70ab      	strb	r3, [r5, #2]
				continue;
   1fb72:	e7d1      	b.n	1fb18 <ticker_worker+0x104>
			ticker->timeout_func(ticks_at_expire,
   1fb74:	e9cd c300 	strd	ip, r3, [sp]
   1fb78:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1fb7c:	47b8      	blx	r7
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   1fb7e:	e7cb      	b.n	1fb18 <ticker_worker+0x104>
   1fb80:	461e      	mov	r6, r3
			ticks_drift = 0U;
   1fb82:	4619      	mov	r1, r3
   1fb84:	e7a8      	b.n	1fad8 <ticker_worker+0xc4>
			    TICKER_RESCHEDULE_STATE_NONE &&
   1fb86:	8ba9      	ldrh	r1, [r5, #28]
   1fb88:	8bea      	ldrh	r2, [r5, #30]
   1fb8a:	4291      	cmp	r1, r2
   1fb8c:	d888      	bhi.n	1faa0 <ticker_worker+0x8c>
				ext_data->reschedule_state =
   1fb8e:	2201      	movs	r2, #1
   1fb90:	721a      	strb	r2, [r3, #8]
   1fb92:	e788      	b.n	1faa6 <ticker_worker+0x92>
	if (ticker->next != TICKER_NULL) {
   1fb94:	2cff      	cmp	r4, #255	; 0xff
   1fb96:	d0e5      	beq.n	1fb64 <ticker_worker+0x150>
		uint16_t lazy_current = ticker->lazy_current;
   1fb98:	8be8      	ldrh	r0, [r5, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   1fb9a:	8bab      	ldrh	r3, [r5, #28]
		uint32_t current_age = ticker->ticks_periodic +
   1fb9c:	f8d5 e004 	ldr.w	lr, [r5, #4]
		if (lazy_current >= ticker->lazy_periodic) {
   1fba0:	4298      	cmp	r0, r3
			lazy_current -= ticker->lazy_periodic;
   1fba2:	bf24      	itt	cs
   1fba4:	1ac3      	subcs	r3, r0, r3
   1fba6:	b298      	uxthcs	r0, r3
			struct ticker_node *ticker_next = &nodes[id_head];
   1fba8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1fbac:	eb09 1303 	add.w	r3, r9, r3, lsl #4
		uint32_t current_age = ticker->ticks_periodic +
   1fbb0:	fb00 e00e 	mla	r0, r0, lr, lr
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   1fbb4:	689f      	ldr	r7, [r3, #8]
		uint32_t current_age = ticker->ticks_periodic +
   1fbb6:	9007      	str	r0, [sp, #28]
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   1fbb8:	428f      	cmp	r7, r1
   1fbba:	d8d3      	bhi.n	1fb64 <ticker_worker+0x150>
   1fbbc:	9405      	str	r4, [sp, #20]
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   1fbbe:	463e      	mov	r6, r7
   1fbc0:	468c      	mov	ip, r1
   1fbc2:	4674      	mov	r4, lr
   1fbc4:	9206      	str	r2, [sp, #24]
   1fbc6:	e00f      	b.n	1fbe8 <ticker_worker+0x1d4>
					  0U :
   1fbc8:	bb51      	cbnz	r1, 1fc20 <ticker_worker+0x20c>
			     (next_is_critical ||
   1fbca:	78d9      	ldrb	r1, [r3, #3]
   1fbcc:	78ea      	ldrb	r2, [r5, #3]
   1fbce:	4291      	cmp	r1, r2
   1fbd0:	d824      	bhi.n	1fc1c <ticker_worker+0x208>
			id_head = ticker_next->next;
   1fbd2:	781b      	ldrb	r3, [r3, #0]
		while (id_head != TICKER_NULL) {
   1fbd4:	2bff      	cmp	r3, #255	; 0xff
   1fbd6:	d0c3      	beq.n	1fb60 <ticker_worker+0x14c>
			struct ticker_node *ticker_next = &nodes[id_head];
   1fbd8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1fbdc:	eb09 1303 	add.w	r3, r9, r3, lsl #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   1fbe0:	689f      	ldr	r7, [r3, #8]
   1fbe2:	443e      	add	r6, r7
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   1fbe4:	45b4      	cmp	ip, r6
   1fbe6:	d3bb      	bcc.n	1fb60 <ticker_worker+0x14c>
			if (ticker_next->ticks_slot == 0U) {
   1fbe8:	699a      	ldr	r2, [r3, #24]
   1fbea:	2a00      	cmp	r2, #0
   1fbec:	d0f1      	beq.n	1fbd2 <ticker_worker+0x1be>
			uint16_t lazy_next = ticker_next->lazy_current;
   1fbee:	8bda      	ldrh	r2, [r3, #30]
				ticker_next->lazy_periodic > lazy_next;
   1fbf0:	8b98      	ldrh	r0, [r3, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   1fbf2:	6859      	ldr	r1, [r3, #4]
			if (!lazy_next_periodic_skip) {
   1fbf4:	4282      	cmp	r2, r0
   1fbf6:	d2e7      	bcs.n	1fbc8 <ticker_worker+0x1b4>
					  0U :
   1fbf8:	2900      	cmp	r1, #0
   1fbfa:	d0ea      	beq.n	1fbd2 <ticker_worker+0x1be>
				(ticker->ticks_periodic != 0U) &&
   1fbfc:	2c00      	cmp	r4, #0
   1fbfe:	d0e8      	beq.n	1fbd2 <ticker_worker+0x1be>
   1fc00:	4696      	mov	lr, r2
			if (curr_has_ticks_slot_window ||
   1fc02:	4282      	cmp	r2, r0
   1fc04:	d3e5      	bcc.n	1fbd2 <ticker_worker+0x1be>
				(ticker->force == ticker_next->force);
   1fc06:	78e8      	ldrb	r0, [r5, #3]
   1fc08:	78da      	ldrb	r2, [r3, #3]
			     (next_is_critical ||
   1fc0a:	4290      	cmp	r0, r2
   1fc0c:	d306      	bcc.n	1fc1c <ticker_worker+0x208>
			      (equal_priority && equal_force && next_is_older &&
   1fc0e:	d1e0      	bne.n	1fbd2 <ticker_worker+0x1be>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   1fc10:	fb0e 1201 	mla	r2, lr, r1, r1
			      (equal_priority && equal_force && next_is_older &&
   1fc14:	9907      	ldr	r1, [sp, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   1fc16:	1bd2      	subs	r2, r2, r7
			      (equal_priority && equal_force && next_is_older &&
   1fc18:	4291      	cmp	r1, r2
   1fc1a:	d2da      	bcs.n	1fbd2 <ticker_worker+0x1be>
   1fc1c:	9c05      	ldr	r4, [sp, #20]
   1fc1e:	e738      	b.n	1fa92 <ticker_worker+0x7e>
				(ticker->ticks_periodic != 0U) &&
   1fc20:	b124      	cbz	r4, 1fc2c <ticker_worker+0x218>
				lazy_next -= ticker_next->lazy_periodic;
   1fc22:	eba2 0e00 	sub.w	lr, r2, r0
   1fc26:	fa1f fe8e 	uxth.w	lr, lr
   1fc2a:	e7ea      	b.n	1fc02 <ticker_worker+0x1ee>
			     (next_is_critical ||
   1fc2c:	78e9      	ldrb	r1, [r5, #3]
   1fc2e:	78da      	ldrb	r2, [r3, #3]
   1fc30:	4291      	cmp	r1, r2
   1fc32:	d2ce      	bcs.n	1fbd2 <ticker_worker+0x1be>
   1fc34:	e7f2      	b.n	1fc1c <ticker_worker+0x208>
				ticker->ack--;
   1fc36:	78aa      	ldrb	r2, [r5, #2]
			ticks_drift = 0U;
   1fc38:	4619      	mov	r1, r3
			must_expire_skip = 1U;
   1fc3a:	2601      	movs	r6, #1
   1fc3c:	e74c      	b.n	1fad8 <ticker_worker+0xc4>
   1fc3e:	bf00      	nop

0001fc40 <ticker_job>:
	if (instance->worker_trigger) {
   1fc40:	7e83      	ldrb	r3, [r0, #26]
   1fc42:	2b00      	cmp	r3, #0
   1fc44:	f040 83de 	bne.w	20404 <ticker_job+0x7c4>
{
   1fc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   1fc4c:	7e46      	ldrb	r6, [r0, #25]
{
   1fc4e:	b08f      	sub	sp, #60	; 0x3c
   1fc50:	4682      	mov	sl, r0
	if (instance->job_guard) {
   1fc52:	2e00      	cmp	r6, #0
   1fc54:	d17c      	bne.n	1fd50 <ticker_job+0x110>
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   1fc56:	7a83      	ldrb	r3, [r0, #10]
   1fc58:	7ac2      	ldrb	r2, [r0, #11]
	instance->job_guard = 1U;
   1fc5a:	2101      	movs	r1, #1
   1fc5c:	7641      	strb	r1, [r0, #25]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   1fc5e:	429a      	cmp	r2, r3
	ticks_previous = instance->ticks_current;
   1fc60:	6941      	ldr	r1, [r0, #20]
   1fc62:	9108      	str	r1, [sp, #32]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   1fc64:	f000 83cf 	beq.w	20406 <ticker_job+0x7c6>
	uint8_t idx = *ticks_elapsed_index + 1;
   1fc68:	3301      	adds	r3, #1
   1fc6a:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
   1fc6c:	2b02      	cmp	r3, #2
		    instance->ticks_elapsed[instance->ticks_elapsed_first];
   1fc6e:	bf12      	itee	ne
   1fc70:	461a      	movne	r2, r3
   1fc72:	4632      	moveq	r2, r6
		idx = 0U;
   1fc74:	4633      	moveq	r3, r6
		ticks_elapsed =
   1fc76:	eb00 0282 	add.w	r2, r0, r2, lsl #2
	*ticks_elapsed_index = idx;
   1fc7a:	7283      	strb	r3, [r0, #10]
		ticks_elapsed =
   1fc7c:	68d2      	ldr	r2, [r2, #12]
		instance->ticks_current += ticks_elapsed;
   1fc7e:	9b08      	ldr	r3, [sp, #32]
		ticks_elapsed =
   1fc80:	9204      	str	r2, [sp, #16]
		instance->ticks_current += ticks_elapsed;
   1fc82:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   1fc84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1fc88:	6143      	str	r3, [r0, #20]
		flag_elapsed = 1U;
   1fc8a:	2401      	movs	r4, #1
	ticker_id_old_head = instance->ticker_id_head;
   1fc8c:	f89a 3018 	ldrb.w	r3, [sl, #24]
   1fc90:	930b      	str	r3, [sp, #44]	; 0x2c
	ticks_now = cntr_cnt_get();
   1fc92:	f00c fe79 	bl	2c988 <cntr_cnt_get>
	count_user = instance->count_user;
   1fc96:	f89a 2009 	ldrb.w	r2, [sl, #9]
	node = &instance->nodes[0];
   1fc9a:	f8da 3000 	ldr.w	r3, [sl]
   1fc9e:	9301      	str	r3, [sp, #4]
	while (count_user--) {
   1fca0:	1e53      	subs	r3, r2, #1
	users = &instance->users[0];
   1fca2:	f8da 5004 	ldr.w	r5, [sl, #4]
	ticks_now = cntr_cnt_get();
   1fca6:	9006      	str	r0, [sp, #24]
	while (count_user--) {
   1fca8:	b2db      	uxtb	r3, r3
   1fcaa:	2a00      	cmp	r2, #0
   1fcac:	f000 83da 	beq.w	20464 <ticker_job+0x824>
   1fcb0:	e9cd 640c 	strd	r6, r4, [sp, #48]	; 0x30
   1fcb4:	eb05 09c3 	add.w	r9, r5, r3, lsl #3
	insert_head = TICKER_NULL;
   1fcb8:	23ff      	movs	r3, #255	; 0xff
   1fcba:	9305      	str	r3, [sp, #20]
   1fcbc:	f8cd a00c 	str.w	sl, [sp, #12]
		user_ops = &user->user_op[0];
   1fcc0:	f8d9 b004 	ldr.w	fp, [r9, #4]
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1fcc4:	f04f 0a00 	mov.w	sl, #0
   1fcc8:	462f      	mov	r7, r5
		while (user->middle != user->last) {
   1fcca:	f899 0003 	ldrb.w	r0, [r9, #3]
   1fcce:	f899 8002 	ldrb.w	r8, [r9, #2]
			user_op = &user_ops[user->middle];
   1fcd2:	fa0f f488 	sxth.w	r4, r8
   1fcd6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
			middle = user->middle + 1;
   1fcda:	f108 0301 	add.w	r3, r8, #1
		while (user->middle != user->last) {
   1fcde:	4540      	cmp	r0, r8
			user_op = &user_ops[user->middle];
   1fce0:	ea4f 1604 	mov.w	r6, r4, lsl #4
			middle = user->middle + 1;
   1fce4:	b2db      	uxtb	r3, r3
			user_op = &user_ops[user->middle];
   1fce6:	eb0b 1404 	add.w	r4, fp, r4, lsl #4
		while (user->middle != user->last) {
   1fcea:	f000 810b 	beq.w	1ff04 <ticker_job+0x2c4>
			if (middle == user->count_user_op) {
   1fcee:	f899 2000 	ldrb.w	r2, [r9]
				middle = 0U;
   1fcf2:	429a      	cmp	r2, r3
   1fcf4:	bf08      	it	eq
   1fcf6:	2300      	moveq	r3, #0
			user->middle = middle;
   1fcf8:	f889 3002 	strb.w	r3, [r9, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   1fcfc:	f81b 2006 	ldrb.w	r2, [fp, r6]
			ticker = &node[user_op->id];
   1fd00:	7861      	ldrb	r1, [r4, #1]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   1fd02:	2a04      	cmp	r2, #4
   1fd04:	d93a      	bls.n	1fd7c <ticker_job+0x13c>
			ticker = &node[user_op->id];
   1fd06:	9801      	ldr	r0, [sp, #4]
   1fd08:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   1fd0c:	eb00 1503 	add.w	r5, r0, r3, lsl #4
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   1fd10:	2a08      	cmp	r2, #8
			ticker = &node[user_op->id];
   1fd12:	ea4f 1303 	mov.w	r3, r3, lsl #4
   1fd16:	9302      	str	r3, [sp, #8]
			state = (ticker->req - ticker->ack) & 0xff;
   1fd18:	78a8      	ldrb	r0, [r5, #2]
   1fd1a:	786b      	ldrb	r3, [r5, #1]
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   1fd1c:	d822      	bhi.n	1fd64 <ticker_job+0x124>
			state = (ticker->req - ticker->ack) & 0xff;
   1fd1e:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   1fd20:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   1fd24:	d12c      	bne.n	1fd80 <ticker_job+0x140>
			    ((state == 0U) &&
   1fd26:	2a06      	cmp	r2, #6
   1fd28:	d11c      	bne.n	1fd64 <ticker_job+0x124>
		if (instance->ticker_id_slot_previous == user_op->id) {
   1fd2a:	9b03      	ldr	r3, [sp, #12]
   1fd2c:	7edb      	ldrb	r3, [r3, #27]
   1fd2e:	428b      	cmp	r3, r1
   1fd30:	d04f      	beq.n	1fdd2 <ticker_job+0x192>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1fd32:	f80b a006 	strb.w	sl, [fp, r6]
	if (user_op->fp_op_func) {
   1fd36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	user_op->status = status;
   1fd38:	f884 a002 	strb.w	sl, [r4, #2]
	if (user_op->fp_op_func) {
   1fd3c:	2b00      	cmp	r3, #0
   1fd3e:	d0c4      	beq.n	1fcca <ticker_job+0x8a>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   1fd40:	2000      	movs	r0, #0
   1fd42:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1fd44:	4798      	blx	r3
		while (user->middle != user->last) {
   1fd46:	f899 0003 	ldrb.w	r0, [r9, #3]
   1fd4a:	f899 8002 	ldrb.w	r8, [r9, #2]
   1fd4e:	e7c0      	b.n	1fcd2 <ticker_job+0x92>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
   1fd50:	6a44      	ldr	r4, [r0, #36]	; 0x24
   1fd52:	2104      	movs	r1, #4
   1fd54:	4603      	mov	r3, r0
   1fd56:	2201      	movs	r2, #1
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   1fd58:	2004      	movs	r0, #4
   1fd5a:	46a4      	mov	ip, r4
}
   1fd5c:	b00f      	add	sp, #60	; 0x3c
   1fd5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   1fd62:	4760      	bx	ip
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1fd64:	f80b a006 	strb.w	sl, [fp, r6]
	user_op->status = status;
   1fd68:	f04f 0301 	mov.w	r3, #1
   1fd6c:	70a3      	strb	r3, [r4, #2]
	if (user_op->fp_op_func) {
   1fd6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1fd70:	2b00      	cmp	r3, #0
   1fd72:	d0aa      	beq.n	1fcca <ticker_job+0x8a>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   1fd74:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1fd76:	2001      	movs	r0, #1
   1fd78:	4798      	blx	r3
   1fd7a:	e7a6      	b.n	1fcca <ticker_job+0x8a>
   1fd7c:	4698      	mov	r8, r3
   1fd7e:	e7a8      	b.n	1fcd2 <ticker_job+0x92>
			     (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS)) ||
   1fd80:	2a05      	cmp	r2, #5
   1fd82:	d11d      	bne.n	1fdc0 <ticker_job+0x180>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   1fd84:	6862      	ldr	r2, [r4, #4]
   1fd86:	b94a      	cbnz	r2, 1fd9c <ticker_job+0x15c>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   1fd88:	68a2      	ldr	r2, [r4, #8]
   1fd8a:	b93a      	cbnz	r2, 1fd9c <ticker_job+0x15c>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   1fd8c:	68e2      	ldr	r2, [r4, #12]
   1fd8e:	b92a      	cbnz	r2, 1fd9c <ticker_job+0x15c>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   1fd90:	6922      	ldr	r2, [r4, #16]
   1fd92:	b91a      	cbnz	r2, 1fd9c <ticker_job+0x15c>
			     (user_op->params.update.lazy == 0U) &&
   1fd94:	6962      	ldr	r2, [r4, #20]
   1fd96:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1fd9a:	d0e3      	beq.n	1fd64 <ticker_job+0x124>
			if ((state == 1U) ||
   1fd9c:	2b01      	cmp	r3, #1
   1fd9e:	d01a      	beq.n	1fdd6 <ticker_job+0x196>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   1fda0:	9b03      	ldr	r3, [sp, #12]
   1fda2:	2104      	movs	r1, #4
   1fda4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1fda6:	463d      	mov	r5, r7
   1fda8:	2201      	movs	r2, #1
   1fdaa:	4608      	mov	r0, r1
   1fdac:	47a0      	blx	r4
	while (count_user--) {
   1fdae:	45a9      	cmp	r9, r5
				user->middle = prev;
   1fdb0:	f889 8002 	strb.w	r8, [r9, #2]
	while (count_user--) {
   1fdb4:	f1a9 0308 	sub.w	r3, r9, #8
   1fdb8:	f000 80aa 	beq.w	1ff10 <ticker_job+0x2d0>
   1fdbc:	4699      	mov	r9, r3
   1fdbe:	e77f      	b.n	1fcc0 <ticker_job+0x80>
			if ((state == 1U) ||
   1fdc0:	2b01      	cmp	r3, #1
   1fdc2:	f000 813b 	beq.w	2003c <ticker_job+0x3fc>
   1fdc6:	2a06      	cmp	r2, #6
   1fdc8:	d1ea      	bne.n	1fda0 <ticker_job+0x160>
		if (instance->ticker_id_slot_previous == user_op->id) {
   1fdca:	9b03      	ldr	r3, [sp, #12]
   1fdcc:	7edb      	ldrb	r3, [r3, #27]
   1fdce:	428b      	cmp	r3, r1
   1fdd0:	d1af      	bne.n	1fd32 <ticker_job+0xf2>
				ticks_at_yield =
   1fdd2:	6861      	ldr	r1, [r4, #4]
   1fdd4:	e154      	b.n	20080 <ticker_job+0x440>
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   1fdd6:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1fdda:	4640      	mov	r0, r8
   1fddc:	f7ff fcc4 	bl	1f768 <ticker_dequeue>
   1fde0:	60a8      	str	r0, [r5, #8]
		ticker_job_node_update(ticker, user_op, ticks_now,
   1fde2:	f8d8 c014 	ldr.w	ip, [r8, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1fde6:	9b06      	ldr	r3, [sp, #24]
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   1fde8:	9a04      	ldr	r2, [sp, #16]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1fdea:	eba3 030c 	sub.w	r3, r3, ip
   1fdee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   1fdf2:	4413      	add	r3, r2
	if (ticks_to_expire > ticks_elapsed) {
   1fdf4:	4298      	cmp	r0, r3
   1fdf6:	f240 815b 	bls.w	200b0 <ticker_job+0x470>
		ticks_to_expire -= ticks_elapsed;
   1fdfa:	1ac0      	subs	r0, r0, r3
	if ((ticker->ticks_periodic != 0U) &&
   1fdfc:	686b      	ldr	r3, [r5, #4]
   1fdfe:	2b00      	cmp	r3, #0
   1fe00:	d050      	beq.n	1fea4 <ticker_job+0x264>
	    (user_op->params.update.lazy != 0U)) {
   1fe02:	8aa3      	ldrh	r3, [r4, #20]
	if ((ticker->ticks_periodic != 0U) &&
   1fe04:	2b00      	cmp	r3, #0
   1fe06:	d04d      	beq.n	1fea4 <ticker_job+0x264>
		user_op->params.update.lazy--;
   1fe08:	3b01      	subs	r3, #1
   1fe0a:	b29a      	uxth	r2, r3
   1fe0c:	82a2      	strh	r2, [r4, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   1fe0e:	6869      	ldr	r1, [r5, #4]
		while (ticker->lazy_current < user_op->params.update.lazy) {
   1fe10:	8beb      	ldrh	r3, [r5, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   1fe12:	4288      	cmp	r0, r1
   1fe14:	d923      	bls.n	1fe5e <ticker_job+0x21e>
			ticks_to_expire += ticker->ticks_periodic +
   1fe16:	f101 0801 	add.w	r8, r1, #1
   1fe1a:	9707      	str	r7, [sp, #28]
   1fe1c:	9609      	str	r6, [sp, #36]	; 0x24
   1fe1e:	e01a      	b.n	1fe56 <ticker_job+0x216>
	if ((ticker->remainder_current >= BIT(31)) ||
   1fe20:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1fe22:	f8df e298 	ldr.w	lr, [pc, #664]	; 200bc <ticker_job+0x47c>
   1fe26:	4ea6      	ldr	r6, [pc, #664]	; (200c0 <ticker_job+0x480>)
   1fe28:	4496      	add	lr, r2
   1fe2a:	45b6      	cmp	lr, r6
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   1fe2c:	bf84      	itt	hi
   1fe2e:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
   1fe32:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
			ticks_to_expire += ticker->ticks_periodic +
   1fe36:	4647      	mov	r7, r8
	ticker->remainder_current -= ticker->remainder_periodic;
   1fe38:	6a2e      	ldr	r6, [r5, #32]
   1fe3a:	bf94      	ite	ls
   1fe3c:	460f      	movls	r7, r1
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   1fe3e:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
			ticker->lazy_current--;
   1fe42:	3b01      	subs	r3, #1
			ticks_to_expire -= ticker->ticks_periodic +
   1fe44:	1bc0      	subs	r0, r0, r7
	ticker->remainder_current -= ticker->remainder_periodic;
   1fe46:	1b92      	subs	r2, r2, r6
			ticker->lazy_current--;
   1fe48:	b29b      	uxth	r3, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   1fe4a:	4288      	cmp	r0, r1
	ticker->remainder_current -= ticker->remainder_periodic;
   1fe4c:	626a      	str	r2, [r5, #36]	; 0x24
			ticker->lazy_current--;
   1fe4e:	83eb      	strh	r3, [r5, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   1fe50:	f240 818b 	bls.w	2016a <ticker_job+0x52a>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   1fe54:	8aa2      	ldrh	r2, [r4, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   1fe56:	4293      	cmp	r3, r2
   1fe58:	d8e2      	bhi.n	1fe20 <ticker_job+0x1e0>
   1fe5a:	9f07      	ldr	r7, [sp, #28]
   1fe5c:	9e09      	ldr	r6, [sp, #36]	; 0x24
		while (ticker->lazy_current < user_op->params.update.lazy) {
   1fe5e:	429a      	cmp	r2, r3
   1fe60:	d91f      	bls.n	1fea2 <ticker_job+0x262>
			ticks_to_expire += ticker->ticks_periodic +
   1fe62:	e9cd 7609 	strd	r7, r6, [sp, #36]	; 0x24
   1fe66:	1c4a      	adds	r2, r1, #1
	ticker->remainder_current += ticker->remainder_periodic;
   1fe68:	f8d5 e020 	ldr.w	lr, [r5, #32]
			ticks_to_expire += ticker->ticks_periodic +
   1fe6c:	9207      	str	r2, [sp, #28]
	ticker->remainder_current += ticker->remainder_periodic;
   1fe6e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	if ((ticker->remainder_current < BIT(31)) &&
   1fe70:	f8df 8248 	ldr.w	r8, [pc, #584]	; 200bc <ticker_job+0x47c>
   1fe74:	4e92      	ldr	r6, [pc, #584]	; (200c0 <ticker_job+0x480>)
	ticker->remainder_current += ticker->remainder_periodic;
   1fe76:	4472      	add	r2, lr
	if ((ticker->remainder_current < BIT(31)) &&
   1fe78:	4490      	add	r8, r2
   1fe7a:	45b0      	cmp	r8, r6
   1fe7c:	460f      	mov	r7, r1
   1fe7e:	d806      	bhi.n	1fe8e <ticker_job+0x24e>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1fe80:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
   1fe84:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
			ticks_to_expire += ticker->ticks_periodic +
   1fe88:	9f07      	ldr	r7, [sp, #28]
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1fe8a:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
			ticker->lazy_current++;
   1fe8e:	3301      	adds	r3, #1
   1fe90:	b29b      	uxth	r3, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1fe92:	626a      	str	r2, [r5, #36]	; 0x24
			ticker->lazy_current++;
   1fe94:	83eb      	strh	r3, [r5, #30]
		while (ticker->lazy_current < user_op->params.update.lazy) {
   1fe96:	8aa2      	ldrh	r2, [r4, #20]
   1fe98:	429a      	cmp	r2, r3
			ticks_to_expire += ticker->ticks_periodic +
   1fe9a:	4438      	add	r0, r7
		while (ticker->lazy_current < user_op->params.update.lazy) {
   1fe9c:	d8e7      	bhi.n	1fe6e <ticker_job+0x22e>
   1fe9e:	e9dd 7609 	ldrd	r7, r6, [sp, #36]	; 0x24
		ticker->lazy_periodic = user_op->params.update.lazy;
   1fea2:	83aa      	strh	r2, [r5, #28]
	ticker->ticks_to_expire = ticks_to_expire +
   1fea4:	6863      	ldr	r3, [r4, #4]
	struct ticker_ext *ext_data = ticker->ext_data;
   1fea6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
   1fea8:	4403      	add	r3, r0
   1feaa:	60ab      	str	r3, [r5, #8]
	ticker->ticks_to_expire_minus +=
   1feac:	68a2      	ldr	r2, [r4, #8]
   1feae:	696b      	ldr	r3, [r5, #20]
   1feb0:	4413      	add	r3, r2
   1feb2:	616b      	str	r3, [r5, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   1feb4:	b129      	cbz	r1, 1fec2 <ticker_job+0x282>
   1feb6:	680b      	ldr	r3, [r1, #0]
   1feb8:	b11b      	cbz	r3, 1fec2 <ticker_job+0x282>
			user_op->params.update.ticks_drift_plus -
   1feba:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   1febe:	1a9b      	subs	r3, r3, r2
		ext_data->ticks_drift =
   1fec0:	604b      	str	r3, [r1, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   1fec2:	9a06      	ldr	r2, [sp, #24]
   1fec4:	4661      	mov	r1, ip
   1fec6:	4628      	mov	r0, r5
   1fec8:	f7ff fc88 	bl	1f7dc <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   1fecc:	68e2      	ldr	r2, [r4, #12]
   1fece:	69ab      	ldr	r3, [r5, #24]
   1fed0:	4413      	add	r3, r2
   1fed2:	61ab      	str	r3, [r5, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   1fed4:	6922      	ldr	r2, [r4, #16]
   1fed6:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   1fed8:	bf8c      	ite	hi
   1feda:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
   1fedc:	2300      	movls	r3, #0
   1fede:	61ab      	str	r3, [r5, #24]
	if (user_op->params.update.force != 0U) {
   1fee0:	7da3      	ldrb	r3, [r4, #22]
   1fee2:	b103      	cbz	r3, 1fee6 <ticker_job+0x2a6>
		ticker->force = user_op->params.update.force;
   1fee4:	70eb      	strb	r3, [r5, #3]
	if (user_op->params.update.must_expire) {
   1fee6:	7de3      	ldrb	r3, [r4, #23]
   1fee8:	b113      	cbz	r3, 1fef0 <ticker_job+0x2b0>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
   1feea:	3b01      	subs	r3, #1
   1feec:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	ticker->next = *insert_head;
   1fef0:	e9dd 2101 	ldrd	r2, r1, [sp, #4]
   1fef4:	9b05      	ldr	r3, [sp, #20]
   1fef6:	5453      	strb	r3, [r2, r1]
		ticker->req++;
   1fef8:	786b      	ldrb	r3, [r5, #1]
	*insert_head = user_op->id;
   1fefa:	7862      	ldrb	r2, [r4, #1]
   1fefc:	9205      	str	r2, [sp, #20]
		ticker->req++;
   1fefe:	3301      	adds	r3, #1
   1ff00:	706b      	strb	r3, [r5, #1]
   1ff02:	e716      	b.n	1fd32 <ticker_job+0xf2>
   1ff04:	463d      	mov	r5, r7
	while (count_user--) {
   1ff06:	45a9      	cmp	r9, r5
   1ff08:	f1a9 0308 	sub.w	r3, r9, #8
   1ff0c:	f47f af56 	bne.w	1fdbc <ticker_job+0x17c>
   1ff10:	e9dd 640c 	ldrd	r6, r4, [sp, #48]	; 0x30
   1ff14:	f8dd a00c 	ldr.w	sl, [sp, #12]
	if (instance->ticker_id_head != ticker_id_old_head) {
   1ff18:	f89a 5018 	ldrb.w	r5, [sl, #24]
	if (flag_elapsed) {
   1ff1c:	2c00      	cmp	r4, #0
   1ff1e:	f000 813c 	beq.w	2019a <ticker_job+0x55a>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1ff22:	9b06      	ldr	r3, [sp, #24]
   1ff24:	9a08      	ldr	r2, [sp, #32]
   1ff26:	1a9b      	subs	r3, r3, r2
   1ff28:	f023 477f 	bic.w	r7, r3, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
   1ff2c:	2dff      	cmp	r5, #255	; 0xff
	node = &instance->nodes[0];
   1ff2e:	f8da 3000 	ldr.w	r3, [sl]
   1ff32:	9301      	str	r3, [sp, #4]
	while (instance->ticker_id_head != TICKER_NULL) {
   1ff34:	f000 8299 	beq.w	2046a <ticker_job+0x82a>
   1ff38:	f8dd 9010 	ldr.w	r9, [sp, #16]
			instance->ticks_slot_previous = 0U;
   1ff3c:	9409      	str	r4, [sp, #36]	; 0x24
   1ff3e:	e9cd 6506 	strd	r6, r5, [sp, #24]
	while (instance->ticker_id_head != TICKER_NULL) {
   1ff42:	46ab      	mov	fp, r5
	ticks_expired = 0U;
   1ff44:	f04f 0800 	mov.w	r8, #0
			instance->ticks_slot_previous = 0U;
   1ff48:	464d      	mov	r5, r9
		ticker = &node[id_expired];
   1ff4a:	9a01      	ldr	r2, [sp, #4]
   1ff4c:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   1ff50:	eb02 1403 	add.w	r4, r2, r3, lsl #4
   1ff54:	ea4f 1903 	mov.w	r9, r3, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
   1ff58:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   1ff5a:	42ab      	cmp	r3, r5
   1ff5c:	f200 8260 	bhi.w	20420 <ticker_job+0x7e0>
		state = (ticker->req - ticker->ack) & 0xff;
   1ff60:	78a1      	ldrb	r1, [r4, #2]
   1ff62:	7862      	ldrb	r2, [r4, #1]
		skip_collision = (ticker->lazy_current != 0U);
   1ff64:	8be0      	ldrh	r0, [r4, #30]
		state = (ticker->req - ticker->ack) & 0xff;
   1ff66:	1a52      	subs	r2, r2, r1
		if (instance->ticks_slot_previous > ticks_to_expire) {
   1ff68:	f8da 101c 	ldr.w	r1, [sl, #28]
   1ff6c:	428b      	cmp	r3, r1
		ticks_elapsed -= ticks_to_expire;
   1ff6e:	eba5 0503 	sub.w	r5, r5, r3
		ticks_expired += ticks_to_expire;
   1ff72:	4498      	add	r8, r3
		ticks_latency -= ticks_to_expire;
   1ff74:	eba7 0703 	sub.w	r7, r7, r3
			instance->ticks_slot_previous -= ticks_to_expire;
   1ff78:	bf31      	iteee	cc
   1ff7a:	1ac9      	subcc	r1, r1, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   1ff7c:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
			instance->ticks_slot_previous = 0U;
   1ff80:	2100      	movcs	r1, #0
			instance->ticker_id_slot_previous = TICKER_NULL;
   1ff82:	f88a 301b 	strbcs.w	r3, [sl, #27]
   1ff86:	f8ca 101c 	str.w	r1, [sl, #28]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   1ff8a:	69a3      	ldr	r3, [r4, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   1ff8c:	b2d2      	uxtb	r2, r2
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   1ff8e:	b113      	cbz	r3, 1ff96 <ticker_job+0x356>
   1ff90:	2a02      	cmp	r2, #2
   1ff92:	f000 80ee 	beq.w	20172 <ticker_job+0x532>
		ticker->ticks_to_expire = 0U;
   1ff96:	2300      	movs	r3, #0
   1ff98:	60a3      	str	r3, [r4, #8]
		instance->ticker_id_head = ticker->next;
   1ff9a:	9b01      	ldr	r3, [sp, #4]
   1ff9c:	f813 3009 	ldrb.w	r3, [r3, r9]
   1ffa0:	f88a 3018 	strb.w	r3, [sl, #24]
		if ((ticker->ticks_periodic != 0U) ||
   1ffa4:	6861      	ldr	r1, [r4, #4]
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   1ffa6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		if ((ticker->ticks_periodic != 0U) ||
   1ffa8:	2900      	cmp	r1, #0
   1ffaa:	f040 80a7 	bne.w	200fc <ticker_job+0x4bc>
   1ffae:	b11b      	cbz	r3, 1ffb8 <ticker_job+0x378>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   1ffb0:	7a1b      	ldrb	r3, [r3, #8]
   1ffb2:	2b01      	cmp	r3, #1
   1ffb4:	f000 8086 	beq.w	200c4 <ticker_job+0x484>
			if (state && ((state == 1U) || skip_collision) &&
   1ffb8:	b13a      	cbz	r2, 1ffca <ticker_job+0x38a>
   1ffba:	2a01      	cmp	r2, #1
   1ffbc:	d000      	beq.n	1ffc0 <ticker_job+0x380>
   1ffbe:	b120      	cbz	r0, 1ffca <ticker_job+0x38a>
			    ticker->fp_op_func) {
   1ffc0:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
   1ffc2:	b113      	cbz	r3, 1ffca <ticker_job+0x38a>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   1ffc4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1ffc6:	2001      	movs	r0, #1
   1ffc8:	4798      	blx	r3
			ticker->req = ticker->ack;
   1ffca:	78a3      	ldrb	r3, [r4, #2]
   1ffcc:	7063      	strb	r3, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   1ffce:	f89a b018 	ldrb.w	fp, [sl, #24]
   1ffd2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   1ffd6:	d1b8      	bne.n	1ff4a <ticker_job+0x30a>
   1ffd8:	e9dd 6506 	ldrd	r6, r5, [sp, #24]
   1ffdc:	9c09      	ldr	r4, [sp, #36]	; 0x24
		if (instance->ticker_id_head != ticker_id_old_head) {
   1ffde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ffe0:	455b      	cmp	r3, fp
   1ffe2:	d102      	bne.n	1ffea <ticker_job+0x3aa>
	if (instance->ticker_id_head != ticker_id_old_head) {
   1ffe4:	1aec      	subs	r4, r5, r3
   1ffe6:	bf18      	it	ne
   1ffe8:	2401      	movne	r4, #1
		ticker_job_list_insert(instance, insert_head);
   1ffea:	9905      	ldr	r1, [sp, #20]
   1ffec:	4650      	mov	r0, sl
   1ffee:	f7ff fc19 	bl	1f824 <ticker_job_list_insert>
		ticker_id_head = instance->ticker_id_head;
   1fff2:	f89a 3018 	ldrb.w	r3, [sl, #24]
	nodes = &instance->nodes[0];
   1fff6:	f8da b000 	ldr.w	fp, [sl]
	while (rescheduling) {
   1fffa:	9403      	str	r4, [sp, #12]
		while (ticker_id_head != TICKER_NULL) {
   1fffc:	2bff      	cmp	r3, #255	; 0xff
   1fffe:	f000 81be 	beq.w	2037e <ticker_job+0x73e>
		ticker_id_head = instance->ticker_id_head;
   20002:	461c      	mov	r4, r3
			ticker = &nodes[ticker_id_head];
   20004:	b222      	sxth	r2, r4
   20006:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   2000a:	eb0b 1002 	add.w	r0, fp, r2, lsl #4
   2000e:	0112      	lsls	r2, r2, #4
			ext_data = ticker->ext_data;
   20010:	6a87      	ldr	r7, [r0, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   20012:	b11f      	cbz	r7, 2001c <ticker_job+0x3dc>
   20014:	7a39      	ldrb	r1, [r7, #8]
   20016:	2901      	cmp	r1, #1
   20018:	f000 8121 	beq.w	2025e <ticker_job+0x61e>
			ticker_id_head = ticker->next;
   2001c:	f81b 4002 	ldrb.w	r4, [fp, r2]
		while (ticker_id_head != TICKER_NULL) {
   20020:	2cff      	cmp	r4, #255	; 0xff
   20022:	d1ef      	bne.n	20004 <ticker_job+0x3c4>
	return rescheduled;
   20024:	9c03      	ldr	r4, [sp, #12]
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
   20026:	2e00      	cmp	r6, #0
   20028:	f040 80d3 	bne.w	201d2 <ticker_job+0x592>
	if (instance->ticker_id_head != ticker_id_old_head) {
   2002c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2002e:	429a      	cmp	r2, r3
   20030:	f040 80cf 	bne.w	201d2 <ticker_job+0x592>
	if (flag_compare_update) {
   20034:	2c00      	cmp	r4, #0
   20036:	f000 80bb 	beq.w	201b0 <ticker_job+0x570>
   2003a:	e0ce      	b.n	201da <ticker_job+0x59a>
		if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
   2003c:	2a06      	cmp	r2, #6
   2003e:	f43f ae74 	beq.w	1fd2a <ticker_job+0xea>
			ticker->ticks_to_expire = ticker_dequeue(instance,
   20042:	f8dd 800c 	ldr.w	r8, [sp, #12]
   20046:	4640      	mov	r0, r8
   20048:	f7ff fb8e 	bl	1f768 <ticker_dequeue>
			ticker->req = ticker->ack;
   2004c:	78ab      	ldrb	r3, [r5, #2]
			ticker->ticks_to_expire = ticker_dequeue(instance,
   2004e:	60a8      	str	r0, [r5, #8]
			ticker->req = ticker->ack;
   20050:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   20052:	f898 201b 	ldrb.w	r2, [r8, #27]
   20056:	7863      	ldrb	r3, [r4, #1]
   20058:	429a      	cmp	r2, r3
   2005a:	f47f ae6a 	bne.w	1fd32 <ticker_job+0xf2>
			if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
   2005e:	f81b 3006 	ldrb.w	r3, [fp, r6]
   20062:	2b06      	cmp	r3, #6
   20064:	f43f aeb5 	beq.w	1fdd2 <ticker_job+0x192>
				instance->ticker_id_slot_previous = TICKER_NULL;
   20068:	9a03      	ldr	r2, [sp, #12]
   2006a:	23ff      	movs	r3, #255	; 0xff
   2006c:	76d3      	strb	r3, [r2, #27]
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
   2006e:	f81b 3006 	ldrb.w	r3, [fp, r6]
   20072:	2b06      	cmp	r3, #6
   20074:	f43f aead 	beq.w	1fdd2 <ticker_job+0x192>
   20078:	2b08      	cmp	r3, #8
   2007a:	f43f aeaa 	beq.w	1fdd2 <ticker_job+0x192>
				ticks_at_yield = ticks_now;
   2007e:	9906      	ldr	r1, [sp, #24]
			ticks_current = instance->ticks_current;
   20080:	9b03      	ldr	r3, [sp, #12]
   20082:	695a      	ldr	r2, [r3, #20]
			if (!((ticks_at_yield - ticks_current) &
   20084:	1a8b      	subs	r3, r1, r2
   20086:	021d      	lsls	r5, r3, #8
   20088:	d409      	bmi.n	2009e <ticker_job+0x45e>
				ticks_used = ticks_elapsed +
   2008a:	9a04      	ldr	r2, [sp, #16]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   2008c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   20090:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
   20092:	9903      	ldr	r1, [sp, #12]
   20094:	69ca      	ldr	r2, [r1, #28]
   20096:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
   20098:	bf88      	it	hi
   2009a:	61cb      	strhi	r3, [r1, #28]
   2009c:	e649      	b.n	1fd32 <ticker_job+0xf2>
				if (ticks_elapsed > ticks_used) {
   2009e:	9b04      	ldr	r3, [sp, #16]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   200a0:	1a52      	subs	r2, r2, r1
   200a2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   200a6:	4293      	cmp	r3, r2
					ticks_used = ticks_elapsed -
   200a8:	bf8c      	ite	hi
   200aa:	1a9b      	subhi	r3, r3, r2
					ticks_used = 0;
   200ac:	2300      	movls	r3, #0
   200ae:	e7f0      	b.n	20092 <ticker_job+0x452>
		ticker->ticks_to_expire_minus += ticks_elapsed -
   200b0:	696a      	ldr	r2, [r5, #20]
   200b2:	4413      	add	r3, r2
   200b4:	1a1b      	subs	r3, r3, r0
   200b6:	616b      	str	r3, [r5, #20]
		ticks_to_expire = 0U;
   200b8:	2000      	movs	r0, #0
   200ba:	e69f      	b.n	1fdfc <ticker_job+0x1bc>
   200bc:	ff172b5a 	.word	0xff172b5a
   200c0:	7f172b59 	.word	0x7f172b59
				ticker->req = ticker->ack;
   200c4:	78a3      	ldrb	r3, [r4, #2]
				ticker->ticks_to_expire = ticks_elapsed;
   200c6:	60a5      	str	r5, [r4, #8]
				ticker->req = ticker->ack;
   200c8:	7063      	strb	r3, [r4, #1]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   200ca:	9b08      	ldr	r3, [sp, #32]
   200cc:	f8da 1014 	ldr.w	r1, [sl, #20]
   200d0:	eb03 0208 	add.w	r2, r3, r8
   200d4:	4620      	mov	r0, r4
   200d6:	f7ff fb81 	bl	1f7dc <ticks_to_expire_prep>
			ticker->next = *insert_head;
   200da:	9a01      	ldr	r2, [sp, #4]
   200dc:	9b05      	ldr	r3, [sp, #20]
   200de:	f802 3009 	strb.w	r3, [r2, r9]
			ticker->req++;
   200e2:	7863      	ldrb	r3, [r4, #1]
   200e4:	f8cd b014 	str.w	fp, [sp, #20]
   200e8:	3301      	adds	r3, #1
   200ea:	b2db      	uxtb	r3, r3
			ticker->req = ticker->ack;
   200ec:	7063      	strb	r3, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   200ee:	f89a b018 	ldrb.w	fp, [sl, #24]
   200f2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   200f6:	f47f af28 	bne.w	1ff4a <ticker_job+0x30a>
   200fa:	e76d      	b.n	1ffd8 <ticker_job+0x398>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   200fc:	b113      	cbz	r3, 20104 <ticker_job+0x4c4>
   200fe:	7a1b      	ldrb	r3, [r3, #8]
   20100:	2b01      	cmp	r3, #1
   20102:	d0df      	beq.n	200c4 <ticker_job+0x484>
				if (!ticker->lazy_current) {
   20104:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
   20108:	f1bc 0f00 	cmp.w	ip, #0
   2010c:	d140      	bne.n	20190 <ticker_job+0x550>
					lazy_periodic = ticker->lazy_periodic;
   2010e:	f8b4 c01c 	ldrh.w	ip, [r4, #28]
				while (count--) {
   20112:	46e6      	mov	lr, ip
   20114:	1c48      	adds	r0, r1, #1
   20116:	e9cd 0402 	strd	r0, r4, [sp, #8]
	ticker->remainder_current += ticker->remainder_periodic;
   2011a:	e9d4 6308 	ldrd	r6, r3, [r4, #32]
				ticks_to_expire = 0U;
   2011e:	2200      	movs	r2, #0
   20120:	4670      	mov	r0, lr
   20122:	e004      	b.n	2012e <ticker_job+0x4ee>
				while (count--) {
   20124:	3801      	subs	r0, #1
	if ((ticker->remainder_current < BIT(31)) &&
   20126:	468e      	mov	lr, r1
				while (count--) {
   20128:	1c44      	adds	r4, r0, #1
					ticks_to_expire +=
   2012a:	4472      	add	r2, lr
				while (count--) {
   2012c:	d012      	beq.n	20154 <ticker_job+0x514>
	if ((ticker->remainder_current < BIT(31)) &&
   2012e:	f8df e2dc 	ldr.w	lr, [pc, #732]	; 2040c <ticker_job+0x7cc>
   20132:	4cb7      	ldr	r4, [pc, #732]	; (20410 <ticker_job+0x7d0>)
	ticker->remainder_current += ticker->remainder_periodic;
   20134:	4433      	add	r3, r6
	if ((ticker->remainder_current < BIT(31)) &&
   20136:	449e      	add	lr, r3
   20138:	45a6      	cmp	lr, r4
   2013a:	d8f3      	bhi.n	20124 <ticker_job+0x4e4>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   2013c:	f8dd e008 	ldr.w	lr, [sp, #8]
   20140:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
				while (count--) {
   20144:	3801      	subs	r0, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   20146:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
				while (count--) {
   2014a:	1c44      	adds	r4, r0, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   2014c:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
					ticks_to_expire +=
   20150:	4472      	add	r2, lr
				while (count--) {
   20152:	d1ec      	bne.n	2012e <ticker_job+0x4ee>
   20154:	9c03      	ldr	r4, [sp, #12]
				} else if (!ticker->must_expire) {
   20156:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
   2015a:	6263      	str	r3, [r4, #36]	; 0x24
   2015c:	2800      	cmp	r0, #0
   2015e:	f000 8127 	beq.w	203b0 <ticker_job+0x770>
				ticker->ticks_to_expire = ticks_to_expire;
   20162:	60a2      	str	r2, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
   20164:	f8a4 c01e 	strh.w	ip, [r4, #30]
   20168:	e7af      	b.n	200ca <ticker_job+0x48a>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   2016a:	9f07      	ldr	r7, [sp, #28]
   2016c:	9e09      	ldr	r6, [sp, #36]	; 0x24
   2016e:	8aa2      	ldrh	r2, [r4, #20]
   20170:	e675      	b.n	1fe5e <ticker_job+0x21e>
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   20172:	2800      	cmp	r0, #0
   20174:	f47f af0f 	bne.w	1ff96 <ticker_job+0x356>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   20178:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   2017a:	b11b      	cbz	r3, 20184 <ticker_job+0x544>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   2017c:	7a1b      	ldrb	r3, [r3, #8]
   2017e:	2b01      	cmp	r3, #1
   20180:	f43f af09 	beq.w	1ff96 <ticker_job+0x356>
			instance->ticker_id_slot_previous = id_expired;
   20184:	f88a b01b 	strb.w	fp, [sl, #27]
			instance->ticks_slot_previous = ticker->ticks_slot;
   20188:	69a3      	ldr	r3, [r4, #24]
   2018a:	f8ca 301c 	str.w	r3, [sl, #28]
   2018e:	e702      	b.n	1ff96 <ticker_job+0x356>
					ticker->req = ticker->ack;
   20190:	78a3      	ldrb	r3, [r4, #2]
   20192:	7063      	strb	r3, [r4, #1]
				while (count--) {
   20194:	f04f 0e00 	mov.w	lr, #0
   20198:	e7bc      	b.n	20114 <ticker_job+0x4d4>
		ticker_job_list_insert(instance, insert_head);
   2019a:	9905      	ldr	r1, [sp, #20]
   2019c:	4650      	mov	r0, sl
   2019e:	f7ff fb41 	bl	1f824 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
   201a2:	f89a 3018 	ldrb.w	r3, [sl, #24]
   201a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   201a8:	429a      	cmp	r2, r3
   201aa:	d10f      	bne.n	201cc <ticker_job+0x58c>
	if (flag_compare_update) {
   201ac:	4295      	cmp	r5, r2
   201ae:	d10d      	bne.n	201cc <ticker_job+0x58c>
	if (instance->worker_trigger || compare_trigger) {
   201b0:	f89a 301a 	ldrb.w	r3, [sl, #26]
	instance->job_guard = 0U;
   201b4:	2200      	movs	r2, #0
   201b6:	f88a 2019 	strb.w	r2, [sl, #25]
	if (instance->worker_trigger || compare_trigger) {
   201ba:	2b00      	cmp	r3, #0
   201bc:	f000 80f5 	beq.w	203aa <ticker_job+0x76a>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   201c0:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
   201c4:	4653      	mov	r3, sl
   201c6:	2201      	movs	r2, #1
   201c8:	2103      	movs	r1, #3
   201ca:	e5c5      	b.n	1fd58 <ticker_job+0x118>
	if (instance->ticker_id_head == TICKER_NULL) {
   201cc:	2bff      	cmp	r3, #255	; 0xff
   201ce:	f000 80d9 	beq.w	20384 <ticker_job+0x744>
	if (ticker_id_old_head == TICKER_NULL) {
   201d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   201d4:	2aff      	cmp	r2, #255	; 0xff
   201d6:	f000 8138 	beq.w	2044a <ticker_job+0x80a>
	ticks_to_expire = ticker->ticks_to_expire;
   201da:	f8da 2000 	ldr.w	r2, [sl]
	ticker = &instance->nodes[instance->ticker_id_head];
   201de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   201e2:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   201e6:	6896      	ldr	r6, [r2, #8]
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) && !ticks_to_expire) {
   201e8:	2e00      	cmp	r6, #0
   201ea:	f000 8124 	beq.w	20436 <ticker_job+0x7f6>
		LL_ASSERT(i);
   201ee:	f8df 9224 	ldr.w	r9, [pc, #548]	; 20414 <ticker_job+0x7d4>
   201f2:	f8df 8224 	ldr.w	r8, [pc, #548]	; 20418 <ticker_job+0x7d8>
   201f6:	4f89      	ldr	r7, [pc, #548]	; (2041c <ticker_job+0x7dc>)
	i = 10U;
   201f8:	250a      	movs	r5, #10
		ctr = cntr_cnt_get();
   201fa:	f00c fbc5 	bl	2c988 <cntr_cnt_get>
		cc = instance->ticks_current;
   201fe:	f8da 4014 	ldr.w	r4, [sl, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   20202:	1b03      	subs	r3, r0, r4
   20204:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   20208:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   2020a:	42b3      	cmp	r3, r6
   2020c:	bf2c      	ite	cs
   2020e:	18e4      	addcs	r4, r4, r3
   20210:	19a4      	addcc	r4, r4, r6
		cc &= HAL_TICKER_CNTR_MASK;
   20212:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
   20216:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
		ctr = cntr_cnt_get();
   2021a:	4683      	mov	fp, r0
		instance->trigger_set_cb(cc);
   2021c:	4620      	mov	r0, r4
   2021e:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   20220:	f00c fbb2 	bl	2c988 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   20224:	eba0 030b 	sub.w	r3, r0, fp
   20228:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   2022c:	eba4 040b 	sub.w	r4, r4, fp
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   20230:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   20232:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  HAL_TICKER_CNTR_CMP_OFFSET_MIN) >
   20236:	42a3      	cmp	r3, r4
		i--;
   20238:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  HAL_TICKER_CNTR_CMP_OFFSET_MIN) >
   2023c:	d9b8      	bls.n	201b0 <ticker_job+0x570>
		LL_ASSERT(i);
   2023e:	2d00      	cmp	r5, #0
   20240:	d1db      	bne.n	201fa <ticker_job+0x5ba>
   20242:	f640 13cc 	movw	r3, #2508	; 0x9cc
   20246:	464a      	mov	r2, r9
   20248:	4641      	mov	r1, r8
   2024a:	4638      	mov	r0, r7
   2024c:	f013 f8e4 	bl	33418 <assert_print>
   20250:	4040      	eors	r0, r0
   20252:	f380 8811 	msr	BASEPRI, r0
   20256:	f04f 0003 	mov.w	r0, #3
   2025a:	df02      	svc	2
   2025c:	e7cd      	b.n	201fa <ticker_job+0x5ba>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   2025e:	f8da 601c 	ldr.w	r6, [sl, #28]
   20262:	9b04      	ldr	r3, [sp, #16]
   20264:	42b3      	cmp	r3, r6
			window_start_ticks = instance->ticks_slot_previous -
   20266:	bf38      	it	cc
   20268:	1af6      	subcc	r6, r6, r3
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   2026a:	e9d7 3900 	ldrd	r3, r9, [r7]
		window_start_ticks = 0U;
   2026e:	bf28      	it	cs
   20270:	2600      	movcs	r6, #0
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   20272:	4599      	cmp	r9, r3
		if (instance->ticks_slot_previous > ticks_elapsed) {
   20274:	4611      	mov	r1, r2
		ticker_id_iter = nodes[ticker_id_head].next;
   20276:	f81b 2002 	ldrb.w	r2, [fp, r2]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   2027a:	d26d      	bcs.n	20358 <ticker_job+0x718>
		while (ticker_id_iter != TICKER_NULL &&
   2027c:	2aff      	cmp	r2, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
   2027e:	eba3 0e09 	sub.w	lr, r3, r9
		while (ticker_id_iter != TICKER_NULL &&
   20282:	d069      	beq.n	20358 <ticker_job+0x718>
		       ticks_start_offset + ticker->ticks_slot <=
   20284:	f8d0 c018 	ldr.w	ip, [r0, #24]
		while (ticker_id_iter != TICKER_NULL &&
   20288:	45e6      	cmp	lr, ip
   2028a:	d365      	bcc.n	20358 <ticker_job+0x718>
   2028c:	2300      	movs	r3, #0
   2028e:	e9cd 0701 	strd	r0, r7, [sp, #4]
		       ticks_start_offset + ticker->ticks_slot <=
   20292:	46e0      	mov	r8, ip
		while (ticker_id_iter != TICKER_NULL &&
   20294:	461d      	mov	r5, r3
   20296:	e01b      	b.n	202d0 <ticker_job+0x690>
			if (node->ticks_to_expire >
   20298:	68b8      	ldr	r0, [r7, #8]
					MIN(ticks_slot_window,
   2029a:	1f03      	subs	r3, r0, #4
			if (node->ticks_to_expire >
   2029c:	2804      	cmp	r0, #4
					MIN(ticks_slot_window,
   2029e:	442b      	add	r3, r5
			if (node->ticks_to_expire >
   202a0:	d909      	bls.n	202b6 <ticker_job+0x676>
				window_end_ticks =
   202a2:	4573      	cmp	r3, lr
   202a4:	bf28      	it	cs
   202a6:	4673      	movcs	r3, lr
			if (window_end_ticks > ticks_start_offset +
   202a8:	4543      	cmp	r3, r8
   202aa:	d904      	bls.n	202b6 <ticker_job+0x676>
			if (ticks_to_expire != 0U &&
   202ac:	ebb3 030c 	subs.w	r3, r3, ip
   202b0:	d001      	beq.n	202b6 <ticker_job+0x676>
   202b2:	42b3      	cmp	r3, r6
   202b4:	d21d      	bcs.n	202f2 <ticker_job+0x6b2>
			ticker_id_iter = node->next;
   202b6:	f81b 2002 	ldrb.w	r2, [fp, r2]
			window_start_ticks  = node->ticks_to_expire +
   202ba:	69be      	ldr	r6, [r7, #24]
			ticks_start_offset += node->ticks_to_expire;
   202bc:	4405      	add	r5, r0
		while (ticker_id_iter != TICKER_NULL &&
   202be:	2aff      	cmp	r2, #255	; 0xff
			window_start_ticks  = node->ticks_to_expire +
   202c0:	4406      	add	r6, r0
			ticks_to_expire     = ticks_slot_window -
   202c2:	ebae 030c 	sub.w	r3, lr, ip
		       ticks_start_offset + ticker->ticks_slot <=
   202c6:	eb05 080c 	add.w	r8, r5, ip
		while (ticker_id_iter != TICKER_NULL &&
   202ca:	d012      	beq.n	202f2 <ticker_job+0x6b2>
   202cc:	45c6      	cmp	lr, r8
   202ce:	d310      	bcc.n	202f2 <ticker_job+0x6b2>
			node = &nodes[ticker_id_iter];
   202d0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   202d4:	eb0b 1702 	add.w	r7, fp, r2, lsl #4
   202d8:	0112      	lsls	r2, r2, #4
			if (node->ext_data &&
   202da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   202dc:	2800      	cmp	r0, #0
   202de:	d0db      	beq.n	20298 <ticker_job+0x658>
   202e0:	7a00      	ldrb	r0, [r0, #8]
   202e2:	2801      	cmp	r0, #1
   202e4:	d1d8      	bne.n	20298 <ticker_job+0x658>
				ticker_id_iter = node->next;
   202e6:	f81b 2002 	ldrb.w	r2, [fp, r2]
		while (ticker_id_iter != TICKER_NULL &&
   202ea:	2aff      	cmp	r2, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
   202ec:	eb05 080c 	add.w	r8, r5, ip
		while (ticker_id_iter != TICKER_NULL &&
   202f0:	d1ec      	bne.n	202cc <ticker_job+0x68c>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   202f2:	e9dd 0701 	ldrd	r0, r7, [sp, #4]
   202f6:	6882      	ldr	r2, [r0, #8]
   202f8:	eba9 0202 	sub.w	r2, r9, r2
   202fc:	441a      	add	r2, r3
   202fe:	607a      	str	r2, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   20300:	6083      	str	r3, [r0, #8]
		ticker_id_iter = nodes[ticker_id_head].next;
   20302:	f81b 5001 	ldrb.w	r5, [fp, r1]
		while (ticker_id_iter != TICKER_NULL) {
   20306:	2dff      	cmp	r5, #255	; 0xff
   20308:	d02c      	beq.n	20364 <ticker_job+0x724>
		ticker_id_prev = TICKER_NULL;
   2030a:	26ff      	movs	r6, #255	; 0xff
   2030c:	46b6      	mov	lr, r6
   2030e:	e000      	b.n	20312 <ticker_job+0x6d2>
			ticker_id_iter = node->next;
   20310:	4615      	mov	r5, r2
			node = &nodes[ticker_id_iter];
   20312:	b22a      	sxth	r2, r5
   20314:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   20318:	eb0b 1c02 	add.w	ip, fp, r2, lsl #4
   2031c:	0112      	lsls	r2, r2, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   2031e:	f8dc 6008 	ldr.w	r6, [ip, #8]
   20322:	429e      	cmp	r6, r3
   20324:	f080 80a3 	bcs.w	2046e <ticker_job+0x82e>
				ticker->ticks_to_expire -=
   20328:	1b9b      	subs	r3, r3, r6
   2032a:	6083      	str	r3, [r0, #8]
			ticker_id_iter = node->next;
   2032c:	f81b 2002 	ldrb.w	r2, [fp, r2]
		while (ticker_id_iter != TICKER_NULL) {
   20330:	2aff      	cmp	r2, #255	; 0xff
   20332:	46ae      	mov	lr, r5
   20334:	d1ec      	bne.n	20310 <ticker_job+0x6d0>
		if (ticker_id_prev != TICKER_NULL) {
   20336:	2dff      	cmp	r5, #255	; 0xff
   20338:	d014      	beq.n	20364 <ticker_job+0x724>
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   2033a:	b22d      	sxth	r5, r5
   2033c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
			instance->ticker_id_head = nodes[ticker_id_head].next;
   20340:	f81b 2001 	ldrb.w	r2, [fp, r1]
   20344:	f88a 2018 	strb.w	r2, [sl, #24]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   20348:	012b      	lsls	r3, r5, #4
   2034a:	f81b 2003 	ldrb.w	r2, [fp, r3]
   2034e:	f80b 2001 	strb.w	r2, [fp, r1]
			nodes[ticker_id_prev].next = ticker_id_head;
   20352:	f80b 4003 	strb.w	r4, [fp, r3]
   20356:	e005      	b.n	20364 <ticker_job+0x724>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   20358:	6883      	ldr	r3, [r0, #8]
   2035a:	eba9 0303 	sub.w	r3, r9, r3
   2035e:	607b      	str	r3, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   20360:	2300      	movs	r3, #0
   20362:	6083      	str	r3, [r0, #8]
		ticker->lazy_current--;
   20364:	8bc3      	ldrh	r3, [r0, #30]
   20366:	3b01      	subs	r3, #1
   20368:	83c3      	strh	r3, [r0, #30]
		ext_data->reschedule_state =
   2036a:	f04f 0302 	mov.w	r3, #2
   2036e:	723b      	strb	r3, [r7, #8]
		ticker_id_head = instance->ticker_id_head;
   20370:	f89a 3018 	ldrb.w	r3, [sl, #24]
		while (ticker_id_head != TICKER_NULL) {
   20374:	2bff      	cmp	r3, #255	; 0xff
		rescheduled  = 1U;
   20376:	f04f 0601 	mov.w	r6, #1
		while (ticker_id_head != TICKER_NULL) {
   2037a:	f47f ae42 	bne.w	20002 <ticker_job+0x3c2>
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
   2037e:	9c03      	ldr	r4, [sp, #12]
   20380:	2e00      	cmp	r6, #0
   20382:	d05b      	beq.n	2043c <ticker_job+0x7fc>
		if (cntr_stop() == 0) {
   20384:	f00c fada 	bl	2c93c <cntr_stop>
   20388:	4604      	mov	r4, r0
   2038a:	2800      	cmp	r0, #0
   2038c:	f47f af10 	bne.w	201b0 <ticker_job+0x570>
			instance->ticks_slot_previous = 0U;
   20390:	f8ca 001c 	str.w	r0, [sl, #28]
			instance->ticks_current = cntr_cnt_get();
   20394:	f00c faf8 	bl	2c988 <cntr_cnt_get>
	if (instance->worker_trigger || compare_trigger) {
   20398:	f89a 301a 	ldrb.w	r3, [sl, #26]
			instance->ticks_current = cntr_cnt_get();
   2039c:	f8ca 0014 	str.w	r0, [sl, #20]
	instance->job_guard = 0U;
   203a0:	f88a 4019 	strb.w	r4, [sl, #25]
	if (instance->worker_trigger || compare_trigger) {
   203a4:	2b00      	cmp	r3, #0
   203a6:	f47f af0b 	bne.w	201c0 <ticker_job+0x580>
}
   203aa:	b00f      	add	sp, #60	; 0x3c
   203ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					while (ticks_to_expire <
   203b0:	4297      	cmp	r7, r2
   203b2:	f67f aed6 	bls.w	20162 <ticker_job+0x522>
				lazy = 0U;
   203b6:	4686      	mov	lr, r0
   203b8:	1c48      	adds	r0, r1, #1
   203ba:	9002      	str	r0, [sp, #8]
   203bc:	9c02      	ldr	r4, [sp, #8]
   203be:	950a      	str	r5, [sp, #40]	; 0x28
   203c0:	4670      	mov	r0, lr
   203c2:	e005      	b.n	203d0 <ticker_job+0x790>
	if ((ticker->remainder_current < BIT(31)) &&
   203c4:	468e      	mov	lr, r1
						ticks_to_expire +=
   203c6:	4472      	add	r2, lr
						lazy++;
   203c8:	3001      	adds	r0, #1
					while (ticks_to_expire <
   203ca:	4297      	cmp	r7, r2
						lazy++;
   203cc:	b280      	uxth	r0, r0
					while (ticks_to_expire <
   203ce:	d912      	bls.n	203f6 <ticker_job+0x7b6>
	if ((ticker->remainder_current < BIT(31)) &&
   203d0:	f8df e038 	ldr.w	lr, [pc, #56]	; 2040c <ticker_job+0x7cc>
   203d4:	4d0e      	ldr	r5, [pc, #56]	; (20410 <ticker_job+0x7d0>)
	ticker->remainder_current += ticker->remainder_periodic;
   203d6:	4433      	add	r3, r6
	if ((ticker->remainder_current < BIT(31)) &&
   203d8:	449e      	add	lr, r3
   203da:	45ae      	cmp	lr, r5
   203dc:	d8f2      	bhi.n	203c4 <ticker_job+0x784>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   203de:	46a6      	mov	lr, r4
   203e0:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
						ticks_to_expire +=
   203e4:	4472      	add	r2, lr
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   203e6:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
						lazy++;
   203ea:	3001      	adds	r0, #1
					while (ticks_to_expire <
   203ec:	4297      	cmp	r7, r2
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   203ee:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
						lazy++;
   203f2:	b280      	uxth	r0, r0
					while (ticks_to_expire <
   203f4:	d8ec      	bhi.n	203d0 <ticker_job+0x790>
				ticker->lazy_current += (lazy_periodic + lazy);
   203f6:	9c03      	ldr	r4, [sp, #12]
   203f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   203fa:	6263      	str	r3, [r4, #36]	; 0x24
   203fc:	4460      	add	r0, ip
   203fe:	fa1f fc80 	uxth.w	ip, r0
   20402:	e6ae      	b.n	20162 <ticker_job+0x522>
   20404:	4770      	bx	lr
		flag_elapsed = 0U;
   20406:	4634      	mov	r4, r6
		ticks_elapsed = 0U;
   20408:	9604      	str	r6, [sp, #16]
   2040a:	e43f      	b.n	1fc8c <ticker_job+0x4c>
   2040c:	ff172b5a 	.word	0xff172b5a
   20410:	7f172b59 	.word	0x7f172b59
   20414:	00039f34 	.word	0x00039f34
   20418:	0003a034 	.word	0x0003a034
   2041c:	00039f74 	.word	0x00039f74
			ticker->ticks_to_expire -= ticks_elapsed;
   20420:	4622      	mov	r2, r4
   20422:	46a9      	mov	r9, r5
   20424:	eba3 0309 	sub.w	r3, r3, r9
   20428:	6093      	str	r3, [r2, #8]
   2042a:	9e06      	ldr	r6, [sp, #24]
   2042c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   2042e:	9d07      	ldr	r5, [sp, #28]
		if (instance->ticker_id_head != ticker_id_old_head) {
   20430:	f89a b018 	ldrb.w	fp, [sl, #24]
			break;
   20434:	e5d3      	b.n	1ffde <ticker_job+0x39e>
	instance->job_guard = 0U;
   20436:	f88a 6019 	strb.w	r6, [sl, #25]
	if (instance->worker_trigger || compare_trigger) {
   2043a:	e6c1      	b.n	201c0 <ticker_job+0x580>
	if (instance->ticker_id_head != ticker_id_old_head) {
   2043c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2043e:	2bff      	cmp	r3, #255	; 0xff
   20440:	d1a0      	bne.n	20384 <ticker_job+0x744>
	if (flag_compare_update) {
   20442:	2c00      	cmp	r4, #0
   20444:	f43f aeb4 	beq.w	201b0 <ticker_job+0x570>
   20448:	e79c      	b.n	20384 <ticker_job+0x744>
		ticks_current = cntr_cnt_get();
   2044a:	f00c fa9d 	bl	2c988 <cntr_cnt_get>
   2044e:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   20450:	f00c fa64 	bl	2c91c <cntr_start>
   20454:	f89a 3018 	ldrb.w	r3, [sl, #24]
   20458:	2800      	cmp	r0, #0
   2045a:	f47f aebe 	bne.w	201da <ticker_job+0x59a>
			instance->ticks_current = ticks_current;
   2045e:	f8ca 4014 	str.w	r4, [sl, #20]
   20462:	e6ba      	b.n	201da <ticker_job+0x59a>
	insert_head = TICKER_NULL;
   20464:	23ff      	movs	r3, #255	; 0xff
   20466:	9305      	str	r3, [sp, #20]
   20468:	e556      	b.n	1ff18 <ticker_job+0x2d8>
	while (instance->ticker_id_head != TICKER_NULL) {
   2046a:	46ab      	mov	fp, r5
   2046c:	e5b7      	b.n	1ffde <ticker_job+0x39e>
				node->ticks_to_expire -=
   2046e:	4672      	mov	r2, lr
   20470:	1af3      	subs	r3, r6, r3
   20472:	46b6      	mov	lr, r6
   20474:	f8cc 3008 	str.w	r3, [ip, #8]
				break;
   20478:	4615      	mov	r5, r2
   2047a:	e75c      	b.n	20336 <ticker_job+0x6f6>

0002047c <ticker_init>:
{
   2047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2047e:	9e06      	ldr	r6, [sp, #24]
   20480:	f89d 501c 	ldrb.w	r5, [sp, #28]
   20484:	9c08      	ldr	r4, [sp, #32]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   20486:	b9b8      	cbnz	r0, 204b8 <ticker_init+0x3c>
	instance->count_node = count_node;
   20488:	4f14      	ldr	r7, [pc, #80]	; (204dc <ticker_init+0x60>)
	instance->nodes = node;
   2048a:	603a      	str	r2, [r7, #0]
	while (count_user--) {
   2048c:	1e5a      	subs	r2, r3, #1
	instance->count_node = count_node;
   2048e:	7239      	strb	r1, [r7, #8]
	instance->count_user = count_user;
   20490:	727b      	strb	r3, [r7, #9]
	instance->users = user;
   20492:	607e      	str	r6, [r7, #4]
	while (count_user--) {
   20494:	b2d2      	uxtb	r2, r2
   20496:	b173      	cbz	r3, 204b6 <ticker_init+0x3a>
   20498:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
		users[count_user].user_op = user_op_;
   2049c:	6054      	str	r4, [r2, #4]
		user_op_ += users[count_user].count_user_op;
   2049e:	4611      	mov	r1, r2
   204a0:	f812 3908 	ldrb.w	r3, [r2], #-8
	while (count_user--) {
   204a4:	428e      	cmp	r6, r1
		user_op_ += users[count_user].count_user_op;
   204a6:	eb03 0043 	add.w	r0, r3, r3, lsl #1
		count_op -= users[count_user].count_user_op;
   204aa:	eba5 0303 	sub.w	r3, r5, r3
		user_op_ += users[count_user].count_user_op;
   204ae:	eb04 1400 	add.w	r4, r4, r0, lsl #4
		count_op -= users[count_user].count_user_op;
   204b2:	b2dd      	uxtb	r5, r3
	while (count_user--) {
   204b4:	d1f2      	bne.n	2049c <ticker_init+0x20>
	if (count_op) {
   204b6:	b10d      	cbz	r5, 204bc <ticker_init+0x40>
		return TICKER_STATUS_FAILURE;
   204b8:	2001      	movs	r0, #1
}
   204ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	instance->caller_id_get_cb = caller_id_get_cb;
   204bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   204be:	623b      	str	r3, [r7, #32]
	instance->sched_cb = sched_cb;
   204c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   204c2:	627b      	str	r3, [r7, #36]	; 0x24
	instance->ticker_id_head = TICKER_NULL;
   204c4:	24ff      	movs	r4, #255	; 0xff
	instance->trigger_set_cb = trigger_set_cb;
   204c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   204c8:	62bb      	str	r3, [r7, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
   204ca:	763c      	strb	r4, [r7, #24]
	instance->ticks_current = cntr_cnt_get();
   204cc:	f00c fa5c 	bl	2c988 <cntr_cnt_get>
	instance->ticks_elapsed_first = 0U;
   204d0:	817d      	strh	r5, [r7, #10]
	instance->ticks_current = cntr_cnt_get();
   204d2:	6178      	str	r0, [r7, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
   204d4:	76fc      	strb	r4, [r7, #27]
	instance->ticks_slot_previous = 0U;
   204d6:	61fd      	str	r5, [r7, #28]
	return TICKER_STATUS_SUCCESS;
   204d8:	4628      	mov	r0, r5
}
   204da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   204dc:	20001e84 	.word	0x20001e84

000204e0 <ticker_is_initialized>:
	return !!(_instance[instance_index].count_node);
   204e0:	4b04      	ldr	r3, [pc, #16]	; (204f4 <ticker_is_initialized+0x14>)
   204e2:	222c      	movs	r2, #44	; 0x2c
   204e4:	fb02 3300 	mla	r3, r2, r0, r3
   204e8:	7a18      	ldrb	r0, [r3, #8]
}
   204ea:	3800      	subs	r0, #0
   204ec:	bf18      	it	ne
   204ee:	2001      	movne	r0, #1
   204f0:	4770      	bx	lr
   204f2:	bf00      	nop
   204f4:	20001e84 	.word	0x20001e84

000204f8 <ticker_trigger>:
{
   204f8:	b410      	push	{r4}
	if (instance->sched_cb) {
   204fa:	4b0a      	ldr	r3, [pc, #40]	; (20524 <ticker_trigger+0x2c>)
   204fc:	222c      	movs	r2, #44	; 0x2c
   204fe:	fb02 3200 	mla	r2, r2, r0, r3
   20502:	6a54      	ldr	r4, [r2, #36]	; 0x24
   20504:	b15c      	cbz	r4, 2051e <ticker_trigger+0x26>
	instance = &_instance[instance_index];
   20506:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   2050a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   2050e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   20512:	46a4      	mov	ip, r4
   20514:	2201      	movs	r2, #1
}
   20516:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   20518:	2103      	movs	r1, #3
   2051a:	2002      	movs	r0, #2
   2051c:	4760      	bx	ip
}
   2051e:	bc10      	pop	{r4}
   20520:	4770      	bx	lr
   20522:	bf00      	nop
   20524:	20001e84 	.word	0x20001e84

00020528 <ticker_start_ext>:
{
   20528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   2052c:	4d28      	ldr	r5, [pc, #160]	; (205d0 <ticker_start_ext+0xa8>)
{
   2052e:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
   20532:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   20534:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
   20538:	fb0e 5e04 	mla	lr, lr, r4, r5
{
   2053c:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   2053e:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   20542:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
   20546:	f8de 1004 	ldr.w	r1, [lr, #4]
   2054a:	eb01 06c0 	add.w	r6, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
   2054e:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	last = user->last + 1;
   20552:	78f4      	ldrb	r4, [r6, #3]
	if (last >= user->count_user_op) {
   20554:	f811 8030 	ldrb.w	r8, [r1, r0, lsl #3]
	if (last == user->first) {
   20558:	7871      	ldrb	r1, [r6, #1]
	last = user->last + 1;
   2055a:	f104 0c01 	add.w	ip, r4, #1
   2055e:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   20562:	45e0      	cmp	r8, ip
   20564:	bf98      	it	ls
   20566:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   2056a:	4561      	cmp	r1, ip
   2056c:	d02d      	beq.n	205ca <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
   2056e:	6871      	ldr	r1, [r6, #4]
   20570:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   20574:	ea4f 1904 	mov.w	r9, r4, lsl #4
   20578:	eb01 1404 	add.w	r4, r1, r4, lsl #4
	user_op->op = TICKER_USER_OP_TYPE_START;
   2057c:	f04f 0804 	mov.w	r8, #4
   20580:	f801 8009 	strb.w	r8, [r1, r9]
	user_op->params.start.ticks_at_start = ticks_anchor;
   20584:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   20586:	9b08      	ldr	r3, [sp, #32]
   20588:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   2058a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2058c:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   2058e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20590:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   20592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20594:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
   20596:	9b11      	ldr	r3, [sp, #68]	; 0x44
   20598:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   2059a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2059c:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   2059e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   205a0:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   205a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   205a4:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
   205a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   205a8:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
   205aa:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   205ac:	7062      	strb	r2, [r4, #1]
	user_op->params.start.lazy = lazy;
   205ae:	82a7      	strh	r7, [r4, #20]
	user_op->status = TICKER_STATUS_BUSY;
   205b0:	70a3      	strb	r3, [r4, #2]
	user->last = last;
   205b2:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   205b6:	e9de 3608 	ldrd	r3, r6, [lr, #32]
   205ba:	4798      	blx	r3
   205bc:	462b      	mov	r3, r5
   205be:	4641      	mov	r1, r8
   205c0:	2200      	movs	r2, #0
   205c2:	47b0      	blx	r6
	return user_op->status;
   205c4:	78a0      	ldrb	r0, [r4, #2]
}
   205c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   205ca:	2001      	movs	r0, #1
}
   205cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   205d0:	20001e84 	.word	0x20001e84

000205d4 <ticker_start>:
{
   205d4:	b510      	push	{r4, lr}
   205d6:	b08a      	sub	sp, #40	; 0x28
   205d8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_start_ext(instance_index, user_id, ticker_id,
   205da:	9400      	str	r4, [sp, #0]
{
   205dc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return ticker_start_ext(instance_index, user_id, ticker_id,
   205de:	9401      	str	r4, [sp, #4]
{
   205e0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
   205e2:	9402      	str	r4, [sp, #8]
{
   205e4:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   205e8:	9403      	str	r4, [sp, #12]
{
   205ea:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
   205ec:	9404      	str	r4, [sp, #16]
{
   205ee:	9c11      	ldr	r4, [sp, #68]	; 0x44
	return ticker_start_ext(instance_index, user_id, ticker_id,
   205f0:	9405      	str	r4, [sp, #20]
{
   205f2:	9c12      	ldr	r4, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
   205f4:	9406      	str	r4, [sp, #24]
{
   205f6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   205f8:	9407      	str	r4, [sp, #28]
{
   205fa:	9c14      	ldr	r4, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
   205fc:	9408      	str	r4, [sp, #32]
   205fe:	2400      	movs	r4, #0
   20600:	9409      	str	r4, [sp, #36]	; 0x24
   20602:	f7ff ff91 	bl	20528 <ticker_start_ext>
}
   20606:	b00a      	add	sp, #40	; 0x28
   20608:	bd10      	pop	{r4, pc}
   2060a:	bf00      	nop

0002060c <ticker_update_ext>:
{
   2060c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   20610:	4d28      	ldr	r5, [pc, #160]	; (206b4 <ticker_update_ext+0xa8>)
{
   20612:	f8bd 6034 	ldrh.w	r6, [sp, #52]	; 0x34
   20616:	4604      	mov	r4, r0
   20618:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   2061a:	212c      	movs	r1, #44	; 0x2c
   2061c:	fb01 5104 	mla	r1, r1, r4, r5
	struct ticker_instance *instance = &_instance[instance_index];
   20620:	eb04 0784 	add.w	r7, r4, r4, lsl #2
   20624:	eb04 0447 	add.w	r4, r4, r7, lsl #1
   20628:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	user = &instance->users[user_id];
   2062c:	684c      	ldr	r4, [r1, #4]
{
   2062e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	if (last >= user->count_user_op) {
   20632:	f814 8030 	ldrb.w	r8, [r4, r0, lsl #3]
	user = &instance->users[user_id];
   20636:	eb04 0ec0 	add.w	lr, r4, r0, lsl #3
	last = user->last + 1;
   2063a:	f89e 4003 	ldrb.w	r4, [lr, #3]
	if (last == user->first) {
   2063e:	f89e 9001 	ldrb.w	r9, [lr, #1]
	last = user->last + 1;
   20642:	f104 0c01 	add.w	ip, r4, #1
   20646:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   2064a:	45e0      	cmp	r8, ip
   2064c:	bf98      	it	ls
   2064e:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   20652:	45e1      	cmp	r9, ip
{
   20654:	f89d 8044 	ldrb.w	r8, [sp, #68]	; 0x44
	if (last == user->first) {
   20658:	d029      	beq.n	206ae <ticker_update_ext+0xa2>
	user_op = &user->user_op[user->last];
   2065a:	f8de 9004 	ldr.w	r9, [lr, #4]
   2065e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   20662:	ea4f 1a04 	mov.w	sl, r4, lsl #4
   20666:	eb09 1404 	add.w	r4, r9, r4, lsl #4
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   2066a:	f04f 0b05 	mov.w	fp, #5
   2066e:	f809 b00a 	strb.w	fp, [r9, sl]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   20672:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   20674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20676:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   20678:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2067a:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   2067c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2067e:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
   20680:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20682:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
   20684:	9b10      	ldr	r3, [sp, #64]	; 0x40
   20686:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
   20688:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   2068a:	7062      	strb	r2, [r4, #1]
	user_op->params.update.lazy = lazy;
   2068c:	82a6      	strh	r6, [r4, #20]
	user_op->params.update.force = force;
   2068e:	75a7      	strb	r7, [r4, #22]
	user_op->params.update.must_expire = must_expire;
   20690:	f884 8017 	strb.w	r8, [r4, #23]
	user_op->status = TICKER_STATUS_BUSY;
   20694:	70a3      	strb	r3, [r4, #2]
	user->last = last;
   20696:	f88e c003 	strb.w	ip, [lr, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   2069a:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   2069e:	4798      	blx	r3
   206a0:	462b      	mov	r3, r5
   206a2:	2200      	movs	r2, #0
   206a4:	2104      	movs	r1, #4
   206a6:	47b0      	blx	r6
	return user_op->status;
   206a8:	78a0      	ldrb	r0, [r4, #2]
}
   206aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
   206ae:	2001      	movs	r0, #1
}
   206b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   206b4:	20001e84 	.word	0x20001e84

000206b8 <ticker_update>:
{
   206b8:	b510      	push	{r4, lr}
   206ba:	b088      	sub	sp, #32
   206bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	return ticker_update_ext(instance_index, user_id, ticker_id,
   206be:	9400      	str	r4, [sp, #0]
{
   206c0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   206c2:	9401      	str	r4, [sp, #4]
{
   206c4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
   206c6:	9402      	str	r4, [sp, #8]
{
   206c8:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
	return ticker_update_ext(instance_index, user_id, ticker_id,
   206cc:	9403      	str	r4, [sp, #12]
{
   206ce:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
   206d2:	9404      	str	r4, [sp, #16]
{
   206d4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   206d6:	9405      	str	r4, [sp, #20]
{
   206d8:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
   206da:	9406      	str	r4, [sp, #24]
   206dc:	2400      	movs	r4, #0
   206de:	9407      	str	r4, [sp, #28]
   206e0:	f7ff ff94 	bl	2060c <ticker_update_ext>
}
   206e4:	b008      	add	sp, #32
   206e6:	bd10      	pop	{r4, pc}

000206e8 <ticker_stop>:
{
   206e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   206ec:	4d1e      	ldr	r5, [pc, #120]	; (20768 <ticker_stop+0x80>)
{
   206ee:	4607      	mov	r7, r0
   206f0:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   206f2:	212c      	movs	r1, #44	; 0x2c
   206f4:	fb01 5e07 	mla	lr, r1, r7, r5
	struct ticker_instance *instance = &_instance[instance_index];
   206f8:	eb07 0487 	add.w	r4, r7, r7, lsl #2
   206fc:	eb07 0444 	add.w	r4, r7, r4, lsl #1
   20700:	eb05 0684 	add.w	r6, r5, r4, lsl #2
	user = &instance->users[user_id];
   20704:	f8de 5004 	ldr.w	r5, [lr, #4]
   20708:	eb05 01c0 	add.w	r1, r5, r0, lsl #3
	if (last >= user->count_user_op) {
   2070c:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
   20710:	78cc      	ldrb	r4, [r1, #3]
	if (last == user->first) {
   20712:	784d      	ldrb	r5, [r1, #1]
	last = user->last + 1;
   20714:	f104 0c01 	add.w	ip, r4, #1
   20718:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   2071c:	4567      	cmp	r7, ip
   2071e:	bf98      	it	ls
   20720:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   20724:	4565      	cmp	r5, ip
   20726:	d01b      	beq.n	20760 <ticker_stop+0x78>
	user_op = &user->user_op[user->last];
   20728:	684d      	ldr	r5, [r1, #4]
   2072a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2072e:	0127      	lsls	r7, r4, #4
   20730:	eb05 1404 	add.w	r4, r5, r4, lsl #4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   20734:	f04f 0807 	mov.w	r8, #7
   20738:	f805 8007 	strb.w	r8, [r5, r7]
	user_op->fp_op_func = fp_op_func;
   2073c:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
   2073e:	9b06      	ldr	r3, [sp, #24]
   20740:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
   20742:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   20744:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   20746:	70a3      	strb	r3, [r4, #2]
	user->last = last;
   20748:	f881 c003 	strb.w	ip, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   2074c:	e9de 3508 	ldrd	r3, r5, [lr, #32]
   20750:	4798      	blx	r3
   20752:	4633      	mov	r3, r6
   20754:	2200      	movs	r2, #0
   20756:	2104      	movs	r1, #4
   20758:	47a8      	blx	r5
	return user_op->status;
   2075a:	78a0      	ldrb	r0, [r4, #2]
}
   2075c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   20760:	2001      	movs	r0, #1
}
   20762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20766:	bf00      	nop
   20768:	20001e84 	.word	0x20001e84

0002076c <ticker_stop_abs>:
{
   2076c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   20770:	4d1f      	ldr	r5, [pc, #124]	; (207f0 <ticker_stop_abs+0x84>)
{
   20772:	4607      	mov	r7, r0
   20774:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   20776:	212c      	movs	r1, #44	; 0x2c
   20778:	fb01 5e07 	mla	lr, r1, r7, r5
	struct ticker_instance *instance = &_instance[instance_index];
   2077c:	eb07 0487 	add.w	r4, r7, r7, lsl #2
   20780:	eb07 0444 	add.w	r4, r7, r4, lsl #1
   20784:	eb05 0684 	add.w	r6, r5, r4, lsl #2
	user = &instance->users[user_id];
   20788:	f8de 5004 	ldr.w	r5, [lr, #4]
   2078c:	eb05 01c0 	add.w	r1, r5, r0, lsl #3
	if (last >= user->count_user_op) {
   20790:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
   20794:	78cc      	ldrb	r4, [r1, #3]
	if (last == user->first) {
   20796:	784d      	ldrb	r5, [r1, #1]
	last = user->last + 1;
   20798:	f104 0c01 	add.w	ip, r4, #1
   2079c:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   207a0:	4567      	cmp	r7, ip
   207a2:	bf98      	it	ls
   207a4:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   207a8:	4565      	cmp	r5, ip
   207aa:	d01d      	beq.n	207e8 <ticker_stop_abs+0x7c>
	user_op = &user->user_op[user->last];
   207ac:	684d      	ldr	r5, [r1, #4]
   207ae:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   207b2:	0127      	lsls	r7, r4, #4
   207b4:	eb05 1404 	add.w	r4, r5, r4, lsl #4
	user_op->op = TICKER_USER_OP_TYPE_STOP_ABS;
   207b8:	f04f 0808 	mov.w	r8, #8
   207bc:	f805 8007 	strb.w	r8, [r5, r7]
	user_op->params.yield.ticks_at_yield = ticks_at_stop;
   207c0:	6063      	str	r3, [r4, #4]
	user_op->fp_op_func = fp_op_func;
   207c2:	9b06      	ldr	r3, [sp, #24]
   207c4:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
   207c6:	9b07      	ldr	r3, [sp, #28]
   207c8:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
   207ca:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   207cc:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   207ce:	70a3      	strb	r3, [r4, #2]
	user->last = last;
   207d0:	f881 c003 	strb.w	ip, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   207d4:	e9de 3508 	ldrd	r3, r5, [lr, #32]
   207d8:	4798      	blx	r3
   207da:	4633      	mov	r3, r6
   207dc:	2200      	movs	r2, #0
   207de:	2104      	movs	r1, #4
   207e0:	47a8      	blx	r5
	return user_op->status;
   207e2:	78a0      	ldrb	r0, [r4, #2]
}
   207e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   207e8:	2001      	movs	r0, #1
}
   207ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   207ee:	bf00      	nop
   207f0:	20001e84 	.word	0x20001e84

000207f4 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   207f4:	f00c b8c8 	b.w	2c988 <cntr_cnt_get>

000207f8 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   207f8:	1a40      	subs	r0, r0, r1
}
   207fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   207fe:	4770      	bx	lr

00020800 <ll_addr_set>:

static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   20800:	b538      	push	{r3, r4, r5, lr}
   20802:	4605      	mov	r5, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
   20804:	2000      	movs	r0, #0
{
   20806:	460c      	mov	r4, r1
		if (ull_adv_is_enabled(0)) {
   20808:	f003 fae6 	bl	23dd8 <ull_adv_is_enabled>
   2080c:	b9a8      	cbnz	r0, 2083a <ll_addr_set+0x3a>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
   2080e:	b93d      	cbnz	r5, 20820 <ll_addr_set+0x20>
		} else {
			(void)memset(rnd_addr, 0, BDADDR_SIZE);
		}
	} else {
		if (bdaddr) {
			(void)memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   20810:	480b      	ldr	r0, [pc, #44]	; (20840 <ll_addr_set+0x40>)
   20812:	2206      	movs	r2, #6
   20814:	4621      	mov	r1, r4
		if (bdaddr) {
   20816:	b16c      	cbz	r4, 20834 <ll_addr_set+0x34>
			(void)memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   20818:	f014 fe8d 	bl	35536 <memcpy>
		} else {
			(void)memset(pub_addr, 0, BDADDR_SIZE);
		}
	}

	return 0;
   2081c:	2000      	movs	r0, #0
}
   2081e:	bd38      	pop	{r3, r4, r5, pc}
		if (bdaddr) {
   20820:	b12c      	cbz	r4, 2082e <ll_addr_set+0x2e>
			(void)memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   20822:	2206      	movs	r2, #6
   20824:	4621      	mov	r1, r4
   20826:	4807      	ldr	r0, [pc, #28]	; (20844 <ll_addr_set+0x44>)
   20828:	f014 fe85 	bl	35536 <memcpy>
   2082c:	e7f6      	b.n	2081c <ll_addr_set+0x1c>
			(void)memset(rnd_addr, 0, BDADDR_SIZE);
   2082e:	4805      	ldr	r0, [pc, #20]	; (20844 <ll_addr_set+0x44>)
   20830:	2206      	movs	r2, #6
   20832:	4621      	mov	r1, r4
   20834:	f014 fe8a 	bl	3554c <memset>
   20838:	e7f0      	b.n	2081c <ll_addr_set+0x1c>
			return BT_HCI_ERR_CMD_DISALLOWED;
   2083a:	200c      	movs	r0, #12
}
   2083c:	bd38      	pop	{r3, r4, r5, pc}
   2083e:	bf00      	nop
   20840:	20001eb8 	.word	0x20001eb8
   20844:	20001eb0 	.word	0x20001eb0

00020848 <ll_addr_get>:

uint8_t *ll_addr_get(uint8_t addr_type)
{
	if (addr_type > BT_ADDR_LE_RANDOM) {
   20848:	2801      	cmp	r0, #1
{
   2084a:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
   2084c:	d805      	bhi.n	2085a <ll_addr_get+0x12>

	if (addr_type) {
		return rnd_addr;
	}

	return pub_addr;
   2084e:	4a04      	ldr	r2, [pc, #16]	; (20860 <ll_addr_get+0x18>)
   20850:	4804      	ldr	r0, [pc, #16]	; (20864 <ll_addr_get+0x1c>)
   20852:	2b00      	cmp	r3, #0
   20854:	bf08      	it	eq
   20856:	4610      	moveq	r0, r2
   20858:	4770      	bx	lr
		return NULL;
   2085a:	2000      	movs	r0, #0
}
   2085c:	4770      	bx	lr
   2085e:	bf00      	nop
   20860:	20001eb8 	.word	0x20001eb8
   20864:	20001eb0 	.word	0x20001eb0

00020868 <ll_addr_read>:
	if (addr_type > BT_ADDR_LE_RANDOM) {
   20868:	2801      	cmp	r0, #1

uint8_t *ll_addr_read(uint8_t addr_type, uint8_t *const bdaddr)
{
   2086a:	b510      	push	{r4, lr}
   2086c:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
   2086e:	d80b      	bhi.n	20888 <ll_addr_read+0x20>
	if (addr_type) {
   20870:	4608      	mov	r0, r1
		return rnd_addr;
   20872:	4c07      	ldr	r4, [pc, #28]	; (20890 <ll_addr_read+0x28>)
   20874:	4907      	ldr	r1, [pc, #28]	; (20894 <ll_addr_read+0x2c>)
   20876:	2b00      	cmp	r3, #0
   20878:	bf18      	it	ne
   2087a:	460c      	movne	r4, r1
	uint8_t *addr;

	addr = ll_addr_get(addr_type);
	if (addr) {
		memcpy(bdaddr, addr, BDADDR_SIZE);
   2087c:	2206      	movs	r2, #6
   2087e:	4621      	mov	r1, r4
   20880:	f014 fe59 	bl	35536 <memcpy>
	}

	return addr;
}
   20884:	4620      	mov	r0, r4
   20886:	bd10      	pop	{r4, pc}
		return NULL;
   20888:	2400      	movs	r4, #0
}
   2088a:	4620      	mov	r0, r4
   2088c:	bd10      	pop	{r4, pc}
   2088e:	bf00      	nop
   20890:	20001eb8 	.word	0x20001eb8
   20894:	20001eb0 	.word	0x20001eb0

00020898 <ll_tx_pwr_lvl_get>:
#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   20898:	2802      	cmp	r0, #2
   2089a:	d001      	beq.n	208a0 <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
   2089c:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   2089e:	4770      	bx	lr
{
   208a0:	b538      	push	{r3, r4, r5, lr}
   208a2:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
   208a4:	4608      	mov	r0, r1
   208a6:	461d      	mov	r5, r3
   208a8:	f003 fdb6 	bl	24418 <ll_connected_get>
			if (!conn) {
   208ac:	b110      	cbz	r0, 208b4 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   208ae:	2000      	movs	r0, #0
   208b0:	7028      	strb	r0, [r5, #0]
}
   208b2:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
   208b4:	4620      	mov	r0, r4
}
   208b6:	bd38      	pop	{r3, r4, r5, pc}

000208b8 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   208b8:	2300      	movs	r3, #0
   208ba:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   208bc:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   208be:	4770      	bx	lr

000208c0 <hci_driver_init>:
	.close	= hci_driver_close,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
   208c0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   208c2:	4802      	ldr	r0, [pc, #8]	; (208cc <hci_driver_init+0xc>)
   208c4:	f7f6 fdda 	bl	1747c <bt_hci_driver_register>

	return 0;
}
   208c8:	2000      	movs	r0, #0
   208ca:	bd08      	pop	{r3, pc}
   208cc:	0003a080 	.word	0x0003a080

000208d0 <hci_driver_send>:
{
   208d0:	b5b0      	push	{r4, r5, r7, lr}
   208d2:	b082      	sub	sp, #8
	if (!buf->len) {
   208d4:	8a03      	ldrh	r3, [r0, #16]
{
   208d6:	af00      	add	r7, sp, #0
	if (!buf->len) {
   208d8:	2b00      	cmp	r3, #0
   208da:	d044      	beq.n	20966 <hci_driver_send+0x96>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   208dc:	7e03      	ldrb	r3, [r0, #24]
	switch (type) {
   208de:	4604      	mov	r4, r0
   208e0:	b36b      	cbz	r3, 2093e <hci_driver_send+0x6e>
   208e2:	2b02      	cmp	r3, #2
   208e4:	d018      	beq.n	20918 <hci_driver_send+0x48>
		LOG_ERR("Unknown HCI type %u", type);
   208e6:	466c      	mov	r4, sp
   208e8:	b088      	sub	sp, #32
   208ea:	4669      	mov	r1, sp
   208ec:	4d27      	ldr	r5, [pc, #156]	; (2098c <hci_driver_send+0xbc>)
   208ee:	4828      	ldr	r0, [pc, #160]	; (20990 <hci_driver_send+0xc0>)
	switch (type) {
   208f0:	61cb      	str	r3, [r1, #28]
		LOG_ERR("Unknown HCI type %u", type);
   208f2:	460a      	mov	r2, r1
   208f4:	e9c1 5005 	strd	r5, r0, [r1, #20]
   208f8:	2004      	movs	r0, #4
   208fa:	f842 0f10 	str.w	r0, [r2, #16]!
   208fe:	4825      	ldr	r0, [pc, #148]	; (20994 <hci_driver_send+0xc4>)
   20900:	2300      	movs	r3, #0
   20902:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   20906:	f7f2 fc35 	bl	13174 <z_impl_z_log_msg_static_create>
   2090a:	46a5      	mov	sp, r4
		return -EINVAL;
   2090c:	f06f 0515 	mvn.w	r5, #21
}
   20910:	4628      	mov	r0, r5
   20912:	3708      	adds	r7, #8
   20914:	46bd      	mov	sp, r7
   20916:	bdb0      	pop	{r4, r5, r7, pc}
	err = hci_acl_handle(buf, &evt);
   20918:	1d39      	adds	r1, r7, #4
   2091a:	f000 ff7f 	bl	2181c <hci_acl_handle>
	if (evt) {
   2091e:	687b      	ldr	r3, [r7, #4]
	err = hci_acl_handle(buf, &evt);
   20920:	4605      	mov	r5, r0
	if (evt) {
   20922:	b113      	cbz	r3, 2092a <hci_driver_send+0x5a>
		bt_recv_prio(evt);
   20924:	4618      	mov	r0, r3
   20926:	f7f6 fd8b 	bl	17440 <bt_recv_prio>
	if (!err) {
   2092a:	2d00      	cmp	r5, #0
   2092c:	d1f0      	bne.n	20910 <hci_driver_send+0x40>
		net_buf_unref(buf);
   2092e:	4620      	mov	r0, r4
   20930:	f00c ff96 	bl	2d860 <net_buf_unref>
   20934:	2500      	movs	r5, #0
}
   20936:	4628      	mov	r0, r5
   20938:	3708      	adds	r7, #8
   2093a:	46bd      	mov	sp, r7
   2093c:	bdb0      	pop	{r4, r5, r7, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   2093e:	1d39      	adds	r1, r7, #4
	struct node_rx_pdu *node_rx = NULL;
   20940:	607b      	str	r3, [r7, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   20942:	f000 fab9 	bl	20eb8 <hci_cmd_handle>
	if (evt) {
   20946:	2800      	cmp	r0, #0
   20948:	d0f1      	beq.n	2092e <hci_driver_send+0x5e>
		bt_recv_prio(evt);
   2094a:	f7f6 fd79 	bl	17440 <bt_recv_prio>
		if (node_rx) {
   2094e:	687d      	ldr	r5, [r7, #4]
   20950:	2d00      	cmp	r5, #0
   20952:	d0ec      	beq.n	2092e <hci_driver_send+0x5e>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   20954:	4628      	mov	r0, r5
   20956:	f001 fbc9 	bl	220ec <hci_get_class>
   2095a:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
   2095c:	6879      	ldr	r1, [r7, #4]
   2095e:	480e      	ldr	r0, [pc, #56]	; (20998 <hci_driver_send+0xc8>)
   20960:	f017 ff96 	bl	38890 <k_queue_append>
	if (!err) {
   20964:	e7e3      	b.n	2092e <hci_driver_send+0x5e>
		LOG_ERR("Empty HCI packet");
   20966:	466c      	mov	r4, sp
   20968:	b088      	sub	sp, #32
   2096a:	4669      	mov	r1, sp
   2096c:	4d0b      	ldr	r5, [pc, #44]	; (2099c <hci_driver_send+0xcc>)
   2096e:	4808      	ldr	r0, [pc, #32]	; (20990 <hci_driver_send+0xc0>)
   20970:	460a      	mov	r2, r1
   20972:	e9c1 5005 	strd	r5, r0, [r1, #20]
   20976:	2103      	movs	r1, #3
   20978:	f842 1f10 	str.w	r1, [r2, #16]!
   2097c:	4805      	ldr	r0, [pc, #20]	; (20994 <hci_driver_send+0xc4>)
   2097e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   20982:	f7f2 fbf7 	bl	13174 <z_impl_z_log_msg_static_create>
   20986:	46a5      	mov	sp, r4
		return -EINVAL;
   20988:	e7c0      	b.n	2090c <hci_driver_send+0x3c>
   2098a:	bf00      	nop
   2098c:	00039fac 	.word	0x00039fac
   20990:	0003a050 	.word	0x0003a050
   20994:	00039590 	.word	0x00039590
   20998:	20001ec0 	.word	0x20001ec0
   2099c:	00039f94 	.word	0x00039f94

000209a0 <hci_driver_close>:
{
   209a0:	b508      	push	{r3, lr}
	ll_deinit();
   209a2:	f002 fda1 	bl	234e8 <ll_deinit>
	z_impl_k_thread_abort(thread);
   209a6:	4804      	ldr	r0, [pc, #16]	; (209b8 <hci_driver_close+0x18>)
   209a8:	f7f4 fc7e 	bl	152a8 <z_impl_k_thread_abort>
   209ac:	4803      	ldr	r0, [pc, #12]	; (209bc <hci_driver_close+0x1c>)
   209ae:	f7f4 fc7b 	bl	152a8 <z_impl_k_thread_abort>
}
   209b2:	2000      	movs	r0, #0
   209b4:	bd08      	pop	{r3, pc}
   209b6:	bf00      	nop
   209b8:	20001638 	.word	0x20001638
   209bc:	200015b8 	.word	0x200015b8

000209c0 <recv_thread>:
{
   209c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_queue_get(queue, timeout);
   209c4:	4e42      	ldr	r6, [pc, #264]	; (20ad0 <recv_thread+0x110>)
		LL_ASSERT(0);
   209c6:	f8df 810c 	ldr.w	r8, [pc, #268]	; 20ad4 <recv_thread+0x114>
   209ca:	4f43      	ldr	r7, [pc, #268]	; (20ad8 <recv_thread+0x118>)
{
   209cc:	b082      	sub	sp, #8
   209ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   209d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   209d6:	4630      	mov	r0, r6
   209d8:	f011 f848 	bl	31a6c <z_impl_k_queue_get>
		if (node_rx && !buf) {
   209dc:	2800      	cmp	r0, #0
   209de:	d0f6      	beq.n	209ce <recv_thread+0xe>
	uint8_t class = node_rx->hdr.user_meta;
   209e0:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   209e2:	9001      	str	r0, [sp, #4]
	switch (class) {
   209e4:	2b04      	cmp	r3, #4
   209e6:	d821      	bhi.n	20a2c <recv_thread+0x6c>
   209e8:	2b00      	cmp	r3, #0
   209ea:	d14b      	bne.n	20a84 <recv_thread+0xc4>
		LL_ASSERT(0);
   209ec:	483b      	ldr	r0, [pc, #236]	; (20adc <recv_thread+0x11c>)
   209ee:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
   209f2:	4642      	mov	r2, r8
   209f4:	4639      	mov	r1, r7
   209f6:	f012 fd0f 	bl	33418 <assert_print>
   209fa:	4040      	eors	r0, r0
   209fc:	f380 8811 	msr	BASEPRI, r0
   20a00:	f04f 0003 	mov.w	r0, #3
   20a04:	df02      	svc	2
	node_rx->hdr.next = NULL;
   20a06:	9b01      	ldr	r3, [sp, #4]
   20a08:	2200      	movs	r2, #0
   20a0a:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   20a0c:	a801      	add	r0, sp, #4
   20a0e:	f001 ffa3 	bl	22958 <ll_rx_mem_release>
   20a12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20a16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20a1a:	4630      	mov	r0, r6
   20a1c:	f011 f826 	bl	31a6c <z_impl_k_queue_get>
		if (node_rx && !buf) {
   20a20:	2800      	cmp	r0, #0
   20a22:	d0d4      	beq.n	209ce <recv_thread+0xe>
	uint8_t class = node_rx->hdr.user_meta;
   20a24:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   20a26:	9001      	str	r0, [sp, #4]
	switch (class) {
   20a28:	2b04      	cmp	r3, #4
   20a2a:	d9dd      	bls.n	209e8 <recv_thread+0x28>
   20a2c:	2b05      	cmp	r3, #5
   20a2e:	d1dd      	bne.n	209ec <recv_thread+0x2c>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   20a30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20a34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20a38:	2003      	movs	r0, #3
   20a3a:	f7f5 f9cb 	bl	15dd4 <bt_buf_get_rx>
   20a3e:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   20a40:	4621      	mov	r1, r4
   20a42:	9801      	ldr	r0, [sp, #4]
   20a44:	f000 ffc6 	bl	219d4 <hci_acl_encode>
	node_rx->hdr.next = NULL;
   20a48:	9b01      	ldr	r3, [sp, #4]
   20a4a:	2200      	movs	r2, #0
   20a4c:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   20a4e:	a801      	add	r0, sp, #4
   20a50:	f001 ff82 	bl	22958 <ll_rx_mem_release>
		while (buf) {
   20a54:	2c00      	cmp	r4, #0
   20a56:	d0ba      	beq.n	209ce <recv_thread+0xe>
			frag = net_buf_ref(buf);
   20a58:	4620      	mov	r0, r4
   20a5a:	f016 ffd7 	bl	37a0c <net_buf_ref>
			buf = net_buf_frag_del(NULL, buf);
   20a5e:	4621      	mov	r1, r4
			frag = net_buf_ref(buf);
   20a60:	4605      	mov	r5, r0
			buf = net_buf_frag_del(NULL, buf);
   20a62:	2000      	movs	r0, #0
   20a64:	f016 fff8 	bl	37a58 <net_buf_frag_del>
			if (frag->len) {
   20a68:	8a2b      	ldrh	r3, [r5, #16]
			buf = net_buf_frag_del(NULL, buf);
   20a6a:	4604      	mov	r4, r0
				bt_recv(frag);
   20a6c:	4628      	mov	r0, r5
			if (frag->len) {
   20a6e:	b133      	cbz	r3, 20a7e <recv_thread+0xbe>
				bt_recv(frag);
   20a70:	f7f6 fc2a 	bl	172c8 <bt_recv>
	z_impl_k_yield();
   20a74:	f011 fcb4 	bl	323e0 <z_impl_k_yield>
		while (buf) {
   20a78:	2c00      	cmp	r4, #0
   20a7a:	d1ed      	bne.n	20a58 <recv_thread+0x98>
   20a7c:	e7a7      	b.n	209ce <recv_thread+0xe>
				net_buf_unref(frag);
   20a7e:	f00c feef 	bl	2d860 <net_buf_unref>
   20a82:	e7f7      	b.n	20a74 <recv_thread+0xb4>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   20a84:	2b02      	cmp	r3, #2
   20a86:	d013      	beq.n	20ab0 <recv_thread+0xf0>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   20a88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20a8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20a90:	2001      	movs	r0, #1
   20a92:	f7f5 f99f 	bl	15dd4 <bt_buf_get_rx>
   20a96:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
   20a98:	9801      	ldr	r0, [sp, #4]
		if (buf) {
   20a9a:	b19c      	cbz	r4, 20ac4 <recv_thread+0x104>
			hci_evt_encode(node_rx, buf);
   20a9c:	4621      	mov	r1, r4
   20a9e:	f000 ffd3 	bl	21a48 <hci_evt_encode>
	node_rx->hdr.next = NULL;
   20aa2:	9b01      	ldr	r3, [sp, #4]
   20aa4:	2200      	movs	r2, #0
   20aa6:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   20aa8:	a801      	add	r0, sp, #4
   20aaa:	f001 ff55 	bl	22958 <ll_rx_mem_release>
		while (buf) {
   20aae:	e7d3      	b.n	20a58 <recv_thread+0x98>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   20ab0:	2200      	movs	r2, #0
   20ab2:	2300      	movs	r3, #0
   20ab4:	2101      	movs	r1, #1
   20ab6:	2000      	movs	r0, #0
   20ab8:	f7f5 f9b6 	bl	15e28 <bt_buf_get_evt>
   20abc:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
   20abe:	9801      	ldr	r0, [sp, #4]
		if (buf) {
   20ac0:	2c00      	cmp	r4, #0
   20ac2:	d1eb      	bne.n	20a9c <recv_thread+0xdc>
	node_rx->hdr.next = NULL;
   20ac4:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
   20ac6:	a801      	add	r0, sp, #4
   20ac8:	f001 ff46 	bl	22958 <ll_rx_mem_release>
		while (buf) {
   20acc:	e77f      	b.n	209ce <recv_thread+0xe>
   20ace:	bf00      	nop
   20ad0:	20001ec0 	.word	0x20001ec0
   20ad4:	00039fc4 	.word	0x00039fc4
   20ad8:	0003a004 	.word	0x0003a004
   20adc:	00039f74 	.word	0x00039f74

00020ae0 <prio_recv_thread>:
{
   20ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   20ae4:	4f2e      	ldr	r7, [pc, #184]	; (20ba0 <prio_recv_thread+0xc0>)
				k_fifo_put(&recv_fifo, node_rx);
   20ae6:	4e2f      	ldr	r6, [pc, #188]	; (20ba4 <prio_recv_thread+0xc4>)
{
   20ae8:	b082      	sub	sp, #8
   20aea:	e00c      	b.n	20b06 <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   20aec:	f7f5 f99c 	bl	15e28 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   20af0:	4622      	mov	r2, r4
   20af2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   20af6:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   20af8:	f001 fae0 	bl	220bc <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   20afc:	4620      	mov	r0, r4
   20afe:	f7f6 fc9f 	bl	17440 <bt_recv_prio>
	z_impl_k_yield();
   20b02:	f011 fc6d 	bl	323e0 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   20b06:	f10d 0102 	add.w	r1, sp, #2
   20b0a:	a801      	add	r0, sp, #4
   20b0c:	f001 fdda 	bl	226c4 <ll_rx_get>
   20b10:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   20b12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20b1a:	2100      	movs	r1, #0
   20b1c:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   20b1e:	2c00      	cmp	r4, #0
   20b20:	d1e4      	bne.n	20aec <prio_recv_thread+0xc>
		if (node_rx) {
   20b22:	9b01      	ldr	r3, [sp, #4]
   20b24:	b1b3      	cbz	r3, 20b54 <prio_recv_thread+0x74>
			ll_rx_dequeue();
   20b26:	f001 fe47 	bl	227b8 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   20b2a:	f8dd 8004 	ldr.w	r8, [sp, #4]
   20b2e:	4640      	mov	r0, r8
   20b30:	f001 fadc 	bl	220ec <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
   20b34:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   20b36:	f888 0005 	strb.w	r0, [r8, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
   20b3a:	796b      	ldrb	r3, [r5, #5]
   20b3c:	2b03      	cmp	r3, #3
   20b3e:	d102      	bne.n	20b46 <prio_recv_thread+0x66>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
   20b40:	792b      	ldrb	r3, [r5, #4]
   20b42:	2b18      	cmp	r3, #24
   20b44:	d00e      	beq.n	20b64 <prio_recv_thread+0x84>
				k_fifo_put(&recv_fifo, node_rx);
   20b46:	4629      	mov	r1, r5
   20b48:	4630      	mov	r0, r6
   20b4a:	f017 fea1 	bl	38890 <k_queue_append>
		if (iso_received || node_rx) {
   20b4e:	9b01      	ldr	r3, [sp, #4]
   20b50:	2b00      	cmp	r3, #0
   20b52:	d1d8      	bne.n	20b06 <prio_recv_thread+0x26>
	return z_impl_k_sem_take(sem, timeout);
   20b54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20b58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20b5c:	4638      	mov	r0, r7
   20b5e:	f010 ffdf 	bl	31b20 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   20b62:	e7d0      	b.n	20b06 <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   20b64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20b68:	4621      	mov	r1, r4
   20b6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20b6e:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
   20b70:	f8b5 8006 	ldrh.w	r8, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   20b74:	f7f5 f958 	bl	15e28 <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
   20b78:	4641      	mov	r1, r8
   20b7a:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   20b7c:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
   20b7e:	f105 001c 	add.w	r0, r5, #28
   20b82:	f000 feff 	bl	21984 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
   20b86:	4640      	mov	r0, r8
   20b88:	f000 ff1c 	bl	219c4 <hci_disconn_complete_process>
				bt_recv_prio(buf);
   20b8c:	4620      	mov	r0, r4
			if (buf) {
   20b8e:	b124      	cbz	r4, 20b9a <prio_recv_thread+0xba>
				bt_recv_prio(buf);
   20b90:	f7f6 fc56 	bl	17440 <bt_recv_prio>
					net_buf_unref(buf);
   20b94:	4620      	mov	r0, r4
   20b96:	f00c fe63 	bl	2d860 <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
   20b9a:	9d01      	ldr	r5, [sp, #4]
   20b9c:	e7d3      	b.n	20b46 <prio_recv_thread+0x66>
   20b9e:	bf00      	nop
   20ba0:	20001ed8 	.word	0x20001ed8
   20ba4:	20001ec0 	.word	0x20001ec0

00020ba8 <hci_driver_open>:
{
   20ba8:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   20bac:	b089      	sub	sp, #36	; 0x24
   20bae:	af08      	add	r7, sp, #32
	z_impl_k_queue_init(queue);
   20bb0:	482c      	ldr	r0, [pc, #176]	; (20c64 <hci_driver_open+0xbc>)
   20bb2:	f017 fe41 	bl	38838 <z_impl_k_queue_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
   20bb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20bba:	2100      	movs	r1, #0
   20bbc:	482a      	ldr	r0, [pc, #168]	; (20c68 <hci_driver_open+0xc0>)
   20bbe:	f017 fe80 	bl	388c2 <z_impl_k_sem_init>
	err = ll_init(&sem_prio_recv);
   20bc2:	4829      	ldr	r0, [pc, #164]	; (20c68 <hci_driver_open+0xc0>)
   20bc4:	f002 fb80 	bl	232c8 <ll_init>
	if (err) {
   20bc8:	4604      	mov	r4, r0
   20bca:	2800      	cmp	r0, #0
   20bcc:	d132      	bne.n	20c34 <hci_driver_open+0x8c>
	hci_init(NULL);
   20bce:	f001 faa3 	bl	22118 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   20bd2:	f04f 0800 	mov.w	r8, #0
   20bd6:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   20bda:	f06f 0209 	mvn.w	r2, #9
   20bde:	e9cd 2403 	strd	r2, r4, [sp, #12]
   20be2:	e9cd 8906 	strd	r8, r9, [sp, #24]
   20be6:	e9cd 4401 	strd	r4, r4, [sp, #4]
   20bea:	4b20      	ldr	r3, [pc, #128]	; (20c6c <hci_driver_open+0xc4>)
   20bec:	4920      	ldr	r1, [pc, #128]	; (20c70 <hci_driver_open+0xc8>)
   20bee:	9400      	str	r4, [sp, #0]
   20bf0:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   20bf4:	481f      	ldr	r0, [pc, #124]	; (20c74 <hci_driver_open+0xcc>)
   20bf6:	f010 fddf 	bl	317b8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   20bfa:	491f      	ldr	r1, [pc, #124]	; (20c78 <hci_driver_open+0xd0>)
   20bfc:	481d      	ldr	r0, [pc, #116]	; (20c74 <hci_driver_open+0xcc>)
   20bfe:	f017 fd8c 	bl	3871a <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   20c02:	f06f 0207 	mvn.w	r2, #7
   20c06:	e9cd 2403 	strd	r2, r4, [sp, #12]
   20c0a:	e9cd 8906 	strd	r8, r9, [sp, #24]
   20c0e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   20c12:	4b1a      	ldr	r3, [pc, #104]	; (20c7c <hci_driver_open+0xd4>)
   20c14:	491a      	ldr	r1, [pc, #104]	; (20c80 <hci_driver_open+0xd8>)
   20c16:	9400      	str	r4, [sp, #0]
   20c18:	f640 0298 	movw	r2, #2200	; 0x898
   20c1c:	4819      	ldr	r0, [pc, #100]	; (20c84 <hci_driver_open+0xdc>)
   20c1e:	f010 fdcb 	bl	317b8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   20c22:	4919      	ldr	r1, [pc, #100]	; (20c88 <hci_driver_open+0xe0>)
   20c24:	4817      	ldr	r0, [pc, #92]	; (20c84 <hci_driver_open+0xdc>)
   20c26:	f017 fd78 	bl	3871a <z_impl_k_thread_name_set>
}
   20c2a:	4620      	mov	r0, r4
   20c2c:	3704      	adds	r7, #4
   20c2e:	46bd      	mov	sp, r7
   20c30:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
		LOG_ERR("LL initialization failed: %d", err);
   20c34:	46e8      	mov	r8, sp
   20c36:	b088      	sub	sp, #32
   20c38:	4814      	ldr	r0, [pc, #80]	; (20c8c <hci_driver_open+0xe4>)
   20c3a:	4915      	ldr	r1, [pc, #84]	; (20c90 <hci_driver_open+0xe8>)
   20c3c:	f8c8 401c 	str.w	r4, [r8, #28]
   20c40:	4642      	mov	r2, r8
   20c42:	e9c8 0105 	strd	r0, r1, [r8, #20]
   20c46:	2104      	movs	r1, #4
   20c48:	f842 1f10 	str.w	r1, [r2, #16]!
   20c4c:	4811      	ldr	r0, [pc, #68]	; (20c94 <hci_driver_open+0xec>)
   20c4e:	2300      	movs	r3, #0
   20c50:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   20c54:	f7f2 fa8e 	bl	13174 <z_impl_z_log_msg_static_create>
}
   20c58:	4620      	mov	r0, r4
   20c5a:	46c5      	mov	sp, r8
   20c5c:	3704      	adds	r7, #4
   20c5e:	46bd      	mov	sp, r7
   20c60:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   20c64:	20001ec0 	.word	0x20001ec0
   20c68:	20001ed8 	.word	0x20001ed8
   20c6c:	00020ae1 	.word	0x00020ae1
   20c70:	20004940 	.word	0x20004940
   20c74:	20001638 	.word	0x20001638
   20c78:	0003a02c 	.word	0x0003a02c
   20c7c:	000209c1 	.word	0x000209c1
   20c80:	20004040 	.word	0x20004040
   20c84:	200015b8 	.word	0x200015b8
   20c88:	0003a038 	.word	0x0003a038
   20c8c:	0003a008 	.word	0x0003a008
   20c90:	0003a040 	.word	0x0003a040
   20c94:	00039590 	.word	0x00039590

00020c98 <hci_recv_fifo_reset>:
{
   20c98:	b510      	push	{r4, lr}
	k_sched_lock();
   20c9a:	f011 fb65 	bl	32368 <k_sched_lock>
	z_impl_k_queue_cancel_wait(queue);
   20c9e:	4c05      	ldr	r4, [pc, #20]	; (20cb4 <hci_recv_fifo_reset+0x1c>)
   20ca0:	4620      	mov	r0, r4
   20ca2:	f017 fdd5 	bl	38850 <z_impl_k_queue_cancel_wait>
	z_impl_k_queue_init(queue);
   20ca6:	4620      	mov	r0, r4
   20ca8:	f017 fdc6 	bl	38838 <z_impl_k_queue_init>
}
   20cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_sched_unlock();
   20cb0:	f011 bb6e 	b.w	32390 <k_sched_unlock>
   20cb4:	20001ec0 	.word	0x20001ec0

00020cb8 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   20cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   20cba:	4c18      	ldr	r4, [pc, #96]	; (20d1c <le_remote_feat_complete+0x64>)
   20cbc:	6864      	ldr	r4, [r4, #4]
   20cbe:	00a4      	lsls	r4, r4, #2
   20cc0:	d504      	bpl.n	20ccc <le_remote_feat_complete+0x14>
   20cc2:	4615      	mov	r5, r2
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   20cc4:	4a16      	ldr	r2, [pc, #88]	; (20d20 <le_remote_feat_complete+0x68>)
   20cc6:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   20cc8:	0712      	lsls	r2, r2, #28
   20cca:	d400      	bmi.n	20cce <le_remote_feat_complete+0x16>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   20ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20cce:	f103 040c 	add.w	r4, r3, #12
   20cd2:	4607      	mov	r7, r0
   20cd4:	460e      	mov	r6, r1
   20cd6:	4620      	mov	r0, r4
   20cd8:	2102      	movs	r1, #2
   20cda:	f016 fec9 	bl	37a70 <net_buf_simple_add>
	hdr->evt = evt;
   20cde:	f640 433e 	movw	r3, #3134	; 0xc3e
   20ce2:	8003      	strh	r3, [r0, #0]
   20ce4:	2101      	movs	r1, #1
   20ce6:	4620      	mov	r0, r4
   20ce8:	f016 fec2 	bl	37a70 <net_buf_simple_add>
   20cec:	4603      	mov	r3, r0
	me->subevent = subevt;
   20cee:	2204      	movs	r2, #4
   20cf0:	701a      	strb	r2, [r3, #0]
   20cf2:	4620      	mov	r0, r4
   20cf4:	210b      	movs	r1, #11
   20cf6:	f016 febb 	bl	37a70 <net_buf_simple_add>
		memcpy(&sep->features[0],
   20cfa:	2208      	movs	r2, #8
	sep->status = status;
   20cfc:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   20cfe:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
   20d02:	b92f      	cbnz	r7, 20d10 <le_remote_feat_complete+0x58>
		memcpy(&sep->features[0],
   20d04:	1d31      	adds	r1, r6, #4
   20d06:	3003      	adds	r0, #3
}
   20d08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
   20d0c:	f014 bc13 	b.w	35536 <memcpy>
}
   20d10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   20d14:	2100      	movs	r1, #0
   20d16:	3003      	adds	r0, #3
   20d18:	f014 bc18 	b.w	3554c <memset>
   20d1c:	200001e8 	.word	0x200001e8
   20d20:	200001e0 	.word	0x200001e0

00020d24 <hci_vendor_cmd_handle_common>:
{
   20d24:	b570      	push	{r4, r5, r6, lr}
	switch (ocf) {
   20d26:	3801      	subs	r0, #1
{
   20d28:	b086      	sub	sp, #24
   20d2a:	4614      	mov	r4, r2
	switch (ocf) {
   20d2c:	2811      	cmp	r0, #17
   20d2e:	d80a      	bhi.n	20d46 <hci_vendor_cmd_handle_common+0x22>
   20d30:	e8df f000 	tbb	[pc, r0]
   20d34:	095a4023 	.word	0x095a4023
   20d38:	7d096b09 	.word	0x7d096b09
   20d3c:	0909ab98 	.word	0x0909ab98
   20d40:	09090909 	.word	0x09090909
   20d44:	0d09      	.short	0x0d09
   20d46:	f06f 0015 	mvn.w	r0, #21
}
   20d4a:	b006      	add	sp, #24
   20d4c:	bd70      	pop	{r4, r5, r6, pc}
	struct bt_hci_cp_vs_set_min_num_used_chans *cmd = (void *)buf->data;
   20d4e:	68cb      	ldr	r3, [r1, #12]
	status = ll_set_min_used_chans(handle, cmd->phys, cmd->min_used_chans);
   20d50:	78da      	ldrb	r2, [r3, #3]
   20d52:	7899      	ldrb	r1, [r3, #2]
   20d54:	8818      	ldrh	r0, [r3, #0]
   20d56:	f008 fccd 	bl	296f4 <ll_set_min_used_chans>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   20d5a:	4b55      	ldr	r3, [pc, #340]	; (20eb0 <hci_vendor_cmd_handle_common+0x18c>)
	status = ll_set_min_used_chans(handle, cmd->phys, cmd->min_used_chans);
   20d5c:	4606      	mov	r6, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   20d5e:	2101      	movs	r1, #1
   20d60:	8818      	ldrh	r0, [r3, #0]
   20d62:	f014 fe59 	bl	35a18 <bt_hci_cmd_complete_create>
   20d66:	2101      	movs	r1, #1
   20d68:	4605      	mov	r5, r0
   20d6a:	300c      	adds	r0, #12
   20d6c:	f016 fe80 	bl	37a70 <net_buf_simple_add>
	ccst->status = status;
   20d70:	7006      	strb	r6, [r0, #0]
	*evt = cmd_complete_status(status);
   20d72:	6025      	str	r5, [r4, #0]
	return 0;
   20d74:	2000      	movs	r0, #0
}
   20d76:	b006      	add	sp, #24
   20d78:	bd70      	pop	{r4, r5, r6, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   20d7a:	4b4d      	ldr	r3, [pc, #308]	; (20eb0 <hci_vendor_cmd_handle_common+0x18c>)
   20d7c:	210d      	movs	r1, #13
   20d7e:	8818      	ldrh	r0, [r3, #0]
   20d80:	f014 fe4a 	bl	35a18 <bt_hci_cmd_complete_create>
   20d84:	210d      	movs	r1, #13
   20d86:	6020      	str	r0, [r4, #0]
   20d88:	300c      	adds	r0, #12
   20d8a:	f016 fe71 	bl	37a70 <net_buf_simple_add>
	rp->fw_variant = 0U;
   20d8e:	f44f 7240 	mov.w	r2, #768	; 0x300
	rp->status = 0x00;
   20d92:	2300      	movs	r3, #0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   20d94:	f04f 1402 	mov.w	r4, #131074	; 0x20002
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   20d98:	2102      	movs	r1, #2
	rp->fw_variant = 0U;
   20d9a:	f8a0 2005 	strh.w	r2, [r0, #5]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   20d9e:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
   20da0:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   20da2:	f8c0 4001 	str.w	r4, [r0, #1]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   20da6:	71c1      	strb	r1, [r0, #7]
   20da8:	7203      	strb	r3, [r0, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   20daa:	7242      	strb	r2, [r0, #9]
   20dac:	7283      	strb	r3, [r0, #10]
   20dae:	72c3      	strb	r3, [r0, #11]
   20db0:	7303      	strb	r3, [r0, #12]
}
   20db2:	e7df      	b.n	20d74 <hci_vendor_cmd_handle_common+0x50>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   20db4:	4b3e      	ldr	r3, [pc, #248]	; (20eb0 <hci_vendor_cmd_handle_common+0x18c>)
   20db6:	2141      	movs	r1, #65	; 0x41
   20db8:	8818      	ldrh	r0, [r3, #0]
   20dba:	f014 fe2d 	bl	35a18 <bt_hci_cmd_complete_create>
   20dbe:	2141      	movs	r1, #65	; 0x41
   20dc0:	6020      	str	r0, [r4, #0]
   20dc2:	300c      	adds	r0, #12
   20dc4:	f016 fe54 	bl	37a70 <net_buf_simple_add>
	rp->status = 0x00;
   20dc8:	2100      	movs	r1, #0
   20dca:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   20dcc:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   20dce:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   20dd2:	f014 fbbb 	bl	3554c <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   20dd6:	7862      	ldrb	r2, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   20dd8:	78a3      	ldrb	r3, [r4, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
   20dda:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
   20dde:	f043 0303 	orr.w	r3, r3, #3
	rp->commands[0] |= BIT(5) | BIT(7);
   20de2:	7062      	strb	r2, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   20de4:	70a3      	strb	r3, [r4, #2]
}
   20de6:	e7c5      	b.n	20d74 <hci_vendor_cmd_handle_common+0x50>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   20de8:	4b31      	ldr	r3, [pc, #196]	; (20eb0 <hci_vendor_cmd_handle_common+0x18c>)
   20dea:	2109      	movs	r1, #9
   20dec:	8818      	ldrh	r0, [r3, #0]
   20dee:	f014 fe13 	bl	35a18 <bt_hci_cmd_complete_create>
   20df2:	2109      	movs	r1, #9
   20df4:	6020      	str	r0, [r4, #0]
   20df6:	300c      	adds	r0, #12
   20df8:	f016 fe3a 	bl	37a70 <net_buf_simple_add>
	rp->status = 0x00;
   20dfc:	2100      	movs	r1, #0
   20dfe:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   20e02:	2208      	movs	r2, #8
   20e04:	f014 fba2 	bl	3554c <memset>
}
   20e08:	e7b4      	b.n	20d74 <hci_vendor_cmd_handle_common+0x50>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   20e0a:	68c9      	ldr	r1, [r1, #12]
   20e0c:	2000      	movs	r0, #0
   20e0e:	f7ff fcf7 	bl	20800 <ll_addr_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   20e12:	4b27      	ldr	r3, [pc, #156]	; (20eb0 <hci_vendor_cmd_handle_common+0x18c>)
   20e14:	2101      	movs	r1, #1
   20e16:	8818      	ldrh	r0, [r3, #0]
   20e18:	f014 fdfe 	bl	35a18 <bt_hci_cmd_complete_create>
   20e1c:	2101      	movs	r1, #1
   20e1e:	4605      	mov	r5, r0
   20e20:	300c      	adds	r0, #12
   20e22:	f016 fe25 	bl	37a70 <net_buf_simple_add>
	ccst->status = status;
   20e26:	2300      	movs	r3, #0
   20e28:	7003      	strb	r3, [r0, #0]
	*evt = cmd_complete_status(0x00);
   20e2a:	6025      	str	r5, [r4, #0]
}
   20e2c:	e7a2      	b.n	20d74 <hci_vendor_cmd_handle_common+0x50>
	const char build_info[] = HCI_VS_BUILD_INFO;
   20e2e:	4d21      	ldr	r5, [pc, #132]	; (20eb4 <hci_vendor_cmd_handle_common+0x190>)
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   20e30:	4e1f      	ldr	r6, [pc, #124]	; (20eb0 <hci_vendor_cmd_handle_common+0x18c>)
	const char build_info[] = HCI_VS_BUILD_INFO;
   20e32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   20e34:	f10d 0c04 	add.w	ip, sp, #4
   20e38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   20e3c:	682b      	ldr	r3, [r5, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   20e3e:	8830      	ldrh	r0, [r6, #0]
	const char build_info[] = HCI_VS_BUILD_INFO;
   20e40:	f8ac 3000 	strh.w	r3, [ip]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   20e44:	2113      	movs	r1, #19
   20e46:	f014 fde7 	bl	35a18 <bt_hci_cmd_complete_create>
   20e4a:	2113      	movs	r1, #19
   20e4c:	6020      	str	r0, [r4, #0]
   20e4e:	300c      	adds	r0, #12
   20e50:	f016 fe0e 	bl	37a70 <net_buf_simple_add>
	rp->status = 0x00;
   20e54:	2300      	movs	r3, #0
   20e56:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   20e5a:	2212      	movs	r2, #18
   20e5c:	a901      	add	r1, sp, #4
   20e5e:	f014 fb6a 	bl	35536 <memcpy>
}
   20e62:	e787      	b.n	20d74 <hci_vendor_cmd_handle_common+0x50>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   20e64:	4b12      	ldr	r3, [pc, #72]	; (20eb0 <hci_vendor_cmd_handle_common+0x18c>)
   20e66:	2118      	movs	r1, #24
   20e68:	8818      	ldrh	r0, [r3, #0]
   20e6a:	f014 fdd5 	bl	35a18 <bt_hci_cmd_complete_create>
   20e6e:	2118      	movs	r1, #24
   20e70:	6020      	str	r0, [r4, #0]
   20e72:	300c      	adds	r0, #12
   20e74:	f016 fdfc 	bl	37a70 <net_buf_simple_add>
	rp->status = 0x00;
   20e78:	2300      	movs	r3, #0
   20e7a:	4604      	mov	r4, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   20e7c:	2101      	movs	r1, #1
	rp->status = 0x00;
   20e7e:	f800 3b02 	strb.w	r3, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   20e82:	f00c fbaf 	bl	2d5e4 <hci_vendor_read_static_addr>
   20e86:	7060      	strb	r0, [r4, #1]
}
   20e88:	e774      	b.n	20d74 <hci_vendor_cmd_handle_common+0x50>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   20e8a:	4b09      	ldr	r3, [pc, #36]	; (20eb0 <hci_vendor_cmd_handle_common+0x18c>)
   20e8c:	2121      	movs	r1, #33	; 0x21
   20e8e:	8818      	ldrh	r0, [r3, #0]
   20e90:	f014 fdc2 	bl	35a18 <bt_hci_cmd_complete_create>
   20e94:	2121      	movs	r1, #33	; 0x21
   20e96:	6020      	str	r0, [r4, #0]
   20e98:	300c      	adds	r0, #12
   20e9a:	f016 fde9 	bl	37a70 <net_buf_simple_add>
	rp->status = 0x00;
   20e9e:	4601      	mov	r1, r0
   20ea0:	2300      	movs	r3, #0
   20ea2:	f801 3b11 	strb.w	r3, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   20ea6:	3001      	adds	r0, #1
   20ea8:	f00c fbec 	bl	2d684 <hci_vendor_read_key_hierarchy_roots>
}
   20eac:	e762      	b.n	20d74 <hci_vendor_cmd_handle_common+0x50>
   20eae:	bf00      	nop
   20eb0:	20003294 	.word	0x20003294
   20eb4:	0003a098 	.word	0x0003a098

00020eb8 <hci_cmd_handle>:
{
   20eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20ebc:	b08c      	sub	sp, #48	; 0x30
	if (cmd->len < sizeof(*chdr)) {
   20ebe:	8a02      	ldrh	r2, [r0, #16]
{
   20ec0:	af04      	add	r7, sp, #16
	struct net_buf *evt = NULL;
   20ec2:	2400      	movs	r4, #0
	if (cmd->len < sizeof(*chdr)) {
   20ec4:	2a02      	cmp	r2, #2
	struct net_buf *evt = NULL;
   20ec6:	60fc      	str	r4, [r7, #12]
	if (cmd->len < sizeof(*chdr)) {
   20ec8:	f240 811e 	bls.w	21108 <hci_cmd_handle+0x250>
	return net_buf_simple_pull_mem(&buf->b, len);
   20ecc:	4605      	mov	r5, r0
   20ece:	2103      	movs	r1, #3
   20ed0:	300c      	adds	r0, #12
   20ed2:	f016 fdf4 	bl	37abe <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   20ed6:	8a29      	ldrh	r1, [r5, #16]
   20ed8:	7882      	ldrb	r2, [r0, #2]
   20eda:	4291      	cmp	r1, r2
   20edc:	f0c0 815c 	bcc.w	21198 <hci_cmd_handle+0x2e0>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   20ee0:	8802      	ldrh	r2, [r0, #0]
   20ee2:	4ec2      	ldr	r6, [pc, #776]	; (211ec <hci_cmd_handle+0x334>)
	switch (BT_OGF(_opcode)) {
   20ee4:	f3c2 2385 	ubfx	r3, r2, #10, #6
   20ee8:	2b08      	cmp	r3, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
   20eea:	8032      	strh	r2, [r6, #0]
   20eec:	b290      	uxth	r0, r2
	ocf = BT_OCF(_opcode);
   20eee:	f3c2 0409 	ubfx	r4, r2, #0, #10
	switch (BT_OGF(_opcode)) {
   20ef2:	d809      	bhi.n	20f08 <hci_cmd_handle+0x50>
   20ef4:	b1a3      	cbz	r3, 20f20 <hci_cmd_handle+0x68>
   20ef6:	3b01      	subs	r3, #1
   20ef8:	2b07      	cmp	r3, #7
   20efa:	d811      	bhi.n	20f20 <hci_cmd_handle+0x68>
   20efc:	e8df f003 	tbb	[pc, r3]
   20f00:	eaca1019 	.word	0xeaca1019
   20f04:	28101010 	.word	0x28101010
   20f08:	2b3f      	cmp	r3, #63	; 0x3f
   20f0a:	d109      	bne.n	20f20 <hci_cmd_handle+0x68>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   20f0c:	f107 020c 	add.w	r2, r7, #12
   20f10:	4629      	mov	r1, r5
   20f12:	4620      	mov	r0, r4
   20f14:	f7ff ff06 	bl	20d24 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   20f18:	3016      	adds	r0, #22
   20f1a:	f040 8463 	bne.w	217e4 <hci_cmd_handle+0x92c>
	return bt_hci_cmd_status_create(_opcode, status);
   20f1e:	8830      	ldrh	r0, [r6, #0]
   20f20:	2101      	movs	r1, #1
   20f22:	f014 fd8b 	bl	35a3c <bt_hci_cmd_status_create>
   20f26:	4605      	mov	r5, r0
}
   20f28:	4628      	mov	r0, r5
   20f2a:	3720      	adds	r7, #32
   20f2c:	46bd      	mov	sp, r7
   20f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (ocf) {
   20f32:	2c06      	cmp	r4, #6
   20f34:	f000 8408 	beq.w	21748 <hci_cmd_handle+0x890>
   20f38:	2c1d      	cmp	r4, #29
   20f3a:	d1f1      	bne.n	20f20 <hci_cmd_handle+0x68>
	handle = sys_le16_to_cpu(cmd->handle);
   20f3c:	68eb      	ldr	r3, [r5, #12]
	status = ll_version_ind_send(handle);
   20f3e:	8818      	ldrh	r0, [r3, #0]
   20f40:	f003 fb90 	bl	24664 <ll_version_ind_send>
   20f44:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   20f46:	8830      	ldrh	r0, [r6, #0]
   20f48:	f014 fd78 	bl	35a3c <bt_hci_cmd_status_create>
   20f4c:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   20f4e:	e7eb      	b.n	20f28 <hci_cmd_handle+0x70>
	switch (ocf) {
   20f50:	1e62      	subs	r2, r4, #1
   20f52:	2a4d      	cmp	r2, #77	; 0x4d
   20f54:	d8e4      	bhi.n	20f20 <hci_cmd_handle+0x68>
   20f56:	a301      	add	r3, pc, #4	; (adr r3, 20f5c <hci_cmd_handle+0xa4>)
   20f58:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   20f5c:	00021509 	.word	0x00021509
   20f60:	000214e9 	.word	0x000214e9
   20f64:	000214a1 	.word	0x000214a1
   20f68:	00020f21 	.word	0x00020f21
   20f6c:	00021497 	.word	0x00021497
   20f70:	0002158d 	.word	0x0002158d
   20f74:	00021565 	.word	0x00021565
   20f78:	00021559 	.word	0x00021559
   20f7c:	0002154d 	.word	0x0002154d
   20f80:	00021543 	.word	0x00021543
   20f84:	00020f21 	.word	0x00020f21
   20f88:	00020f21 	.word	0x00020f21
   20f8c:	00020f21 	.word	0x00020f21
   20f90:	00020f21 	.word	0x00020f21
   20f94:	00021525 	.word	0x00021525
   20f98:	0002151f 	.word	0x0002151f
   20f9c:	00021517 	.word	0x00021517
   20fa0:	00021741 	.word	0x00021741
   20fa4:	00021717 	.word	0x00021717
   20fa8:	00020f21 	.word	0x00020f21
   20fac:	000216f1 	.word	0x000216f1
   20fb0:	000216dd 	.word	0x000216dd
   20fb4:	000216ab 	.word	0x000216ab
   20fb8:	0002168d 	.word	0x0002168d
   20fbc:	00020f21 	.word	0x00020f21
   20fc0:	00021683 	.word	0x00021683
   20fc4:	0002166f 	.word	0x0002166f
   20fc8:	00021651 	.word	0x00021651
   20fcc:	00020f21 	.word	0x00020f21
   20fd0:	00020f21 	.word	0x00020f21
   20fd4:	00020f21 	.word	0x00020f21
   20fd8:	0002162d 	.word	0x0002162d
   20fdc:	0002160f 	.word	0x0002160f
   20fe0:	000215fb 	.word	0x000215fb
   20fe4:	000215cb 	.word	0x000215cb
   20fe8:	000215bf 	.word	0x000215bf
   20fec:	00020f21 	.word	0x00020f21
   20ff0:	00020f21 	.word	0x00020f21
   20ff4:	000215b1 	.word	0x000215b1
   20ff8:	000215a9 	.word	0x000215a9
   20ffc:	00021491 	.word	0x00021491
   21000:	00021473 	.word	0x00021473
   21004:	00021445 	.word	0x00021445
   21008:	00021417 	.word	0x00021417
   2100c:	0002140d 	.word	0x0002140d
   21010:	000213ff 	.word	0x000213ff
   21014:	000213bd 	.word	0x000213bd
   21018:	00021369 	.word	0x00021369
   2101c:	00021349 	.word	0x00021349
   21020:	000212ef 	.word	0x000212ef
   21024:	00020f21 	.word	0x00020f21
   21028:	00020f21 	.word	0x00020f21
   2102c:	00020f21 	.word	0x00020f21
   21030:	00020f21 	.word	0x00020f21
   21034:	00020f21 	.word	0x00020f21
   21038:	00020f21 	.word	0x00020f21
   2103c:	00020f21 	.word	0x00020f21
   21040:	00020f21 	.word	0x00020f21
   21044:	00020f21 	.word	0x00020f21
   21048:	00020f21 	.word	0x00020f21
   2104c:	00020f21 	.word	0x00020f21
   21050:	00020f21 	.word	0x00020f21
   21054:	00020f21 	.word	0x00020f21
   21058:	00020f21 	.word	0x00020f21
   2105c:	00020f21 	.word	0x00020f21
   21060:	00020f21 	.word	0x00020f21
   21064:	00020f21 	.word	0x00020f21
   21068:	00020f21 	.word	0x00020f21
   2106c:	00020f21 	.word	0x00020f21
   21070:	00020f21 	.word	0x00020f21
   21074:	00020f21 	.word	0x00020f21
   21078:	00020f21 	.word	0x00020f21
   2107c:	00020f21 	.word	0x00020f21
   21080:	00020f21 	.word	0x00020f21
   21084:	000212cf 	.word	0x000212cf
   21088:	00020f21 	.word	0x00020f21
   2108c:	00020f21 	.word	0x00020f21
   21090:	000212af 	.word	0x000212af
	switch (ocf) {
   21094:	2c63      	cmp	r4, #99	; 0x63
   21096:	f000 83a2 	beq.w	217de <hci_cmd_handle+0x926>
   2109a:	d861      	bhi.n	21160 <hci_cmd_handle+0x2a8>
   2109c:	2c03      	cmp	r4, #3
   2109e:	f000 837a 	beq.w	21796 <hci_cmd_handle+0x8de>
   210a2:	2c2d      	cmp	r4, #45	; 0x2d
   210a4:	d148      	bne.n	21138 <hci_cmd_handle+0x280>
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
   210a6:	68eb      	ldr	r3, [r5, #12]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   210a8:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
   210aa:	881e      	ldrh	r6, [r3, #0]
	type = cmd->type;
   210ac:	f893 8002 	ldrb.w	r8, [r3, #2]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   210b0:	f014 fcb2 	bl	35a18 <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
   210b4:	2104      	movs	r1, #4
   210b6:	4605      	mov	r5, r0
   210b8:	300c      	adds	r0, #12
   210ba:	f016 fcd9 	bl	37a70 <net_buf_simple_add>
	handle = sys_le16_to_cpu(cmd->handle);
   210be:	b2b1      	uxth	r1, r6
   210c0:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   210c2:	1cc3      	adds	r3, r0, #3
   210c4:	4642      	mov	r2, r8
   210c6:	2002      	movs	r0, #2
   210c8:	f7ff fbe6 	bl	20898 <ll_tx_pwr_lvl_get>
	rp->handle = sys_cpu_to_le16(handle);
   210cc:	f8a4 6001 	strh.w	r6, [r4, #1]
	rp->status = status;
   210d0:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   210d2:	e729      	b.n	20f28 <hci_cmd_handle+0x70>
	switch (ocf) {
   210d4:	1e62      	subs	r2, r4, #1
   210d6:	2a08      	cmp	r2, #8
   210d8:	f63f af22 	bhi.w	20f20 <hci_cmd_handle+0x68>
   210dc:	a301      	add	r3, pc, #4	; (adr r3, 210e4 <hci_cmd_handle+0x22c>)
   210de:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   210e2:	bf00      	nop
   210e4:	00021287 	.word	0x00021287
   210e8:	00021205 	.word	0x00021205
   210ec:	000211c9 	.word	0x000211c9
   210f0:	00020f21 	.word	0x00020f21
   210f4:	00020f21 	.word	0x00020f21
   210f8:	00020f21 	.word	0x00020f21
   210fc:	00020f21 	.word	0x00020f21
   21100:	00020f21 	.word	0x00020f21
   21104:	000211ab 	.word	0x000211ab
		LOG_ERR("No HCI Command header");
   21108:	466d      	mov	r5, sp
   2110a:	b088      	sub	sp, #32
   2110c:	a904      	add	r1, sp, #16
   2110e:	4838      	ldr	r0, [pc, #224]	; (211f0 <hci_cmd_handle+0x338>)
   21110:	4b38      	ldr	r3, [pc, #224]	; (211f4 <hci_cmd_handle+0x33c>)
   21112:	e9c1 0305 	strd	r0, r3, [r1, #20]
   21116:	460a      	mov	r2, r1
		LOG_ERR("Invalid HCI CMD packet length");
   21118:	2303      	movs	r3, #3
   2111a:	f842 3f10 	str.w	r3, [r2, #16]!
   2111e:	4836      	ldr	r0, [pc, #216]	; (211f8 <hci_cmd_handle+0x340>)
   21120:	4623      	mov	r3, r4
   21122:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   21126:	f7f2 f825 	bl	13174 <z_impl_z_log_msg_static_create>
   2112a:	46ad      	mov	sp, r5
		return NULL;
   2112c:	2500      	movs	r5, #0
}
   2112e:	4628      	mov	r0, r5
   21130:	3720      	adds	r7, #32
   21132:	46bd      	mov	sp, r7
   21134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (ocf) {
   21138:	2c01      	cmp	r4, #1
   2113a:	f47f aef1 	bne.w	20f20 <hci_cmd_handle+0x68>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   2113e:	68ea      	ldr	r2, [r5, #12]
	event_mask = sys_get_le64(cmd->events);
   21140:	4b2e      	ldr	r3, [pc, #184]	; (211fc <hci_cmd_handle+0x344>)
   21142:	6811      	ldr	r1, [r2, #0]
   21144:	6852      	ldr	r2, [r2, #4]
   21146:	6019      	str	r1, [r3, #0]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   21148:	4621      	mov	r1, r4
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   2114a:	605a      	str	r2, [r3, #4]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   2114c:	f014 fc64 	bl	35a18 <bt_hci_cmd_complete_create>
   21150:	2101      	movs	r1, #1
   21152:	4605      	mov	r5, r0
   21154:	300c      	adds	r0, #12
   21156:	f016 fc8b 	bl	37a70 <net_buf_simple_add>
	ccst->status = status;
   2115a:	2300      	movs	r3, #0
   2115c:	7003      	strb	r3, [r0, #0]
	if (err == -EINVAL) {
   2115e:	e6e3      	b.n	20f28 <hci_cmd_handle+0x70>
	switch (ocf) {
   21160:	2c7b      	cmp	r4, #123	; 0x7b
   21162:	f000 82fd 	beq.w	21760 <hci_cmd_handle+0x8a8>
   21166:	2c7c      	cmp	r4, #124	; 0x7c
   21168:	f47f aeda 	bne.w	20f20 <hci_cmd_handle+0x68>
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
   2116c:	68eb      	ldr	r3, [r5, #12]
	handle = sys_le16_to_cpu(cmd->handle);
   2116e:	f8b3 8000 	ldrh.w	r8, [r3]
	status = ll_apto_set(handle, auth_payload_timeout);
   21172:	8859      	ldrh	r1, [r3, #2]
   21174:	fa1f f088 	uxth.w	r0, r8
   21178:	f003 fb5e 	bl	24838 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   2117c:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   2117e:	2103      	movs	r1, #3
   21180:	8830      	ldrh	r0, [r6, #0]
   21182:	f014 fc49 	bl	35a18 <bt_hci_cmd_complete_create>
   21186:	2103      	movs	r1, #3
   21188:	4605      	mov	r5, r0
   2118a:	300c      	adds	r0, #12
   2118c:	f016 fc70 	bl	37a70 <net_buf_simple_add>
	rp->status = status;
   21190:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   21192:	f8a0 8001 	strh.w	r8, [r0, #1]
	if (err == -EINVAL) {
   21196:	e6c7      	b.n	20f28 <hci_cmd_handle+0x70>
		LOG_ERR("Invalid HCI CMD packet length");
   21198:	466d      	mov	r5, sp
   2119a:	b088      	sub	sp, #32
   2119c:	ab04      	add	r3, sp, #16
   2119e:	4818      	ldr	r0, [pc, #96]	; (21200 <hci_cmd_handle+0x348>)
   211a0:	4914      	ldr	r1, [pc, #80]	; (211f4 <hci_cmd_handle+0x33c>)
   211a2:	461a      	mov	r2, r3
   211a4:	e9c3 0105 	strd	r0, r1, [r3, #20]
   211a8:	e7b6      	b.n	21118 <hci_cmd_handle+0x260>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   211aa:	2107      	movs	r1, #7
   211ac:	f014 fc34 	bl	35a18 <bt_hci_cmd_complete_create>
   211b0:	2107      	movs	r1, #7
   211b2:	4605      	mov	r5, r0
   211b4:	300c      	adds	r0, #12
   211b6:	f016 fc5b 	bl	37a70 <net_buf_simple_add>
	rp->status = 0x00;
   211ba:	4601      	mov	r1, r0
   211bc:	2000      	movs	r0, #0
   211be:	f801 0b01 	strb.w	r0, [r1], #1
	(void)ll_addr_read(0, &rp->bdaddr.val[0]);
   211c2:	f7ff fb51 	bl	20868 <ll_addr_read>
	if (err == -EINVAL) {
   211c6:	e6af      	b.n	20f28 <hci_cmd_handle+0x70>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   211c8:	2109      	movs	r1, #9
   211ca:	f014 fc25 	bl	35a18 <bt_hci_cmd_complete_create>
   211ce:	2109      	movs	r1, #9
   211d0:	4605      	mov	r5, r0
   211d2:	300c      	adds	r0, #12
   211d4:	f016 fc4c 	bl	37a70 <net_buf_simple_add>
	rp->status = 0x00;
   211d8:	2100      	movs	r1, #0
   211da:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   211dc:	2208      	movs	r2, #8
	rp->status = 0x00;
   211de:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   211e2:	f014 f9b3 	bl	3554c <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   211e6:	2360      	movs	r3, #96	; 0x60
   211e8:	7163      	strb	r3, [r4, #5]
	if (err == -EINVAL) {
   211ea:	e69d      	b.n	20f28 <hci_cmd_handle+0x70>
   211ec:	20003294 	.word	0x20003294
   211f0:	0003a0ac 	.word	0x0003a0ac
   211f4:	0003a2d4 	.word	0x0003a2d4
   211f8:	00039588 	.word	0x00039588
   211fc:	200001e8 	.word	0x200001e8
   21200:	0003a0c8 	.word	0x0003a0c8
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   21204:	2141      	movs	r1, #65	; 0x41
   21206:	f014 fc07 	bl	35a18 <bt_hci_cmd_complete_create>
   2120a:	2141      	movs	r1, #65	; 0x41
   2120c:	4605      	mov	r5, r0
   2120e:	300c      	adds	r0, #12
   21210:	f016 fc2e 	bl	37a70 <net_buf_simple_add>
	rp->status = 0x00;
   21214:	2100      	movs	r1, #0
   21216:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   21218:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   2121a:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   2121e:	f014 f995 	bl	3554c <memset>
	rp->commands[10] |= BIT(2);
   21222:	7ae3      	ldrb	r3, [r4, #11]
	rp->commands[5] |= BIT(6) | BIT(7);
   21224:	79a0      	ldrb	r0, [r4, #6]
	rp->commands[14] |= BIT(3) | BIT(5);
   21226:	7be1      	ldrb	r1, [r4, #15]
	rp->commands[15] |= BIT(1);
   21228:	7c22      	ldrb	r2, [r4, #16]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
   2122a:	f8d4 c01a 	ldr.w	ip, [r4, #26]
	rp->commands[32] |= BIT(4) | BIT(5);
   2122e:	f8d4 6021 	ldr.w	r6, [r4, #33]	; 0x21
	rp->commands[10] |= BIT(2);
   21232:	f043 0304 	orr.w	r3, r3, #4
   21236:	72e3      	strb	r3, [r4, #11]
	rp->commands[22] |= BIT(2);
   21238:	7de3      	ldrb	r3, [r4, #23]
   2123a:	f043 0304 	orr.w	r3, r3, #4
   2123e:	75e3      	strb	r3, [r4, #23]
	rp->commands[0] |= BIT(5);
   21240:	7863      	ldrb	r3, [r4, #1]
	rp->commands[5] |= BIT(6) | BIT(7);
   21242:	f060 003f 	orn	r0, r0, #63	; 0x3f
	rp->commands[14] |= BIT(3) | BIT(5);
   21246:	f041 0128 	orr.w	r1, r1, #40	; 0x28
	rp->commands[15] |= BIT(1);
   2124a:	f042 0202 	orr.w	r2, r2, #2
	rp->commands[0] |= BIT(5);
   2124e:	f043 0320 	orr.w	r3, r3, #32
	rp->commands[5] |= BIT(6) | BIT(7);
   21252:	71a0      	strb	r0, [r4, #6]
	rp->commands[14] |= BIT(3) | BIT(5);
   21254:	73e1      	strb	r1, [r4, #15]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   21256:	48c9      	ldr	r0, [pc, #804]	; (2157c <hci_cmd_handle+0x6c4>)
	rp->commands[32] |= BIT(4) | BIT(5);
   21258:	49c9      	ldr	r1, [pc, #804]	; (21580 <hci_cmd_handle+0x6c8>)
	rp->commands[15] |= BIT(1);
   2125a:	7422      	strb	r2, [r4, #16]
	rp->commands[0] |= BIT(5);
   2125c:	7063      	strb	r3, [r4, #1]
	rp->commands[39] |= BIT(2);
   2125e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   21262:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   21266:	ea4c 0000 	orr.w	r0, ip, r0
	rp->commands[32] |= BIT(4) | BIT(5);
   2126a:	4331      	orrs	r1, r6
	rp->commands[39] |= BIT(2);
   2126c:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[38] |= BIT(7);
   21270:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   21274:	f8c4 001a 	str.w	r0, [r4, #26]
	rp->commands[32] |= BIT(4) | BIT(5);
   21278:	f8c4 1021 	str.w	r1, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
   2127c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   21280:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	if (err == -EINVAL) {
   21284:	e650      	b.n	20f28 <hci_cmd_handle+0x70>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   21286:	2109      	movs	r1, #9
   21288:	f014 fbc6 	bl	35a18 <bt_hci_cmd_complete_create>
   2128c:	2109      	movs	r1, #9
   2128e:	4605      	mov	r5, r0
   21290:	300c      	adds	r0, #12
   21292:	f016 fbed 	bl	37a70 <net_buf_simple_add>
	rp->status = 0x00;
   21296:	f44f 6440 	mov.w	r4, #3072	; 0xc00
	rp->hci_revision = sys_cpu_to_le16(0);
   2129a:	2300      	movs	r3, #0
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   2129c:	4ab9      	ldr	r2, [pc, #740]	; (21584 <hci_cmd_handle+0x6cc>)
	rp->status = 0x00;
   2129e:	8004      	strh	r4, [r0, #0]
	rp->lmp_version = LL_VERSION_NUMBER;
   212a0:	210c      	movs	r1, #12
	rp->hci_revision = sys_cpu_to_le16(0);
   212a2:	7083      	strb	r3, [r0, #2]
   212a4:	70c3      	strb	r3, [r0, #3]
	rp->lmp_version = LL_VERSION_NUMBER;
   212a6:	7101      	strb	r1, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   212a8:	f8c0 2005 	str.w	r2, [r0, #5]
	if (err == -EINVAL) {
   212ac:	e63c      	b.n	20f28 <hci_cmd_handle+0x70>
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
   212ae:	68e8      	ldr	r0, [r5, #12]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   212b0:	79c1      	ldrb	r1, [r0, #7]
   212b2:	f008 fe79 	bl	29fa8 <ll_priv_mode_set>
   212b6:	4604      	mov	r4, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   212b8:	2101      	movs	r1, #1
   212ba:	8830      	ldrh	r0, [r6, #0]
   212bc:	f014 fbac 	bl	35a18 <bt_hci_cmd_complete_create>
   212c0:	2101      	movs	r1, #1
   212c2:	4605      	mov	r5, r0
   212c4:	300c      	adds	r0, #12
   212c6:	f016 fbd3 	bl	37a70 <net_buf_simple_add>
	ccst->status = status;
   212ca:	7004      	strb	r4, [r0, #0]
	if (err == -EINVAL) {
   212cc:	e62c      	b.n	20f28 <hci_cmd_handle+0x70>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   212ce:	2103      	movs	r1, #3
   212d0:	f014 fba2 	bl	35a18 <bt_hci_cmd_complete_create>
   212d4:	2103      	movs	r1, #3
   212d6:	4605      	mov	r5, r0
   212d8:	300c      	adds	r0, #12
   212da:	f016 fbc9 	bl	37a70 <net_buf_simple_add>
	rp->status = 0x00;
   212de:	4601      	mov	r1, r0
   212e0:	2300      	movs	r3, #0
   212e2:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   212e6:	3001      	adds	r0, #1
   212e8:	f7ff fae6 	bl	208b8 <ll_tx_pwr_get>
	if (err == -EINVAL) {
   212ec:	e61c      	b.n	20f28 <hci_cmd_handle+0x70>
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
   212ee:	68ea      	ldr	r2, [r5, #12]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   212f0:	7891      	ldrb	r1, [r2, #2]
	handle = sys_le16_to_cpu(cmd->handle);
   212f2:	8815      	ldrh	r5, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   212f4:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   212f8:	07cb      	lsls	r3, r1, #31
   212fa:	d503      	bpl.n	21304 <hci_cmd_handle+0x44c>
		cmd->tx_phys |= mask_phys;
   212fc:	78d3      	ldrb	r3, [r2, #3]
   212fe:	f043 0303 	orr.w	r3, r3, #3
   21302:	70d3      	strb	r3, [r2, #3]
		cmd->rx_phys |= mask_phys;
   21304:	7913      	ldrb	r3, [r2, #4]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   21306:	0789      	lsls	r1, r1, #30
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   21308:	78d1      	ldrb	r1, [r2, #3]
		cmd->rx_phys |= mask_phys;
   2130a:	bf44      	itt	mi
   2130c:	f043 0303 	orrmi.w	r3, r3, #3
   21310:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   21312:	ea43 0201 	orr.w	r2, r3, r1
   21316:	2a03      	cmp	r2, #3
   21318:	f200 826d 	bhi.w	217f6 <hci_cmd_handle+0x93e>
	if (!(cmd->tx_phys & 0x07) ||
   2131c:	074a      	lsls	r2, r1, #29
   2131e:	f000 8264 	beq.w	217ea <hci_cmd_handle+0x932>
   21322:	075a      	lsls	r2, r3, #29
   21324:	f000 8261 	beq.w	217ea <hci_cmd_handle+0x932>
	if (phy_opts & 0x03) {
   21328:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
   2132c:	bf1c      	itt	ne
   2132e:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
   21332:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   21336:	4628      	mov	r0, r5
   21338:	f003 fa28 	bl	2478c <ll_phy_req_send>
   2133c:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   2133e:	8830      	ldrh	r0, [r6, #0]
   21340:	f014 fb7c 	bl	35a3c <bt_hci_cmd_status_create>
   21344:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   21346:	e5ef      	b.n	20f28 <hci_cmd_handle+0x70>
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
   21348:	68eb      	ldr	r3, [r5, #12]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   2134a:	781a      	ldrb	r2, [r3, #0]
   2134c:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   2134e:	bf44      	itt	mi
   21350:	2107      	movmi	r1, #7
   21352:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   21354:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   21356:	bf4c      	ite	mi
   21358:	2107      	movmi	r1, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   2135a:	7899      	ldrbpl	r1, [r3, #2]
   2135c:	7858      	ldrb	r0, [r3, #1]
		cmd->rx_phys = 0x07;
   2135e:	bf48      	it	mi
   21360:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   21362:	f003 fa09 	bl	24778 <ll_phy_default_set>
   21366:	e7a6      	b.n	212b6 <hci_cmd_handle+0x3fe>
	handle = sys_le16_to_cpu(cmd->handle);
   21368:	68eb      	ldr	r3, [r5, #12]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   2136a:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
   2136c:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   2136e:	f014 fb53 	bl	35a18 <bt_hci_cmd_complete_create>
   21372:	2105      	movs	r1, #5
   21374:	4605      	mov	r5, r0
   21376:	300c      	adds	r0, #12
   21378:	f016 fb7a 	bl	37a70 <net_buf_simple_add>
   2137c:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   2137e:	1d22      	adds	r2, r4, #4
	handle = sys_le16_to_cpu(cmd->handle);
   21380:	b2b0      	uxth	r0, r6
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   21382:	1ce1      	adds	r1, r4, #3
   21384:	f003 f9da 	bl	2473c <ll_phy_get>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
   21388:	78e3      	ldrb	r3, [r4, #3]
	rp->status = status;
   2138a:	7020      	strb	r0, [r4, #0]
   2138c:	2b00      	cmp	r3, #0
   2138e:	fa93 f2a3 	rbit	r2, r3
   21392:	7923      	ldrb	r3, [r4, #4]
	rp->handle = sys_cpu_to_le16(handle);
   21394:	f8a4 6001 	strh.w	r6, [r4, #1]
   21398:	fab2 f282 	clz	r2, r2
   2139c:	bf08      	it	eq
   2139e:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   213a2:	2b00      	cmp	r3, #0
   213a4:	fa93 f3a3 	rbit	r3, r3
   213a8:	fab3 f383 	clz	r3, r3
   213ac:	bf08      	it	eq
   213ae:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   213b2:	3201      	adds	r2, #1
   213b4:	3301      	adds	r3, #1
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   213b6:	7123      	strb	r3, [r4, #4]
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   213b8:	70e2      	strb	r2, [r4, #3]
	if (err == -EINVAL) {
   213ba:	e5b5      	b.n	20f28 <hci_cmd_handle+0x70>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   213bc:	2109      	movs	r1, #9
   213be:	f014 fb2b 	bl	35a18 <bt_hci_cmd_complete_create>
   213c2:	2109      	movs	r1, #9
   213c4:	4605      	mov	r5, r0
   213c6:	300c      	adds	r0, #12
   213c8:	f016 fb52 	bl	37a70 <net_buf_simple_add>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   213cc:	f107 0310 	add.w	r3, r7, #16
   213d0:	4604      	mov	r4, r0
   213d2:	f107 020a 	add.w	r2, r7, #10
   213d6:	f107 0108 	add.w	r1, r7, #8
   213da:	1db8      	adds	r0, r7, #6
   213dc:	f003 f9a2 	bl	24724 <ll_length_max_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   213e0:	88fb      	ldrh	r3, [r7, #6]
   213e2:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   213e6:	893b      	ldrh	r3, [r7, #8]
   213e8:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
   213ec:	897b      	ldrh	r3, [r7, #10]
   213ee:	f8a4 3005 	strh.w	r3, [r4, #5]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   213f2:	8a3a      	ldrh	r2, [r7, #16]
   213f4:	f8a4 2007 	strh.w	r2, [r4, #7]
	rp->status = 0x00;
   213f8:	2300      	movs	r3, #0
   213fa:	7023      	strb	r3, [r4, #0]
	if (err == -EINVAL) {
   213fc:	e594      	b.n	20f28 <hci_cmd_handle+0x70>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   213fe:	68eb      	ldr	r3, [r5, #12]
	ll_rl_timeout_set(timeout);
   21400:	8818      	ldrh	r0, [r3, #0]
   21402:	f008 fdc7 	bl	29f94 <ll_rl_timeout_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   21406:	8830      	ldrh	r0, [r6, #0]
   21408:	2101      	movs	r1, #1
   2140a:	e69f      	b.n	2114c <hci_cmd_handle+0x294>
	status = ll_rl_enable(cmd->enable);
   2140c:	68eb      	ldr	r3, [r5, #12]
   2140e:	7818      	ldrb	r0, [r3, #0]
   21410:	f008 fdac 	bl	29f6c <ll_rl_enable>
   21414:	e74f      	b.n	212b6 <hci_cmd_handle+0x3fe>
	memcpy(dst, src, sizeof(*dst));
   21416:	2207      	movs	r2, #7
   21418:	68e9      	ldr	r1, [r5, #12]
   2141a:	f107 0010 	add.w	r0, r7, #16
   2141e:	f014 f88a 	bl	35536 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   21422:	2107      	movs	r1, #7
   21424:	8830      	ldrh	r0, [r6, #0]
   21426:	f014 faf7 	bl	35a18 <bt_hci_cmd_complete_create>
   2142a:	2107      	movs	r1, #7
   2142c:	4605      	mov	r5, r0
   2142e:	300c      	adds	r0, #12
   21430:	f016 fb1e 	bl	37a70 <net_buf_simple_add>
   21434:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   21436:	1c41      	adds	r1, r0, #1
   21438:	f107 0010 	add.w	r0, r7, #16
   2143c:	f008 fd64 	bl	29f08 <ll_rl_lrpa_get>
   21440:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   21442:	e571      	b.n	20f28 <hci_cmd_handle+0x70>
   21444:	2207      	movs	r2, #7
   21446:	68e9      	ldr	r1, [r5, #12]
   21448:	f107 0010 	add.w	r0, r7, #16
   2144c:	f014 f873 	bl	35536 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   21450:	2107      	movs	r1, #7
   21452:	8830      	ldrh	r0, [r6, #0]
   21454:	f014 fae0 	bl	35a18 <bt_hci_cmd_complete_create>
   21458:	2107      	movs	r1, #7
   2145a:	4605      	mov	r5, r0
   2145c:	300c      	adds	r0, #12
   2145e:	f016 fb07 	bl	37a70 <net_buf_simple_add>
   21462:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   21464:	1c41      	adds	r1, r0, #1
   21466:	f107 0010 	add.w	r0, r7, #16
   2146a:	f008 fd13 	bl	29e94 <ll_rl_crpa_get>
   2146e:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   21470:	e55a      	b.n	20f28 <hci_cmd_handle+0x70>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   21472:	2102      	movs	r1, #2
   21474:	f014 fad0 	bl	35a18 <bt_hci_cmd_complete_create>
   21478:	2102      	movs	r1, #2
   2147a:	4605      	mov	r5, r0
   2147c:	300c      	adds	r0, #12
   2147e:	f016 faf7 	bl	37a70 <net_buf_simple_add>
   21482:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
   21484:	f008 fbca 	bl	29c1c <ll_rl_size_get>
	rp->status = 0x00;
   21488:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
   2148a:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
   2148c:	7023      	strb	r3, [r4, #0]
	if (err == -EINVAL) {
   2148e:	e54b      	b.n	20f28 <hci_cmd_handle+0x70>
	status = ll_rl_clear();
   21490:	f008 fbc6 	bl	29c20 <ll_rl_clear>
   21494:	e70f      	b.n	212b6 <hci_cmd_handle+0x3fe>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   21496:	68e9      	ldr	r1, [r5, #12]
   21498:	2001      	movs	r0, #1
   2149a:	f7ff f9b1 	bl	20800 <ll_addr_set>
   2149e:	e70a      	b.n	212b6 <hci_cmd_handle+0x3fe>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   214a0:	2109      	movs	r1, #9
   214a2:	f014 fab9 	bl	35a18 <bt_hci_cmd_complete_create>
   214a6:	2109      	movs	r1, #9
   214a8:	4605      	mov	r5, r0
   214aa:	300c      	adds	r0, #12
   214ac:	f016 fae0 	bl	37a70 <net_buf_simple_add>
	rp->status = 0x00;
   214b0:	2400      	movs	r4, #0
   214b2:	4606      	mov	r6, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   214b4:	2208      	movs	r2, #8
   214b6:	4621      	mov	r1, r4
	rp->status = 0x00;
   214b8:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   214bc:	f014 f846 	bl	3554c <memset>
	sys_put_le64(ll_feat_get(), rp->features);
   214c0:	f000 fe52 	bl	22168 <ll_feat_get>
	dst[0] = val;
   214c4:	4623      	mov	r3, r4
	sys_put_le16(val >> 16, &dst[2]);
   214c6:	0c0a      	lsrs	r2, r1, #16
	dst[0] = val;
   214c8:	f361 0307 	bfi	r3, r1, #0, #8
	dst[1] = val >> 8;
   214cc:	f3c1 2107 	ubfx	r1, r1, #8, #8
	dst[0] = val;
   214d0:	f361 230f 	bfi	r3, r1, #8, #8
   214d4:	f362 4317 	bfi	r3, r2, #16, #8
	dst[1] = val >> 8;
   214d8:	0a12      	lsrs	r2, r2, #8
	dst[0] = val;
   214da:	f362 631f 	bfi	r3, r2, #24, #8
   214de:	f8c6 0001 	str.w	r0, [r6, #1]
   214e2:	f8c6 3005 	str.w	r3, [r6, #5]
	if (err == -EINVAL) {
   214e6:	e51f      	b.n	20f28 <hci_cmd_handle+0x70>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   214e8:	2104      	movs	r1, #4
   214ea:	f014 fa95 	bl	35a18 <bt_hci_cmd_complete_create>
   214ee:	2104      	movs	r1, #4
   214f0:	4605      	mov	r5, r0
   214f2:	300c      	adds	r0, #12
   214f4:	f016 fabc 	bl	37a70 <net_buf_simple_add>
	rp->status = 0x00;
   214f8:	2300      	movs	r3, #0
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   214fa:	211b      	movs	r1, #27
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   214fc:	2203      	movs	r2, #3
	rp->status = 0x00;
   214fe:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   21500:	7041      	strb	r1, [r0, #1]
   21502:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   21504:	70c2      	strb	r2, [r0, #3]
	if (err == -EINVAL) {
   21506:	e50f      	b.n	20f28 <hci_cmd_handle+0x70>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   21508:	68ea      	ldr	r2, [r5, #12]
	le_event_mask = sys_get_le64(cmd->events);
   2150a:	4b1f      	ldr	r3, [pc, #124]	; (21588 <hci_cmd_handle+0x6d0>)
   2150c:	6814      	ldr	r4, [r2, #0]
   2150e:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   21510:	601c      	str	r4, [r3, #0]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   21512:	2101      	movs	r1, #1
   21514:	e619      	b.n	2114a <hci_cmd_handle+0x292>
	status = ll_fal_add(&cmd->addr);
   21516:	68e8      	ldr	r0, [r5, #12]
   21518:	f008 fa6a 	bl	299f0 <ll_fal_add>
   2151c:	e6cb      	b.n	212b6 <hci_cmd_handle+0x3fe>
	status = ll_fal_clear();
   2151e:	f008 fa41 	bl	299a4 <ll_fal_clear>
   21522:	e6c8      	b.n	212b6 <hci_cmd_handle+0x3fe>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   21524:	2102      	movs	r1, #2
   21526:	f014 fa77 	bl	35a18 <bt_hci_cmd_complete_create>
   2152a:	2102      	movs	r1, #2
   2152c:	4605      	mov	r5, r0
   2152e:	300c      	adds	r0, #12
   21530:	f016 fa9e 	bl	37a70 <net_buf_simple_add>
	rp->status = 0x00;
   21534:	2300      	movs	r3, #0
   21536:	7003      	strb	r3, [r0, #0]
   21538:	4604      	mov	r4, r0
	rp->fal_size = ll_fal_size_get();
   2153a:	f008 fa31 	bl	299a0 <ll_fal_size_get>
   2153e:	7060      	strb	r0, [r4, #1]
	if (err == -EINVAL) {
   21540:	e4f2      	b.n	20f28 <hci_cmd_handle+0x70>
	status = ll_adv_enable(cmd->enable);
   21542:	68eb      	ldr	r3, [r5, #12]
   21544:	7818      	ldrb	r0, [r3, #0]
   21546:	f7ef facf 	bl	10ae8 <ll_adv_enable>
   2154a:	e6b4      	b.n	212b6 <hci_cmd_handle+0x3fe>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   2154c:	68e9      	ldr	r1, [r5, #12]
   2154e:	f811 0b01 	ldrb.w	r0, [r1], #1
   21552:	f002 fd61 	bl	24018 <ll_adv_scan_rsp_set>
   21556:	e6ae      	b.n	212b6 <hci_cmd_handle+0x3fe>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   21558:	68e9      	ldr	r1, [r5, #12]
   2155a:	f811 0b01 	ldrb.w	r0, [r1], #1
   2155e:	f002 fced 	bl	23f3c <ll_adv_data_set>
   21562:	e6a8      	b.n	212b6 <hci_cmd_handle+0x3fe>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   21564:	2102      	movs	r1, #2
   21566:	f014 fa57 	bl	35a18 <bt_hci_cmd_complete_create>
   2156a:	2102      	movs	r1, #2
   2156c:	4605      	mov	r5, r0
   2156e:	300c      	adds	r0, #12
   21570:	f016 fa7e 	bl	37a70 <net_buf_simple_add>
	rp->status = 0x00;
   21574:	2300      	movs	r3, #0
   21576:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
   21578:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
   2157a:	e4d5      	b.n	20f28 <hci_cmd_handle+0x70>
   2157c:	0ef7c3f7 	.word	0x0ef7c3f7
   21580:	7ff9f030 	.word	0x7ff9f030
   21584:	ffff05f1 	.word	0xffff05f1
   21588:	200001e0 	.word	0x200001e0
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
   2158c:	68ec      	ldr	r4, [r5, #12]
	status = ll_adv_params_set(min_interval, cmd->type,
   2158e:	7ba5      	ldrb	r5, [r4, #14]
   21590:	79a3      	ldrb	r3, [r4, #6]
   21592:	7962      	ldrb	r2, [r4, #5]
   21594:	7921      	ldrb	r1, [r4, #4]
   21596:	8820      	ldrh	r0, [r4, #0]
   21598:	9502      	str	r5, [sp, #8]
   2159a:	7b65      	ldrb	r5, [r4, #13]
   2159c:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   2159e:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   215a0:	9400      	str	r4, [sp, #0]
   215a2:	f002 fadb 	bl	23b5c <ll_adv_params_set>
   215a6:	e686      	b.n	212b6 <hci_cmd_handle+0x3fe>
	status = ll_rl_remove(&cmd->peer_id_addr);
   215a8:	68e8      	ldr	r0, [r5, #12]
   215aa:	f008 fb77 	bl	29c9c <ll_rl_remove>
   215ae:	e682      	b.n	212b6 <hci_cmd_handle+0x3fe>
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
   215b0:	68e8      	ldr	r0, [r5, #12]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   215b2:	f100 0217 	add.w	r2, r0, #23
   215b6:	1dc1      	adds	r1, r0, #7
   215b8:	f008 ff90 	bl	2a4dc <ll_rl_add>
   215bc:	e67b      	b.n	212b6 <hci_cmd_handle+0x3fe>
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
   215be:	68eb      	ldr	r3, [r5, #12]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   215c0:	8859      	ldrh	r1, [r3, #2]
   215c2:	8818      	ldrh	r0, [r3, #0]
   215c4:	f003 f8a4 	bl	24710 <ll_length_default_set>
   215c8:	e675      	b.n	212b6 <hci_cmd_handle+0x3fe>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   215ca:	2105      	movs	r1, #5
   215cc:	f014 fa24 	bl	35a18 <bt_hci_cmd_complete_create>
   215d0:	2105      	movs	r1, #5
   215d2:	4605      	mov	r5, r0
   215d4:	300c      	adds	r0, #12
   215d6:	f016 fa4b 	bl	37a70 <net_buf_simple_add>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   215da:	f107 0110 	add.w	r1, r7, #16
   215de:	4604      	mov	r4, r0
   215e0:	f107 000a 	add.w	r0, r7, #10
   215e4:	f003 f888 	bl	246f8 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   215e8:	897b      	ldrh	r3, [r7, #10]
   215ea:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   215ee:	8a3a      	ldrh	r2, [r7, #16]
   215f0:	f8a4 2003 	strh.w	r2, [r4, #3]
	rp->status = 0x00;
   215f4:	2300      	movs	r3, #0
   215f6:	7023      	strb	r3, [r4, #0]
	if (err == -EINVAL) {
   215f8:	e496      	b.n	20f28 <hci_cmd_handle+0x70>
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
   215fa:	68eb      	ldr	r3, [r5, #12]
	handle = sys_le16_to_cpu(cmd->handle);
   215fc:	f8b3 8000 	ldrh.w	r8, [r3]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   21600:	889a      	ldrh	r2, [r3, #4]
   21602:	8859      	ldrh	r1, [r3, #2]
   21604:	fa1f f088 	uxth.w	r0, r8
   21608:	f003 f84c 	bl	246a4 <ll_length_req_send>
   2160c:	e5b6      	b.n	2117c <hci_cmd_handle+0x2c4>
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
   2160e:	68ea      	ldr	r2, [r5, #12]
	handle = sys_le16_to_cpu(cmd->handle);
   21610:	f8b2 8000 	ldrh.w	r8, [r2]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0, NULL);
   21614:	7892      	ldrb	r2, [r2, #2]
   21616:	2300      	movs	r3, #0
   21618:	e9cd 3302 	strd	r3, r3, [sp, #8]
   2161c:	e9cd 3300 	strd	r3, r3, [sp]
   21620:	2102      	movs	r1, #2
   21622:	fa1f f088 	uxth.w	r0, r8
   21626:	f002 ff61 	bl	244ec <ll_conn_update>
   2162a:	e5a7      	b.n	2117c <hci_cmd_handle+0x2c4>
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
   2162c:	68e9      	ldr	r1, [r5, #12]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   2162e:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(cmd->handle);
   21630:	f8b1 8000 	ldrh.w	r8, [r1]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   21634:	884b      	ldrh	r3, [r1, #2]
   21636:	9203      	str	r2, [sp, #12]
   21638:	8908      	ldrh	r0, [r1, #8]
   2163a:	9002      	str	r0, [sp, #8]
   2163c:	88c8      	ldrh	r0, [r1, #6]
   2163e:	9001      	str	r0, [sp, #4]
   21640:	8888      	ldrh	r0, [r1, #4]
   21642:	9000      	str	r0, [sp, #0]
   21644:	2102      	movs	r1, #2
   21646:	fa1f f088 	uxth.w	r0, r8
   2164a:	f002 ff4f 	bl	244ec <ll_conn_update>
   2164e:	e595      	b.n	2117c <hci_cmd_handle+0x2c4>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   21650:	2109      	movs	r1, #9
   21652:	f014 f9e1 	bl	35a18 <bt_hci_cmd_complete_create>
   21656:	2109      	movs	r1, #9
   21658:	4605      	mov	r5, r0
   2165a:	300c      	adds	r0, #12
   2165c:	f016 fa08 	bl	37a70 <net_buf_simple_add>
	rp->status = 0x00;
   21660:	4968      	ldr	r1, [pc, #416]	; (21804 <hci_cmd_handle+0x94c>)
   21662:	4a69      	ldr	r2, [pc, #420]	; (21808 <hci_cmd_handle+0x950>)
   21664:	6001      	str	r1, [r0, #0]
	dst[1] = val >> 8;
   21666:	2300      	movs	r3, #0
   21668:	6042      	str	r2, [r0, #4]
   2166a:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   2166c:	e45c      	b.n	20f28 <hci_cmd_handle+0x70>
	handle = sys_le16_to_cpu(cmd->handle);
   2166e:	68eb      	ldr	r3, [r5, #12]
   21670:	f8b3 8000 	ldrh.w	r8, [r3]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   21674:	2200      	movs	r2, #0
   21676:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   21678:	fa1f f088 	uxth.w	r0, r8
   2167c:	f008 f828 	bl	296d0 <ll_start_enc_req_send>
   21680:	e57c      	b.n	2117c <hci_cmd_handle+0x2c4>
	handle = sys_le16_to_cpu(cmd->handle);
   21682:	68ea      	ldr	r2, [r5, #12]
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   21684:	2100      	movs	r1, #0
	handle = sys_le16_to_cpu(cmd->handle);
   21686:	f832 8b02 	ldrh.w	r8, [r2], #2
   2168a:	e7f5      	b.n	21678 <hci_cmd_handle+0x7c0>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   2168c:	2109      	movs	r1, #9
   2168e:	f014 f9c3 	bl	35a18 <bt_hci_cmd_complete_create>
   21692:	2109      	movs	r1, #9
   21694:	4605      	mov	r5, r0
   21696:	300c      	adds	r0, #12
   21698:	f016 f9ea 	bl	37a70 <net_buf_simple_add>
	rp->status = 0x00;
   2169c:	2300      	movs	r3, #0
   2169e:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   216a2:	2108      	movs	r1, #8
   216a4:	f009 fb5e 	bl	2ad64 <lll_csrand_get>
	if (err == -EINVAL) {
   216a8:	e43e      	b.n	20f28 <hci_cmd_handle+0x70>
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
   216aa:	68e8      	ldr	r0, [r5, #12]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   216ac:	f107 0210 	add.w	r2, r7, #16
   216b0:	2300      	movs	r3, #0
   216b2:	f100 0110 	add.w	r1, r0, #16
   216b6:	f00b f99d 	bl	2c9f4 <ecb_encrypt>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   216ba:	8830      	ldrh	r0, [r6, #0]
   216bc:	2111      	movs	r1, #17
   216be:	f014 f9ab 	bl	35a18 <bt_hci_cmd_complete_create>
   216c2:	2111      	movs	r1, #17
   216c4:	4605      	mov	r5, r0
   216c6:	300c      	adds	r0, #12
   216c8:	f016 f9d2 	bl	37a70 <net_buf_simple_add>
	rp->status = 0x00;
   216cc:	2300      	movs	r3, #0
	memcpy(rp->enc_data, enc_data, 16);
   216ce:	2210      	movs	r2, #16
	rp->status = 0x00;
   216d0:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   216d4:	18b9      	adds	r1, r7, r2
   216d6:	f013 ff2e 	bl	35536 <memcpy>
	if (err == -EINVAL) {
   216da:	e425      	b.n	20f28 <hci_cmd_handle+0x70>
	handle = sys_le16_to_cpu(cmd->handle);
   216dc:	68eb      	ldr	r3, [r5, #12]
	status = ll_feature_req_send(handle);
   216de:	8818      	ldrh	r0, [r3, #0]
   216e0:	f002 ffa0 	bl	24624 <ll_feature_req_send>
   216e4:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   216e6:	8830      	ldrh	r0, [r6, #0]
   216e8:	f014 f9a8 	bl	35a3c <bt_hci_cmd_status_create>
   216ec:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   216ee:	e41b      	b.n	20f28 <hci_cmd_handle+0x70>
	handle = sys_le16_to_cpu(cmd->handle);
   216f0:	68eb      	ldr	r3, [r5, #12]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   216f2:	2108      	movs	r1, #8
	handle = sys_le16_to_cpu(cmd->handle);
   216f4:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   216f6:	f014 f98f 	bl	35a18 <bt_hci_cmd_complete_create>
   216fa:	2108      	movs	r1, #8
   216fc:	4605      	mov	r5, r0
   216fe:	300c      	adds	r0, #12
   21700:	f016 f9b6 	bl	37a70 <net_buf_simple_add>
   21704:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   21706:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
   21708:	b2b0      	uxth	r0, r6
	status = ll_chm_get(handle, rp->ch_map);
   2170a:	f002 ff33 	bl	24574 <ll_chm_get>
	rp->handle = sys_le16_to_cpu(handle);
   2170e:	f8a4 6001 	strh.w	r6, [r4, #1]
	rp->status = status;
   21712:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   21714:	e408      	b.n	20f28 <hci_cmd_handle+0x70>
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
   21716:	68e9      	ldr	r1, [r5, #12]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   21718:	2200      	movs	r2, #0
   2171a:	884b      	ldrh	r3, [r1, #2]
   2171c:	8808      	ldrh	r0, [r1, #0]
   2171e:	9203      	str	r2, [sp, #12]
   21720:	890c      	ldrh	r4, [r1, #8]
   21722:	9402      	str	r4, [sp, #8]
   21724:	88cc      	ldrh	r4, [r1, #6]
   21726:	9401      	str	r4, [sp, #4]
   21728:	8889      	ldrh	r1, [r1, #4]
   2172a:	9100      	str	r1, [sp, #0]
   2172c:	4611      	mov	r1, r2
   2172e:	f002 fedd 	bl	244ec <ll_conn_update>
   21732:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   21734:	8830      	ldrh	r0, [r6, #0]
   21736:	f014 f981 	bl	35a3c <bt_hci_cmd_status_create>
   2173a:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   2173c:	f7ff bbf4 	b.w	20f28 <hci_cmd_handle+0x70>
	status = ll_fal_remove(&cmd->addr);
   21740:	68e8      	ldr	r0, [r5, #12]
   21742:	f008 f9df 	bl	29b04 <ll_fal_remove>
   21746:	e5b6      	b.n	212b6 <hci_cmd_handle+0x3fe>
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
   21748:	68eb      	ldr	r3, [r5, #12]
	status = ll_terminate_ind_send(handle, cmd->reason);
   2174a:	7899      	ldrb	r1, [r3, #2]
   2174c:	8818      	ldrh	r0, [r3, #0]
   2174e:	f002 ff33 	bl	245b8 <ll_terminate_ind_send>
   21752:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   21754:	8830      	ldrh	r0, [r6, #0]
   21756:	f014 f971 	bl	35a3c <bt_hci_cmd_status_create>
   2175a:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   2175c:	f7ff bbe4 	b.w	20f28 <hci_cmd_handle+0x70>
	handle = sys_le16_to_cpu(cmd->handle);
   21760:	68eb      	ldr	r3, [r5, #12]
   21762:	f8b3 8000 	ldrh.w	r8, [r3]
	status = ll_apto_get(handle, &auth_payload_timeout);
   21766:	f107 0110 	add.w	r1, r7, #16
   2176a:	fa1f f088 	uxth.w	r0, r8
   2176e:	f003 f83f 	bl	247f0 <ll_apto_get>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   21772:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   21774:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   21776:	8830      	ldrh	r0, [r6, #0]
   21778:	f014 f94e 	bl	35a18 <bt_hci_cmd_complete_create>
   2177c:	2105      	movs	r1, #5
   2177e:	4605      	mov	r5, r0
   21780:	300c      	adds	r0, #12
   21782:	f016 f975 	bl	37a70 <net_buf_simple_add>
	rp->status = status;
   21786:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   21788:	f8a0 8001 	strh.w	r8, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   2178c:	8a3b      	ldrh	r3, [r7, #16]
   2178e:	f8a0 3003 	strh.w	r3, [r0, #3]
	if (err == -EINVAL) {
   21792:	f7ff bbc9 	b.w	20f28 <hci_cmd_handle+0x70>
	event_mask = DEFAULT_EVENT_MASK;
   21796:	491d      	ldr	r1, [pc, #116]	; (2180c <hci_cmd_handle+0x954>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   21798:	4a1d      	ldr	r2, [pc, #116]	; (21810 <hci_cmd_handle+0x958>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   2179a:	4b1e      	ldr	r3, [pc, #120]	; (21814 <hci_cmd_handle+0x95c>)
	event_mask = DEFAULT_EVENT_MASK;
   2179c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   217a0:	f641 75ff 	movw	r5, #8191	; 0x1fff
   217a4:	e9c1 4500 	strd	r4, r5, [r1]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   217a8:	2000      	movs	r0, #0
   217aa:	2100      	movs	r1, #0
   217ac:	e9c2 0100 	strd	r0, r1, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   217b0:	201f      	movs	r0, #31
   217b2:	2100      	movs	r1, #0
   217b4:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   217b8:	f001 fe00 	bl	233bc <ll_reset>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   217bc:	8830      	ldrh	r0, [r6, #0]
   217be:	2101      	movs	r1, #1
   217c0:	f014 f92a 	bl	35a18 <bt_hci_cmd_complete_create>
   217c4:	2101      	movs	r1, #1
   217c6:	4605      	mov	r5, r0
   217c8:	300c      	adds	r0, #12
   217ca:	f016 f951 	bl	37a70 <net_buf_simple_add>
	ccst->status = status;
   217ce:	2300      	movs	r3, #0
	conn_count = 0U;
   217d0:	4a11      	ldr	r2, [pc, #68]	; (21818 <hci_cmd_handle+0x960>)
	ccst->status = status;
   217d2:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
   217d4:	6013      	str	r3, [r2, #0]
	hci_recv_fifo_reset();
   217d6:	f7ff fa5f 	bl	20c98 <hci_recv_fifo_reset>
	if (err == -EINVAL) {
   217da:	f7ff bba5 	b.w	20f28 <hci_cmd_handle+0x70>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   217de:	68ea      	ldr	r2, [r5, #12]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   217e0:	4b0b      	ldr	r3, [pc, #44]	; (21810 <hci_cmd_handle+0x958>)
   217e2:	e693      	b.n	2150c <hci_cmd_handle+0x654>
	return evt;
   217e4:	68fd      	ldr	r5, [r7, #12]
   217e6:	f7ff bb9f 	b.w	20f28 <hci_cmd_handle+0x70>
	return bt_hci_cmd_status_create(_opcode, status);
   217ea:	2112      	movs	r1, #18
   217ec:	f014 f926 	bl	35a3c <bt_hci_cmd_status_create>
   217f0:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   217f2:	f7ff bb99 	b.w	20f28 <hci_cmd_handle+0x70>
	return bt_hci_cmd_status_create(_opcode, status);
   217f6:	2111      	movs	r1, #17
   217f8:	f014 f920 	bl	35a3c <bt_hci_cmd_status_create>
   217fc:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   217fe:	f7ff bb93 	b.w	20f28 <hci_cmd_handle+0x70>
   21802:	bf00      	nop
   21804:	30cc8f00 	.word	0x30cc8f00
   21808:	0001c0ec 	.word	0x0001c0ec
   2180c:	200001e8 	.word	0x200001e8
   21810:	200016b8 	.word	0x200016b8
   21814:	200001e0 	.word	0x200001e0
   21818:	20001ef0 	.word	0x20001ef0

0002181c <hci_acl_handle>:
{
   2181c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*evt = NULL;
   21820:	2400      	movs	r4, #0
   21822:	600c      	str	r4, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   21824:	8a03      	ldrh	r3, [r0, #16]
   21826:	2b03      	cmp	r3, #3
{
   21828:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*acl)) {
   2182a:	d933      	bls.n	21894 <hci_acl_handle+0x78>
	return net_buf_simple_pull_mem(&buf->b, len);
   2182c:	4605      	mov	r5, r0
   2182e:	4689      	mov	r9, r1
   21830:	300c      	adds	r0, #12
   21832:	2104      	movs	r1, #4
   21834:	f016 f943 	bl	37abe <net_buf_simple_pull_mem>
	if (buf->len < len) {
   21838:	8a2b      	ldrh	r3, [r5, #16]
	len = sys_le16_to_cpu(acl->len);
   2183a:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   2183e:	f8b0 a000 	ldrh.w	sl, [r0]
	if (buf->len < len) {
   21842:	4543      	cmp	r3, r8
   21844:	d341      	bcc.n	218ca <hci_acl_handle+0xae>
	if (len > LL_LENGTH_OCTETS_TX_MAX) {
   21846:	f1b8 0f1b 	cmp.w	r8, #27
   2184a:	d838      	bhi.n	218be <hci_acl_handle+0xa2>
	node_tx = ll_tx_mem_acquire();
   2184c:	f002 fdf6 	bl	2443c <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   21850:	ea4f 361a 	mov.w	r6, sl, lsr #12
   21854:	46b3      	mov	fp, r6
	if (!node_tx) {
   21856:	4604      	mov	r4, r0
   21858:	2800      	cmp	r0, #0
   2185a:	d052      	beq.n	21902 <hci_acl_handle+0xe6>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   2185c:	ea5f 0b9b 	movs.w	fp, fp, lsr #2
   21860:	d12a      	bne.n	218b8 <hci_acl_handle+0x9c>
	switch (bt_acl_flags_pb(flags)) {
   21862:	b1ae      	cbz	r6, 21890 <hci_acl_handle+0x74>
   21864:	2e01      	cmp	r6, #1
   21866:	d127      	bne.n	218b8 <hci_acl_handle+0x9c>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   21868:	7923      	ldrb	r3, [r4, #4]
	pdu_data->len = len;
   2186a:	f884 8005 	strb.w	r8, [r4, #5]
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   2186e:	f366 0301 	bfi	r3, r6, #0, #2
   21872:	7123      	strb	r3, [r4, #4]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   21874:	68e9      	ldr	r1, [r5, #12]
   21876:	4642      	mov	r2, r8
   21878:	1de0      	adds	r0, r4, #7
   2187a:	f013 fe5c 	bl	35536 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   2187e:	4621      	mov	r1, r4
   21880:	f3ca 000b 	ubfx	r0, sl, #0, #12
   21884:	f002 fde6 	bl	24454 <ll_tx_mem_enqueue>
   21888:	bb28      	cbnz	r0, 218d6 <hci_acl_handle+0xba>
}
   2188a:	46bd      	mov	sp, r7
   2188c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (bt_acl_flags_pb(flags)) {
   21890:	2602      	movs	r6, #2
   21892:	e7e9      	b.n	21868 <hci_acl_handle+0x4c>
		LOG_ERR("No HCI ACL header");
   21894:	466d      	mov	r5, sp
   21896:	b088      	sub	sp, #32
   21898:	466b      	mov	r3, sp
   2189a:	4832      	ldr	r0, [pc, #200]	; (21964 <hci_acl_handle+0x148>)
   2189c:	461a      	mov	r2, r3
		LOG_ERR("Invalid HCI ACL packet length");
   2189e:	4932      	ldr	r1, [pc, #200]	; (21968 <hci_acl_handle+0x14c>)
   218a0:	e9c3 0105 	strd	r0, r1, [r3, #20]
   218a4:	2303      	movs	r3, #3
   218a6:	f842 3f10 	str.w	r3, [r2, #16]!
   218aa:	4830      	ldr	r0, [pc, #192]	; (2196c <hci_acl_handle+0x150>)
   218ac:	4623      	mov	r3, r4
   218ae:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   218b2:	f7f1 fc5f 	bl	13174 <z_impl_z_log_msg_static_create>
   218b6:	46ad      	mov	sp, r5
		return -EINVAL;
   218b8:	f06f 0015 	mvn.w	r0, #21
   218bc:	e7e5      	b.n	2188a <hci_acl_handle+0x6e>
		LOG_ERR("Invalid HCI ACL Data length");
   218be:	466d      	mov	r5, sp
   218c0:	b088      	sub	sp, #32
   218c2:	466b      	mov	r3, sp
   218c4:	482a      	ldr	r0, [pc, #168]	; (21970 <hci_acl_handle+0x154>)
   218c6:	461a      	mov	r2, r3
   218c8:	e7e9      	b.n	2189e <hci_acl_handle+0x82>
		LOG_ERR("Invalid HCI ACL packet length");
   218ca:	466d      	mov	r5, sp
   218cc:	b088      	sub	sp, #32
   218ce:	466b      	mov	r3, sp
   218d0:	4828      	ldr	r0, [pc, #160]	; (21974 <hci_acl_handle+0x158>)
   218d2:	461a      	mov	r2, r3
   218d4:	e7e3      	b.n	2189e <hci_acl_handle+0x82>
		LOG_ERR("Invalid Tx Enqueue");
   218d6:	466d      	mov	r5, sp
   218d8:	b088      	sub	sp, #32
   218da:	466b      	mov	r3, sp
   218dc:	4826      	ldr	r0, [pc, #152]	; (21978 <hci_acl_handle+0x15c>)
   218de:	4922      	ldr	r1, [pc, #136]	; (21968 <hci_acl_handle+0x14c>)
   218e0:	461a      	mov	r2, r3
   218e2:	e9c3 0105 	strd	r0, r1, [r3, #20]
   218e6:	2303      	movs	r3, #3
   218e8:	f842 3f10 	str.w	r3, [r2, #16]!
   218ec:	481f      	ldr	r0, [pc, #124]	; (2196c <hci_acl_handle+0x150>)
   218ee:	2300      	movs	r3, #0
   218f0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   218f4:	f7f1 fc3e 	bl	13174 <z_impl_z_log_msg_static_create>
		ll_tx_mem_release(node_tx);
   218f8:	4620      	mov	r0, r4
   218fa:	46ad      	mov	sp, r5
   218fc:	f002 fda4 	bl	24448 <ll_tx_mem_release>
		return -EINVAL;
   21900:	e7da      	b.n	218b8 <hci_acl_handle+0x9c>
		LOG_ERR("Tx Buffer Overflow");
   21902:	466d      	mov	r5, sp
   21904:	b088      	sub	sp, #32
   21906:	466b      	mov	r3, sp
   21908:	491c      	ldr	r1, [pc, #112]	; (2197c <hci_acl_handle+0x160>)
   2190a:	6159      	str	r1, [r3, #20]
   2190c:	461a      	mov	r2, r3
   2190e:	4916      	ldr	r1, [pc, #88]	; (21968 <hci_acl_handle+0x14c>)
   21910:	6199      	str	r1, [r3, #24]
   21912:	2303      	movs	r3, #3
   21914:	f842 3f10 	str.w	r3, [r2, #16]!
   21918:	4814      	ldr	r0, [pc, #80]	; (2196c <hci_acl_handle+0x150>)
   2191a:	4623      	mov	r3, r4
   2191c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   21920:	f7f1 fc28 	bl	13174 <z_impl_z_log_msg_static_create>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   21924:	4b16      	ldr	r3, [pc, #88]	; (21980 <hci_acl_handle+0x164>)
   21926:	681b      	ldr	r3, [r3, #0]
   21928:	019b      	lsls	r3, r3, #6
   2192a:	46ad      	mov	sp, r5
   2192c:	d517      	bpl.n	2195e <hci_acl_handle+0x142>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   2192e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21932:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21936:	2001      	movs	r0, #1
   21938:	f7f4 fa4c 	bl	15dd4 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   2193c:	2102      	movs	r1, #2
   2193e:	f8c9 0000 	str.w	r0, [r9]
   21942:	300c      	adds	r0, #12
   21944:	f016 f894 	bl	37a70 <net_buf_simple_add>
	hdr->evt = evt;
   21948:	f44f 738d 	mov.w	r3, #282	; 0x11a
   2194c:	8003      	strh	r3, [r0, #0]
   2194e:	f8d9 0000 	ldr.w	r0, [r9]
   21952:	2101      	movs	r1, #1
   21954:	300c      	adds	r0, #12
   21956:	f016 f88b 	bl	37a70 <net_buf_simple_add>
	ep->link_type = link_type;
   2195a:	2301      	movs	r3, #1
   2195c:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
   2195e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   21962:	e792      	b.n	2188a <hci_acl_handle+0x6e>
   21964:	0003a0ec 	.word	0x0003a0ec
   21968:	0003a2c4 	.word	0x0003a2c4
   2196c:	00039588 	.word	0x00039588
   21970:	0003a128 	.word	0x0003a128
   21974:	0003a104 	.word	0x0003a104
   21978:	0003a160 	.word	0x0003a160
   2197c:	0003a148 	.word	0x0003a148
   21980:	200001e8 	.word	0x200001e8

00021984 <hci_disconn_complete_encode>:
{
   21984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   21986:	4b0e      	ldr	r3, [pc, #56]	; (219c0 <hci_disconn_complete_encode+0x3c>)
   21988:	681b      	ldr	r3, [r3, #0]
   2198a:	06db      	lsls	r3, r3, #27
   2198c:	d400      	bmi.n	21990 <hci_disconn_complete_encode+0xc>
}
   2198e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21990:	f102 040c 	add.w	r4, r2, #12
   21994:	4606      	mov	r6, r0
   21996:	460d      	mov	r5, r1
   21998:	4620      	mov	r0, r4
   2199a:	2102      	movs	r1, #2
   2199c:	f016 f868 	bl	37a70 <net_buf_simple_add>
   219a0:	4603      	mov	r3, r0
	hdr->evt = evt;
   219a2:	f240 4205 	movw	r2, #1029	; 0x405
   219a6:	801a      	strh	r2, [r3, #0]
   219a8:	4620      	mov	r0, r4
   219aa:	2104      	movs	r1, #4
   219ac:	f016 f860 	bl	37a70 <net_buf_simple_add>
	ep->status = 0x00;
   219b0:	2700      	movs	r7, #0
   219b2:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   219b4:	f8a0 5001 	strh.w	r5, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
   219b8:	7832      	ldrb	r2, [r6, #0]
   219ba:	70c2      	strb	r2, [r0, #3]
}
   219bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   219be:	bf00      	nop
   219c0:	200001e8 	.word	0x200001e8

000219c4 <hci_disconn_complete_process>:
	conn_count--;
   219c4:	4a02      	ldr	r2, [pc, #8]	; (219d0 <hci_disconn_complete_process+0xc>)
   219c6:	6813      	ldr	r3, [r2, #0]
   219c8:	3b01      	subs	r3, #1
   219ca:	6013      	str	r3, [r2, #0]
}
   219cc:	4770      	bx	lr
   219ce:	bf00      	nop
   219d0:	20001ef0 	.word	0x20001ef0

000219d4 <hci_acl_encode>:
	}
}

#if defined(CONFIG_BT_CONN)
void hci_acl_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   219d4:	b570      	push	{r4, r5, r6, lr}
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   219d6:	7f03      	ldrb	r3, [r0, #28]
	handle = node_rx->hdr.handle;
   219d8:	88c6      	ldrh	r6, [r0, #6]
	switch (pdu_data->ll_id) {
   219da:	f003 0303 	and.w	r3, r3, #3
   219de:	3b01      	subs	r3, #1
   219e0:	2b01      	cmp	r3, #1
   219e2:	d90d      	bls.n	21a00 <hci_acl_encode+0x2c>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
   219e4:	4a15      	ldr	r2, [pc, #84]	; (21a3c <hci_acl_encode+0x68>)
   219e6:	4916      	ldr	r1, [pc, #88]	; (21a40 <hci_acl_encode+0x6c>)
   219e8:	4816      	ldr	r0, [pc, #88]	; (21a44 <hci_acl_encode+0x70>)
   219ea:	f242 138f 	movw	r3, #8591	; 0x218f
   219ee:	f011 fd13 	bl	33418 <assert_print>
   219f2:	4040      	eors	r0, r0
   219f4:	f380 8811 	msr	BASEPRI, r0
   219f8:	f04f 0003 	mov.w	r0, #3
   219fc:	df02      	svc	2
		break;
	}
}
   219fe:	bd70      	pop	{r4, r5, r6, pc}
   21a00:	4604      	mov	r4, r0
   21a02:	f101 050c 	add.w	r5, r1, #12
   21a06:	4628      	mov	r0, r5
   21a08:	2104      	movs	r1, #4
   21a0a:	f016 f831 	bl	37a70 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   21a0e:	7f23      	ldrb	r3, [r4, #28]
   21a10:	f003 0303 	and.w	r3, r3, #3
   21a14:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   21a16:	bf0c      	ite	eq
   21a18:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   21a1c:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   21a20:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   21a22:	7f63      	ldrb	r3, [r4, #29]
   21a24:	8043      	strh	r3, [r0, #2]
   21a26:	7f61      	ldrb	r1, [r4, #29]
   21a28:	4628      	mov	r0, r5
   21a2a:	f016 f821 	bl	37a70 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   21a2e:	7f62      	ldrb	r2, [r4, #29]
   21a30:	f104 011f 	add.w	r1, r4, #31
}
   21a34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   21a38:	f013 bd7d 	b.w	35536 <memcpy>
   21a3c:	0003a178 	.word	0x0003a178
   21a40:	0003a004 	.word	0x0003a004
   21a44:	00039f74 	.word	0x00039f74

00021a48 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   21a48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21a4c:	b085      	sub	sp, #20
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   21a4e:	f890 c004 	ldrb.w	ip, [r0, #4]
   21a52:	88c6      	ldrh	r6, [r0, #6]
   21a54:	f1bc 0f03 	cmp.w	ip, #3
{
   21a58:	af04      	add	r7, sp, #16
   21a5a:	4604      	mov	r4, r0
   21a5c:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   21a5e:	f100 081c 	add.w	r8, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   21a62:	d00e      	beq.n	21a82 <hci_evt_encode+0x3a>
	switch (node_rx->hdr.type) {
   21a64:	f1ac 0c17 	sub.w	ip, ip, #23
   21a68:	f1bc 0f06 	cmp.w	ip, #6
   21a6c:	f200 8303 	bhi.w	22076 <hci_evt_encode+0x62e>
   21a70:	e8df f01c 	tbh	[pc, ip, lsl #1]
   21a74:	007f0021 	.word	0x007f0021
   21a78:	00b50088 	.word	0x00b50088
   21a7c:	00dd00cb 	.word	0x00dd00cb
   21a80:	00fb      	.short	0x00fb
	switch (pdu_data->llctrl.opcode) {
   21a82:	7fc3      	ldrb	r3, [r0, #31]
   21a84:	3b03      	subs	r3, #3
   21a86:	2b12      	cmp	r3, #18
   21a88:	f200 8124 	bhi.w	21cd4 <hci_evt_encode+0x28c>
   21a8c:	e8df f013 	tbh	[pc, r3, lsl #1]
   21a90:	012201f3 	.word	0x012201f3
   21a94:	023f0122 	.word	0x023f0122
   21a98:	0122021f 	.word	0x0122021f
   21a9c:	01220238 	.word	0x01220238
   21aa0:	01220122 	.word	0x01220122
   21aa4:	012201b2 	.word	0x012201b2
   21aa8:	012201cd 	.word	0x012201cd
   21aac:	01220183 	.word	0x01220183
   21ab0:	01300122 	.word	0x01300122
   21ab4:	0130      	.short	0x0130
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   21ab6:	f018 0f01 	tst.w	r8, #1
   21aba:	f040 824a 	bne.w	21f52 <hci_evt_encode+0x50a>
	status = cc->status;
   21abe:	f894 801c 	ldrb.w	r8, [r4, #28]
	if (!status) {
   21ac2:	f1b8 0f00 	cmp.w	r8, #0
   21ac6:	f000 823b 	beq.w	21f40 <hci_evt_encode+0x4f8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   21aca:	4bbe      	ldr	r3, [pc, #760]	; (21dc4 <hci_evt_encode+0x37c>)
   21acc:	685b      	ldr	r3, [r3, #4]
   21ace:	0098      	lsls	r0, r3, #2
   21ad0:	d554      	bpl.n	21b7c <hci_evt_encode+0x134>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   21ad2:	4bbd      	ldr	r3, [pc, #756]	; (21dc8 <hci_evt_encode+0x380>)
   21ad4:	681b      	ldr	r3, [r3, #0]
   21ad6:	f240 2201 	movw	r2, #513	; 0x201
   21ada:	4213      	tst	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   21adc:	f403 7900 	and.w	r9, r3, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   21ae0:	d04c      	beq.n	21b7c <hci_evt_encode+0x134>
   21ae2:	350c      	adds	r5, #12
	if (!status) {
   21ae4:	f1b8 0f00 	cmp.w	r8, #0
   21ae8:	f040 824c 	bne.w	21f84 <hci_evt_encode+0x53c>
		conn_count++;
   21aec:	4ab7      	ldr	r2, [pc, #732]	; (21dcc <hci_evt_encode+0x384>)
   21aee:	6813      	ldr	r3, [r2, #0]
   21af0:	3301      	adds	r3, #1
   21af2:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   21af4:	f1b9 0f00 	cmp.w	r9, #0
   21af8:	f000 8260 	beq.w	21fbc <hci_evt_encode+0x574>
   21afc:	2102      	movs	r1, #2
   21afe:	4628      	mov	r0, r5
   21b00:	f015 ffb6 	bl	37a70 <net_buf_simple_add>
	hdr->evt = evt;
   21b04:	f641 733e 	movw	r3, #7998	; 0x1f3e
   21b08:	8003      	strh	r3, [r0, #0]
   21b0a:	2101      	movs	r1, #1
   21b0c:	4628      	mov	r0, r5
   21b0e:	f015 ffaf 	bl	37a70 <net_buf_simple_add>
	me->subevent = subevt;
   21b12:	230a      	movs	r3, #10
   21b14:	7003      	strb	r3, [r0, #0]
   21b16:	211e      	movs	r1, #30
   21b18:	4628      	mov	r0, r5
   21b1a:	f015 ffa9 	bl	37a70 <net_buf_simple_add>
		leecc->status = 0x00;
   21b1e:	f880 8000 	strb.w	r8, [r0]
		leecc->handle = sys_cpu_to_le16(handle);
   21b22:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = cc->role;
   21b26:	7f63      	ldrb	r3, [r4, #29]
   21b28:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = cc->peer_addr_type;
   21b2a:	7fa3      	ldrb	r3, [r4, #30]
   21b2c:	7103      	strb	r3, [r0, #4]
   21b2e:	4605      	mov	r5, r0
		memcpy(&leecc->peer_addr.a.val[0], &cc->peer_addr[0],
   21b30:	2206      	movs	r2, #6
   21b32:	f104 011f 	add.w	r1, r4, #31
   21b36:	3005      	adds	r0, #5
   21b38:	f013 fcfd 	bl	35536 <memcpy>
		memcpy(&leecc->local_rpa.val[0], &cc->local_rpa[0],
   21b3c:	2206      	movs	r2, #6
   21b3e:	f104 012b 	add.w	r1, r4, #43	; 0x2b
   21b42:	f105 000b 	add.w	r0, r5, #11
   21b46:	f013 fcf6 	bl	35536 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &cc->peer_rpa[0],
   21b4a:	2206      	movs	r2, #6
   21b4c:	f104 0125 	add.w	r1, r4, #37	; 0x25
   21b50:	f105 0011 	add.w	r0, r5, #17
   21b54:	f013 fcef 	bl	35536 <memcpy>
		leecc->interval = sys_cpu_to_le16(cc->interval);
   21b58:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   21b5a:	f8a5 3017 	strh.w	r3, [r5, #23]
		leecc->latency = sys_cpu_to_le16(cc->latency);
   21b5e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   21b60:	f8a5 3019 	strh.w	r3, [r5, #25]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   21b64:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   21b66:	f8a5 301b 	strh.w	r3, [r5, #27]
		leecc->clock_accuracy = cc->sca;
   21b6a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   21b6e:	776b      	strb	r3, [r5, #29]
		return;
   21b70:	e004      	b.n	21b7c <hci_evt_encode+0x134>
		hci_disconn_complete_encode(pdu_data, handle, buf);
   21b72:	460a      	mov	r2, r1
   21b74:	4640      	mov	r0, r8
   21b76:	4631      	mov	r1, r6
   21b78:	f7ff ff04 	bl	21984 <hci_disconn_complete_encode>
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   21b7c:	3704      	adds	r7, #4
   21b7e:	46bd      	mov	sp, r7
   21b80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   21b84:	4b8f      	ldr	r3, [pc, #572]	; (21dc4 <hci_evt_encode+0x37c>)
   21b86:	685b      	ldr	r3, [r3, #4]
   21b88:	0099      	lsls	r1, r3, #2
   21b8a:	d5f7      	bpl.n	21b7c <hci_evt_encode+0x134>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   21b8c:	4b8e      	ldr	r3, [pc, #568]	; (21dc8 <hci_evt_encode+0x380>)
   21b8e:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   21b90:	075a      	lsls	r2, r3, #29
   21b92:	d5f3      	bpl.n	21b7c <hci_evt_encode+0x134>
   21b94:	350c      	adds	r5, #12
   21b96:	2102      	movs	r1, #2
   21b98:	4628      	mov	r0, r5
   21b9a:	f015 ff69 	bl	37a70 <net_buf_simple_add>
	hdr->evt = evt;
   21b9e:	f640 233e 	movw	r3, #2622	; 0xa3e
   21ba2:	8003      	strh	r3, [r0, #0]
   21ba4:	2101      	movs	r1, #1
   21ba6:	4628      	mov	r0, r5
   21ba8:	f015 ff62 	bl	37a70 <net_buf_simple_add>
	me->subevent = subevt;
   21bac:	2303      	movs	r3, #3
   21bae:	7003      	strb	r3, [r0, #0]
   21bb0:	2109      	movs	r1, #9
   21bb2:	4628      	mov	r0, r5
   21bb4:	f015 ff5c 	bl	37a70 <net_buf_simple_add>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   21bb8:	f018 0f01 	tst.w	r8, #1
   21bbc:	4605      	mov	r5, r0
   21bbe:	f040 824c 	bne.w	2205a <hci_evt_encode+0x612>
	sep->status = cu->status;
   21bc2:	7f23      	ldrb	r3, [r4, #28]
   21bc4:	702b      	strb	r3, [r5, #0]
	sep->handle = sys_cpu_to_le16(handle);
   21bc6:	f8a5 6001 	strh.w	r6, [r5, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
   21bca:	8be3      	ldrh	r3, [r4, #30]
   21bcc:	f8a5 3003 	strh.w	r3, [r5, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   21bd0:	8c23      	ldrh	r3, [r4, #32]
   21bd2:	f8a5 3005 	strh.w	r3, [r5, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   21bd6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   21bd8:	f8a5 3007 	strh.w	r3, [r5, #7]
   21bdc:	e7ce      	b.n	21b7c <hci_evt_encode+0x134>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   21bde:	4b79      	ldr	r3, [pc, #484]	; (21dc4 <hci_evt_encode+0x37c>)
   21be0:	685b      	ldr	r3, [r3, #4]
   21be2:	041b      	lsls	r3, r3, #16
   21be4:	f04f 0400 	mov.w	r4, #0
   21be8:	d5c8      	bpl.n	21b7c <hci_evt_encode+0x134>
   21bea:	350c      	adds	r5, #12
   21bec:	2102      	movs	r1, #2
   21bee:	4628      	mov	r0, r5
   21bf0:	f015 ff3e 	bl	37a70 <net_buf_simple_add>
	hdr->evt = evt;
   21bf4:	f44f 734c 	mov.w	r3, #816	; 0x330
   21bf8:	8003      	strh	r3, [r0, #0]
   21bfa:	2103      	movs	r1, #3
   21bfc:	4628      	mov	r0, r5
   21bfe:	f015 ff37 	bl	37a70 <net_buf_simple_add>
	ep->status = 0x00;
   21c02:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   21c04:	f8a0 6001 	strh.w	r6, [r0, #1]
   21c08:	e7b8      	b.n	21b7c <hci_evt_encode+0x134>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   21c0a:	4b71      	ldr	r3, [pc, #452]	; (21dd0 <hci_evt_encode+0x388>)
   21c0c:	681b      	ldr	r3, [r3, #0]
   21c0e:	021c      	lsls	r4, r3, #8
   21c10:	d5b4      	bpl.n	21b7c <hci_evt_encode+0x134>
   21c12:	350c      	adds	r5, #12
   21c14:	2102      	movs	r1, #2
   21c16:	4628      	mov	r0, r5
   21c18:	f015 ff2a 	bl	37a70 <net_buf_simple_add>
	hdr->evt = evt;
   21c1c:	f240 2357 	movw	r3, #599	; 0x257
   21c20:	8003      	strh	r3, [r0, #0]
   21c22:	2102      	movs	r1, #2
   21c24:	4628      	mov	r0, r5
   21c26:	f015 ff23 	bl	37a70 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   21c2a:	8006      	strh	r6, [r0, #0]
   21c2c:	e7a6      	b.n	21b7c <hci_evt_encode+0x134>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   21c2e:	4b65      	ldr	r3, [pc, #404]	; (21dc4 <hci_evt_encode+0x37c>)
   21c30:	685b      	ldr	r3, [r3, #4]
   21c32:	0098      	lsls	r0, r3, #2
   21c34:	d5a2      	bpl.n	21b7c <hci_evt_encode+0x134>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   21c36:	4b64      	ldr	r3, [pc, #400]	; (21dc8 <hci_evt_encode+0x380>)
   21c38:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   21c3a:	0319      	lsls	r1, r3, #12
   21c3c:	d59e      	bpl.n	21b7c <hci_evt_encode+0x134>
   21c3e:	350c      	adds	r5, #12
   21c40:	2102      	movs	r1, #2
   21c42:	4628      	mov	r0, r5
   21c44:	f015 ff14 	bl	37a70 <net_buf_simple_add>
	hdr->evt = evt;
   21c48:	f240 433e 	movw	r3, #1086	; 0x43e
   21c4c:	8003      	strh	r3, [r0, #0]
   21c4e:	2101      	movs	r1, #1
   21c50:	4628      	mov	r0, r5
   21c52:	f015 ff0d 	bl	37a70 <net_buf_simple_add>
	me->subevent = subevt;
   21c56:	2314      	movs	r3, #20
   21c58:	7003      	strb	r3, [r0, #0]
   21c5a:	2103      	movs	r1, #3
   21c5c:	4628      	mov	r0, r5
   21c5e:	f015 ff07 	bl	37a70 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   21c62:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
   21c64:	7f23      	ldrb	r3, [r4, #28]
   21c66:	7083      	strb	r3, [r0, #2]
   21c68:	e788      	b.n	21b7c <hci_evt_encode+0x134>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   21c6a:	4b56      	ldr	r3, [pc, #344]	; (21dc4 <hci_evt_encode+0x37c>)
   21c6c:	685b      	ldr	r3, [r3, #4]
   21c6e:	009a      	lsls	r2, r3, #2
   21c70:	d503      	bpl.n	21c7a <hci_evt_encode+0x232>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   21c72:	4b55      	ldr	r3, [pc, #340]	; (21dc8 <hci_evt_encode+0x380>)
   21c74:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   21c76:	051b      	lsls	r3, r3, #20
   21c78:	d460      	bmi.n	21d3c <hci_evt_encode+0x2f4>
   21c7a:	7f62      	ldrb	r2, [r4, #29]
   21c7c:	7fa3      	ldrb	r3, [r4, #30]
		LOG_WRN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle, pu->status,
   21c7e:	f894 c01c 	ldrb.w	ip, [r4, #28]
   21c82:	2a00      	cmp	r2, #0
   21c84:	fa92 f2a2 	rbit	r2, r2
   21c88:	fab2 f282 	clz	r2, r2
   21c8c:	bf08      	it	eq
   21c8e:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   21c92:	2b00      	cmp	r3, #0
   21c94:	fa93 f3a3 	rbit	r3, r3
   21c98:	fab3 f383 	clz	r3, r3
   21c9c:	466d      	mov	r5, sp
   21c9e:	bf08      	it	eq
   21ca0:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   21ca4:	b08c      	sub	sp, #48	; 0x30
   21ca6:	1c51      	adds	r1, r2, #1
   21ca8:	3301      	adds	r3, #1
   21caa:	a804      	add	r0, sp, #16
   21cac:	e9c0 c108 	strd	ip, r1, [r0, #32]
   21cb0:	6283      	str	r3, [r0, #40]	; 0x28
   21cb2:	4948      	ldr	r1, [pc, #288]	; (21dd4 <hci_evt_encode+0x38c>)
   21cb4:	4b48      	ldr	r3, [pc, #288]	; (21dd8 <hci_evt_encode+0x390>)
   21cb6:	61c6      	str	r6, [r0, #28]
   21cb8:	4602      	mov	r2, r0
   21cba:	2407      	movs	r4, #7
   21cbc:	e9c0 1305 	strd	r1, r3, [r0, #20]
   21cc0:	f842 4f10 	str.w	r4, [r2, #16]!
   21cc4:	4845      	ldr	r0, [pc, #276]	; (21ddc <hci_evt_encode+0x394>)
   21cc6:	2300      	movs	r3, #0
   21cc8:	f44f 5162 	mov.w	r1, #14464	; 0x3880
   21ccc:	f7f1 fa52 	bl	13174 <z_impl_z_log_msg_static_create>
   21cd0:	46ad      	mov	sp, r5
		return;
   21cd2:	e753      	b.n	21b7c <hci_evt_encode+0x134>
		LL_ASSERT(0);
   21cd4:	4a42      	ldr	r2, [pc, #264]	; (21de0 <hci_evt_encode+0x398>)
   21cd6:	4943      	ldr	r1, [pc, #268]	; (21de4 <hci_evt_encode+0x39c>)
   21cd8:	4843      	ldr	r0, [pc, #268]	; (21de8 <hci_evt_encode+0x3a0>)
   21cda:	f242 1363 	movw	r3, #8547	; 0x2163
   21cde:	f011 fb9b 	bl	33418 <assert_print>
   21ce2:	4040      	eors	r0, r0
   21ce4:	f380 8811 	msr	BASEPRI, r0
   21ce8:	f04f 0003 	mov.w	r0, #3
   21cec:	df02      	svc	2
}
   21cee:	e745      	b.n	21b7c <hci_evt_encode+0x134>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   21cf0:	4b34      	ldr	r3, [pc, #208]	; (21dc4 <hci_evt_encode+0x37c>)
   21cf2:	685b      	ldr	r3, [r3, #4]
   21cf4:	009a      	lsls	r2, r3, #2
   21cf6:	f57f af41 	bpl.w	21b7c <hci_evt_encode+0x134>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   21cfa:	4b33      	ldr	r3, [pc, #204]	; (21dc8 <hci_evt_encode+0x380>)
   21cfc:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   21cfe:	065b      	lsls	r3, r3, #25
   21d00:	f57f af3c 	bpl.w	21b7c <hci_evt_encode+0x134>
   21d04:	350c      	adds	r5, #12
   21d06:	2102      	movs	r1, #2
   21d08:	4628      	mov	r0, r5
   21d0a:	f015 feb1 	bl	37a70 <net_buf_simple_add>
	hdr->evt = evt;
   21d0e:	f640 333e 	movw	r3, #2878	; 0xb3e
   21d12:	8003      	strh	r3, [r0, #0]
   21d14:	2101      	movs	r1, #1
   21d16:	4628      	mov	r0, r5
   21d18:	f015 feaa 	bl	37a70 <net_buf_simple_add>
	me->subevent = subevt;
   21d1c:	2307      	movs	r3, #7
   21d1e:	7003      	strb	r3, [r0, #0]
   21d20:	210a      	movs	r1, #10
   21d22:	4628      	mov	r0, r5
   21d24:	f015 fea4 	bl	37a70 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   21d28:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   21d2a:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   21d2c:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   21d2e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   21d30:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   21d32:	8c23      	ldrh	r3, [r4, #32]
   21d34:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   21d36:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   21d38:	8103      	strh	r3, [r0, #8]
   21d3a:	e71f      	b.n	21b7c <hci_evt_encode+0x134>
   21d3c:	350c      	adds	r5, #12
   21d3e:	2102      	movs	r1, #2
   21d40:	4628      	mov	r0, r5
   21d42:	f015 fe95 	bl	37a70 <net_buf_simple_add>
	hdr->evt = evt;
   21d46:	f240 633e 	movw	r3, #1598	; 0x63e
   21d4a:	8003      	strh	r3, [r0, #0]
   21d4c:	2101      	movs	r1, #1
   21d4e:	4628      	mov	r0, r5
   21d50:	f015 fe8e 	bl	37a70 <net_buf_simple_add>
	me->subevent = subevt;
   21d54:	230c      	movs	r3, #12
   21d56:	7003      	strb	r3, [r0, #0]
   21d58:	2105      	movs	r1, #5
   21d5a:	4628      	mov	r0, r5
   21d5c:	f015 fe88 	bl	37a70 <net_buf_simple_add>
	sep->status = pu->status;
   21d60:	7f23      	ldrb	r3, [r4, #28]
   21d62:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   21d64:	f8a0 6001 	strh.w	r6, [r0, #1]
   21d68:	7f62      	ldrb	r2, [r4, #29]
   21d6a:	2a00      	cmp	r2, #0
   21d6c:	fa92 f3a2 	rbit	r3, r2
   21d70:	fab3 f383 	clz	r3, r3
   21d74:	bf08      	it	eq
   21d76:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   21d7a:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   21d7c:	70c3      	strb	r3, [r0, #3]
   21d7e:	7fa2      	ldrb	r2, [r4, #30]
   21d80:	fa92 f3a2 	rbit	r3, r2
   21d84:	2a00      	cmp	r2, #0
   21d86:	fab3 f383 	clz	r3, r3
   21d8a:	bf08      	it	eq
   21d8c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   21d90:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   21d92:	7103      	strb	r3, [r0, #4]
   21d94:	e6f2      	b.n	21b7c <hci_evt_encode+0x134>
		LOG_WRN("reject opcode: 0x%02x", pdu->llctrl.reject_ext_ind.reject_opcode);
   21d96:	466d      	mov	r5, sp
   21d98:	b088      	sub	sp, #32
	switch (pdu->llctrl.reject_ext_ind.reject_opcode) {
   21d9a:	f890 0020 	ldrb.w	r0, [r0, #32]
		LOG_WRN("reject opcode: 0x%02x", pdu->llctrl.reject_ext_ind.reject_opcode);
   21d9e:	ab04      	add	r3, sp, #16
   21da0:	4c12      	ldr	r4, [pc, #72]	; (21dec <hci_evt_encode+0x3a4>)
   21da2:	4913      	ldr	r1, [pc, #76]	; (21df0 <hci_evt_encode+0x3a8>)
   21da4:	61d8      	str	r0, [r3, #28]
   21da6:	461a      	mov	r2, r3
   21da8:	e9c3 4105 	strd	r4, r1, [r3, #20]
   21dac:	2104      	movs	r1, #4
   21dae:	f842 1f10 	str.w	r1, [r2, #16]!
   21db2:	480a      	ldr	r0, [pc, #40]	; (21ddc <hci_evt_encode+0x394>)
   21db4:	2300      	movs	r3, #0
   21db6:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   21dba:	f7f1 f9db 	bl	13174 <z_impl_z_log_msg_static_create>
   21dbe:	46ad      	mov	sp, r5
}
   21dc0:	e6dc      	b.n	21b7c <hci_evt_encode+0x134>
   21dc2:	bf00      	nop
   21dc4:	200001e8 	.word	0x200001e8
   21dc8:	200001e0 	.word	0x200001e0
   21dcc:	20001ef0 	.word	0x20001ef0
   21dd0:	200016b8 	.word	0x200016b8
   21dd4:	0003a22c 	.word	0x0003a22c
   21dd8:	0003a2b0 	.word	0x0003a2b0
   21ddc:	00039588 	.word	0x00039588
   21de0:	0003a178 	.word	0x0003a178
   21de4:	0003a004 	.word	0x0003a004
   21de8:	00039f74 	.word	0x00039f74
   21dec:	0003a270 	.word	0x0003a270
   21df0:	0003a28c 	.word	0x0003a28c
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   21df4:	4ba7      	ldr	r3, [pc, #668]	; (22094 <hci_evt_encode+0x64c>)
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
   21df6:	f890 4020 	ldrb.w	r4, [r0, #32]
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   21dfa:	681b      	ldr	r3, [r3, #0]
   21dfc:	061b      	lsls	r3, r3, #24
   21dfe:	f57f aebd 	bpl.w	21b7c <hci_evt_encode+0x134>
   21e02:	350c      	adds	r5, #12
   21e04:	2102      	movs	r1, #2
   21e06:	4628      	mov	r0, r5
   21e08:	f015 fe32 	bl	37a70 <net_buf_simple_add>
	hdr->evt = evt;
   21e0c:	f44f 6381 	mov.w	r3, #1032	; 0x408
   21e10:	8003      	strh	r3, [r0, #0]
   21e12:	2104      	movs	r1, #4
   21e14:	4628      	mov	r0, r5
   21e16:	f015 fe2b 	bl	37a70 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   21e1a:	fab4 f384 	clz	r3, r4
   21e1e:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   21e20:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   21e22:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   21e26:	70c3      	strb	r3, [r0, #3]
   21e28:	e6a8      	b.n	21b7c <hci_evt_encode+0x134>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   21e2a:	4b9a      	ldr	r3, [pc, #616]	; (22094 <hci_evt_encode+0x64c>)
   21e2c:	685b      	ldr	r3, [r3, #4]
   21e2e:	0098      	lsls	r0, r3, #2
   21e30:	f140 809d 	bpl.w	21f6e <hci_evt_encode+0x526>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   21e34:	4b98      	ldr	r3, [pc, #608]	; (22098 <hci_evt_encode+0x650>)
   21e36:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   21e38:	0699      	lsls	r1, r3, #26
   21e3a:	f140 8098 	bpl.w	21f6e <hci_evt_encode+0x526>
   21e3e:	350c      	adds	r5, #12
   21e40:	2102      	movs	r1, #2
   21e42:	4628      	mov	r0, r5
   21e44:	f015 fe14 	bl	37a70 <net_buf_simple_add>
	hdr->evt = evt;
   21e48:	f640 333e 	movw	r3, #2878	; 0xb3e
   21e4c:	8003      	strh	r3, [r0, #0]
   21e4e:	2101      	movs	r1, #1
   21e50:	4628      	mov	r0, r5
   21e52:	f015 fe0d 	bl	37a70 <net_buf_simple_add>
	me->subevent = subevt;
   21e56:	2306      	movs	r3, #6
   21e58:	7003      	strb	r3, [r0, #0]
   21e5a:	210a      	movs	r1, #10
   21e5c:	4628      	mov	r0, r5
   21e5e:	f015 fe07 	bl	37a70 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   21e62:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   21e64:	8c23      	ldrh	r3, [r4, #32]
   21e66:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   21e68:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   21e6a:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   21e6c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   21e6e:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   21e70:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   21e72:	8103      	strh	r3, [r0, #8]
   21e74:	e682      	b.n	21b7c <hci_evt_encode+0x134>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   21e76:	4b87      	ldr	r3, [pc, #540]	; (22094 <hci_evt_encode+0x64c>)
   21e78:	685b      	ldr	r3, [r3, #4]
   21e7a:	0098      	lsls	r0, r3, #2
   21e7c:	f57f ae7e 	bpl.w	21b7c <hci_evt_encode+0x134>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   21e80:	4b85      	ldr	r3, [pc, #532]	; (22098 <hci_evt_encode+0x650>)
   21e82:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   21e84:	06d9      	lsls	r1, r3, #27
   21e86:	f57f ae79 	bpl.w	21b7c <hci_evt_encode+0x134>
   21e8a:	350c      	adds	r5, #12
   21e8c:	2102      	movs	r1, #2
   21e8e:	4628      	mov	r0, r5
   21e90:	f015 fdee 	bl	37a70 <net_buf_simple_add>
	hdr->evt = evt;
   21e94:	f640 533e 	movw	r3, #3390	; 0xd3e
   21e98:	8003      	strh	r3, [r0, #0]
   21e9a:	2101      	movs	r1, #1
   21e9c:	4628      	mov	r0, r5
   21e9e:	f015 fde7 	bl	37a70 <net_buf_simple_add>
	me->subevent = subevt;
   21ea2:	2305      	movs	r3, #5
   21ea4:	7003      	strb	r3, [r0, #0]
   21ea6:	210c      	movs	r1, #12
   21ea8:	4628      	mov	r0, r5
   21eaa:	f015 fde1 	bl	37a70 <net_buf_simple_add>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   21eae:	f104 0120 	add.w	r1, r4, #32
   21eb2:	4605      	mov	r5, r0
   21eb4:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
   21eb6:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   21eba:	f013 fb3c 	bl	35536 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   21ebe:	2202      	movs	r2, #2
   21ec0:	f104 0128 	add.w	r1, r4, #40	; 0x28
   21ec4:	f105 000a 	add.w	r0, r5, #10
   21ec8:	f013 fb35 	bl	35536 <memcpy>
   21ecc:	e656      	b.n	21b7c <hci_evt_encode+0x134>
		le_unknown_rsp(pdu_data, handle, buf);
   21ece:	f890 1020 	ldrb.w	r1, [r0, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
   21ed2:	290e      	cmp	r1, #14
   21ed4:	f000 80a1 	beq.w	2201a <hci_evt_encode+0x5d2>
		LOG_WRN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   21ed8:	466c      	mov	r4, sp
   21eda:	b088      	sub	sp, #32
   21edc:	ab04      	add	r3, sp, #16
   21ede:	4d6f      	ldr	r5, [pc, #444]	; (2209c <hci_evt_encode+0x654>)
   21ee0:	486f      	ldr	r0, [pc, #444]	; (220a0 <hci_evt_encode+0x658>)
	switch (pdu_data->llctrl.unknown_rsp.type) {
   21ee2:	61d9      	str	r1, [r3, #28]
		LOG_WRN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   21ee4:	461a      	mov	r2, r3
   21ee6:	e9c3 5005 	strd	r5, r0, [r3, #20]
   21eea:	2004      	movs	r0, #4
   21eec:	f842 0f10 	str.w	r0, [r2, #16]!
   21ef0:	486c      	ldr	r0, [pc, #432]	; (220a4 <hci_evt_encode+0x65c>)
   21ef2:	2300      	movs	r3, #0
   21ef4:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   21ef8:	f7f1 f93c 	bl	13174 <z_impl_z_log_msg_static_create>
   21efc:	46a5      	mov	sp, r4
   21efe:	e63d      	b.n	21b7c <hci_evt_encode+0x134>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   21f00:	460b      	mov	r3, r1
   21f02:	4632      	mov	r2, r6
   21f04:	4641      	mov	r1, r8
   21f06:	2000      	movs	r0, #0
   21f08:	f7fe fed6 	bl	20cb8 <le_remote_feat_complete>
		break;
   21f0c:	e636      	b.n	21b7c <hci_evt_encode+0x134>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   21f0e:	4b61      	ldr	r3, [pc, #388]	; (22094 <hci_evt_encode+0x64c>)
   21f10:	681b      	ldr	r3, [r3, #0]
   21f12:	061a      	lsls	r2, r3, #24
   21f14:	f04f 0400 	mov.w	r4, #0
   21f18:	f57f ae30 	bpl.w	21b7c <hci_evt_encode+0x134>
   21f1c:	350c      	adds	r5, #12
   21f1e:	2102      	movs	r1, #2
   21f20:	4628      	mov	r0, r5
   21f22:	f015 fda5 	bl	37a70 <net_buf_simple_add>
	hdr->evt = evt;
   21f26:	f44f 6381 	mov.w	r3, #1032	; 0x408
   21f2a:	8003      	strh	r3, [r0, #0]
   21f2c:	2104      	movs	r1, #4
   21f2e:	4628      	mov	r0, r5
   21f30:	f015 fd9e 	bl	37a70 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   21f34:	2301      	movs	r3, #1
	ep->status = err;
   21f36:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   21f38:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   21f3c:	70c3      	strb	r3, [r0, #3]
   21f3e:	e61d      	b.n	21b7c <hci_evt_encode+0x134>
		ll_rl_crpa_set(cc->peer_addr_type,
   21f40:	7fa0      	ldrb	r0, [r4, #30]
   21f42:	f104 0325 	add.w	r3, r4, #37	; 0x25
   21f46:	22ff      	movs	r2, #255	; 0xff
   21f48:	f104 011f 	add.w	r1, r4, #31
   21f4c:	f007 ff60 	bl	29e10 <ll_rl_crpa_set>
   21f50:	e5bb      	b.n	21aca <hci_evt_encode+0x82>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   21f52:	4a55      	ldr	r2, [pc, #340]	; (220a8 <hci_evt_encode+0x660>)
   21f54:	4955      	ldr	r1, [pc, #340]	; (220ac <hci_evt_encode+0x664>)
   21f56:	4856      	ldr	r0, [pc, #344]	; (220b0 <hci_evt_encode+0x668>)
   21f58:	f641 63a1 	movw	r3, #7841	; 0x1ea1
   21f5c:	f011 fa5c 	bl	33418 <assert_print>
   21f60:	4040      	eors	r0, r0
   21f62:	f380 8811 	msr	BASEPRI, r0
   21f66:	f04f 0003 	mov.w	r0, #3
   21f6a:	df02      	svc	2
   21f6c:	e5a7      	b.n	21abe <hci_evt_encode+0x76>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   21f6e:	2300      	movs	r3, #0
   21f70:	e9cd 3302 	strd	r3, r3, [sp, #8]
   21f74:	e9cd 3300 	strd	r3, r3, [sp]
   21f78:	221a      	movs	r2, #26
   21f7a:	2102      	movs	r1, #2
   21f7c:	4630      	mov	r0, r6
   21f7e:	f002 fab5 	bl	244ec <ll_conn_update>
		return;
   21f82:	e5fb      	b.n	21b7c <hci_evt_encode+0x134>
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   21f84:	f1b9 0f00 	cmp.w	r9, #0
   21f88:	d14e      	bne.n	22028 <hci_evt_encode+0x5e0>
   21f8a:	2102      	movs	r1, #2
   21f8c:	4628      	mov	r0, r5
   21f8e:	f015 fd6f 	bl	37a70 <net_buf_simple_add>
	hdr->evt = evt;
   21f92:	f241 333e 	movw	r3, #4926	; 0x133e
   21f96:	8003      	strh	r3, [r0, #0]
   21f98:	2101      	movs	r1, #1
   21f9a:	4628      	mov	r0, r5
   21f9c:	f015 fd68 	bl	37a70 <net_buf_simple_add>
	me->subevent = subevt;
   21fa0:	2301      	movs	r3, #1
   21fa2:	7003      	strb	r3, [r0, #0]
   21fa4:	2112      	movs	r1, #18
   21fa6:	4628      	mov	r0, r5
   21fa8:	f015 fd62 	bl	37a70 <net_buf_simple_add>
   21fac:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
   21fae:	2212      	movs	r2, #18
   21fb0:	4649      	mov	r1, r9
   21fb2:	f013 facb 	bl	3554c <memset>
		lecc->status = status;
   21fb6:	f884 8000 	strb.w	r8, [r4]
		return;
   21fba:	e5df      	b.n	21b7c <hci_evt_encode+0x134>
   21fbc:	2102      	movs	r1, #2
   21fbe:	4628      	mov	r0, r5
   21fc0:	f015 fd56 	bl	37a70 <net_buf_simple_add>
	hdr->evt = evt;
   21fc4:	f241 333e 	movw	r3, #4926	; 0x133e
   21fc8:	8003      	strh	r3, [r0, #0]
   21fca:	2101      	movs	r1, #1
   21fcc:	4628      	mov	r0, r5
   21fce:	f015 fd4f 	bl	37a70 <net_buf_simple_add>
	me->subevent = subevt;
   21fd2:	2301      	movs	r3, #1
   21fd4:	7003      	strb	r3, [r0, #0]
   21fd6:	2112      	movs	r1, #18
   21fd8:	4628      	mov	r0, r5
   21fda:	f015 fd49 	bl	37a70 <net_buf_simple_add>
	lecc->status = 0x00;
   21fde:	f880 8000 	strb.w	r8, [r0]
	lecc->handle = sys_cpu_to_le16(handle);
   21fe2:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = cc->role;
   21fe6:	7f63      	ldrb	r3, [r4, #29]
   21fe8:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   21fea:	7fa3      	ldrb	r3, [r4, #30]
   21fec:	f003 0301 	and.w	r3, r3, #1
   21ff0:	4605      	mov	r5, r0
   21ff2:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
   21ff4:	2206      	movs	r2, #6
   21ff6:	f104 011f 	add.w	r1, r4, #31
   21ffa:	3005      	adds	r0, #5
   21ffc:	f013 fa9b 	bl	35536 <memcpy>
	lecc->interval = sys_cpu_to_le16(cc->interval);
   22000:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   22002:	f8a5 300b 	strh.w	r3, [r5, #11]
	lecc->latency = sys_cpu_to_le16(cc->latency);
   22006:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   22008:	f8a5 300d 	strh.w	r3, [r5, #13]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   2200c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   2200e:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
   22012:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   22016:	746b      	strb	r3, [r5, #17]
   22018:	e5b0      	b.n	21b7c <hci_evt_encode+0x134>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   2201a:	462b      	mov	r3, r5
   2201c:	4632      	mov	r2, r6
   2201e:	2100      	movs	r1, #0
   22020:	201a      	movs	r0, #26
   22022:	f7fe fe49 	bl	20cb8 <le_remote_feat_complete>
		break;
   22026:	e5a9      	b.n	21b7c <hci_evt_encode+0x134>
   22028:	2102      	movs	r1, #2
   2202a:	4628      	mov	r0, r5
   2202c:	f015 fd20 	bl	37a70 <net_buf_simple_add>
	hdr->evt = evt;
   22030:	f641 733e 	movw	r3, #7998	; 0x1f3e
   22034:	8003      	strh	r3, [r0, #0]
   22036:	2101      	movs	r1, #1
   22038:	4628      	mov	r0, r5
   2203a:	f015 fd19 	bl	37a70 <net_buf_simple_add>
	me->subevent = subevt;
   2203e:	230a      	movs	r3, #10
   22040:	7003      	strb	r3, [r0, #0]
   22042:	211e      	movs	r1, #30
   22044:	4628      	mov	r0, r5
   22046:	f015 fd13 	bl	37a70 <net_buf_simple_add>
   2204a:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
   2204c:	221e      	movs	r2, #30
   2204e:	2100      	movs	r1, #0
   22050:	f013 fa7c 	bl	3554c <memset>
			leecc->status = status;
   22054:	f884 8000 	strb.w	r8, [r4]
			return;
   22058:	e590      	b.n	21b7c <hci_evt_encode+0x134>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   2205a:	4a13      	ldr	r2, [pc, #76]	; (220a8 <hci_evt_encode+0x660>)
   2205c:	4915      	ldr	r1, [pc, #84]	; (220b4 <hci_evt_encode+0x66c>)
   2205e:	4814      	ldr	r0, [pc, #80]	; (220b0 <hci_evt_encode+0x668>)
   22060:	f641 7326 	movw	r3, #7974	; 0x1f26
   22064:	f011 f9d8 	bl	33418 <assert_print>
   22068:	4040      	eors	r0, r0
   2206a:	f380 8811 	msr	BASEPRI, r0
   2206e:	f04f 0003 	mov.w	r0, #3
   22072:	df02      	svc	2
   22074:	e5a5      	b.n	21bc2 <hci_evt_encode+0x17a>
		LL_ASSERT(0);
   22076:	4a0c      	ldr	r2, [pc, #48]	; (220a8 <hci_evt_encode+0x660>)
   22078:	490f      	ldr	r1, [pc, #60]	; (220b8 <hci_evt_encode+0x670>)
   2207a:	480d      	ldr	r0, [pc, #52]	; (220b0 <hci_evt_encode+0x668>)
   2207c:	f242 037f 	movw	r3, #8319	; 0x207f
   22080:	f011 f9ca 	bl	33418 <assert_print>
   22084:	4040      	eors	r0, r0
   22086:	f380 8811 	msr	BASEPRI, r0
   2208a:	f04f 0003 	mov.w	r0, #3
   2208e:	df02      	svc	2
		return;
   22090:	e574      	b.n	21b7c <hci_evt_encode+0x134>
   22092:	bf00      	nop
   22094:	200001e8 	.word	0x200001e8
   22098:	200001e0 	.word	0x200001e0
   2209c:	0003a25c 	.word	0x0003a25c
   220a0:	0003a2a0 	.word	0x0003a2a0
   220a4:	00039588 	.word	0x00039588
   220a8:	0003a178 	.word	0x0003a178
   220ac:	0003a1b4 	.word	0x0003a1b4
   220b0:	00039f74 	.word	0x00039f74
   220b4:	0003a1f0 	.word	0x0003a1f0
   220b8:	0003a004 	.word	0x0003a004

000220bc <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN) || defined(CONFIG_BT_CTLR_ADV_ISO) || \
	defined(CONFIG_BT_CTLR_CONN_ISO)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
   220bc:	b570      	push	{r4, r5, r6, lr}
   220be:	f100 040c 	add.w	r4, r0, #12
   220c2:	460e      	mov	r6, r1
   220c4:	4620      	mov	r0, r4
   220c6:	2102      	movs	r1, #2
   220c8:	4615      	mov	r5, r2
   220ca:	f015 fcd1 	bl	37a70 <net_buf_simple_add>
	hdr->evt = evt;
   220ce:	f240 5313 	movw	r3, #1299	; 0x513
   220d2:	8003      	strh	r3, [r0, #0]
   220d4:	2105      	movs	r1, #5
   220d6:	4620      	mov	r0, r4
   220d8:	f015 fcca 	bl	37a70 <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
   220dc:	2301      	movs	r3, #1
   220de:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   220e0:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   220e4:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   220e8:	bd70      	pop	{r4, r5, r6, pc}
   220ea:	bf00      	nop

000220ec <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   220ec:	7903      	ldrb	r3, [r0, #4]
   220ee:	2b03      	cmp	r3, #3
   220f0:	d009      	beq.n	22106 <hci_get_class+0x1a>

		switch (node_rx->hdr.type) {
   220f2:	2b17      	cmp	r3, #23
   220f4:	d005      	beq.n	22102 <hci_get_class+0x16>
   220f6:	3b18      	subs	r3, #24
   220f8:	2b05      	cmp	r3, #5
   220fa:	bf8c      	ite	hi
   220fc:	2000      	movhi	r0, #0
   220fe:	2003      	movls	r0, #3
   22100:	4770      	bx	lr

#if defined(CONFIG_BT_CTLR_DF_CONN_CTE_RX)
		case NODE_RX_TYPE_CONN_IQ_SAMPLE_REPORT:
#endif /* CONFIG_BT_CTLR_DF_CONN_CTE_RX */

			return HCI_CLASS_EVT_REQUIRED;
   22102:	2001      	movs	r0, #1
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   22104:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   22106:	7f03      	ldrb	r3, [r0, #28]
   22108:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_EVT_LLCP;
   2210c:	2b03      	cmp	r3, #3
   2210e:	bf14      	ite	ne
   22110:	2005      	movne	r0, #5
   22112:	2004      	moveq	r0, #4
   22114:	4770      	bx	lr
   22116:	bf00      	nop

00022118 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
   22118:	4b0b      	ldr	r3, [pc, #44]	; (22148 <hci_init+0x30>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   2211a:	4a0c      	ldr	r2, [pc, #48]	; (2214c <hci_init+0x34>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   2211c:	490c      	ldr	r1, [pc, #48]	; (22150 <hci_init+0x38>)

void hci_init(struct k_poll_signal *signal_host_buf)
{
   2211e:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
   22120:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   22124:	f641 75ff 	movw	r5, #8191	; 0x1fff
   22128:	e9c3 4500 	strd	r4, r5, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   2212c:	2400      	movs	r4, #0
   2212e:	2500      	movs	r5, #0
   22130:	e9c2 4500 	strd	r4, r5, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   22134:	241f      	movs	r4, #31
   22136:	2500      	movs	r5, #0
   22138:	e9c1 4500 	strd	r4, r5, [r1]
	conn_count = 0U;
   2213c:	4b05      	ldr	r3, [pc, #20]	; (22154 <hci_init+0x3c>)
   2213e:	2200      	movs	r2, #0
   22140:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   22142:	bc30      	pop	{r4, r5}
	hci_recv_fifo_reset();
   22144:	f7fe bda8 	b.w	20c98 <hci_recv_fifo_reset>
   22148:	200001e8 	.word	0x200001e8
   2214c:	200016b8 	.word	0x200016b8
   22150:	200001e0 	.word	0x200001e0
   22154:	20001ef0 	.word	0x20001ef0

00022158 <bt_rand>:
#include <zephyr/logging/log.h>
LOG_MODULE_REGISTER(bt_ctlr_crypto);

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   22158:	f008 be04 	b.w	2ad64 <lll_csrand_get>

0002215c <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   2215c:	b508      	push	{r3, lr}
	LOG_DBG("key %s", bt_hex(key, 16));
	LOG_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   2215e:	2300      	movs	r3, #0
   22160:	f00a fc48 	bl	2c9f4 <ecb_encrypt>

	LOG_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   22164:	2000      	movs	r0, #0
   22166:	bd08      	pop	{r3, pc}

00022168 <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
   22168:	4801      	ldr	r0, [pc, #4]	; (22170 <ll_feat_get+0x8>)
   2216a:	2100      	movs	r1, #0
   2216c:	4770      	bx	lr
   2216e:	bf00      	nop
   22170:	0001417f 	.word	0x0001417f

00022174 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   22174:	b510      	push	{r4, lr}
   22176:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   22178:	f008 fe22 	bl	2adc0 <lll_reset>
	LL_ASSERT(!err);
   2217c:	b950      	cbnz	r0, 22194 <perform_lll_reset+0x20>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   2217e:	f009 fa35 	bl	2b5ec <lll_adv_reset>
	LL_ASSERT(!err);
   22182:	b9c0      	cbnz	r0, 221b6 <perform_lll_reset+0x42>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   22184:	f009 fedc 	bl	2bf40 <lll_conn_reset>
	LL_ASSERT(!err);
   22188:	bb30      	cbnz	r0, 221d8 <perform_lll_reset+0x64>
	z_impl_k_sem_give(sem);
   2218a:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   2218c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22190:	f00f bca0 	b.w	31ad4 <z_impl_k_sem_give>
	LL_ASSERT(!err);
   22194:	4a19      	ldr	r2, [pc, #100]	; (221fc <perform_lll_reset+0x88>)
   22196:	491a      	ldr	r1, [pc, #104]	; (22200 <perform_lll_reset+0x8c>)
   22198:	481a      	ldr	r0, [pc, #104]	; (22204 <perform_lll_reset+0x90>)
   2219a:	f640 03ea 	movw	r3, #2282	; 0x8ea
   2219e:	f011 f93b 	bl	33418 <assert_print>
   221a2:	4040      	eors	r0, r0
   221a4:	f380 8811 	msr	BASEPRI, r0
   221a8:	f04f 0003 	mov.w	r0, #3
   221ac:	df02      	svc	2
	err = lll_adv_reset();
   221ae:	f009 fa1d 	bl	2b5ec <lll_adv_reset>
	LL_ASSERT(!err);
   221b2:	2800      	cmp	r0, #0
   221b4:	d0e6      	beq.n	22184 <perform_lll_reset+0x10>
   221b6:	4a11      	ldr	r2, [pc, #68]	; (221fc <perform_lll_reset+0x88>)
   221b8:	4911      	ldr	r1, [pc, #68]	; (22200 <perform_lll_reset+0x8c>)
   221ba:	4812      	ldr	r0, [pc, #72]	; (22204 <perform_lll_reset+0x90>)
   221bc:	f640 03ef 	movw	r3, #2287	; 0x8ef
   221c0:	f011 f92a 	bl	33418 <assert_print>
   221c4:	4040      	eors	r0, r0
   221c6:	f380 8811 	msr	BASEPRI, r0
   221ca:	f04f 0003 	mov.w	r0, #3
   221ce:	df02      	svc	2
	err = lll_conn_reset();
   221d0:	f009 feb6 	bl	2bf40 <lll_conn_reset>
	LL_ASSERT(!err);
   221d4:	2800      	cmp	r0, #0
   221d6:	d0d8      	beq.n	2218a <perform_lll_reset+0x16>
   221d8:	4a08      	ldr	r2, [pc, #32]	; (221fc <perform_lll_reset+0x88>)
   221da:	4909      	ldr	r1, [pc, #36]	; (22200 <perform_lll_reset+0x8c>)
   221dc:	4809      	ldr	r0, [pc, #36]	; (22204 <perform_lll_reset+0x90>)
   221de:	f640 03fb 	movw	r3, #2299	; 0x8fb
   221e2:	f011 f919 	bl	33418 <assert_print>
   221e6:	4040      	eors	r0, r0
   221e8:	f380 8811 	msr	BASEPRI, r0
   221ec:	f04f 0003 	mov.w	r0, #3
   221f0:	df02      	svc	2
   221f2:	4620      	mov	r0, r4
}
   221f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   221f8:	f00f bc6c 	b.w	31ad4 <z_impl_k_sem_give>
   221fc:	0003a300 	.word	0x0003a300
   22200:	0003a33c 	.word	0x0003a33c
   22204:	00039f74 	.word	0x00039f74

00022208 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   22208:	6008      	str	r0, [r1, #0]
   2220a:	4801      	ldr	r0, [pc, #4]	; (22210 <ull_ticker_status_give+0x8>)
   2220c:	f00f bc62 	b.w	31ad4 <z_impl_k_sem_give>
   22210:	200021f0 	.word	0x200021f0

00022214 <disabled_cb>:
   22214:	f00f bc5e 	b.w	31ad4 <z_impl_k_sem_give>

00022218 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN) || defined(CONFIG_BT_CTLR_ADV_ISO)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   22218:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;
	uint8_t next;

	next = *first;
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   2221c:	4d2a      	ldr	r5, [pc, #168]	; (222c8 <tx_cmplt_get+0xb0>)
	next = *first;
   2221e:	780c      	ldrb	r4, [r1, #0]
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   22220:	78ab      	ldrb	r3, [r5, #2]
{
   22222:	468a      	mov	sl, r1
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   22224:	7929      	ldrb	r1, [r5, #4]
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
		*idx = first;
   22226:	429c      	cmp	r4, r3
   22228:	bf28      	it	cs
   2222a:	460c      	movcs	r4, r1
	}

	if (*idx == last) {
   2222c:	42a2      	cmp	r2, r4
   2222e:	7829      	ldrb	r1, [r5, #0]
   22230:	d042      	beq.n	222b8 <tx_cmplt_get+0xa0>
	i = *idx + 1;
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   22232:	fb14 f101 	smulbb	r1, r4, r1
   22236:	f105 0708 	add.w	r7, r5, #8
	i = *idx + 1;
   2223a:	3401      	adds	r4, #1
   2223c:	b2e4      	uxtb	r4, r4
		i = 0U;
   2223e:	42a3      	cmp	r3, r4
   22240:	bf08      	it	eq
   22242:	2400      	moveq	r4, #0
	p = (void *)(fifo + (*idx) * size);
   22244:	187b      	adds	r3, r7, r1
				    &next);
	if (!tx) {
		return 0;
	}

	*handle = tx->handle;
   22246:	5a79      	ldrh	r1, [r7, r1]
   22248:	8001      	strh	r1, [r0, #0]
	cmplt = 0U;
   2224a:	4693      	mov	fp, r2
   2224c:	4681      	mov	r9, r0
   2224e:	2600      	movs	r6, #0
			     (p->ll_id == PDU_DATA_LLID_DATA_START ||
			      p->ll_id == PDU_DATA_LLID_DATA_CONTINUE)) ||
			    (!IS_NODE_TX_PTR(tx_node) &&
			     IS_NODE_TX_DATA(tx_node))) {
				/* data packet, hence count num cmplt */
				NODE_TX_DATA_SET(tx->node);
   22250:	f04f 0801 	mov.w	r8, #1
   22254:	e01c      	b.n	22290 <tx_cmplt_get+0x78>
			    (!IS_NODE_TX_PTR(tx_node) &&
   22256:	2801      	cmp	r0, #1
   22258:	d02b      	beq.n	222b2 <tx_cmplt_get+0x9a>
   2225a:	2212      	movs	r2, #18
   2225c:	605a      	str	r2, [r3, #4]
#if defined(CONFIG_BT_CTLR_ADV_ISO) || \
	defined(CONFIG_BT_CTLR_CONN_ISO)
next_ack:
#endif /* CONFIG_BT_CTLR_ADV_ISO || CONFIG_BT_CTLR_CONN_ISO */

		*first = next;
   2225e:	f88a 4000 	strb.w	r4, [sl]
		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   22262:	78a8      	ldrb	r0, [r5, #2]
   22264:	792b      	ldrb	r3, [r5, #4]
   22266:	7829      	ldrb	r1, [r5, #0]
	if (*idx >= count) {
   22268:	42a0      	cmp	r0, r4
   2226a:	bf88      	it	hi
   2226c:	4623      	movhi	r3, r4
	if (*idx == last) {
   2226e:	459b      	cmp	fp, r3
   22270:	d023      	beq.n	222ba <tx_cmplt_get+0xa2>
	p = (void *)(fifo + (*idx) * size);
   22272:	fb13 f101 	smulbb	r1, r3, r1
	i = *idx + 1;
   22276:	3301      	adds	r3, #1
   22278:	b2dc      	uxtb	r4, r3
		i = 0U;
   2227a:	42a0      	cmp	r0, r4
   2227c:	bf08      	it	eq
   2227e:	2400      	moveq	r4, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, &next);
	} while (tx && tx->handle == *handle);
   22280:	f837 c001 	ldrh.w	ip, [r7, r1]
   22284:	f8b9 0000 	ldrh.w	r0, [r9]
   22288:	4584      	cmp	ip, r0
	p = (void *)(fifo + (*idx) * size);
   2228a:	eb07 0301 	add.w	r3, r7, r1
   2228e:	d114      	bne.n	222ba <tx_cmplt_get+0xa2>
			tx_node = tx->node;
   22290:	6858      	ldr	r0, [r3, #4]
			if (!tx_node ||
   22292:	b160      	cbz	r0, 222ae <tx_cmplt_get+0x96>
   22294:	28ff      	cmp	r0, #255	; 0xff
   22296:	d9de      	bls.n	22256 <tx_cmplt_get+0x3e>
			     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   22298:	7901      	ldrb	r1, [r0, #4]
   2229a:	f001 0103 	and.w	r1, r1, #3
			    (IS_NODE_TX_PTR(tx_node) &&
   2229e:	3901      	subs	r1, #1
   222a0:	2901      	cmp	r1, #1
   222a2:	d90d      	bls.n	222c0 <tx_cmplt_get+0xa8>
				NODE_TX_CTRL_SET(tx->node);
   222a4:	2112      	movs	r1, #18
   222a6:	6059      	str	r1, [r3, #4]
				ll_tx_mem_release(tx_node);
   222a8:	f002 f8ce 	bl	24448 <ll_tx_mem_release>
   222ac:	e7d7      	b.n	2225e <tx_cmplt_get+0x46>
				NODE_TX_DATA_SET(tx->node);
   222ae:	f8c3 8004 	str.w	r8, [r3, #4]
				cmplt++;
   222b2:	3601      	adds	r6, #1
   222b4:	b2f6      	uxtb	r6, r6
			if (IS_NODE_TX_PTR(tx_node)) {
   222b6:	e7d2      	b.n	2225e <tx_cmplt_get+0x46>
		return 0;
   222b8:	2600      	movs	r6, #0

	return cmplt;
}
   222ba:	4630      	mov	r0, r6
   222bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cmplt++;
   222c0:	3601      	adds	r6, #1
   222c2:	b2f6      	uxtb	r6, r6
				NODE_TX_DATA_SET(tx->node);
   222c4:	2101      	movs	r1, #1
				cmplt++;
   222c6:	e7ee      	b.n	222a6 <tx_cmplt_get+0x8e>
   222c8:	200003cc 	.word	0x200003cc

000222cc <rx_replenish>:
{
   222cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (max > mem_link_rx.quota_pdu) {
   222d0:	4f3d      	ldr	r7, [pc, #244]	; (223c8 <rx_replenish+0xfc>)
   222d2:	883b      	ldrh	r3, [r7, #0]
   222d4:	4298      	cmp	r0, r3
   222d6:	d968      	bls.n	223aa <rx_replenish+0xde>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   222d8:	f013 06ff 	ands.w	r6, r3, #255	; 0xff
   222dc:	d02c      	beq.n	22338 <rx_replenish+0x6c>
   222de:	4d3b      	ldr	r5, [pc, #236]	; (223cc <rx_replenish+0x100>)
		link = mem_acquire(&mem_link_rx.free);
   222e0:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 223d0 <rx_replenish+0x104>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   222e4:	796c      	ldrb	r4, [r5, #5]
		rx = mem_acquire(&mem_pdu_rx.free);
   222e6:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 223d4 <rx_replenish+0x108>
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   222ea:	f105 0a08 	add.w	sl, r5, #8
	if (last == count) {
   222ee:	78aa      	ldrb	r2, [r5, #2]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   222f0:	792b      	ldrb	r3, [r5, #4]
	last = last + 1;
   222f2:	3401      	adds	r4, #1
   222f4:	b2e4      	uxtb	r4, r4
		last = 0U;
   222f6:	42a2      	cmp	r2, r4
   222f8:	bf08      	it	eq
   222fa:	2400      	moveq	r4, #0
	if (last == first) {
   222fc:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
   222fe:	4640      	mov	r0, r8
   22300:	d01c      	beq.n	2233c <rx_replenish+0x70>
   22302:	f7fd f83b 	bl	1f37c <mem_acquire>
   22306:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   22308:	4648      	mov	r0, r9
		if (!link) {
   2230a:	f1bb 0f00 	cmp.w	fp, #0
   2230e:	d013      	beq.n	22338 <rx_replenish+0x6c>
		rx = mem_acquire(&mem_pdu_rx.free);
   22310:	f7fd f834 	bl	1f37c <mem_acquire>
		if (!rx) {
   22314:	2800      	cmp	r0, #0
   22316:	d04a      	beq.n	223ae <rx_replenish+0xe2>
		rx->link = link;
   22318:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   2231c:	796b      	ldrb	r3, [r5, #5]
   2231e:	782a      	ldrb	r2, [r5, #0]
   22320:	fb13 f302 	smulbb	r3, r3, r2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   22324:	f84a 0003 	str.w	r0, [sl, r3]
	mem_link_rx.quota_pdu += delta;
   22328:	883b      	ldrh	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   2232a:	716c      	strb	r4, [r5, #5]
		max--;
   2232c:	3e01      	subs	r6, #1
	mem_link_rx.quota_pdu += delta;
   2232e:	3b01      	subs	r3, #1
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   22330:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
   22334:	803b      	strh	r3, [r7, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   22336:	d1da      	bne.n	222ee <rx_replenish+0x22>
}
   22338:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (mem_link_rx.quota_pdu &&
   2233c:	883b      	ldrh	r3, [r7, #0]
   2233e:	2b00      	cmp	r3, #0
   22340:	d0fa      	beq.n	22338 <rx_replenish+0x6c>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   22342:	f8df 9094 	ldr.w	r9, [pc, #148]	; 223d8 <rx_replenish+0x10c>
		link = mem_acquire(&mem_link_rx.free);
   22346:	4d22      	ldr	r5, [pc, #136]	; (223d0 <rx_replenish+0x104>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   22348:	f899 4005 	ldrb.w	r4, [r9, #5]
		rx = mem_acquire(&mem_pdu_rx.free);
   2234c:	4e21      	ldr	r6, [pc, #132]	; (223d4 <rx_replenish+0x108>)
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   2234e:	f109 0808 	add.w	r8, r9, #8
	if (last == count) {
   22352:	f899 2002 	ldrb.w	r2, [r9, #2]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   22356:	f899 3004 	ldrb.w	r3, [r9, #4]
	last = last + 1;
   2235a:	3401      	adds	r4, #1
   2235c:	b2e4      	uxtb	r4, r4
		last = 0U;
   2235e:	42a2      	cmp	r2, r4
   22360:	bf08      	it	eq
   22362:	2400      	moveq	r4, #0
	if (last == first) {
   22364:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
   22366:	4628      	mov	r0, r5
   22368:	d0e6      	beq.n	22338 <rx_replenish+0x6c>
   2236a:	f7fd f807 	bl	1f37c <mem_acquire>
   2236e:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   22370:	4630      	mov	r0, r6
		if (!link) {
   22372:	f1ba 0f00 	cmp.w	sl, #0
   22376:	d0df      	beq.n	22338 <rx_replenish+0x6c>
		rx = mem_acquire(&mem_pdu_rx.free);
   22378:	f7fd f800 	bl	1f37c <mem_acquire>
		link->mem = NULL;
   2237c:	2300      	movs	r3, #0
		if (!rx) {
   2237e:	b1e0      	cbz	r0, 223ba <rx_replenish+0xee>
		link->mem = NULL;
   22380:	f8ca 3004 	str.w	r3, [sl, #4]
		rx->link = link;
   22384:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   22388:	f899 3005 	ldrb.w	r3, [r9, #5]
   2238c:	f899 2000 	ldrb.w	r2, [r9]
   22390:	fb13 f302 	smulbb	r3, r3, r2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   22394:	f848 0003 	str.w	r0, [r8, r3]
	mem_link_rx.quota_pdu += delta;
   22398:	883b      	ldrh	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   2239a:	f889 4005 	strb.w	r4, [r9, #5]
   2239e:	3b01      	subs	r3, #1
   223a0:	b29b      	uxth	r3, r3
   223a2:	803b      	strh	r3, [r7, #0]
	while (mem_link_rx.quota_pdu &&
   223a4:	2b00      	cmp	r3, #0
   223a6:	d1d4      	bne.n	22352 <rx_replenish+0x86>
   223a8:	e7c6      	b.n	22338 <rx_replenish+0x6c>
   223aa:	4606      	mov	r6, r0
   223ac:	e797      	b.n	222de <rx_replenish+0x12>
	mem_release(link, &mem_link_rx.free);
   223ae:	4658      	mov	r0, fp
   223b0:	4907      	ldr	r1, [pc, #28]	; (223d0 <rx_replenish+0x104>)
}
   223b2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mem_release(link, &mem_link_rx.free);
   223b6:	f7fc bffd 	b.w	1f3b4 <mem_release>
   223ba:	4650      	mov	r0, sl
   223bc:	4904      	ldr	r1, [pc, #16]	; (223d0 <rx_replenish+0x104>)
}
   223be:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mem_release(link, &mem_link_rx.free);
   223c2:	f7fc bff7 	b.w	1f3b4 <mem_release>
   223c6:	bf00      	nop
   223c8:	20001f44 	.word	0x20001f44
   223cc:	20000408 	.word	0x20000408
   223d0:	20001f48 	.word	0x20001f48
   223d4:	20001f9c 	.word	0x20001f9c
   223d8:	200003f4 	.word	0x200003f4

000223dc <ull_done>:
}
#endif /* CONFIG_BT_CONN || CONFIG_BT_CTLR_ADV_ISO */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
   223dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   223e0:	4e3c      	ldr	r6, [pc, #240]	; (224d4 <ull_done+0xf8>)
	void *release;

	/* Decrement prepare reference if ULL will not resume */
	ull_hdr = done->param;
	if (ull_hdr) {
		LL_ASSERT(ull_ref_get(ull_hdr));
   223e2:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 224d8 <ull_done+0xfc>
   223e6:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 224dc <ull_done+0x100>
{
   223ea:	b083      	sub	sp, #12
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   223ec:	e9d6 0100 	ldrd	r0, r1, [r6]
   223f0:	aa01      	add	r2, sp, #4
   223f2:	f7fd f833 	bl	1f45c <memq_peek>
		if (link) {
   223f6:	4604      	mov	r4, r0
   223f8:	2800      	cmp	r0, #0
   223fa:	d03e      	beq.n	2247a <ull_done+0x9e>
			(void)memq_dequeue(memq_ull_done.tail,
   223fc:	6870      	ldr	r0, [r6, #4]
   223fe:	2200      	movs	r2, #0
   22400:	4631      	mov	r1, r6
   22402:	f7fd f833 	bl	1f46c <memq_dequeue>
			rx_demux_event_done(link, done);
   22406:	9f01      	ldr	r7, [sp, #4]
	ull_hdr = done->param;
   22408:	69fd      	ldr	r5, [r7, #28]
	if (ull_hdr) {
   2240a:	b135      	cbz	r5, 2241a <ull_done+0x3e>
	return hdr->ref;
   2240c:	782b      	ldrb	r3, [r5, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
   2240e:	2b00      	cmp	r3, #0
   22410:	d052      	beq.n	224b8 <ull_done+0xdc>
	return hdr->ref--;
   22412:	782b      	ldrb	r3, [r5, #0]
   22414:	3b01      	subs	r3, #1
   22416:	b2db      	uxtb	r3, r3
   22418:	702b      	strb	r3, [r5, #0]
		ull_ref_dec(ull_hdr);
	}

	/* Process role dependent event done */
	switch (done->extra.type) {
   2241a:	f897 3020 	ldrb.w	r3, [r7, #32]
   2241e:	b123      	cbz	r3, 2242a <ull_done+0x4e>
   22420:	2b01      	cmp	r3, #1
   22422:	d13b      	bne.n	2249c <ull_done+0xc0>
#if defined(CONFIG_BT_CONN)
	case EVENT_DONE_EXTRA_TYPE_CONN:
		ull_conn_done(done);
   22424:	4638      	mov	r0, r7
   22426:	f002 fbc1 	bl	24bac <ull_conn_done>
		break;
	}

	/* Release done */
	done->extra.type = 0U;
	release = RXFIFO_RELEASE(done, link, done);
   2242a:	4a2d      	ldr	r2, [pc, #180]	; (224e0 <ull_done+0x104>)
	last = last + 1;
   2242c:	7953      	ldrb	r3, [r2, #5]
	if (last == count) {
   2242e:	f892 c002 	ldrb.w	ip, [r2, #2]
   22432:	7910      	ldrb	r0, [r2, #4]
	last = last + 1;
   22434:	3301      	adds	r3, #1
	done->extra.type = 0U;
   22436:	2100      	movs	r1, #0
   22438:	b2db      	uxtb	r3, r3
		last = 0U;
   2243a:	459c      	cmp	ip, r3
   2243c:	bf08      	it	eq
   2243e:	460b      	moveq	r3, r1
	if (last == first) {
   22440:	4298      	cmp	r0, r3
   22442:	f887 1020 	strb.w	r1, [r7, #32]
	release = RXFIFO_RELEASE(done, link, done);
   22446:	7811      	ldrb	r1, [r2, #0]
   22448:	d01a      	beq.n	22480 <ull_done+0xa4>

	if (!mfifo_enqueue_idx_get(n, f, *l, &idx)) {
		return NULL;
	}

	rx->link = link;
   2244a:	603c      	str	r4, [r7, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   2244c:	7950      	ldrb	r0, [r2, #5]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   2244e:	fb00 2101 	mla	r1, r0, r1, r2
   22452:	608f      	str	r7, [r1, #8]
	*last = idx; /* Commit: Update write index */
   22454:	7153      	strb	r3, [r2, #5]
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   22456:	2d00      	cmp	r5, #0
   22458:	d0c8      	beq.n	223ec <ull_done+0x10>
	return hdr->ref;
   2245a:	782b      	ldrb	r3, [r5, #0]
   2245c:	2b00      	cmp	r3, #0
   2245e:	d1c5      	bne.n	223ec <ull_done+0x10>
   22460:	696b      	ldr	r3, [r5, #20]
   22462:	2b00      	cmp	r3, #0
   22464:	d0c2      	beq.n	223ec <ull_done+0x10>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   22466:	69a8      	ldr	r0, [r5, #24]
   22468:	4798      	blx	r3
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   2246a:	e9d6 0100 	ldrd	r0, r1, [r6]
   2246e:	aa01      	add	r2, sp, #4
   22470:	f7fc fff4 	bl	1f45c <memq_peek>
		if (link) {
   22474:	4604      	mov	r4, r0
   22476:	2800      	cmp	r0, #0
   22478:	d1c0      	bne.n	223fc <ull_done+0x20>
}
   2247a:	b003      	add	sp, #12
   2247c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(release == done);
   22480:	4918      	ldr	r1, [pc, #96]	; (224e4 <ull_done+0x108>)
   22482:	4819      	ldr	r0, [pc, #100]	; (224e8 <ull_done+0x10c>)
   22484:	f640 33b7 	movw	r3, #2999	; 0xbb7
   22488:	4642      	mov	r2, r8
   2248a:	f010 ffc5 	bl	33418 <assert_print>
   2248e:	4040      	eors	r0, r0
   22490:	f380 8811 	msr	BASEPRI, r0
   22494:	f04f 0003 	mov.w	r0, #3
   22498:	df02      	svc	2
   2249a:	e7dc      	b.n	22456 <ull_done+0x7a>
		LL_ASSERT(0);
   2249c:	4913      	ldr	r1, [pc, #76]	; (224ec <ull_done+0x110>)
   2249e:	4812      	ldr	r0, [pc, #72]	; (224e8 <ull_done+0x10c>)
   224a0:	f44f 633b 	mov.w	r3, #2992	; 0xbb0
   224a4:	4642      	mov	r2, r8
   224a6:	f010 ffb7 	bl	33418 <assert_print>
   224aa:	4040      	eors	r0, r0
   224ac:	f380 8811 	msr	BASEPRI, r0
   224b0:	f04f 0003 	mov.w	r0, #3
   224b4:	df02      	svc	2
		break;
   224b6:	e7b8      	b.n	2242a <ull_done+0x4e>
		LL_ASSERT(ull_ref_get(ull_hdr));
   224b8:	480b      	ldr	r0, [pc, #44]	; (224e8 <ull_done+0x10c>)
   224ba:	f640 3359 	movw	r3, #2905	; 0xb59
   224be:	4642      	mov	r2, r8
   224c0:	4649      	mov	r1, r9
   224c2:	f010 ffa9 	bl	33418 <assert_print>
   224c6:	4040      	eors	r0, r0
   224c8:	f380 8811 	msr	BASEPRI, r0
   224cc:	f04f 0003 	mov.w	r0, #3
   224d0:	df02      	svc	2
   224d2:	e79e      	b.n	22412 <ull_done+0x36>
   224d4:	20001f2c 	.word	0x20001f2c
   224d8:	0003a300 	.word	0x0003a300
   224dc:	0003a344 	.word	0x0003a344
   224e0:	2000050c 	.word	0x2000050c
   224e4:	0003a35c 	.word	0x0003a35c
   224e8:	00039f74 	.word	0x00039f74
   224ec:	0003a004 	.word	0x0003a004

000224f0 <rx_demux>:
{
   224f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   224f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 226a4 <rx_demux+0x1b4>
	k_sem_give(sem_recv);
   224f8:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 226a8 <rx_demux+0x1b8>
			LL_ASSERT(rx);
   224fc:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 226ac <rx_demux+0x1bc>
   22500:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 226b0 <rx_demux+0x1c0>
{
   22504:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   22506:	e9d8 0100 	ldrd	r0, r1, [r8]
   2250a:	aa03      	add	r2, sp, #12
   2250c:	f7fc ffa6 	bl	1f45c <memq_peek>
		if (link) {
   22510:	4605      	mov	r5, r0
   22512:	2800      	cmp	r0, #0
   22514:	d035      	beq.n	22582 <rx_demux+0x92>
			LL_ASSERT(rx);
   22516:	9b03      	ldr	r3, [sp, #12]
   22518:	2b00      	cmp	r3, #0
   2251a:	f000 80a6 	beq.w	2266a <rx_demux+0x17a>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   2251e:	7818      	ldrb	r0, [r3, #0]
   22520:	aa04      	add	r2, sp, #16
   22522:	a902      	add	r1, sp, #8
   22524:	f002 fd3e 	bl	24fa4 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   22528:	4604      	mov	r4, r0
   2252a:	2800      	cmp	r0, #0
   2252c:	d055      	beq.n	225da <rx_demux+0xea>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   2252e:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   22532:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   22536:	780f      	ldrb	r7, [r1, #0]
   22538:	f8ad 200a 	strh.w	r2, [sp, #10]
   2253c:	ae05      	add	r6, sp, #20
   2253e:	9305      	str	r3, [sp, #20]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   22540:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   22544:	f002 fd48 	bl	24fd8 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   22548:	4621      	mov	r1, r4
   2254a:	9a05      	ldr	r2, [sp, #20]
   2254c:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   22550:	f002 fd8a 	bl	25068 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   22554:	4620      	mov	r0, r4
   22556:	f002 fcfd 	bl	24f54 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   2255a:	4632      	mov	r2, r6
   2255c:	4629      	mov	r1, r5
   2255e:	4638      	mov	r0, r7
   22560:	f002 fd20 	bl	24fa4 <ull_conn_ack_by_last_peek>
	} while (link);
   22564:	4604      	mov	r4, r0
   22566:	2800      	cmp	r0, #0
   22568:	d1ec      	bne.n	22544 <rx_demux+0x54>
	k_sem_give(sem_recv);
   2256a:	f8d9 0000 	ldr.w	r0, [r9]
   2256e:	f00f fab1 	bl	31ad4 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   22572:	e9d8 0100 	ldrd	r0, r1, [r8]
   22576:	aa03      	add	r2, sp, #12
   22578:	f7fc ff70 	bl	1f45c <memq_peek>
		if (link) {
   2257c:	4605      	mov	r5, r0
   2257e:	2800      	cmp	r0, #0
   22580:	d1c9      	bne.n	22516 <rx_demux+0x26>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   22582:	aa04      	add	r2, sp, #16
   22584:	a902      	add	r1, sp, #8
   22586:	f10d 0007 	add.w	r0, sp, #7
   2258a:	f002 fcef 	bl	24f6c <ull_conn_ack_peek>
			if (link) {
   2258e:	4604      	mov	r4, r0
   22590:	2800      	cmp	r0, #0
   22592:	d067      	beq.n	22664 <rx_demux+0x174>
				rx_demux_conn_tx_ack(ack_last, handle,
   22594:	9b04      	ldr	r3, [sp, #16]
   22596:	9305      	str	r3, [sp, #20]
   22598:	f89d 7007 	ldrb.w	r7, [sp, #7]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   2259c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   225a0:	f8ad 300a 	strh.w	r3, [sp, #10]
   225a4:	ae05      	add	r6, sp, #20
   225a6:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   225aa:	f002 fd15 	bl	24fd8 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   225ae:	4621      	mov	r1, r4
   225b0:	9a05      	ldr	r2, [sp, #20]
   225b2:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   225b6:	f002 fd57 	bl	25068 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   225ba:	4620      	mov	r0, r4
   225bc:	f002 fcca 	bl	24f54 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   225c0:	4632      	mov	r2, r6
   225c2:	4629      	mov	r1, r5
   225c4:	4638      	mov	r0, r7
   225c6:	f002 fced 	bl	24fa4 <ull_conn_ack_by_last_peek>
	} while (link);
   225ca:	4604      	mov	r4, r0
   225cc:	2800      	cmp	r0, #0
   225ce:	d1ec      	bne.n	225aa <rx_demux+0xba>
	k_sem_give(sem_recv);
   225d0:	f8d9 0000 	ldr.w	r0, [r9]
   225d4:	f00f fa7e 	bl	31ad4 <z_impl_k_sem_give>
	} while (link);
   225d8:	e7cb      	b.n	22572 <rx_demux+0x82>
				nack = rx_demux_rx(link, rx);
   225da:	9b03      	ldr	r3, [sp, #12]
   225dc:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   225de:	791b      	ldrb	r3, [r3, #4]
   225e0:	3b01      	subs	r3, #1
   225e2:	2b17      	cmp	r3, #23
   225e4:	d80d      	bhi.n	22602 <rx_demux+0x112>
   225e6:	e8df f003 	tbb	[pc, r3]
   225ea:	0c1a      	.short	0x0c1a
   225ec:	0c0c0c38 	.word	0x0c0c0c38
   225f0:	0c0c0c0c 	.word	0x0c0c0c0c
   225f4:	0c0c0c0c 	.word	0x0c0c0c0c
   225f8:	0c0c0c0c 	.word	0x0c0c0c0c
   225fc:	0c0c0c0c 	.word	0x0c0c0c0c
   22600:	1a2d      	.short	0x1a2d
		LL_ASSERT(0);
   22602:	4a2a      	ldr	r2, [pc, #168]	; (226ac <rx_demux+0x1bc>)
   22604:	492b      	ldr	r1, [pc, #172]	; (226b4 <rx_demux+0x1c4>)
   22606:	482c      	ldr	r0, [pc, #176]	; (226b8 <rx_demux+0x1c8>)
   22608:	f640 3346 	movw	r3, #2886	; 0xb46
   2260c:	f010 ff04 	bl	33418 <assert_print>
   22610:	4040      	eors	r0, r0
   22612:	f380 8811 	msr	BASEPRI, r0
   22616:	f04f 0003 	mov.w	r0, #3
   2261a:	df02      	svc	2
			if (nack) {
   2261c:	e773      	b.n	22506 <rx_demux+0x16>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   2261e:	4921      	ldr	r1, [pc, #132]	; (226a4 <rx_demux+0x1b4>)
   22620:	f8d8 0004 	ldr.w	r0, [r8, #4]
   22624:	2200      	movs	r2, #0
   22626:	f7fc ff21 	bl	1f46c <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   2262a:	4b24      	ldr	r3, [pc, #144]	; (226bc <rx_demux+0x1cc>)
		ll_rx_put_sched(link, rx);
   2262c:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   2262e:	795b      	ldrb	r3, [r3, #5]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   22630:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
   22632:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   22634:	4a22      	ldr	r2, [pc, #136]	; (226c0 <rx_demux+0x1d0>)
   22636:	f7fc ff07 	bl	1f448 <memq_enqueue>
	k_sem_give(sem_recv);
   2263a:	4b1b      	ldr	r3, [pc, #108]	; (226a8 <rx_demux+0x1b8>)
   2263c:	6818      	ldr	r0, [r3, #0]
   2263e:	f00f fa49 	bl	31ad4 <z_impl_k_sem_give>
			if (nack) {
   22642:	e760      	b.n	22506 <rx_demux+0x16>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   22644:	4917      	ldr	r1, [pc, #92]	; (226a4 <rx_demux+0x1b4>)
   22646:	f8d8 0004 	ldr.w	r0, [r8, #4]
   2264a:	2200      	movs	r2, #0
   2264c:	f7fc ff0e 	bl	1f46c <memq_dequeue>
		ull_conn_setup(link, rx);
   22650:	9905      	ldr	r1, [sp, #20]
   22652:	4628      	mov	r0, r5
   22654:	f002 f95a 	bl	2490c <ull_conn_setup>
			if (nack) {
   22658:	e755      	b.n	22506 <rx_demux+0x16>
		nack = ull_conn_rx(link, (void *)&rx);
   2265a:	a905      	add	r1, sp, #20
   2265c:	4628      	mov	r0, r5
   2265e:	f002 f97d 	bl	2495c <ull_conn_rx>
		if (nack) {
   22662:	b188      	cbz	r0, 22688 <rx_demux+0x198>
}
   22664:	b007      	add	sp, #28
   22666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
   2266a:	4813      	ldr	r0, [pc, #76]	; (226b8 <rx_demux+0x1c8>)
   2266c:	f640 1398 	movw	r3, #2456	; 0x998
   22670:	465a      	mov	r2, fp
   22672:	4651      	mov	r1, sl
   22674:	f010 fed0 	bl	33418 <assert_print>
   22678:	4040      	eors	r0, r0
   2267a:	f380 8811 	msr	BASEPRI, r0
   2267e:	f04f 0003 	mov.w	r0, #3
   22682:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   22684:	9b03      	ldr	r3, [sp, #12]
   22686:	e74a      	b.n	2251e <rx_demux+0x2e>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   22688:	4906      	ldr	r1, [pc, #24]	; (226a4 <rx_demux+0x1b4>)
   2268a:	4602      	mov	r2, r0
   2268c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   22690:	f7fc feec 	bl	1f46c <memq_dequeue>
		if (rx) {
   22694:	9905      	ldr	r1, [sp, #20]
   22696:	2900      	cmp	r1, #0
   22698:	f43f af35 	beq.w	22506 <rx_demux+0x16>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   2269c:	4b07      	ldr	r3, [pc, #28]	; (226bc <rx_demux+0x1cc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   2269e:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
   226a0:	795b      	ldrb	r3, [r3, #5]
   226a2:	e7c6      	b.n	22632 <rx_demux+0x142>
   226a4:	20001f3c 	.word	0x20001f3c
   226a8:	200021ec 	.word	0x200021ec
   226ac:	0003a300 	.word	0x0003a300
   226b0:	0003a36c 	.word	0x0003a36c
   226b4:	0003a004 	.word	0x0003a004
   226b8:	00039f74 	.word	0x00039f74
   226bc:	200003cc 	.word	0x200003cc
   226c0:	20001f38 	.word	0x20001f38

000226c4 <ll_rx_get>:
{
   226c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   226c8:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 22798 <ll_rx_get+0xd4>
   226cc:	4f33      	ldr	r7, [pc, #204]	; (2279c <ll_rx_get+0xd8>)
{
   226ce:	b082      	sub	sp, #8
   226d0:	4680      	mov	r8, r0
   226d2:	4689      	mov	r9, r1
			f = mfifo_tx_ack.f;
   226d4:	f1aa 0504 	sub.w	r5, sl, #4
	*node_rx = NULL;
   226d8:	2300      	movs	r3, #0
   226da:	f8c8 3000 	str.w	r3, [r8]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   226de:	e9d7 0100 	ldrd	r0, r1, [r7]
   226e2:	aa01      	add	r2, sp, #4
   226e4:	f7fc feba 	bl	1f45c <memq_peek>
	if (link) {
   226e8:	4606      	mov	r6, r0
   226ea:	2800      	cmp	r0, #0
   226ec:	d042      	beq.n	22774 <ll_rx_get+0xb0>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   226ee:	9b01      	ldr	r3, [sp, #4]
   226f0:	4651      	mov	r1, sl
   226f2:	781a      	ldrb	r2, [r3, #0]
   226f4:	4648      	mov	r0, r9
   226f6:	f7ff fd8f 	bl	22218 <tx_cmplt_get>
		if (!cmplt) {
   226fa:	4603      	mov	r3, r0
   226fc:	2800      	cmp	r0, #0
   226fe:	d140      	bne.n	22782 <ll_rx_get+0xbe>
			f = mfifo_tx_ack.f;
   22700:	792a      	ldrb	r2, [r5, #4]
   22702:	f88d 2001 	strb.w	r2, [sp, #1]
				cmplt_curr = tx_cmplt_get(&h, &f,
   22706:	796a      	ldrb	r2, [r5, #5]
   22708:	f10d 0101 	add.w	r1, sp, #1
   2270c:	f10d 0002 	add.w	r0, sp, #2
   22710:	461c      	mov	r4, r3
   22712:	f7ff fd81 	bl	22218 <tx_cmplt_get>
   22716:	ea44 0200 	orr.w	r2, r4, r0
			} while ((cmplt_prev != 0U) ||
   2271a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
				cmplt_curr = tx_cmplt_get(&h, &f,
   2271e:	4603      	mov	r3, r0
			} while ((cmplt_prev != 0U) ||
   22720:	d1f1      	bne.n	22706 <ll_rx_get+0x42>
			} else if (rx->type == NODE_RX_TYPE_RELEASE) {
   22722:	9b01      	ldr	r3, [sp, #4]
   22724:	7919      	ldrb	r1, [r3, #4]
   22726:	2901      	cmp	r1, #1
   22728:	d12f      	bne.n	2278a <ll_rx_get+0xc6>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   2272a:	4c1d      	ldr	r4, [pc, #116]	; (227a0 <ll_rx_get+0xdc>)
	(void)memq_dequeue(memq_ll_rx.tail,
   2272c:	6878      	ldr	r0, [r7, #4]
   2272e:	4639      	mov	r1, r7
   22730:	f7fc fe9c 	bl	1f46c <memq_dequeue>
	mem_release(link, &mem_link_rx.free);
   22734:	1d21      	adds	r1, r4, #4
   22736:	4630      	mov	r0, r6
   22738:	f7fc fe3c 	bl	1f3b4 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   2273c:	8823      	ldrh	r3, [r4, #0]
   2273e:	2b05      	cmp	r3, #5
   22740:	d809      	bhi.n	22756 <ll_rx_get+0x92>
	mem_release(node_rx, &mem_pdu_rx.free);
   22742:	9801      	ldr	r0, [sp, #4]
   22744:	4917      	ldr	r1, [pc, #92]	; (227a4 <ll_rx_get+0xe0>)
	mem_link_rx.quota_pdu += delta;
   22746:	3301      	adds	r3, #1
   22748:	8023      	strh	r3, [r4, #0]
	mem_release(node_rx, &mem_pdu_rx.free);
   2274a:	f7fc fe33 	bl	1f3b4 <mem_release>
	rx_replenish(1U);
   2274e:	2001      	movs	r0, #1
   22750:	f7ff fdbc 	bl	222cc <rx_replenish>
				goto ll_rx_get_again;
   22754:	e7c0      	b.n	226d8 <ll_rx_get+0x14>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   22756:	4a14      	ldr	r2, [pc, #80]	; (227a8 <ll_rx_get+0xe4>)
   22758:	4914      	ldr	r1, [pc, #80]	; (227ac <ll_rx_get+0xe8>)
   2275a:	4815      	ldr	r0, [pc, #84]	; (227b0 <ll_rx_get+0xec>)
   2275c:	f240 638b 	movw	r3, #1675	; 0x68b
   22760:	f010 fe5a 	bl	33418 <assert_print>
   22764:	4040      	eors	r0, r0
   22766:	f380 8811 	msr	BASEPRI, r0
   2276a:	f04f 0003 	mov.w	r0, #3
   2276e:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   22770:	8823      	ldrh	r3, [r4, #0]
   22772:	e7e6      	b.n	22742 <ll_rx_get+0x7e>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   22774:	490f      	ldr	r1, [pc, #60]	; (227b4 <ll_rx_get+0xf0>)
   22776:	4648      	mov	r0, r9
   22778:	794a      	ldrb	r2, [r1, #5]
   2277a:	3104      	adds	r1, #4
   2277c:	f7ff fd4c 	bl	22218 <tx_cmplt_get>
   22780:	4603      	mov	r3, r0
}
   22782:	4618      	mov	r0, r3
   22784:	b002      	add	sp, #8
   22786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*node_rx = rx;
   2278a:	f8c8 3000 	str.w	r3, [r8]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   2278e:	4613      	mov	r3, r2
}
   22790:	4618      	mov	r0, r3
   22792:	b002      	add	sp, #8
   22794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22798:	200003d0 	.word	0x200003d0
   2279c:	20001f34 	.word	0x20001f34
   227a0:	20001f44 	.word	0x20001f44
   227a4:	20001f9c 	.word	0x20001f9c
   227a8:	0003a300 	.word	0x0003a300
   227ac:	0003a370 	.word	0x0003a370
   227b0:	00039f74 	.word	0x00039f74
   227b4:	200003cc 	.word	0x200003cc

000227b8 <ll_rx_dequeue>:
{
   227b8:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   227ba:	495d      	ldr	r1, [pc, #372]	; (22930 <ll_rx_dequeue+0x178>)
{
   227bc:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   227be:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   227c0:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   227c2:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   227c4:	aa01      	add	r2, sp, #4
   227c6:	f7fc fe51 	bl	1f46c <memq_dequeue>
	LL_ASSERT(link);
   227ca:	4604      	mov	r4, r0
   227cc:	2800      	cmp	r0, #0
   227ce:	d063      	beq.n	22898 <ll_rx_dequeue+0xe0>
	mem_release(link, &mem_link_rx.free);
   227d0:	4958      	ldr	r1, [pc, #352]	; (22934 <ll_rx_dequeue+0x17c>)
   227d2:	4620      	mov	r0, r4
   227d4:	f7fc fdee 	bl	1f3b4 <mem_release>
	switch (rx->type) {
   227d8:	9a01      	ldr	r2, [sp, #4]
   227da:	7913      	ldrb	r3, [r2, #4]
   227dc:	2b1d      	cmp	r3, #29
   227de:	d810      	bhi.n	22802 <ll_rx_dequeue+0x4a>
   227e0:	e8df f003 	tbb	[pc, r3]
   227e4:	1e0f0f1e 	.word	0x1e0f0f1e
   227e8:	0f0f0f0f 	.word	0x0f0f0f0f
   227ec:	0f0f0f0f 	.word	0x0f0f0f0f
   227f0:	0f0f0f0f 	.word	0x0f0f0f0f
   227f4:	0f0f0f0f 	.word	0x0f0f0f0f
   227f8:	2f0f0f0f 	.word	0x2f0f0f0f
   227fc:	1e1e1e1e 	.word	0x1e1e1e1e
   22800:	1e1e      	.short	0x1e1e
		LL_ASSERT(0);
   22802:	4a4d      	ldr	r2, [pc, #308]	; (22938 <ll_rx_dequeue+0x180>)
   22804:	494d      	ldr	r1, [pc, #308]	; (2293c <ll_rx_dequeue+0x184>)
   22806:	484e      	ldr	r0, [pc, #312]	; (22940 <ll_rx_dequeue+0x188>)
   22808:	f240 5343 	movw	r3, #1347	; 0x543
   2280c:	f010 fe04 	bl	33418 <assert_print>
   22810:	4040      	eors	r0, r0
   22812:	f380 8811 	msr	BASEPRI, r0
   22816:	f04f 0003 	mov.w	r0, #3
   2281a:	df02      	svc	2
}
   2281c:	b002      	add	sp, #8
   2281e:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   22820:	2b00      	cmp	r3, #0
   22822:	d1fb      	bne.n	2281c <ll_rx_dequeue+0x64>
   22824:	4a44      	ldr	r2, [pc, #272]	; (22938 <ll_rx_dequeue+0x180>)
   22826:	4947      	ldr	r1, [pc, #284]	; (22944 <ll_rx_dequeue+0x18c>)
   22828:	4845      	ldr	r0, [pc, #276]	; (22940 <ll_rx_dequeue+0x188>)
   2282a:	f240 533f 	movw	r3, #1343	; 0x53f
   2282e:	f010 fdf3 	bl	33418 <assert_print>
   22832:	4040      	eors	r0, r0
   22834:	f380 8811 	msr	BASEPRI, r0
   22838:	f04f 0003 	mov.w	r0, #3
   2283c:	df02      	svc	2
}
   2283e:	b002      	add	sp, #8
   22840:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   22842:	7f13      	ldrb	r3, [r2, #28]
   22844:	2b3c      	cmp	r3, #60	; 0x3c
   22846:	d035      	beq.n	228b4 <ll_rx_dequeue+0xfc>
   22848:	7f53      	ldrb	r3, [r2, #29]
   2284a:	b1bb      	cbz	r3, 2287c <ll_rx_dequeue+0xc4>
			adv = HDR_LLL2ULL(lll);
   2284c:	6893      	ldr	r3, [r2, #8]
   2284e:	681c      	ldr	r4, [r3, #0]
				if (adv->node_rx_cc_free) {
   22850:	6e60      	ldr	r0, [r4, #100]	; 0x64
   22852:	b120      	cbz	r0, 2285e <ll_rx_dequeue+0xa6>
					adv->node_rx_cc_free = NULL;
   22854:	2300      	movs	r3, #0
	mem_release(node_rx, &mem_pdu_rx.free);
   22856:	493c      	ldr	r1, [pc, #240]	; (22948 <ll_rx_dequeue+0x190>)
					adv->node_rx_cc_free = NULL;
   22858:	6663      	str	r3, [r4, #100]	; 0x64
	mem_release(node_rx, &mem_pdu_rx.free);
   2285a:	f7fc fdab 	bl	1f3b4 <mem_release>
			adv->is_enabled = 0U;
   2285e:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   22862:	f36f 0300 	bfc	r3, #0, #1
   22866:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
			      ull_adv_is_enabled(0));
   2286a:	2000      	movs	r0, #0
   2286c:	f001 fab4 	bl	23dd8 <ull_adv_is_enabled>
			if (!bm) {
   22870:	2800      	cmp	r0, #0
   22872:	d1d3      	bne.n	2281c <ll_rx_dequeue+0x64>
				ull_filter_adv_scan_state_cb(0);
   22874:	f007 fc60 	bl	2a138 <ull_filter_adv_scan_state_cb>
}
   22878:	b002      	add	sp, #8
   2287a:	bd70      	pop	{r4, r5, r6, pc}
			LL_ASSERT(0);
   2287c:	4a2e      	ldr	r2, [pc, #184]	; (22938 <ll_rx_dequeue+0x180>)
   2287e:	492f      	ldr	r1, [pc, #188]	; (2293c <ll_rx_dequeue+0x184>)
   22880:	482f      	ldr	r0, [pc, #188]	; (22940 <ll_rx_dequeue+0x188>)
   22882:	f44f 6399 	mov.w	r3, #1224	; 0x4c8
   22886:	f010 fdc7 	bl	33418 <assert_print>
   2288a:	4040      	eors	r0, r0
   2288c:	f380 8811 	msr	BASEPRI, r0
   22890:	f04f 0003 	mov.w	r0, #3
   22894:	df02      	svc	2
   22896:	e7e8      	b.n	2286a <ll_rx_dequeue+0xb2>
	LL_ASSERT(link);
   22898:	4a27      	ldr	r2, [pc, #156]	; (22938 <ll_rx_dequeue+0x180>)
   2289a:	492c      	ldr	r1, [pc, #176]	; (2294c <ll_rx_dequeue+0x194>)
   2289c:	4828      	ldr	r0, [pc, #160]	; (22940 <ll_rx_dequeue+0x188>)
   2289e:	f240 430b 	movw	r3, #1035	; 0x40b
   228a2:	f010 fdb9 	bl	33418 <assert_print>
   228a6:	4040      	eors	r0, r0
   228a8:	f380 8811 	msr	BASEPRI, r0
   228ac:	f04f 0003 	mov.w	r0, #3
   228b0:	df02      	svc	2
   228b2:	e78d      	b.n	227d0 <ll_rx_dequeue+0x18>
			lll = ftr->param;
   228b4:	6896      	ldr	r6, [r2, #8]
			adv = HDR_LLL2ULL(lll);
   228b6:	e9d6 4500 	ldrd	r4, r5, [r6]
				LL_ASSERT(conn_lll);
   228ba:	b1ed      	cbz	r5, 228f8 <ll_rx_dequeue+0x140>
				lll->conn = NULL;
   228bc:	2300      	movs	r3, #0
   228be:	6073      	str	r3, [r6, #4]
				LL_ASSERT(!conn_lll->link_tx_free);
   228c0:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   228c2:	b163      	cbz	r3, 228de <ll_rx_dequeue+0x126>
   228c4:	4a1c      	ldr	r2, [pc, #112]	; (22938 <ll_rx_dequeue+0x180>)
   228c6:	4922      	ldr	r1, [pc, #136]	; (22950 <ll_rx_dequeue+0x198>)
   228c8:	481d      	ldr	r0, [pc, #116]	; (22940 <ll_rx_dequeue+0x188>)
   228ca:	f240 4384 	movw	r3, #1156	; 0x484
   228ce:	f010 fda3 	bl	33418 <assert_print>
   228d2:	4040      	eors	r0, r0
   228d4:	f380 8811 	msr	BASEPRI, r0
   228d8:	f04f 0003 	mov.w	r0, #3
   228dc:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   228de:	f105 0160 	add.w	r1, r5, #96	; 0x60
   228e2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   228e6:	f7fc fda5 	bl	1f434 <memq_deinit>
				LL_ASSERT(link);
   228ea:	4606      	mov	r6, r0
   228ec:	b190      	cbz	r0, 22914 <ll_rx_dequeue+0x15c>
				ll_conn_release(conn);
   228ee:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
   228f0:	66ee      	str	r6, [r5, #108]	; 0x6c
				ll_conn_release(conn);
   228f2:	f001 fd7b 	bl	243ec <ll_conn_release>
   228f6:	e7b2      	b.n	2285e <ll_rx_dequeue+0xa6>
				LL_ASSERT(conn_lll);
   228f8:	4a0f      	ldr	r2, [pc, #60]	; (22938 <ll_rx_dequeue+0x180>)
   228fa:	4916      	ldr	r1, [pc, #88]	; (22954 <ll_rx_dequeue+0x19c>)
   228fc:	4810      	ldr	r0, [pc, #64]	; (22940 <ll_rx_dequeue+0x188>)
   228fe:	f240 4381 	movw	r3, #1153	; 0x481
   22902:	f010 fd89 	bl	33418 <assert_print>
   22906:	4040      	eors	r0, r0
   22908:	f380 8811 	msr	BASEPRI, r0
   2290c:	f04f 0003 	mov.w	r0, #3
   22910:	df02      	svc	2
   22912:	e7d3      	b.n	228bc <ll_rx_dequeue+0x104>
				LL_ASSERT(link);
   22914:	4a08      	ldr	r2, [pc, #32]	; (22938 <ll_rx_dequeue+0x180>)
   22916:	490d      	ldr	r1, [pc, #52]	; (2294c <ll_rx_dequeue+0x194>)
   22918:	4809      	ldr	r0, [pc, #36]	; (22940 <ll_rx_dequeue+0x188>)
   2291a:	f240 4387 	movw	r3, #1159	; 0x487
   2291e:	f010 fd7b 	bl	33418 <assert_print>
   22922:	4040      	eors	r0, r0
   22924:	f380 8811 	msr	BASEPRI, r0
   22928:	f04f 0003 	mov.w	r0, #3
   2292c:	df02      	svc	2
   2292e:	e7de      	b.n	228ee <ll_rx_dequeue+0x136>
   22930:	20001f34 	.word	0x20001f34
   22934:	20001f48 	.word	0x20001f48
   22938:	0003a300 	.word	0x0003a300
   2293c:	0003a004 	.word	0x0003a004
   22940:	00039f74 	.word	0x00039f74
   22944:	0003a3d4 	.word	0x0003a3d4
   22948:	20001f9c 	.word	0x20001f9c
   2294c:	0003a6a0 	.word	0x0003a6a0
   22950:	0003a3bc 	.word	0x0003a3bc
   22954:	0003a3b0 	.word	0x0003a3b0

00022958 <ll_rx_mem_release>:
{
   22958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
   2295c:	6804      	ldr	r4, [r0, #0]
{
   2295e:	4680      	mov	r8, r0
	while (rx) {
   22960:	b344      	cbz	r4, 229b4 <ll_rx_mem_release+0x5c>
			LL_ASSERT(0);
   22962:	4f57      	ldr	r7, [pc, #348]	; (22ac0 <ll_rx_mem_release+0x168>)
   22964:	f8df 915c 	ldr.w	r9, [pc, #348]	; 22ac4 <ll_rx_mem_release+0x16c>
   22968:	4e57      	ldr	r6, [pc, #348]	; (22ac8 <ll_rx_mem_release+0x170>)
		rx = rx->next;
   2296a:	4625      	mov	r5, r4
   2296c:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   2296e:	792b      	ldrb	r3, [r5, #4]
   22970:	2b1d      	cmp	r3, #29
   22972:	d810      	bhi.n	22996 <ll_rx_mem_release+0x3e>
   22974:	e8df f003 	tbb	[pc, r3]
   22978:	380f0f38 	.word	0x380f0f38
   2297c:	0f0f0f0f 	.word	0x0f0f0f0f
   22980:	0f0f0f0f 	.word	0x0f0f0f0f
   22984:	0f0f0f0f 	.word	0x0f0f0f0f
   22988:	0f0f0f0f 	.word	0x0f0f0f0f
   2298c:	260f0f0f 	.word	0x260f0f0f
   22990:	38383856 	.word	0x38383856
   22994:	3838      	.short	0x3838
			LL_ASSERT(0);
   22996:	f240 637f 	movw	r3, #1663	; 0x67f
   2299a:	463a      	mov	r2, r7
   2299c:	4649      	mov	r1, r9
   2299e:	4630      	mov	r0, r6
   229a0:	f010 fd3a 	bl	33418 <assert_print>
   229a4:	4040      	eors	r0, r0
   229a6:	f380 8811 	msr	BASEPRI, r0
   229aa:	f04f 0003 	mov.w	r0, #3
   229ae:	df02      	svc	2
	while (rx) {
   229b0:	2c00      	cmp	r4, #0
   229b2:	d1da      	bne.n	2296a <ll_rx_mem_release+0x12>
	*node_rx = rx;
   229b4:	2300      	movs	r3, #0
   229b6:	f8c8 3000 	str.w	r3, [r8]
}
   229ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_replenish(UINT8_MAX);
   229be:	20ff      	movs	r0, #255	; 0xff
   229c0:	f7ff bc84 	b.w	222cc <rx_replenish>
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   229c4:	7f2b      	ldrb	r3, [r5, #28]
   229c6:	2b3c      	cmp	r3, #60	; 0x3c
   229c8:	d063      	beq.n	22a92 <ll_rx_mem_release+0x13a>
				LL_ASSERT(!cc->status);
   229ca:	b1db      	cbz	r3, 22a04 <ll_rx_mem_release+0xac>
   229cc:	4a3c      	ldr	r2, [pc, #240]	; (22ac0 <ll_rx_mem_release+0x168>)
   229ce:	493f      	ldr	r1, [pc, #252]	; (22acc <ll_rx_mem_release+0x174>)
   229d0:	483d      	ldr	r0, [pc, #244]	; (22ac8 <ll_rx_mem_release+0x170>)
   229d2:	f240 53a7 	movw	r3, #1447	; 0x5a7
   229d6:	f010 fd1f 	bl	33418 <assert_print>
   229da:	4040      	eors	r0, r0
   229dc:	f380 8811 	msr	BASEPRI, r0
   229e0:	f04f 0003 	mov.w	r0, #3
   229e4:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   229e6:	792b      	ldrb	r3, [r5, #4]
   229e8:	b963      	cbnz	r3, 22a04 <ll_rx_mem_release+0xac>
   229ea:	4939      	ldr	r1, [pc, #228]	; (22ad0 <ll_rx_mem_release+0x178>)
   229ec:	f240 53fd 	movw	r3, #1533	; 0x5fd
   229f0:	463a      	mov	r2, r7
   229f2:	4630      	mov	r0, r6
   229f4:	f010 fd10 	bl	33418 <assert_print>
   229f8:	4040      	eors	r0, r0
   229fa:	f380 8811 	msr	BASEPRI, r0
   229fe:	f04f 0003 	mov.w	r0, #3
   22a02:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   22a04:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 22ad4 <ll_rx_mem_release+0x17c>
   22a08:	f8ba 3000 	ldrh.w	r3, [sl]
   22a0c:	2b05      	cmp	r3, #5
   22a0e:	d830      	bhi.n	22a72 <ll_rx_mem_release+0x11a>
	mem_link_rx.quota_pdu += delta;
   22a10:	3301      	adds	r3, #1
	mem_release(node_rx, &mem_pdu_rx.free);
   22a12:	4931      	ldr	r1, [pc, #196]	; (22ad8 <ll_rx_mem_release+0x180>)
	mem_link_rx.quota_pdu += delta;
   22a14:	f8aa 3000 	strh.w	r3, [sl]
	mem_release(node_rx, &mem_pdu_rx.free);
   22a18:	4628      	mov	r0, r5
   22a1a:	f7fc fccb 	bl	1f3b4 <mem_release>
	while (rx) {
   22a1e:	2c00      	cmp	r4, #0
   22a20:	d1a3      	bne.n	2296a <ll_rx_mem_release+0x12>
   22a22:	e7c7      	b.n	229b4 <ll_rx_mem_release+0x5c>
			if (IS_ACL_HANDLE(rx_free->handle)) {
   22a24:	88e8      	ldrh	r0, [r5, #6]
   22a26:	2800      	cmp	r0, #0
   22a28:	d1c2      	bne.n	229b0 <ll_rx_mem_release+0x58>
				conn = ll_conn_get(rx_free->handle);
   22a2a:	f001 fced 	bl	24408 <ll_conn_get>
				LL_ASSERT(!conn->lll.link_tx_free);
   22a2e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
				conn = ll_conn_get(rx_free->handle);
   22a32:	4605      	mov	r5, r0
				LL_ASSERT(!conn->lll.link_tx_free);
   22a34:	b163      	cbz	r3, 22a50 <ll_rx_mem_release+0xf8>
   22a36:	4a22      	ldr	r2, [pc, #136]	; (22ac0 <ll_rx_mem_release+0x168>)
   22a38:	4928      	ldr	r1, [pc, #160]	; (22adc <ll_rx_mem_release+0x184>)
   22a3a:	4823      	ldr	r0, [pc, #140]	; (22ac8 <ll_rx_mem_release+0x170>)
   22a3c:	f240 636e 	movw	r3, #1646	; 0x66e
   22a40:	f010 fcea 	bl	33418 <assert_print>
   22a44:	4040      	eors	r0, r0
   22a46:	f380 8811 	msr	BASEPRI, r0
   22a4a:	f04f 0003 	mov.w	r0, #3
   22a4e:	df02      	svc	2
				link = memq_deinit(&conn->lll.memq_tx.head,
   22a50:	f105 017c 	add.w	r1, r5, #124	; 0x7c
   22a54:	f105 0078 	add.w	r0, r5, #120	; 0x78
   22a58:	f7fc fcec 	bl	1f434 <memq_deinit>
				LL_ASSERT(link);
   22a5c:	4682      	mov	sl, r0
   22a5e:	b300      	cbz	r0, 22aa2 <ll_rx_mem_release+0x14a>
				conn->lll.link_tx_free = link;
   22a60:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
				ll_conn_release(conn);
   22a64:	4628      	mov	r0, r5
   22a66:	f001 fcc1 	bl	243ec <ll_conn_release>
	while (rx) {
   22a6a:	2c00      	cmp	r4, #0
   22a6c:	f47f af7d 	bne.w	2296a <ll_rx_mem_release+0x12>
   22a70:	e7a0      	b.n	229b4 <ll_rx_mem_release+0x5c>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   22a72:	491b      	ldr	r1, [pc, #108]	; (22ae0 <ll_rx_mem_release+0x188>)
   22a74:	f240 638b 	movw	r3, #1675	; 0x68b
   22a78:	463a      	mov	r2, r7
   22a7a:	4630      	mov	r0, r6
   22a7c:	f010 fccc 	bl	33418 <assert_print>
   22a80:	4040      	eors	r0, r0
   22a82:	f380 8811 	msr	BASEPRI, r0
   22a86:	f04f 0003 	mov.w	r0, #3
   22a8a:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   22a8c:	f8ba 3000 	ldrh.w	r3, [sl]
   22a90:	e7be      	b.n	22a10 <ll_rx_mem_release+0xb8>
	mem_release(node_rx, &mem_pdu_rx.free);
   22a92:	4911      	ldr	r1, [pc, #68]	; (22ad8 <ll_rx_mem_release+0x180>)
   22a94:	4628      	mov	r0, r5
   22a96:	f7fc fc8d 	bl	1f3b4 <mem_release>
	while (rx) {
   22a9a:	2c00      	cmp	r4, #0
   22a9c:	f47f af65 	bne.w	2296a <ll_rx_mem_release+0x12>
   22aa0:	e788      	b.n	229b4 <ll_rx_mem_release+0x5c>
				LL_ASSERT(link);
   22aa2:	4a07      	ldr	r2, [pc, #28]	; (22ac0 <ll_rx_mem_release+0x168>)
   22aa4:	490f      	ldr	r1, [pc, #60]	; (22ae4 <ll_rx_mem_release+0x18c>)
   22aa6:	4808      	ldr	r0, [pc, #32]	; (22ac8 <ll_rx_mem_release+0x170>)
   22aa8:	f240 6371 	movw	r3, #1649	; 0x671
   22aac:	f010 fcb4 	bl	33418 <assert_print>
   22ab0:	4040      	eors	r0, r0
   22ab2:	f380 8811 	msr	BASEPRI, r0
   22ab6:	f04f 0003 	mov.w	r0, #3
   22aba:	df02      	svc	2
   22abc:	e7d0      	b.n	22a60 <ll_rx_mem_release+0x108>
   22abe:	bf00      	nop
   22ac0:	0003a300 	.word	0x0003a300
   22ac4:	0003a004 	.word	0x0003a004
   22ac8:	00039f74 	.word	0x00039f74
   22acc:	0003a3f4 	.word	0x0003a3f4
   22ad0:	0003a400 	.word	0x0003a400
   22ad4:	20001f44 	.word	0x20001f44
   22ad8:	20001f9c 	.word	0x20001f9c
   22adc:	0003a424 	.word	0x0003a424
   22ae0:	0003a370 	.word	0x0003a370
   22ae4:	0003a6a0 	.word	0x0003a6a0

00022ae8 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   22ae8:	4801      	ldr	r0, [pc, #4]	; (22af0 <ll_rx_link_alloc+0x8>)
   22aea:	f7fc bc47 	b.w	1f37c <mem_acquire>
   22aee:	bf00      	nop
   22af0:	20001f48 	.word	0x20001f48

00022af4 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   22af4:	4901      	ldr	r1, [pc, #4]	; (22afc <ll_rx_link_release+0x8>)
   22af6:	f7fc bc5d 	b.w	1f3b4 <mem_release>
   22afa:	bf00      	nop
   22afc:	20001f48 	.word	0x20001f48

00022b00 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   22b00:	4801      	ldr	r0, [pc, #4]	; (22b08 <ll_rx_alloc+0x8>)
   22b02:	f7fc bc3b 	b.w	1f37c <mem_acquire>
   22b06:	bf00      	nop
   22b08:	20001f9c 	.word	0x20001f9c

00022b0c <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   22b0c:	4901      	ldr	r1, [pc, #4]	; (22b14 <ll_rx_release+0x8>)
   22b0e:	f7fc bc51 	b.w	1f3b4 <mem_release>
   22b12:	bf00      	nop
   22b14:	20001f9c 	.word	0x20001f9c

00022b18 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   22b18:	4b02      	ldr	r3, [pc, #8]	; (22b24 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   22b1a:	4a03      	ldr	r2, [pc, #12]	; (22b28 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   22b1c:	795b      	ldrb	r3, [r3, #5]
   22b1e:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   22b20:	f7fc bc92 	b.w	1f448 <memq_enqueue>
   22b24:	200003cc 	.word	0x200003cc
   22b28:	20001f38 	.word	0x20001f38

00022b2c <ll_rx_put_sched>:
{
   22b2c:	b508      	push	{r3, lr}
	rx_hdr->ack_last = mfifo_tx_ack.l;
   22b2e:	4b06      	ldr	r3, [pc, #24]	; (22b48 <ll_rx_put_sched+0x1c>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   22b30:	4a06      	ldr	r2, [pc, #24]	; (22b4c <ll_rx_put_sched+0x20>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   22b32:	795b      	ldrb	r3, [r3, #5]
   22b34:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   22b36:	f7fc fc87 	bl	1f448 <memq_enqueue>
	k_sem_give(sem_recv);
   22b3a:	4b05      	ldr	r3, [pc, #20]	; (22b50 <ll_rx_put_sched+0x24>)
   22b3c:	6818      	ldr	r0, [r3, #0]
}
   22b3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   22b42:	f00e bfc7 	b.w	31ad4 <z_impl_k_sem_give>
   22b46:	bf00      	nop
   22b48:	200003cc 	.word	0x200003cc
   22b4c:	20001f38 	.word	0x20001f38
   22b50:	200021ec 	.word	0x200021ec

00022b54 <ll_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   22b54:	490e      	ldr	r1, [pc, #56]	; (22b90 <ll_pdu_rx_alloc_peek+0x3c>)
   22b56:	790b      	ldrb	r3, [r1, #4]
   22b58:	794a      	ldrb	r2, [r1, #5]
	if (last >= first) {
   22b5a:	4293      	cmp	r3, r2
   22b5c:	d80d      	bhi.n	22b7a <ll_pdu_rx_alloc_peek+0x26>
		return last - first;
   22b5e:	eba2 0c03 	sub.w	ip, r2, r3
   22b62:	fa5f fc8c 	uxtb.w	ip, ip
   22b66:	4560      	cmp	r0, ip
   22b68:	d80f      	bhi.n	22b8a <ll_pdu_rx_alloc_peek+0x36>
	if (first == last) {
   22b6a:	4293      	cmp	r3, r2
   22b6c:	d00d      	beq.n	22b8a <ll_pdu_rx_alloc_peek+0x36>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   22b6e:	7809      	ldrb	r1, [r1, #0]
	return *((void **)(fifo + first * size));
   22b70:	4a08      	ldr	r2, [pc, #32]	; (22b94 <ll_pdu_rx_alloc_peek+0x40>)
   22b72:	fb13 f301 	smulbb	r3, r3, r1
   22b76:	58d0      	ldr	r0, [r2, r3]
   22b78:	4770      	bx	lr
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   22b7a:	f8b1 c002 	ldrh.w	ip, [r1, #2]
		return count - first + last;
   22b7e:	ebac 0c03 	sub.w	ip, ip, r3
   22b82:	4462      	add	r2, ip
   22b84:	b2d2      	uxtb	r2, r2
   22b86:	4290      	cmp	r0, r2
   22b88:	d9f1      	bls.n	22b6e <ll_pdu_rx_alloc_peek+0x1a>
		return NULL;
   22b8a:	2000      	movs	r0, #0
}
   22b8c:	4770      	bx	lr
   22b8e:	bf00      	nop
   22b90:	200003f4 	.word	0x200003f4
   22b94:	200003fc 	.word	0x200003fc

00022b98 <ll_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   22b98:	4b09      	ldr	r3, [pc, #36]	; (22bc0 <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   22b9a:	7919      	ldrb	r1, [r3, #4]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   22b9c:	795a      	ldrb	r2, [r3, #5]
   22b9e:	7818      	ldrb	r0, [r3, #0]
   22ba0:	f893 c002 	ldrb.w	ip, [r3, #2]
   22ba4:	428a      	cmp	r2, r1
   22ba6:	d009      	beq.n	22bbc <ll_pdu_rx_alloc+0x24>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   22ba8:	1c4a      	adds	r2, r1, #1
	mem = *((void **)(fifo + _first * size));
   22baa:	fb01 3000 	mla	r0, r1, r0, r3
	_first += 1U;
   22bae:	b2d2      	uxtb	r2, r2
	if (_first == count) {
		_first = 0U;
   22bb0:	4594      	cmp	ip, r2
   22bb2:	bf08      	it	eq
   22bb4:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   22bb6:	6880      	ldr	r0, [r0, #8]
	}

	*first = _first; /* Write back read-index */
   22bb8:	711a      	strb	r2, [r3, #4]

	return mem;
   22bba:	4770      	bx	lr
		return NULL;
   22bbc:	2000      	movs	r0, #0
}
   22bbe:	4770      	bx	lr
   22bc0:	200003f4 	.word	0x200003f4

00022bc4 <ll_tx_ack_put>:
{
   22bc4:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   22bc6:	4c14      	ldr	r4, [pc, #80]	; (22c18 <ll_tx_ack_put+0x54>)
   22bc8:	7962      	ldrb	r2, [r4, #5]
	if (last == count) {
   22bca:	f894 e002 	ldrb.w	lr, [r4, #2]
   22bce:	f894 c004 	ldrb.w	ip, [r4, #4]
   22bd2:	7825      	ldrb	r5, [r4, #0]
	last = last + 1;
   22bd4:	1c53      	adds	r3, r2, #1
   22bd6:	b2db      	uxtb	r3, r3
		last = 0U;
   22bd8:	459e      	cmp	lr, r3
   22bda:	bf08      	it	eq
   22bdc:	2300      	moveq	r3, #0
	if (last == first) {
   22bde:	459c      	cmp	ip, r3
   22be0:	d009      	beq.n	22bf6 <ll_tx_ack_put+0x32>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   22be2:	fb12 f205 	smulbb	r2, r2, r5
   22be6:	f104 0c08 	add.w	ip, r4, #8
	tx->handle = handle;
   22bea:	f82c 0002 	strh.w	r0, [ip, r2]
   22bee:	4462      	add	r2, ip
	tx->node = node_tx;
   22bf0:	6051      	str	r1, [r2, #4]
	*last = idx; /* Commit: Update write index */
   22bf2:	7163      	strb	r3, [r4, #5]
}
   22bf4:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(tx);
   22bf6:	4a09      	ldr	r2, [pc, #36]	; (22c1c <ll_tx_ack_put+0x58>)
   22bf8:	4909      	ldr	r1, [pc, #36]	; (22c20 <ll_tx_ack_put+0x5c>)
   22bfa:	480a      	ldr	r0, [pc, #40]	; (22c24 <ll_tx_ack_put+0x60>)
   22bfc:	f240 63e5 	movw	r3, #1765	; 0x6e5
   22c00:	f010 fc0a 	bl	33418 <assert_print>
   22c04:	4040      	eors	r0, r0
   22c06:	f380 8811 	msr	BASEPRI, r0
   22c0a:	f04f 0003 	mov.w	r0, #3
   22c0e:	df02      	svc	2
	tx->handle = handle;
   22c10:	2300      	movs	r3, #0
   22c12:	801b      	strh	r3, [r3, #0]
   22c14:	deff      	udf	#255	; 0xff
   22c16:	bf00      	nop
   22c18:	200003cc 	.word	0x200003cc
   22c1c:	0003a300 	.word	0x0003a300
   22c20:	0003a694 	.word	0x0003a694
   22c24:	00039f74 	.word	0x00039f74

00022c28 <ll_timeslice_ticker_id_get>:
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   22c28:	2200      	movs	r2, #0
	*ticker_id = (TICKER_NODES - FLASH_TICKER_NODES);
   22c2a:	2304      	movs	r3, #4
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   22c2c:	7002      	strb	r2, [r0, #0]
	*ticker_id = (TICKER_NODES - FLASH_TICKER_NODES);
   22c2e:	700b      	strb	r3, [r1, #0]
}
   22c30:	4770      	bx	lr
   22c32:	bf00      	nop

00022c34 <ll_radio_state_abort>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   22c34:	2200      	movs	r2, #0
{
   22c36:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   22c38:	4611      	mov	r1, r2
   22c3a:	4b0a      	ldr	r3, [pc, #40]	; (22c64 <ll_radio_state_abort+0x30>)
   22c3c:	2001      	movs	r0, #1
   22c3e:	f7fc fc79 	bl	1f534 <mayfly_enqueue>
	LL_ASSERT(!ret);
   22c42:	b900      	cbnz	r0, 22c46 <ll_radio_state_abort+0x12>
}
   22c44:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   22c46:	4a08      	ldr	r2, [pc, #32]	; (22c68 <ll_radio_state_abort+0x34>)
   22c48:	4908      	ldr	r1, [pc, #32]	; (22c6c <ll_radio_state_abort+0x38>)
   22c4a:	4809      	ldr	r0, [pc, #36]	; (22c70 <ll_radio_state_abort+0x3c>)
   22c4c:	f240 63fd 	movw	r3, #1789	; 0x6fd
   22c50:	f010 fbe2 	bl	33418 <assert_print>
   22c54:	4040      	eors	r0, r0
   22c56:	f380 8811 	msr	BASEPRI, r0
   22c5a:	f04f 0003 	mov.w	r0, #3
   22c5e:	df02      	svc	2
}
   22c60:	bd08      	pop	{r3, pc}
   22c62:	bf00      	nop
   22c64:	200003ac 	.word	0x200003ac
   22c68:	0003a300 	.word	0x0003a300
   22c6c:	0003a43c 	.word	0x0003a43c
   22c70:	00039f74 	.word	0x00039f74

00022c74 <ull_ticker_status_take>:
	if (ret == TICKER_STATUS_BUSY) {
   22c74:	f030 0302 	bics.w	r3, r0, #2
{
   22c78:	b510      	push	{r4, lr}
   22c7a:	460c      	mov	r4, r1
	if (ret == TICKER_STATUS_BUSY) {
   22c7c:	d002      	beq.n	22c84 <ull_ticker_status_take+0x10>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   22c7e:	680b      	ldr	r3, [r1, #0]
   22c80:	2b02      	cmp	r3, #2
   22c82:	d008      	beq.n	22c96 <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
   22c84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22c88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22c8c:	4809      	ldr	r0, [pc, #36]	; (22cb4 <ull_ticker_status_take+0x40>)
   22c8e:	f00e ff47 	bl	31b20 <z_impl_k_sem_take>
	return *ret_cb;
   22c92:	6820      	ldr	r0, [r4, #0]
}
   22c94:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   22c96:	4a08      	ldr	r2, [pc, #32]	; (22cb8 <ull_ticker_status_take+0x44>)
   22c98:	4908      	ldr	r1, [pc, #32]	; (22cbc <ull_ticker_status_take+0x48>)
   22c9a:	4809      	ldr	r0, [pc, #36]	; (22cc0 <ull_ticker_status_take+0x4c>)
   22c9c:	f240 7319 	movw	r3, #1817	; 0x719
   22ca0:	f010 fbba 	bl	33418 <assert_print>
   22ca4:	4040      	eors	r0, r0
   22ca6:	f380 8811 	msr	BASEPRI, r0
   22caa:	f04f 0003 	mov.w	r0, #3
   22cae:	df02      	svc	2
   22cb0:	e7e8      	b.n	22c84 <ull_ticker_status_take+0x10>
   22cb2:	bf00      	nop
   22cb4:	200021f0 	.word	0x200021f0
   22cb8:	0003a300 	.word	0x0003a300
   22cbc:	0003a444 	.word	0x0003a444
   22cc0:	00039f74 	.word	0x00039f74

00022cc4 <ull_disable_mark>:
	if (!*m) {
   22cc4:	4904      	ldr	r1, [pc, #16]	; (22cd8 <ull_disable_mark+0x14>)
   22cc6:	680a      	ldr	r2, [r1, #0]
   22cc8:	b10a      	cbz	r2, 22cce <ull_disable_mark+0xa>
}
   22cca:	4610      	mov	r0, r2
   22ccc:	4770      	bx	lr
		*m = param;
   22cce:	4602      	mov	r2, r0
   22cd0:	6008      	str	r0, [r1, #0]
}
   22cd2:	4610      	mov	r0, r2
   22cd4:	4770      	bx	lr
   22cd6:	bf00      	nop
   22cd8:	20001f24 	.word	0x20001f24

00022cdc <ull_disable_unmark>:
	if (*m && *m == param) {
   22cdc:	4a04      	ldr	r2, [pc, #16]	; (22cf0 <ull_disable_unmark+0x14>)
   22cde:	6813      	ldr	r3, [r2, #0]
   22ce0:	b123      	cbz	r3, 22cec <ull_disable_unmark+0x10>
   22ce2:	4298      	cmp	r0, r3
		*m = NULL;
   22ce4:	bf06      	itte	eq
   22ce6:	2100      	moveq	r1, #0
   22ce8:	6011      	streq	r1, [r2, #0]
	return NULL;
   22cea:	2300      	movne	r3, #0
}
   22cec:	4618      	mov	r0, r3
   22cee:	4770      	bx	lr
   22cf0:	20001f24 	.word	0x20001f24

00022cf4 <ull_disable_mark_get>:
	return mark_get(mark_disable);
   22cf4:	4b01      	ldr	r3, [pc, #4]	; (22cfc <ull_disable_mark_get+0x8>)
}
   22cf6:	6818      	ldr	r0, [r3, #0]
   22cf8:	4770      	bx	lr
   22cfa:	bf00      	nop
   22cfc:	20001f24 	.word	0x20001f24

00022d00 <ull_update_mark>:
	if (!*m) {
   22d00:	4904      	ldr	r1, [pc, #16]	; (22d14 <ull_update_mark+0x14>)
   22d02:	680a      	ldr	r2, [r1, #0]
   22d04:	b10a      	cbz	r2, 22d0a <ull_update_mark+0xa>
}
   22d06:	4610      	mov	r0, r2
   22d08:	4770      	bx	lr
		*m = param;
   22d0a:	4602      	mov	r2, r0
   22d0c:	6008      	str	r0, [r1, #0]
}
   22d0e:	4610      	mov	r0, r2
   22d10:	4770      	bx	lr
   22d12:	bf00      	nop
   22d14:	20001f28 	.word	0x20001f28

00022d18 <ull_update_unmark>:
	if (*m && *m == param) {
   22d18:	4a04      	ldr	r2, [pc, #16]	; (22d2c <ull_update_unmark+0x14>)
   22d1a:	6813      	ldr	r3, [r2, #0]
   22d1c:	b123      	cbz	r3, 22d28 <ull_update_unmark+0x10>
   22d1e:	4298      	cmp	r0, r3
		*m = NULL;
   22d20:	bf06      	itte	eq
   22d22:	2100      	moveq	r1, #0
   22d24:	6011      	streq	r1, [r2, #0]
	return NULL;
   22d26:	2300      	movne	r3, #0
}
   22d28:	4618      	mov	r0, r3
   22d2a:	4770      	bx	lr
   22d2c:	20001f28 	.word	0x20001f28

00022d30 <ull_update_mark_get>:
	return mark_get(mark_update);
   22d30:	4b01      	ldr	r3, [pc, #4]	; (22d38 <ull_update_mark_get+0x8>)
}
   22d32:	6818      	ldr	r0, [r3, #0]
   22d34:	4770      	bx	lr
   22d36:	bf00      	nop
   22d38:	20001f28 	.word	0x20001f28

00022d3c <ull_disable>:
{
   22d3c:	b530      	push	{r4, r5, lr}
	hdr = HDR_LLL2ULL(lll);
   22d3e:	6805      	ldr	r5, [r0, #0]
   22d40:	782b      	ldrb	r3, [r5, #0]
{
   22d42:	b087      	sub	sp, #28
	if (!ull_ref_get(hdr)) {
   22d44:	b353      	cbz	r3, 22d9c <ull_disable+0x60>
	compiler_barrier();
   22d46:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   22d48:	2201      	movs	r2, #1
   22d4a:	2100      	movs	r1, #0
   22d4c:	4668      	mov	r0, sp
   22d4e:	f015 fdb8 	bl	388c2 <z_impl_k_sem_init>
   22d52:	782b      	ldrb	r3, [r5, #0]
	hdr->disabled_cb = disabled_cb;
   22d54:	4a13      	ldr	r2, [pc, #76]	; (22da4 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
   22d56:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
   22d5a:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
   22d5c:	b1f3      	cbz	r3, 22d9c <ull_disable+0x60>
	mfy.param = lll;
   22d5e:	4b12      	ldr	r3, [pc, #72]	; (22da8 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   22d60:	2200      	movs	r2, #0
   22d62:	4611      	mov	r1, r2
   22d64:	2003      	movs	r0, #3
	mfy.param = lll;
   22d66:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   22d68:	f7fc fbe4 	bl	1f534 <mayfly_enqueue>
	LL_ASSERT(!ret);
   22d6c:	b940      	cbnz	r0, 22d80 <ull_disable+0x44>
	return z_impl_k_sem_take(sem, timeout);
   22d6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22d72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22d76:	4668      	mov	r0, sp
   22d78:	f00e fed2 	bl	31b20 <z_impl_k_sem_take>
}
   22d7c:	b007      	add	sp, #28
   22d7e:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   22d80:	4a0a      	ldr	r2, [pc, #40]	; (22dac <ull_disable+0x70>)
   22d82:	490b      	ldr	r1, [pc, #44]	; (22db0 <ull_disable+0x74>)
   22d84:	480b      	ldr	r0, [pc, #44]	; (22db4 <ull_disable+0x78>)
   22d86:	f240 7396 	movw	r3, #1942	; 0x796
   22d8a:	f010 fb45 	bl	33418 <assert_print>
   22d8e:	4040      	eors	r0, r0
   22d90:	f380 8811 	msr	BASEPRI, r0
   22d94:	f04f 0003 	mov.w	r0, #3
   22d98:	df02      	svc	2
   22d9a:	e7e8      	b.n	22d6e <ull_disable+0x32>
		return -EALREADY;
   22d9c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   22da0:	e7ec      	b.n	22d7c <ull_disable+0x40>
   22da2:	bf00      	nop
   22da4:	00022215 	.word	0x00022215
   22da8:	2000039c 	.word	0x2000039c
   22dac:	0003a300 	.word	0x0003a300
   22db0:	0003a43c 	.word	0x0003a43c
   22db4:	00039f74 	.word	0x00039f74

00022db8 <ull_ticker_stop_with_mark>:
{
   22db8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
   22dba:	4e1e      	ldr	r6, [pc, #120]	; (22e34 <ull_ticker_stop_with_mark+0x7c>)
   22dbc:	6833      	ldr	r3, [r6, #0]
{
   22dbe:	b085      	sub	sp, #20
   22dc0:	460c      	mov	r4, r1
   22dc2:	4617      	mov	r7, r2
	if (!*m) {
   22dc4:	b353      	cbz	r3, 22e1c <ull_ticker_stop_with_mark+0x64>
	if (mark != param) {
   22dc6:	4299      	cmp	r1, r3
   22dc8:	d113      	bne.n	22df2 <ull_ticker_stop_with_mark+0x3a>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   22dca:	ad03      	add	r5, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   22dcc:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   22dce:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
   22dd0:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   22dd2:	9500      	str	r5, [sp, #0]
   22dd4:	4b18      	ldr	r3, [pc, #96]	; (22e38 <ull_ticker_stop_with_mark+0x80>)
   22dd6:	2103      	movs	r1, #3
   22dd8:	2000      	movs	r0, #0
   22dda:	f7fd fc85 	bl	206e8 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   22dde:	4629      	mov	r1, r5
   22de0:	f7ff ff48 	bl	22c74 <ull_ticker_status_take>
	if (ret) {
   22de4:	4605      	mov	r5, r0
   22de6:	b140      	cbz	r0, 22dfa <ull_ticker_stop_with_mark+0x42>
	if (*m && *m == param) {
   22de8:	6833      	ldr	r3, [r6, #0]
   22dea:	b10b      	cbz	r3, 22df0 <ull_ticker_stop_with_mark+0x38>
   22dec:	429c      	cmp	r4, r3
   22dee:	d017      	beq.n	22e20 <ull_ticker_stop_with_mark+0x68>
		if (mark != param) {
   22df0:	b1c4      	cbz	r4, 22e24 <ull_ticker_stop_with_mark+0x6c>
		return -ENOLCK;
   22df2:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
   22df6:	b005      	add	sp, #20
   22df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = ull_disable(lll_disable);
   22dfa:	4638      	mov	r0, r7
   22dfc:	f7ff ff9e 	bl	22d3c <ull_disable>
	if (*m && *m == param) {
   22e00:	6833      	ldr	r3, [r6, #0]
   22e02:	b10b      	cbz	r3, 22e08 <ull_ticker_stop_with_mark+0x50>
   22e04:	429c      	cmp	r4, r3
   22e06:	d011      	beq.n	22e2c <ull_ticker_stop_with_mark+0x74>
	if (mark != param) {
   22e08:	2c00      	cmp	r4, #0
   22e0a:	d1f2      	bne.n	22df2 <ull_ticker_stop_with_mark+0x3a>
	if (err && (err != -EALREADY)) {
   22e0c:	2800      	cmp	r0, #0
   22e0e:	d0f2      	beq.n	22df6 <ull_ticker_stop_with_mark+0x3e>
	return 0;
   22e10:	f110 0f78 	cmn.w	r0, #120	; 0x78
   22e14:	bf08      	it	eq
   22e16:	2000      	moveq	r0, #0
}
   22e18:	b005      	add	sp, #20
   22e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
   22e1c:	6031      	str	r1, [r6, #0]
	if (mark != param) {
   22e1e:	e7d4      	b.n	22dca <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
   22e20:	2300      	movs	r3, #0
   22e22:	6033      	str	r3, [r6, #0]
		return -EALREADY;
   22e24:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   22e28:	b005      	add	sp, #20
   22e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
   22e2c:	6035      	str	r5, [r6, #0]
	if (err && (err != -EALREADY)) {
   22e2e:	2800      	cmp	r0, #0
   22e30:	d0e1      	beq.n	22df6 <ull_ticker_stop_with_mark+0x3e>
   22e32:	e7ed      	b.n	22e10 <ull_ticker_stop_with_mark+0x58>
   22e34:	20001f24 	.word	0x20001f24
   22e38:	00022209 	.word	0x00022209

00022e3c <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   22e3c:	490e      	ldr	r1, [pc, #56]	; (22e78 <ull_pdu_rx_alloc_peek+0x3c>)
   22e3e:	790b      	ldrb	r3, [r1, #4]
   22e40:	794a      	ldrb	r2, [r1, #5]
	if (last >= first) {
   22e42:	4293      	cmp	r3, r2
   22e44:	d80d      	bhi.n	22e62 <ull_pdu_rx_alloc_peek+0x26>
		return last - first;
   22e46:	eba2 0c03 	sub.w	ip, r2, r3
   22e4a:	fa5f fc8c 	uxtb.w	ip, ip
   22e4e:	4560      	cmp	r0, ip
   22e50:	d80f      	bhi.n	22e72 <ull_pdu_rx_alloc_peek+0x36>
	if (first == last) {
   22e52:	4293      	cmp	r3, r2
   22e54:	d00d      	beq.n	22e72 <ull_pdu_rx_alloc_peek+0x36>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   22e56:	7809      	ldrb	r1, [r1, #0]
	return *((void **)(fifo + first * size));
   22e58:	4a08      	ldr	r2, [pc, #32]	; (22e7c <ull_pdu_rx_alloc_peek+0x40>)
   22e5a:	fb13 f301 	smulbb	r3, r3, r1
   22e5e:	58d0      	ldr	r0, [r2, r3]
   22e60:	4770      	bx	lr
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   22e62:	f8b1 c002 	ldrh.w	ip, [r1, #2]
		return count - first + last;
   22e66:	ebac 0c03 	sub.w	ip, ip, r3
   22e6a:	4462      	add	r2, ip
   22e6c:	b2d2      	uxtb	r2, r2
   22e6e:	4290      	cmp	r0, r2
   22e70:	d9f1      	bls.n	22e56 <ull_pdu_rx_alloc_peek+0x1a>
		return NULL;
   22e72:	2000      	movs	r0, #0
}
   22e74:	4770      	bx	lr
   22e76:	bf00      	nop
   22e78:	20000408 	.word	0x20000408
   22e7c:	20000410 	.word	0x20000410

00022e80 <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
   22e80:	4b09      	ldr	r3, [pc, #36]	; (22ea8 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   22e82:	7919      	ldrb	r1, [r3, #4]
	if (_first == last) {
   22e84:	795a      	ldrb	r2, [r3, #5]
   22e86:	7818      	ldrb	r0, [r3, #0]
   22e88:	f893 c002 	ldrb.w	ip, [r3, #2]
   22e8c:	428a      	cmp	r2, r1
   22e8e:	d009      	beq.n	22ea4 <ull_pdu_rx_alloc+0x24>
	_first += 1U;
   22e90:	1c4a      	adds	r2, r1, #1
	mem = *((void **)(fifo + _first * size));
   22e92:	fb01 3000 	mla	r0, r1, r0, r3
	_first += 1U;
   22e96:	b2d2      	uxtb	r2, r2
		_first = 0U;
   22e98:	4594      	cmp	ip, r2
   22e9a:	bf08      	it	eq
   22e9c:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   22e9e:	6880      	ldr	r0, [r0, #8]
	*first = _first; /* Write back read-index */
   22ea0:	711a      	strb	r2, [r3, #4]
	return mem;
   22ea2:	4770      	bx	lr
		return NULL;
   22ea4:	2000      	movs	r0, #0
}
   22ea6:	4770      	bx	lr
   22ea8:	20000408 	.word	0x20000408

00022eac <ull_rx_put>:
{
   22eac:	b538      	push	{r3, r4, r5, lr}
   22eae:	460c      	mov	r4, r1
   22eb0:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   22eb2:	f002 f855 	bl	24f60 <ull_conn_ack_last_idx_get>
   22eb6:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   22eb8:	4621      	mov	r1, r4
   22eba:	4628      	mov	r0, r5
   22ebc:	4a02      	ldr	r2, [pc, #8]	; (22ec8 <ull_rx_put+0x1c>)
}
   22ebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   22ec2:	f7fc bac1 	b.w	1f448 <memq_enqueue>
   22ec6:	bf00      	nop
   22ec8:	20001f40 	.word	0x20001f40

00022ecc <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   22ecc:	2201      	movs	r2, #1
   22ece:	4b02      	ldr	r3, [pc, #8]	; (22ed8 <ull_rx_sched+0xc>)
   22ed0:	4611      	mov	r1, r2
   22ed2:	2000      	movs	r0, #0
   22ed4:	f7fc bb2e 	b.w	1f534 <mayfly_enqueue>
   22ed8:	2000038c 	.word	0x2000038c

00022edc <ull_rx_put_sched>:
{
   22edc:	b570      	push	{r4, r5, r6, lr}
   22ede:	460c      	mov	r4, r1
   22ee0:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   22ee2:	f002 f83d 	bl	24f60 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   22ee6:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   22ee8:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   22eea:	4a06      	ldr	r2, [pc, #24]	; (22f04 <ull_rx_put_sched+0x28>)
   22eec:	4628      	mov	r0, r5
   22eee:	f7fc faab 	bl	1f448 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   22ef2:	2201      	movs	r2, #1
}
   22ef4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   22ef8:	4b03      	ldr	r3, [pc, #12]	; (22f08 <ull_rx_put_sched+0x2c>)
   22efa:	4611      	mov	r1, r2
   22efc:	2000      	movs	r0, #0
   22efe:	f7fc bb19 	b.w	1f534 <mayfly_enqueue>
   22f02:	bf00      	nop
   22f04:	20001f40 	.word	0x20001f40
   22f08:	2000038c 	.word	0x2000038c

00022f0c <ull_prepare_enqueue>:
{
   22f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   22f10:	4e16      	ldr	r6, [pc, #88]	; (22f6c <ull_prepare_enqueue+0x60>)
{
   22f12:	f89d a020 	ldrb.w	sl, [sp, #32]
   22f16:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   22f18:	7973      	ldrb	r3, [r6, #5]
{
   22f1a:	460f      	mov	r7, r1
	last = last + 1;
   22f1c:	1c5d      	adds	r5, r3, #1
   22f1e:	4611      	mov	r1, r2
	if (last == count) {
   22f20:	78b2      	ldrb	r2, [r6, #2]
	last = last + 1;
   22f22:	b2ed      	uxtb	r5, r5
		last = 0U;
   22f24:	42aa      	cmp	r2, r5
   22f26:	bf08      	it	eq
   22f28:	2500      	moveq	r5, #0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   22f2a:	7932      	ldrb	r2, [r6, #4]
	if (last == first) {
   22f2c:	42aa      	cmp	r2, r5
{
   22f2e:	4680      	mov	r8, r0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   22f30:	7830      	ldrb	r0, [r6, #0]
   22f32:	d016      	beq.n	22f62 <ull_prepare_enqueue+0x56>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   22f34:	f106 0408 	add.w	r4, r6, #8
   22f38:	fb03 4400 	mla	r4, r3, r0, r4
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   22f3c:	2210      	movs	r2, #16
   22f3e:	4620      	mov	r0, r4
   22f40:	f012 faf9 	bl	35536 <memcpy>
	e->is_resume = is_resume;
   22f44:	7f23      	ldrb	r3, [r4, #28]
	e->abort_cb = abort_cb;
   22f46:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
   22f48:	f00a 0a01 	and.w	sl, sl, #1
   22f4c:	f023 0303 	bic.w	r3, r3, #3
   22f50:	ea43 030a 	orr.w	r3, r3, sl
	e->is_abort_cb = is_abort_cb;
   22f54:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_resume = is_resume;
   22f58:	7723      	strb	r3, [r4, #28]
	*last = idx; /* Commit: Update write index */
   22f5a:	7175      	strb	r5, [r6, #5]
}
   22f5c:	4620      	mov	r0, r4
   22f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return NULL;
   22f62:	2400      	movs	r4, #0
}
   22f64:	4620      	mov	r0, r4
   22f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22f6a:	bf00      	nop
   22f6c:	20000528 	.word	0x20000528

00022f70 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   22f70:	4805      	ldr	r0, [pc, #20]	; (22f88 <ull_prepare_dequeue_get+0x18>)
   22f72:	7902      	ldrb	r2, [r0, #4]
	if (first == last) {
   22f74:	7941      	ldrb	r1, [r0, #5]
   22f76:	f890 c000 	ldrb.w	ip, [r0]
   22f7a:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
   22f7c:	bf1a      	itte	ne
   22f7e:	3008      	addne	r0, #8
   22f80:	fb02 000c 	mlane	r0, r2, ip, r0
		return NULL;
   22f84:	2000      	moveq	r0, #0
}
   22f86:	4770      	bx	lr
   22f88:	20000528 	.word	0x20000528

00022f8c <ull_prepare_dequeue_iter>:
{
   22f8c:	b500      	push	{lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   22f8e:	4b0d      	ldr	r3, [pc, #52]	; (22fc4 <ull_prepare_dequeue_iter+0x38>)
	if (*idx >= count) {
   22f90:	7802      	ldrb	r2, [r0, #0]
   22f92:	7899      	ldrb	r1, [r3, #2]
   22f94:	f893 c005 	ldrb.w	ip, [r3, #5]
   22f98:	f893 e000 	ldrb.w	lr, [r3]
   22f9c:	4291      	cmp	r1, r2
   22f9e:	bf9c      	itt	ls
   22fa0:	791a      	ldrbls	r2, [r3, #4]
		*idx = first;
   22fa2:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   22fa4:	4594      	cmp	ip, r2
   22fa6:	d00a      	beq.n	22fbe <ull_prepare_dequeue_iter+0x32>
	i = *idx + 1;
   22fa8:	1c53      	adds	r3, r2, #1
   22faa:	b2db      	uxtb	r3, r3
		i = 0U;
   22fac:	4299      	cmp	r1, r3
   22fae:	bf08      	it	eq
   22fb0:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
   22fb2:	4905      	ldr	r1, [pc, #20]	; (22fc8 <ull_prepare_dequeue_iter+0x3c>)
	*idx = i;
   22fb4:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   22fb6:	fb02 100e 	mla	r0, r2, lr, r1
}
   22fba:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   22fbe:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   22fc0:	e7fb      	b.n	22fba <ull_prepare_dequeue_iter+0x2e>
   22fc2:	bf00      	nop
   22fc4:	20000528 	.word	0x20000528
   22fc8:	20000530 	.word	0x20000530

00022fcc <ull_prepare_dequeue>:
{
   22fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return MFIFO_DEQUEUE_GET(prep);
   22fd0:	4c2b      	ldr	r4, [pc, #172]	; (23080 <ull_prepare_dequeue+0xb4>)
   22fd2:	7922      	ldrb	r2, [r4, #4]
	if (first == last) {
   22fd4:	7961      	ldrb	r1, [r4, #5]
   22fd6:	7823      	ldrb	r3, [r4, #0]
{
   22fd8:	b083      	sub	sp, #12
   22fda:	4291      	cmp	r1, r2
   22fdc:	9001      	str	r0, [sp, #4]
   22fde:	d032      	beq.n	23046 <ull_prepare_dequeue+0x7a>
	return (void *)(fifo + first * size);
   22fe0:	f104 0908 	add.w	r9, r4, #8
   22fe4:	f04f 0800 	mov.w	r8, #0
			mfy.param = next;
   22fe8:	f8df b098 	ldr.w	fp, [pc, #152]	; 23084 <ull_prepare_dequeue+0xb8>
   22fec:	fb02 9303 	mla	r3, r2, r3, r9
   22ff0:	46c2      	mov	sl, r8
		uint8_t is_aborted = next->is_aborted;
   22ff2:	7f1a      	ldrb	r2, [r3, #28]
		void *param = next->prepare_param.param;
   22ff4:	68df      	ldr	r7, [r3, #12]
		if (!is_aborted) {
   22ff6:	0791      	lsls	r1, r2, #30
		uint8_t is_aborted = next->is_aborted;
   22ff8:	f3c2 0540 	ubfx	r5, r2, #1, #1
		uint8_t is_resume = next->is_resume;
   22ffc:	f002 0601 	and.w	r6, r2, #1
		if (!is_aborted) {
   23000:	d524      	bpl.n	2304c <ull_prepare_dequeue+0x80>
		MFIFO_DEQUEUE(prep);
   23002:	7961      	ldrb	r1, [r4, #5]
	uint8_t _first = *first; /* Copy read-index */
   23004:	7923      	ldrb	r3, [r4, #4]
   23006:	7822      	ldrb	r2, [r4, #0]
   23008:	78a0      	ldrb	r0, [r4, #2]
	if (_first == last) {
   2300a:	4299      	cmp	r1, r3
   2300c:	d01b      	beq.n	23046 <ull_prepare_dequeue+0x7a>
	_first += 1U;
   2300e:	3301      	adds	r3, #1
   23010:	b2db      	uxtb	r3, r3
		_first = 0U;
   23012:	4298      	cmp	r0, r3
   23014:	bf08      	it	eq
   23016:	2300      	moveq	r3, #0
	if (first == last) {
   23018:	4299      	cmp	r1, r3
	*first = _first; /* Write back read-index */
   2301a:	7123      	strb	r3, [r4, #4]
	if (first == last) {
   2301c:	d013      	beq.n	23046 <ull_prepare_dequeue+0x7a>
	return (void *)(fifo + first * size);
   2301e:	fb03 9302 	mla	r3, r3, r2, r9
		if (!is_aborted) {
   23022:	2d00      	cmp	r5, #0
   23024:	d1e5      	bne.n	22ff2 <ull_prepare_dequeue+0x26>
			if (!is_resume) {
   23026:	b176      	cbz	r6, 23046 <ull_prepare_dequeue+0x7a>
			if (!param_resume_head) {
   23028:	f1ba 0f00 	cmp.w	sl, #0
   2302c:	d026      	beq.n	2307c <ull_prepare_dequeue+0xb0>
				param_resume_next = param;
   2302e:	f1b8 0f00 	cmp.w	r8, #0
   23032:	bf08      	it	eq
   23034:	46b8      	moveq	r8, r7
			if (next->is_resume &&
   23036:	7f1a      	ldrb	r2, [r3, #28]
   23038:	07d2      	lsls	r2, r2, #31
   2303a:	d5da      	bpl.n	22ff2 <ull_prepare_dequeue+0x26>
			    ((next->prepare_param.param ==
   2303c:	68da      	ldr	r2, [r3, #12]
			if (next->is_resume &&
   2303e:	4592      	cmp	sl, r2
   23040:	d001      	beq.n	23046 <ull_prepare_dequeue+0x7a>
			      param_resume_head) ||
   23042:	4590      	cmp	r8, r2
   23044:	d1d5      	bne.n	22ff2 <ull_prepare_dequeue+0x26>
}
   23046:	b003      	add	sp, #12
   23048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mfy.param = next;
   2304c:	f8cb 3008 	str.w	r3, [fp, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
   23050:	9801      	ldr	r0, [sp, #4]
   23052:	4b0c      	ldr	r3, [pc, #48]	; (23084 <ull_prepare_dequeue+0xb8>)
   23054:	462a      	mov	r2, r5
   23056:	4629      	mov	r1, r5
   23058:	f7fc fa6c 	bl	1f534 <mayfly_enqueue>
			LL_ASSERT(!ret);
   2305c:	2800      	cmp	r0, #0
   2305e:	d0d0      	beq.n	23002 <ull_prepare_dequeue+0x36>
   23060:	4a09      	ldr	r2, [pc, #36]	; (23088 <ull_prepare_dequeue+0xbc>)
   23062:	490a      	ldr	r1, [pc, #40]	; (2308c <ull_prepare_dequeue+0xc0>)
   23064:	480a      	ldr	r0, [pc, #40]	; (23090 <ull_prepare_dequeue+0xc4>)
   23066:	f640 0319 	movw	r3, #2073	; 0x819
   2306a:	f010 f9d5 	bl	33418 <assert_print>
   2306e:	4040      	eors	r0, r0
   23070:	f380 8811 	msr	BASEPRI, r0
   23074:	f04f 0003 	mov.w	r0, #3
   23078:	df02      	svc	2
   2307a:	e7c2      	b.n	23002 <ull_prepare_dequeue+0x36>
				param_resume_head = param;
   2307c:	46ba      	mov	sl, r7
   2307e:	e7da      	b.n	23036 <ull_prepare_dequeue+0x6a>
   23080:	20000528 	.word	0x20000528
   23084:	2000036c 	.word	0x2000036c
   23088:	0003a300 	.word	0x0003a300
   2308c:	0003a43c 	.word	0x0003a43c
   23090:	00039f74 	.word	0x00039f74

00023094 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   23094:	4b06      	ldr	r3, [pc, #24]	; (230b0 <ull_event_done_extra_get+0x1c>)
   23096:	791a      	ldrb	r2, [r3, #4]
	if (first == last) {
   23098:	7959      	ldrb	r1, [r3, #5]
   2309a:	7818      	ldrb	r0, [r3, #0]
   2309c:	4291      	cmp	r1, r2
   2309e:	d005      	beq.n	230ac <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   230a0:	fb02 3300 	mla	r3, r2, r0, r3
   230a4:	6898      	ldr	r0, [r3, #8]
	if (!evdone) {
   230a6:	b110      	cbz	r0, 230ae <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   230a8:	3020      	adds	r0, #32
   230aa:	4770      	bx	lr
		return NULL;
   230ac:	2000      	movs	r0, #0
}
   230ae:	4770      	bx	lr
   230b0:	2000050c 	.word	0x2000050c

000230b4 <ull_event_done>:
{
   230b4:	b538      	push	{r3, r4, r5, lr}
	evdone = MFIFO_DEQUEUE(done);
   230b6:	4a13      	ldr	r2, [pc, #76]	; (23104 <ull_event_done+0x50>)
	uint8_t _first = *first; /* Copy read-index */
   230b8:	7913      	ldrb	r3, [r2, #4]
	if (_first == last) {
   230ba:	7955      	ldrb	r5, [r2, #5]
   230bc:	7814      	ldrb	r4, [r2, #0]
   230be:	429d      	cmp	r5, r3
{
   230c0:	4601      	mov	r1, r0
	evdone = MFIFO_DEQUEUE(done);
   230c2:	7890      	ldrb	r0, [r2, #2]
   230c4:	d01b      	beq.n	230fe <ull_event_done+0x4a>
	mem = *((void **)(fifo + _first * size));
   230c6:	fb03 2404 	mla	r4, r3, r4, r2
	_first += 1U;
   230ca:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   230cc:	68a4      	ldr	r4, [r4, #8]
	_first += 1U;
   230ce:	b2db      	uxtb	r3, r3
		_first = 0U;
   230d0:	4298      	cmp	r0, r3
   230d2:	bf08      	it	eq
   230d4:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   230d6:	7113      	strb	r3, [r2, #4]
	if (!evdone) {
   230d8:	b18c      	cbz	r4, 230fe <ull_event_done+0x4a>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   230da:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
   230dc:	2500      	movs	r5, #0
	link = evdone->hdr.link;
   230de:	6820      	ldr	r0, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
   230e0:	4a09      	ldr	r2, [pc, #36]	; (23108 <ull_event_done+0x54>)
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   230e2:	7123      	strb	r3, [r4, #4]
	evdone->param = param;
   230e4:	61e1      	str	r1, [r4, #28]
	evdone->hdr.link = NULL;
   230e6:	6025      	str	r5, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
   230e8:	4621      	mov	r1, r4
   230ea:	f7fc f9ad 	bl	1f448 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   230ee:	2201      	movs	r2, #1
   230f0:	4b06      	ldr	r3, [pc, #24]	; (2310c <ull_event_done+0x58>)
   230f2:	4611      	mov	r1, r2
   230f4:	4628      	mov	r0, r5
   230f6:	f7fc fa1d 	bl	1f534 <mayfly_enqueue>
}
   230fa:	4620      	mov	r0, r4
   230fc:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   230fe:	2400      	movs	r4, #0
   23100:	e7fb      	b.n	230fa <ull_event_done+0x46>
   23102:	bf00      	nop
   23104:	2000050c 	.word	0x2000050c
   23108:	20001f30 	.word	0x20001f30
   2310c:	2000037c 	.word	0x2000037c

00023110 <ull_rxfifo_alloc>:
{
   23110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23114:	b083      	sub	sp, #12
   23116:	461d      	mov	r5, r3
   23118:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   2311c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2311e:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
   23122:	9401      	str	r4, [sp, #4]
   23124:	4617      	mov	r7, r2
   23126:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   23128:	9200      	str	r2, [sp, #0]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   2312a:	b353      	cbz	r3, 23182 <ull_rxfifo_alloc+0x72>
   2312c:	1e5c      	subs	r4, r3, #1
   2312e:	f895 a000 	ldrb.w	sl, [r5]
   23132:	4680      	mov	r8, r0
   23134:	460e      	mov	r6, r1
   23136:	b2e4      	uxtb	r4, r4
	last = last + 1;
   23138:	f10a 0301 	add.w	r3, sl, #1
   2313c:	fa5f fa83 	uxtb.w	sl, r3
		last = 0U;
   23140:	4556      	cmp	r6, sl
   23142:	bf08      	it	eq
   23144:	f04f 0a00 	moveq.w	sl, #0
	if (last == first) {
   23148:	4557      	cmp	r7, sl
		link = mem_acquire(link_free);
   2314a:	4648      	mov	r0, r9
   2314c:	d019      	beq.n	23182 <ull_rxfifo_alloc+0x72>
   2314e:	f7fc f915 	bl	1f37c <mem_acquire>
   23152:	4683      	mov	fp, r0
		rx = mem_acquire(mem_free);
   23154:	9800      	ldr	r0, [sp, #0]
		if (!link) {
   23156:	f1bb 0f00 	cmp.w	fp, #0
   2315a:	d012      	beq.n	23182 <ull_rxfifo_alloc+0x72>
		rx = mem_acquire(mem_free);
   2315c:	f7fc f90e 	bl	1f37c <mem_acquire>
		if (!rx) {
   23160:	b190      	cbz	r0, 23188 <ull_rxfifo_alloc+0x78>
		link->mem = NULL;
   23162:	2300      	movs	r3, #0
   23164:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
   23168:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   2316c:	782a      	ldrb	r2, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   2316e:	9b01      	ldr	r3, [sp, #4]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   23170:	fb12 f208 	smulbb	r2, r2, r8
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   23174:	5098      	str	r0, [r3, r2]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   23176:	3c01      	subs	r4, #1
   23178:	b2e4      	uxtb	r4, r4
   2317a:	2cff      	cmp	r4, #255	; 0xff
	*last = idx; /* Commit: Update write index */
   2317c:	f885 a000 	strb.w	sl, [r5]
   23180:	d1da      	bne.n	23138 <ull_rxfifo_alloc+0x28>
}
   23182:	b003      	add	sp, #12
   23184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, link_free);
   23188:	4649      	mov	r1, r9
   2318a:	4658      	mov	r0, fp
}
   2318c:	b003      	add	sp, #12
   2318e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, link_free);
   23192:	f7fc b90f 	b.w	1f3b4 <mem_release>
   23196:	bf00      	nop

00023198 <init_reset>:
{
   23198:	b570      	push	{r4, r5, r6, lr}
	RXFIFO_INIT_ALLOC(done);
   2319a:	4c3f      	ldr	r4, [pc, #252]	; (23298 <init_reset+0x100>)
   2319c:	4d3f      	ldr	r5, [pc, #252]	; (2329c <init_reset+0x104>)
   2319e:	79a2      	ldrb	r2, [r4, #6]
   231a0:	88a1      	ldrh	r1, [r4, #4]
   231a2:	4e3f      	ldr	r6, [pc, #252]	; (232a0 <init_reset+0x108>)
   231a4:	2000      	movs	r0, #0
{
   231a6:	b084      	sub	sp, #16
	RXFIFO_INIT_ALLOC(done);
   231a8:	4623      	mov	r3, r4
   231aa:	80a8      	strh	r0, [r5, #4]
   231ac:	f104 0008 	add.w	r0, r4, #8
   231b0:	f7fc f8b4 	bl	1f31c <mem_init>
   231b4:	79e3      	ldrb	r3, [r4, #7]
   231b6:	79a2      	ldrb	r2, [r4, #6]
   231b8:	1d30      	adds	r0, r6, #4
   231ba:	441a      	add	r2, r3
   231bc:	2108      	movs	r1, #8
   231be:	4633      	mov	r3, r6
   231c0:	f7fc f8ac 	bl	1f31c <mem_init>
   231c4:	9602      	str	r6, [sp, #8]
   231c6:	462e      	mov	r6, r5
   231c8:	79a3      	ldrb	r3, [r4, #6]
   231ca:	f816 0b08 	ldrb.w	r0, [r6], #8
   231ce:	9303      	str	r3, [sp, #12]
   231d0:	792a      	ldrb	r2, [r5, #4]
   231d2:	78a9      	ldrb	r1, [r5, #2]
   231d4:	1d6b      	adds	r3, r5, #5
   231d6:	e9cd 6400 	strd	r6, r4, [sp]
   231da:	f7ff ff99 	bl	23110 <ull_rxfifo_alloc>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   231de:	4b31      	ldr	r3, [pc, #196]	; (232a4 <init_reset+0x10c>)
   231e0:	2208      	movs	r2, #8
   231e2:	1d18      	adds	r0, r3, #4
   231e4:	2144      	movs	r1, #68	; 0x44
   231e6:	f7fc f899 	bl	1f31c <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   231ea:	4b2f      	ldr	r3, [pc, #188]	; (232a8 <init_reset+0x110>)
   231ec:	220a      	movs	r2, #10
   231ee:	1d18      	adds	r0, r3, #4
   231f0:	2108      	movs	r1, #8
   231f2:	f7fc f893 	bl	1f31c <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   231f6:	482c      	ldr	r0, [pc, #176]	; (232a8 <init_reset+0x110>)
   231f8:	f7fc f8c0 	bl	1f37c <mem_acquire>
	LL_ASSERT(link);
   231fc:	4604      	mov	r4, r0
   231fe:	b308      	cbz	r0, 23244 <init_reset+0xac>
	MEMQ_INIT(ull_rx, link);
   23200:	4a2a      	ldr	r2, [pc, #168]	; (232ac <init_reset+0x114>)
   23202:	4620      	mov	r0, r4
   23204:	1f11      	subs	r1, r2, #4
   23206:	f7fc f911 	bl	1f42c <memq_init>
	link = mem_acquire(&mem_link_done.free);
   2320a:	4825      	ldr	r0, [pc, #148]	; (232a0 <init_reset+0x108>)
   2320c:	f7fc f8b6 	bl	1f37c <mem_acquire>
	LL_ASSERT(link);
   23210:	4604      	mov	r4, r0
   23212:	b328      	cbz	r0, 23260 <init_reset+0xc8>
	MEMQ_INIT(ull_done, link);
   23214:	4a26      	ldr	r2, [pc, #152]	; (232b0 <init_reset+0x118>)
   23216:	4620      	mov	r0, r4
   23218:	1f11      	subs	r1, r2, #4
   2321a:	f7fc f907 	bl	1f42c <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   2321e:	4822      	ldr	r0, [pc, #136]	; (232a8 <init_reset+0x110>)
   23220:	f7fc f8ac 	bl	1f37c <mem_acquire>
	LL_ASSERT(link);
   23224:	4604      	mov	r4, r0
   23226:	b348      	cbz	r0, 2327c <init_reset+0xe4>
	MEMQ_INIT(ll_rx, link);
   23228:	4a22      	ldr	r2, [pc, #136]	; (232b4 <init_reset+0x11c>)
   2322a:	4620      	mov	r0, r4
   2322c:	1f11      	subs	r1, r2, #4
   2322e:	f7fc f8fd 	bl	1f42c <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   23232:	4b21      	ldr	r3, [pc, #132]	; (232b8 <init_reset+0x120>)
   23234:	2206      	movs	r2, #6
	rx_replenish(UINT8_MAX);
   23236:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
   23238:	801a      	strh	r2, [r3, #0]
	rx_replenish(UINT8_MAX);
   2323a:	f7ff f847 	bl	222cc <rx_replenish>
}
   2323e:	2000      	movs	r0, #0
   23240:	b004      	add	sp, #16
   23242:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   23244:	4a1d      	ldr	r2, [pc, #116]	; (232bc <init_reset+0x124>)
   23246:	491e      	ldr	r1, [pc, #120]	; (232c0 <init_reset+0x128>)
   23248:	481e      	ldr	r0, [pc, #120]	; (232c4 <init_reset+0x12c>)
   2324a:	f640 03c8 	movw	r3, #2248	; 0x8c8
   2324e:	f010 f8e3 	bl	33418 <assert_print>
   23252:	4040      	eors	r0, r0
   23254:	f380 8811 	msr	BASEPRI, r0
   23258:	f04f 0003 	mov.w	r0, #3
   2325c:	df02      	svc	2
   2325e:	e7cf      	b.n	23200 <init_reset+0x68>
	LL_ASSERT(link);
   23260:	4a16      	ldr	r2, [pc, #88]	; (232bc <init_reset+0x124>)
   23262:	4917      	ldr	r1, [pc, #92]	; (232c0 <init_reset+0x128>)
   23264:	4817      	ldr	r0, [pc, #92]	; (232c4 <init_reset+0x12c>)
   23266:	f44f 630d 	mov.w	r3, #2256	; 0x8d0
   2326a:	f010 f8d5 	bl	33418 <assert_print>
   2326e:	4040      	eors	r0, r0
   23270:	f380 8811 	msr	BASEPRI, r0
   23274:	f04f 0003 	mov.w	r0, #3
   23278:	df02      	svc	2
   2327a:	e7cb      	b.n	23214 <init_reset+0x7c>
	LL_ASSERT(link);
   2327c:	4a0f      	ldr	r2, [pc, #60]	; (232bc <init_reset+0x124>)
   2327e:	4910      	ldr	r1, [pc, #64]	; (232c0 <init_reset+0x128>)
   23280:	4810      	ldr	r0, [pc, #64]	; (232c4 <init_reset+0x12c>)
   23282:	f640 03d8 	movw	r3, #2264	; 0x8d8
   23286:	f010 f8c7 	bl	33418 <assert_print>
   2328a:	4040      	eors	r0, r0
   2328c:	f380 8811 	msr	BASEPRI, r0
   23290:	f04f 0003 	mov.w	r0, #3
   23294:	df02      	svc	2
   23296:	e7c7      	b.n	23228 <init_reset+0x90>
   23298:	20000424 	.word	0x20000424
   2329c:	2000050c 	.word	0x2000050c
   232a0:	200021c0 	.word	0x200021c0
   232a4:	20001f9c 	.word	0x20001f9c
   232a8:	20001f48 	.word	0x20001f48
   232ac:	20001f40 	.word	0x20001f40
   232b0:	20001f30 	.word	0x20001f30
   232b4:	20001f38 	.word	0x20001f38
   232b8:	20001f44 	.word	0x20001f44
   232bc:	0003a300 	.word	0x0003a300
   232c0:	0003a6a0 	.word	0x0003a6a0
   232c4:	00039f74 	.word	0x00039f74

000232c8 <ll_init>:
{
   232c8:	b530      	push	{r4, r5, lr}
	sem_recv = sem_rx;
   232ca:	4b30      	ldr	r3, [pc, #192]	; (2338c <ll_init+0xc4>)
	if (!mayfly_initialized) {
   232cc:	4c30      	ldr	r4, [pc, #192]	; (23390 <ll_init+0xc8>)
	sem_recv = sem_rx;
   232ce:	6018      	str	r0, [r3, #0]
{
   232d0:	b087      	sub	sp, #28
	cntr_init();
   232d2:	f009 fb15 	bl	2c900 <cntr_init>
	if (!mayfly_initialized) {
   232d6:	7823      	ldrb	r3, [r4, #0]
   232d8:	2b00      	cmp	r3, #0
   232da:	d051      	beq.n	23380 <ll_init+0xb8>
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   232dc:	492d      	ldr	r1, [pc, #180]	; (23394 <ll_init+0xcc>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   232de:	4a2e      	ldr	r2, [pc, #184]	; (23398 <ll_init+0xd0>)
   232e0:	4d2e      	ldr	r5, [pc, #184]	; (2339c <ll_init+0xd4>)
   232e2:	9505      	str	r5, [sp, #20]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   232e4:	f04f 0c05 	mov.w	ip, #5
   232e8:	f881 c008 	strb.w	ip, [r1, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   232ec:	4c2c      	ldr	r4, [pc, #176]	; (233a0 <ll_init+0xd8>)
   232ee:	9204      	str	r2, [sp, #16]
   232f0:	4a2c      	ldr	r2, [pc, #176]	; (233a4 <ll_init+0xdc>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   232f2:	2002      	movs	r0, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   232f4:	e9cd 2402 	strd	r2, r4, [sp, #8]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   232f8:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   232fa:	240d      	movs	r4, #13
   232fc:	e9cd 1400 	strd	r1, r4, [sp]
   23300:	4a29      	ldr	r2, [pc, #164]	; (233a8 <ll_init+0xe0>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   23302:	7408      	strb	r0, [r1, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
   23304:	7608      	strb	r0, [r1, #24]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   23306:	700b      	strb	r3, [r1, #0]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   23308:	2000      	movs	r0, #0
   2330a:	2106      	movs	r1, #6
   2330c:	f7fd f8b6 	bl	2047c <ticker_init>
	LL_ASSERT(!err);
   23310:	bb40      	cbnz	r0, 23364 <ll_init+0x9c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   23312:	2201      	movs	r2, #1
   23314:	2100      	movs	r1, #0
   23316:	4825      	ldr	r0, [pc, #148]	; (233ac <ll_init+0xe4>)
   23318:	f015 fad3 	bl	388c2 <z_impl_k_sem_init>
	err = lll_init();
   2331c:	f007 fce2 	bl	2ace4 <lll_init>
	if (err) {
   23320:	4604      	mov	r4, r0
   23322:	b110      	cbz	r0, 2332a <ll_init+0x62>
}
   23324:	4620      	mov	r0, r4
   23326:	b007      	add	sp, #28
   23328:	bd30      	pop	{r4, r5, pc}
	err = init_reset();
   2332a:	f7ff ff35 	bl	23198 <init_reset>
	if (err) {
   2332e:	4604      	mov	r4, r0
   23330:	2800      	cmp	r0, #0
   23332:	d1f7      	bne.n	23324 <ll_init+0x5c>
	err = lll_adv_init();
   23334:	f008 f942 	bl	2b5bc <lll_adv_init>
	if (err) {
   23338:	4604      	mov	r4, r0
   2333a:	2800      	cmp	r0, #0
   2333c:	d1f2      	bne.n	23324 <ll_init+0x5c>
	err = ull_adv_init();
   2333e:	f000 fcf7 	bl	23d30 <ull_adv_init>
	if (err) {
   23342:	4604      	mov	r4, r0
   23344:	2800      	cmp	r0, #0
   23346:	d1ed      	bne.n	23324 <ll_init+0x5c>
	err = lll_conn_init();
   23348:	f008 fdee 	bl	2bf28 <lll_conn_init>
	if (err) {
   2334c:	4604      	mov	r4, r0
   2334e:	2800      	cmp	r0, #0
   23350:	d1e8      	bne.n	23324 <ll_init+0x5c>
	err = ull_conn_init();
   23352:	f001 fa93 	bl	2487c <ull_conn_init>
	if (err) {
   23356:	4604      	mov	r4, r0
   23358:	2800      	cmp	r0, #0
   2335a:	d1e3      	bne.n	23324 <ll_init+0x5c>
		ull_filter_reset(true);
   2335c:	2001      	movs	r0, #1
   2335e:	f006 fe69 	bl	2a034 <ull_filter_reset>
	return  0;
   23362:	e7df      	b.n	23324 <ll_init+0x5c>
	LL_ASSERT(!err);
   23364:	4a12      	ldr	r2, [pc, #72]	; (233b0 <ll_init+0xe8>)
   23366:	4913      	ldr	r1, [pc, #76]	; (233b4 <ll_init+0xec>)
   23368:	4813      	ldr	r0, [pc, #76]	; (233b8 <ll_init+0xf0>)
   2336a:	f240 235d 	movw	r3, #605	; 0x25d
   2336e:	f010 f853 	bl	33418 <assert_print>
   23372:	4040      	eors	r0, r0
   23374:	f380 8811 	msr	BASEPRI, r0
   23378:	f04f 0003 	mov.w	r0, #3
   2337c:	df02      	svc	2
   2337e:	e7c8      	b.n	23312 <ll_init+0x4a>
		mayfly_init();
   23380:	f7fc f884 	bl	1f48c <mayfly_init>
		mayfly_initialized = true;
   23384:	2301      	movs	r3, #1
   23386:	7023      	strb	r3, [r4, #0]
   23388:	e7a8      	b.n	232dc <ll_init+0x14>
   2338a:	bf00      	nop
   2338c:	200021ec 	.word	0x200021ec
   23390:	200033e8 	.word	0x200033e8
   23394:	20002478 	.word	0x20002478
   23398:	0002d48d 	.word	0x0002d48d
   2339c:	0002d5dd 	.word	0x0002d5dd
   233a0:	0002d429 	.word	0x0002d429
   233a4:	20002208 	.word	0x20002208
   233a8:	20002498 	.word	0x20002498
   233ac:	200021f0 	.word	0x200021f0
   233b0:	0003a300 	.word	0x0003a300
   233b4:	0003a33c 	.word	0x0003a33c
   233b8:	00039f74 	.word	0x00039f74

000233bc <ll_reset>:
{
   233bc:	b510      	push	{r4, lr}
   233be:	b086      	sub	sp, #24
	err = ull_adv_reset();
   233c0:	f000 fcc6 	bl	23d50 <ull_adv_reset>
	LL_ASSERT(!err);
   233c4:	2800      	cmp	r0, #0
   233c6:	d133      	bne.n	23430 <ll_reset+0x74>
	err = ull_conn_reset();
   233c8:	f001 fa5a 	bl	24880 <ull_conn_reset>
	LL_ASSERT(!err);
   233cc:	2800      	cmp	r0, #0
   233ce:	d140      	bne.n	23452 <ll_reset+0x96>
	MFIFO_INIT(tx_ack);
   233d0:	4b3c      	ldr	r3, [pc, #240]	; (234c4 <ll_reset+0x108>)
   233d2:	2400      	movs	r4, #0
   233d4:	809c      	strh	r4, [r3, #4]
		ull_filter_reset(false);
   233d6:	4620      	mov	r0, r4
   233d8:	f006 fe2c 	bl	2a034 <ull_filter_reset>
	MFIFO_INIT(prep);
   233dc:	493a      	ldr	r1, [pc, #232]	; (234c8 <ll_reset+0x10c>)
	MFIFO_INIT(pdu_rx_free);
   233de:	4a3b      	ldr	r2, [pc, #236]	; (234cc <ll_reset+0x110>)
	MFIFO_INIT(ll_pdu_rx_free);
   233e0:	4b3b      	ldr	r3, [pc, #236]	; (234d0 <ll_reset+0x114>)
	MFIFO_INIT(prep);
   233e2:	808c      	strh	r4, [r1, #4]
	MFIFO_INIT(pdu_rx_free);
   233e4:	8094      	strh	r4, [r2, #4]
	MFIFO_INIT(ll_pdu_rx_free);
   233e6:	809c      	strh	r4, [r3, #4]
   233e8:	2201      	movs	r2, #1
   233ea:	4621      	mov	r1, r4
   233ec:	4668      	mov	r0, sp
   233ee:	f015 fa68 	bl	388c2 <z_impl_k_sem_init>
		mfy.param = &sem;
   233f2:	4b38      	ldr	r3, [pc, #224]	; (234d4 <ll_reset+0x118>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   233f4:	4622      	mov	r2, r4
   233f6:	4621      	mov	r1, r4
   233f8:	2003      	movs	r0, #3
		mfy.param = &sem;
   233fa:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   233fe:	f7fc f899 	bl	1f534 <mayfly_enqueue>
		LL_ASSERT(!retval);
   23402:	2800      	cmp	r0, #0
   23404:	d14f      	bne.n	234a6 <ll_reset+0xea>
	return z_impl_k_sem_take(sem, timeout);
   23406:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2340a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2340e:	4668      	mov	r0, sp
   23410:	f00e fb86 	bl	31b20 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
   23414:	f000 fca2 	bl	23d5c <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   23418:	2800      	cmp	r0, #0
   2341a:	d136      	bne.n	2348a <ll_reset+0xce>
	err = init_reset();
   2341c:	f7ff febc 	bl	23198 <init_reset>
	LL_ASSERT(!err);
   23420:	bb28      	cbnz	r0, 2346e <ll_reset+0xb2>
	(void)ll_addr_set(1U, NULL);
   23422:	2100      	movs	r1, #0
   23424:	2001      	movs	r0, #1
}
   23426:	b006      	add	sp, #24
   23428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)ll_addr_set(1U, NULL);
   2342c:	f7fd b9e8 	b.w	20800 <ll_addr_set>
	LL_ASSERT(!err);
   23430:	4a29      	ldr	r2, [pc, #164]	; (234d8 <ll_reset+0x11c>)
   23432:	492a      	ldr	r1, [pc, #168]	; (234dc <ll_reset+0x120>)
   23434:	482a      	ldr	r0, [pc, #168]	; (234e0 <ll_reset+0x124>)
   23436:	f240 3303 	movw	r3, #771	; 0x303
   2343a:	f00f ffed 	bl	33418 <assert_print>
   2343e:	4040      	eors	r0, r0
   23440:	f380 8811 	msr	BASEPRI, r0
   23444:	f04f 0003 	mov.w	r0, #3
   23448:	df02      	svc	2
	err = ull_conn_reset();
   2344a:	f001 fa19 	bl	24880 <ull_conn_reset>
	LL_ASSERT(!err);
   2344e:	2800      	cmp	r0, #0
   23450:	d0be      	beq.n	233d0 <ll_reset+0x14>
   23452:	4a21      	ldr	r2, [pc, #132]	; (234d8 <ll_reset+0x11c>)
   23454:	4921      	ldr	r1, [pc, #132]	; (234dc <ll_reset+0x120>)
   23456:	4822      	ldr	r0, [pc, #136]	; (234e0 <ll_reset+0x124>)
   23458:	f240 3335 	movw	r3, #821	; 0x335
   2345c:	f00f ffdc 	bl	33418 <assert_print>
   23460:	4040      	eors	r0, r0
   23462:	f380 8811 	msr	BASEPRI, r0
   23466:	f04f 0003 	mov.w	r0, #3
   2346a:	df02      	svc	2
   2346c:	e7b0      	b.n	233d0 <ll_reset+0x14>
	LL_ASSERT(!err);
   2346e:	4a1a      	ldr	r2, [pc, #104]	; (234d8 <ll_reset+0x11c>)
   23470:	491a      	ldr	r1, [pc, #104]	; (234dc <ll_reset+0x120>)
   23472:	481b      	ldr	r0, [pc, #108]	; (234e0 <ll_reset+0x124>)
   23474:	f240 337e 	movw	r3, #894	; 0x37e
   23478:	f00f ffce 	bl	33418 <assert_print>
   2347c:	4040      	eors	r0, r0
   2347e:	f380 8811 	msr	BASEPRI, r0
   23482:	f04f 0003 	mov.w	r0, #3
   23486:	df02      	svc	2
   23488:	e7cb      	b.n	23422 <ll_reset+0x66>
	LL_ASSERT(!err);
   2348a:	4a13      	ldr	r2, [pc, #76]	; (234d8 <ll_reset+0x11c>)
   2348c:	4913      	ldr	r1, [pc, #76]	; (234dc <ll_reset+0x120>)
   2348e:	4814      	ldr	r0, [pc, #80]	; (234e0 <ll_reset+0x124>)
   23490:	f240 3371 	movw	r3, #881	; 0x371
   23494:	f00f ffc0 	bl	33418 <assert_print>
   23498:	4040      	eors	r0, r0
   2349a:	f380 8811 	msr	BASEPRI, r0
   2349e:	f04f 0003 	mov.w	r0, #3
   234a2:	df02      	svc	2
   234a4:	e7ba      	b.n	2341c <ll_reset+0x60>
		LL_ASSERT(!retval);
   234a6:	4a0c      	ldr	r2, [pc, #48]	; (234d8 <ll_reset+0x11c>)
   234a8:	490e      	ldr	r1, [pc, #56]	; (234e4 <ll_reset+0x128>)
   234aa:	480d      	ldr	r0, [pc, #52]	; (234e0 <ll_reset+0x124>)
   234ac:	f44f 7359 	mov.w	r3, #868	; 0x364
   234b0:	f00f ffb2 	bl	33418 <assert_print>
   234b4:	4040      	eors	r0, r0
   234b6:	f380 8811 	msr	BASEPRI, r0
   234ba:	f04f 0003 	mov.w	r0, #3
   234be:	df02      	svc	2
   234c0:	e7a1      	b.n	23406 <ll_reset+0x4a>
   234c2:	bf00      	nop
   234c4:	200003cc 	.word	0x200003cc
   234c8:	20000528 	.word	0x20000528
   234cc:	20000408 	.word	0x20000408
   234d0:	200003f4 	.word	0x200003f4
   234d4:	200003bc 	.word	0x200003bc
   234d8:	0003a300 	.word	0x0003a300
   234dc:	0003a33c 	.word	0x0003a33c
   234e0:	00039f74 	.word	0x00039f74
   234e4:	0003a464 	.word	0x0003a464

000234e8 <ll_deinit>:
{
   234e8:	b508      	push	{r3, lr}
	ll_reset();
   234ea:	f7ff ff67 	bl	233bc <ll_reset>
}
   234ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return lll_deinit();
   234f2:	f007 bc27 	b.w	2ad44 <lll_deinit>
   234f6:	bf00      	nop

000234f8 <lll_prepare>:
 *	   -EINPROGRESS: Event already in progress and prepare was queued
 */
int lll_prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		lll_prepare_cb_t prepare_cb, int8_t event_prio,
		struct lll_prepare_param *prepare_param)
{
   234f8:	b510      	push	{r4, lr}
   234fa:	b082      	sub	sp, #8
	}

	prepare_param->prio = prio;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */

	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
   234fc:	2400      	movs	r4, #0
   234fe:	e9cd 4400 	strd	r4, r4, [sp]
   23502:	9b04      	ldr	r3, [sp, #16]
   23504:	f007 fdfa 	bl	2b0fc <lll_prepare_resolve>
				   prepare_param, 0, 0);
}
   23508:	b002      	add	sp, #8
   2350a:	bd10      	pop	{r4, pc}

0002350c <lll_resume>:

void lll_resume(void *param)
{
   2350c:	b510      	push	{r4, lr}
   2350e:	4603      	mov	r3, r0
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
   23510:	7f00      	ldrb	r0, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   23512:	691a      	ldr	r2, [r3, #16]
   23514:	6999      	ldr	r1, [r3, #24]
   23516:	2401      	movs	r4, #1
{
   23518:	b082      	sub	sp, #8
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   2351a:	4020      	ands	r0, r4
   2351c:	e9cd 0400 	strd	r0, r4, [sp]
   23520:	6958      	ldr	r0, [r3, #20]
   23522:	f007 fdeb 	bl	2b0fc <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   23526:	b108      	cbz	r0, 2352c <lll_resume+0x20>
   23528:	3077      	adds	r0, #119	; 0x77
   2352a:	d101      	bne.n	23530 <lll_resume+0x24>
}
   2352c:	b002      	add	sp, #8
   2352e:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   23530:	4a06      	ldr	r2, [pc, #24]	; (2354c <lll_resume+0x40>)
   23532:	4907      	ldr	r1, [pc, #28]	; (23550 <lll_resume+0x44>)
   23534:	4807      	ldr	r0, [pc, #28]	; (23554 <lll_resume+0x48>)
   23536:	234c      	movs	r3, #76	; 0x4c
   23538:	f00f ff6e 	bl	33418 <assert_print>
   2353c:	4040      	eors	r0, r0
   2353e:	f380 8811 	msr	BASEPRI, r0
   23542:	f04f 0003 	mov.w	r0, #3
   23546:	df02      	svc	2
}
   23548:	b002      	add	sp, #8
   2354a:	bd10      	pop	{r4, pc}
   2354c:	0003a46c 	.word	0x0003a46c
   23550:	0003a4b0 	.word	0x0003a4b0
   23554:	00039f74 	.word	0x00039f74

00023558 <ticker_stop_cb>:
{
   23558:	b530      	push	{r4, r5, lr}
   2355a:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   2355c:	4b19      	ldr	r3, [pc, #100]	; (235c4 <ticker_stop_cb+0x6c>)
{
   2355e:	9d07      	ldr	r5, [sp, #28]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   23560:	4a19      	ldr	r2, [pc, #100]	; (235c8 <ticker_stop_cb+0x70>)
   23562:	1aeb      	subs	r3, r5, r3
   23564:	fba2 2303 	umull	r2, r3, r2, r3
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   23568:	f413 5f7f 	tst.w	r3, #16320	; 0x3fc0
	handle = ull_adv_handle_get(adv);
   2356c:	f3c3 1487 	ubfx	r4, r3, #6, #8
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   23570:	d119      	bne.n	235a6 <ticker_stop_cb+0x4e>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   23572:	1ca2      	adds	r2, r4, #2
   23574:	4b15      	ldr	r3, [pc, #84]	; (235cc <ticker_stop_cb+0x74>)
   23576:	9500      	str	r5, [sp, #0]
   23578:	b2d2      	uxtb	r2, r2
   2357a:	2101      	movs	r1, #1
   2357c:	2000      	movs	r0, #0
   2357e:	f7fd f8b3 	bl	206e8 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   23582:	f010 0ffd 	tst.w	r0, #253	; 0xfd
   23586:	d00c      	beq.n	235a2 <ticker_stop_cb+0x4a>
   23588:	4a11      	ldr	r2, [pc, #68]	; (235d0 <ticker_stop_cb+0x78>)
   2358a:	4912      	ldr	r1, [pc, #72]	; (235d4 <ticker_stop_cb+0x7c>)
   2358c:	4812      	ldr	r0, [pc, #72]	; (235d8 <ticker_stop_cb+0x80>)
   2358e:	f640 1374 	movw	r3, #2420	; 0x974
   23592:	f00f ff41 	bl	33418 <assert_print>
   23596:	4040      	eors	r0, r0
   23598:	f380 8811 	msr	BASEPRI, r0
   2359c:	f04f 0003 	mov.w	r0, #3
   235a0:	df02      	svc	2
}
   235a2:	b003      	add	sp, #12
   235a4:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   235a6:	4a0a      	ldr	r2, [pc, #40]	; (235d0 <ticker_stop_cb+0x78>)
   235a8:	490c      	ldr	r1, [pc, #48]	; (235dc <ticker_stop_cb+0x84>)
   235aa:	480b      	ldr	r0, [pc, #44]	; (235d8 <ticker_stop_cb+0x80>)
   235ac:	f640 136f 	movw	r3, #2415	; 0x96f
   235b0:	f00f ff32 	bl	33418 <assert_print>
   235b4:	4040      	eors	r0, r0
   235b6:	f380 8811 	msr	BASEPRI, r0
   235ba:	f04f 0003 	mov.w	r0, #3
   235be:	df02      	svc	2
   235c0:	e7d7      	b.n	23572 <ticker_stop_cb+0x1a>
   235c2:	bf00      	nop
   235c4:	200025ec 	.word	0x200025ec
   235c8:	8d3dcb09 	.word	0x8d3dcb09
   235cc:	00023671 	.word	0x00023671
   235d0:	0003a4c4 	.word	0x0003a4c4
   235d4:	0003a510 	.word	0x0003a510
   235d8:	00039f74 	.word	0x00039f74
   235dc:	0003a504 	.word	0x0003a504

000235e0 <disabled_cb>:
{
   235e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
   235e2:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
   235e4:	6e2f      	ldr	r7, [r5, #96]	; 0x60
{
   235e6:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   235e8:	b1c7      	cbz	r7, 2361c <disabled_cb+0x3c>
	LL_ASSERT(adv->node_rx_cc_free);
   235ea:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	adv->link_cc_free = NULL;
   235ec:	2300      	movs	r3, #0
   235ee:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
   235f0:	b33c      	cbz	r4, 23642 <disabled_cb+0x62>
	adv->node_rx_cc_free = NULL;
   235f2:	2100      	movs	r1, #0
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   235f4:	2317      	movs	r3, #23
	adv->node_rx_cc_free = NULL;
   235f6:	6669      	str	r1, [r5, #100]	; 0x64
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   235f8:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
   235fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   235fe:	80e3      	strh	r3, [r4, #6]
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   23600:	f104 001c 	add.w	r0, r4, #28
   23604:	221e      	movs	r2, #30
   23606:	f011 ffa1 	bl	3554c <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   2360a:	233c      	movs	r3, #60	; 0x3c
   2360c:	7723      	strb	r3, [r4, #28]
	rx->hdr.rx_ftr.param = param;
   2360e:	60a6      	str	r6, [r4, #8]
	ll_rx_put_sched(link, rx);
   23610:	4621      	mov	r1, r4
   23612:	4638      	mov	r0, r7
}
   23614:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_put_sched(link, rx);
   23618:	f7ff ba88 	b.w	22b2c <ll_rx_put_sched>
	LL_ASSERT(adv->link_cc_free);
   2361c:	4a10      	ldr	r2, [pc, #64]	; (23660 <disabled_cb+0x80>)
   2361e:	4911      	ldr	r1, [pc, #68]	; (23664 <disabled_cb+0x84>)
   23620:	4811      	ldr	r0, [pc, #68]	; (23668 <disabled_cb+0x88>)
   23622:	f640 13bc 	movw	r3, #2492	; 0x9bc
   23626:	f00f fef7 	bl	33418 <assert_print>
   2362a:	4040      	eors	r0, r0
   2362c:	f380 8811 	msr	BASEPRI, r0
   23630:	f04f 0003 	mov.w	r0, #3
   23634:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
   23636:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	link = adv->link_cc_free;
   23638:	6e2f      	ldr	r7, [r5, #96]	; 0x60
	adv->link_cc_free = NULL;
   2363a:	2300      	movs	r3, #0
   2363c:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
   2363e:	2c00      	cmp	r4, #0
   23640:	d1d7      	bne.n	235f2 <disabled_cb+0x12>
   23642:	4a07      	ldr	r2, [pc, #28]	; (23660 <disabled_cb+0x80>)
   23644:	4909      	ldr	r1, [pc, #36]	; (2366c <disabled_cb+0x8c>)
   23646:	4808      	ldr	r0, [pc, #32]	; (23668 <disabled_cb+0x88>)
   23648:	f44f 631c 	mov.w	r3, #2496	; 0x9c0
   2364c:	f00f fee4 	bl	33418 <assert_print>
   23650:	4040      	eors	r0, r0
   23652:	f380 8811 	msr	BASEPRI, r0
   23656:	f04f 0003 	mov.w	r0, #3
   2365a:	df02      	svc	2
	rx = adv->node_rx_cc_free;
   2365c:	6e6c      	ldr	r4, [r5, #100]	; 0x64
   2365e:	e7c8      	b.n	235f2 <disabled_cb+0x12>
   23660:	0003a4c4 	.word	0x0003a4c4
   23664:	0003a52c 	.word	0x0003a52c
   23668:	00039f74 	.word	0x00039f74
   2366c:	0003a540 	.word	0x0003a540

00023670 <ticker_stop_op_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
   23670:	b100      	cbz	r0, 23674 <ticker_stop_op_cb+0x4>
   23672:	4770      	bx	lr
	mfy.param = param;
   23674:	4b0c      	ldr	r3, [pc, #48]	; (236a8 <ticker_stop_op_cb+0x38>)
{
   23676:	b510      	push	{r4, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   23678:	4602      	mov	r2, r0
   2367a:	460c      	mov	r4, r1
   2367c:	2002      	movs	r0, #2
   2367e:	2101      	movs	r1, #1
	mfy.param = param;
   23680:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   23682:	f7fb ff57 	bl	1f534 <mayfly_enqueue>
	LL_ASSERT(!ret);
   23686:	b900      	cbnz	r0, 2368a <ticker_stop_op_cb+0x1a>
}
   23688:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   2368a:	4a08      	ldr	r2, [pc, #32]	; (236ac <ticker_stop_op_cb+0x3c>)
   2368c:	4908      	ldr	r1, [pc, #32]	; (236b0 <ticker_stop_op_cb+0x40>)
   2368e:	4809      	ldr	r0, [pc, #36]	; (236b4 <ticker_stop_op_cb+0x44>)
   23690:	f44f 6319 	mov.w	r3, #2448	; 0x990
   23694:	f00f fec0 	bl	33418 <assert_print>
   23698:	4040      	eors	r0, r0
   2369a:	f380 8811 	msr	BASEPRI, r0
   2369e:	f04f 0003 	mov.w	r0, #3
   236a2:	df02      	svc	2
}
   236a4:	bd10      	pop	{r4, pc}
   236a6:	bf00      	nop
   236a8:	20000650 	.word	0x20000650
   236ac:	0003a4c4 	.word	0x0003a4c4
   236b0:	0003a43c 	.word	0x0003a43c
   236b4:	00039f74 	.word	0x00039f74

000236b8 <adv_disable>:
{
   236b8:	b538      	push	{r3, r4, r5, lr}
   236ba:	4604      	mov	r4, r0
   236bc:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
   236c0:	b353      	cbz	r3, 23718 <adv_disable+0x60>
		mfy.param = &adv->lll;
   236c2:	4d17      	ldr	r5, [pc, #92]	; (23720 <adv_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
   236c4:	6963      	ldr	r3, [r4, #20]
		mfy.param = &adv->lll;
   236c6:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   236c8:	b16b      	cbz	r3, 236e6 <adv_disable+0x2e>
   236ca:	4a16      	ldr	r2, [pc, #88]	; (23724 <adv_disable+0x6c>)
   236cc:	4916      	ldr	r1, [pc, #88]	; (23728 <adv_disable+0x70>)
   236ce:	4817      	ldr	r0, [pc, #92]	; (2372c <adv_disable+0x74>)
   236d0:	f640 13a5 	movw	r3, #2469	; 0x9a5
   236d4:	f00f fea0 	bl	33418 <assert_print>
   236d8:	4040      	eors	r0, r0
   236da:	f380 8811 	msr	BASEPRI, r0
   236de:	f04f 0003 	mov.w	r0, #3
   236e2:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   236e4:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   236e6:	4912      	ldr	r1, [pc, #72]	; (23730 <adv_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   236e8:	4b0d      	ldr	r3, [pc, #52]	; (23720 <adv_disable+0x68>)
   236ea:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   236ec:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   236f0:	4611      	mov	r1, r2
   236f2:	2001      	movs	r0, #1
   236f4:	f7fb ff1e 	bl	1f534 <mayfly_enqueue>
		LL_ASSERT(!ret);
   236f8:	b900      	cbnz	r0, 236fc <adv_disable+0x44>
}
   236fa:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   236fc:	4a09      	ldr	r2, [pc, #36]	; (23724 <adv_disable+0x6c>)
   236fe:	490d      	ldr	r1, [pc, #52]	; (23734 <adv_disable+0x7c>)
   23700:	480a      	ldr	r0, [pc, #40]	; (2372c <adv_disable+0x74>)
   23702:	f640 13ac 	movw	r3, #2476	; 0x9ac
   23706:	f00f fe87 	bl	33418 <assert_print>
   2370a:	4040      	eors	r0, r0
   2370c:	f380 8811 	msr	BASEPRI, r0
   23710:	f04f 0003 	mov.w	r0, #3
   23714:	df02      	svc	2
}
   23716:	bd38      	pop	{r3, r4, r5, pc}
   23718:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&adv->lll);
   2371c:	f7ff bf60 	b.w	235e0 <disabled_cb>
   23720:	20000640 	.word	0x20000640
   23724:	0003a4c4 	.word	0x0003a4c4
   23728:	0003a558 	.word	0x0003a558
   2372c:	00039f74 	.word	0x00039f74
   23730:	000235e1 	.word	0x000235e1
   23734:	0003a43c 	.word	0x0003a43c

00023738 <ticker_update_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   23738:	b900      	cbnz	r0, 2373c <ticker_update_op_cb+0x4>
   2373a:	4770      	bx	lr
{
   2373c:	b510      	push	{r4, lr}
   2373e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   23740:	f7ff fad8 	bl	22cf4 <ull_disable_mark_get>
   23744:	4284      	cmp	r4, r0
   23746:	d00c      	beq.n	23762 <ticker_update_op_cb+0x2a>
   23748:	4a06      	ldr	r2, [pc, #24]	; (23764 <ticker_update_op_cb+0x2c>)
   2374a:	4907      	ldr	r1, [pc, #28]	; (23768 <ticker_update_op_cb+0x30>)
   2374c:	4807      	ldr	r0, [pc, #28]	; (2376c <ticker_update_op_cb+0x34>)
   2374e:	f640 1361 	movw	r3, #2401	; 0x961
   23752:	f00f fe61 	bl	33418 <assert_print>
   23756:	4040      	eors	r0, r0
   23758:	f380 8811 	msr	BASEPRI, r0
   2375c:	f04f 0003 	mov.w	r0, #3
   23760:	df02      	svc	2
}
   23762:	bd10      	pop	{r4, pc}
   23764:	0003a4c4 	.word	0x0003a4c4
   23768:	0003a56c 	.word	0x0003a56c
   2376c:	00039f74 	.word	0x00039f74

00023770 <init_set.constprop.0>:
	pdu->tx_addr = 0;
	pdu->rx_addr = 0;
	pdu->len = BDADDR_SIZE;
}

static void init_set(struct ll_adv_set *adv)
   23770:	b500      	push	{lr}
{
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   23772:	4b13      	ldr	r3, [pc, #76]	; (237c0 <init_set.constprop.0+0x50>)
#if defined(CONFIG_BT_CTLR_PRIVACY)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
#endif /* CONFIG_BT_CTLR_PRIVACY */
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   23774:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   23776:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   2377a:	f893 c06a 	ldrb.w	ip, [r3, #106]	; 0x6a
   2377e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   23782:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
   23786:	f022 0202 	bic.w	r2, r2, #2
   2378a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   2378c:	f042 020e 	orr.w	r2, r2, #14
   23790:	849a      	strh	r2, [r3, #36]	; 0x24
	pdu->len = BDADDR_SIZE;
   23792:	2006      	movs	r0, #6
	pdu->type = pdu_type;
   23794:	2200      	movs	r2, #0
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   23796:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   2379a:	f36f 0c42 	bfc	ip, #1, #2
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   2379e:	f8a3 e068 	strh.w	lr, [r3, #104]	; 0x68
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   237a2:	f883 c06a 	strb.w	ip, [r3, #106]	; 0x6a
	pdu->type = pdu_type;
   237a6:	700a      	strb	r2, [r1, #0]
	pdu->len = BDADDR_SIZE;
   237a8:	7048      	strb	r0, [r1, #1]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   237aa:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
   237ae:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	pdu->type = pdu_type;
   237b2:	2204      	movs	r2, #4
   237b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   237b6:	701a      	strb	r2, [r3, #0]
	pdu->len = BDADDR_SIZE;
   237b8:	7058      	strb	r0, [r3, #1]
	init_pdu(lll_adv_data_peek(&ll_adv[0].lll), PDU_ADV_TYPE_ADV_IND);

#if !defined(CONFIG_BT_CTLR_ADV_EXT)
	init_pdu(lll_adv_scan_rsp_peek(&ll_adv[0].lll), PDU_ADV_TYPE_SCAN_RSP);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
}
   237ba:	f85d fb04 	ldr.w	pc, [sp], #4
   237be:	bf00      	nop
   237c0:	200025ec 	.word	0x200025ec

000237c4 <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
   237c4:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   237c6:	4c1b      	ldr	r4, [pc, #108]	; (23834 <conn_release.constprop.0+0x70>)
   237c8:	6a25      	ldr	r5, [r4, #32]
	LL_ASSERT(!lll->link_tx_free);
   237ca:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   237cc:	b163      	cbz	r3, 237e8 <conn_release.constprop.0+0x24>
   237ce:	4a1a      	ldr	r2, [pc, #104]	; (23838 <conn_release.constprop.0+0x74>)
   237d0:	491a      	ldr	r1, [pc, #104]	; (2383c <conn_release.constprop.0+0x78>)
   237d2:	481b      	ldr	r0, [pc, #108]	; (23840 <conn_release.constprop.0+0x7c>)
   237d4:	f640 13e9 	movw	r3, #2537	; 0x9e9
   237d8:	f00f fe1e 	bl	33418 <assert_print>
   237dc:	4040      	eors	r0, r0
   237de:	f380 8811 	msr	BASEPRI, r0
   237e2:	f04f 0003 	mov.w	r0, #3
   237e6:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   237e8:	f105 0160 	add.w	r1, r5, #96	; 0x60
   237ec:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   237f0:	f7fb fe20 	bl	1f434 <memq_deinit>
	LL_ASSERT(link);
   237f4:	4606      	mov	r6, r0
   237f6:	b170      	cbz	r0, 23816 <conn_release.constprop.0+0x52>
	ll_conn_release(lll->hdr.parent);
   237f8:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   237fa:	66ee      	str	r6, [r5, #108]	; 0x6c
	adv->lll.conn = NULL;
   237fc:	2500      	movs	r5, #0
	ll_conn_release(lll->hdr.parent);
   237fe:	f000 fdf5 	bl	243ec <ll_conn_release>
	ll_rx_release(adv->node_rx_cc_free);
   23802:	6e60      	ldr	r0, [r4, #100]	; 0x64
	adv->lll.conn = NULL;
   23804:	6225      	str	r5, [r4, #32]
	ll_rx_release(adv->node_rx_cc_free);
   23806:	f7ff f981 	bl	22b0c <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
   2380a:	6e20      	ldr	r0, [r4, #96]	; 0x60
	adv->node_rx_cc_free = NULL;
   2380c:	6665      	str	r5, [r4, #100]	; 0x64
	ll_rx_link_release(adv->link_cc_free);
   2380e:	f7ff f971 	bl	22af4 <ll_rx_link_release>
	adv->link_cc_free = NULL;
   23812:	6625      	str	r5, [r4, #96]	; 0x60
}
   23814:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   23816:	4a08      	ldr	r2, [pc, #32]	; (23838 <conn_release.constprop.0+0x74>)
   23818:	490a      	ldr	r1, [pc, #40]	; (23844 <conn_release.constprop.0+0x80>)
   2381a:	4809      	ldr	r0, [pc, #36]	; (23840 <conn_release.constprop.0+0x7c>)
   2381c:	f640 13eb 	movw	r3, #2539	; 0x9eb
   23820:	f00f fdfa 	bl	33418 <assert_print>
   23824:	4040      	eors	r0, r0
   23826:	f380 8811 	msr	BASEPRI, r0
   2382a:	f04f 0003 	mov.w	r0, #3
   2382e:	df02      	svc	2
   23830:	e7e2      	b.n	237f8 <conn_release.constprop.0+0x34>
   23832:	bf00      	nop
   23834:	200025ec 	.word	0x200025ec
   23838:	0003a4c4 	.word	0x0003a4c4
   2383c:	0003a59c 	.word	0x0003a59c
   23840:	00039f74 	.word	0x00039f74
   23844:	0003a6a0 	.word	0x0003a6a0

00023848 <disable.constprop.0>:
static inline uint8_t disable(uint8_t handle)
   23848:	b530      	push	{r4, r5, lr}
	if (!adv || !adv->is_enabled) {
   2384a:	4c50      	ldr	r4, [pc, #320]	; (2398c <disable.constprop.0+0x144>)
   2384c:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   23850:	07d9      	lsls	r1, r3, #31
static inline uint8_t disable(uint8_t handle)
   23852:	b085      	sub	sp, #20
	if (!adv || !adv->is_enabled) {
   23854:	d562      	bpl.n	2391c <disable.constprop.0+0xd4>
	if (adv->lll.conn) {
   23856:	6a23      	ldr	r3, [r4, #32]
   23858:	b153      	cbz	r3, 23870 <disable.constprop.0+0x28>
		adv->lll.conn->periph.cancelled = 1U;
   2385a:	f893 2020 	ldrb.w	r2, [r3, #32]
   2385e:	f042 0202 	orr.w	r2, r2, #2
   23862:	f883 2020 	strb.w	r2, [r3, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
   23866:	6a23      	ldr	r3, [r4, #32]
   23868:	f893 3020 	ldrb.w	r3, [r3, #32]
   2386c:	07da      	lsls	r2, r3, #31
   2386e:	d46a      	bmi.n	23946 <disable.constprop.0+0xfe>
	mark = ull_disable_mark(adv);
   23870:	4846      	ldr	r0, [pc, #280]	; (2398c <disable.constprop.0+0x144>)
   23872:	f7ff fa27 	bl	22cc4 <ull_disable_mark>
	LL_ASSERT(mark == adv);
   23876:	4284      	cmp	r4, r0
   23878:	d00c      	beq.n	23894 <disable.constprop.0+0x4c>
   2387a:	4a45      	ldr	r2, [pc, #276]	; (23990 <disable.constprop.0+0x148>)
   2387c:	4945      	ldr	r1, [pc, #276]	; (23994 <disable.constprop.0+0x14c>)
   2387e:	4846      	ldr	r0, [pc, #280]	; (23998 <disable.constprop.0+0x150>)
   23880:	f640 23b4 	movw	r3, #2740	; 0xab4
   23884:	f00f fdc8 	bl	33418 <assert_print>
   23888:	4040      	eors	r0, r0
   2388a:	f380 8811 	msr	BASEPRI, r0
   2388e:	f04f 0003 	mov.w	r0, #3
   23892:	df02      	svc	2
	if (adv->lll.is_hdcd) {
   23894:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   23898:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   2389a:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
   2389c:	d50d      	bpl.n	238ba <disable.constprop.0+0x72>
		ret_cb = TICKER_STATUS_BUSY;
   2389e:	2102      	movs	r1, #2
   238a0:	9103      	str	r1, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   238a2:	4b3e      	ldr	r3, [pc, #248]	; (2399c <disable.constprop.0+0x154>)
   238a4:	9500      	str	r5, [sp, #0]
   238a6:	2103      	movs	r1, #3
   238a8:	2201      	movs	r2, #1
   238aa:	2000      	movs	r0, #0
   238ac:	f7fc ff1c 	bl	206e8 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   238b0:	4629      	mov	r1, r5
   238b2:	f7ff f9df 	bl	22c74 <ull_ticker_status_take>
		if (ret) {
   238b6:	2800      	cmp	r0, #0
   238b8:	d155      	bne.n	23966 <disable.constprop.0+0x11e>
	ret_cb = TICKER_STATUS_BUSY;
   238ba:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   238bc:	2103      	movs	r1, #3
   238be:	4b37      	ldr	r3, [pc, #220]	; (2399c <disable.constprop.0+0x154>)
   238c0:	9500      	str	r5, [sp, #0]
   238c2:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
   238c4:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   238c6:	f7fc ff0f 	bl	206e8 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   238ca:	4629      	mov	r1, r5
   238cc:	f7ff f9d2 	bl	22c74 <ull_ticker_status_take>
	if (ret) {
   238d0:	bb38      	cbnz	r0, 23922 <disable.constprop.0+0xda>
	err = ull_disable(&adv->lll);
   238d2:	4833      	ldr	r0, [pc, #204]	; (239a0 <disable.constprop.0+0x158>)
   238d4:	f7ff fa32 	bl	22d3c <ull_disable>
	LL_ASSERT(!err || (err == -EALREADY));
   238d8:	b108      	cbz	r0, 238de <disable.constprop.0+0x96>
   238da:	3078      	adds	r0, #120	; 0x78
   238dc:	d135      	bne.n	2394a <disable.constprop.0+0x102>
	mark = ull_disable_unmark(adv);
   238de:	482b      	ldr	r0, [pc, #172]	; (2398c <disable.constprop.0+0x144>)
   238e0:	f7ff f9fc 	bl	22cdc <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   238e4:	4284      	cmp	r4, r0
   238e6:	d00c      	beq.n	23902 <disable.constprop.0+0xba>
   238e8:	4a29      	ldr	r2, [pc, #164]	; (23990 <disable.constprop.0+0x148>)
   238ea:	492a      	ldr	r1, [pc, #168]	; (23994 <disable.constprop.0+0x14c>)
   238ec:	482a      	ldr	r0, [pc, #168]	; (23998 <disable.constprop.0+0x150>)
   238ee:	f640 23d6 	movw	r3, #2774	; 0xad6
   238f2:	f00f fd91 	bl	33418 <assert_print>
   238f6:	4040      	eors	r0, r0
   238f8:	f380 8811 	msr	BASEPRI, r0
   238fc:	f04f 0003 	mov.w	r0, #3
   23900:	df02      	svc	2
	if (adv->lll.conn) {
   23902:	6a23      	ldr	r3, [r4, #32]
   23904:	b10b      	cbz	r3, 2390a <disable.constprop.0+0xc2>
		conn_release(adv);
   23906:	f7ff ff5d 	bl	237c4 <conn_release.constprop.0>
	adv->is_enabled = 0U;
   2390a:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   2390e:	f36f 0300 	bfc	r3, #0, #1
		ull_filter_adv_scan_state_cb(0);
   23912:	2000      	movs	r0, #0
	adv->is_enabled = 0U;
   23914:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
		ull_filter_adv_scan_state_cb(0);
   23918:	f006 fc0e 	bl	2a138 <ull_filter_adv_scan_state_cb>
			return 0;
   2391c:	2000      	movs	r0, #0
}
   2391e:	b005      	add	sp, #20
   23920:	bd30      	pop	{r4, r5, pc}
		mark = ull_disable_unmark(adv);
   23922:	481a      	ldr	r0, [pc, #104]	; (2398c <disable.constprop.0+0x144>)
   23924:	f7ff f9da 	bl	22cdc <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   23928:	4284      	cmp	r4, r0
   2392a:	d00c      	beq.n	23946 <disable.constprop.0+0xfe>
   2392c:	4a18      	ldr	r2, [pc, #96]	; (23990 <disable.constprop.0+0x148>)
   2392e:	4919      	ldr	r1, [pc, #100]	; (23994 <disable.constprop.0+0x14c>)
   23930:	4819      	ldr	r0, [pc, #100]	; (23998 <disable.constprop.0+0x150>)
   23932:	f640 23cd 	movw	r3, #2765	; 0xacd
   23936:	f00f fd6f 	bl	33418 <assert_print>
   2393a:	4040      	eors	r0, r0
   2393c:	f380 8811 	msr	BASEPRI, r0
   23940:	f04f 0003 	mov.w	r0, #3
   23944:	df02      	svc	2
			return BT_HCI_ERR_CMD_DISALLOWED;
   23946:	200c      	movs	r0, #12
   23948:	e7e9      	b.n	2391e <disable.constprop.0+0xd6>
	LL_ASSERT(!err || (err == -EALREADY));
   2394a:	4a11      	ldr	r2, [pc, #68]	; (23990 <disable.constprop.0+0x148>)
   2394c:	4915      	ldr	r1, [pc, #84]	; (239a4 <disable.constprop.0+0x15c>)
   2394e:	4812      	ldr	r0, [pc, #72]	; (23998 <disable.constprop.0+0x150>)
   23950:	f640 23d3 	movw	r3, #2771	; 0xad3
   23954:	f00f fd60 	bl	33418 <assert_print>
   23958:	4040      	eors	r0, r0
   2395a:	f380 8811 	msr	BASEPRI, r0
   2395e:	f04f 0003 	mov.w	r0, #3
   23962:	df02      	svc	2
   23964:	e7bb      	b.n	238de <disable.constprop.0+0x96>
			mark = ull_disable_unmark(adv);
   23966:	4809      	ldr	r0, [pc, #36]	; (2398c <disable.constprop.0+0x144>)
   23968:	f7ff f9b8 	bl	22cdc <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   2396c:	4284      	cmp	r4, r0
   2396e:	d0ea      	beq.n	23946 <disable.constprop.0+0xfe>
   23970:	4a07      	ldr	r2, [pc, #28]	; (23990 <disable.constprop.0+0x148>)
   23972:	4908      	ldr	r1, [pc, #32]	; (23994 <disable.constprop.0+0x14c>)
   23974:	4808      	ldr	r0, [pc, #32]	; (23998 <disable.constprop.0+0x150>)
   23976:	f640 23bf 	movw	r3, #2751	; 0xabf
   2397a:	f00f fd4d 	bl	33418 <assert_print>
   2397e:	4040      	eors	r0, r0
   23980:	f380 8811 	msr	BASEPRI, r0
   23984:	f04f 0003 	mov.w	r0, #3
   23988:	df02      	svc	2
   2398a:	e7dc      	b.n	23946 <disable.constprop.0+0xfe>
   2398c:	200025ec 	.word	0x200025ec
   23990:	0003a4c4 	.word	0x0003a4c4
   23994:	0003a5b0 	.word	0x0003a5b0
   23998:	00039f74 	.word	0x00039f74
   2399c:	00022209 	.word	0x00022209
   239a0:	20002608 	.word	0x20002608
   239a4:	0003a5bc 	.word	0x0003a5bc

000239a8 <adv_time_get.constprop.0.isra.0>:
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   239a8:	7803      	ldrb	r3, [r0, #0]
   239aa:	f003 030f 	and.w	r3, r3, #15
				   rxtx_turn_us * (adv_chn_cnt - 1);
   239ae:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   239b2:	2b02      	cmp	r3, #2
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   239b4:	fa1f fc8c 	uxth.w	ip, ip
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   239b8:	d025      	beq.n	23a06 <adv_time_get.constprop.0.isra.0+0x5e>
			if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   239ba:	2b01      	cmp	r3, #1
   239bc:	d00d      	beq.n	239da <adv_time_get.constprop.0.isra.0+0x32>
			BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
   239be:	3110      	adds	r1, #16
		const uint16_t scan_rsp_us =
   239c0:	00c9      	lsls	r1, r1, #3
			} else if (pdu->type == PDU_ADV_TYPE_ADV_IND) {
   239c2:	b19b      	cbz	r3, 239ec <adv_time_get.constprop.0.isra.0+0x44>
			} else if (pdu->type == PDU_ADV_TYPE_SCAN_IND) {
   239c4:	2b06      	cmp	r3, #6
   239c6:	d011      	beq.n	239ec <adv_time_get.constprop.0.isra.0+0x44>
   239c8:	f44f 73f3 	mov.w	r3, #486	; 0x1e6
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
   239cc:	fb13 f30c 	smulbb	r3, r3, ip
   239d0:	f240 208f 	movw	r0, #655	; 0x28f
			time_us += (BYTES2US(adv_size, PHY_1M) +
   239d4:	4418      	add	r0, r3
   239d6:	b280      	uxth	r0, r0
}
   239d8:	4770      	bx	lr
   239da:	f240 2316 	movw	r3, #534	; 0x216
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
   239de:	fb13 f30c 	smulbb	r3, r3, ip
   239e2:	f240 401f 	movw	r0, #1055	; 0x41f
			time_us += (BYTES2US(adv_size, PHY_1M) +
   239e6:	4418      	add	r0, r3
   239e8:	b280      	uxth	r0, r0
}
   239ea:	4770      	bx	lr
				adv_size += pdu->len;
   239ec:	7840      	ldrb	r0, [r0, #1]
   239ee:	3010      	adds	r0, #16
			time_us += (BYTES2US(adv_size, PHY_1M) +
   239f0:	00c0      	lsls	r0, r0, #3
   239f2:	f201 3157 	addw	r1, r1, #855	; 0x357
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
   239f6:	f500 73b3 	add.w	r3, r0, #358	; 0x166
   239fa:	fb13 f30c 	smulbb	r3, r3, ip
   239fe:	4408      	add	r0, r1
			time_us += (BYTES2US(adv_size, PHY_1M) +
   23a00:	4418      	add	r0, r3
   23a02:	b280      	uxth	r0, r0
}
   23a04:	4770      	bx	lr
			adv_size += pdu->len;
   23a06:	7841      	ldrb	r1, [r0, #1]
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   23a08:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
   23a0c:	ebc3 1003 	rsb	r0, r3, r3, lsl #4
   23a10:	0040      	lsls	r0, r0, #1
   23a12:	f101 0310 	add.w	r3, r1, #16
   23a16:	00db      	lsls	r3, r3, #3
   23a18:	f200 1077 	addw	r0, r0, #375	; 0x177
   23a1c:	fb03 0202 	mla	r2, r3, r2, r0
   23a20:	b290      	uxth	r0, r2
   23a22:	4770      	bx	lr

00023a24 <ticker_cb>:
{
   23a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23a28:	461d      	mov	r5, r3
   23a2a:	b08a      	sub	sp, #40	; 0x28
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   23a2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   23a30:	429d      	cmp	r5, r3
{
   23a32:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   23a36:	9c11      	ldr	r4, [sp, #68]	; 0x44
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   23a38:	d018      	beq.n	23a6c <ticker_cb+0x48>
	return ++hdr->ref;
   23a3a:	7823      	ldrb	r3, [r4, #0]
   23a3c:	3301      	adds	r3, #1
   23a3e:	b2db      	uxtb	r3, r3
   23a40:	4607      	mov	r7, r0
   23a42:	4616      	mov	r6, r2
   23a44:	7023      	strb	r3, [r4, #0]
		LL_ASSERT(ref);
   23a46:	2b00      	cmp	r3, #0
   23a48:	d063      	beq.n	23b12 <ticker_cb+0xee>
		p.ticks_at_expire = ticks_at_expire;
   23a4a:	4939      	ldr	r1, [pc, #228]	; (23b30 <ticker_cb+0x10c>)
		mfy.param = &p;
   23a4c:	4b39      	ldr	r3, [pc, #228]	; (23b34 <ticker_cb+0x110>)
		p.lazy = lazy;
   23a4e:	810d      	strh	r5, [r1, #8]
	lll = &adv->lll;
   23a50:	f104 001c 	add.w	r0, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   23a54:	2200      	movs	r2, #0
		p.param = lll;
   23a56:	60c8      	str	r0, [r1, #12]
		p.remainder = remainder;
   23a58:	e9c1 7600 	strd	r7, r6, [r1]
		p.force = force;
   23a5c:	f881 800a 	strb.w	r8, [r1, #10]
		mfy.param = &p;
   23a60:	6099      	str	r1, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   23a62:	2001      	movs	r0, #1
   23a64:	4611      	mov	r1, r2
   23a66:	f7fb fd65 	bl	1f534 <mayfly_enqueue>
		LL_ASSERT(!ret);
   23a6a:	b938      	cbnz	r0, 23a7c <ticker_cb+0x58>
	if (!lll->is_hdcd)
   23a6c:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   23a70:	f010 0501 	ands.w	r5, r0, #1
   23a74:	d014      	beq.n	23aa0 <ticker_cb+0x7c>
}
   23a76:	b00a      	add	sp, #40	; 0x28
   23a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
   23a7c:	4a2e      	ldr	r2, [pc, #184]	; (23b38 <ticker_cb+0x114>)
   23a7e:	492f      	ldr	r1, [pc, #188]	; (23b3c <ticker_cb+0x118>)
   23a80:	482f      	ldr	r0, [pc, #188]	; (23b40 <ticker_cb+0x11c>)
   23a82:	f640 132e 	movw	r3, #2350	; 0x92e
   23a86:	f00f fcc7 	bl	33418 <assert_print>
   23a8a:	4040      	eors	r0, r0
   23a8c:	f380 8811 	msr	BASEPRI, r0
   23a90:	f04f 0003 	mov.w	r0, #3
   23a94:	df02      	svc	2
	if (!lll->is_hdcd)
   23a96:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   23a9a:	f010 0501 	ands.w	r5, r0, #1
   23a9e:	d1ea      	bne.n	23a76 <ticker_cb+0x52>
	lll_rand_isr_get(&random_delay, sizeof(random_delay));
   23aa0:	2104      	movs	r1, #4
   23aa2:	a809      	add	r0, sp, #36	; 0x24
   23aa4:	f007 f97a 	bl	2ad9c <lll_rand_isr_get>
	random_delay %= ticks_delay_window;
   23aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23aaa:	4a26      	ldr	r2, [pc, #152]	; (23b44 <ticker_cb+0x120>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   23aac:	9406      	str	r4, [sp, #24]
	random_delay %= ticks_delay_window;
   23aae:	fba2 1203 	umull	r1, r2, r2, r3
   23ab2:	1a99      	subs	r1, r3, r2
   23ab4:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   23ab8:	0a12      	lsrs	r2, r2, #8
   23aba:	f240 1147 	movw	r1, #327	; 0x147
   23abe:	fb01 3312 	mls	r3, r1, r2, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   23ac2:	4a21      	ldr	r2, [pc, #132]	; (23b48 <ticker_cb+0x124>)
   23ac4:	4921      	ldr	r1, [pc, #132]	; (23b4c <ticker_cb+0x128>)
   23ac6:	1aa2      	subs	r2, r4, r2
   23ac8:	fba1 1202 	umull	r1, r2, r1, r2
   23acc:	0992      	lsrs	r2, r2, #6
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   23ace:	4920      	ldr	r1, [pc, #128]	; (23b50 <ticker_cb+0x12c>)
   23ad0:	3202      	adds	r2, #2
   23ad2:	e9cd 5104 	strd	r5, r1, [sp, #16]
	random_delay += (ticks_delay_window_offset + 1);
   23ad6:	3301      	adds	r3, #1
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   23ad8:	e9cd 5502 	strd	r5, r5, [sp, #8]
   23adc:	e9cd 5500 	strd	r5, r5, [sp]
   23ae0:	b2d2      	uxtb	r2, r2
   23ae2:	2101      	movs	r1, #1
   23ae4:	4628      	mov	r0, r5
	random_delay += (ticks_delay_window_offset + 1);
   23ae6:	9309      	str	r3, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   23ae8:	f7fc fde6 	bl	206b8 <ticker_update>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   23aec:	f010 0ffd 	tst.w	r0, #253	; 0xfd
   23af0:	d0c1      	beq.n	23a76 <ticker_cb+0x52>
   23af2:	4a11      	ldr	r2, [pc, #68]	; (23b38 <ticker_cb+0x114>)
   23af4:	4917      	ldr	r1, [pc, #92]	; (23b54 <ticker_cb+0x130>)
   23af6:	4812      	ldr	r0, [pc, #72]	; (23b40 <ticker_cb+0x11c>)
   23af8:	f240 73b2 	movw	r3, #1970	; 0x7b2
   23afc:	f00f fc8c 	bl	33418 <assert_print>
   23b00:	4040      	eors	r0, r0
   23b02:	f380 8811 	msr	BASEPRI, r0
   23b06:	f04f 0003 	mov.w	r0, #3
   23b0a:	df02      	svc	2
}
   23b0c:	b00a      	add	sp, #40	; 0x28
   23b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(ref);
   23b12:	4a09      	ldr	r2, [pc, #36]	; (23b38 <ticker_cb+0x114>)
   23b14:	4910      	ldr	r1, [pc, #64]	; (23b58 <ticker_cb+0x134>)
   23b16:	480a      	ldr	r0, [pc, #40]	; (23b40 <ticker_cb+0x11c>)
   23b18:	f640 1321 	movw	r3, #2337	; 0x921
   23b1c:	f00f fc7c 	bl	33418 <assert_print>
   23b20:	4040      	eors	r0, r0
   23b22:	f380 8811 	msr	BASEPRI, r0
   23b26:	f04f 0003 	mov.w	r0, #3
   23b2a:	df02      	svc	2
   23b2c:	e78d      	b.n	23a4a <ticker_cb+0x26>
   23b2e:	bf00      	nop
   23b30:	200025c0 	.word	0x200025c0
   23b34:	20000630 	.word	0x20000630
   23b38:	0003a4c4 	.word	0x0003a4c4
   23b3c:	0003a43c 	.word	0x0003a43c
   23b40:	00039f74 	.word	0x00039f74
   23b44:	90d4f121 	.word	0x90d4f121
   23b48:	200025ec 	.word	0x200025ec
   23b4c:	8d3dcb09 	.word	0x8d3dcb09
   23b50:	00023739 	.word	0x00023739
   23b54:	0003a5d8 	.word	0x0003a5d8
   23b58:	0003a5d4 	.word	0x0003a5d4

00023b5c <ll_adv_params_set>:
{
   23b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!adv || adv->is_enabled) {
   23b60:	4c6c      	ldr	r4, [pc, #432]	; (23d14 <ll_adv_params_set+0x1b8>)
{
   23b62:	461f      	mov	r7, r3
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   23b64:	4b6c      	ldr	r3, [pc, #432]	; (23d18 <ll_adv_params_set+0x1bc>)
	if (!adv || adv->is_enabled) {
   23b66:	f894 606a 	ldrb.w	r6, [r4, #106]	; 0x6a
{
   23b6a:	4686      	mov	lr, r0
   23b6c:	468c      	mov	ip, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   23b6e:	e893 0003 	ldmia.w	r3, {r0, r1}
{
   23b72:	b082      	sub	sp, #8
	if (!adv || adv->is_enabled) {
   23b74:	f016 0601 	ands.w	r6, r6, #1
{
   23b78:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
   23b7c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   23b80:	9000      	str	r0, [sp, #0]
   23b82:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
   23b86:	f040 8087 	bne.w	23c98 <ll_adv_params_set+0x13c>
	adv->lll.chan_map = chan_map;
   23b8a:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
   23b8c:	4615      	mov	r5, r2
   23b8e:	f008 0207 	and.w	r2, r8, #7
   23b92:	f003 0303 	and.w	r3, r3, #3
   23b96:	0052      	lsls	r2, r2, #1
   23b98:	f421 7143 	bic.w	r1, r1, #780	; 0x30c
   23b9c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   23ba0:	f021 0102 	bic.w	r1, r1, #2
   23ba4:	430a      	orrs	r2, r1
   23ba6:	84a2      	strh	r2, [r4, #36]	; 0x24
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   23ba8:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
   23bac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		adv->interval = 0;
   23bb0:	f1bc 0f01 	cmp.w	ip, #1
	pdu->type = pdu_adv_type[adv_type];
   23bb4:	f10c 0308 	add.w	r3, ip, #8
   23bb8:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
		adv->interval = 0;
   23bbc:	bf08      	it	eq
   23bbe:	f04f 0e00 	moveq.w	lr, #0
	pdu->type = pdu_adv_type[adv_type];
   23bc2:	eb0d 0c03 	add.w	ip, sp, r3
   23bc6:	f8a4 e068 	strh.w	lr, [r4, #104]	; 0x68
	pdu_type_prev = pdu->type;
   23bca:	f898 9000 	ldrb.w	r9, [r8]
	pdu->type = pdu_adv_type[adv_type];
   23bce:	f81c 3c08 	ldrb.w	r3, [ip, #-8]
   23bd2:	f029 011f 	bic.w	r1, r9, #31
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   23bd6:	f013 0f0e 	tst.w	r3, #14
	pdu->type = pdu_adv_type[adv_type];
   23bda:	f003 030f 	and.w	r3, r3, #15
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   23bde:	bf0c      	ite	eq
   23be0:	2201      	moveq	r2, #1
   23be2:	2200      	movne	r2, #0
   23be4:	430b      	orrs	r3, r1
   23be6:	f362 1345 	bfi	r3, r2, #5, #1
   23bea:	f888 3000 	strb.w	r3, [r8]
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   23bee:	f003 030f 	and.w	r3, r3, #15
   23bf2:	2b01      	cmp	r3, #1
	pdu_type_prev = pdu->type;
   23bf4:	f009 090f 	and.w	r9, r9, #15
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   23bf8:	d045      	beq.n	23c86 <ll_adv_params_set+0x12a>
	adv->own_addr_type = own_addr_type;
   23bfa:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   23bfe:	f365 0342 	bfi	r3, r5, #1, #2
   23c02:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   23c06:	b2da      	uxtb	r2, r3
   23c08:	075b      	lsls	r3, r3, #29
   23c0a:	d508      	bpl.n	23c1e <ll_adv_params_set+0xc2>
		adv->peer_addr_type = direct_addr_type;
   23c0c:	f367 02c3 	bfi	r2, r7, #3, #1
   23c10:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
		memcpy(&adv->peer_addr, direct_addr, BDADDR_SIZE);
   23c14:	4841      	ldr	r0, [pc, #260]	; (23d1c <ll_adv_params_set+0x1c0>)
   23c16:	990a      	ldr	r1, [sp, #40]	; 0x28
   23c18:	2206      	movs	r2, #6
   23c1a:	f011 fc8c 	bl	35536 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   23c1e:	f898 3000 	ldrb.w	r3, [r8]
   23c22:	f003 020f 	and.w	r2, r3, #15
   23c26:	2a01      	cmp	r2, #1
		pdu->tx_addr = own_addr_type & 0x1;
   23c28:	f005 0a01 	and.w	sl, r5, #1
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   23c2c:	d039      	beq.n	23ca2 <ll_adv_params_set+0x146>
	} else if (pdu->len == 0) {
   23c2e:	f898 2001 	ldrb.w	r2, [r8, #1]
   23c32:	b1f2      	cbz	r2, 23c72 <ll_adv_params_set+0x116>
		if (((pdu_type_prev == PDU_ADV_TYPE_DIRECT_IND) ||
   23c34:	f1b9 0f01 	cmp.w	r9, #1
   23c38:	d04e      	beq.n	23cd8 <ll_adv_params_set+0x17c>
		pdu->tx_addr = own_addr_type & 0x1;
   23c3a:	f898 3000 	ldrb.w	r3, [r8]
   23c3e:	f36a 1386 	bfi	r3, sl, #6, #1
		pdu->rx_addr = 0;
   23c42:	f36f 13c7 	bfc	r3, #7, #1
   23c46:	f888 3000 	strb.w	r3, [r8]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   23c4a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   23c4e:	61e4      	str	r4, [r4, #28]
   23c50:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   23c54:	01ad      	lsls	r5, r5, #6
   23c56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   23c58:	f005 0540 	and.w	r5, r5, #64	; 0x40
		if (pdu->len == 0) {
   23c5c:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   23c5e:	f045 0504 	orr.w	r5, r5, #4
   23c62:	701d      	strb	r5, [r3, #0]
		if (pdu->len == 0) {
   23c64:	b90a      	cbnz	r2, 23c6a <ll_adv_params_set+0x10e>
			pdu->len = BDADDR_SIZE;
   23c66:	2206      	movs	r2, #6
   23c68:	705a      	strb	r2, [r3, #1]
}
   23c6a:	4630      	mov	r0, r6
   23c6c:	b002      	add	sp, #8
   23c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pdu->tx_addr = own_addr_type & 0x1;
   23c72:	f36a 1386 	bfi	r3, sl, #6, #1
		pdu->rx_addr = 0;
   23c76:	f362 13c7 	bfi	r3, r2, #7, #1
   23c7a:	f888 3000 	strb.w	r3, [r8]
		pdu->len = BDADDR_SIZE;
   23c7e:	2306      	movs	r3, #6
   23c80:	f888 3001 	strb.w	r3, [r8, #1]
   23c84:	e7e1      	b.n	23c4a <ll_adv_params_set+0xee>
	    (pdu_type_prev != PDU_ADV_TYPE_DIRECT_IND) &&
   23c86:	f1b9 0f01 	cmp.w	r9, #1
   23c8a:	d0b6      	beq.n	23bfa <ll_adv_params_set+0x9e>
		if (pdu->len == 0U) {
   23c8c:	f898 2001 	ldrb.w	r2, [r8, #1]
   23c90:	b9b2      	cbnz	r2, 23cc0 <ll_adv_params_set+0x164>
			adv->ad_data_backup.len = 0U;
   23c92:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
   23c96:	e7b0      	b.n	23bfa <ll_adv_params_set+0x9e>
		return BT_HCI_ERR_CMD_DISALLOWED;
   23c98:	260c      	movs	r6, #12
}
   23c9a:	4630      	mov	r0, r6
   23c9c:	b002      	add	sp, #8
   23c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pdu->rx_addr = direct_addr_type;
   23ca2:	4640      	mov	r0, r8
		pdu->tx_addr = own_addr_type & 0x1;
   23ca4:	f36a 1386 	bfi	r3, sl, #6, #1
		pdu->rx_addr = direct_addr_type;
   23ca8:	f367 13c7 	bfi	r3, r7, #7, #1
   23cac:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   23cb0:	990a      	ldr	r1, [sp, #40]	; 0x28
   23cb2:	2206      	movs	r2, #6
   23cb4:	f011 fc3f 	bl	35536 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   23cb8:	230c      	movs	r3, #12
   23cba:	f888 3001 	strb.w	r3, [r8, #1]
   23cbe:	e7c4      	b.n	23c4a <ll_adv_params_set+0xee>
			LL_ASSERT(pdu->len >=
   23cc0:	2a05      	cmp	r2, #5
   23cc2:	d916      	bls.n	23cf2 <ll_adv_params_set+0x196>
			adv->ad_data_backup.len = pdu->len -
   23cc4:	3a06      	subs	r2, #6
   23cc6:	b2d2      	uxtb	r2, r2
   23cc8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
   23ccc:	f108 0108 	add.w	r1, r8, #8
   23cd0:	4813      	ldr	r0, [pc, #76]	; (23d20 <ll_adv_params_set+0x1c4>)
   23cd2:	f011 fc30 	bl	35536 <memcpy>
   23cd6:	e790      	b.n	23bfa <ll_adv_params_set+0x9e>
			memcpy(pdu->adv_ind.data, adv->ad_data_backup.data,
   23cd8:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   23cdc:	4910      	ldr	r1, [pc, #64]	; (23d20 <ll_adv_params_set+0x1c4>)
   23cde:	f108 0008 	add.w	r0, r8, #8
   23ce2:	f011 fc28 	bl	35536 <memcpy>
			pdu->len = offsetof(struct pdu_adv_adv_ind, data) +
   23ce6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   23cea:	3306      	adds	r3, #6
   23cec:	f888 3001 	strb.w	r3, [r8, #1]
   23cf0:	e7a3      	b.n	23c3a <ll_adv_params_set+0xde>
			LL_ASSERT(pdu->len >=
   23cf2:	4a0c      	ldr	r2, [pc, #48]	; (23d24 <ll_adv_params_set+0x1c8>)
   23cf4:	490c      	ldr	r1, [pc, #48]	; (23d28 <ll_adv_params_set+0x1cc>)
   23cf6:	480d      	ldr	r0, [pc, #52]	; (23d2c <ll_adv_params_set+0x1d0>)
   23cf8:	f240 13af 	movw	r3, #431	; 0x1af
   23cfc:	f00f fb8c 	bl	33418 <assert_print>
   23d00:	4040      	eors	r0, r0
   23d02:	f380 8811 	msr	BASEPRI, r0
   23d06:	f04f 0003 	mov.w	r0, #3
   23d0a:	df02      	svc	2
			adv->ad_data_backup.len = pdu->len -
   23d0c:	f898 2001 	ldrb.w	r2, [r8, #1]
   23d10:	e7d8      	b.n	23cc4 <ll_adv_params_set+0x168>
   23d12:	bf00      	nop
   23d14:	200025ec 	.word	0x200025ec
   23d18:	00039794 	.word	0x00039794
   23d1c:	20002657 	.word	0x20002657
   23d20:	2000262d 	.word	0x2000262d
   23d24:	0003a4c4 	.word	0x0003a4c4
   23d28:	0003a610 	.word	0x0003a610
   23d2c:	00039f74 	.word	0x00039f74

00023d30 <ull_adv_init>:
{
   23d30:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   23d32:	4c06      	ldr	r4, [pc, #24]	; (23d4c <ull_adv_init+0x1c>)
   23d34:	4620      	mov	r0, r4
   23d36:	f007 fc71 	bl	2b61c <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   23d3a:	f104 000c 	add.w	r0, r4, #12
   23d3e:	f007 fc6d 	bl	2b61c <lll_adv_data_init>
	init_set(&ll_adv[0]);
   23d42:	f7ff fd15 	bl	23770 <init_set.constprop.0>
}
   23d46:	2000      	movs	r0, #0
   23d48:	bd10      	pop	{r4, pc}
   23d4a:	bf00      	nop
   23d4c:	20002614 	.word	0x20002614

00023d50 <ull_adv_reset>:
{
   23d50:	b508      	push	{r3, lr}
		(void)disable(handle);
   23d52:	f7ff fd79 	bl	23848 <disable.constprop.0>
}
   23d56:	2000      	movs	r0, #0
   23d58:	bd08      	pop	{r3, pc}
   23d5a:	bf00      	nop

00023d5c <ull_adv_reset_finalize>:
{
   23d5c:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_reset(&lll->adv_data);
   23d5e:	4c09      	ldr	r4, [pc, #36]	; (23d84 <ull_adv_reset_finalize+0x28>)
		lll_adv_data_reset(&lll->scan_rsp);
   23d60:	f104 050c 	add.w	r5, r4, #12
		lll_adv_data_reset(&lll->adv_data);
   23d64:	4620      	mov	r0, r4
   23d66:	f007 fc69 	bl	2b63c <lll_adv_data_reset>
		lll_adv_data_reset(&lll->scan_rsp);
   23d6a:	4628      	mov	r0, r5
   23d6c:	f007 fc66 	bl	2b63c <lll_adv_data_reset>
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   23d70:	4620      	mov	r0, r4
   23d72:	f007 fc53 	bl	2b61c <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   23d76:	4628      	mov	r0, r5
   23d78:	f007 fc50 	bl	2b61c <lll_adv_data_init>
	init_set(&ll_adv[0]);
   23d7c:	f7ff fcf8 	bl	23770 <init_set.constprop.0>
}
   23d80:	2000      	movs	r0, #0
   23d82:	bd38      	pop	{r3, r4, r5, pc}
   23d84:	20002614 	.word	0x20002614

00023d88 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   23d88:	4a03      	ldr	r2, [pc, #12]	; (23d98 <ull_adv_handle_get+0x10>)
   23d8a:	4b04      	ldr	r3, [pc, #16]	; (23d9c <ull_adv_handle_get+0x14>)
   23d8c:	1a80      	subs	r0, r0, r2
   23d8e:	fba3 3000 	umull	r3, r0, r3, r0
}
   23d92:	f3c0 108f 	ubfx	r0, r0, #6, #16
   23d96:	4770      	bx	lr
   23d98:	200025ec 	.word	0x200025ec
   23d9c:	8d3dcb09 	.word	0x8d3dcb09

00023da0 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   23da0:	4a04      	ldr	r2, [pc, #16]	; (23db4 <ull_adv_lll_handle_get+0x14>)
   23da2:	6800      	ldr	r0, [r0, #0]
   23da4:	4b04      	ldr	r3, [pc, #16]	; (23db8 <ull_adv_lll_handle_get+0x18>)
   23da6:	1a80      	subs	r0, r0, r2
   23da8:	fba3 3000 	umull	r3, r0, r3, r0
}
   23dac:	f3c0 108f 	ubfx	r0, r0, #6, #16
   23db0:	4770      	bx	lr
   23db2:	bf00      	nop
   23db4:	200025ec 	.word	0x200025ec
   23db8:	8d3dcb09 	.word	0x8d3dcb09

00023dbc <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   23dbc:	b938      	cbnz	r0, 23dce <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   23dbe:	4805      	ldr	r0, [pc, #20]	; (23dd4 <ull_adv_is_enabled_get+0x18>)
   23dc0:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
		return NULL;
   23dc4:	f013 0f01 	tst.w	r3, #1
   23dc8:	bf08      	it	eq
   23dca:	2000      	moveq	r0, #0
   23dcc:	4770      	bx	lr
   23dce:	2000      	movs	r0, #0
}
   23dd0:	4770      	bx	lr
   23dd2:	bf00      	nop
   23dd4:	200025ec 	.word	0x200025ec

00023dd8 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
   23dd8:	b928      	cbnz	r0, 23de6 <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
   23dda:	4b04      	ldr	r3, [pc, #16]	; (23dec <ull_adv_is_enabled+0x14>)
   23ddc:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
   23de0:	f000 0001 	and.w	r0, r0, #1
   23de4:	4770      	bx	lr
   23de6:	2000      	movs	r0, #0
}
   23de8:	4770      	bx	lr
   23dea:	bf00      	nop
   23dec:	200025ec 	.word	0x200025ec

00023df0 <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   23df0:	b950      	cbnz	r0, 23e08 <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
   23df2:	4b06      	ldr	r3, [pc, #24]	; (23e0c <ull_adv_filter_pol_get+0x1c>)
   23df4:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
   23df8:	f010 0001 	ands.w	r0, r0, #1
   23dfc:	d005      	beq.n	23e0a <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
   23dfe:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
   23e02:	f000 0003 	and.w	r0, r0, #3
   23e06:	4770      	bx	lr
		return 0;
   23e08:	2000      	movs	r0, #0
}
   23e0a:	4770      	bx	lr
   23e0c:	200025ec 	.word	0x200025ec

00023e10 <ull_adv_pdu_update_addrs>:
{
   23e10:	b570      	push	{r4, r5, r6, lr}
   23e12:	4605      	mov	r5, r0
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
   23e14:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
{
   23e18:	460c      	mov	r4, r1
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
   23e1a:	f006 fadd 	bl	2a3d8 <ull_filter_adva_get>
	if (!rpa || IS_ENABLED(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)) {
   23e1e:	b310      	cbz	r0, 23e66 <ull_adv_pdu_update_addrs+0x56>
		pdu->tx_addr = 1;
   23e20:	7823      	ldrb	r3, [r4, #0]
   23e22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   23e26:	4601      	mov	r1, r0
   23e28:	7023      	strb	r3, [r4, #0]
	return pdu->adv_ind.addr;
   23e2a:	1ca6      	adds	r6, r4, #2
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   23e2c:	2206      	movs	r2, #6
   23e2e:	4630      	mov	r0, r6
   23e30:	f011 fb81 	bl	35536 <memcpy>
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   23e34:	7823      	ldrb	r3, [r4, #0]
   23e36:	f003 030f 	and.w	r3, r3, #15
   23e3a:	2b01      	cmp	r3, #1
   23e3c:	d001      	beq.n	23e42 <ull_adv_pdu_update_addrs+0x32>
}
   23e3e:	4630      	mov	r0, r6
   23e40:	bd70      	pop	{r4, r5, r6, pc}
	rx_addr = ull_filter_tgta_get(adv->lll.rl_idx);
   23e42:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
   23e46:	f006 faf5 	bl	2a434 <ull_filter_tgta_get>
	if (rx_addr) {
   23e4a:	4601      	mov	r1, r0
   23e4c:	2800      	cmp	r0, #0
   23e4e:	d0f6      	beq.n	23e3e <ull_adv_pdu_update_addrs+0x2e>
		pdu->rx_addr = 1;
   23e50:	7823      	ldrb	r3, [r4, #0]
   23e52:	4620      	mov	r0, r4
   23e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   23e58:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(tgt_addr, rx_addr, BDADDR_SIZE);
   23e5c:	2206      	movs	r2, #6
   23e5e:	f011 fb6a 	bl	35536 <memcpy>
}
   23e62:	4630      	mov	r0, r6
   23e64:	bd70      	pop	{r4, r5, r6, pc}
			own_id_addr = ll_addr_get(pdu->tx_addr);
   23e66:	7820      	ldrb	r0, [r4, #0]
   23e68:	f3c0 1080 	ubfx	r0, r0, #6, #1
   23e6c:	f7fc fcec 	bl	20848 <ll_addr_get>
   23e70:	4601      	mov	r1, r0
	if (rpa) {
   23e72:	e7da      	b.n	23e2a <ull_adv_pdu_update_addrs+0x1a>

00023e74 <ull_adv_data_set>:
	if (len > PDU_AC_LEG_DATA_SIZE_MAX) {
   23e74:	291f      	cmp	r1, #31
   23e76:	d857      	bhi.n	23f28 <ull_adv_data_set+0xb4>
{
   23e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   23e7c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   23e80:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   23e84:	b082      	sub	sp, #8
   23e86:	6adf      	ldr	r7, [r3, #44]	; 0x2c
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   23e88:	783b      	ldrb	r3, [r7, #0]
   23e8a:	f003 030f 	and.w	r3, r3, #15
   23e8e:	2b01      	cmp	r3, #1
   23e90:	460e      	mov	r6, r1
   23e92:	4605      	mov	r5, r0
   23e94:	4690      	mov	r8, r2
   23e96:	d049      	beq.n	23f2c <ull_adv_data_set+0xb8>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   23e98:	f10d 0107 	add.w	r1, sp, #7
   23e9c:	3028      	adds	r0, #40	; 0x28
   23e9e:	f007 fc3f 	bl	2b720 <lll_adv_pdu_alloc>
	pdu->type = prev->type;
   23ea2:	783a      	ldrb	r2, [r7, #0]
   23ea4:	7803      	ldrb	r3, [r0, #0]
   23ea6:	f002 020f 	and.w	r2, r2, #15
   23eaa:	f023 031f 	bic.w	r3, r3, #31
   23eae:	4313      	orrs	r3, r2
   23eb0:	7003      	strb	r3, [r0, #0]
		pdu->chan_sel = prev->chan_sel;
   23eb2:	783b      	ldrb	r3, [r7, #0]
   23eb4:	7802      	ldrb	r2, [r0, #0]
   23eb6:	f3c3 1340 	ubfx	r3, r3, #5, #1
   23eba:	f363 1245 	bfi	r2, r3, #5, #1
   23ebe:	7002      	strb	r2, [r0, #0]
	pdu->tx_addr = prev->tx_addr;
   23ec0:	783b      	ldrb	r3, [r7, #0]
   23ec2:	b2d2      	uxtb	r2, r2
   23ec4:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->rx_addr = prev->rx_addr;
   23ec8:	4639      	mov	r1, r7
	pdu->tx_addr = prev->tx_addr;
   23eca:	f363 1286 	bfi	r2, r3, #6, #1
   23ece:	7002      	strb	r2, [r0, #0]
	pdu->rx_addr = prev->rx_addr;
   23ed0:	f811 3b02 	ldrb.w	r3, [r1], #2
   23ed4:	b2d2      	uxtb	r2, r2
   23ed6:	09db      	lsrs	r3, r3, #7
   23ed8:	f363 12c7 	bfi	r2, r3, #7, #1
   23edc:	4604      	mov	r4, r0
   23ede:	f800 2b02 	strb.w	r2, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   23ee2:	2206      	movs	r2, #6
   23ee4:	f011 fb27 	bl	35536 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   23ee8:	4632      	mov	r2, r6
   23eea:	4641      	mov	r1, r8
   23eec:	f104 0008 	add.w	r0, r4, #8
	pdu->len = BDADDR_SIZE + len;
   23ef0:	3606      	adds	r6, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
   23ef2:	f011 fb20 	bl	35536 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   23ef6:	7066      	strb	r6, [r4, #1]
	if (adv->is_enabled) {
   23ef8:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
   23efc:	07db      	lsls	r3, r3, #31
   23efe:	d407      	bmi.n	23f10 <ull_adv_data_set+0x9c>
	pdu->last = idx;
   23f00:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23f04:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
		return 0;
   23f08:	2000      	movs	r0, #0
}
   23f0a:	b002      	add	sp, #8
   23f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   23f10:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   23f14:	eb05 0383 	add.w	r3, r5, r3, lsl #2
		err = ull_adv_time_update(adv, pdu, pdu_scan);
   23f18:	4621      	mov	r1, r4
   23f1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   23f1c:	4628      	mov	r0, r5
   23f1e:	f7ec ff8f 	bl	10e40 <ull_adv_time_update>
		if (err) {
   23f22:	2800      	cmp	r0, #0
   23f24:	d0ec      	beq.n	23f00 <ull_adv_data_set+0x8c>
   23f26:	e7f0      	b.n	23f0a <ull_adv_data_set+0x96>
		return BT_HCI_ERR_INVALID_PARAM;
   23f28:	2012      	movs	r0, #18
}
   23f2a:	4770      	bx	lr
		adv->ad_data_backup.len = len;
   23f2c:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
		memcpy(adv->ad_data_backup.data, data, adv->ad_data_backup.len);
   23f30:	460a      	mov	r2, r1
   23f32:	3041      	adds	r0, #65	; 0x41
   23f34:	4641      	mov	r1, r8
   23f36:	f011 fafe 	bl	35536 <memcpy>
		return 0;
   23f3a:	e7e5      	b.n	23f08 <ull_adv_data_set+0x94>

00023f3c <ll_adv_data_set>:
{
   23f3c:	4603      	mov	r3, r0
   23f3e:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
   23f40:	4801      	ldr	r0, [pc, #4]	; (23f48 <ll_adv_data_set+0xc>)
   23f42:	4619      	mov	r1, r3
   23f44:	f7ff bf96 	b.w	23e74 <ull_adv_data_set>
   23f48:	200025ec 	.word	0x200025ec

00023f4c <ull_scan_rsp_set>:
	if (len > PDU_AC_LEG_DATA_SIZE_MAX) {
   23f4c:	291f      	cmp	r1, #31
   23f4e:	d860      	bhi.n	24012 <ull_scan_rsp_set+0xc6>
{
   23f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23f54:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   23f58:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   23f5c:	b082      	sub	sp, #8
   23f5e:	6b9e      	ldr	r6, [r3, #56]	; 0x38
	if (!prev) {
   23f60:	460f      	mov	r7, r1
   23f62:	4604      	mov	r4, r0
   23f64:	4690      	mov	r8, r2
		err = lll_adv_data_init(&adv->lll.scan_rsp);
   23f66:	f100 0534 	add.w	r5, r0, #52	; 0x34
	if (!prev) {
   23f6a:	2e00      	cmp	r6, #0
   23f6c:	d041      	beq.n	23ff2 <ull_scan_rsp_set+0xa6>
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   23f6e:	4628      	mov	r0, r5
   23f70:	f10d 0107 	add.w	r1, sp, #7
   23f74:	f007 fbd4 	bl	2b720 <lll_adv_pdu_alloc>
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   23f78:	7803      	ldrb	r3, [r0, #0]
   23f7a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	pdu->tx_addr = prev->tx_addr;
   23f7e:	4631      	mov	r1, r6
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   23f80:	f043 0304 	orr.w	r3, r3, #4
   23f84:	7003      	strb	r3, [r0, #0]
	pdu->tx_addr = prev->tx_addr;
   23f86:	f811 2b02 	ldrb.w	r2, [r1], #2
   23f8a:	b2db      	uxtb	r3, r3
   23f8c:	f3c2 1280 	ubfx	r2, r2, #6, #1
   23f90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   23f94:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
   23f98:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
   23f9a:	1dbb      	adds	r3, r7, #6
   23f9c:	7043      	strb	r3, [r0, #1]
   23f9e:	4605      	mov	r5, r0
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   23fa0:	2206      	movs	r2, #6
   23fa2:	3002      	adds	r0, #2
   23fa4:	f011 fac7 	bl	35536 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   23fa8:	463a      	mov	r2, r7
   23faa:	4641      	mov	r1, r8
   23fac:	f105 0008 	add.w	r0, r5, #8
   23fb0:	f011 fac1 	bl	35536 <memcpy>
	if (adv->is_enabled) {
   23fb4:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   23fb8:	07da      	lsls	r2, r3, #31
   23fba:	d407      	bmi.n	23fcc <ull_scan_rsp_set+0x80>
	pdu->last = idx;
   23fbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23fc0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return 0;
   23fc4:	2000      	movs	r0, #0
}
   23fc6:	b002      	add	sp, #8
   23fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   23fcc:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
   23fd0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		if ((pdu_adv_scan->type == PDU_ADV_TYPE_ADV_IND) ||
   23fd4:	2341      	movs	r3, #65	; 0x41
   23fd6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   23fd8:	780a      	ldrb	r2, [r1, #0]
   23fda:	f002 020f 	and.w	r2, r2, #15
   23fde:	40d3      	lsrs	r3, r2
   23fe0:	07db      	lsls	r3, r3, #31
   23fe2:	d5eb      	bpl.n	23fbc <ull_scan_rsp_set+0x70>
			err = ull_adv_time_update(adv, pdu_adv_scan, pdu);
   23fe4:	462a      	mov	r2, r5
   23fe6:	4620      	mov	r0, r4
   23fe8:	f7ec ff2a 	bl	10e40 <ull_adv_time_update>
			if (err) {
   23fec:	2800      	cmp	r0, #0
   23fee:	d0e5      	beq.n	23fbc <ull_scan_rsp_set+0x70>
   23ff0:	e7e9      	b.n	23fc6 <ull_scan_rsp_set+0x7a>
		err = lll_adv_data_init(&adv->lll.scan_rsp);
   23ff2:	4628      	mov	r0, r5
   23ff4:	f007 fb12 	bl	2b61c <lll_adv_data_init>
		if (err) {
   23ff8:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
   23ffc:	d1e3      	bne.n	23fc6 <ull_scan_rsp_set+0x7a>
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   23ffe:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   24002:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   24006:	6b9e      	ldr	r6, [r3, #56]	; 0x38
	pdu->type = pdu_type;
   24008:	2304      	movs	r3, #4
   2400a:	7033      	strb	r3, [r6, #0]
	pdu->len = BDADDR_SIZE;
   2400c:	2306      	movs	r3, #6
   2400e:	7073      	strb	r3, [r6, #1]
}
   24010:	e7ad      	b.n	23f6e <ull_scan_rsp_set+0x22>
		return BT_HCI_ERR_INVALID_PARAM;
   24012:	2012      	movs	r0, #18
}
   24014:	4770      	bx	lr
   24016:	bf00      	nop

00024018 <ll_adv_scan_rsp_set>:
{
   24018:	4603      	mov	r3, r0
   2401a:	460a      	mov	r2, r1
	return ull_scan_rsp_set(adv, len, data);
   2401c:	4801      	ldr	r0, [pc, #4]	; (24024 <ll_adv_scan_rsp_set+0xc>)
   2401e:	4619      	mov	r1, r3
   24020:	f7ff bf94 	b.w	23f4c <ull_scan_rsp_set>
   24024:	200025ec 	.word	0x200025ec

00024028 <init_reset>:
{
   24028:	b510      	push	{r4, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   2402a:	4b13      	ldr	r3, [pc, #76]	; (24078 <init_reset+0x50>)
   2402c:	4813      	ldr	r0, [pc, #76]	; (2407c <init_reset+0x54>)
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   2402e:	4c14      	ldr	r4, [pc, #80]	; (24080 <init_reset+0x58>)
	mem_init(conn_pool, sizeof(struct ll_conn),
   24030:	2201      	movs	r2, #1
   24032:	f44f 71cc 	mov.w	r1, #408	; 0x198
   24036:	f7fb f971 	bl	1f31c <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONN_DATA_BUFFERS,
   2403a:	4b12      	ldr	r3, [pc, #72]	; (24084 <init_reset+0x5c>)
   2403c:	2203      	movs	r2, #3
   2403e:	1d18      	adds	r0, r3, #4
   24040:	2124      	movs	r1, #36	; 0x24
   24042:	f7fb f96b 	bl	1f31c <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   24046:	4b10      	ldr	r3, [pc, #64]	; (24088 <init_reset+0x60>)
   24048:	2207      	movs	r2, #7
   2404a:	1d18      	adds	r0, r3, #4
   2404c:	2108      	movs	r1, #8
   2404e:	f7fb f965 	bl	1f31c <mem_init>
	ull_cp_init();
   24052:	f002 fbd7 	bl	26804 <ull_cp_init>
	}
}

static inline void cpr_active_reset(void)
{
	conn_upd_curr = NULL;
   24056:	4a0d      	ldr	r2, [pc, #52]	; (2408c <init_reset+0x64>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   24058:	4b0d      	ldr	r3, [pc, #52]	; (24090 <init_reset+0x68>)
	default_phy_tx |= PHY_2M;
   2405a:	490e      	ldr	r1, [pc, #56]	; (24094 <init_reset+0x6c>)
   2405c:	2000      	movs	r0, #0
   2405e:	6010      	str	r0, [r2, #0]
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   24060:	221b      	movs	r2, #27
   24062:	801a      	strh	r2, [r3, #0]
	default_phy_rx |= PHY_2M;
   24064:	4a0c      	ldr	r2, [pc, #48]	; (24098 <init_reset+0x70>)
	default_phy_tx |= PHY_2M;
   24066:	2303      	movs	r3, #3
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   24068:	f44f 7ca4 	mov.w	ip, #328	; 0x148
   2406c:	f8a4 c000 	strh.w	ip, [r4]
	default_phy_tx |= PHY_2M;
   24070:	700b      	strb	r3, [r1, #0]
	default_phy_rx |= PHY_2M;
   24072:	7013      	strb	r3, [r2, #0]
}
   24074:	bd10      	pop	{r4, pc}
   24076:	bf00      	nop
   24078:	20002680 	.word	0x20002680
   2407c:	200016c0 	.word	0x200016c0
   24080:	20003296 	.word	0x20003296
   24084:	200026c0 	.word	0x200026c0
   24088:	20002684 	.word	0x20002684
   2408c:	20002730 	.word	0x20002730
   24090:	20003298 	.word	0x20003298
   24094:	200033ea 	.word	0x200033ea
   24098:	200033e9 	.word	0x200033e9

0002409c <tx_lll_flush>:
{
   2409c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = HDR_LLL2ULL(lll);
   240a0:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   240a4:	4933      	ldr	r1, [pc, #204]	; (24174 <tx_lll_flush+0xd8>)
{
   240a6:	b083      	sub	sp, #12
   240a8:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   240aa:	f44f 72cc 	mov.w	r2, #408	; 0x198
   240ae:	4640      	mov	r0, r8
   240b0:	f7fb f99c 	bl	1f3ec <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   240b4:	f105 065c 	add.w	r6, r5, #92	; 0x5c
	lll_conn_flush(handle, lll);
   240b8:	4629      	mov	r1, r5
   240ba:	f007 ff43 	bl	2bf44 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   240be:	6e28      	ldr	r0, [r5, #96]	; 0x60
   240c0:	aa01      	add	r2, sp, #4
   240c2:	4631      	mov	r1, r6
   240c4:	f7fb f9d2 	bl	1f46c <memq_dequeue>
	while (link) {
   240c8:	b328      	cbz	r0, 24116 <tx_lll_flush+0x7a>
   240ca:	4c2b      	ldr	r4, [pc, #172]	; (24178 <tx_lll_flush+0xdc>)
		lll_tx->handle = LLL_HANDLE_INVALID;
   240cc:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   240d0:	f104 0908 	add.w	r9, r4, #8
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   240d4:	7962      	ldrb	r2, [r4, #5]
	if (last == count) {
   240d6:	f894 c002 	ldrb.w	ip, [r4, #2]
   240da:	7921      	ldrb	r1, [r4, #4]
	last = last + 1;
   240dc:	1c53      	adds	r3, r2, #1
   240de:	b2db      	uxtb	r3, r3
		last = 0U;
   240e0:	459c      	cmp	ip, r3
   240e2:	bf08      	it	eq
   240e4:	2300      	moveq	r3, #0
	if (last == first) {
   240e6:	4299      	cmp	r1, r3
   240e8:	f894 c000 	ldrb.w	ip, [r4]
   240ec:	d031      	beq.n	24152 <tx_lll_flush+0xb6>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   240ee:	fb12 f20c 	smulbb	r2, r2, ip
   240f2:	eb02 0109 	add.w	r1, r2, r9
		lll_tx->handle = LLL_HANDLE_INVALID;
   240f6:	f829 7002 	strh.w	r7, [r9, r2]
		lll_tx->node = tx;
   240fa:	9a01      	ldr	r2, [sp, #4]
   240fc:	604a      	str	r2, [r1, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   240fe:	6812      	ldr	r2, [r2, #0]
   24100:	6002      	str	r2, [r0, #0]
		tx->next = link;
   24102:	9a01      	ldr	r2, [sp, #4]
   24104:	6010      	str	r0, [r2, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   24106:	6e28      	ldr	r0, [r5, #96]	; 0x60
	*last = idx; /* Commit: Update write index */
   24108:	7163      	strb	r3, [r4, #5]
   2410a:	aa01      	add	r2, sp, #4
   2410c:	4631      	mov	r1, r6
   2410e:	f7fb f9ad 	bl	1f46c <memq_dequeue>
	while (link) {
   24112:	2800      	cmp	r0, #0
   24114:	d1de      	bne.n	240d4 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   24116:	f8d8 014c 	ldr.w	r0, [r8, #332]	; 0x14c
	rx = (void *)&conn->llcp_terminate.node_rx;
   2411a:	f508 74a6 	add.w	r4, r8, #332	; 0x14c
	LL_ASSERT(rx->hdr.link);
   2411e:	b140      	cbz	r0, 24132 <tx_lll_flush+0x96>
	rx->hdr.link = NULL;
   24120:	2300      	movs	r3, #0
   24122:	f8c8 314c 	str.w	r3, [r8, #332]	; 0x14c
	ull_rx_put_sched(link, rx);
   24126:	4621      	mov	r1, r4
   24128:	f7fe fed8 	bl	22edc <ull_rx_put_sched>
}
   2412c:	b003      	add	sp, #12
   2412e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   24132:	4a12      	ldr	r2, [pc, #72]	; (2417c <tx_lll_flush+0xe0>)
   24134:	4912      	ldr	r1, [pc, #72]	; (24180 <tx_lll_flush+0xe4>)
   24136:	4813      	ldr	r0, [pc, #76]	; (24184 <tx_lll_flush+0xe8>)
   24138:	f640 23e4 	movw	r3, #2788	; 0xae4
   2413c:	f00f f96c 	bl	33418 <assert_print>
   24140:	4040      	eors	r0, r0
   24142:	f380 8811 	msr	BASEPRI, r0
   24146:	f04f 0003 	mov.w	r0, #3
   2414a:	df02      	svc	2
	link = rx->hdr.link;
   2414c:	f8d8 014c 	ldr.w	r0, [r8, #332]	; 0x14c
   24150:	e7e6      	b.n	24120 <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
   24152:	4a0a      	ldr	r2, [pc, #40]	; (2417c <tx_lll_flush+0xe0>)
   24154:	490c      	ldr	r1, [pc, #48]	; (24188 <tx_lll_flush+0xec>)
   24156:	480b      	ldr	r0, [pc, #44]	; (24184 <tx_lll_flush+0xe8>)
   24158:	f44f 632d 	mov.w	r3, #2768	; 0xad0
   2415c:	f00f f95c 	bl	33418 <assert_print>
   24160:	4040      	eors	r0, r0
   24162:	f380 8811 	msr	BASEPRI, r0
   24166:	f04f 0003 	mov.w	r0, #3
   2416a:	df02      	svc	2
		lll_tx->handle = LLL_HANDLE_INVALID;
   2416c:	2300      	movs	r3, #0
   2416e:	801b      	strh	r3, [r3, #0]
   24170:	deff      	udf	#255	; 0xff
   24172:	bf00      	nop
   24174:	200016c0 	.word	0x200016c0
   24178:	200006a0 	.word	0x200006a0
   2417c:	0003a650 	.word	0x0003a650
   24180:	0003a698 	.word	0x0003a698
   24184:	00039f74 	.word	0x00039f74
   24188:	0003a690 	.word	0x0003a690

0002418c <ticker_stop_op_cb>:
{
   2418c:	b510      	push	{r4, lr}
   2418e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   24190:	b9b0      	cbnz	r0, 241c0 <ticker_stop_op_cb+0x34>
	mfy.param = param;
   24192:	4b12      	ldr	r3, [pc, #72]	; (241dc <ticker_stop_op_cb+0x50>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   24194:	2200      	movs	r2, #0
   24196:	2101      	movs	r1, #1
   24198:	2002      	movs	r0, #2
	mfy.param = param;
   2419a:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   2419c:	f7fb f9ca 	bl	1f534 <mayfly_enqueue>
	LL_ASSERT(!ret);
   241a0:	b900      	cbnz	r0, 241a4 <ticker_stop_op_cb+0x18>
}
   241a2:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   241a4:	4a0e      	ldr	r2, [pc, #56]	; (241e0 <ticker_stop_op_cb+0x54>)
   241a6:	490f      	ldr	r1, [pc, #60]	; (241e4 <ticker_stop_op_cb+0x58>)
   241a8:	480f      	ldr	r0, [pc, #60]	; (241e8 <ticker_stop_op_cb+0x5c>)
   241aa:	f640 238a 	movw	r3, #2698	; 0xa8a
   241ae:	f00f f933 	bl	33418 <assert_print>
   241b2:	4040      	eors	r0, r0
   241b4:	f380 8811 	msr	BASEPRI, r0
   241b8:	f04f 0003 	mov.w	r0, #3
   241bc:	df02      	svc	2
}
   241be:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   241c0:	4a07      	ldr	r2, [pc, #28]	; (241e0 <ticker_stop_op_cb+0x54>)
   241c2:	490a      	ldr	r1, [pc, #40]	; (241ec <ticker_stop_op_cb+0x60>)
   241c4:	4808      	ldr	r0, [pc, #32]	; (241e8 <ticker_stop_op_cb+0x5c>)
   241c6:	f640 2384 	movw	r3, #2692	; 0xa84
   241ca:	f00f f925 	bl	33418 <assert_print>
   241ce:	4040      	eors	r0, r0
   241d0:	f380 8811 	msr	BASEPRI, r0
   241d4:	f04f 0003 	mov.w	r0, #3
   241d8:	df02      	svc	2
   241da:	e7da      	b.n	24192 <ticker_stop_op_cb+0x6>
   241dc:	20000680 	.word	0x20000680
   241e0:	0003a650 	.word	0x0003a650
   241e4:	0003a43c 	.word	0x0003a43c
   241e8:	00039f74 	.word	0x00039f74
   241ec:	0003a6a8 	.word	0x0003a6a8

000241f0 <disabled_cb>:
{
   241f0:	b508      	push	{r3, lr}
	mfy.param = param;
   241f2:	4b0b      	ldr	r3, [pc, #44]	; (24220 <disabled_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   241f4:	2200      	movs	r2, #0
	mfy.param = param;
   241f6:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   241f8:	4611      	mov	r1, r2
   241fa:	2001      	movs	r0, #1
   241fc:	f7fb f99a 	bl	1f534 <mayfly_enqueue>
	LL_ASSERT(!ret);
   24200:	b900      	cbnz	r0, 24204 <disabled_cb+0x14>
}
   24202:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   24204:	4a07      	ldr	r2, [pc, #28]	; (24224 <disabled_cb+0x34>)
   24206:	4908      	ldr	r1, [pc, #32]	; (24228 <disabled_cb+0x38>)
   24208:	4808      	ldr	r0, [pc, #32]	; (2422c <disabled_cb+0x3c>)
   2420a:	f640 23b6 	movw	r3, #2742	; 0xab6
   2420e:	f00f f903 	bl	33418 <assert_print>
   24212:	4040      	eors	r0, r0
   24214:	f380 8811 	msr	BASEPRI, r0
   24218:	f04f 0003 	mov.w	r0, #3
   2421c:	df02      	svc	2
}
   2421e:	bd08      	pop	{r3, pc}
   24220:	20000660 	.word	0x20000660
   24224:	0003a650 	.word	0x0003a650
   24228:	0003a43c 	.word	0x0003a43c
   2422c:	00039f74 	.word	0x00039f74

00024230 <conn_disable>:
{
   24230:	b538      	push	{r3, r4, r5, lr}
   24232:	4604      	mov	r4, r0
	return hdr->ref;
   24234:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
   24238:	b353      	cbz	r3, 24290 <conn_disable+0x60>
		mfy.param = &conn->lll;
   2423a:	4d17      	ldr	r5, [pc, #92]	; (24298 <conn_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
   2423c:	6963      	ldr	r3, [r4, #20]
		mfy.param = &conn->lll;
   2423e:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   24240:	b16b      	cbz	r3, 2425e <conn_disable+0x2e>
   24242:	4a16      	ldr	r2, [pc, #88]	; (2429c <conn_disable+0x6c>)
   24244:	4916      	ldr	r1, [pc, #88]	; (242a0 <conn_disable+0x70>)
   24246:	4817      	ldr	r0, [pc, #92]	; (242a4 <conn_disable+0x74>)
   24248:	f640 239f 	movw	r3, #2719	; 0xa9f
   2424c:	f00f f8e4 	bl	33418 <assert_print>
   24250:	4040      	eors	r0, r0
   24252:	f380 8811 	msr	BASEPRI, r0
   24256:	f04f 0003 	mov.w	r0, #3
   2425a:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   2425c:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   2425e:	4912      	ldr	r1, [pc, #72]	; (242a8 <conn_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   24260:	4b0d      	ldr	r3, [pc, #52]	; (24298 <conn_disable+0x68>)
   24262:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   24264:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   24268:	4611      	mov	r1, r2
   2426a:	2001      	movs	r0, #1
   2426c:	f7fb f962 	bl	1f534 <mayfly_enqueue>
		LL_ASSERT(!ret);
   24270:	b900      	cbnz	r0, 24274 <conn_disable+0x44>
}
   24272:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   24274:	4a09      	ldr	r2, [pc, #36]	; (2429c <conn_disable+0x6c>)
   24276:	490d      	ldr	r1, [pc, #52]	; (242ac <conn_disable+0x7c>)
   24278:	480a      	ldr	r0, [pc, #40]	; (242a4 <conn_disable+0x74>)
   2427a:	f640 23a6 	movw	r3, #2726	; 0xaa6
   2427e:	f00f f8cb 	bl	33418 <assert_print>
   24282:	4040      	eors	r0, r0
   24284:	f380 8811 	msr	BASEPRI, r0
   24288:	f04f 0003 	mov.w	r0, #3
   2428c:	df02      	svc	2
}
   2428e:	bd38      	pop	{r3, r4, r5, pc}
   24290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&conn->lll);
   24294:	f7ff bfac 	b.w	241f0 <disabled_cb>
   24298:	20000670 	.word	0x20000670
   2429c:	0003a650 	.word	0x0003a650
   242a0:	0003a558 	.word	0x0003a558
   242a4:	00039f74 	.word	0x00039f74
   242a8:	000241f1 	.word	0x000241f1
   242ac:	0003a43c 	.word	0x0003a43c

000242b0 <conn_setup_adv_scan_disabled_cb>:
{
   242b0:	b508      	push	{r3, lr}
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   242b2:	6883      	ldr	r3, [r0, #8]
   242b4:	685a      	ldr	r2, [r3, #4]
	switch (lll->role) {
   242b6:	7f53      	ldrb	r3, [r2, #29]
   242b8:	09db      	lsrs	r3, r3, #7
   242ba:	d10d      	bne.n	242d8 <conn_setup_adv_scan_disabled_cb+0x28>
		LL_ASSERT(0);
   242bc:	4a09      	ldr	r2, [pc, #36]	; (242e4 <conn_setup_adv_scan_disabled_cb+0x34>)
   242be:	490a      	ldr	r1, [pc, #40]	; (242e8 <conn_setup_adv_scan_disabled_cb+0x38>)
   242c0:	480a      	ldr	r0, [pc, #40]	; (242ec <conn_setup_adv_scan_disabled_cb+0x3c>)
   242c2:	f640 13d8 	movw	r3, #2520	; 0x9d8
   242c6:	f00f f8a7 	bl	33418 <assert_print>
   242ca:	4040      	eors	r0, r0
   242cc:	f380 8811 	msr	BASEPRI, r0
   242d0:	f04f 0003 	mov.w	r0, #3
   242d4:	df02      	svc	2
}
   242d6:	bd08      	pop	{r3, pc}
		ull_periph_setup(rx, ftr, lll);
   242d8:	4601      	mov	r1, r0
}
   242da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		ull_periph_setup(rx, ftr, lll);
   242de:	3108      	adds	r1, #8
   242e0:	f7ec bfa2 	b.w	11228 <ull_periph_setup>
   242e4:	0003a650 	.word	0x0003a650
   242e8:	0003a004 	.word	0x0003a004
   242ec:	00039f74 	.word	0x00039f74

000242f0 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   242f0:	b900      	cbnz	r0, 242f4 <ticker_update_conn_op_cb+0x4>
   242f2:	4770      	bx	lr
{
   242f4:	b510      	push	{r4, lr}
   242f6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   242f8:	f7fe fd1a 	bl	22d30 <ull_update_mark_get>
   242fc:	4284      	cmp	r4, r0
   242fe:	d010      	beq.n	24322 <ticker_update_conn_op_cb+0x32>
   24300:	f7fe fcf8 	bl	22cf4 <ull_disable_mark_get>
   24304:	4284      	cmp	r4, r0
   24306:	d00c      	beq.n	24322 <ticker_update_conn_op_cb+0x32>
   24308:	4a06      	ldr	r2, [pc, #24]	; (24324 <ticker_update_conn_op_cb+0x34>)
   2430a:	4907      	ldr	r1, [pc, #28]	; (24328 <ticker_update_conn_op_cb+0x38>)
   2430c:	4807      	ldr	r0, [pc, #28]	; (2432c <ticker_update_conn_op_cb+0x3c>)
   2430e:	f640 139b 	movw	r3, #2459	; 0x99b
   24312:	f00f f881 	bl	33418 <assert_print>
   24316:	4040      	eors	r0, r0
   24318:	f380 8811 	msr	BASEPRI, r0
   2431c:	f04f 0003 	mov.w	r0, #3
   24320:	df02      	svc	2
}
   24322:	bd10      	pop	{r4, pc}
   24324:	0003a650 	.word	0x0003a650
   24328:	0003a6b4 	.word	0x0003a6b4
   2432c:	00039f74 	.word	0x00039f74

00024330 <ticker_start_conn_op_cb>:
{
   24330:	b510      	push	{r4, lr}
   24332:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   24334:	b990      	cbnz	r0, 2435c <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
   24336:	4620      	mov	r0, r4
   24338:	f7fe fcee 	bl	22d18 <ull_update_unmark>
	LL_ASSERT(p == param);
   2433c:	4284      	cmp	r4, r0
   2433e:	d00c      	beq.n	2435a <ticker_start_conn_op_cb+0x2a>
   24340:	4a0d      	ldr	r2, [pc, #52]	; (24378 <ticker_start_conn_op_cb+0x48>)
   24342:	490e      	ldr	r1, [pc, #56]	; (2437c <ticker_start_conn_op_cb+0x4c>)
   24344:	480e      	ldr	r0, [pc, #56]	; (24380 <ticker_start_conn_op_cb+0x50>)
   24346:	f640 13b1 	movw	r3, #2481	; 0x9b1
   2434a:	f00f f865 	bl	33418 <assert_print>
   2434e:	4040      	eors	r0, r0
   24350:	f380 8811 	msr	BASEPRI, r0
   24354:	f04f 0003 	mov.w	r0, #3
   24358:	df02      	svc	2
}
   2435a:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   2435c:	4a06      	ldr	r2, [pc, #24]	; (24378 <ticker_start_conn_op_cb+0x48>)
   2435e:	4909      	ldr	r1, [pc, #36]	; (24384 <ticker_start_conn_op_cb+0x54>)
   24360:	4807      	ldr	r0, [pc, #28]	; (24380 <ticker_start_conn_op_cb+0x50>)
   24362:	f640 13ae 	movw	r3, #2478	; 0x9ae
   24366:	f00f f857 	bl	33418 <assert_print>
   2436a:	4040      	eors	r0, r0
   2436c:	f380 8811 	msr	BASEPRI, r0
   24370:	f04f 0003 	mov.w	r0, #3
   24374:	df02      	svc	2
   24376:	e7de      	b.n	24336 <ticker_start_conn_op_cb+0x6>
   24378:	0003a650 	.word	0x0003a650
   2437c:	0003a708 	.word	0x0003a708
   24380:	00039f74 	.word	0x00039f74
   24384:	0003a6a8 	.word	0x0003a6a8

00024388 <ticker_stop_conn_op_cb>:
{
   24388:	b510      	push	{r4, lr}
   2438a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   2438c:	b990      	cbnz	r0, 243b4 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
   2438e:	4620      	mov	r0, r4
   24390:	f7fe fcb6 	bl	22d00 <ull_update_mark>
	LL_ASSERT(p == param);
   24394:	4284      	cmp	r4, r0
   24396:	d00c      	beq.n	243b2 <ticker_stop_conn_op_cb+0x2a>
   24398:	4a0d      	ldr	r2, [pc, #52]	; (243d0 <ticker_stop_conn_op_cb+0x48>)
   2439a:	490e      	ldr	r1, [pc, #56]	; (243d4 <ticker_stop_conn_op_cb+0x4c>)
   2439c:	480e      	ldr	r0, [pc, #56]	; (243d8 <ticker_stop_conn_op_cb+0x50>)
   2439e:	f640 13a7 	movw	r3, #2471	; 0x9a7
   243a2:	f00f f839 	bl	33418 <assert_print>
   243a6:	4040      	eors	r0, r0
   243a8:	f380 8811 	msr	BASEPRI, r0
   243ac:	f04f 0003 	mov.w	r0, #3
   243b0:	df02      	svc	2
}
   243b2:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   243b4:	4a06      	ldr	r2, [pc, #24]	; (243d0 <ticker_stop_conn_op_cb+0x48>)
   243b6:	4909      	ldr	r1, [pc, #36]	; (243dc <ticker_stop_conn_op_cb+0x54>)
   243b8:	4807      	ldr	r0, [pc, #28]	; (243d8 <ticker_stop_conn_op_cb+0x50>)
   243ba:	f640 13a4 	movw	r3, #2468	; 0x9a4
   243be:	f00f f82b 	bl	33418 <assert_print>
   243c2:	4040      	eors	r0, r0
   243c4:	f380 8811 	msr	BASEPRI, r0
   243c8:	f04f 0003 	mov.w	r0, #3
   243cc:	df02      	svc	2
   243ce:	e7de      	b.n	2438e <ticker_stop_conn_op_cb+0x6>
   243d0:	0003a650 	.word	0x0003a650
   243d4:	0003a708 	.word	0x0003a708
   243d8:	00039f74 	.word	0x00039f74
   243dc:	0003a6a8 	.word	0x0003a6a8

000243e0 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   243e0:	4801      	ldr	r0, [pc, #4]	; (243e8 <ll_conn_acquire+0x8>)
   243e2:	f7fa bfcb 	b.w	1f37c <mem_acquire>
   243e6:	bf00      	nop
   243e8:	20002680 	.word	0x20002680

000243ec <ll_conn_release>:
	mem_release(conn, &conn_free);
   243ec:	4901      	ldr	r1, [pc, #4]	; (243f4 <ll_conn_release+0x8>)
   243ee:	f7fa bfe1 	b.w	1f3b4 <mem_release>
   243f2:	bf00      	nop
   243f4:	20002680 	.word	0x20002680

000243f8 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   243f8:	4902      	ldr	r1, [pc, #8]	; (24404 <ll_conn_handle_get+0xc>)
   243fa:	f44f 72cc 	mov.w	r2, #408	; 0x198
   243fe:	f7fa bff5 	b.w	1f3ec <mem_index_get>
   24402:	bf00      	nop
   24404:	200016c0 	.word	0x200016c0

00024408 <ll_conn_get>:
{
   24408:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   2440a:	f44f 71cc 	mov.w	r1, #408	; 0x198
   2440e:	4801      	ldr	r0, [pc, #4]	; (24414 <ll_conn_get+0xc>)
   24410:	f7fa bfe8 	b.w	1f3e4 <mem_get>
   24414:	200016c0 	.word	0x200016c0

00024418 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   24418:	b958      	cbnz	r0, 24432 <ll_connected_get+0x1a>
{
   2441a:	b508      	push	{r3, lr}
   2441c:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   2441e:	f44f 71cc 	mov.w	r1, #408	; 0x198
   24422:	4805      	ldr	r0, [pc, #20]	; (24438 <ll_connected_get+0x20>)
   24424:	f7fa ffde 	bl	1f3e4 <mem_get>
	if (conn->lll.handle != handle) {
   24428:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   2442a:	b903      	cbnz	r3, 2442e <ll_connected_get+0x16>
}
   2442c:	bd08      	pop	{r3, pc}
		return NULL;
   2442e:	2000      	movs	r0, #0
}
   24430:	bd08      	pop	{r3, pc}
		return NULL;
   24432:	2000      	movs	r0, #0
}
   24434:	4770      	bx	lr
   24436:	bf00      	nop
   24438:	200016c0 	.word	0x200016c0

0002443c <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   2443c:	4801      	ldr	r0, [pc, #4]	; (24444 <ll_tx_mem_acquire+0x8>)
   2443e:	f7fa bf9d 	b.w	1f37c <mem_acquire>
   24442:	bf00      	nop
   24444:	200026c0 	.word	0x200026c0

00024448 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   24448:	4901      	ldr	r1, [pc, #4]	; (24450 <ll_tx_mem_release+0x8>)
   2444a:	f7fa bfb3 	b.w	1f3b4 <mem_release>
   2444e:	bf00      	nop
   24450:	200026c0 	.word	0x200026c0

00024454 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   24454:	2800      	cmp	r0, #0
   24456:	d13f      	bne.n	244d8 <ll_tx_mem_enqueue+0x84>
{
   24458:	b570      	push	{r4, r5, r6, lr}
   2445a:	4602      	mov	r2, r0
   2445c:	460e      	mov	r6, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   2445e:	4820      	ldr	r0, [pc, #128]	; (244e0 <ll_tx_mem_enqueue+0x8c>)
   24460:	f44f 71cc 	mov.w	r1, #408	; 0x198
   24464:	f7fa ffbe 	bl	1f3e4 <mem_get>
	if (conn->lll.handle != handle) {
   24468:	8d02      	ldrh	r2, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   2446a:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   2446c:	b9fa      	cbnz	r2, 244ae <ll_tx_mem_enqueue+0x5a>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   2446e:	4c1d      	ldr	r4, [pc, #116]	; (244e4 <ll_tx_mem_enqueue+0x90>)
   24470:	f894 c005 	ldrb.w	ip, [r4, #5]
	if (last == count) {
   24474:	78a1      	ldrb	r1, [r4, #2]
   24476:	7820      	ldrb	r0, [r4, #0]
	last = last + 1;
   24478:	f10c 0301 	add.w	r3, ip, #1
   2447c:	b2db      	uxtb	r3, r3
		last = 0U;
   2447e:	4299      	cmp	r1, r3
   24480:	bf08      	it	eq
   24482:	2300      	moveq	r3, #0
   24484:	7921      	ldrb	r1, [r4, #4]
	if (last == first) {
   24486:	4299      	cmp	r1, r3
   24488:	d023      	beq.n	244d2 <ll_tx_mem_enqueue+0x7e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   2448a:	fb1c fc00 	smulbb	ip, ip, r0
   2448e:	f104 0108 	add.w	r1, r4, #8
	lll_tx->handle = handle;
   24492:	f821 200c 	strh.w	r2, [r1, ip]
   24496:	448c      	add	ip, r1
	lll_tx->node = tx;
   24498:	f8cc 6004 	str.w	r6, [ip, #4]
	*last = idx; /* Commit: Update write index */
   2449c:	7163      	strb	r3, [r4, #5]
   2449e:	782b      	ldrb	r3, [r5, #0]
	if (ull_ref_get(&conn->ull)) {
   244a0:	b943      	cbnz	r3, 244b4 <ll_tx_mem_enqueue+0x60>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   244a2:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   244a6:	2b00      	cmp	r3, #0
   244a8:	db0e      	blt.n	244c8 <ll_tx_mem_enqueue+0x74>
	return 0;
   244aa:	2000      	movs	r0, #0
}
   244ac:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   244ae:	f06f 0015 	mvn.w	r0, #21
}
   244b2:	bd70      	pop	{r4, r5, r6, pc}
	mfy.param = conn;
   244b4:	4b0c      	ldr	r3, [pc, #48]	; (244e8 <ll_tx_mem_enqueue+0x94>)
	mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U, &mfy);
   244b6:	2101      	movs	r1, #1
   244b8:	2003      	movs	r0, #3
	mfy.param = conn;
   244ba:	609d      	str	r5, [r3, #8]
	mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U, &mfy);
   244bc:	f7fb f83a 	bl	1f534 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   244c0:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   244c4:	2b00      	cmp	r3, #0
   244c6:	daf0      	bge.n	244aa <ll_tx_mem_enqueue+0x56>
		ull_periph_latency_cancel(conn, handle);
   244c8:	2100      	movs	r1, #0
   244ca:	4628      	mov	r0, r5
   244cc:	f005 f8c8 	bl	29660 <ull_periph_latency_cancel>
   244d0:	e7eb      	b.n	244aa <ll_tx_mem_enqueue+0x56>
		return -ENOBUFS;
   244d2:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   244d6:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   244d8:	f06f 0015 	mvn.w	r0, #21
}
   244dc:	4770      	bx	lr
   244de:	bf00      	nop
   244e0:	200016c0 	.word	0x200016c0
   244e4:	200006e8 	.word	0x200006e8
   244e8:	20000690 	.word	0x20000690

000244ec <ll_conn_update>:
{
   244ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   244f0:	b082      	sub	sp, #8
   244f2:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
   244f6:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   244fa:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
	if (handle >= CONFIG_BT_MAX_CONN) {
   244fe:	b9b0      	cbnz	r0, 2452e <ll_conn_update+0x42>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   24500:	460c      	mov	r4, r1
   24502:	4615      	mov	r5, r2
   24504:	f44f 71cc 	mov.w	r1, #408	; 0x198
   24508:	4602      	mov	r2, r0
   2450a:	4819      	ldr	r0, [pc, #100]	; (24570 <ll_conn_update+0x84>)
   2450c:	461e      	mov	r6, r3
   2450e:	f7fa ff69 	bl	1f3e4 <mem_get>
	if (conn->lll.handle != handle) {
   24512:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   24514:	4682      	mov	sl, r0
	if (conn->lll.handle != handle) {
   24516:	b953      	cbnz	r3, 2452e <ll_conn_update+0x42>
	if (cmd == 0U) {
   24518:	b16c      	cbz	r4, 24536 <ll_conn_update+0x4a>
	} else if (cmd == 2U) {
   2451a:	2c02      	cmp	r4, #2
   2451c:	d003      	beq.n	24526 <ll_conn_update+0x3a>
		return BT_HCI_ERR_UNKNOWN_CMD;
   2451e:	2001      	movs	r0, #1
}
   24520:	b002      	add	sp, #8
   24522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (status == 0U) {
   24526:	b9cd      	cbnz	r5, 2455c <ll_conn_update+0x70>
			ull_cp_conn_param_req_reply(conn);
   24528:	f002 fb7e 	bl	26c28 <ull_cp_conn_param_req_reply>
   2452c:	e012      	b.n	24554 <ll_conn_update+0x68>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   2452e:	2002      	movs	r0, #2
}
   24530:	b002      	add	sp, #8
   24532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		err = ull_cp_conn_update(conn, interval_min, interval_max, latency, timeout,
   24536:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   24538:	9301      	str	r3, [sp, #4]
   2453a:	f8cd 9000 	str.w	r9, [sp]
   2453e:	4643      	mov	r3, r8
   24540:	463a      	mov	r2, r7
   24542:	4631      	mov	r1, r6
   24544:	f002 faf0 	bl	26b28 <ull_cp_conn_update>
		if (err) {
   24548:	2800      	cmp	r0, #0
   2454a:	d1e9      	bne.n	24520 <ll_conn_update+0x34>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2454c:	f99a 3039 	ldrsb.w	r3, [sl, #57]	; 0x39
   24550:	2b00      	cmp	r3, #0
   24552:	db07      	blt.n	24564 <ll_conn_update+0x78>
		return BT_HCI_ERR_SUCCESS;
   24554:	2000      	movs	r0, #0
}
   24556:	b002      	add	sp, #8
   24558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ull_cp_conn_param_req_neg_reply(conn, status);
   2455c:	4629      	mov	r1, r5
   2455e:	f002 fb73 	bl	26c48 <ull_cp_conn_param_req_neg_reply>
   24562:	e7f7      	b.n	24554 <ll_conn_update+0x68>
			ull_periph_latency_cancel(conn, handle);
   24564:	4601      	mov	r1, r0
   24566:	4650      	mov	r0, sl
   24568:	f005 f87a 	bl	29660 <ull_periph_latency_cancel>
   2456c:	e7f2      	b.n	24554 <ll_conn_update+0x68>
   2456e:	bf00      	nop
   24570:	200016c0 	.word	0x200016c0

00024574 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   24574:	b9e0      	cbnz	r0, 245b0 <ll_chm_get+0x3c>
{
   24576:	b538      	push	{r3, r4, r5, lr}
   24578:	4602      	mov	r2, r0
   2457a:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   2457c:	480d      	ldr	r0, [pc, #52]	; (245b4 <ll_chm_get+0x40>)
   2457e:	f44f 71cc 	mov.w	r1, #408	; 0x198
   24582:	f7fa ff2f 	bl	1f3e4 <mem_get>
	if (conn->lll.handle != handle) {
   24586:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   24588:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   2458a:	b94b      	cbnz	r3, 245a0 <ll_chm_get+0x2c>
	pending_chm = ull_cp_chan_map_update_pending(conn);
   2458c:	f002 fa6c 	bl	26a68 <ull_cp_chan_map_update_pending>
		memcpy(chm, pending_chm, sizeof(conn->lll.data_chan_map));
   24590:	2205      	movs	r2, #5
	if (pending_chm) {
   24592:	4601      	mov	r1, r0
   24594:	b130      	cbz	r0, 245a4 <ll_chm_get+0x30>
		memcpy(chm, pending_chm, sizeof(conn->lll.data_chan_map));
   24596:	4620      	mov	r0, r4
   24598:	f010 ffcd 	bl	35536 <memcpy>
	return 0;
   2459c:	2000      	movs	r0, #0
}
   2459e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   245a0:	2002      	movs	r0, #2
}
   245a2:	bd38      	pop	{r3, r4, r5, pc}
		memcpy(chm, conn->lll.data_chan_map, sizeof(conn->lll.data_chan_map));
   245a4:	f105 0134 	add.w	r1, r5, #52	; 0x34
   245a8:	4620      	mov	r0, r4
   245aa:	f010 ffc4 	bl	35536 <memcpy>
   245ae:	e7f5      	b.n	2459c <ll_chm_get+0x28>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   245b0:	2002      	movs	r0, #2
}
   245b2:	4770      	bx	lr
   245b4:	200016c0 	.word	0x200016c0

000245b8 <ll_terminate_ind_send>:
{
   245b8:	b538      	push	{r3, r4, r5, lr}
	if (IS_ACL_HANDLE(handle)) {
   245ba:	b110      	cbz	r0, 245c2 <ll_terminate_ind_send+0xa>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   245bc:	2402      	movs	r4, #2
}
   245be:	4620      	mov	r0, r4
   245c0:	bd38      	pop	{r3, r4, r5, pc}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   245c2:	4602      	mov	r2, r0
   245c4:	460c      	mov	r4, r1
   245c6:	4815      	ldr	r0, [pc, #84]	; (2461c <ll_terminate_ind_send+0x64>)
   245c8:	f44f 71cc 	mov.w	r1, #408	; 0x198
   245cc:	f7fa ff0a 	bl	1f3e4 <mem_get>
	if (conn->lll.handle != handle) {
   245d0:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   245d2:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   245d4:	b9fb      	cbnz	r3, 24616 <ll_terminate_ind_send+0x5e>
	switch (reason) {
   245d6:	2c1a      	cmp	r4, #26
   245d8:	d804      	bhi.n	245e4 <ll_terminate_ind_send+0x2c>
   245da:	2c04      	cmp	r4, #4
   245dc:	d816      	bhi.n	2460c <ll_terminate_ind_send+0x54>
   245de:	2412      	movs	r4, #18
}
   245e0:	4620      	mov	r0, r4
   245e2:	bd38      	pop	{r3, r4, r5, pc}
	switch (reason) {
   245e4:	2c29      	cmp	r4, #41	; 0x29
   245e6:	d001      	beq.n	245ec <ll_terminate_ind_send+0x34>
   245e8:	2c3b      	cmp	r4, #59	; 0x3b
   245ea:	d1f8      	bne.n	245de <ll_terminate_ind_send+0x26>
		err = ull_cp_terminate(conn, reason);
   245ec:	4621      	mov	r1, r4
   245ee:	4628      	mov	r0, r5
   245f0:	f002 fa28 	bl	26a44 <ull_cp_terminate>
		if (err) {
   245f4:	4604      	mov	r4, r0
   245f6:	2800      	cmp	r0, #0
   245f8:	d1e1      	bne.n	245be <ll_terminate_ind_send+0x6>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   245fa:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   245fe:	2b00      	cmp	r3, #0
   24600:	dadd      	bge.n	245be <ll_terminate_ind_send+0x6>
			ull_periph_latency_cancel(conn, handle);
   24602:	4601      	mov	r1, r0
   24604:	4628      	mov	r0, r5
   24606:	f005 f82b 	bl	29660 <ull_periph_latency_cancel>
   2460a:	e7d8      	b.n	245be <ll_terminate_ind_send+0x6>
	switch (reason) {
   2460c:	4b04      	ldr	r3, [pc, #16]	; (24620 <ll_terminate_ind_send+0x68>)
   2460e:	40e3      	lsrs	r3, r4
   24610:	07db      	lsls	r3, r3, #31
   24612:	d4eb      	bmi.n	245ec <ll_terminate_ind_send+0x34>
   24614:	e7e3      	b.n	245de <ll_terminate_ind_send+0x26>
			return BT_HCI_ERR_CMD_DISALLOWED;
   24616:	240c      	movs	r4, #12
   24618:	e7d1      	b.n	245be <ll_terminate_ind_send+0x6>
   2461a:	bf00      	nop
   2461c:	200016c0 	.word	0x200016c0
   24620:	04380020 	.word	0x04380020

00024624 <ll_feature_req_send>:
{
   24624:	b538      	push	{r3, r4, r5, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   24626:	b990      	cbnz	r0, 2464e <ll_feature_req_send+0x2a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   24628:	4602      	mov	r2, r0
   2462a:	f44f 71cc 	mov.w	r1, #408	; 0x198
   2462e:	480c      	ldr	r0, [pc, #48]	; (24660 <ll_feature_req_send+0x3c>)
   24630:	f7fa fed8 	bl	1f3e4 <mem_get>
	if (conn->lll.handle != handle) {
   24634:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   24636:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   24638:	b94b      	cbnz	r3, 2464e <ll_feature_req_send+0x2a>
	err = ull_cp_feature_exchange(conn);
   2463a:	f002 f9c3 	bl	269c4 <ull_cp_feature_exchange>
	if (err) {
   2463e:	4604      	mov	r4, r0
   24640:	b918      	cbnz	r0, 2464a <ll_feature_req_send+0x26>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   24642:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   24646:	2b00      	cmp	r3, #0
   24648:	db04      	blt.n	24654 <ll_feature_req_send+0x30>
}
   2464a:	4620      	mov	r0, r4
   2464c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   2464e:	2402      	movs	r4, #2
}
   24650:	4620      	mov	r0, r4
   24652:	bd38      	pop	{r3, r4, r5, pc}
		ull_periph_latency_cancel(conn, handle);
   24654:	4601      	mov	r1, r0
   24656:	4628      	mov	r0, r5
   24658:	f005 f802 	bl	29660 <ull_periph_latency_cancel>
}
   2465c:	4620      	mov	r0, r4
   2465e:	bd38      	pop	{r3, r4, r5, pc}
   24660:	200016c0 	.word	0x200016c0

00024664 <ll_version_ind_send>:
{
   24664:	b538      	push	{r3, r4, r5, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   24666:	b990      	cbnz	r0, 2468e <ll_version_ind_send+0x2a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   24668:	4602      	mov	r2, r0
   2466a:	f44f 71cc 	mov.w	r1, #408	; 0x198
   2466e:	480c      	ldr	r0, [pc, #48]	; (246a0 <ll_version_ind_send+0x3c>)
   24670:	f7fa feb8 	bl	1f3e4 <mem_get>
	if (conn->lll.handle != handle) {
   24674:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   24676:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   24678:	b94b      	cbnz	r3, 2468e <ll_version_ind_send+0x2a>
	err = ull_cp_version_exchange(conn);
   2467a:	f002 f9b1 	bl	269e0 <ull_cp_version_exchange>
	if (err) {
   2467e:	4604      	mov	r4, r0
   24680:	b918      	cbnz	r0, 2468a <ll_version_ind_send+0x26>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   24682:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   24686:	2b00      	cmp	r3, #0
   24688:	db04      	blt.n	24694 <ll_version_ind_send+0x30>
}
   2468a:	4620      	mov	r0, r4
   2468c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   2468e:	2402      	movs	r4, #2
}
   24690:	4620      	mov	r0, r4
   24692:	bd38      	pop	{r3, r4, r5, pc}
		ull_periph_latency_cancel(conn, handle);
   24694:	4601      	mov	r1, r0
   24696:	4628      	mov	r0, r5
   24698:	f004 ffe2 	bl	29660 <ull_periph_latency_cancel>
}
   2469c:	4620      	mov	r0, r4
   2469e:	bd38      	pop	{r3, r4, r5, pc}
   246a0:	200016c0 	.word	0x200016c0

000246a4 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   246a4:	b9f0      	cbnz	r0, 246e4 <ll_length_req_send+0x40>
{
   246a6:	b570      	push	{r4, r5, r6, lr}
   246a8:	460d      	mov	r5, r1
   246aa:	4616      	mov	r6, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   246ac:	f44f 71cc 	mov.w	r1, #408	; 0x198
   246b0:	4602      	mov	r2, r0
   246b2:	4810      	ldr	r0, [pc, #64]	; (246f4 <ll_length_req_send+0x50>)
   246b4:	f7fa fe96 	bl	1f3e4 <mem_get>
	if (conn->lll.handle != handle) {
   246b8:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   246ba:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   246bc:	b983      	cbnz	r3, 246e0 <ll_length_req_send+0x3c>
}

static inline bool feature_dle(struct ll_conn *conn)
{
#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	return (conn->llcp.fex.features_used & LL_FEAT_BIT_DLE) != 0;
   246be:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
	if (!feature_dle(conn)) {
   246c2:	069b      	lsls	r3, r3, #26
   246c4:	d50a      	bpl.n	246dc <ll_length_req_send+0x38>
	err = ull_cp_data_length_update(conn, tx_octets, tx_time);
   246c6:	4632      	mov	r2, r6
   246c8:	4629      	mov	r1, r5
   246ca:	f002 f9df 	bl	26a8c <ull_cp_data_length_update>
	if (err) {
   246ce:	b920      	cbnz	r0, 246da <ll_length_req_send+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   246d0:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   246d4:	2b00      	cmp	r3, #0
   246d6:	db07      	blt.n	246e8 <ll_length_req_send+0x44>
	return 0;
   246d8:	2000      	movs	r0, #0
}
   246da:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   246dc:	201a      	movs	r0, #26
}
   246de:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   246e0:	2002      	movs	r0, #2
}
   246e2:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   246e4:	2002      	movs	r0, #2
}
   246e6:	4770      	bx	lr
		ull_periph_latency_cancel(conn, handle);
   246e8:	4601      	mov	r1, r0
   246ea:	4620      	mov	r0, r4
   246ec:	f004 ffb8 	bl	29660 <ull_periph_latency_cancel>
   246f0:	e7f2      	b.n	246d8 <ll_length_req_send+0x34>
   246f2:	bf00      	nop
   246f4:	200016c0 	.word	0x200016c0

000246f8 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   246f8:	4a03      	ldr	r2, [pc, #12]	; (24708 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   246fa:	4b04      	ldr	r3, [pc, #16]	; (2470c <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   246fc:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   246fe:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   24700:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   24702:	800b      	strh	r3, [r1, #0]
}
   24704:	4770      	bx	lr
   24706:	bf00      	nop
   24708:	20003298 	.word	0x20003298
   2470c:	20003296 	.word	0x20003296

00024710 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   24710:	4a02      	ldr	r2, [pc, #8]	; (2471c <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   24712:	4b03      	ldr	r3, [pc, #12]	; (24720 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   24714:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   24716:	8019      	strh	r1, [r3, #0]
}
   24718:	2000      	movs	r0, #0
   2471a:	4770      	bx	lr
   2471c:	20003298 	.word	0x20003298
   24720:	20003296 	.word	0x20003296

00024724 <ll_length_max_get>:
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   24724:	f04f 0c1b 	mov.w	ip, #27
   24728:	f8a0 c000 	strh.w	ip, [r0]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   2472c:	f44f 70a4 	mov.w	r0, #328	; 0x148
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   24730:	f8a2 c000 	strh.w	ip, [r2]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   24734:	8008      	strh	r0, [r1, #0]
	*max_rx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   24736:	8018      	strh	r0, [r3, #0]
}
   24738:	4770      	bx	lr
   2473a:	bf00      	nop

0002473c <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   2473c:	b9c0      	cbnz	r0, 24770 <ll_phy_get+0x34>
{
   2473e:	b538      	push	{r3, r4, r5, lr}
   24740:	460d      	mov	r5, r1
   24742:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   24744:	f44f 71cc 	mov.w	r1, #408	; 0x198
   24748:	4602      	mov	r2, r0
   2474a:	480a      	ldr	r0, [pc, #40]	; (24774 <ll_phy_get+0x38>)
   2474c:	f7fa fe4a 	bl	1f3e4 <mem_get>
   24750:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   24752:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   24754:	b950      	cbnz	r0, 2476c <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
   24756:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
   2475a:	f3c2 0202 	ubfx	r2, r2, #0, #3
   2475e:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
   24760:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   24764:	f3c3 0302 	ubfx	r3, r3, #0, #3
   24768:	7023      	strb	r3, [r4, #0]
}
   2476a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   2476c:	2002      	movs	r0, #2
}
   2476e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   24770:	2002      	movs	r0, #2
}
   24772:	4770      	bx	lr
   24774:	200016c0 	.word	0x200016c0

00024778 <ll_phy_default_set>:
	default_phy_tx = tx;
   24778:	4a02      	ldr	r2, [pc, #8]	; (24784 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   2477a:	4b03      	ldr	r3, [pc, #12]	; (24788 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   2477c:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   2477e:	7019      	strb	r1, [r3, #0]
}
   24780:	2000      	movs	r0, #0
   24782:	4770      	bx	lr
   24784:	200033ea 	.word	0x200033ea
   24788:	200033e9 	.word	0x200033e9

0002478c <ll_phy_req_send>:
{
   2478c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2478e:	b083      	sub	sp, #12
	if (handle >= CONFIG_BT_MAX_CONN) {
   24790:	b9f8      	cbnz	r0, 247d2 <ll_phy_req_send+0x46>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   24792:	460f      	mov	r7, r1
   24794:	4616      	mov	r6, r2
   24796:	f44f 71cc 	mov.w	r1, #408	; 0x198
   2479a:	4602      	mov	r2, r0
   2479c:	4813      	ldr	r0, [pc, #76]	; (247ec <ll_phy_req_send+0x60>)
   2479e:	461d      	mov	r5, r3
   247a0:	f7fa fe20 	bl	1f3e4 <mem_get>
	if (conn->lll.handle != handle) {
   247a4:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   247a6:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   247a8:	b99b      	cbnz	r3, 247d2 <ll_phy_req_send+0x46>
}

static inline bool feature_phy_2m(struct ll_conn *conn)
{
#if defined(CONFIG_BT_CTLR_PHY_2M)
	return (conn->llcp.fex.features_used & LL_FEAT_BIT_PHY_2M) != 0;
   247aa:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
	if (!feature_phy_2m(conn) && !feature_phy_coded(conn)) {
   247ae:	05db      	lsls	r3, r3, #23
   247b0:	d513      	bpl.n	247da <ll_phy_req_send+0x4e>
	err = ull_cp_phy_update(conn, tx, flags, rx, 1U);
   247b2:	462b      	mov	r3, r5
   247b4:	2501      	movs	r5, #1
   247b6:	9500      	str	r5, [sp, #0]
   247b8:	4632      	mov	r2, r6
   247ba:	4639      	mov	r1, r7
   247bc:	f002 f91e 	bl	269fc <ull_cp_phy_update>
	if (err) {
   247c0:	4605      	mov	r5, r0
   247c2:	b918      	cbnz	r0, 247cc <ll_phy_req_send+0x40>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   247c4:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   247c8:	2b00      	cmp	r3, #0
   247ca:	db0a      	blt.n	247e2 <ll_phy_req_send+0x56>
}
   247cc:	4628      	mov	r0, r5
   247ce:	b003      	add	sp, #12
   247d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   247d2:	2502      	movs	r5, #2
}
   247d4:	4628      	mov	r0, r5
   247d6:	b003      	add	sp, #12
   247d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   247da:	251a      	movs	r5, #26
}
   247dc:	4628      	mov	r0, r5
   247de:	b003      	add	sp, #12
   247e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ull_periph_latency_cancel(conn, handle);
   247e2:	4601      	mov	r1, r0
   247e4:	4620      	mov	r0, r4
   247e6:	f004 ff3b 	bl	29660 <ull_periph_latency_cancel>
   247ea:	e7ef      	b.n	247cc <ll_phy_req_send+0x40>
   247ec:	200016c0 	.word	0x200016c0

000247f0 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   247f0:	b9d8      	cbnz	r0, 2482a <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   247f2:	4602      	mov	r2, r0
{
   247f4:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   247f6:	480e      	ldr	r0, [pc, #56]	; (24830 <ll_apto_get+0x40>)
   247f8:	460c      	mov	r4, r1
   247fa:	f44f 71cc 	mov.w	r1, #408	; 0x198
   247fe:	f7fa fdf1 	bl	1f3e4 <mem_get>
   24802:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   24804:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   24806:	b970      	cbnz	r0, 24826 <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   24808:	f8b2 317e 	ldrh.w	r3, [r2, #382]	; 0x17e
   2480c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
   2480e:	fb02 f303 	mul.w	r3, r2, r3
   24812:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   24816:	4a07      	ldr	r2, [pc, #28]	; (24834 <ll_apto_get+0x44>)
   24818:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   2481c:	fba2 2303 	umull	r2, r3, r2, r3
   24820:	099b      	lsrs	r3, r3, #6
   24822:	8023      	strh	r3, [r4, #0]
}
   24824:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   24826:	2002      	movs	r0, #2
}
   24828:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   2482a:	2002      	movs	r0, #2
}
   2482c:	4770      	bx	lr
   2482e:	bf00      	nop
   24830:	200016c0 	.word	0x200016c0
   24834:	10624dd3 	.word	0x10624dd3

00024838 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   24838:	b9d8      	cbnz	r0, 24872 <ll_apto_set+0x3a>
{
   2483a:	b510      	push	{r4, lr}
   2483c:	4602      	mov	r2, r0
   2483e:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   24840:	480d      	ldr	r0, [pc, #52]	; (24878 <ll_apto_set+0x40>)
   24842:	f44f 71cc 	mov.w	r1, #408	; 0x198
   24846:	f7fa fdcd 	bl	1f3e4 <mem_get>
   2484a:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   2484c:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   2484e:	b970      	cbnz	r0, 2486e <ll_apto_set+0x36>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   24850:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
   24852:	f240 41e2 	movw	r1, #1250	; 0x4e2
   24856:	fb01 f202 	mul.w	r2, r1, r2
   2485a:	f242 7110 	movw	r1, #10000	; 0x2710
   2485e:	fb01 2104 	mla	r1, r1, r4, r2
   24862:	3901      	subs	r1, #1
   24864:	fbb1 f1f2 	udiv	r1, r1, r2
   24868:	f8a3 117e 	strh.w	r1, [r3, #382]	; 0x17e
}
   2486c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   2486e:	2002      	movs	r0, #2
}
   24870:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   24872:	2002      	movs	r0, #2
}
   24874:	4770      	bx	lr
   24876:	bf00      	nop
   24878:	200016c0 	.word	0x200016c0

0002487c <ull_conn_init>:
	err = init_reset();
   2487c:	f7ff bbd4 	b.w	24028 <init_reset>

00024880 <ull_conn_reset>:
{
   24880:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   24882:	2200      	movs	r2, #0
   24884:	f44f 71cc 	mov.w	r1, #408	; 0x198
   24888:	4814      	ldr	r0, [pc, #80]	; (248dc <ull_conn_reset+0x5c>)
   2488a:	f7fa fdab 	bl	1f3e4 <mem_get>
   2488e:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   24890:	f100 021c 	add.w	r2, r0, #28
   24894:	4601      	mov	r1, r0
   24896:	2003      	movs	r0, #3
   24898:	f7fe fa8e 	bl	22db8 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   2489c:	b108      	cbz	r0, 248a2 <ull_conn_reset+0x22>
   2489e:	3078      	adds	r0, #120	; 0x78
   248a0:	d10d      	bne.n	248be <ull_conn_reset+0x3e>
	MFIFO_INIT(conn_tx);
   248a2:	490f      	ldr	r1, [pc, #60]	; (248e0 <ull_conn_reset+0x60>)
	MFIFO_INIT(conn_ack);
   248a4:	4a0f      	ldr	r2, [pc, #60]	; (248e4 <ull_conn_reset+0x64>)
	conn->lll.link_tx_free = NULL;
   248a6:	2300      	movs	r3, #0
	conn->lll.handle = LLL_HANDLE_INVALID;
   248a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   248ac:	8520      	strh	r0, [r4, #40]	; 0x28
	conn->lll.link_tx_free = NULL;
   248ae:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	MFIFO_INIT(conn_tx);
   248b2:	808b      	strh	r3, [r1, #4]
	MFIFO_INIT(conn_ack);
   248b4:	8093      	strh	r3, [r2, #4]
}
   248b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = init_reset();
   248ba:	f7ff bbb5 	b.w	24028 <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
   248be:	4a0a      	ldr	r2, [pc, #40]	; (248e8 <ull_conn_reset+0x68>)
   248c0:	490a      	ldr	r1, [pc, #40]	; (248ec <ull_conn_reset+0x6c>)
   248c2:	480b      	ldr	r0, [pc, #44]	; (248f0 <ull_conn_reset+0x70>)
   248c4:	f640 13e6 	movw	r3, #2534	; 0x9e6
   248c8:	f00e fda6 	bl	33418 <assert_print>
   248cc:	4040      	eors	r0, r0
   248ce:	f380 8811 	msr	BASEPRI, r0
   248d2:	f04f 0003 	mov.w	r0, #3
   248d6:	df02      	svc	2
   248d8:	e7e3      	b.n	248a2 <ull_conn_reset+0x22>
   248da:	bf00      	nop
   248dc:	200016c0 	.word	0x200016c0
   248e0:	200006e8 	.word	0x200006e8
   248e4:	200006a0 	.word	0x200006a0
   248e8:	0003a650 	.word	0x0003a650
   248ec:	0003a744 	.word	0x0003a744
   248f0:	00039f74 	.word	0x00039f74

000248f4 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   248f4:	4b01      	ldr	r3, [pc, #4]	; (248fc <ull_conn_default_phy_tx_get+0x8>)
}
   248f6:	7818      	ldrb	r0, [r3, #0]
   248f8:	4770      	bx	lr
   248fa:	bf00      	nop
   248fc:	200033ea 	.word	0x200033ea

00024900 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   24900:	4b01      	ldr	r3, [pc, #4]	; (24908 <ull_conn_default_phy_rx_get+0x8>)
}
   24902:	7818      	ldrb	r0, [r3, #0]
   24904:	4770      	bx	lr
   24906:	bf00      	nop
   24908:	200033e9 	.word	0x200033e9

0002490c <ull_conn_setup>:
{
   2490c:	b538      	push	{r3, r4, r5, lr}
	hdr = HDR_LLL2ULL(ftr->param);
   2490e:	688b      	ldr	r3, [r1, #8]
	rx->link = rx_link;
   24910:	6008      	str	r0, [r1, #0]
	hdr = HDR_LLL2ULL(ftr->param);
   24912:	681d      	ldr	r5, [r3, #0]
   24914:	782b      	ldrb	r3, [r5, #0]
{
   24916:	460c      	mov	r4, r1
	if (ull_ref_get(hdr)) {
   24918:	b193      	cbz	r3, 24940 <ull_conn_setup+0x34>
		LL_ASSERT(!hdr->disabled_cb);
   2491a:	696b      	ldr	r3, [r5, #20]
   2491c:	b163      	cbz	r3, 24938 <ull_conn_setup+0x2c>
   2491e:	4a0b      	ldr	r2, [pc, #44]	; (2494c <ull_conn_setup+0x40>)
   24920:	490b      	ldr	r1, [pc, #44]	; (24950 <ull_conn_setup+0x44>)
   24922:	480c      	ldr	r0, [pc, #48]	; (24954 <ull_conn_setup+0x48>)
   24924:	f240 4343 	movw	r3, #1091	; 0x443
   24928:	f00e fd76 	bl	33418 <assert_print>
   2492c:	4040      	eors	r0, r0
   2492e:	f380 8811 	msr	BASEPRI, r0
   24932:	f04f 0003 	mov.w	r0, #3
   24936:	df02      	svc	2
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
   24938:	4b07      	ldr	r3, [pc, #28]	; (24958 <ull_conn_setup+0x4c>)
   2493a:	e9c5 3405 	strd	r3, r4, [r5, #20]
}
   2493e:	bd38      	pop	{r3, r4, r5, pc}
   24940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		conn_setup_adv_scan_disabled_cb(rx);
   24944:	4608      	mov	r0, r1
   24946:	f7ff bcb3 	b.w	242b0 <conn_setup_adv_scan_disabled_cb>
   2494a:	bf00      	nop
   2494c:	0003a650 	.word	0x0003a650
   24950:	0003a558 	.word	0x0003a558
   24954:	00039f74 	.word	0x00039f74
   24958:	000242b1 	.word	0x000242b1

0002495c <ull_conn_rx>:
{
   2495c:	b538      	push	{r3, r4, r5, lr}
	conn = ll_connected_get((*rx)->hdr.handle);
   2495e:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
   24960:	88da      	ldrh	r2, [r3, #6]
   24962:	b9a2      	cbnz	r2, 2498e <ull_conn_rx+0x32>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   24964:	4818      	ldr	r0, [pc, #96]	; (249c8 <ull_conn_rx+0x6c>)
   24966:	460c      	mov	r4, r1
   24968:	f44f 71cc 	mov.w	r1, #408	; 0x198
   2496c:	f7fa fd3a 	bl	1f3e4 <mem_get>
	if (conn->lll.handle != handle) {
   24970:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   24972:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   24974:	b953      	cbnz	r3, 2498c <ull_conn_rx+0x30>
	ull_cp_tx_ntf(conn);
   24976:	f002 f9a3 	bl	26cc0 <ull_cp_tx_ntf>
	pdu_rx = (void *)(*rx)->pdu;
   2497a:	6821      	ldr	r1, [r4, #0]
	switch (pdu_rx->ll_id) {
   2497c:	7f0b      	ldrb	r3, [r1, #28]
   2497e:	f003 0303 	and.w	r3, r3, #3
   24982:	2b03      	cmp	r3, #3
   24984:	d107      	bne.n	24996 <ull_conn_rx+0x3a>
		ull_cp_rx(conn, *rx);
   24986:	4628      	mov	r0, r5
   24988:	f002 f9ae 	bl	26ce8 <ull_cp_rx>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   2498c:	6823      	ldr	r3, [r4, #0]
   2498e:	2201      	movs	r2, #1
   24990:	711a      	strb	r2, [r3, #4]
}
   24992:	2000      	movs	r0, #0
   24994:	bd38      	pop	{r3, r4, r5, pc}
	switch (pdu_rx->ll_id) {
   24996:	b95b      	cbnz	r3, 249b0 <ull_conn_rx+0x54>
		if (conn->pause_rx_data) {
   24998:	f895 3178 	ldrb.w	r3, [r5, #376]	; 0x178
   2499c:	079b      	lsls	r3, r3, #30
   2499e:	d503      	bpl.n	249a8 <ull_conn_rx+0x4c>
			conn->llcp_terminate.reason_final =
   249a0:	233d      	movs	r3, #61	; 0x3d
   249a2:	f885 3148 	strb.w	r3, [r5, #328]	; 0x148
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   249a6:	6821      	ldr	r1, [r4, #0]
   249a8:	2301      	movs	r3, #1
   249aa:	710b      	strb	r3, [r1, #4]
}
   249ac:	2000      	movs	r0, #0
   249ae:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->pause_rx_data) {
   249b0:	f895 3178 	ldrb.w	r3, [r5, #376]	; 0x178
   249b4:	079a      	lsls	r2, r3, #30
   249b6:	d5ec      	bpl.n	24992 <ull_conn_rx+0x36>
			conn->llcp_terminate.reason_final =
   249b8:	233d      	movs	r3, #61	; 0x3d
   249ba:	f885 3148 	strb.w	r3, [r5, #328]	; 0x148
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   249be:	6823      	ldr	r3, [r4, #0]
   249c0:	2201      	movs	r2, #1
   249c2:	711a      	strb	r2, [r3, #4]
}
   249c4:	2000      	movs	r0, #0
   249c6:	bd38      	pop	{r3, r4, r5, pc}
   249c8:	200016c0 	.word	0x200016c0

000249cc <ull_conn_llcp>:
{
   249cc:	b570      	push	{r4, r5, r6, lr}
   249ce:	4604      	mov	r4, r0
	LL_ASSERT(conn->lll.handle != LLL_HANDLE_INVALID);
   249d0:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   249d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   249d6:	4298      	cmp	r0, r3
{
   249d8:	460e      	mov	r6, r1
   249da:	4615      	mov	r5, r2
	LL_ASSERT(conn->lll.handle != LLL_HANDLE_INVALID);
   249dc:	d00c      	beq.n	249f8 <ull_conn_llcp+0x2c>
	ull_cp_run(conn);
   249de:	4620      	mov	r0, r4
	conn->llcp.prep.ticks_at_expire = ticks_at_expire;
   249e0:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
	conn->llcp.prep.lazy = lazy;
   249e4:	f8a4 5110 	strh.w	r5, [r4, #272]	; 0x110
	ull_cp_run(conn);
   249e8:	f001 ffa8 	bl	2693c <ull_cp_run>
	if (conn->cancel_prepare) {
   249ec:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
   249f0:	f013 0001 	ands.w	r0, r3, #1
   249f4:	d10e      	bne.n	24a14 <ull_conn_llcp+0x48>
}
   249f6:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(conn->lll.handle != LLL_HANDLE_INVALID);
   249f8:	4a0a      	ldr	r2, [pc, #40]	; (24a24 <ull_conn_llcp+0x58>)
   249fa:	490b      	ldr	r1, [pc, #44]	; (24a28 <ull_conn_llcp+0x5c>)
   249fc:	480b      	ldr	r0, [pc, #44]	; (24a2c <ull_conn_llcp+0x60>)
   249fe:	f240 53b6 	movw	r3, #1462	; 0x5b6
   24a02:	f00e fd09 	bl	33418 <assert_print>
   24a06:	4040      	eors	r0, r0
   24a08:	f380 8811 	msr	BASEPRI, r0
   24a0c:	f04f 0003 	mov.w	r0, #3
   24a10:	df02      	svc	2
   24a12:	e7e4      	b.n	249de <ull_conn_llcp+0x12>
		conn->cancel_prepare = 0U;
   24a14:	f36f 0300 	bfc	r3, #0, #1
   24a18:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
		return -ECANCELED;
   24a1c:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   24a20:	bd70      	pop	{r4, r5, r6, pc}
   24a22:	bf00      	nop
   24a24:	0003a650 	.word	0x0003a650
   24a28:	0003a75c 	.word	0x0003a75c
   24a2c:	00039f74 	.word	0x00039f74

00024a30 <ull_conn_tx_demux>:
{
   24a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   24a34:	4f1c      	ldr	r7, [pc, #112]	; (24aa8 <ull_conn_tx_demux+0x78>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   24a36:	4e1d      	ldr	r6, [pc, #116]	; (24aac <ull_conn_tx_demux+0x7c>)
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   24a38:	797a      	ldrb	r2, [r7, #5]
{
   24a3a:	4680      	mov	r8, r0
	return (void *)(fifo + first * size);
   24a3c:	f107 0508 	add.w	r5, r7, #8
   24a40:	e019      	b.n	24a76 <ull_conn_tx_demux+0x46>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   24a42:	f7fa fccf 	bl	1f3e4 <mem_get>
   24a46:	4603      	mov	r3, r0
			ull_tx_q_enqueue_data(&conn->tx_q, tx);
   24a48:	30d4      	adds	r0, #212	; 0xd4
	if (conn->lll.handle != handle) {
   24a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   24a4c:	bb03      	cbnz	r3, 24a90 <ull_conn_tx_demux+0x60>
			ull_tx_q_enqueue_data(&conn->tx_q, tx);
   24a4e:	6861      	ldr	r1, [r4, #4]
   24a50:	f001 fd02 	bl	26458 <ull_tx_q_enqueue_data>
	uint8_t _first = *first; /* Copy read-index */
   24a54:	793b      	ldrb	r3, [r7, #4]
		MFIFO_DEQUEUE(conn_tx);
   24a56:	797a      	ldrb	r2, [r7, #5]
   24a58:	78b9      	ldrb	r1, [r7, #2]
	if (_first == last) {
   24a5a:	429a      	cmp	r2, r3
	} while (--count);
   24a5c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	_first += 1U;
   24a60:	f103 0301 	add.w	r3, r3, #1
	if (_first == last) {
   24a64:	d004      	beq.n	24a70 <ull_conn_tx_demux+0x40>
	_first += 1U;
   24a66:	b2db      	uxtb	r3, r3
		_first = 0U;
   24a68:	4299      	cmp	r1, r3
   24a6a:	bf08      	it	eq
   24a6c:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   24a6e:	713b      	strb	r3, [r7, #4]
   24a70:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
   24a74:	d016      	beq.n	24aa4 <ull_conn_tx_demux+0x74>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   24a76:	793b      	ldrb	r3, [r7, #4]
   24a78:	783c      	ldrb	r4, [r7, #0]
	if (first == last) {
   24a7a:	4293      	cmp	r3, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   24a7c:	f44f 71cc 	mov.w	r1, #408	; 0x198
   24a80:	4630      	mov	r0, r6
	return (void *)(fifo + first * size);
   24a82:	fb13 f304 	smulbb	r3, r3, r4
	if (first == last) {
   24a86:	d00d      	beq.n	24aa4 <ull_conn_tx_demux+0x74>
	if (handle >= CONFIG_BT_MAX_CONN) {
   24a88:	5aea      	ldrh	r2, [r5, r3]
	return (void *)(fifo + first * size);
   24a8a:	195c      	adds	r4, r3, r5
   24a8c:	2a00      	cmp	r2, #0
   24a8e:	d0d8      	beq.n	24a42 <ull_conn_tx_demux+0x12>
			struct node_tx *tx = lll_tx->node;
   24a90:	6861      	ldr	r1, [r4, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   24a92:	790b      	ldrb	r3, [r1, #4]
   24a94:	f36f 0301 	bfc	r3, #0, #2
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   24a98:	f64f 70ff 	movw	r0, #65535	; 0xffff
			p->ll_id = PDU_DATA_LLID_RESV;
   24a9c:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   24a9e:	f7fe f891 	bl	22bc4 <ll_tx_ack_put>
   24aa2:	e7d7      	b.n	24a54 <ull_conn_tx_demux+0x24>
}
   24aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24aa8:	200006e8 	.word	0x200006e8
   24aac:	200016c0 	.word	0x200016c0

00024ab0 <conn_cleanup_finalize>:
{
   24ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ull_cp_state_set(conn, ULL_CP_DISCONNECTED);
   24ab4:	2101      	movs	r1, #1
{
   24ab6:	b083      	sub	sp, #12
	ull_tx_q_resume_data(&conn->tx_q);
   24ab8:	f100 06d4 	add.w	r6, r0, #212	; 0xd4
{
   24abc:	4681      	mov	r9, r0
	ull_cp_state_set(conn, ULL_CP_DISCONNECTED);
   24abe:	f001 ff47 	bl	26950 <ull_cp_state_set>
	ull_tx_q_resume_data(&conn->tx_q);
   24ac2:	4630      	mov	r0, r6
   24ac4:	f001 fcb0 	bl	26428 <ull_tx_q_resume_data>
	tx = ull_tx_q_dequeue(&conn->tx_q);
   24ac8:	4630      	mov	r0, r6
   24aca:	f001 fce5 	bl	26498 <ull_tx_q_dequeue>
	if (tx) {
   24ace:	2800      	cmp	r0, #0
   24ad0:	d03b      	beq.n	24b4a <conn_cleanup_finalize+0x9a>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   24ad2:	7903      	ldrb	r3, [r0, #4]
		link = mem_acquire(&mem_link_tx.free);
   24ad4:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 24b94 <conn_cleanup_finalize+0xe4>
		LL_ASSERT(link);
   24ad8:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 24b98 <conn_cleanup_finalize+0xe8>
   24adc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 24b9c <conn_cleanup_finalize+0xec>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   24ae0:	f003 0303 	and.w	r3, r3, #3
   24ae4:	2b03      	cmp	r3, #3
   24ae6:	bf0c      	ite	eq
   24ae8:	4603      	moveq	r3, r0
   24aea:	2300      	movne	r3, #0
			tx->next = NULL;
   24aec:	6003      	str	r3, [r0, #0]
   24aee:	4604      	mov	r4, r0
		link = mem_acquire(&mem_link_tx.free);
   24af0:	4640      	mov	r0, r8
   24af2:	f7fa fc43 	bl	1f37c <mem_acquire>
		LL_ASSERT(link);
   24af6:	f109 077c 	add.w	r7, r9, #124	; 0x7c
   24afa:	4605      	mov	r5, r0
   24afc:	b1b8      	cbz	r0, 24b2e <conn_cleanup_finalize+0x7e>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   24afe:	4621      	mov	r1, r4
   24b00:	463a      	mov	r2, r7
   24b02:	4628      	mov	r0, r5
   24b04:	f7fa fca0 	bl	1f448 <memq_enqueue>
	tx = ull_tx_q_dequeue(&conn->tx_q);
   24b08:	4630      	mov	r0, r6
   24b0a:	f001 fcc5 	bl	26498 <ull_tx_q_dequeue>
	if (tx) {
   24b0e:	4604      	mov	r4, r0
   24b10:	b1d8      	cbz	r0, 24b4a <conn_cleanup_finalize+0x9a>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   24b12:	7903      	ldrb	r3, [r0, #4]
   24b14:	f003 0303 	and.w	r3, r3, #3
   24b18:	2b03      	cmp	r3, #3
   24b1a:	bf0c      	ite	eq
   24b1c:	4603      	moveq	r3, r0
   24b1e:	2300      	movne	r3, #0
			tx->next = NULL;
   24b20:	6003      	str	r3, [r0, #0]
		link = mem_acquire(&mem_link_tx.free);
   24b22:	4640      	mov	r0, r8
   24b24:	f7fa fc2a 	bl	1f37c <mem_acquire>
		LL_ASSERT(link);
   24b28:	4605      	mov	r5, r0
   24b2a:	2800      	cmp	r0, #0
   24b2c:	d1e7      	bne.n	24afe <conn_cleanup_finalize+0x4e>
   24b2e:	481c      	ldr	r0, [pc, #112]	; (24ba0 <conn_cleanup_finalize+0xf0>)
   24b30:	f640 2374 	movw	r3, #2676	; 0xa74
   24b34:	465a      	mov	r2, fp
   24b36:	4651      	mov	r1, sl
   24b38:	f00e fc6e 	bl	33418 <assert_print>
   24b3c:	4040      	eors	r0, r0
   24b3e:	f380 8811 	msr	BASEPRI, r0
   24b42:	f04f 0003 	mov.w	r0, #3
   24b46:	df02      	svc	2
   24b48:	e7d9      	b.n	24afe <conn_cleanup_finalize+0x4e>
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   24b4a:	f8b9 2028 	ldrh.w	r2, [r9, #40]	; 0x28
   24b4e:	4b15      	ldr	r3, [pc, #84]	; (24ba4 <conn_cleanup_finalize+0xf4>)
   24b50:	f8cd 9000 	str.w	r9, [sp]
   24b54:	3203      	adds	r2, #3
   24b56:	b2d2      	uxtb	r2, r2
   24b58:	2101      	movs	r1, #1
   24b5a:	2000      	movs	r0, #0
   24b5c:	f7fb fdc4 	bl	206e8 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   24b60:	f010 0ffd 	tst.w	r0, #253	; 0xfd
   24b64:	d00c      	beq.n	24b80 <conn_cleanup_finalize+0xd0>
   24b66:	4a0c      	ldr	r2, [pc, #48]	; (24b98 <conn_cleanup_finalize+0xe8>)
   24b68:	490f      	ldr	r1, [pc, #60]	; (24ba8 <conn_cleanup_finalize+0xf8>)
   24b6a:	480d      	ldr	r0, [pc, #52]	; (24ba0 <conn_cleanup_finalize+0xf0>)
   24b6c:	f640 232b 	movw	r3, #2603	; 0xa2b
   24b70:	f00e fc52 	bl	33418 <assert_print>
   24b74:	4040      	eors	r0, r0
   24b76:	f380 8811 	msr	BASEPRI, r0
   24b7a:	f04f 0003 	mov.w	r0, #3
   24b7e:	df02      	svc	2
	lll->handle = LLL_HANDLE_INVALID;
   24b80:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   24b84:	20ff      	movs	r0, #255	; 0xff
	lll->handle = LLL_HANDLE_INVALID;
   24b86:	f8a9 3028 	strh.w	r3, [r9, #40]	; 0x28
}
   24b8a:	b003      	add	sp, #12
   24b8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ull_conn_tx_demux(UINT8_MAX);
   24b90:	f7ff bf4e 	b.w	24a30 <ull_conn_tx_demux>
   24b94:	20002684 	.word	0x20002684
   24b98:	0003a650 	.word	0x0003a650
   24b9c:	0003a6a0 	.word	0x0003a6a0
   24ba0:	00039f74 	.word	0x00039f74
   24ba4:	0002418d 	.word	0x0002418d
   24ba8:	0003a714 	.word	0x0003a714

00024bac <ull_conn_done>:
{
   24bac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = CONTAINER_OF(done->param, struct ll_conn, ull);
   24bb0:	69c4      	ldr	r4, [r0, #28]
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   24bb2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   24bb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   24bb8:	429a      	cmp	r2, r3
{
   24bba:	b08d      	sub	sp, #52	; 0x34
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   24bbc:	d058      	beq.n	24c70 <ull_conn_done+0xc4>
   24bbe:	4605      	mov	r5, r0
	ull_cp_tx_ntf(conn);
   24bc0:	4620      	mov	r0, r4
   24bc2:	f002 f87d 	bl	26cc0 <ull_cp_tx_ntf>
	switch (done->extra.mic_state) {
   24bc6:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   24bca:	2b01      	cmp	r3, #1
   24bcc:	f000 80d1 	beq.w	24d72 <ull_conn_done+0x1c6>
   24bd0:	2b02      	cmp	r3, #2
   24bd2:	f000 80bd 	beq.w	24d50 <ull_conn_done+0x1a4>
   24bd6:	2b00      	cmp	r3, #0
   24bd8:	f000 809c 	beq.w	24d14 <ull_conn_done+0x168>
	reason_final = conn->llcp_terminate.reason_final;
   24bdc:	f894 7148 	ldrb.w	r7, [r4, #328]	; 0x148
	if (reason_final && (
   24be0:	2f00      	cmp	r7, #0
   24be2:	f040 80b8 	bne.w	24d56 <ull_conn_done+0x1aa>
	if (lll->latency_prepare) {
   24be6:	8de6      	ldrh	r6, [r4, #46]	; 0x2e
	latency_event = lll->latency_event;
   24be8:	f8b4 8030 	ldrh.w	r8, [r4, #48]	; 0x30
	if (lll->latency_prepare) {
   24bec:	2e00      	cmp	r6, #0
   24bee:	d142      	bne.n	24c76 <ull_conn_done+0xca>
	if (done->extra.trx_cnt) {
   24bf0:	8caa      	ldrh	r2, [r5, #36]	; 0x24
		elapsed_event = latency_event + 1U;
   24bf2:	f108 0601 	add.w	r6, r8, #1
	ticks_drift_plus = 0U;
   24bf6:	2300      	movs	r3, #0
	ticks_drift_minus = 0U;
   24bf8:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
		elapsed_event = latency_event + 1U;
   24bfc:	b2b6      	uxth	r6, r6
	if (done->extra.trx_cnt) {
   24bfe:	2a00      	cmp	r2, #0
   24c00:	d041      	beq.n	24c86 <ull_conn_done+0xda>
		} else if (lll->role) {
   24c02:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   24c06:	2b00      	cmp	r3, #0
   24c08:	f2c0 80fd 	blt.w	24e06 <ull_conn_done+0x25a>
		conn->connect_expire = 0U;
   24c0c:	2300      	movs	r3, #0
   24c0e:	f8a4 3182 	strh.w	r3, [r4, #386]	; 0x182
	if (done->extra.crc_valid) {
   24c12:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   24c16:	07d9      	lsls	r1, r3, #31
   24c18:	f140 80b1 	bpl.w	24d7e <ull_conn_done+0x1d2>
		conn->supervision_expire = 0U;
   24c1c:	2300      	movs	r3, #0
   24c1e:	f8a4 3186 	strh.w	r3, [r4, #390]	; 0x186
	if (-ETIMEDOUT == ull_cp_prt_elapse(conn, elapsed_event, &error_code)) {
   24c22:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   24c26:	4631      	mov	r1, r6
   24c28:	4620      	mov	r0, r4
   24c2a:	f001 fe43 	bl	268b4 <ull_cp_prt_elapse>
   24c2e:	3074      	adds	r0, #116	; 0x74
   24c30:	f000 80fc 	beq.w	24e2c <ull_conn_done+0x280>
	if (conn->apto_expire != 0U) {
   24c34:	f8b4 3180 	ldrh.w	r3, [r4, #384]	; 0x180
   24c38:	b12b      	cbz	r3, 24c46 <ull_conn_done+0x9a>
		if (conn->apto_expire > elapsed_event) {
   24c3a:	42b3      	cmp	r3, r6
   24c3c:	f240 80bb 	bls.w	24db6 <ull_conn_done+0x20a>
			conn->apto_expire -= elapsed_event;
   24c40:	1b9b      	subs	r3, r3, r6
   24c42:	f8a4 3180 	strh.w	r3, [r4, #384]	; 0x180
	if (conn->appto_expire != 0U) {
   24c46:	f8b4 317c 	ldrh.w	r3, [r4, #380]	; 0x17c
   24c4a:	b12b      	cbz	r3, 24c58 <ull_conn_done+0xac>
		if (conn->appto_expire > elapsed_event) {
   24c4c:	42b3      	cmp	r3, r6
   24c4e:	f240 80c2 	bls.w	24dd6 <ull_conn_done+0x22a>
			conn->appto_expire -= elapsed_event;
   24c52:	1b9b      	subs	r3, r3, r6
   24c54:	f8a4 317c 	strh.w	r3, [r4, #380]	; 0x17c
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   24c58:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	if ((force) || (latency_event != lll->latency_event)) {
   24c5a:	8e22      	ldrh	r2, [r4, #48]	; 0x30
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   24c5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	if ((force) || (latency_event != lll->latency_event)) {
   24c5e:	bb97      	cbnz	r7, 24cc6 <ull_conn_done+0x11a>
   24c60:	4590      	cmp	r8, r2
   24c62:	f000 80a2 	beq.w	24daa <ull_conn_done+0x1fe>
		lazy = lll->latency_event + 1U;
   24c66:	3201      	adds	r2, #1
   24c68:	b291      	uxth	r1, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   24c6a:	bb73      	cbnz	r3, 24cca <ull_conn_done+0x11e>
   24c6c:	bb6d      	cbnz	r5, 24cca <ull_conn_done+0x11e>
   24c6e:	bb61      	cbnz	r1, 24cca <ull_conn_done+0x11e>
}
   24c70:	b00d      	add	sp, #52	; 0x34
   24c72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (done->extra.trx_cnt) {
   24c76:	8caa      	ldrh	r2, [r5, #36]	; 0x24
		elapsed_event = latency_event + lll->latency_prepare;
   24c78:	4446      	add	r6, r8
	ticks_drift_plus = 0U;
   24c7a:	2300      	movs	r3, #0
	ticks_drift_minus = 0U;
   24c7c:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
		elapsed_event = latency_event + lll->latency_prepare;
   24c80:	b2b6      	uxth	r6, r6
	if (done->extra.trx_cnt) {
   24c82:	2a00      	cmp	r2, #0
   24c84:	d1bd      	bne.n	24c02 <ull_conn_done+0x56>
	if (done->extra.crc_valid) {
   24c86:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   24c8a:	07da      	lsls	r2, r3, #31
   24c8c:	d4c6      	bmi.n	24c1c <ull_conn_done+0x70>
	else if (conn->connect_expire) {
   24c8e:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
   24c92:	2b00      	cmp	r3, #0
   24c94:	d073      	beq.n	24d7e <ull_conn_done+0x1d2>
		if (conn->connect_expire > elapsed_event) {
   24c96:	42b3      	cmp	r3, r6
   24c98:	f240 80e6 	bls.w	24e68 <ull_conn_done+0x2bc>
			conn->connect_expire -= elapsed_event;
   24c9c:	1b9b      	subs	r3, r3, r6
   24c9e:	f8a4 3182 	strh.w	r3, [r4, #386]	; 0x182
	if (conn->supervision_expire) {
   24ca2:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
   24ca6:	2b00      	cmp	r3, #0
   24ca8:	d0bb      	beq.n	24c22 <ull_conn_done+0x76>
		if (conn->supervision_expire > elapsed_event) {
   24caa:	429e      	cmp	r6, r3
   24cac:	f080 80ce 	bcs.w	24e4c <ull_conn_done+0x2a0>
			conn->supervision_expire -= elapsed_event;
   24cb0:	1b9b      	subs	r3, r3, r6
   24cb2:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
   24cb4:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   24cb6:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   24cb8:	f8a4 3186 	strh.w	r3, [r4, #390]	; 0x186
			lll->latency_event = 0U;
   24cbc:	8622      	strh	r2, [r4, #48]	; 0x30
			if (conn->supervision_expire <= 6U) {
   24cbe:	f200 8091 	bhi.w	24de4 <ull_conn_done+0x238>
				force = 1U;
   24cc2:	2701      	movs	r7, #1
   24cc4:	e7ad      	b.n	24c22 <ull_conn_done+0x76>
		lazy = lll->latency_event + 1U;
   24cc6:	3201      	adds	r2, #1
   24cc8:	b291      	uxth	r1, r2
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   24cca:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		struct ll_conn *conn = lll->hdr.parent;
   24ccc:	69e4      	ldr	r4, [r4, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   24cce:	9500      	str	r5, [sp, #0]
   24cd0:	2000      	movs	r0, #0
   24cd2:	4d73      	ldr	r5, [pc, #460]	; (24ea0 <ull_conn_done+0x2f4>)
   24cd4:	9103      	str	r1, [sp, #12]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   24cd6:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   24cd8:	e9cd 0001 	strd	r0, r0, [sp, #4]
   24cdc:	9704      	str	r7, [sp, #16]
   24cde:	9406      	str	r4, [sp, #24]
   24ce0:	b2d2      	uxtb	r2, r2
   24ce2:	2101      	movs	r1, #1
   24ce4:	9505      	str	r5, [sp, #20]
   24ce6:	f7fb fce7 	bl	206b8 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   24cea:	f010 0ffd 	tst.w	r0, #253	; 0xfd
   24cee:	d0bf      	beq.n	24c70 <ull_conn_done+0xc4>
   24cf0:	f7fe f800 	bl	22cf4 <ull_disable_mark_get>
   24cf4:	4284      	cmp	r4, r0
   24cf6:	d0bb      	beq.n	24c70 <ull_conn_done+0xc4>
   24cf8:	4a6a      	ldr	r2, [pc, #424]	; (24ea4 <ull_conn_done+0x2f8>)
   24cfa:	496b      	ldr	r1, [pc, #428]	; (24ea8 <ull_conn_done+0x2fc>)
   24cfc:	486b      	ldr	r0, [pc, #428]	; (24eac <ull_conn_done+0x300>)
   24cfe:	f44f 63ec 	mov.w	r3, #1888	; 0x760
   24d02:	f00e fb89 	bl	33418 <assert_print>
   24d06:	4040      	eors	r0, r0
   24d08:	f380 8811 	msr	BASEPRI, r0
   24d0c:	f04f 0003 	mov.w	r0, #3
   24d10:	df02      	svc	2
   24d12:	e7ad      	b.n	24c70 <ull_conn_done+0xc4>
		if (lll->enc_rx && lll->enc_tx) {
   24d14:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
   24d18:	f003 0318 	and.w	r3, r3, #24
   24d1c:	2b18      	cmp	r3, #24
   24d1e:	f47f af5d 	bne.w	24bdc <ull_conn_done+0x30>
					    (lll->latency + 6)) ?
   24d22:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
			appto_reload_new = (conn->apto_reload >
   24d24:	f8b4 217e 	ldrh.w	r2, [r4, #382]	; 0x17e
					    (lll->latency + 6)) ?
   24d28:	1d8b      	adds	r3, r1, #6
			appto_reload_new = (conn->apto_reload >
   24d2a:	429a      	cmp	r2, r3
   24d2c:	bfc4      	itt	gt
   24d2e:	1f93      	subgt	r3, r2, #6
   24d30:	1a5b      	subgt	r3, r3, r1
			if (conn->appto_reload != appto_reload_new) {
   24d32:	f8b4 117a 	ldrh.w	r1, [r4, #378]	; 0x17a
			appto_reload_new = (conn->apto_reload >
   24d36:	bfcc      	ite	gt
   24d38:	b29b      	uxthgt	r3, r3
   24d3a:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   24d3c:	4299      	cmp	r1, r3
   24d3e:	f000 808d 	beq.w	24e5c <ull_conn_done+0x2b0>
				conn->appto_reload = appto_reload_new;
   24d42:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
				conn->appto_expire = conn->appto_reload;
   24d46:	f8a4 317c 	strh.w	r3, [r4, #380]	; 0x17c
				conn->apto_expire = conn->apto_reload;
   24d4a:	f8a4 2180 	strh.w	r2, [r4, #384]	; 0x180
   24d4e:	e745      	b.n	24bdc <ull_conn_done+0x30>
		conn->llcp_terminate.reason_final =
   24d50:	273d      	movs	r7, #61	; 0x3d
   24d52:	f884 7148 	strb.w	r7, [r4, #328]	; 0x148
	rx->hdr.handle = conn->lll.handle;
   24d56:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   24d58:	f8a4 2152 	strh.w	r2, [r4, #338]	; 0x152
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   24d5c:	2318      	movs	r3, #24
	conn_cleanup_finalize(conn);
   24d5e:	4620      	mov	r0, r4
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   24d60:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
	*((uint8_t *)rx->pdu) = reason;
   24d64:	f884 7168 	strb.w	r7, [r4, #360]	; 0x168
}
   24d68:	b00d      	add	sp, #52	; 0x34
   24d6a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn_cleanup_finalize(conn);
   24d6e:	f7ff be9f 	b.w	24ab0 <conn_cleanup_finalize>
		conn->appto_expire = conn->apto_expire = 0U;
   24d72:	2300      	movs	r3, #0
   24d74:	f8a4 3180 	strh.w	r3, [r4, #384]	; 0x180
   24d78:	f8a4 317c 	strh.w	r3, [r4, #380]	; 0x17c
		break;
   24d7c:	e72e      	b.n	24bdc <ull_conn_done+0x30>
		if (!conn->supervision_expire) {
   24d7e:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
   24d82:	2b00      	cmp	r3, #0
   24d84:	d191      	bne.n	24caa <ull_conn_done+0xfe>
			const uint32_t conn_interval_us = conn->lll.interval * CONN_INT_UNIT_US;
   24d86:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
			conn->supervision_expire = RADIO_CONN_EVENTS(
   24d88:	f8b4 3184 	ldrh.w	r3, [r4, #388]	; 0x184
			const uint32_t conn_interval_us = conn->lll.interval * CONN_INT_UNIT_US;
   24d8c:	f240 41e2 	movw	r1, #1250	; 0x4e2
   24d90:	fb01 f202 	mul.w	r2, r1, r2
			conn->supervision_expire = RADIO_CONN_EVENTS(
   24d94:	f242 7110 	movw	r1, #10000	; 0x2710
   24d98:	fb01 2303 	mla	r3, r1, r3, r2
   24d9c:	3b01      	subs	r3, #1
   24d9e:	fbb3 f3f2 	udiv	r3, r3, r2
   24da2:	b29b      	uxth	r3, r3
   24da4:	f8a4 3186 	strh.w	r3, [r4, #390]	; 0x186
   24da8:	e77d      	b.n	24ca6 <ull_conn_done+0xfa>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   24daa:	b913      	cbnz	r3, 24db2 <ull_conn_done+0x206>
   24dac:	2d00      	cmp	r5, #0
   24dae:	f43f af5f 	beq.w	24c70 <ull_conn_done+0xc4>
	lazy = 0U;
   24db2:	4639      	mov	r1, r7
   24db4:	e789      	b.n	24cca <ull_conn_done+0x11e>
			rx = ll_pdu_rx_alloc();
   24db6:	f7fd feef 	bl	22b98 <ll_pdu_rx_alloc>
			if (rx) {
   24dba:	4601      	mov	r1, r0
   24dbc:	2800      	cmp	r0, #0
   24dbe:	d049      	beq.n	24e54 <ull_conn_done+0x2a8>
				conn->apto_expire = 0U;
   24dc0:	2300      	movs	r3, #0
   24dc2:	f8a4 3180 	strh.w	r3, [r4, #384]	; 0x180
				rx->handle = lll->handle;
   24dc6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   24dc8:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   24dca:	231b      	movs	r3, #27
   24dcc:	7103      	strb	r3, [r0, #4]
				ll_rx_put_sched(rx->link, rx);
   24dce:	6800      	ldr	r0, [r0, #0]
   24dd0:	f7fd feac 	bl	22b2c <ll_rx_put_sched>
   24dd4:	e737      	b.n	24c46 <ull_conn_done+0x9a>
			conn->appto_expire = 0U;
   24dd6:	2300      	movs	r3, #0
   24dd8:	f8a4 317c 	strh.w	r3, [r4, #380]	; 0x17c
			ull_cp_le_ping(conn);
   24ddc:	4620      	mov	r0, r4
   24dde:	f001 fde3 	bl	269a8 <ull_cp_le_ping>
   24de2:	e739      	b.n	24c58 <ull_conn_done+0xac>
			else if (lll->role) {
   24de4:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   24de8:	4293      	cmp	r3, r2
   24dea:	f6bf af1a 	bge.w	24c22 <ull_conn_done+0x76>
				if (latency_event) {
   24dee:	f1b8 0f00 	cmp.w	r8, #0
   24df2:	f47f af66 	bne.w	24cc2 <ull_conn_done+0x116>
					force = conn->periph.force & 0x01;
   24df6:	f8d4 3170 	ldr.w	r3, [r4, #368]	; 0x170
					conn->periph.force >>= 1U;
   24dfa:	085a      	lsrs	r2, r3, #1
					if (force) {
   24dfc:	07db      	lsls	r3, r3, #31
   24dfe:	d449      	bmi.n	24e94 <ull_conn_done+0x2e8>
					conn->periph.force >>= 1U;
   24e00:	f8c4 2170 	str.w	r2, [r4, #368]	; 0x170
   24e04:	e70d      	b.n	24c22 <ull_conn_done+0x76>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   24e06:	4628      	mov	r0, r5
   24e08:	aa0a      	add	r2, sp, #40	; 0x28
   24e0a:	a90b      	add	r1, sp, #44	; 0x2c
			if (!ull_tx_q_peek(&conn->tx_q)) {
   24e0c:	f104 09d4 	add.w	r9, r4, #212	; 0xd4
			ull_drift_ticks_get(done, &ticks_drift_plus,
   24e10:	f7eb fe1e 	bl	10a50 <ull_drift_ticks_get>
			if (!ull_tx_q_peek(&conn->tx_q)) {
   24e14:	4648      	mov	r0, r9
   24e16:	f001 fb3d 	bl	26494 <ull_tx_q_peek>
   24e1a:	2800      	cmp	r0, #0
   24e1c:	d036      	beq.n	24e8c <ull_conn_done+0x2e0>
			if (ull_tx_q_peek(&conn->tx_q) ||
   24e1e:	4648      	mov	r0, r9
   24e20:	f001 fb38 	bl	26494 <ull_tx_q_peek>
   24e24:	b320      	cbz	r0, 24e70 <ull_conn_done+0x2c4>
				lll->latency_event = 0U;
   24e26:	2300      	movs	r3, #0
   24e28:	8623      	strh	r3, [r4, #48]	; 0x30
   24e2a:	e6ef      	b.n	24c0c <ull_conn_done+0x60>
		conn_cleanup(conn, error_code);
   24e2c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
	rx->hdr.handle = conn->lll.handle;
   24e30:	8d21      	ldrh	r1, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   24e32:	2218      	movs	r2, #24
	rx->hdr.handle = conn->lll.handle;
   24e34:	f8a4 1152 	strh.w	r1, [r4, #338]	; 0x152
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   24e38:	f884 2150 	strb.w	r2, [r4, #336]	; 0x150
	*((uint8_t *)rx->pdu) = reason;
   24e3c:	f884 3168 	strb.w	r3, [r4, #360]	; 0x168
	conn_cleanup_finalize(conn);
   24e40:	4620      	mov	r0, r4
   24e42:	f7ff fe35 	bl	24ab0 <conn_cleanup_finalize>
}
   24e46:	b00d      	add	sp, #52	; 0x34
   24e48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	rx->hdr.handle = conn->lll.handle;
   24e4c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   24e4e:	2218      	movs	r2, #24
	*((uint8_t *)rx->pdu) = reason;
   24e50:	2308      	movs	r3, #8
   24e52:	e7ef      	b.n	24e34 <ull_conn_done+0x288>
				conn->apto_expire = 1U;
   24e54:	2301      	movs	r3, #1
   24e56:	f8a4 3180 	strh.w	r3, [r4, #384]	; 0x180
   24e5a:	e6f4      	b.n	24c46 <ull_conn_done+0x9a>
			if (conn->apto_expire == 0U) {
   24e5c:	f8b4 1180 	ldrh.w	r1, [r4, #384]	; 0x180
   24e60:	2900      	cmp	r1, #0
   24e62:	f47f aebb 	bne.w	24bdc <ull_conn_done+0x30>
   24e66:	e76e      	b.n	24d46 <ull_conn_done+0x19a>
	rx->hdr.handle = conn->lll.handle;
   24e68:	8d21      	ldrh	r1, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   24e6a:	2218      	movs	r2, #24
	*((uint8_t *)rx->pdu) = reason;
   24e6c:	233e      	movs	r3, #62	; 0x3e
   24e6e:	e7e1      	b.n	24e34 <ull_conn_done+0x288>
			    memq_peek(lll->memq_tx.head,
   24e70:	4602      	mov	r2, r0
   24e72:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
   24e76:	f7fa faf1 	bl	1f45c <memq_peek>
			if (ull_tx_q_peek(&conn->tx_q) ||
   24e7a:	2800      	cmp	r0, #0
   24e7c:	d1d3      	bne.n	24e26 <ull_conn_done+0x27a>
			} else if (lll->periph.latency_enabled) {
   24e7e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   24e82:	0758      	lsls	r0, r3, #29
				lll->latency_event = lll->latency;
   24e84:	bf44      	itt	mi
   24e86:	8da3      	ldrhmi	r3, [r4, #44]	; 0x2c
   24e88:	8623      	strhmi	r3, [r4, #48]	; 0x30
   24e8a:	e6bf      	b.n	24c0c <ull_conn_done+0x60>
				ull_conn_tx_demux(UINT8_MAX);
   24e8c:	20ff      	movs	r0, #255	; 0xff
   24e8e:	f7ff fdcf 	bl	24a30 <ull_conn_tx_demux>
   24e92:	e7c4      	b.n	24e1e <ull_conn_done+0x272>
						conn->periph.force |= BIT(31);
   24e94:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   24e98:	f8c4 2170 	str.w	r2, [r4, #368]	; 0x170
   24e9c:	e711      	b.n	24cc2 <ull_conn_done+0x116>
   24e9e:	bf00      	nop
   24ea0:	000242f1 	.word	0x000242f1
   24ea4:	0003a650 	.word	0x0003a650
   24ea8:	0003a778 	.word	0x0003a778
   24eac:	00039f74 	.word	0x00039f74

00024eb0 <ull_conn_tx_lll_enqueue>:
	while (count--) {
   24eb0:	2900      	cmp	r1, #0
   24eb2:	d03a      	beq.n	24f2a <ull_conn_tx_lll_enqueue+0x7a>
{
   24eb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24eb8:	1e4d      	subs	r5, r1, #1
		link = mem_acquire(&mem_link_tx.free);
   24eba:	f8df 9070 	ldr.w	r9, [pc, #112]	; 24f2c <ull_conn_tx_lll_enqueue+0x7c>
		LL_ASSERT(link);
   24ebe:	f8df b070 	ldr.w	fp, [pc, #112]	; 24f30 <ull_conn_tx_lll_enqueue+0x80>
   24ec2:	f8df a070 	ldr.w	sl, [pc, #112]	; 24f34 <ull_conn_tx_lll_enqueue+0x84>
   24ec6:	4607      	mov	r7, r0
   24ec8:	b2ed      	uxtb	r5, r5
	tx = ull_tx_q_dequeue(&conn->tx_q);
   24eca:	f100 08d4 	add.w	r8, r0, #212	; 0xd4
   24ece:	e015      	b.n	24efc <ull_conn_tx_lll_enqueue+0x4c>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   24ed0:	7923      	ldrb	r3, [r4, #4]
   24ed2:	f003 0303 	and.w	r3, r3, #3
			tx->next = tx;
   24ed6:	2b03      	cmp	r3, #3
   24ed8:	bf0c      	ite	eq
   24eda:	4623      	moveq	r3, r4
   24edc:	2300      	movne	r3, #0
   24ede:	6023      	str	r3, [r4, #0]
		link = mem_acquire(&mem_link_tx.free);
   24ee0:	f7fa fa4c 	bl	1f37c <mem_acquire>
		LL_ASSERT(link);
   24ee4:	4606      	mov	r6, r0
   24ee6:	b190      	cbz	r0, 24f0e <ull_conn_tx_lll_enqueue+0x5e>
	while (count--) {
   24ee8:	3d01      	subs	r5, #1
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   24eea:	f107 027c 	add.w	r2, r7, #124	; 0x7c
   24eee:	4621      	mov	r1, r4
   24ef0:	4630      	mov	r0, r6
	while (count--) {
   24ef2:	b2ed      	uxtb	r5, r5
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   24ef4:	f7fa faa8 	bl	1f448 <memq_enqueue>
	while (count--) {
   24ef8:	2dff      	cmp	r5, #255	; 0xff
   24efa:	d006      	beq.n	24f0a <ull_conn_tx_lll_enqueue+0x5a>
	tx = ull_tx_q_dequeue(&conn->tx_q);
   24efc:	4640      	mov	r0, r8
   24efe:	f001 facb 	bl	26498 <ull_tx_q_dequeue>
   24f02:	4604      	mov	r4, r0
		link = mem_acquire(&mem_link_tx.free);
   24f04:	4648      	mov	r0, r9
	if (tx) {
   24f06:	2c00      	cmp	r4, #0
   24f08:	d1e2      	bne.n	24ed0 <ull_conn_tx_lll_enqueue+0x20>
}
   24f0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LL_ASSERT(link);
   24f0e:	480a      	ldr	r0, [pc, #40]	; (24f38 <ull_conn_tx_lll_enqueue+0x88>)
   24f10:	f240 73d5 	movw	r3, #2005	; 0x7d5
   24f14:	465a      	mov	r2, fp
   24f16:	4651      	mov	r1, sl
   24f18:	f00e fa7e 	bl	33418 <assert_print>
   24f1c:	4040      	eors	r0, r0
   24f1e:	f380 8811 	msr	BASEPRI, r0
   24f22:	f04f 0003 	mov.w	r0, #3
   24f26:	df02      	svc	2
   24f28:	e7de      	b.n	24ee8 <ull_conn_tx_lll_enqueue+0x38>
   24f2a:	4770      	bx	lr
   24f2c:	20002684 	.word	0x20002684
   24f30:	0003a650 	.word	0x0003a650
   24f34:	0003a6a0 	.word	0x0003a6a0
   24f38:	00039f74 	.word	0x00039f74

00024f3c <tx_demux>:
{
   24f3c:	b510      	push	{r4, lr}
   24f3e:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   24f40:	2001      	movs	r0, #1
   24f42:	f7ff fd75 	bl	24a30 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   24f46:	4620      	mov	r0, r4
   24f48:	2101      	movs	r1, #1
}
   24f4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   24f4e:	f7ff bfaf 	b.w	24eb0 <ull_conn_tx_lll_enqueue>
   24f52:	bf00      	nop

00024f54 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   24f54:	4901      	ldr	r1, [pc, #4]	; (24f5c <ull_conn_link_tx_release+0x8>)
   24f56:	f7fa ba2d 	b.w	1f3b4 <mem_release>
   24f5a:	bf00      	nop
   24f5c:	20002684 	.word	0x20002684

00024f60 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   24f60:	4b01      	ldr	r3, [pc, #4]	; (24f68 <ull_conn_ack_last_idx_get+0x8>)
}
   24f62:	7958      	ldrb	r0, [r3, #5]
   24f64:	4770      	bx	lr
   24f66:	bf00      	nop
   24f68:	200006a0 	.word	0x200006a0

00024f6c <ull_conn_ack_peek>:
{
   24f6c:	b510      	push	{r4, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   24f6e:	4b0c      	ldr	r3, [pc, #48]	; (24fa0 <ull_conn_ack_peek+0x34>)
   24f70:	f893 c004 	ldrb.w	ip, [r3, #4]
   24f74:	f893 e005 	ldrb.w	lr, [r3, #5]
   24f78:	781c      	ldrb	r4, [r3, #0]
	if (first == last) {
   24f7a:	45f4      	cmp	ip, lr
   24f7c:	d00d      	beq.n	24f9a <ull_conn_ack_peek+0x2e>
	return (void *)(fifo + first * size);
   24f7e:	fb1c fc04 	smulbb	ip, ip, r4
   24f82:	3308      	adds	r3, #8
	*ack_last = mfifo_conn_ack.l;
   24f84:	f880 e000 	strb.w	lr, [r0]
   24f88:	eb0c 0003 	add.w	r0, ip, r3
	*handle = lll_tx->handle;
   24f8c:	f833 300c 	ldrh.w	r3, [r3, ip]
   24f90:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
   24f92:	6843      	ldr	r3, [r0, #4]
   24f94:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   24f96:	6818      	ldr	r0, [r3, #0]
}
   24f98:	bd10      	pop	{r4, pc}
		return NULL;
   24f9a:	2000      	movs	r0, #0
}
   24f9c:	bd10      	pop	{r4, pc}
   24f9e:	bf00      	nop
   24fa0:	200006a0 	.word	0x200006a0

00024fa4 <ull_conn_ack_by_last_peek>:
{
   24fa4:	b500      	push	{lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   24fa6:	4b0b      	ldr	r3, [pc, #44]	; (24fd4 <ull_conn_ack_by_last_peek+0x30>)
   24fa8:	f893 c004 	ldrb.w	ip, [r3, #4]
   24fac:	f893 e000 	ldrb.w	lr, [r3]
	if (first == last) {
   24fb0:	4584      	cmp	ip, r0
   24fb2:	d00c      	beq.n	24fce <ull_conn_ack_by_last_peek+0x2a>
	return (void *)(fifo + first * size);
   24fb4:	fb1c fc0e 	smulbb	ip, ip, lr
   24fb8:	3308      	adds	r3, #8
   24fba:	eb0c 0003 	add.w	r0, ip, r3
	*handle = lll_tx->handle;
   24fbe:	f833 300c 	ldrh.w	r3, [r3, ip]
   24fc2:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
   24fc4:	6843      	ldr	r3, [r0, #4]
   24fc6:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   24fc8:	6818      	ldr	r0, [r3, #0]
}
   24fca:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   24fce:	2000      	movs	r0, #0
   24fd0:	e7fb      	b.n	24fca <ull_conn_ack_by_last_peek+0x26>
   24fd2:	bf00      	nop
   24fd4:	200006a0 	.word	0x200006a0

00024fd8 <ull_conn_ack_dequeue>:
	return MFIFO_DEQUEUE(conn_ack);
   24fd8:	4b09      	ldr	r3, [pc, #36]	; (25000 <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   24fda:	7919      	ldrb	r1, [r3, #4]
	if (_first == last) {
   24fdc:	795a      	ldrb	r2, [r3, #5]
   24fde:	7818      	ldrb	r0, [r3, #0]
   24fe0:	f893 c002 	ldrb.w	ip, [r3, #2]
   24fe4:	428a      	cmp	r2, r1
   24fe6:	d009      	beq.n	24ffc <ull_conn_ack_dequeue+0x24>
	_first += 1U;
   24fe8:	1c4a      	adds	r2, r1, #1
	mem = *((void **)(fifo + _first * size));
   24fea:	fb01 3000 	mla	r0, r1, r0, r3
	_first += 1U;
   24fee:	b2d2      	uxtb	r2, r2
		_first = 0U;
   24ff0:	4594      	cmp	ip, r2
   24ff2:	bf08      	it	eq
   24ff4:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   24ff6:	6880      	ldr	r0, [r0, #8]
	*first = _first; /* Write back read-index */
   24ff8:	711a      	strb	r2, [r3, #4]
	return mem;
   24ffa:	4770      	bx	lr
		return NULL;
   24ffc:	2000      	movs	r0, #0
}
   24ffe:	4770      	bx	lr
   25000:	200006a0 	.word	0x200006a0

00025004 <ull_conn_lll_ack_enqueue>:
{
   25004:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   25006:	4c14      	ldr	r4, [pc, #80]	; (25058 <ull_conn_lll_ack_enqueue+0x54>)
   25008:	7962      	ldrb	r2, [r4, #5]
	if (last == count) {
   2500a:	f894 e002 	ldrb.w	lr, [r4, #2]
   2500e:	f894 c004 	ldrb.w	ip, [r4, #4]
   25012:	7825      	ldrb	r5, [r4, #0]
	last = last + 1;
   25014:	1c53      	adds	r3, r2, #1
   25016:	b2db      	uxtb	r3, r3
		last = 0U;
   25018:	459e      	cmp	lr, r3
   2501a:	bf08      	it	eq
   2501c:	2300      	moveq	r3, #0
	if (last == first) {
   2501e:	459c      	cmp	ip, r3
   25020:	d009      	beq.n	25036 <ull_conn_lll_ack_enqueue+0x32>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   25022:	fb12 f205 	smulbb	r2, r2, r5
   25026:	f104 0c08 	add.w	ip, r4, #8
	lll_tx->handle = handle;
   2502a:	f82c 0002 	strh.w	r0, [ip, r2]
   2502e:	4462      	add	r2, ip
	lll_tx->node = tx;
   25030:	6051      	str	r1, [r2, #4]
	*last = idx; /* Commit: Update write index */
   25032:	7163      	strb	r3, [r4, #5]
}
   25034:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(lll_tx);
   25036:	4a09      	ldr	r2, [pc, #36]	; (2505c <ull_conn_lll_ack_enqueue+0x58>)
   25038:	4909      	ldr	r1, [pc, #36]	; (25060 <ull_conn_lll_ack_enqueue+0x5c>)
   2503a:	480a      	ldr	r0, [pc, #40]	; (25064 <ull_conn_lll_ack_enqueue+0x60>)
   2503c:	f640 0315 	movw	r3, #2069	; 0x815
   25040:	f00e f9ea 	bl	33418 <assert_print>
   25044:	4040      	eors	r0, r0
   25046:	f380 8811 	msr	BASEPRI, r0
   2504a:	f04f 0003 	mov.w	r0, #3
   2504e:	df02      	svc	2
	lll_tx->handle = handle;
   25050:	2300      	movs	r3, #0
   25052:	801b      	strh	r3, [r3, #0]
   25054:	deff      	udf	#255	; 0xff
   25056:	bf00      	nop
   25058:	200006a0 	.word	0x200006a0
   2505c:	0003a650 	.word	0x0003a650
   25060:	0003a690 	.word	0x0003a690
   25064:	00039f74 	.word	0x00039f74

00025068 <ull_conn_tx_ack>:
{
   25068:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(pdu_tx->len);
   2506a:	7953      	ldrb	r3, [r2, #5]
{
   2506c:	4614      	mov	r4, r2
   2506e:	4605      	mov	r5, r0
   25070:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   25072:	b36b      	cbz	r3, 250d0 <ull_conn_tx_ack+0x68>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   25074:	7923      	ldrb	r3, [r4, #4]
   25076:	f003 0203 	and.w	r2, r3, #3
   2507a:	2a03      	cmp	r2, #3
   2507c:	d00c      	beq.n	25098 <ull_conn_tx_ack+0x30>
	} else if (handle == LLL_HANDLE_INVALID) {
   2507e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   25082:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   25084:	bf04      	itt	eq
   25086:	f36f 0301 	bfceq	r3, #0, #2
   2508a:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   2508c:	4621      	mov	r1, r4
   2508e:	4628      	mov	r0, r5
}
   25090:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   25094:	f7fd bd96 	b.w	22bc4 <ll_tx_ack_put>
		if (handle != LLL_HANDLE_INVALID) {
   25098:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2509c:	429d      	cmp	r5, r3
   2509e:	d125      	bne.n	250ec <ull_conn_tx_ack+0x84>
		if (link->next == (void *)tx) {
   250a0:	6833      	ldr	r3, [r6, #0]
   250a2:	429c      	cmp	r4, r3
   250a4:	d037      	beq.n	25116 <ull_conn_tx_ack+0xae>
		LL_ASSERT(!link->next);
   250a6:	2b00      	cmp	r3, #0
   250a8:	d0f0      	beq.n	2508c <ull_conn_tx_ack+0x24>
   250aa:	4a1e      	ldr	r2, [pc, #120]	; (25124 <ull_conn_tx_ack+0xbc>)
   250ac:	491e      	ldr	r1, [pc, #120]	; (25128 <ull_conn_tx_ack+0xc0>)
   250ae:	481f      	ldr	r0, [pc, #124]	; (2512c <ull_conn_tx_ack+0xc4>)
   250b0:	f640 0345 	movw	r3, #2117	; 0x845
   250b4:	f00e f9b0 	bl	33418 <assert_print>
   250b8:	4040      	eors	r0, r0
   250ba:	f380 8811 	msr	BASEPRI, r0
   250be:	f04f 0003 	mov.w	r0, #3
   250c2:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   250c4:	4621      	mov	r1, r4
   250c6:	4628      	mov	r0, r5
}
   250c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   250cc:	f7fd bd7a 	b.w	22bc4 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   250d0:	4a14      	ldr	r2, [pc, #80]	; (25124 <ull_conn_tx_ack+0xbc>)
   250d2:	4917      	ldr	r1, [pc, #92]	; (25130 <ull_conn_tx_ack+0xc8>)
   250d4:	4815      	ldr	r0, [pc, #84]	; (2512c <ull_conn_tx_ack+0xc4>)
   250d6:	f640 0322 	movw	r3, #2082	; 0x822
   250da:	f00e f99d 	bl	33418 <assert_print>
   250de:	4040      	eors	r0, r0
   250e0:	f380 8811 	msr	BASEPRI, r0
   250e4:	f04f 0003 	mov.w	r0, #3
   250e8:	df02      	svc	2
   250ea:	e7c3      	b.n	25074 <ull_conn_tx_ack+0xc>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   250ec:	462a      	mov	r2, r5
   250ee:	f44f 71cc 	mov.w	r1, #408	; 0x198
   250f2:	4810      	ldr	r0, [pc, #64]	; (25134 <ull_conn_tx_ack+0xcc>)
   250f4:	f7fa f976 	bl	1f3e4 <mem_get>
			ull_cp_tx_ack(conn, tx);
   250f8:	4621      	mov	r1, r4
   250fa:	f001 fdc3 	bl	26c84 <ull_cp_tx_ack>
		if (link->next == (void *)tx) {
   250fe:	6833      	ldr	r3, [r6, #0]
   25100:	42a3      	cmp	r3, r4
   25102:	d1d0      	bne.n	250a6 <ull_conn_tx_ack+0x3e>
	if (handle >= CONFIG_BT_MAX_CONN) {
   25104:	b93d      	cbnz	r5, 25116 <ull_conn_tx_ack+0xae>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   25106:	480b      	ldr	r0, [pc, #44]	; (25134 <ull_conn_tx_ack+0xcc>)
   25108:	462a      	mov	r2, r5
   2510a:	f44f 71cc 	mov.w	r1, #408	; 0x198
   2510e:	f7fa f969 	bl	1f3e4 <mem_get>
	if (conn->lll.handle != handle) {
   25112:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   25114:	b103      	cbz	r3, 25118 <ull_conn_tx_ack+0xb0>
		return NULL;
   25116:	2000      	movs	r0, #0
			ull_cp_release_tx(conn, tx);
   25118:	4621      	mov	r1, r4
}
   2511a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			ull_cp_release_tx(conn, tx);
   2511e:	f001 bbc3 	b.w	268a8 <ull_cp_release_tx>
   25122:	bf00      	nop
   25124:	0003a650 	.word	0x0003a650
   25128:	0003a7e0 	.word	0x0003a7e0
   2512c:	00039f74 	.word	0x00039f74
   25130:	0003a7d4 	.word	0x0003a7d4
   25134:	200016c0 	.word	0x200016c0

00025138 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   25138:	f890 205a 	ldrb.w	r2, [r0, #90]	; 0x5a
		max_tx_octets = (lll->dle.eff.max_tx_time >> 3) - 10;
   2513c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
	switch (lll->phy_tx_time) {
   25140:	f3c2 1202 	ubfx	r2, r2, #4, #3
   25144:	2a02      	cmp	r2, #2
		max_tx_octets = (lll->dle.eff.max_tx_time >> 3) - 10;
   25146:	bf14      	ite	ne
   25148:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->dle.eff.max_tx_time >> 2) - 11;
   2514a:	089b      	lsreq	r3, r3, #2
	if (lll->enc_tx) {
   2514c:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
	return max_tx_octets;
   25150:	f8b0 004c 	ldrh.w	r0, [r0, #76]	; 0x4c
		max_tx_octets = (lll->dle.eff.max_tx_time >> 3) - 10;
   25154:	bf14      	ite	ne
   25156:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->dle.eff.max_tx_time >> 2) - 11;
   25158:	3b0b      	subeq	r3, #11
   2515a:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   2515c:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   2515e:	bf44      	itt	mi
   25160:	3b04      	submi	r3, #4
   25162:	b29b      	uxthmi	r3, r3
}
   25164:	4298      	cmp	r0, r3
   25166:	bf28      	it	cs
   25168:	4618      	movcs	r0, r3
   2516a:	4770      	bx	lr

0002516c <ull_pdu_data_init>:
}
   2516c:	4770      	bx	lr
   2516e:	bf00      	nop

00025170 <ull_conn_pause_rx_data>:
	conn->pause_rx_data = 1U;
   25170:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
   25174:	f043 0302 	orr.w	r3, r3, #2
   25178:	f880 3178 	strb.w	r3, [r0, #376]	; 0x178
}
   2517c:	4770      	bx	lr
   2517e:	bf00      	nop

00025180 <ull_conn_resume_rx_data>:
	conn->pause_rx_data = 0U;
   25180:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
   25184:	f36f 0341 	bfc	r3, #1, #1
   25188:	f880 3178 	strb.w	r3, [r0, #376]	; 0x178
}
   2518c:	4770      	bx	lr
   2518e:	bf00      	nop

00025190 <ull_conn_event_counter>:
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   25190:	8e43      	ldrh	r3, [r0, #50]	; 0x32
   25192:	f8b0 1110 	ldrh.w	r1, [r0, #272]	; 0x110
   25196:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
   25198:	1858      	adds	r0, r3, r1
   2519a:	4410      	add	r0, r2
}
   2519c:	b280      	uxth	r0, r0
   2519e:	4770      	bx	lr

000251a0 <ull_conn_chan_map_set>:

}
#endif /* CONFIG_BT_PERIPHERAL */

void ull_conn_chan_map_set(struct ll_conn *conn, const uint8_t chm[5])
{
   251a0:	b538      	push	{r3, r4, r5, lr}
	struct lll_conn *lll = &conn->lll;

	memcpy(lll->data_chan_map, chm, sizeof(lll->data_chan_map));
   251a2:	f100 0534 	add.w	r5, r0, #52	; 0x34
{
   251a6:	4604      	mov	r4, r0
	memcpy(lll->data_chan_map, chm, sizeof(lll->data_chan_map));
   251a8:	2205      	movs	r2, #5
   251aa:	4628      	mov	r0, r5
   251ac:	f010 f9c3 	bl	35536 <memcpy>
	lll->data_chan_count = util_ones_count_get(lll->data_chan_map, sizeof(lll->data_chan_map));
   251b0:	2105      	movs	r1, #5
   251b2:	4628      	mov	r0, r5
   251b4:	f7fa fac4 	bl	1f740 <util_ones_count_get>
   251b8:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   251bc:	f360 0305 	bfi	r3, r0, #0, #6
   251c0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
   251c4:	bd38      	pop	{r3, r4, r5, pc}
   251c6:	bf00      	nop

000251c8 <ull_dle_max_time_get>:
	 * minimum value for time is 328 us
	 */
	rx_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, rx_time);
	tx_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, tx_time);

	*max_rx_time = rx_time;
   251c8:	f44f 73a4 	mov.w	r3, #328	; 0x148
   251cc:	800b      	strh	r3, [r1, #0]
	*max_tx_time = tx_time;
   251ce:	8013      	strh	r3, [r2, #0]

void ull_dle_max_time_get(struct ll_conn *conn, uint16_t *max_rx_time,
				    uint16_t *max_tx_time)
{
	return dle_max_time_get(conn, max_rx_time, max_tx_time);
}
   251d0:	4770      	bx	lr
   251d2:	bf00      	nop

000251d4 <ull_dle_update_eff>:
/*
 * TODO: this probably can be optimised for ex. by creating a macro for the
 * ull_dle_update_eff function
 */
uint8_t ull_dle_update_eff(struct ll_conn *conn)
{
   251d4:	b500      	push	{lr}
uint8_t ull_dle_update_eff_rx(struct ll_conn *conn)
{
	uint8_t dle_changed = 0U;

	const uint16_t eff_rx_octets =
		MAX(MIN(conn->lll.dle.local.max_rx_octets, conn->lll.dle.remote.max_tx_octets),
   251d6:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
   251da:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
{
   251de:	4603      	mov	r3, r0
	const uint16_t eff_rx_octets =
   251e0:	428a      	cmp	r2, r1
		    PDU_DC_PAYLOAD_SIZE_MIN);

#if defined(CONFIG_BT_CTLR_PHY)
	unsigned int min_eff_rx_time = (conn->lll.phy_rx == PHY_CODED) ?
   251e2:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;

	const uint16_t eff_rx_time =
		MAX(MIN(conn->lll.dle.local.max_rx_time, conn->lll.dle.remote.max_tx_time),
   251e6:	f8b3 e05e 	ldrh.w	lr, [r3, #94]	; 0x5e
	const uint16_t eff_rx_octets =
   251ea:	bf28      	it	cs
   251ec:	460a      	movcs	r2, r1
   251ee:	2a1b      	cmp	r2, #27
		MAX(MIN(conn->lll.dle.local.max_rx_time, conn->lll.dle.remote.max_tx_time),
   251f0:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
   251f4:	f000 0007 	and.w	r0, r0, #7
	const uint16_t eff_rx_octets =
   251f8:	bf38      	it	cc
   251fa:	221b      	movcc	r2, #27
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
   251fc:	2804      	cmp	r0, #4
   251fe:	bf14      	ite	ne
   25200:	f44f 7ca4 	movne.w	ip, #328	; 0x148
   25204:	f44f 6c29 	moveq.w	ip, #2704	; 0xa90
		MAX(MIN(conn->lll.dle.local.max_rx_time, conn->lll.dle.remote.max_tx_time),
   25208:	4571      	cmp	r1, lr
   2520a:	bf28      	it	cs
   2520c:	4671      	movcs	r1, lr
		    min_eff_rx_time);

	if (eff_rx_time != conn->lll.dle.eff.max_rx_time) {
   2520e:	f8b3 006e 	ldrh.w	r0, [r3, #110]	; 0x6e
#if defined(CONFIG_BT_CTLR_PHY)
	unsigned int min_eff_tx_time = (conn->lll.phy_tx == PHY_CODED) ?
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;

	const uint16_t eff_tx_time =
		MAX(MIN(conn->lll.dle.local.max_tx_time, conn->lll.dle.remote.max_rx_time),
   25212:	f8b3 e05c 	ldrh.w	lr, [r3, #92]	; 0x5c
	const uint16_t eff_rx_time =
   25216:	4561      	cmp	r1, ip
   25218:	bf38      	it	cc
   2521a:	4661      	movcc	r1, ip
	if (eff_rx_time != conn->lll.dle.eff.max_rx_time) {
   2521c:	4288      	cmp	r0, r1
		conn->lll.dle.eff.max_rx_time = eff_rx_time;
   2521e:	bf18      	it	ne
   25220:	f8a3 106e 	strhne.w	r1, [r3, #110]	; 0x6e
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
   25224:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
		MAX(MIN(conn->lll.dle.local.max_tx_octets, conn->lll.dle.remote.max_rx_octets),
   25228:	f8b3 c058 	ldrh.w	ip, [r3, #88]	; 0x58
		dle_changed = 1;
   2522c:	bf14      	ite	ne
   2522e:	2001      	movne	r0, #1
	uint8_t dle_changed = 0U;
   25230:	2000      	moveq	r0, #0
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
   25232:	4291      	cmp	r1, r2
		conn->lll.dle.eff.max_rx_octets = eff_rx_octets;
   25234:	bf18      	it	ne
   25236:	f8a3 206a 	strhne.w	r2, [r3, #106]	; 0x6a
		MAX(MIN(conn->lll.dle.local.max_tx_octets, conn->lll.dle.remote.max_rx_octets),
   2523a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
	unsigned int min_eff_tx_time = (conn->lll.phy_tx == PHY_CODED) ?
   2523e:	f893 1076 	ldrb.w	r1, [r3, #118]	; 0x76
		dle_changed = 1;
   25242:	bf18      	it	ne
   25244:	2001      	movne	r0, #1
	const uint16_t eff_tx_octets =
   25246:	4562      	cmp	r2, ip
   25248:	bf28      	it	cs
   2524a:	4662      	movcs	r2, ip
   2524c:	2a1b      	cmp	r2, #27
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
   2524e:	f001 0107 	and.w	r1, r1, #7
	const uint16_t eff_tx_octets =
   25252:	bf38      	it	cc
   25254:	221b      	movcc	r2, #27
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
   25256:	2904      	cmp	r1, #4
		MAX(MIN(conn->lll.dle.local.max_tx_time, conn->lll.dle.remote.max_rx_time),
   25258:	f8b3 1066 	ldrh.w	r1, [r3, #102]	; 0x66
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
   2525c:	bf14      	ite	ne
   2525e:	f44f 7ca4 	movne.w	ip, #328	; 0x148
   25262:	f44f 6c29 	moveq.w	ip, #2704	; 0xa90
		MAX(MIN(conn->lll.dle.local.max_tx_time, conn->lll.dle.remote.max_rx_time),
   25266:	4571      	cmp	r1, lr
   25268:	bf28      	it	cs
   2526a:	4671      	movcs	r1, lr
	const uint16_t eff_tx_time =
   2526c:	4561      	cmp	r1, ip
   2526e:	bf38      	it	cc
   25270:	4661      	movcc	r1, ip
		    min_eff_tx_time);

	if (eff_tx_time != conn->lll.dle.eff.max_tx_time) {
   25272:	f8b3 c06c 	ldrh.w	ip, [r3, #108]	; 0x6c
   25276:	458c      	cmp	ip, r1
	}
#else
	conn->lll.dle.eff.max_tx_time = PDU_DC_MAX_US(eff_tx_octets, PHY_1M);
#endif

	if (eff_tx_octets != conn->lll.dle.eff.max_tx_octets) {
   25278:	f8b3 c068 	ldrh.w	ip, [r3, #104]	; 0x68
		conn->lll.dle.eff.max_tx_time = eff_tx_time;
   2527c:	bf16      	itet	ne
   2527e:	f8a3 106c 	strhne.w	r1, [r3, #108]	; 0x6c
	uint8_t dle_changed = 0U;
   25282:	2100      	moveq	r1, #0
		dle_changed = 1;
   25284:	2101      	movne	r1, #1
	if (eff_tx_octets != conn->lll.dle.eff.max_tx_octets) {
   25286:	4594      	cmp	ip, r2
		conn->lll.dle.eff.max_tx_octets = eff_tx_octets;
		dle_changed = 1;
   25288:	bf1c      	itt	ne
   2528a:	2101      	movne	r1, #1
		conn->lll.dle.eff.max_tx_octets = eff_tx_octets;
   2528c:	f8a3 2068 	strhne.w	r2, [r3, #104]	; 0x68
}
   25290:	4308      	orrs	r0, r1
   25292:	f85d fb04 	ldr.w	pc, [sp], #4
   25296:	bf00      	nop

00025298 <ull_dle_update_eff_rx>:
{
   25298:	b500      	push	{lr}
		MAX(MIN(conn->lll.dle.local.max_rx_octets, conn->lll.dle.remote.max_tx_octets),
   2529a:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
   2529e:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
{
   252a2:	4603      	mov	r3, r0
	const uint16_t eff_rx_octets =
   252a4:	428a      	cmp	r2, r1
	unsigned int min_eff_rx_time = (conn->lll.phy_rx == PHY_CODED) ?
   252a6:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
		MAX(MIN(conn->lll.dle.local.max_rx_time, conn->lll.dle.remote.max_tx_time),
   252aa:	f8b3 e05e 	ldrh.w	lr, [r3, #94]	; 0x5e
	const uint16_t eff_rx_octets =
   252ae:	bf28      	it	cs
   252b0:	460a      	movcs	r2, r1
   252b2:	2a1b      	cmp	r2, #27
		MAX(MIN(conn->lll.dle.local.max_rx_time, conn->lll.dle.remote.max_tx_time),
   252b4:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
   252b8:	f000 0007 	and.w	r0, r0, #7
	const uint16_t eff_rx_octets =
   252bc:	bf38      	it	cc
   252be:	221b      	movcc	r2, #27
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
   252c0:	2804      	cmp	r0, #4
   252c2:	bf14      	ite	ne
   252c4:	f44f 7ca4 	movne.w	ip, #328	; 0x148
   252c8:	f44f 6c29 	moveq.w	ip, #2704	; 0xa90
		MAX(MIN(conn->lll.dle.local.max_rx_time, conn->lll.dle.remote.max_tx_time),
   252cc:	4571      	cmp	r1, lr
   252ce:	bf28      	it	cs
   252d0:	4671      	movcs	r1, lr
	if (eff_rx_time != conn->lll.dle.eff.max_rx_time) {
   252d2:	f8b3 006e 	ldrh.w	r0, [r3, #110]	; 0x6e
	const uint16_t eff_rx_time =
   252d6:	4561      	cmp	r1, ip
   252d8:	bf38      	it	cc
   252da:	4661      	movcc	r1, ip
	if (eff_rx_time != conn->lll.dle.eff.max_rx_time) {
   252dc:	4288      	cmp	r0, r1
		conn->lll.dle.eff.max_rx_time = eff_rx_time;
   252de:	bf18      	it	ne
   252e0:	f8a3 106e 	strhne.w	r1, [r3, #110]	; 0x6e
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
   252e4:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
		dle_changed = 1;
   252e8:	bf14      	ite	ne
   252ea:	2001      	movne	r0, #1
	uint8_t dle_changed = 0U;
   252ec:	2000      	moveq	r0, #0
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
   252ee:	4291      	cmp	r1, r2
		conn->lll.dle.eff.max_rx_octets = eff_rx_octets;
   252f0:	bf1c      	itt	ne
   252f2:	f8a3 206a 	strhne.w	r2, [r3, #106]	; 0x6a
		dle_changed = 1;
   252f6:	2001      	movne	r0, #1
}
   252f8:	f85d fb04 	ldr.w	pc, [sp], #4

000252fc <ull_dle_update_eff_tx>:
{
   252fc:	b500      	push	{lr}
		MAX(MIN(conn->lll.dle.local.max_tx_octets, conn->lll.dle.remote.max_rx_octets),
   252fe:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
   25302:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
{
   25306:	4603      	mov	r3, r0
	const uint16_t eff_tx_octets =
   25308:	428a      	cmp	r2, r1
	unsigned int min_eff_tx_time = (conn->lll.phy_tx == PHY_CODED) ?
   2530a:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
		MAX(MIN(conn->lll.dle.local.max_tx_time, conn->lll.dle.remote.max_rx_time),
   2530e:	f8b3 e05c 	ldrh.w	lr, [r3, #92]	; 0x5c
	const uint16_t eff_tx_octets =
   25312:	bf28      	it	cs
   25314:	460a      	movcs	r2, r1
   25316:	2a1b      	cmp	r2, #27
		MAX(MIN(conn->lll.dle.local.max_tx_time, conn->lll.dle.remote.max_rx_time),
   25318:	f8b3 1066 	ldrh.w	r1, [r3, #102]	; 0x66
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
   2531c:	f000 0007 	and.w	r0, r0, #7
	const uint16_t eff_tx_octets =
   25320:	bf38      	it	cc
   25322:	221b      	movcc	r2, #27
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
   25324:	2804      	cmp	r0, #4
   25326:	bf14      	ite	ne
   25328:	f44f 7ca4 	movne.w	ip, #328	; 0x148
   2532c:	f44f 6c29 	moveq.w	ip, #2704	; 0xa90
		MAX(MIN(conn->lll.dle.local.max_tx_time, conn->lll.dle.remote.max_rx_time),
   25330:	4571      	cmp	r1, lr
   25332:	bf28      	it	cs
   25334:	4671      	movcs	r1, lr
	if (eff_tx_time != conn->lll.dle.eff.max_tx_time) {
   25336:	f8b3 006c 	ldrh.w	r0, [r3, #108]	; 0x6c
	const uint16_t eff_tx_time =
   2533a:	4561      	cmp	r1, ip
   2533c:	bf38      	it	cc
   2533e:	4661      	movcc	r1, ip
	if (eff_tx_time != conn->lll.dle.eff.max_tx_time) {
   25340:	4288      	cmp	r0, r1
		conn->lll.dle.eff.max_tx_time = eff_tx_time;
   25342:	bf18      	it	ne
   25344:	f8a3 106c 	strhne.w	r1, [r3, #108]	; 0x6c
	if (eff_tx_octets != conn->lll.dle.eff.max_tx_octets) {
   25348:	f8b3 1068 	ldrh.w	r1, [r3, #104]	; 0x68
		dle_changed = 1;
   2534c:	bf14      	ite	ne
   2534e:	2001      	movne	r0, #1
	uint8_t dle_changed = 0U;
   25350:	2000      	moveq	r0, #0
	if (eff_tx_octets != conn->lll.dle.eff.max_tx_octets) {
   25352:	4291      	cmp	r1, r2
		conn->lll.dle.eff.max_tx_octets = eff_tx_octets;
   25354:	bf1c      	itt	ne
   25356:	f8a3 2068 	strhne.w	r2, [r3, #104]	; 0x68
		dle_changed = 1;
   2535a:	2001      	movne	r0, #1
	}

	return dle_changed;
}
   2535c:	f85d fb04 	ldr.w	pc, [sp], #4

00025360 <ull_dle_local_tx_update>:
	uint16_t tx_time_max =
			PDU_DC_MAX_US(LL_LENGTH_OCTETS_TX_MAX, PHY_1M);
#endif /* !CONFIG_BT_CTLR_PHY_CODED */

	/* trim to supported values */
	if (*tx_octets > LL_LENGTH_OCTETS_TX_MAX) {
   25360:	291b      	cmp	r1, #27
   25362:	bf28      	it	cs
   25364:	211b      	movcs	r1, #27
		*tx_octets = LL_LENGTH_OCTETS_TX_MAX;
	}

	if (*tx_time > tx_time_max) {
   25366:	f5b2 7fa4 	cmp.w	r2, #328	; 0x148
	*max_tx_time = tx_time;
   2536a:	4b06      	ldr	r3, [pc, #24]	; (25384 <ull_dle_local_tx_update+0x24>)
void ull_dle_local_tx_update(struct ll_conn *conn, uint16_t tx_octets, uint16_t tx_time)
{
	/* Trim to supported values */
	ull_len_data_length_trim(&tx_octets, &tx_time);

	conn->lll.dle.default_tx_octets = tx_octets;
   2536c:	f8a0 1072 	strh.w	r1, [r0, #114]	; 0x72
	if (*tx_time > tx_time_max) {
   25370:	bf28      	it	cs
   25372:	f44f 72a4 	movcs.w	r2, #328	; 0x148

#if defined(CONFIG_BT_CTLR_PHY)
	conn->lll.dle.default_tx_time = tx_time;
   25376:	f8a0 2070 	strh.w	r2, [r0, #112]	; 0x70
	*max_tx_time = tx_time;
   2537a:	65c3      	str	r3, [r0, #92]	; 0x5c
#endif /* CONFIG_BT_CTLR_PHY */

	dle_max_time_get(conn, &conn->lll.dle.local.max_rx_time, &conn->lll.dle.local.max_tx_time);
	conn->lll.dle.local.max_tx_octets = conn->lll.dle.default_tx_octets;
   2537c:	f8a0 1058 	strh.w	r1, [r0, #88]	; 0x58
}
   25380:	4770      	bx	lr
   25382:	bf00      	nop
   25384:	01480148 	.word	0x01480148

00025388 <ull_dle_init>:

void ull_dle_init(struct ll_conn *conn, uint8_t phy)
{
   25388:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_CTLR_PHY)
	const uint16_t max_time_min = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, phy);
   2538a:	f001 0503 	and.w	r5, r1, #3
   2538e:	3528      	adds	r5, #40	; 0x28
{
   25390:	4604      	mov	r4, r0
	const uint16_t max_time_min = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, phy);
   25392:	f3c1 0340 	ubfx	r3, r1, #1, #1
	const uint16_t max_time_max = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, phy);
#endif

	/* Clear DLE data set */
	memset(&conn->lll.dle, 0, sizeof(conn->lll.dle));
   25396:	221e      	movs	r2, #30
   25398:	2100      	movs	r1, #0
	const uint16_t max_time_min = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, phy);
   2539a:	00ed      	lsls	r5, r5, #3
	memset(&conn->lll.dle, 0, sizeof(conn->lll.dle));
   2539c:	3058      	adds	r0, #88	; 0x58
	const uint16_t max_time_min = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, phy);
   2539e:	40dd      	lsrs	r5, r3
	memset(&conn->lll.dle, 0, sizeof(conn->lll.dle));
   253a0:	f010 f8d4 	bl	3554c <memset>
	/* See BT. 5.2 Spec - Vol 6, Part B, Sect 4.5.10
	 * Default to locally max supported rx/tx length/time
	 */
	ull_dle_local_tx_update(conn, default_tx_octets, default_tx_time);
   253a4:	4a31      	ldr	r2, [pc, #196]	; (2546c <ull_dle_init+0xe4>)
   253a6:	4b32      	ldr	r3, [pc, #200]	; (25470 <ull_dle_init+0xe8>)
	if (*tx_octets > LL_LENGTH_OCTETS_TX_MAX) {
   253a8:	8812      	ldrh	r2, [r2, #0]
	if (*tx_time > tx_time_max) {
   253aa:	881b      	ldrh	r3, [r3, #0]
	if (*tx_octets > LL_LENGTH_OCTETS_TX_MAX) {
   253ac:	2a1b      	cmp	r2, #27
   253ae:	bf28      	it	cs
   253b0:	221b      	movcs	r2, #27
	if (*tx_time > tx_time_max) {
   253b2:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   253b6:	bf28      	it	cs
   253b8:	f44f 73a4 	movcs.w	r3, #328	; 0x148
	conn->lll.dle.default_tx_time = tx_time;
   253bc:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
	*max_tx_time = tx_time;
   253c0:	f44f 73a4 	mov.w	r3, #328	; 0x148
   253c4:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
	unsigned int min_eff_rx_time = (conn->lll.phy_rx == PHY_CODED) ?
   253c8:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
	conn->lll.dle.default_tx_octets = tx_octets;
   253cc:	f8a4 2072 	strh.w	r2, [r4, #114]	; 0x72
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
   253d0:	f003 0307 	and.w	r3, r3, #7
   253d4:	2b04      	cmp	r3, #4
   253d6:	bf14      	ite	ne
   253d8:	f44f 73a4 	movne.w	r3, #328	; 0x148
   253dc:	f44f 6329 	moveq.w	r3, #2704	; 0xa90
		MAX(MIN(conn->lll.dle.local.max_rx_time, conn->lll.dle.remote.max_tx_time),
   253e0:	42ab      	cmp	r3, r5
   253e2:	bf38      	it	cc
   253e4:	462b      	movcc	r3, r5
	conn->lll.dle.local.max_tx_octets = conn->lll.dle.default_tx_octets;
   253e6:	f8a4 2058 	strh.w	r2, [r4, #88]	; 0x58
	if (eff_rx_time != conn->lll.dle.eff.max_rx_time) {
   253ea:	f8b4 206e 	ldrh.w	r2, [r4, #110]	; 0x6e
	const uint16_t eff_rx_time =
   253ee:	b29b      	uxth	r3, r3
	if (eff_rx_time != conn->lll.dle.eff.max_rx_time) {
   253f0:	429a      	cmp	r2, r3
		conn->lll.dle.eff.max_rx_time = eff_rx_time;
   253f2:	bf18      	it	ne
   253f4:	f8a4 306e 	strhne.w	r3, [r4, #110]	; 0x6e
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
   253f8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
	if (eff_tx_time != conn->lll.dle.eff.max_tx_time) {
   253fc:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
   25400:	2b1b      	cmp	r3, #27
		conn->lll.dle.eff.max_rx_octets = eff_rx_octets;
   25402:	bf1c      	itt	ne
   25404:	231b      	movne	r3, #27
   25406:	f8a4 306a 	strhne.w	r3, [r4, #106]	; 0x6a
	unsigned int min_eff_tx_time = (conn->lll.phy_tx == PHY_CODED) ?
   2540a:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
   2540e:	f003 0307 	and.w	r3, r3, #7
   25412:	2b04      	cmp	r3, #4
   25414:	bf14      	ite	ne
   25416:	f44f 73a4 	movne.w	r3, #328	; 0x148
   2541a:	f44f 6329 	moveq.w	r3, #2704	; 0xa90
	if (eff_tx_time != conn->lll.dle.eff.max_tx_time) {
   2541e:	429a      	cmp	r2, r3
		conn->lll.dle.eff.max_tx_time = eff_tx_time;
   25420:	bf18      	it	ne
   25422:	f8a4 306c 	strhne.w	r3, [r4, #108]	; 0x6c
	if (eff_tx_octets != conn->lll.dle.eff.max_tx_octets) {
   25426:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
   2542a:	2b1b      	cmp	r3, #27

	conn->lll.dle.local.max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   2542c:	f04f 011b 	mov.w	r1, #27
		conn->lll.dle.eff.max_tx_octets = eff_tx_octets;
   25430:	bf18      	it	ne
   25432:	231b      	movne	r3, #27
	const uint16_t max_time_min = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, phy);
   25434:	b2ae      	uxth	r6, r5
	conn->lll.dle.local.max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   25436:	f8a4 105a 	strh.w	r1, [r4, #90]	; 0x5a
		conn->lll.dle.eff.max_tx_octets = eff_tx_octets;
   2543a:	bf18      	it	ne
   2543c:	f8a4 3068 	strhne.w	r3, [r4, #104]	; 0x68
#if defined(CONFIG_BT_CTLR_PHY)
	conn->lll.dle.local.max_rx_time = max_time_max;
#endif /* CONFIG_BT_CTLR_PHY */

	/* Default to minimum rx/tx data length/time */
	conn->lll.dle.remote.max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   25440:	f04f 111b 	mov.w	r1, #1769499	; 0x1b001b

	/* Check whether the controller should perform a data length update after
	 * connection is established
	 */
#if defined(CONFIG_BT_CTLR_PHY)
	if ((conn->lll.dle.local.max_rx_time != max_time_min ||
   25444:	f5b5 7fa4 	cmp.w	r5, #328	; 0x148
	conn->lll.dle.local.max_rx_time = max_time_max;
   25448:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
	conn->lll.dle.remote.max_tx_time = max_time_min;
   2544c:	f8a4 6064 	strh.w	r6, [r4, #100]	; 0x64
	conn->lll.dle.remote.max_rx_time = max_time_min;
   25450:	f8a4 6066 	strh.w	r6, [r4, #102]	; 0x66
	conn->lll.dle.remote.max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   25454:	6621      	str	r1, [r4, #96]	; 0x60
	if ((conn->lll.dle.local.max_rx_time != max_time_min ||
   25456:	d003      	beq.n	25460 <ull_dle_init+0xd8>
	     conn->lll.dle.local.max_tx_time != max_time_min)) {
		conn->lll.dle.update = 1;
   25458:	2301      	movs	r3, #1
   2545a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
		if (conn->lll.dle.local.max_tx_octets != PDU_DC_PAYLOAD_SIZE_MIN ||
		    conn->lll.dle.local.max_rx_octets != PDU_DC_PAYLOAD_SIZE_MIN) {
			conn->lll.dle.update = 1;
		}
	}
}
   2545e:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->lll.dle.local.max_tx_octets != PDU_DC_PAYLOAD_SIZE_MIN ||
   25460:	6da3      	ldr	r3, [r4, #88]	; 0x58
   25462:	f1b3 1f1b 	cmp.w	r3, #1769499	; 0x1b001b
   25466:	d1f7      	bne.n	25458 <ull_dle_init+0xd0>
}
   25468:	bd70      	pop	{r4, r5, r6, pc}
   2546a:	bf00      	nop
   2546c:	20003298 	.word	0x20003298
   25470:	20003296 	.word	0x20003296

00025474 <pu_check_update_ind>:
	 */
	return (phy < 5 && phy != 3);
}

static uint8_t pu_check_update_ind(struct ll_conn *conn, struct proc_ctx *ctx)
{
   25474:	b570      	push	{r4, r5, r6, lr}
	uint8_t ret = 0;

	/* Check if either phy selected is invalid */
	if (!phy_valid(ctx->data.pu.c_to_p_phy) || !phy_valid(ctx->data.pu.p_to_c_phy)) {
   25476:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
   2547a:	f891 2023 	ldrb.w	r2, [r1, #35]	; 0x23
	return (phy < 5 && phy != 3);
   2547e:	2b04      	cmp	r3, #4
{
   25480:	460c      	mov	r4, r1
	return (phy < 5 && phy != 3);
   25482:	d803      	bhi.n	2548c <pu_check_update_ind+0x18>
   25484:	2b03      	cmp	r3, #3
   25486:	d001      	beq.n	2548c <pu_check_update_ind+0x18>
   25488:	2a04      	cmp	r2, #4
   2548a:	d90b      	bls.n	254a4 <pu_check_update_ind+0x30>
		ctx->data.pu.error = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
		ret = 1;
	}

	/* Both tx and rx PHY unchanged */
	if (!((ctx->data.pu.c_to_p_phy | ctx->data.pu.p_to_c_phy) & 0x07)) {
   2548c:	4313      	orrs	r3, r2
		ctx->data.pu.error = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
   2548e:	2111      	movs	r1, #17
	if (!((ctx->data.pu.c_to_p_phy | ctx->data.pu.p_to_c_phy) & 0x07)) {
   25490:	f013 0307 	ands.w	r3, r3, #7
		ctx->data.pu.error = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
   25494:	77a1      	strb	r1, [r4, #30]
		ret = 1;
   25496:	f04f 0501 	mov.w	r5, #1
	if (!((ctx->data.pu.c_to_p_phy | ctx->data.pu.p_to_c_phy) & 0x07)) {
   2549a:	d10b      	bne.n	254b4 <pu_check_update_ind+0x40>
		ret = 1;
	} else {
		/* if instant already passed, quit procedure with error */
		if (is_instant_reached_or_passed(ctx->data.pu.instant,
						 ull_conn_event_counter(conn))) {
			ctx->data.pu.error = BT_HCI_ERR_INSTANT_PASSED;
   2549c:	77a3      	strb	r3, [r4, #30]
		ret = 1;
   2549e:	2501      	movs	r5, #1
			ret = 1;
		}
	}
	return ret;
}
   254a0:	4628      	mov	r0, r5
   254a2:	bd70      	pop	{r4, r5, r6, pc}
	return (phy < 5 && phy != 3);
   254a4:	2a03      	cmp	r2, #3
   254a6:	d00d      	beq.n	254c4 <pu_check_update_ind+0x50>
	if (!((ctx->data.pu.c_to_p_phy | ctx->data.pu.p_to_c_phy) & 0x07)) {
   254a8:	4313      	orrs	r3, r2
   254aa:	f013 0307 	ands.w	r3, r3, #7
	uint8_t ret = 0;
   254ae:	f04f 0500 	mov.w	r5, #0
	if (!((ctx->data.pu.c_to_p_phy | ctx->data.pu.p_to_c_phy) & 0x07)) {
   254b2:	d0f3      	beq.n	2549c <pu_check_update_ind+0x28>
		if (is_instant_reached_or_passed(ctx->data.pu.instant,
   254b4:	8c26      	ldrh	r6, [r4, #32]
   254b6:	f7ff fe6b 	bl	25190 <ull_conn_event_counter>
   254ba:	1b80      	subs	r0, r0, r6
   254bc:	0403      	lsls	r3, r0, #16
   254be:	d4ef      	bmi.n	254a0 <pu_check_update_ind+0x2c>
   254c0:	2328      	movs	r3, #40	; 0x28
   254c2:	e7eb      	b.n	2549c <pu_check_update_ind+0x28>
		ctx->data.pu.error = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
   254c4:	2311      	movs	r3, #17
   254c6:	778b      	strb	r3, [r1, #30]
		ret = 1;
   254c8:	2501      	movs	r5, #1
   254ca:	e7f3      	b.n	254b4 <pu_check_update_ind+0x40>

000254cc <pu_ntf>:
	/* Restart procedure response timeout timer */
	llcp_lr_prt_restart(conn);
}

static void pu_ntf(struct ll_conn *conn, struct proc_ctx *ctx)
{
   254cc:	b570      	push	{r4, r5, r6, lr}
   254ce:	4606      	mov	r6, r0
   254d0:	460d      	mov	r5, r1
	struct node_rx_pdu *ntf;
	struct node_rx_pu *pdu;

	/* Allocate ntf node */
	ntf = llcp_ntf_alloc();
   254d2:	f001 f8d9 	bl	26688 <llcp_ntf_alloc>
	LL_ASSERT(ntf);
   254d6:	4604      	mov	r4, r0
   254d8:	b1c0      	cbz	r0, 2550c <pu_ntf+0x40>

	ntf->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   254da:	231d      	movs	r3, #29
   254dc:	7123      	strb	r3, [r4, #4]
	ntf->hdr.handle = conn->lll.handle;
   254de:	8d33      	ldrh	r3, [r6, #40]	; 0x28
   254e0:	80e3      	strh	r3, [r4, #6]
	pdu = (struct node_rx_pu *)ntf->pdu;

	pdu->status = ctx->data.pu.error;
   254e2:	7fab      	ldrb	r3, [r5, #30]
   254e4:	7723      	strb	r3, [r4, #28]
	pdu->rx = conn->lll.phy_rx;
   254e6:	f896 3077 	ldrb.w	r3, [r6, #119]	; 0x77
	pdu->tx = conn->lll.phy_tx;

	/* Enqueue notification towards LL */
	ll_rx_put_sched(ntf->hdr.link, ntf);
   254ea:	6820      	ldr	r0, [r4, #0]
	pdu->rx = conn->lll.phy_rx;
   254ec:	f3c3 0302 	ubfx	r3, r3, #0, #3
   254f0:	77a3      	strb	r3, [r4, #30]
	pdu->tx = conn->lll.phy_tx;
   254f2:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
   254f6:	f3c3 0302 	ubfx	r3, r3, #0, #3
   254fa:	7763      	strb	r3, [r4, #29]
	ll_rx_put_sched(ntf->hdr.link, ntf);
   254fc:	4621      	mov	r1, r4
   254fe:	f7fd fb15 	bl	22b2c <ll_rx_put_sched>
	ctx->data.pu.ntf_pu = 0;
   25502:	7f6b      	ldrb	r3, [r5, #29]
   25504:	f36f 0300 	bfc	r3, #0, #1
   25508:	776b      	strb	r3, [r5, #29]
}
   2550a:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(ntf);
   2550c:	4a06      	ldr	r2, [pc, #24]	; (25528 <pu_ntf+0x5c>)
   2550e:	4907      	ldr	r1, [pc, #28]	; (2552c <pu_ntf+0x60>)
   25510:	4807      	ldr	r0, [pc, #28]	; (25530 <pu_ntf+0x64>)
   25512:	f240 139f 	movw	r3, #415	; 0x19f
   25516:	f00d ff7f 	bl	33418 <assert_print>
   2551a:	4040      	eors	r0, r0
   2551c:	f380 8811 	msr	BASEPRI, r0
   25520:	f04f 0003 	mov.w	r0, #3
   25524:	df02      	svc	2
   25526:	e7d8      	b.n	254da <pu_ntf+0xe>
   25528:	0003a800 	.word	0x0003a800
   2552c:	0003a844 	.word	0x0003a844
   25530:	00039f74 	.word	0x00039f74

00025534 <pu_update_eff_times>:
{
   25534:	b5f0      	push	{r4, r5, r6, r7, lr}
   25536:	460e      	mov	r6, r1
   25538:	b083      	sub	sp, #12
	ull_dle_max_time_get(conn, &max_rx_time, &max_tx_time);
   2553a:	f10d 0206 	add.w	r2, sp, #6
   2553e:	a901      	add	r1, sp, #4
	uint16_t eff_tx_time = lll->dle.eff.max_tx_time;
   25540:	f8b0 506c 	ldrh.w	r5, [r0, #108]	; 0x6c
	uint16_t eff_rx_time = lll->dle.eff.max_rx_time;
   25544:	f8b0 706e 	ldrh.w	r7, [r0, #110]	; 0x6e
{
   25548:	4604      	mov	r4, r0
	ull_dle_max_time_get(conn, &max_rx_time, &max_tx_time);
   2554a:	f7ff fe3d 	bl	251c8 <ull_dle_max_time_get>
	if ((ctx->data.pu.p_to_c_phy && (lll->role == BT_HCI_ROLE_PERIPHERAL)) ||
   2554e:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   25552:	2a00      	cmp	r2, #0
   25554:	d156      	bne.n	25604 <pu_update_eff_times+0xd0>
   25556:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
   2555a:	b9cb      	cbnz	r3, 25590 <pu_update_eff_times+0x5c>
	if ((eff_tx_time > lll->dle.eff.max_tx_time) ||
   2555c:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
   25560:	42ab      	cmp	r3, r5
   25562:	d30e      	bcc.n	25582 <pu_update_eff_times+0x4e>
   25564:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   25568:	429a      	cmp	r2, r3
   2556a:	d30a      	bcc.n	25582 <pu_update_eff_times+0x4e>
	    (eff_rx_time > lll->dle.eff.max_rx_time) ||
   2556c:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
	    (lll->dle.eff.max_tx_time > max_tx_time) ||
   25570:	42bb      	cmp	r3, r7
   25572:	d306      	bcc.n	25582 <pu_update_eff_times+0x4e>
	    (eff_rx_time > lll->dle.eff.max_rx_time) ||
   25574:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   25578:	429a      	cmp	r2, r3
   2557a:	d302      	bcc.n	25582 <pu_update_eff_times+0x4e>
	return 0U;
   2557c:	2000      	movs	r0, #0
}
   2557e:	b003      	add	sp, #12
   25580:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 1U;
   25582:	2001      	movs	r0, #1
		lll->dle.eff.max_tx_time = eff_tx_time;
   25584:	f8a4 506c 	strh.w	r5, [r4, #108]	; 0x6c
		lll->dle.eff.max_rx_time = eff_rx_time;
   25588:	f8a4 706e 	strh.w	r7, [r4, #110]	; 0x6e
}
   2558c:	b003      	add	sp, #12
   2558e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    (ctx->data.pu.c_to_p_phy && (lll->role == BT_HCI_ROLE_CENTRAL))) {
   25590:	f994 0039 	ldrsb.w	r0, [r4, #57]	; 0x39
   25594:	2800      	cmp	r0, #0
   25596:	db1d      	blt.n	255d4 <pu_update_eff_times+0xa0>
			pu_calc_eff_time(lll->dle.eff.max_tx_octets, lll->phy_tx, max_tx_time);
   25598:	f894 1076 	ldrb.w	r1, [r4, #118]	; 0x76
	uint16_t payload_time = PDU_DC_MAX_US(max_octets, phy);
   2559c:	f894 5068 	ldrb.w	r5, [r4, #104]	; 0x68
   255a0:	f001 0303 	and.w	r3, r1, #3
   255a4:	442b      	add	r3, r5
   255a6:	330d      	adds	r3, #13
   255a8:	00db      	lsls	r3, r3, #3
   255aa:	f3c1 0140 	ubfx	r1, r1, #1, #1
   255ae:	40cb      	lsrs	r3, r1
	eff_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, payload_time);
   255b0:	b29b      	uxth	r3, r3
	eff_time = MIN(eff_time, default_time);
   255b2:	f8bd 5006 	ldrh.w	r5, [sp, #6]
	eff_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, payload_time);
   255b6:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   255ba:	bf38      	it	cc
   255bc:	f44f 73a4 	movcc.w	r3, #328	; 0x148
	eff_time = MIN(eff_time, default_time);
   255c0:	429d      	cmp	r5, r3
   255c2:	bf28      	it	cs
   255c4:	461d      	movcs	r5, r3
	if ((ctx->data.pu.p_to_c_phy && (lll->role == BT_HCI_ROLE_CENTRAL)) ||
   255c6:	b332      	cbz	r2, 25616 <pu_update_eff_times+0xe2>
   255c8:	2800      	cmp	r0, #0
   255ca:	da03      	bge.n	255d4 <pu_update_eff_times+0xa0>
   255cc:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
   255d0:	2b00      	cmp	r3, #0
   255d2:	d0c3      	beq.n	2555c <pu_update_eff_times+0x28>
			pu_calc_eff_time(lll->dle.eff.max_rx_octets, lll->phy_rx, max_rx_time);
   255d4:	f894 2077 	ldrb.w	r2, [r4, #119]	; 0x77
	uint16_t payload_time = PDU_DC_MAX_US(max_octets, phy);
   255d8:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
	eff_time = MIN(eff_time, default_time);
   255dc:	f8bd 7004 	ldrh.w	r7, [sp, #4]
	uint16_t payload_time = PDU_DC_MAX_US(max_octets, phy);
   255e0:	f002 0303 	and.w	r3, r2, #3
   255e4:	440b      	add	r3, r1
   255e6:	330d      	adds	r3, #13
   255e8:	00db      	lsls	r3, r3, #3
   255ea:	f3c2 0240 	ubfx	r2, r2, #1, #1
   255ee:	40d3      	lsrs	r3, r2
	eff_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, payload_time);
   255f0:	b29b      	uxth	r3, r3
   255f2:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   255f6:	bf38      	it	cc
   255f8:	f44f 73a4 	movcc.w	r3, #328	; 0x148
	eff_time = MIN(eff_time, default_time);
   255fc:	429f      	cmp	r7, r3
   255fe:	bf28      	it	cs
   25600:	461f      	movcs	r7, r3
	return eff_time;
   25602:	e7ab      	b.n	2555c <pu_update_eff_times+0x28>
	if ((ctx->data.pu.p_to_c_phy && (lll->role == BT_HCI_ROLE_PERIPHERAL)) ||
   25604:	f994 0039 	ldrsb.w	r0, [r4, #57]	; 0x39
   25608:	2800      	cmp	r0, #0
   2560a:	dbc5      	blt.n	25598 <pu_update_eff_times+0x64>
   2560c:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
   25610:	2b00      	cmp	r3, #0
   25612:	d0df      	beq.n	255d4 <pu_update_eff_times+0xa0>
   25614:	e7c0      	b.n	25598 <pu_update_eff_times+0x64>
	if ((ctx->data.pu.p_to_c_phy && (lll->role == BT_HCI_ROLE_CENTRAL)) ||
   25616:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
   2561a:	2b00      	cmp	r3, #0
   2561c:	d09e      	beq.n	2555c <pu_update_eff_times+0x28>
	    (ctx->data.pu.c_to_p_phy && (lll->role == BT_HCI_ROLE_PERIPHERAL))) {
   2561e:	2800      	cmp	r0, #0
   25620:	da9c      	bge.n	2555c <pu_update_eff_times+0x28>
   25622:	e7d7      	b.n	255d4 <pu_update_eff_times+0xa0>

00025624 <rp_pu_send_phy_rsp.constprop.0>:
	}
}
#endif /* CONFIG_BT_CENTRAL */

#if defined(CONFIG_BT_PERIPHERAL)
static void rp_pu_send_phy_rsp(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
   25624:	b570      	push	{r4, r5, r6, lr}
   25626:	4605      	mov	r5, r0
   25628:	460c      	mov	r4, r1
{
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx) ||
   2562a:	f003 fe6d 	bl	29308 <llcp_rr_ispaused>
   2562e:	b110      	cbz	r0, 25636 <rp_pu_send_phy_rsp.constprop.0+0x12>
	    (llcp_rr_get_paused_cmd(conn) == PROC_PHY_UPDATE)) {
		ctx->state = RP_PU_STATE_WAIT_TX_PHY_RSP;
   25630:	2302      	movs	r3, #2
   25632:	72a3      	strb	r3, [r4, #10]
		llcp_rr_set_paused_cmd(conn, PROC_CTE_REQ);
		rp_pu_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_PHY_RSP);
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND;
		ctx->state = RP_PU_STATE_WAIT_TX_ACK_PHY_RSP;
	}
}
   25634:	bd70      	pop	{r4, r5, r6, pc}
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx) ||
   25636:	4621      	mov	r1, r4
   25638:	4628      	mov	r0, r5
   2563a:	f001 f801 	bl	26640 <llcp_tx_alloc_peek>
   2563e:	2800      	cmp	r0, #0
   25640:	d0f6      	beq.n	25630 <rp_pu_send_phy_rsp.constprop.0+0xc>
	    (llcp_rr_get_paused_cmd(conn) == PROC_PHY_UPDATE)) {
   25642:	4628      	mov	r0, r5
   25644:	f003 fe54 	bl	292f0 <llcp_rr_get_paused_cmd>
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx) ||
   25648:	2807      	cmp	r0, #7
   2564a:	d0f1      	beq.n	25630 <rp_pu_send_phy_rsp.constprop.0+0xc>
		llcp_rr_set_paused_cmd(conn, PROC_CTE_REQ);
   2564c:	210d      	movs	r1, #13
   2564e:	4628      	mov	r0, r5
   25650:	f003 fe4c 	bl	292ec <llcp_rr_set_paused_cmd>
	tx = llcp_tx_alloc(conn, ctx);
   25654:	4621      	mov	r1, r4
   25656:	4628      	mov	r0, r5
   25658:	f000 fffa 	bl	26650 <llcp_tx_alloc>
	LL_ASSERT(tx);
   2565c:	4606      	mov	r6, r0
   2565e:	b188      	cbz	r0, 25684 <rp_pu_send_phy_rsp.constprop.0+0x60>
		llcp_pdu_encode_phy_rsp(conn, pdu);
   25660:	1d31      	adds	r1, r6, #4
   25662:	4628      	mov	r0, r5
   25664:	f002 fd46 	bl	280f4 <llcp_pdu_encode_phy_rsp>
	ctx->tx_ack = tx;
   25668:	6166      	str	r6, [r4, #20]
	ctx->tx_opcode = pdu->llctrl.opcode;
   2566a:	79f3      	ldrb	r3, [r6, #7]
   2566c:	7363      	strb	r3, [r4, #13]
	llcp_tx_enqueue(conn, tx);
   2566e:	4631      	mov	r1, r6
   25670:	4628      	mov	r0, r5
   25672:	f001 f80b 	bl	2668c <llcp_tx_enqueue>
	llcp_rr_prt_restart(conn);
   25676:	4628      	mov	r0, r5
   25678:	f003 fe4e 	bl	29318 <llcp_rr_prt_restart>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND;
   2567c:	2318      	movs	r3, #24
   2567e:	72e3      	strb	r3, [r4, #11]
   25680:	2303      	movs	r3, #3
   25682:	e7d6      	b.n	25632 <rp_pu_send_phy_rsp.constprop.0+0xe>
	LL_ASSERT(tx);
   25684:	4a06      	ldr	r2, [pc, #24]	; (256a0 <rp_pu_send_phy_rsp.constprop.0+0x7c>)
   25686:	4907      	ldr	r1, [pc, #28]	; (256a4 <rp_pu_send_phy_rsp.constprop.0+0x80>)
   25688:	4807      	ldr	r0, [pc, #28]	; (256a8 <rp_pu_send_phy_rsp.constprop.0+0x84>)
   2568a:	f240 3386 	movw	r3, #902	; 0x386
   2568e:	f00d fec3 	bl	33418 <assert_print>
   25692:	4040      	eors	r0, r0
   25694:	f380 8811 	msr	BASEPRI, r0
   25698:	f04f 0003 	mov.w	r0, #3
   2569c:	df02      	svc	2
   2569e:	e7df      	b.n	25660 <rp_pu_send_phy_rsp.constprop.0+0x3c>
   256a0:	0003a800 	.word	0x0003a800
   256a4:	0003a694 	.word	0x0003a694
   256a8:	00039f74 	.word	0x00039f74

000256ac <pu_dle_ntf.constprop.0>:
static void pu_dle_ntf(struct ll_conn *conn, struct proc_ctx *ctx)
   256ac:	b538      	push	{r3, r4, r5, lr}
   256ae:	4605      	mov	r5, r0
	ntf = llcp_ntf_alloc();
   256b0:	f000 ffea 	bl	26688 <llcp_ntf_alloc>
	LL_ASSERT(ntf);
   256b4:	4604      	mov	r4, r0
   256b6:	b170      	cbz	r0, 256d6 <pu_dle_ntf.constprop.0+0x2a>
	ntf->hdr.type = NODE_RX_TYPE_DC_PDU;
   256b8:	2303      	movs	r3, #3
   256ba:	7123      	strb	r3, [r4, #4]
	ntf->hdr.handle = conn->lll.handle;
   256bc:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
   256be:	80e3      	strh	r3, [r4, #6]
	llcp_ntf_encode_length_change(conn, pdu);
   256c0:	4628      	mov	r0, r5
   256c2:	f104 011c 	add.w	r1, r4, #28
   256c6:	f002 fe25 	bl	28314 <llcp_ntf_encode_length_change>
	ll_rx_put_sched(ntf->hdr.link, ntf);
   256ca:	6820      	ldr	r0, [r4, #0]
   256cc:	4621      	mov	r1, r4
}
   256ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ll_rx_put_sched(ntf->hdr.link, ntf);
   256d2:	f7fd ba2b 	b.w	22b2c <ll_rx_put_sched>
	LL_ASSERT(ntf);
   256d6:	4a07      	ldr	r2, [pc, #28]	; (256f4 <pu_dle_ntf.constprop.0+0x48>)
   256d8:	4907      	ldr	r1, [pc, #28]	; (256f8 <pu_dle_ntf.constprop.0+0x4c>)
   256da:	4808      	ldr	r0, [pc, #32]	; (256fc <pu_dle_ntf.constprop.0+0x50>)
   256dc:	f44f 73db 	mov.w	r3, #438	; 0x1b6
   256e0:	f00d fe9a 	bl	33418 <assert_print>
   256e4:	4040      	eors	r0, r0
   256e6:	f380 8811 	msr	BASEPRI, r0
   256ea:	f04f 0003 	mov.w	r0, #3
   256ee:	df02      	svc	2
   256f0:	e7e2      	b.n	256b8 <pu_dle_ntf.constprop.0+0xc>
   256f2:	bf00      	nop
   256f4:	0003a800 	.word	0x0003a800
   256f8:	0003a844 	.word	0x0003a844
   256fc:	00039f74 	.word	0x00039f74

00025700 <lp_pu_tx_ntf.constprop.0>:
static void lp_pu_tx_ntf(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt)
   25700:	b570      	push	{r4, r5, r6, lr}
	uint8_t ntf_count = ctx->data.pu.ntf_pu + NTF_DLE;
   25702:	7f4a      	ldrb	r2, [r1, #29]
   25704:	f3c2 0300 	ubfx	r3, r2, #0, #1
   25708:	f3c2 0c40 	ubfx	ip, r2, #1, #1
   2570c:	4463      	add	r3, ip
   2570e:	b2db      	uxtb	r3, r3
	if ((ntf_count > 1) && !llcp_ntf_alloc_num_available(ntf_count)) {
   25710:	2b02      	cmp	r3, #2
static void lp_pu_tx_ntf(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt)
   25712:	460c      	mov	r4, r1
   25714:	4605      	mov	r5, r0
	if ((ntf_count > 1) && !llcp_ntf_alloc_num_available(ntf_count)) {
   25716:	d025      	beq.n	25764 <lp_pu_tx_ntf.constprop.0+0x64>
	if (ntf_count && !llcp_ntf_alloc_num_available(ntf_count)) {
   25718:	b983      	cbnz	r3, 2573c <lp_pu_tx_ntf.constprop.0+0x3c>
		if (ctx->data.pu.ntf_pu) {
   2571a:	07d6      	lsls	r6, r2, #31
   2571c:	d428      	bmi.n	25770 <lp_pu_tx_ntf.constprop.0+0x70>
		if (ctx->data.pu.ntf_dle) {
   2571e:	0793      	lsls	r3, r2, #30
   25720:	d502      	bpl.n	25728 <lp_pu_tx_ntf.constprop.0+0x28>
			pu_dle_ntf(conn, ctx);
   25722:	4628      	mov	r0, r5
   25724:	f7ff ffc2 	bl	256ac <pu_dle_ntf.constprop.0>
		llcp_lr_complete(conn);
   25728:	4628      	mov	r0, r5
   2572a:	f002 fad7 	bl	27cdc <llcp_lr_complete>
		ctx->state = LP_PU_STATE_IDLE;
   2572e:	2100      	movs	r1, #0
   25730:	72a1      	strb	r1, [r4, #10]
		llcp_rr_set_paused_cmd(conn, PROC_NONE);
   25732:	4628      	mov	r0, r5
}
   25734:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		llcp_rr_set_paused_cmd(conn, PROC_NONE);
   25738:	f003 bdd8 	b.w	292ec <llcp_rr_set_paused_cmd>
   2573c:	2601      	movs	r6, #1
	if (ntf_count && !llcp_ntf_alloc_num_available(ntf_count)) {
   2573e:	4630      	mov	r0, r6
   25740:	f000 ff9a 	bl	26678 <llcp_ntf_alloc_num_available>
   25744:	b158      	cbz	r0, 2575e <lp_pu_tx_ntf.constprop.0+0x5e>
		if (ctx->data.pu.ntf_pu) {
   25746:	7f62      	ldrb	r2, [r4, #29]
   25748:	07d1      	lsls	r1, r2, #31
   2574a:	d5e8      	bpl.n	2571e <lp_pu_tx_ntf.constprop.0+0x1e>
			pu_ntf(conn, ctx);
   2574c:	4621      	mov	r1, r4
   2574e:	4628      	mov	r0, r5
   25750:	f7ff febc 	bl	254cc <pu_ntf>
			if (ntf_count == 1 && NTF_DLE == 1) {
   25754:	2e01      	cmp	r6, #1
   25756:	d10f      	bne.n	25778 <lp_pu_tx_ntf.constprop.0+0x78>
   25758:	7f63      	ldrb	r3, [r4, #29]
   2575a:	079a      	lsls	r2, r3, #30
   2575c:	d5e4      	bpl.n	25728 <lp_pu_tx_ntf.constprop.0+0x28>
		ctx->state = LP_PU_STATE_WAIT_NTF;
   2575e:	2309      	movs	r3, #9
   25760:	72a3      	strb	r3, [r4, #10]
}
   25762:	bd70      	pop	{r4, r5, r6, pc}
	if ((ntf_count > 1) && !llcp_ntf_alloc_num_available(ntf_count)) {
   25764:	4618      	mov	r0, r3
   25766:	f000 ff87 	bl	26678 <llcp_ntf_alloc_num_available>
   2576a:	1c46      	adds	r6, r0, #1
   2576c:	b2f6      	uxtb	r6, r6
   2576e:	e7e6      	b.n	2573e <lp_pu_tx_ntf.constprop.0+0x3e>
			pu_ntf(conn, ctx);
   25770:	f7ff feac 	bl	254cc <pu_ntf>
		if (ctx->data.pu.ntf_dle) {
   25774:	7f62      	ldrb	r2, [r4, #29]
   25776:	e7d2      	b.n	2571e <lp_pu_tx_ntf.constprop.0+0x1e>
			if (ntf_count == 1 && NTF_DLE == 1) {
   25778:	7f62      	ldrb	r2, [r4, #29]
   2577a:	e7d0      	b.n	2571e <lp_pu_tx_ntf.constprop.0+0x1e>

0002577c <lp_pu_send_phy_req.constprop.0>:
static void lp_pu_send_phy_req(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
   2577c:	b570      	push	{r4, r5, r6, lr}
   2577e:	4605      	mov	r5, r0
   25780:	460c      	mov	r4, r1
	if (llcp_lr_ispaused(conn) || llcp_rr_get_collision(conn) ||
   25782:	f002 fa17 	bl	27bb4 <llcp_lr_ispaused>
   25786:	b110      	cbz	r0, 2578e <lp_pu_send_phy_req.constprop.0+0x12>
		ctx->state = LP_PU_STATE_WAIT_TX_PHY_REQ;
   25788:	2301      	movs	r3, #1
   2578a:	72a3      	strb	r3, [r4, #10]
}
   2578c:	bd70      	pop	{r4, r5, r6, pc}
	if (llcp_lr_ispaused(conn) || llcp_rr_get_collision(conn) ||
   2578e:	4628      	mov	r0, r5
   25790:	f003 fdb0 	bl	292f4 <llcp_rr_get_collision>
   25794:	2800      	cmp	r0, #0
   25796:	d1f7      	bne.n	25788 <lp_pu_send_phy_req.constprop.0+0xc>
	    !llcp_tx_alloc_peek(conn, ctx) ||
   25798:	4621      	mov	r1, r4
   2579a:	4628      	mov	r0, r5
   2579c:	f000 ff50 	bl	26640 <llcp_tx_alloc_peek>
	if (llcp_lr_ispaused(conn) || llcp_rr_get_collision(conn) ||
   257a0:	2800      	cmp	r0, #0
   257a2:	d0f1      	beq.n	25788 <lp_pu_send_phy_req.constprop.0+0xc>
	    (llcp_rr_get_paused_cmd(conn) == PROC_PHY_UPDATE)) {
   257a4:	4628      	mov	r0, r5
   257a6:	f003 fda3 	bl	292f0 <llcp_rr_get_paused_cmd>
	    !llcp_tx_alloc_peek(conn, ctx) ||
   257aa:	2807      	cmp	r0, #7
   257ac:	d0ec      	beq.n	25788 <lp_pu_send_phy_req.constprop.0+0xc>
		llcp_rr_set_incompat(conn, INCOMPAT_RESOLVABLE);
   257ae:	2101      	movs	r1, #1
   257b0:	4628      	mov	r0, r5
   257b2:	f003 fd97 	bl	292e4 <llcp_rr_set_incompat>
		llcp_rr_set_paused_cmd(conn, PROC_CTE_REQ);
   257b6:	210d      	movs	r1, #13
   257b8:	4628      	mov	r0, r5
   257ba:	f003 fd97 	bl	292ec <llcp_rr_set_paused_cmd>
	tx = llcp_tx_alloc(conn, ctx);
   257be:	4621      	mov	r1, r4
   257c0:	4628      	mov	r0, r5
   257c2:	f000 ff45 	bl	26650 <llcp_tx_alloc>
	LL_ASSERT(tx);
   257c6:	4606      	mov	r6, r0
   257c8:	b360      	cbz	r0, 25824 <lp_pu_send_phy_req.constprop.0+0xa8>
	conn->phy_pref_rx = ctx->data.pu.rx;
   257ca:	7f23      	ldrb	r3, [r4, #28]
   257cc:	f895 218c 	ldrb.w	r2, [r5, #396]	; 0x18c
   257d0:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   257d4:	f363 02c5 	bfi	r2, r3, #3, #3
   257d8:	f885 218c 	strb.w	r2, [r5, #396]	; 0x18c
	conn->phy_pref_tx = ctx->data.pu.tx;
   257dc:	7f22      	ldrb	r2, [r4, #28]
   257de:	f895 318c 	ldrb.w	r3, [r5, #396]	; 0x18c
   257e2:	f362 0302 	bfi	r3, r2, #0, #3
   257e6:	f885 318c 	strb.w	r3, [r5, #396]	; 0x18c
	conn->lll.phy_flags = ctx->data.pu.flags;
   257ea:	7f23      	ldrb	r3, [r4, #28]
   257ec:	f895 2076 	ldrb.w	r2, [r5, #118]	; 0x76
   257f0:	f3c3 1380 	ubfx	r3, r3, #6, #1
   257f4:	f363 02c3 	bfi	r2, r3, #3, #1
   257f8:	f885 2076 	strb.w	r2, [r5, #118]	; 0x76
		llcp_pdu_encode_phy_req(ctx, pdu);
   257fc:	1d31      	adds	r1, r6, #4
   257fe:	4620      	mov	r0, r4
   25800:	f002 fc5a 	bl	280b8 <llcp_pdu_encode_phy_req>
	ctx->tx_ack = tx;
   25804:	6166      	str	r6, [r4, #20]
	ctx->tx_opcode = pdu->llctrl.opcode;
   25806:	79f3      	ldrb	r3, [r6, #7]
   25808:	7363      	strb	r3, [r4, #13]
	llcp_tx_enqueue(conn, tx);
   2580a:	4631      	mov	r1, r6
   2580c:	4628      	mov	r0, r5
   2580e:	f000 ff3d 	bl	2668c <llcp_tx_enqueue>
	llcp_lr_prt_restart(conn);
   25812:	4628      	mov	r0, r5
   25814:	f002 f9de 	bl	27bd4 <llcp_lr_prt_restart>
		llcp_tx_pause_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
   25818:	2102      	movs	r1, #2
   2581a:	4628      	mov	r0, r5
   2581c:	f000 ff3a 	bl	26694 <llcp_tx_pause_data>
   25820:	2302      	movs	r3, #2
   25822:	e7b2      	b.n	2578a <lp_pu_send_phy_req.constprop.0+0xe>
	LL_ASSERT(tx);
   25824:	4a06      	ldr	r2, [pc, #24]	; (25840 <lp_pu_send_phy_req.constprop.0+0xc4>)
   25826:	4907      	ldr	r1, [pc, #28]	; (25844 <lp_pu_send_phy_req.constprop.0+0xc8>)
   25828:	4807      	ldr	r0, [pc, #28]	; (25848 <lp_pu_send_phy_req.constprop.0+0xcc>)
   2582a:	f44f 73bc 	mov.w	r3, #376	; 0x178
   2582e:	f00d fdf3 	bl	33418 <assert_print>
   25832:	4040      	eors	r0, r0
   25834:	f380 8811 	msr	BASEPRI, r0
   25838:	f04f 0003 	mov.w	r0, #3
   2583c:	df02      	svc	2
   2583e:	e7c4      	b.n	257ca <lp_pu_send_phy_req.constprop.0+0x4e>
   25840:	0003a800 	.word	0x0003a800
   25844:	0003a694 	.word	0x0003a694
   25848:	00039f74 	.word	0x00039f74

0002584c <lp_pu_execute_fsm>:
{
   2584c:	b570      	push	{r4, r5, r6, lr}
   2584e:	460c      	mov	r4, r1
	switch (ctx->state) {
   25850:	7a89      	ldrb	r1, [r1, #10]
{
   25852:	b082      	sub	sp, #8
   25854:	4606      	mov	r6, r0
   25856:	461d      	mov	r5, r3
	switch (ctx->state) {
   25858:	2909      	cmp	r1, #9
   2585a:	d80b      	bhi.n	25874 <lp_pu_execute_fsm+0x28>
   2585c:	e8df f001 	tbb	[pc, r1]
   25860:	0a190505 	.word	0x0a190505
   25864:	662e0a0a 	.word	0x662e0a0a
   25868:	a096      	.short	0xa096
	switch (evt) {
   2586a:	2a00      	cmp	r2, #0
   2586c:	f000 809c 	beq.w	259a8 <lp_pu_execute_fsm+0x15c>
}
   25870:	b002      	add	sp, #8
   25872:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(0);
   25874:	4a94      	ldr	r2, [pc, #592]	; (25ac8 <lp_pu_execute_fsm+0x27c>)
   25876:	4995      	ldr	r1, [pc, #596]	; (25acc <lp_pu_execute_fsm+0x280>)
   25878:	4895      	ldr	r0, [pc, #596]	; (25ad0 <lp_pu_execute_fsm+0x284>)
   2587a:	f240 3346 	movw	r3, #838	; 0x346
   2587e:	f00d fdcb 	bl	33418 <assert_print>
   25882:	4040      	eors	r0, r0
   25884:	f380 8811 	msr	BASEPRI, r0
   25888:	f04f 0003 	mov.w	r0, #3
   2588c:	df02      	svc	2
}
   2588e:	b002      	add	sp, #8
   25890:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   25892:	2a03      	cmp	r2, #3
   25894:	d1ec      	bne.n	25870 <lp_pu_execute_fsm+0x24>
		switch (conn->lll.role) {
   25896:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
   2589a:	09db      	lsrs	r3, r3, #7
   2589c:	f040 80b4 	bne.w	25a08 <lp_pu_execute_fsm+0x1bc>
			LL_ASSERT(0);
   258a0:	4a89      	ldr	r2, [pc, #548]	; (25ac8 <lp_pu_execute_fsm+0x27c>)
   258a2:	498a      	ldr	r1, [pc, #552]	; (25acc <lp_pu_execute_fsm+0x280>)
   258a4:	488a      	ldr	r0, [pc, #552]	; (25ad0 <lp_pu_execute_fsm+0x284>)
   258a6:	f240 2373 	movw	r3, #627	; 0x273
   258aa:	f00d fdb5 	bl	33418 <assert_print>
   258ae:	4040      	eors	r0, r0
   258b0:	f380 8811 	msr	BASEPRI, r0
   258b4:	f04f 0003 	mov.w	r0, #3
   258b8:	df02      	svc	2
   258ba:	e7d9      	b.n	25870 <lp_pu_execute_fsm+0x24>
	switch (evt) {
   258bc:	2a05      	cmp	r2, #5
   258be:	f000 8095 	beq.w	259ec <lp_pu_execute_fsm+0x1a0>
   258c2:	2a06      	cmp	r2, #6
   258c4:	d076      	beq.n	259b4 <lp_pu_execute_fsm+0x168>
   258c6:	2a02      	cmp	r2, #2
   258c8:	d1d2      	bne.n	25870 <lp_pu_execute_fsm+0x24>
		LL_ASSERT(conn->lll.role == BT_HCI_ROLE_PERIPHERAL);
   258ca:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   258ce:	2b00      	cmp	r3, #0
   258d0:	db0c      	blt.n	258ec <lp_pu_execute_fsm+0xa0>
   258d2:	4a7d      	ldr	r2, [pc, #500]	; (25ac8 <lp_pu_execute_fsm+0x27c>)
   258d4:	497f      	ldr	r1, [pc, #508]	; (25ad4 <lp_pu_execute_fsm+0x288>)
   258d6:	487e      	ldr	r0, [pc, #504]	; (25ad0 <lp_pu_execute_fsm+0x284>)
   258d8:	f44f 732d 	mov.w	r3, #692	; 0x2b4
   258dc:	f00d fd9c 	bl	33418 <assert_print>
   258e0:	4040      	eors	r0, r0
   258e2:	f380 8811 	msr	BASEPRI, r0
   258e6:	f04f 0003 	mov.w	r0, #3
   258ea:	df02      	svc	2
		llcp_pdu_decode_phy_update_ind(ctx, (struct pdu_data *)param);
   258ec:	4629      	mov	r1, r5
   258ee:	4620      	mov	r0, r4
   258f0:	f002 fc16 	bl	28120 <llcp_pdu_decode_phy_update_ind>
		const uint8_t end_procedure = pu_check_update_ind(conn, ctx);
   258f4:	4621      	mov	r1, r4
   258f6:	4630      	mov	r0, r6
   258f8:	f7ff fdbc 	bl	25474 <pu_check_update_ind>
		if (!end_procedure) {
   258fc:	2800      	cmp	r0, #0
   258fe:	f040 809c 	bne.w	25a3a <lp_pu_execute_fsm+0x1ee>
			if (ctx->data.pu.p_to_c_phy) {
   25902:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   25906:	b12b      	cbz	r3, 25914 <lp_pu_execute_fsm+0xc8>
	lll->phy_tx_time = phy_tx;
   25908:	f896 2076 	ldrb.w	r2, [r6, #118]	; 0x76
   2590c:	f363 1206 	bfi	r2, r3, #4, #3
   25910:	f886 2076 	strb.w	r2, [r6, #118]	; 0x76
			llcp_lr_prt_stop(conn);
   25914:	4630      	mov	r0, r6
   25916:	f002 f967 	bl	27be8 <llcp_lr_prt_stop>
			ctx->state = LP_PU_STATE_WAIT_INSTANT;
   2591a:	2307      	movs	r3, #7
   2591c:	72a3      	strb	r3, [r4, #10]
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
   2591e:	2102      	movs	r1, #2
   25920:	4630      	mov	r0, r6
}
   25922:	b002      	add	sp, #8
   25924:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
   25928:	f000 bec8 	b.w	266bc <llcp_tx_resume_data>
	switch (evt) {
   2592c:	2a00      	cmp	r2, #0
   2592e:	d19f      	bne.n	25870 <lp_pu_execute_fsm+0x24>
	if (is_instant_reached_or_passed(ctx->data.pu.instant, ull_conn_event_counter(conn))) {
   25930:	8c25      	ldrh	r5, [r4, #32]
   25932:	f7ff fc2d 	bl	25190 <ull_conn_event_counter>
   25936:	1b40      	subs	r0, r0, r5
   25938:	0403      	lsls	r3, r0, #16
   2593a:	d499      	bmi.n	25870 <lp_pu_execute_fsm+0x24>
	} else if (lll->role == BT_HCI_ROLE_PERIPHERAL) {
   2593c:	f996 5039 	ldrsb.w	r5, [r6, #57]	; 0x39
	const uint8_t old_tx = lll->phy_tx;
   25940:	f896 0076 	ldrb.w	r0, [r6, #118]	; 0x76
	const uint8_t old_rx = lll->phy_rx;
   25944:	f896 3077 	ldrb.w	r3, [r6, #119]	; 0x77
   25948:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   2594c:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
	} else if (lll->role == BT_HCI_ROLE_PERIPHERAL) {
   25950:	2d00      	cmp	r5, #0
	const uint8_t old_tx = lll->phy_tx;
   25952:	f000 0e07 	and.w	lr, r0, #7
	const uint8_t old_rx = lll->phy_rx;
   25956:	f003 0c07 	and.w	ip, r3, #7
	} else if (lll->role == BT_HCI_ROLE_PERIPHERAL) {
   2595a:	f2c0 8087 	blt.w	25a6c <lp_pu_execute_fsm+0x220>
		llcp_rr_set_incompat(conn, INCOMPAT_NO_COLLISION);
   2595e:	2100      	movs	r1, #0
   25960:	4630      	mov	r0, r6
   25962:	f003 fcbf 	bl	292e4 <llcp_rr_set_incompat>
		ctx->data.pu.ntf_pu = (phy_changed || ctx->data.pu.host_initiated);
   25966:	7f23      	ldrb	r3, [r4, #28]
		ctx->data.pu.error = BT_HCI_ERR_SUCCESS;
   25968:	2200      	movs	r2, #0
   2596a:	77a2      	strb	r2, [r4, #30]
		ctx->data.pu.ntf_pu = (phy_changed || ctx->data.pu.host_initiated);
   2596c:	09db      	lsrs	r3, r3, #7
   2596e:	7f62      	ldrb	r2, [r4, #29]
   25970:	f363 0200 	bfi	r2, r3, #0, #1
   25974:	7762      	strb	r2, [r4, #29]
	pu_set_timing_restrict(conn, conn->lll.phy_tx);
   25976:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
   2597a:	f3c3 0202 	ubfx	r2, r3, #0, #3
	lll->phy_tx_time = phy_tx;
   2597e:	f362 1306 	bfi	r3, r2, #4, #3
	ctx->state = LP_PU_STATE_WAIT_INSTANT_ON_AIR;
   25982:	2208      	movs	r2, #8
	lll->phy_tx_time = phy_tx;
   25984:	f886 3076 	strb.w	r3, [r6, #118]	; 0x76
	ctx->state = LP_PU_STATE_WAIT_INSTANT_ON_AIR;
   25988:	72a2      	strb	r2, [r4, #10]
}
   2598a:	e771      	b.n	25870 <lp_pu_execute_fsm+0x24>
	switch (evt) {
   2598c:	2a04      	cmp	r2, #4
   2598e:	f47f af6f 	bne.w	25870 <lp_pu_execute_fsm+0x24>
		lp_pu_tx_ntf(conn, ctx, evt);
   25992:	4621      	mov	r1, r4
   25994:	4630      	mov	r0, r6
}
   25996:	b002      	add	sp, #8
   25998:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		lp_pu_tx_ntf(conn, ctx, evt);
   2599c:	f7ff beb0 	b.w	25700 <lp_pu_tx_ntf.constprop.0>
	switch (evt) {
   259a0:	2a00      	cmp	r2, #0
   259a2:	f47f af65 	bne.w	25870 <lp_pu_execute_fsm+0x24>
   259a6:	e7f4      	b.n	25992 <lp_pu_execute_fsm+0x146>
		lp_pu_send_phy_req(conn, ctx, evt, param);
   259a8:	4621      	mov	r1, r4
}
   259aa:	b002      	add	sp, #8
   259ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		lp_pu_send_phy_req(conn, ctx, evt, param);
   259b0:	f7ff bee4 	b.w	2577c <lp_pu_send_phy_req.constprop.0>
		llcp_rr_set_incompat(conn, INCOMPAT_NO_COLLISION);
   259b4:	2100      	movs	r1, #0
   259b6:	f003 fc95 	bl	292e4 <llcp_rr_set_incompat>
	conn->llcp.fex.features_used &= ~ll_feat_mask;
   259ba:	f8d6 3130 	ldr.w	r3, [r6, #304]	; 0x130
   259be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   259c2:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
		ctx->data.pu.ntf_pu = 1;
   259c6:	7f63      	ldrb	r3, [r4, #29]
		ctx->data.pu.error = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   259c8:	221a      	movs	r2, #26
   259ca:	77a2      	strb	r2, [r4, #30]
		ctx->data.pu.ntf_pu = 1;
   259cc:	f043 0301 	orr.w	r3, r3, #1
   259d0:	7763      	strb	r3, [r4, #29]
	pu_set_timing_restrict(conn, conn->lll.phy_tx);
   259d2:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
   259d6:	f3c3 0202 	ubfx	r2, r3, #0, #3
	lll->phy_tx_time = phy_tx;
   259da:	f362 1306 	bfi	r3, r2, #4, #3
	lp_pu_tx_ntf(conn, ctx, evt);
   259de:	4621      	mov	r1, r4
   259e0:	4630      	mov	r0, r6
	lll->phy_tx_time = phy_tx;
   259e2:	f886 3076 	strb.w	r3, [r6, #118]	; 0x76
	lp_pu_tx_ntf(conn, ctx, evt);
   259e6:	f7ff fe8b 	bl	25700 <lp_pu_tx_ntf.constprop.0>
}
   259ea:	e798      	b.n	2591e <lp_pu_execute_fsm+0xd2>
		llcp_rr_set_incompat(conn, INCOMPAT_NO_COLLISION);
   259ec:	2100      	movs	r1, #0
   259ee:	f003 fc79 	bl	292e4 <llcp_rr_set_incompat>
		llcp_pdu_decode_reject_ext_ind(ctx, (struct pdu_data *) param);
   259f2:	4629      	mov	r1, r5
   259f4:	4620      	mov	r0, r4
   259f6:	f002 fb57 	bl	280a8 <llcp_pdu_decode_reject_ext_ind>
		ctx->data.pu.ntf_pu = 1;
   259fa:	7f63      	ldrb	r3, [r4, #29]
		ctx->data.pu.error = ctx->reject_ext_ind.error_code;
   259fc:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
   25a00:	77a2      	strb	r2, [r4, #30]
		ctx->data.pu.ntf_pu = 1;
   25a02:	f043 0301 	orr.w	r3, r3, #1
   25a06:	e7e3      	b.n	259d0 <lp_pu_execute_fsm+0x184>
	uint8_t phy_tx_time[8] = { 0,	      PHY_1M,	 PHY_2M,    PHY_1M,
   25a08:	4b33      	ldr	r3, [pc, #204]	; (25ad8 <lp_pu_execute_fsm+0x28c>)
	const uint8_t phys = phy_tx | lll->phy_tx;
   25a0a:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
	uint8_t phy_tx_time[8] = { 0,	      PHY_1M,	 PHY_2M,    PHY_1M,
   25a0e:	e893 0003 	ldmia.w	r3, {r0, r1}
				conn, pu_select_phy_timing_restrict(conn, ctx->data.pu.tx));
   25a12:	7f23      	ldrb	r3, [r4, #28]
	return phy_tx_time[phys];
   25a14:	4313      	orrs	r3, r2
	uint8_t phy_tx_time[8] = { 0,	      PHY_1M,	 PHY_2M,    PHY_1M,
   25a16:	ad02      	add	r5, sp, #8
	return phy_tx_time[phys];
   25a18:	f003 0307 	and.w	r3, r3, #7
	uint8_t phy_tx_time[8] = { 0,	      PHY_1M,	 PHY_2M,    PHY_1M,
   25a1c:	e905 0003 	stmdb	r5, {r0, r1}
	return phy_tx_time[phys];
   25a20:	3308      	adds	r3, #8
   25a22:	446b      	add	r3, sp
			llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
   25a24:	2102      	movs	r1, #2
	return phy_tx_time[phys];
   25a26:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	lll->phy_tx_time = phy_tx;
   25a2a:	f363 1206 	bfi	r2, r3, #4, #3
			ctx->state = LP_PU_STATE_WAIT_RX_PHY_UPDATE_IND;
   25a2e:	f641 0306 	movw	r3, #6150	; 0x1806
	lll->phy_tx_time = phy_tx;
   25a32:	f886 2076 	strb.w	r2, [r6, #118]	; 0x76
			ctx->state = LP_PU_STATE_WAIT_RX_PHY_UPDATE_IND;
   25a36:	8163      	strh	r3, [r4, #10]
			llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
   25a38:	e772      	b.n	25920 <lp_pu_execute_fsm+0xd4>
			llcp_rr_set_incompat(conn, INCOMPAT_NO_COLLISION);
   25a3a:	2100      	movs	r1, #0
   25a3c:	4630      	mov	r0, r6
   25a3e:	f003 fc51 	bl	292e4 <llcp_rr_set_incompat>
			if (ctx->data.pu.error != BT_HCI_ERR_SUCCESS) {
   25a42:	7fa3      	ldrb	r3, [r4, #30]
   25a44:	b10b      	cbz	r3, 25a4a <lp_pu_execute_fsm+0x1fe>
				conn->llcp_terminate.reason_final = ctx->data.pu.error;
   25a46:	f886 3148 	strb.w	r3, [r6, #328]	; 0x148
			ctx->data.pu.ntf_pu = ctx->data.pu.host_initiated;
   25a4a:	7f23      	ldrb	r3, [r4, #28]
   25a4c:	7f62      	ldrb	r2, [r4, #29]
   25a4e:	09db      	lsrs	r3, r3, #7
   25a50:	f363 0200 	bfi	r2, r3, #0, #1
   25a54:	7762      	strb	r2, [r4, #29]
	pu_set_timing_restrict(conn, conn->lll.phy_tx);
   25a56:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
   25a5a:	f3c3 0202 	ubfx	r2, r3, #0, #3
	lll->phy_tx_time = phy_tx;
   25a5e:	f362 1306 	bfi	r3, r2, #4, #3
	lp_pu_tx_ntf(conn, ctx, evt);
   25a62:	4621      	mov	r1, r4
	lll->phy_tx_time = phy_tx;
   25a64:	f886 3076 	strb.w	r3, [r6, #118]	; 0x76
	lp_pu_tx_ntf(conn, ctx, evt);
   25a68:	4630      	mov	r0, r6
   25a6a:	e7bc      	b.n	259e6 <lp_pu_execute_fsm+0x19a>
		if (p_to_c_phy) {
   25a6c:	f011 0103 	ands.w	r1, r1, #3
   25a70:	d01c      	beq.n	25aac <lp_pu_execute_fsm+0x260>
			lll->phy_tx = p_to_c_phy;
   25a72:	f361 0002 	bfi	r0, r1, #0, #3
		if (c_to_p_phy) {
   25a76:	f012 0203 	ands.w	r2, r2, #3
			lll->phy_tx = p_to_c_phy;
   25a7a:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
		if (c_to_p_phy) {
   25a7e:	d020      	beq.n	25ac2 <lp_pu_execute_fsm+0x276>
			lll->phy_rx = c_to_p_phy;
   25a80:	f362 0302 	bfi	r3, r2, #0, #3
	return ((old_tx != lll->phy_tx) || (old_rx != lll->phy_rx));
   25a84:	458e      	cmp	lr, r1
			lll->phy_rx = c_to_p_phy;
   25a86:	f886 3077 	strb.w	r3, [r6, #119]	; 0x77
	return ((old_tx != lll->phy_tx) || (old_rx != lll->phy_rx));
   25a8a:	d017      	beq.n	25abc <lp_pu_execute_fsm+0x270>
			ctx->data.pu.ntf_dle = pu_update_eff_times(conn, ctx);
   25a8c:	4621      	mov	r1, r4
   25a8e:	4630      	mov	r0, r6
   25a90:	f7ff fd50 	bl	25534 <pu_update_eff_times>
   25a94:	7f63      	ldrb	r3, [r4, #29]
   25a96:	f360 0341 	bfi	r3, r0, #1, #1
   25a9a:	7763      	strb	r3, [r4, #29]
		llcp_rr_set_incompat(conn, INCOMPAT_NO_COLLISION);
   25a9c:	2100      	movs	r1, #0
   25a9e:	4630      	mov	r0, r6
   25aa0:	f003 fc20 	bl	292e4 <llcp_rr_set_incompat>
		ctx->data.pu.error = BT_HCI_ERR_SUCCESS;
   25aa4:	2300      	movs	r3, #0
   25aa6:	77a3      	strb	r3, [r4, #30]
   25aa8:	2301      	movs	r3, #1
   25aaa:	e760      	b.n	2596e <lp_pu_execute_fsm+0x122>
		if (c_to_p_phy) {
   25aac:	f012 0203 	ands.w	r2, r2, #3
   25ab0:	f43f af55 	beq.w	2595e <lp_pu_execute_fsm+0x112>
			lll->phy_rx = c_to_p_phy;
   25ab4:	f362 0302 	bfi	r3, r2, #0, #3
   25ab8:	f886 3077 	strb.w	r3, [r6, #119]	; 0x77
	return ((old_tx != lll->phy_tx) || (old_rx != lll->phy_rx));
   25abc:	4594      	cmp	ip, r2
   25abe:	d1e5      	bne.n	25a8c <lp_pu_execute_fsm+0x240>
   25ac0:	e74d      	b.n	2595e <lp_pu_execute_fsm+0x112>
   25ac2:	458e      	cmp	lr, r1
   25ac4:	d1e2      	bne.n	25a8c <lp_pu_execute_fsm+0x240>
   25ac6:	e74a      	b.n	2595e <lp_pu_execute_fsm+0x112>
   25ac8:	0003a800 	.word	0x0003a800
   25acc:	0003a004 	.word	0x0003a004
   25ad0:	00039f74 	.word	0x00039f74
   25ad4:	0003a848 	.word	0x0003a848
   25ad8:	0003979c 	.word	0x0003979c

00025adc <llcp_lp_pu_rx>:
	switch (pdu->llctrl.opcode) {
   25adc:	f892 c01f 	ldrb.w	ip, [r2, #31]
   25ae0:	f1bc 0f11 	cmp.w	ip, #17
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;
   25ae4:	f102 031c 	add.w	r3, r2, #28
	switch (pdu->llctrl.opcode) {
   25ae8:	d00f      	beq.n	25b0a <llcp_lp_pu_rx+0x2e>
   25aea:	f1bc 0f18 	cmp.w	ip, #24
   25aee:	d012      	beq.n	25b16 <llcp_lp_pu_rx+0x3a>
   25af0:	f1bc 0f07 	cmp.w	ip, #7
   25af4:	d00c      	beq.n	25b10 <llcp_lp_pu_rx+0x34>
{
   25af6:	b510      	push	{r4, lr}
		conn->llcp_terminate.reason_final = BT_HCI_ERR_LMP_PDU_NOT_ALLOWED;
   25af8:	2324      	movs	r3, #36	; 0x24
   25afa:	460c      	mov	r4, r1
   25afc:	f880 3148 	strb.w	r3, [r0, #328]	; 0x148
		llcp_lr_complete(conn);
   25b00:	f002 f8ec 	bl	27cdc <llcp_lr_complete>
		ctx->state = LP_PU_STATE_IDLE;
   25b04:	2300      	movs	r3, #0
   25b06:	72a3      	strb	r3, [r4, #10]
}
   25b08:	bd10      	pop	{r4, pc}
		lp_pu_execute_fsm(conn, ctx, LP_PU_EVT_REJECT, pdu);
   25b0a:	2205      	movs	r2, #5
   25b0c:	f7ff be9e 	b.w	2584c <lp_pu_execute_fsm>
		lp_pu_execute_fsm(conn, ctx, LP_PU_EVT_UNKNOWN, pdu);
   25b10:	2206      	movs	r2, #6
   25b12:	f7ff be9b 	b.w	2584c <lp_pu_execute_fsm>
		lp_pu_execute_fsm(conn, ctx, LP_PU_EVT_PHY_UPDATE_IND, pdu);
   25b16:	2202      	movs	r2, #2
   25b18:	f7ff be98 	b.w	2584c <lp_pu_execute_fsm>

00025b1c <llcp_lp_pu_init_proc>:
	ctx->state = LP_PU_STATE_IDLE;
   25b1c:	2300      	movs	r3, #0
   25b1e:	7283      	strb	r3, [r0, #10]
}
   25b20:	4770      	bx	lr
   25b22:	bf00      	nop

00025b24 <llcp_lp_pu_run>:
{
   25b24:	4613      	mov	r3, r2
	lp_pu_execute_fsm(conn, ctx, LP_PU_EVT_RUN, param);
   25b26:	2200      	movs	r2, #0
   25b28:	f7ff be90 	b.w	2584c <lp_pu_execute_fsm>

00025b2c <llcp_lp_pu_tx_ack>:
{
   25b2c:	4613      	mov	r3, r2
	lp_pu_execute_fsm(conn, ctx, LP_PU_EVT_ACK, param);
   25b2e:	2203      	movs	r2, #3
   25b30:	f7ff be8c 	b.w	2584c <lp_pu_execute_fsm>

00025b34 <llcp_lp_pu_tx_ntf>:
	lp_pu_execute_fsm(conn, ctx, LP_PU_EVT_NTF, NULL);
   25b34:	2300      	movs	r3, #0
   25b36:	2204      	movs	r2, #4
   25b38:	f7ff be88 	b.w	2584c <lp_pu_execute_fsm>

00025b3c <rp_pu_tx_ntf>:
{
   25b3c:	b570      	push	{r4, r5, r6, lr}
	uint8_t ntf_count = ctx->data.pu.ntf_pu + NTF_DLE;
   25b3e:	7f4a      	ldrb	r2, [r1, #29]
   25b40:	f3c2 0300 	ubfx	r3, r2, #0, #1
   25b44:	f3c2 0c40 	ubfx	ip, r2, #1, #1
   25b48:	4463      	add	r3, ip
   25b4a:	b2db      	uxtb	r3, r3
	if ((ntf_count > 1) && !llcp_ntf_alloc_num_available(ntf_count)) {
   25b4c:	2b02      	cmp	r3, #2
{
   25b4e:	460c      	mov	r4, r1
   25b50:	4605      	mov	r5, r0
	if ((ntf_count > 1) && !llcp_ntf_alloc_num_available(ntf_count)) {
   25b52:	d025      	beq.n	25ba0 <rp_pu_tx_ntf+0x64>
	if ((ntf_count > 0) && !llcp_ntf_alloc_num_available(ntf_count)) {
   25b54:	b983      	cbnz	r3, 25b78 <rp_pu_tx_ntf+0x3c>
		if (ctx->data.pu.ntf_pu) {
   25b56:	07d6      	lsls	r6, r2, #31
   25b58:	d428      	bmi.n	25bac <rp_pu_tx_ntf+0x70>
		if (ctx->data.pu.ntf_dle) {
   25b5a:	0793      	lsls	r3, r2, #30
   25b5c:	d502      	bpl.n	25b64 <rp_pu_tx_ntf+0x28>
			pu_dle_ntf(conn, ctx);
   25b5e:	4628      	mov	r0, r5
   25b60:	f7ff fda4 	bl	256ac <pu_dle_ntf.constprop.0>
	llcp_rr_set_paused_cmd(conn, PROC_NONE);
   25b64:	2100      	movs	r1, #0
   25b66:	4628      	mov	r0, r5
   25b68:	f003 fbc0 	bl	292ec <llcp_rr_set_paused_cmd>
	llcp_rr_complete(conn);
   25b6c:	4628      	mov	r0, r5
   25b6e:	f003 fc51 	bl	29414 <llcp_rr_complete>
}
   25b72:	2300      	movs	r3, #0
		ctx->state = RP_PU_STATE_WAIT_NTF;
   25b74:	72a3      	strb	r3, [r4, #10]
}
   25b76:	bd70      	pop	{r4, r5, r6, pc}
   25b78:	2601      	movs	r6, #1
	if ((ntf_count > 0) && !llcp_ntf_alloc_num_available(ntf_count)) {
   25b7a:	4630      	mov	r0, r6
   25b7c:	f000 fd7c 	bl	26678 <llcp_ntf_alloc_num_available>
   25b80:	b158      	cbz	r0, 25b9a <rp_pu_tx_ntf+0x5e>
		if (ctx->data.pu.ntf_pu) {
   25b82:	7f62      	ldrb	r2, [r4, #29]
   25b84:	07d1      	lsls	r1, r2, #31
   25b86:	d5e8      	bpl.n	25b5a <rp_pu_tx_ntf+0x1e>
			pu_ntf(conn, ctx);
   25b88:	4621      	mov	r1, r4
   25b8a:	4628      	mov	r0, r5
   25b8c:	f7ff fc9e 	bl	254cc <pu_ntf>
			if (ntf_count == 1 && NTF_DLE == 1) {
   25b90:	2e01      	cmp	r6, #1
   25b92:	d10f      	bne.n	25bb4 <rp_pu_tx_ntf+0x78>
   25b94:	7f63      	ldrb	r3, [r4, #29]
   25b96:	079a      	lsls	r2, r3, #30
   25b98:	d5e4      	bpl.n	25b64 <rp_pu_tx_ntf+0x28>
		ctx->state = RP_PU_STATE_WAIT_NTF;
   25b9a:	2309      	movs	r3, #9
   25b9c:	72a3      	strb	r3, [r4, #10]
}
   25b9e:	bd70      	pop	{r4, r5, r6, pc}
	if ((ntf_count > 1) && !llcp_ntf_alloc_num_available(ntf_count)) {
   25ba0:	4618      	mov	r0, r3
   25ba2:	f000 fd69 	bl	26678 <llcp_ntf_alloc_num_available>
   25ba6:	1c46      	adds	r6, r0, #1
   25ba8:	b2f6      	uxtb	r6, r6
   25baa:	e7e6      	b.n	25b7a <rp_pu_tx_ntf+0x3e>
			pu_ntf(conn, ctx);
   25bac:	f7ff fc8e 	bl	254cc <pu_ntf>
		if (ctx->data.pu.ntf_dle) {
   25bb0:	7f62      	ldrb	r2, [r4, #29]
   25bb2:	e7d2      	b.n	25b5a <rp_pu_tx_ntf+0x1e>
			if (ntf_count == 1 && NTF_DLE == 1) {
   25bb4:	7f62      	ldrb	r2, [r4, #29]
   25bb6:	e7d0      	b.n	25b5a <rp_pu_tx_ntf+0x1e>

00025bb8 <rp_pu_execute_fsm>:
		break;
	}
}

static void rp_pu_execute_fsm(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
{
   25bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   25bba:	460c      	mov	r4, r1
	switch (ctx->state) {
   25bbc:	7a89      	ldrb	r1, [r1, #10]
{
   25bbe:	b083      	sub	sp, #12
   25bc0:	4606      	mov	r6, r0
   25bc2:	4615      	mov	r5, r2
	switch (ctx->state) {
   25bc4:	2909      	cmp	r1, #9
   25bc6:	d810      	bhi.n	25bea <rp_pu_execute_fsm+0x32>
   25bc8:	e8df f011 	tbh	[pc, r1, lsl #1]
   25bcc:	009800de 	.word	0x009800de
   25bd0:	001e00d4 	.word	0x001e00d4
   25bd4:	000f000f 	.word	0x000f000f
   25bd8:	0061004e 	.word	0x0061004e
   25bdc:	000a008d 	.word	0x000a008d
	switch (evt) {
   25be0:	2d00      	cmp	r5, #0
   25be2:	f000 8083 	beq.w	25cec <rp_pu_execute_fsm+0x134>
		break;
	default:
		/* Unknown state */
		LL_ASSERT(0);
	}
}
   25be6:	b003      	add	sp, #12
   25be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LL_ASSERT(0);
   25bea:	4a88      	ldr	r2, [pc, #544]	; (25e0c <rp_pu_execute_fsm+0x254>)
   25bec:	4988      	ldr	r1, [pc, #544]	; (25e10 <rp_pu_execute_fsm+0x258>)
   25bee:	4889      	ldr	r0, [pc, #548]	; (25e14 <rp_pu_execute_fsm+0x25c>)
   25bf0:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
   25bf4:	f00d fc10 	bl	33418 <assert_print>
   25bf8:	4040      	eors	r0, r0
   25bfa:	f380 8811 	msr	BASEPRI, r0
   25bfe:	f04f 0003 	mov.w	r0, #3
   25c02:	df02      	svc	2
}
   25c04:	b003      	add	sp, #12
   25c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (evt) {
   25c08:	2d02      	cmp	r5, #2
   25c0a:	d1ec      	bne.n	25be6 <rp_pu_execute_fsm+0x2e>
			LL_ASSERT(conn->lll.role == BT_HCI_ROLE_PERIPHERAL);
   25c0c:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   25c10:	2b00      	cmp	r3, #0
   25c12:	db0c      	blt.n	25c2e <rp_pu_execute_fsm+0x76>
   25c14:	4a7d      	ldr	r2, [pc, #500]	; (25e0c <rp_pu_execute_fsm+0x254>)
   25c16:	4980      	ldr	r1, [pc, #512]	; (25e18 <rp_pu_execute_fsm+0x260>)
   25c18:	487e      	ldr	r0, [pc, #504]	; (25e14 <rp_pu_execute_fsm+0x25c>)
   25c1a:	f240 4349 	movw	r3, #1097	; 0x449
   25c1e:	f00d fbfb 	bl	33418 <assert_print>
   25c22:	4040      	eors	r0, r0
   25c24:	f380 8811 	msr	BASEPRI, r0
   25c28:	f04f 0003 	mov.w	r0, #3
   25c2c:	df02      	svc	2
	uint8_t phy_tx_time[8] = { 0,	      PHY_1M,	 PHY_2M,    PHY_1M,
   25c2e:	4b7b      	ldr	r3, [pc, #492]	; (25e1c <rp_pu_execute_fsm+0x264>)
	const uint8_t phys = phy_tx | lll->phy_tx;
   25c30:	f896 2076 	ldrb.w	r2, [r6, #118]	; 0x76
	uint8_t phy_tx_time[8] = { 0,	      PHY_1M,	 PHY_2M,    PHY_1M,
   25c34:	e893 0003 	ldmia.w	r3, {r0, r1}
				conn, pu_select_phy_timing_restrict(conn, ctx->data.pu.tx));
   25c38:	7f23      	ldrb	r3, [r4, #28]
	return phy_tx_time[phys];
   25c3a:	4313      	orrs	r3, r2
	uint8_t phy_tx_time[8] = { 0,	      PHY_1M,	 PHY_2M,    PHY_1M,
   25c3c:	ad02      	add	r5, sp, #8
	return phy_tx_time[phys];
   25c3e:	f003 0307 	and.w	r3, r3, #7
	uint8_t phy_tx_time[8] = { 0,	      PHY_1M,	 PHY_2M,    PHY_1M,
   25c42:	e905 0003 	stmdb	r5, {r0, r1}
	return phy_tx_time[phys];
   25c46:	3308      	adds	r3, #8
   25c48:	446b      	add	r3, sp
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
   25c4a:	2102      	movs	r1, #2
	return phy_tx_time[phys];
   25c4c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
   25c50:	4630      	mov	r0, r6
	lll->phy_tx_time = phy_tx;
   25c52:	f363 1206 	bfi	r2, r3, #4, #3
			ctx->state = RP_PU_STATE_WAIT_RX_PHY_UPDATE_IND;
   25c56:	2306      	movs	r3, #6
	lll->phy_tx_time = phy_tx;
   25c58:	f886 2076 	strb.w	r2, [r6, #118]	; 0x76
			ctx->state = RP_PU_STATE_WAIT_RX_PHY_UPDATE_IND;
   25c5c:	72a3      	strb	r3, [r4, #10]
}
   25c5e:	b003      	add	sp, #12
   25c60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
   25c64:	f000 bd2a 	b.w	266bc <llcp_tx_resume_data>
	switch (evt) {
   25c68:	2d03      	cmp	r5, #3
   25c6a:	d1bc      	bne.n	25be6 <rp_pu_execute_fsm+0x2e>
		llcp_pdu_decode_phy_update_ind(ctx, (struct pdu_data *)param);
   25c6c:	4619      	mov	r1, r3
   25c6e:	4620      	mov	r0, r4
   25c70:	f002 fa56 	bl	28120 <llcp_pdu_decode_phy_update_ind>
		const uint8_t end_procedure = pu_check_update_ind(conn, ctx);
   25c74:	4621      	mov	r1, r4
   25c76:	4630      	mov	r0, r6
   25c78:	f7ff fbfc 	bl	25474 <pu_check_update_ind>
		if (!end_procedure) {
   25c7c:	2800      	cmp	r0, #0
   25c7e:	f000 8096 	beq.w	25dae <rp_pu_execute_fsm+0x1f6>
			if (ctx->data.pu.error == BT_HCI_ERR_INSTANT_PASSED) {
   25c82:	7fa3      	ldrb	r3, [r4, #30]
   25c84:	2b28      	cmp	r3, #40	; 0x28
				conn->llcp_terminate.reason_final = BT_HCI_ERR_INSTANT_PASSED;
   25c86:	bf08      	it	eq
   25c88:	f886 3148 	strbeq.w	r3, [r6, #328]	; 0x148
   25c8c:	e01d      	b.n	25cca <rp_pu_execute_fsm+0x112>
	switch (evt) {
   25c8e:	2d00      	cmp	r5, #0
   25c90:	d1a9      	bne.n	25be6 <rp_pu_execute_fsm+0x2e>
	if (is_instant_reached_or_passed(ctx->data.pu.instant, ull_conn_event_counter(conn))) {
   25c92:	8c27      	ldrh	r7, [r4, #32]
   25c94:	f7ff fa7c 	bl	25190 <ull_conn_event_counter>
   25c98:	1bc0      	subs	r0, r0, r7
   25c9a:	0403      	lsls	r3, r0, #16
   25c9c:	d4a3      	bmi.n	25be6 <rp_pu_execute_fsm+0x2e>
		ctx->data.pu.error = BT_HCI_ERR_SUCCESS;
   25c9e:	77a5      	strb	r5, [r4, #30]
	} else if (lll->role == BT_HCI_ROLE_PERIPHERAL) {
   25ca0:	f996 5039 	ldrsb.w	r5, [r6, #57]	; 0x39
	const uint8_t old_tx = lll->phy_tx;
   25ca4:	f896 0076 	ldrb.w	r0, [r6, #118]	; 0x76
	const uint8_t old_rx = lll->phy_rx;
   25ca8:	f896 3077 	ldrb.w	r3, [r6, #119]	; 0x77
   25cac:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   25cb0:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
	} else if (lll->role == BT_HCI_ROLE_PERIPHERAL) {
   25cb4:	2d00      	cmp	r5, #0
	const uint8_t old_tx = lll->phy_tx;
   25cb6:	f000 0c07 	and.w	ip, r0, #7
	const uint8_t old_rx = lll->phy_rx;
   25cba:	f003 0707 	and.w	r7, r3, #7
	} else if (lll->role == BT_HCI_ROLE_PERIPHERAL) {
   25cbe:	db7c      	blt.n	25dba <rp_pu_execute_fsm+0x202>
{
   25cc0:	2200      	movs	r2, #0
		ctx->data.pu.ntf_pu = phy_changed;
   25cc2:	7f63      	ldrb	r3, [r4, #29]
   25cc4:	f362 0300 	bfi	r3, r2, #0, #1
   25cc8:	7763      	strb	r3, [r4, #29]
	pu_set_timing_restrict(conn, conn->lll.phy_tx);
   25cca:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
   25cce:	f3c3 0202 	ubfx	r2, r3, #0, #3
	lll->phy_tx_time = phy_tx;
   25cd2:	f362 1306 	bfi	r3, r2, #4, #3
   25cd6:	f886 3076 	strb.w	r3, [r6, #118]	; 0x76
	if (ctx->data.pu.ntf_pu) {
   25cda:	7f63      	ldrb	r3, [r4, #29]
   25cdc:	07da      	lsls	r2, r3, #31
   25cde:	d55c      	bpl.n	25d9a <rp_pu_execute_fsm+0x1e2>
		ctx->state = RP_PU_STATE_WAIT_INSTANT_ON_AIR;
   25ce0:	2308      	movs	r3, #8
   25ce2:	72a3      	strb	r3, [r4, #10]
   25ce4:	e77f      	b.n	25be6 <rp_pu_execute_fsm+0x2e>
	switch (evt) {
   25ce6:	2d04      	cmp	r5, #4
   25ce8:	f47f af7d 	bne.w	25be6 <rp_pu_execute_fsm+0x2e>
		rp_pu_tx_ntf(conn, ctx, evt, param);
   25cec:	462a      	mov	r2, r5
   25cee:	4621      	mov	r1, r4
   25cf0:	4630      	mov	r0, r6
}
   25cf2:	b003      	add	sp, #12
   25cf4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		rp_pu_tx_ntf(conn, ctx, evt, param);
   25cf8:	f7ff bf20 	b.w	25b3c <rp_pu_tx_ntf>
	llcp_pdu_decode_phy_req(ctx, (struct pdu_data *)param);
   25cfc:	4619      	mov	r1, r3
   25cfe:	4620      	mov	r0, r4
   25d00:	f002 f9ee 	bl	280e0 <llcp_pdu_decode_phy_req>
	ctx->data.pu.rx &= rx;
   25d04:	7f22      	ldrb	r2, [r4, #28]
	pu_combine_phys(conn, ctx, conn->phy_pref_tx, conn->phy_pref_rx);
   25d06:	f896 318c 	ldrb.w	r3, [r6, #396]	; 0x18c
	ctx->data.pu.rx &= rx;
   25d0a:	f3c2 00c2 	ubfx	r0, r2, #3, #3
	pu_combine_phys(conn, ctx, conn->phy_pref_tx, conn->phy_pref_rx);
   25d0e:	f3c3 01c2 	ubfx	r1, r3, #3, #3
	ctx->data.pu.tx &= tx;
   25d12:	4001      	ands	r1, r0
	pu_combine_phys(conn, ctx, conn->phy_pref_tx, conn->phy_pref_rx);
   25d14:	f3c3 0302 	ubfx	r3, r3, #0, #3
	ctx->data.pu.tx &= tx;
   25d18:	f3c2 0002 	ubfx	r0, r2, #0, #3
   25d1c:	4003      	ands	r3, r0
   25d1e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
   25d22:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
   25d26:	4313      	orrs	r3, r2
   25d28:	7723      	strb	r3, [r4, #28]
	if (conn->lll.role == BT_HCI_ROLE_CENTRAL && (!ctx->data.pu.rx || !ctx->data.pu.tx)) {
   25d2a:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
   25d2e:	2b00      	cmp	r3, #0
   25d30:	db07      	blt.n	25d42 <rp_pu_execute_fsm+0x18a>
   25d32:	7f23      	ldrb	r3, [r4, #28]
   25d34:	f013 0f38 	tst.w	r3, #56	; 0x38
   25d38:	d12c      	bne.n	25d94 <rp_pu_execute_fsm+0x1dc>
		ctx->data.pu.tx = 0;
   25d3a:	7f23      	ldrb	r3, [r4, #28]
   25d3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   25d40:	7723      	strb	r3, [r4, #28]
	llcp_tx_pause_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
   25d42:	2102      	movs	r1, #2
   25d44:	4630      	mov	r0, r6
   25d46:	f000 fca5 	bl	26694 <llcp_tx_pause_data>
	switch (evt) {
   25d4a:	2d01      	cmp	r5, #1
   25d4c:	f47f af4b 	bne.w	25be6 <rp_pu_execute_fsm+0x2e>
		switch (conn->lll.role) {
   25d50:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
   25d54:	09db      	lsrs	r3, r3, #7
   25d56:	d110      	bne.n	25d7a <rp_pu_execute_fsm+0x1c2>
			LL_ASSERT(0);
   25d58:	4a2c      	ldr	r2, [pc, #176]	; (25e0c <rp_pu_execute_fsm+0x254>)
   25d5a:	492d      	ldr	r1, [pc, #180]	; (25e10 <rp_pu_execute_fsm+0x258>)
   25d5c:	482d      	ldr	r0, [pc, #180]	; (25e14 <rp_pu_execute_fsm+0x25c>)
   25d5e:	f240 4329 	movw	r3, #1065	; 0x429
   25d62:	f00d fb59 	bl	33418 <assert_print>
   25d66:	4040      	eors	r0, r0
   25d68:	f380 8811 	msr	BASEPRI, r0
   25d6c:	f04f 0003 	mov.w	r0, #3
   25d70:	df02      	svc	2
   25d72:	e738      	b.n	25be6 <rp_pu_execute_fsm+0x2e>
	switch (evt) {
   25d74:	2d00      	cmp	r5, #0
   25d76:	f47f af36 	bne.w	25be6 <rp_pu_execute_fsm+0x2e>
			rp_pu_send_phy_rsp(conn, ctx, evt, param);
   25d7a:	4621      	mov	r1, r4
   25d7c:	4630      	mov	r0, r6
}
   25d7e:	b003      	add	sp, #12
   25d80:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			rp_pu_send_phy_rsp(conn, ctx, evt, param);
   25d84:	f7ff bc4e 	b.w	25624 <rp_pu_send_phy_rsp.constprop.0>
	switch (evt) {
   25d88:	2d00      	cmp	r5, #0
   25d8a:	f47f af2c 	bne.w	25be6 <rp_pu_execute_fsm+0x2e>
		ctx->state = RP_PU_STATE_WAIT_RX_PHY_REQ;
   25d8e:	2301      	movs	r3, #1
   25d90:	72a3      	strb	r3, [r4, #10]
		break;
   25d92:	e728      	b.n	25be6 <rp_pu_execute_fsm+0x2e>
	if (conn->lll.role == BT_HCI_ROLE_CENTRAL && (!ctx->data.pu.rx || !ctx->data.pu.tx)) {
   25d94:	0759      	lsls	r1, r3, #29
   25d96:	d1d4      	bne.n	25d42 <rp_pu_execute_fsm+0x18a>
   25d98:	e7cf      	b.n	25d3a <rp_pu_execute_fsm+0x182>
	llcp_rr_set_paused_cmd(conn, PROC_NONE);
   25d9a:	2100      	movs	r1, #0
   25d9c:	4630      	mov	r0, r6
   25d9e:	f003 faa5 	bl	292ec <llcp_rr_set_paused_cmd>
	llcp_rr_complete(conn);
   25da2:	4630      	mov	r0, r6
   25da4:	f003 fb36 	bl	29414 <llcp_rr_complete>
	ctx->state = RP_PU_STATE_IDLE;
   25da8:	2300      	movs	r3, #0
   25daa:	72a3      	strb	r3, [r4, #10]
}
   25dac:	e71b      	b.n	25be6 <rp_pu_execute_fsm+0x2e>
			llcp_rr_prt_stop(conn);
   25dae:	4630      	mov	r0, r6
   25db0:	f003 fab8 	bl	29324 <llcp_rr_prt_stop>
			ctx->state = RP_PU_STATE_WAIT_INSTANT;
   25db4:	2307      	movs	r3, #7
   25db6:	72a3      	strb	r3, [r4, #10]
   25db8:	e715      	b.n	25be6 <rp_pu_execute_fsm+0x2e>
		if (p_to_c_phy) {
   25dba:	f011 0103 	ands.w	r1, r1, #3
   25dbe:	d016      	beq.n	25dee <rp_pu_execute_fsm+0x236>
			lll->phy_tx = p_to_c_phy;
   25dc0:	f361 0002 	bfi	r0, r1, #0, #3
		if (c_to_p_phy) {
   25dc4:	f012 0203 	ands.w	r2, r2, #3
			lll->phy_tx = p_to_c_phy;
   25dc8:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
		if (c_to_p_phy) {
   25dcc:	d01a      	beq.n	25e04 <rp_pu_execute_fsm+0x24c>
			lll->phy_rx = c_to_p_phy;
   25dce:	f362 0302 	bfi	r3, r2, #0, #3
	return ((old_tx != lll->phy_tx) || (old_rx != lll->phy_rx));
   25dd2:	458c      	cmp	ip, r1
			lll->phy_rx = c_to_p_phy;
   25dd4:	f886 3077 	strb.w	r3, [r6, #119]	; 0x77
	return ((old_tx != lll->phy_tx) || (old_rx != lll->phy_rx));
   25dd8:	d011      	beq.n	25dfe <rp_pu_execute_fsm+0x246>
			ctx->data.pu.ntf_dle = pu_update_eff_times(conn, ctx);
   25dda:	4621      	mov	r1, r4
   25ddc:	4630      	mov	r0, r6
   25dde:	f7ff fba9 	bl	25534 <pu_update_eff_times>
   25de2:	7f63      	ldrb	r3, [r4, #29]
   25de4:	f360 0341 	bfi	r3, r0, #1, #1
   25de8:	2201      	movs	r2, #1
   25dea:	7763      	strb	r3, [r4, #29]
   25dec:	e769      	b.n	25cc2 <rp_pu_execute_fsm+0x10a>
		if (c_to_p_phy) {
   25dee:	f012 0203 	ands.w	r2, r2, #3
   25df2:	f43f af65 	beq.w	25cc0 <rp_pu_execute_fsm+0x108>
			lll->phy_rx = c_to_p_phy;
   25df6:	f362 0302 	bfi	r3, r2, #0, #3
   25dfa:	f886 3077 	strb.w	r3, [r6, #119]	; 0x77
	return ((old_tx != lll->phy_tx) || (old_rx != lll->phy_rx));
   25dfe:	4297      	cmp	r7, r2
   25e00:	d1eb      	bne.n	25dda <rp_pu_execute_fsm+0x222>
   25e02:	e75d      	b.n	25cc0 <rp_pu_execute_fsm+0x108>
   25e04:	458c      	cmp	ip, r1
   25e06:	d1e8      	bne.n	25dda <rp_pu_execute_fsm+0x222>
   25e08:	e75a      	b.n	25cc0 <rp_pu_execute_fsm+0x108>
   25e0a:	bf00      	nop
   25e0c:	0003a800 	.word	0x0003a800
   25e10:	0003a004 	.word	0x0003a004
   25e14:	00039f74 	.word	0x00039f74
   25e18:	0003a848 	.word	0x0003a848
   25e1c:	0003979c 	.word	0x0003979c

00025e20 <llcp_rp_pu_rx>:

void llcp_rp_pu_rx(struct ll_conn *conn, struct proc_ctx *ctx, struct node_rx_pdu *rx)
{
   25e20:	b510      	push	{r4, lr}
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;

	switch (pdu->llctrl.opcode) {
   25e22:	f892 e01f 	ldrb.w	lr, [r2, #31]
   25e26:	f1be 0f16 	cmp.w	lr, #22
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;
   25e2a:	f102 031c 	add.w	r3, r2, #28
	switch (pdu->llctrl.opcode) {
   25e2e:	d00b      	beq.n	25e48 <llcp_rp_pu_rx+0x28>
   25e30:	f1be 0f18 	cmp.w	lr, #24
   25e34:	d00d      	beq.n	25e52 <llcp_rp_pu_rx+0x32>
		break;
#endif /* CONFIG_BT_PERIPHERAL */
	default:
		/* Invalid behaviour */
		/* Invalid PDU received so terminate connection */
		conn->llcp_terminate.reason_final = BT_HCI_ERR_LMP_PDU_NOT_ALLOWED;
   25e36:	2324      	movs	r3, #36	; 0x24
   25e38:	460c      	mov	r4, r1
   25e3a:	f880 3148 	strb.w	r3, [r0, #328]	; 0x148
		llcp_rr_complete(conn);
   25e3e:	f003 fae9 	bl	29414 <llcp_rr_complete>
		ctx->state = RP_PU_STATE_IDLE;
   25e42:	2300      	movs	r3, #0
   25e44:	72a3      	strb	r3, [r4, #10]
		break;
	}
}
   25e46:	bd10      	pop	{r4, pc}
   25e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rp_pu_execute_fsm(conn, ctx, RP_PU_EVT_PHY_REQ, pdu);
   25e4c:	2201      	movs	r2, #1
   25e4e:	f7ff beb3 	b.w	25bb8 <rp_pu_execute_fsm>
}
   25e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rp_pu_execute_fsm(conn, ctx, RP_PU_EVT_PHY_UPDATE_IND, pdu);
   25e56:	2203      	movs	r2, #3
   25e58:	f7ff beae 	b.w	25bb8 <rp_pu_execute_fsm>

00025e5c <llcp_rp_pu_init_proc>:

void llcp_rp_pu_init_proc(struct proc_ctx *ctx)
   25e5c:	2300      	movs	r3, #0
   25e5e:	7283      	strb	r3, [r0, #10]
   25e60:	4770      	bx	lr
   25e62:	bf00      	nop

00025e64 <llcp_rp_pu_run>:
{
	ctx->state = RP_PU_STATE_IDLE;
}

void llcp_rp_pu_run(struct ll_conn *conn, struct proc_ctx *ctx, void *param)
{
   25e64:	4613      	mov	r3, r2
	rp_pu_execute_fsm(conn, ctx, RP_PU_EVT_RUN, param);
   25e66:	2200      	movs	r2, #0
   25e68:	f7ff bea6 	b.w	25bb8 <rp_pu_execute_fsm>

00025e6c <llcp_rp_pu_tx_ack>:
}

void llcp_rp_pu_tx_ack(struct ll_conn *conn, struct proc_ctx *ctx, void *param)
{
   25e6c:	4613      	mov	r3, r2
	rp_pu_execute_fsm(conn, ctx, RP_PU_EVT_ACK, param);
   25e6e:	2202      	movs	r2, #2
   25e70:	f7ff bea2 	b.w	25bb8 <rp_pu_execute_fsm>

00025e74 <llcp_rp_pu_tx_ntf>:
}

void llcp_rp_pu_tx_ntf(struct ll_conn *conn, struct proc_ctx *ctx)
{
	rp_pu_execute_fsm(conn, ctx, RP_PU_EVT_NTF, NULL);
   25e74:	2300      	movs	r3, #0
   25e76:	2204      	movs	r2, #4
   25e78:	f7ff be9e 	b.w	25bb8 <rp_pu_execute_fsm>

00025e7c <llcp_rp_enc_tx>:
/*
 * LLCP Remote Procedure Encryption FSM
 */

static struct node_tx *llcp_rp_enc_tx(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t opcode)
{
   25e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25e7e:	4606      	mov	r6, r0
   25e80:	460f      	mov	r7, r1
   25e82:	4615      	mov	r5, r2
	struct node_tx *tx;
	struct pdu_data *pdu;

	/* Allocate tx node */
	tx = llcp_tx_alloc(conn, ctx);
   25e84:	f000 fbe4 	bl	26650 <llcp_tx_alloc>
	LL_ASSERT(tx);
   25e88:	4604      	mov	r4, r0
   25e8a:	2800      	cmp	r0, #0
   25e8c:	d039      	beq.n	25f02 <llcp_rp_enc_tx+0x86>

	pdu = (struct pdu_data *)tx->pdu;

	/* Encode LL Control PDU */
	switch (opcode) {
   25e8e:	1f2a      	subs	r2, r5, #4
	pdu = (struct pdu_data *)tx->pdu;
   25e90:	1d20      	adds	r0, r4, #4
	switch (opcode) {
   25e92:	2a09      	cmp	r2, #9
   25e94:	d806      	bhi.n	25ea4 <llcp_rp_enc_tx+0x28>
   25e96:	e8df f002 	tbb	[pc, r2]
   25e9a:	201d      	.short	0x201d
   25e9c:	05050523 	.word	0x05050523
   25ea0:	29052605 	.word	0x29052605
		} else {
			llcp_pdu_encode_reject_ind(pdu, BT_HCI_ERR_PIN_OR_KEY_MISSING);
		}
		break;
	default:
		LL_ASSERT(0);
   25ea4:	4a20      	ldr	r2, [pc, #128]	; (25f28 <llcp_rp_enc_tx+0xac>)
   25ea6:	4921      	ldr	r1, [pc, #132]	; (25f2c <llcp_rp_enc_tx+0xb0>)
   25ea8:	4821      	ldr	r0, [pc, #132]	; (25f30 <llcp_rp_enc_tx+0xb4>)
   25eaa:	f240 23e1 	movw	r3, #737	; 0x2e1
   25eae:	f00d fab3 	bl	33418 <assert_print>
   25eb2:	4040      	eors	r0, r0
   25eb4:	f380 8811 	msr	BASEPRI, r0
   25eb8:	f04f 0003 	mov.w	r0, #3
   25ebc:	df02      	svc	2
	}

	ctx->tx_opcode = pdu->llctrl.opcode;
   25ebe:	79e3      	ldrb	r3, [r4, #7]
   25ec0:	737b      	strb	r3, [r7, #13]

	/* Enqueue LL Control PDU towards LLL */
	llcp_tx_enqueue(conn, tx);
   25ec2:	4621      	mov	r1, r4
   25ec4:	4630      	mov	r0, r6
   25ec6:	f000 fbe1 	bl	2668c <llcp_tx_enqueue>

	/* Restart procedure response timeout timer */
	llcp_rr_prt_restart(conn);
   25eca:	4630      	mov	r0, r6
   25ecc:	f003 fa24 	bl	29318 <llcp_rr_prt_restart>

	return tx;
}
   25ed0:	4620      	mov	r0, r4
   25ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		llcp_pdu_encode_enc_rsp(pdu);
   25ed4:	f002 f898 	bl	28008 <llcp_pdu_encode_enc_rsp>
		break;
   25ed8:	e7f1      	b.n	25ebe <llcp_rp_enc_tx+0x42>
		llcp_pdu_encode_start_enc_req(pdu);
   25eda:	f002 f8ad 	bl	28038 <llcp_pdu_encode_start_enc_req>
		break;
   25ede:	e7ee      	b.n	25ebe <llcp_rp_enc_tx+0x42>
		llcp_pdu_encode_start_enc_rsp(pdu);
   25ee0:	f002 f8b4 	bl	2804c <llcp_pdu_encode_start_enc_rsp>
		break;
   25ee4:	e7eb      	b.n	25ebe <llcp_rp_enc_tx+0x42>
		llcp_pdu_encode_pause_enc_rsp(pdu);
   25ee6:	f002 f8bb 	bl	28060 <llcp_pdu_encode_pause_enc_rsp>
		break;
   25eea:	e7e8      	b.n	25ebe <llcp_rp_enc_tx+0x42>
		if (conn->llcp.fex.valid && feature_ext_rej_ind(conn)) {
   25eec:	f896 3121 	ldrb.w	r3, [r6, #289]	; 0x121
   25ef0:	b11b      	cbz	r3, 25efa <llcp_rp_enc_tx+0x7e>
	return (conn->llcp.fex.features_used & LL_FEAT_BIT_EXT_REJ_IND) != 0;
   25ef2:	f8d6 3130 	ldr.w	r3, [r6, #304]	; 0x130
   25ef6:	075b      	lsls	r3, r3, #29
   25ef8:	d411      	bmi.n	25f1e <llcp_rp_enc_tx+0xa2>
			llcp_pdu_encode_reject_ind(pdu, BT_HCI_ERR_PIN_OR_KEY_MISSING);
   25efa:	2106      	movs	r1, #6
   25efc:	f002 f8ba 	bl	28074 <llcp_pdu_encode_reject_ind>
   25f00:	e7dd      	b.n	25ebe <llcp_rp_enc_tx+0x42>
	LL_ASSERT(tx);
   25f02:	4a09      	ldr	r2, [pc, #36]	; (25f28 <llcp_rp_enc_tx+0xac>)
   25f04:	490b      	ldr	r1, [pc, #44]	; (25f34 <llcp_rp_enc_tx+0xb8>)
   25f06:	480a      	ldr	r0, [pc, #40]	; (25f30 <llcp_rp_enc_tx+0xb4>)
   25f08:	f240 23c6 	movw	r3, #710	; 0x2c6
   25f0c:	f00d fa84 	bl	33418 <assert_print>
   25f10:	4040      	eors	r0, r0
   25f12:	f380 8811 	msr	BASEPRI, r0
   25f16:	f04f 0003 	mov.w	r0, #3
   25f1a:	df02      	svc	2
   25f1c:	e7b7      	b.n	25e8e <llcp_rp_enc_tx+0x12>
			llcp_pdu_encode_reject_ext_ind(pdu, PDU_DATA_LLCTRL_TYPE_ENC_REQ,
   25f1e:	2206      	movs	r2, #6
   25f20:	2103      	movs	r1, #3
   25f22:	f002 f8b3 	bl	2808c <llcp_pdu_encode_reject_ext_ind>
   25f26:	e7ca      	b.n	25ebe <llcp_rp_enc_tx+0x42>
   25f28:	0003a860 	.word	0x0003a860
   25f2c:	0003a004 	.word	0x0003a004
   25f30:	00039f74 	.word	0x00039f74
   25f34:	0003a694 	.word	0x0003a694

00025f38 <rp_enc_ntf_ltk>:

static void rp_enc_ntf_ltk(struct ll_conn *conn, struct proc_ctx *ctx)
{
   25f38:	b570      	push	{r4, r5, r6, lr}
   25f3a:	4606      	mov	r6, r0
   25f3c:	460d      	mov	r5, r1
	struct node_rx_pdu *ntf;
	struct pdu_data *pdu;

	/* Allocate ntf node */
	ntf = llcp_ntf_alloc();
   25f3e:	f000 fba3 	bl	26688 <llcp_ntf_alloc>
	LL_ASSERT(ntf);
   25f42:	4604      	mov	r4, r0
   25f44:	b170      	cbz	r0, 25f64 <rp_enc_ntf_ltk+0x2c>

	ntf->hdr.type = NODE_RX_TYPE_DC_PDU;
   25f46:	2303      	movs	r3, #3
   25f48:	7123      	strb	r3, [r4, #4]
	ntf->hdr.handle = conn->lll.handle;
   25f4a:	8d33      	ldrh	r3, [r6, #40]	; 0x28
   25f4c:	80e3      	strh	r3, [r4, #6]
	pdu = (struct pdu_data *)ntf->pdu;

	llcp_ntf_encode_enc_req(ctx, pdu);
   25f4e:	4628      	mov	r0, r5
   25f50:	f104 011c 	add.w	r1, r4, #28
   25f54:	f002 f840 	bl	27fd8 <llcp_ntf_encode_enc_req>

	/* Enqueue notification towards LL */
	ll_rx_put_sched(ntf->hdr.link, ntf);
   25f58:	6820      	ldr	r0, [r4, #0]
   25f5a:	4621      	mov	r1, r4
}
   25f5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_rx_put_sched(ntf->hdr.link, ntf);
   25f60:	f7fc bde4 	b.w	22b2c <ll_rx_put_sched>
	LL_ASSERT(ntf);
   25f64:	4a06      	ldr	r2, [pc, #24]	; (25f80 <rp_enc_ntf_ltk+0x48>)
   25f66:	4907      	ldr	r1, [pc, #28]	; (25f84 <rp_enc_ntf_ltk+0x4c>)
   25f68:	4807      	ldr	r0, [pc, #28]	; (25f88 <rp_enc_ntf_ltk+0x50>)
   25f6a:	f240 23f6 	movw	r3, #758	; 0x2f6
   25f6e:	f00d fa53 	bl	33418 <assert_print>
   25f72:	4040      	eors	r0, r0
   25f74:	f380 8811 	msr	BASEPRI, r0
   25f78:	f04f 0003 	mov.w	r0, #3
   25f7c:	df02      	svc	2
   25f7e:	e7e2      	b.n	25f46 <rp_enc_ntf_ltk+0xe>
   25f80:	0003a860 	.word	0x0003a860
   25f84:	0003a844 	.word	0x0003a844
   25f88:	00039f74 	.word	0x00039f74

00025f8c <rp_enc_send_start_enc_req.part.0>:
		rp_enc_store_s(conn, ctx, (struct pdu_data *)tx->pdu);
		rp_enc_send_ltk_ntf(conn, ctx, evt, param);
	}
}

static void rp_enc_send_start_enc_req(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
   25f8c:	b570      	push	{r4, r5, r6, lr}
   25f8e:	460d      	mov	r5, r1
	ecb_encrypt(&ctx->data.enc.ltk[0], &ctx->data.enc.skd[0], NULL, &conn->lll.ccm_rx.key[0]);
   25f90:	f100 068f 	add.w	r6, r0, #143	; 0x8f
static void rp_enc_send_start_enc_req(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
   25f94:	4604      	mov	r4, r0
	ecb_encrypt(&ctx->data.enc.ltk[0], &ctx->data.enc.skd[0], NULL, &conn->lll.ccm_rx.key[0]);
   25f96:	4633      	mov	r3, r6
   25f98:	2200      	movs	r2, #0
   25f9a:	3137      	adds	r1, #55	; 0x37
   25f9c:	f105 0027 	add.w	r0, r5, #39	; 0x27
   25fa0:	f006 fd28 	bl	2c9f4 <ecb_encrypt>
	memcpy(&conn->lll.ccm_tx.key[0], &conn->lll.ccm_rx.key[0], sizeof(conn->lll.ccm_tx.key));
   25fa4:	2210      	movs	r2, #16
   25fa6:	4631      	mov	r1, r6
   25fa8:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   25fac:	f00f fac3 	bl	35536 <memcpy>
	memcpy(&conn->lll.ccm_tx.iv[0], &conn->lll.ccm_rx.iv[0], sizeof(conn->lll.ccm_tx.iv));
   25fb0:	2208      	movs	r2, #8
   25fb2:	f104 01a8 	add.w	r1, r4, #168	; 0xa8
   25fb6:	f104 00c9 	add.w	r0, r4, #201	; 0xc9
   25fba:	f00f fabc 	bl	35536 <memcpy>
	conn->lll.ccm_tx.counter = 0U;
   25fbe:	2000      	movs	r0, #0
   25fc0:	2100      	movs	r1, #0
		conn->lll.ccm_rx.direction = 1U;
   25fc2:	f894 20a7 	ldrb.w	r2, [r4, #167]	; 0xa7
	conn->lll.ccm_tx.counter = 0U;
   25fc6:	e9c4 0130 	strd	r0, r1, [r4, #192]	; 0xc0
		conn->lll.ccm_tx.direction = 0U;
   25fca:	f894 10c8 	ldrb.w	r1, [r4, #200]	; 0xc8
	conn->lll.ccm_rx.counter = 0U;
   25fce:	2300      	movs	r3, #0
		conn->lll.ccm_tx.direction = 0U;
   25fd0:	f363 0100 	bfi	r1, r3, #0, #1
	conn->lll.ccm_rx.counter = 0U;
   25fd4:	f884 309f 	strb.w	r3, [r4, #159]	; 0x9f
   25fd8:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
   25fdc:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
   25fe0:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
   25fe4:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
   25fe8:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
   25fec:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
   25ff0:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
		conn->lll.ccm_rx.direction = 1U;
   25ff4:	f042 0301 	orr.w	r3, r2, #1
		conn->lll.ccm_tx.direction = 0U;
   25ff8:	f884 10c8 	strb.w	r1, [r4, #200]	; 0xc8
		conn->lll.ccm_rx.direction = 1U;
   25ffc:	f884 30a7 	strb.w	r3, [r4, #167]	; 0xa7
{
	if (!llcp_tx_alloc_peek(conn, ctx)) {
		ctx->state = RP_ENC_STATE_WAIT_TX_START_ENC_REQ;
	} else {
		enc_setup_lll(conn, ctx, BT_HCI_ROLE_PERIPHERAL);
		llcp_rp_enc_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_START_ENC_REQ);
   26000:	2205      	movs	r2, #5
   26002:	4629      	mov	r1, r5
   26004:	4620      	mov	r0, r4
   26006:	f7ff ff39 	bl	25e7c <llcp_rp_enc_tx>
		/* Wait for the LL_START_ENC_RSP */
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
		ctx->state = RP_ENC_STATE_WAIT_RX_START_ENC_RSP;
   2600a:	f240 6307 	movw	r3, #1543	; 0x607
   2600e:	816b      	strh	r3, [r5, #10]

		/* Rx Decryption enabled */
		conn->lll.enc_rx = 1U;
   26010:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
   26014:	f043 0308 	orr.w	r3, r3, #8
   26018:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
	}
}
   2601c:	bd70      	pop	{r4, r5, r6, pc}
   2601e:	bf00      	nop

00026020 <rp_enc_send_enc_rsp.part.0.isra.0>:
static void rp_enc_send_enc_rsp(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
   26020:	b570      	push	{r4, r5, r6, lr}
		tx = llcp_rp_enc_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_ENC_RSP);
   26022:	2204      	movs	r2, #4
static void rp_enc_send_enc_rsp(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
   26024:	460c      	mov	r4, r1
   26026:	4606      	mov	r6, r0
		tx = llcp_rp_enc_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_ENC_RSP);
   26028:	f7ff ff28 	bl	25e7c <llcp_rp_enc_tx>
	memcpy(&ctx->data.enc.skds, pdu->llctrl.enc_rsp.skds, sizeof(pdu->llctrl.enc_rsp.skds));
   2602c:	2208      	movs	r2, #8
   2602e:	1881      	adds	r1, r0, r2
		tx = llcp_rp_enc_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_ENC_RSP);
   26030:	4605      	mov	r5, r0
	memcpy(&ctx->data.enc.skds, pdu->llctrl.enc_rsp.skds, sizeof(pdu->llctrl.enc_rsp.skds));
   26032:	f104 003f 	add.w	r0, r4, #63	; 0x3f
   26036:	f00f fa7e 	bl	35536 <memcpy>
	memcpy(&conn->lll.ccm_rx.iv[4], pdu->llctrl.enc_rsp.ivs, sizeof(pdu->llctrl.enc_rsp.ivs));
   2603a:	2204      	movs	r2, #4
   2603c:	f105 0110 	add.w	r1, r5, #16
   26040:	f106 00ac 	add.w	r0, r6, #172	; 0xac
   26044:	f00f fa77 	bl	35536 <memcpy>
	if (!llcp_ntf_alloc_is_available()) {
   26048:	f000 fb0e 	bl	26668 <llcp_ntf_alloc_is_available>
   2604c:	b910      	cbnz	r0, 26054 <rp_enc_send_enc_rsp.part.0.isra.0+0x34>
   2604e:	2303      	movs	r3, #3
		ctx->state = RP_ENC_STATE_WAIT_NTF_LTK_REQ;
   26050:	72a3      	strb	r3, [r4, #10]
}
   26052:	bd70      	pop	{r4, r5, r6, pc}
		rp_enc_ntf_ltk(conn, ctx);
   26054:	4621      	mov	r1, r4
   26056:	4630      	mov	r0, r6
   26058:	f7ff ff6e 	bl	25f38 <rp_enc_ntf_ltk>
}
   2605c:	2304      	movs	r3, #4
		ctx->state = RP_ENC_STATE_WAIT_NTF_LTK_REQ;
   2605e:	72a3      	strb	r3, [r4, #10]
}
   26060:	bd70      	pop	{r4, r5, r6, pc}
   26062:	bf00      	nop

00026064 <rp_enc_complete.isra.0>:
static void rp_enc_complete(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
   26064:	b570      	push	{r4, r5, r6, lr}
   26066:	4605      	mov	r5, r0
   26068:	460c      	mov	r4, r1
	if (!llcp_ntf_alloc_is_available()) {
   2606a:	f000 fafd 	bl	26668 <llcp_ntf_alloc_is_available>
   2606e:	b910      	cbnz	r0, 26076 <rp_enc_complete.isra.0+0x12>
		ctx->state = RP_ENC_STATE_WAIT_NTF;
   26070:	2308      	movs	r3, #8
   26072:	72a3      	strb	r3, [r4, #10]
}
   26074:	bd70      	pop	{r4, r5, r6, pc}
	ntf = llcp_ntf_alloc();
   26076:	f000 fb07 	bl	26688 <llcp_ntf_alloc>
	LL_ASSERT(ntf);
   2607a:	4606      	mov	r6, r0
   2607c:	2800      	cmp	r0, #0
   2607e:	d044      	beq.n	2610a <rp_enc_complete.isra.0+0xa6>
	ntf->hdr.type = NODE_RX_TYPE_DC_PDU;
   26080:	2303      	movs	r3, #3
   26082:	7133      	strb	r3, [r6, #4]
	ntf->hdr.handle = conn->lll.handle;
   26084:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
   26086:	80f3      	strh	r3, [r6, #6]
	if (ctx->proc == PROC_ENCRYPTION_START) {
   26088:	7a23      	ldrb	r3, [r4, #8]
   2608a:	2b05      	cmp	r3, #5
   2608c:	d038      	beq.n	26100 <rp_enc_complete.isra.0+0x9c>
	} else if (ctx->proc == PROC_ENCRYPTION_PAUSE) {
   2608e:	2b06      	cmp	r3, #6
   26090:	d10d      	bne.n	260ae <rp_enc_complete.isra.0+0x4a>
		ntf->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   26092:	231a      	movs	r3, #26
   26094:	7133      	strb	r3, [r6, #4]
	ll_rx_put_sched(ntf->hdr.link, ntf);
   26096:	6830      	ldr	r0, [r6, #0]
   26098:	4631      	mov	r1, r6
   2609a:	f7fc fd47 	bl	22b2c <ll_rx_put_sched>
}

static void rp_enc_send_start_enc_rsp(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
				      void *param)
{
	if (!llcp_tx_alloc_peek(conn, ctx)) {
   2609e:	4621      	mov	r1, r4
   260a0:	4628      	mov	r0, r5
   260a2:	f000 facd 	bl	26640 <llcp_tx_alloc_peek>
   260a6:	b980      	cbnz	r0, 260ca <rp_enc_complete.isra.0+0x66>
		ctx->state = RP_ENC_STATE_WAIT_TX_START_ENC_RSP;
   260a8:	2309      	movs	r3, #9
   260aa:	72a3      	strb	r3, [r4, #10]
}
   260ac:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(0);
   260ae:	4a1e      	ldr	r2, [pc, #120]	; (26128 <rp_enc_complete.isra.0+0xc4>)
   260b0:	491e      	ldr	r1, [pc, #120]	; (2612c <rp_enc_complete.isra.0+0xc8>)
   260b2:	481f      	ldr	r0, [pc, #124]	; (26130 <rp_enc_complete.isra.0+0xcc>)
   260b4:	f44f 7346 	mov.w	r3, #792	; 0x318
   260b8:	f00d f9ae 	bl	33418 <assert_print>
   260bc:	4040      	eors	r0, r0
   260be:	f380 8811 	msr	BASEPRI, r0
   260c2:	f04f 0003 	mov.w	r0, #3
   260c6:	df02      	svc	2
   260c8:	e7e5      	b.n	26096 <rp_enc_complete.isra.0+0x32>
	} else {
		llcp_rp_enc_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_START_ENC_RSP);
   260ca:	2206      	movs	r2, #6
   260cc:	4621      	mov	r1, r4
   260ce:	4628      	mov	r0, r5
   260d0:	f7ff fed4 	bl	25e7c <llcp_rp_enc_tx>
		llcp_rr_complete(conn);
   260d4:	4628      	mov	r0, r5
   260d6:	f003 f99d 	bl	29414 <llcp_rr_complete>
		ctx->state = RP_ENC_STATE_UNENCRYPTED;
   260da:	2300      	movs	r3, #0
   260dc:	72a3      	strb	r3, [r4, #10]

		/* Resume Tx data */
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_ENCRYPTION);
   260de:	2101      	movs	r1, #1
   260e0:	4628      	mov	r0, r5
   260e2:	f000 faeb 	bl	266bc <llcp_tx_resume_data>
		/* Resume Rx data */
		ull_conn_resume_rx_data(conn);
   260e6:	4628      	mov	r0, r5
   260e8:	f7ff f84a 	bl	25180 <ull_conn_resume_rx_data>

		/* Resume possibly paused local procedure */
		llcp_lr_resume(conn);
   260ec:	4628      	mov	r0, r5
   260ee:	f001 fd6d 	bl	27bcc <llcp_lr_resume>

		/* Tx Encryption enabled */
		conn->lll.enc_tx = 1U;
   260f2:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   260f6:	f043 0310 	orr.w	r3, r3, #16
   260fa:	f885 308e 	strb.w	r3, [r5, #142]	; 0x8e
}
   260fe:	bd70      	pop	{r4, r5, r6, pc}
		llcp_pdu_encode_start_enc_rsp(pdu);
   26100:	f106 001c 	add.w	r0, r6, #28
   26104:	f001 ffa2 	bl	2804c <llcp_pdu_encode_start_enc_rsp>
   26108:	e7c5      	b.n	26096 <rp_enc_complete.isra.0+0x32>
	LL_ASSERT(ntf);
   2610a:	4a07      	ldr	r2, [pc, #28]	; (26128 <rp_enc_complete.isra.0+0xc4>)
   2610c:	4909      	ldr	r1, [pc, #36]	; (26134 <rp_enc_complete.isra.0+0xd0>)
   2610e:	4808      	ldr	r0, [pc, #32]	; (26130 <rp_enc_complete.isra.0+0xcc>)
   26110:	f240 3309 	movw	r3, #777	; 0x309
   26114:	f00d f980 	bl	33418 <assert_print>
   26118:	4040      	eors	r0, r0
   2611a:	f380 8811 	msr	BASEPRI, r0
   2611e:	f04f 0003 	mov.w	r0, #3
   26122:	df02      	svc	2
   26124:	e7ac      	b.n	26080 <rp_enc_complete.isra.0+0x1c>
   26126:	bf00      	nop
   26128:	0003a860 	.word	0x0003a860
   2612c:	0003a004 	.word	0x0003a004
   26130:	00039f74 	.word	0x00039f74
   26134:	0003a844 	.word	0x0003a844

00026138 <rp_enc_execute_fsm>:
		break;
	}
}

static void rp_enc_execute_fsm(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
{
   26138:	b570      	push	{r4, r5, r6, lr}
   2613a:	460c      	mov	r4, r1
	switch (ctx->state) {
   2613c:	7a89      	ldrb	r1, [r1, #10]
{
   2613e:	b082      	sub	sp, #8
   26140:	4606      	mov	r6, r0
   26142:	4615      	mov	r5, r2
	switch (ctx->state) {
   26144:	290d      	cmp	r1, #13
   26146:	f200 80fa 	bhi.w	2633e <rp_enc_execute_fsm+0x206>
   2614a:	e8df f001 	tbb	[pc, r1]
   2614e:	1713      	.short	0x1713
   26150:	3e251b32 	.word	0x3e251b32
   26154:	58554c49 	.word	0x58554c49
   26158:	07786762 	.word	0x07786762
	switch (evt) {
   2615c:	2d08      	cmp	r5, #8
   2615e:	d10f      	bne.n	26180 <rp_enc_execute_fsm+0x48>
		ctx->state = RP_ENC_STATE_WAIT_RX_ENC_REQ;
   26160:	f240 3301 	movw	r3, #769	; 0x301
   26164:	8163      	strh	r3, [r4, #10]
		conn->lll.enc_tx = 0U;
   26166:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
   2616a:	f36f 1304 	bfc	r3, #4, #1
   2616e:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
		break;
   26172:	e005      	b.n	26180 <rp_enc_execute_fsm+0x48>
	switch (evt) {
   26174:	b925      	cbnz	r5, 26180 <rp_enc_execute_fsm+0x48>
		ctx->state = RP_ENC_STATE_WAIT_RX_ENC_REQ;
   26176:	2301      	movs	r3, #1
   26178:	72a3      	strb	r3, [r4, #10]
		break;
   2617a:	e001      	b.n	26180 <rp_enc_execute_fsm+0x48>
	switch (evt) {
   2617c:	2d01      	cmp	r5, #1
   2617e:	d07f      	beq.n	26280 <rp_enc_execute_fsm+0x148>
		break;
	default:
		/* Unknown state */
		LL_ASSERT(0);
	}
}
   26180:	b002      	add	sp, #8
   26182:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   26184:	2d00      	cmp	r5, #0
   26186:	d1fb      	bne.n	26180 <rp_enc_execute_fsm+0x48>
	if (!llcp_ntf_alloc_is_available()) {
   26188:	f000 fa6e 	bl	26668 <llcp_ntf_alloc_is_available>
   2618c:	2800      	cmp	r0, #0
   2618e:	f040 80b5 	bne.w	262fc <rp_enc_execute_fsm+0x1c4>
		ctx->state = RP_ENC_STATE_WAIT_NTF_LTK_REQ;
   26192:	2303      	movs	r3, #3
   26194:	72a3      	strb	r3, [r4, #10]
   26196:	e7f3      	b.n	26180 <rp_enc_execute_fsm+0x48>
	switch (evt) {
   26198:	2d03      	cmp	r5, #3
   2619a:	d018      	beq.n	261ce <rp_enc_execute_fsm+0x96>
   2619c:	2d04      	cmp	r5, #4
   2619e:	d1ef      	bne.n	26180 <rp_enc_execute_fsm+0x48>
	if (!llcp_tx_alloc_peek(conn, ctx)) {
   261a0:	4621      	mov	r1, r4
   261a2:	4630      	mov	r0, r6
   261a4:	f000 fa4c 	bl	26640 <llcp_tx_alloc_peek>
   261a8:	2800      	cmp	r0, #0
   261aa:	d152      	bne.n	26252 <rp_enc_execute_fsm+0x11a>
		ctx->state = RP_ENC_STATE_WAIT_TX_REJECT_IND;
   261ac:	2306      	movs	r3, #6
   261ae:	72a3      	strb	r3, [r4, #10]
   261b0:	e7e6      	b.n	26180 <rp_enc_execute_fsm+0x48>
	switch (evt) {
   261b2:	2d00      	cmp	r5, #0
   261b4:	d1e4      	bne.n	26180 <rp_enc_execute_fsm+0x48>
	if (!llcp_tx_alloc_peek(conn, ctx)) {
   261b6:	4621      	mov	r1, r4
   261b8:	4630      	mov	r0, r6
   261ba:	f000 fa41 	bl	26640 <llcp_tx_alloc_peek>
   261be:	2800      	cmp	r0, #0
   261c0:	f040 8095 	bne.w	262ee <rp_enc_execute_fsm+0x1b6>
		ctx->state = RP_ENC_STATE_WAIT_TX_ENC_RSP;
   261c4:	2302      	movs	r3, #2
   261c6:	72a3      	strb	r3, [r4, #10]
   261c8:	e7da      	b.n	26180 <rp_enc_execute_fsm+0x48>
	switch (evt) {
   261ca:	2d00      	cmp	r5, #0
   261cc:	d1d8      	bne.n	26180 <rp_enc_execute_fsm+0x48>
	if (!llcp_tx_alloc_peek(conn, ctx)) {
   261ce:	4621      	mov	r1, r4
   261d0:	4630      	mov	r0, r6
   261d2:	f000 fa35 	bl	26640 <llcp_tx_alloc_peek>
   261d6:	2800      	cmp	r0, #0
   261d8:	d134      	bne.n	26244 <rp_enc_execute_fsm+0x10c>
		ctx->state = RP_ENC_STATE_WAIT_TX_START_ENC_REQ;
   261da:	2305      	movs	r3, #5
   261dc:	72a3      	strb	r3, [r4, #10]
   261de:	e7cf      	b.n	26180 <rp_enc_execute_fsm+0x48>
	switch (evt) {
   261e0:	2d00      	cmp	r5, #0
   261e2:	d1cd      	bne.n	26180 <rp_enc_execute_fsm+0x48>
   261e4:	e7dc      	b.n	261a0 <rp_enc_execute_fsm+0x68>
	switch (evt) {
   261e6:	2d02      	cmp	r5, #2
   261e8:	d1ca      	bne.n	26180 <rp_enc_execute_fsm+0x48>
		rp_enc_complete(conn, ctx, evt, param);
   261ea:	4621      	mov	r1, r4
   261ec:	4630      	mov	r0, r6
}
   261ee:	b002      	add	sp, #8
   261f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rp_enc_complete(conn, ctx, evt, param);
   261f4:	f7ff bf36 	b.w	26064 <rp_enc_complete.isra.0>
	switch (evt) {
   261f8:	2d00      	cmp	r5, #0
   261fa:	d1c1      	bne.n	26180 <rp_enc_execute_fsm+0x48>
   261fc:	e7f5      	b.n	261ea <rp_enc_execute_fsm+0xb2>
	switch (evt) {
   261fe:	2d00      	cmp	r5, #0
   26200:	d1be      	bne.n	26180 <rp_enc_execute_fsm+0x48>
	if (!llcp_tx_alloc_peek(conn, ctx)) {
   26202:	4621      	mov	r1, r4
   26204:	f000 fa1c 	bl	26640 <llcp_tx_alloc_peek>
   26208:	2800      	cmp	r0, #0
   2620a:	d17e      	bne.n	2630a <rp_enc_execute_fsm+0x1d2>
		ctx->state = RP_ENC_STATE_WAIT_TX_START_ENC_RSP;
   2620c:	2309      	movs	r3, #9
   2620e:	72a3      	strb	r3, [r4, #10]
   26210:	e7b6      	b.n	26180 <rp_enc_execute_fsm+0x48>
	switch (evt) {
   26212:	2d00      	cmp	r5, #0
   26214:	d1b4      	bne.n	26180 <rp_enc_execute_fsm+0x48>
		ctx->state = RP_ENC_STATE_WAIT_RX_PAUSE_ENC_REQ;
   26216:	230b      	movs	r3, #11
   26218:	72a3      	strb	r3, [r4, #10]
		break;
   2621a:	e7b1      	b.n	26180 <rp_enc_execute_fsm+0x48>
	switch (evt) {
   2621c:	2d07      	cmp	r5, #7
   2621e:	d1af      	bne.n	26180 <rp_enc_execute_fsm+0x48>
		llcp_tx_pause_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_ENCRYPTION);
   26220:	2101      	movs	r1, #1
   26222:	f000 fa37 	bl	26694 <llcp_tx_pause_data>
		ull_conn_pause_rx_data(conn);
   26226:	4630      	mov	r0, r6
   26228:	f7fe ffa2 	bl	25170 <ull_conn_pause_rx_data>
	if (!llcp_tx_alloc_peek(conn, ctx)) {
   2622c:	4621      	mov	r1, r4
   2622e:	4630      	mov	r0, r6
   26230:	f000 fa06 	bl	26640 <llcp_tx_alloc_peek>
   26234:	2800      	cmp	r0, #0
   26236:	d14b      	bne.n	262d0 <rp_enc_execute_fsm+0x198>
		ctx->state = RP_ENC_STATE_WAIT_TX_PAUSE_ENC_RSP;
   26238:	230c      	movs	r3, #12
   2623a:	72a3      	strb	r3, [r4, #10]
   2623c:	e7a0      	b.n	26180 <rp_enc_execute_fsm+0x48>
	switch (evt) {
   2623e:	2d00      	cmp	r5, #0
   26240:	d19e      	bne.n	26180 <rp_enc_execute_fsm+0x48>
   26242:	e7f3      	b.n	2622c <rp_enc_execute_fsm+0xf4>
   26244:	4621      	mov	r1, r4
   26246:	4630      	mov	r0, r6
}
   26248:	b002      	add	sp, #8
   2624a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2624e:	f7ff be9d 	b.w	25f8c <rp_enc_send_start_enc_req.part.0>
		llcp_rp_enc_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_REJECT_IND);
   26252:	220d      	movs	r2, #13
   26254:	4621      	mov	r1, r4
   26256:	4630      	mov	r0, r6
   26258:	f7ff fe10 	bl	25e7c <llcp_rp_enc_tx>
		llcp_rr_complete(conn);
   2625c:	4630      	mov	r0, r6
   2625e:	f003 f8d9 	bl	29414 <llcp_rr_complete>
		ctx->state = RP_ENC_STATE_UNENCRYPTED;
   26262:	2300      	movs	r3, #0
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_ENCRYPTION);
   26264:	2101      	movs	r1, #1
		ctx->state = RP_ENC_STATE_UNENCRYPTED;
   26266:	72a3      	strb	r3, [r4, #10]
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_ENCRYPTION);
   26268:	4630      	mov	r0, r6
   2626a:	f000 fa27 	bl	266bc <llcp_tx_resume_data>
		ull_conn_resume_rx_data(conn);
   2626e:	4630      	mov	r0, r6
   26270:	f7fe ff86 	bl	25180 <ull_conn_resume_rx_data>
		llcp_lr_resume(conn);
   26274:	4630      	mov	r0, r6
}
   26276:	b002      	add	sp, #8
   26278:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		llcp_lr_resume(conn);
   2627c:	f001 bca6 	b.w	27bcc <llcp_lr_resume>
		llcp_tx_pause_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_ENCRYPTION);
   26280:	4629      	mov	r1, r5
   26282:	9301      	str	r3, [sp, #4]
   26284:	f000 fa06 	bl	26694 <llcp_tx_pause_data>
		ull_conn_pause_rx_data(conn);
   26288:	4630      	mov	r0, r6
   2628a:	f7fe ff71 	bl	25170 <ull_conn_pause_rx_data>
		llcp_lr_pause(conn);
   2628e:	4630      	mov	r0, r6
   26290:	f001 fc98 	bl	27bc4 <llcp_lr_pause>
	memcpy(ctx->data.enc.rand, pdu->llctrl.enc_req.rand, sizeof(ctx->data.enc.rand));
   26294:	9b01      	ldr	r3, [sp, #4]
   26296:	2208      	movs	r2, #8
   26298:	1d19      	adds	r1, r3, #4
   2629a:	f104 001d 	add.w	r0, r4, #29
   2629e:	f00f f94a 	bl	35536 <memcpy>
	ctx->data.enc.ediv[0] = pdu->llctrl.enc_req.ediv[0];
   262a2:	9b01      	ldr	r3, [sp, #4]
   262a4:	7b1a      	ldrb	r2, [r3, #12]
   262a6:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	ctx->data.enc.ediv[1] = pdu->llctrl.enc_req.ediv[1];
   262aa:	7b59      	ldrb	r1, [r3, #13]
   262ac:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
	memcpy(&ctx->data.enc.skdm, pdu->llctrl.enc_req.skdm, sizeof(ctx->data.enc.skdm));
   262b0:	2208      	movs	r2, #8
   262b2:	f103 010e 	add.w	r1, r3, #14
   262b6:	f104 0037 	add.w	r0, r4, #55	; 0x37
   262ba:	f00f f93c 	bl	35536 <memcpy>
	memcpy(&conn->lll.ccm_rx.iv[0], pdu->llctrl.enc_req.ivm, sizeof(pdu->llctrl.enc_req.ivm));
   262be:	9b01      	ldr	r3, [sp, #4]
   262c0:	2204      	movs	r2, #4
   262c2:	f103 0116 	add.w	r1, r3, #22
   262c6:	f106 00a8 	add.w	r0, r6, #168	; 0xa8
   262ca:	f00f f934 	bl	35536 <memcpy>
   262ce:	e772      	b.n	261b6 <rp_enc_execute_fsm+0x7e>
		llcp_rp_enc_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP);
   262d0:	220b      	movs	r2, #11
   262d2:	4621      	mov	r1, r4
   262d4:	4630      	mov	r0, r6
   262d6:	f7ff fdd1 	bl	25e7c <llcp_rp_enc_tx>
		ctx->state = RP_ENC_STATE_WAIT_RX_PAUSE_ENC_RSP;
   262da:	f640 330d 	movw	r3, #2829	; 0xb0d
   262de:	8163      	strh	r3, [r4, #10]
		conn->lll.enc_rx = 0U;
   262e0:	f896 308e 	ldrb.w	r3, [r6, #142]	; 0x8e
   262e4:	f36f 03c3 	bfc	r3, #3, #1
   262e8:	f886 308e 	strb.w	r3, [r6, #142]	; 0x8e
}
   262ec:	e748      	b.n	26180 <rp_enc_execute_fsm+0x48>
   262ee:	4621      	mov	r1, r4
   262f0:	4630      	mov	r0, r6
}
   262f2:	b002      	add	sp, #8
   262f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   262f8:	f7ff be92 	b.w	26020 <rp_enc_send_enc_rsp.part.0.isra.0>
		rp_enc_ntf_ltk(conn, ctx);
   262fc:	4621      	mov	r1, r4
   262fe:	4630      	mov	r0, r6
   26300:	f7ff fe1a 	bl	25f38 <rp_enc_ntf_ltk>
		ctx->state = RP_ENC_STATE_WAIT_LTK_REPLY;
   26304:	2304      	movs	r3, #4
   26306:	72a3      	strb	r3, [r4, #10]
}
   26308:	e73a      	b.n	26180 <rp_enc_execute_fsm+0x48>
		llcp_rp_enc_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_START_ENC_RSP);
   2630a:	2206      	movs	r2, #6
   2630c:	4621      	mov	r1, r4
   2630e:	4630      	mov	r0, r6
   26310:	f7ff fdb4 	bl	25e7c <llcp_rp_enc_tx>
		llcp_rr_complete(conn);
   26314:	4630      	mov	r0, r6
   26316:	f003 f87d 	bl	29414 <llcp_rr_complete>
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_ENCRYPTION);
   2631a:	2101      	movs	r1, #1
   2631c:	4630      	mov	r0, r6
		ctx->state = RP_ENC_STATE_UNENCRYPTED;
   2631e:	72a5      	strb	r5, [r4, #10]
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_ENCRYPTION);
   26320:	f000 f9cc 	bl	266bc <llcp_tx_resume_data>
		ull_conn_resume_rx_data(conn);
   26324:	4630      	mov	r0, r6
   26326:	f7fe ff2b 	bl	25180 <ull_conn_resume_rx_data>
		llcp_lr_resume(conn);
   2632a:	4630      	mov	r0, r6
   2632c:	f001 fc4e 	bl	27bcc <llcp_lr_resume>
		conn->lll.enc_tx = 1U;
   26330:	f896 308e 	ldrb.w	r3, [r6, #142]	; 0x8e
   26334:	f043 0310 	orr.w	r3, r3, #16
   26338:	f886 308e 	strb.w	r3, [r6, #142]	; 0x8e
}
   2633c:	e720      	b.n	26180 <rp_enc_execute_fsm+0x48>
		LL_ASSERT(0);
   2633e:	4a07      	ldr	r2, [pc, #28]	; (2635c <rp_enc_execute_fsm+0x224>)
   26340:	4907      	ldr	r1, [pc, #28]	; (26360 <rp_enc_execute_fsm+0x228>)
   26342:	4808      	ldr	r0, [pc, #32]	; (26364 <rp_enc_execute_fsm+0x22c>)
   26344:	f240 43ae 	movw	r3, #1198	; 0x4ae
   26348:	f00d f866 	bl	33418 <assert_print>
   2634c:	4040      	eors	r0, r0
   2634e:	f380 8811 	msr	BASEPRI, r0
   26352:	f04f 0003 	mov.w	r0, #3
   26356:	df02      	svc	2
}
   26358:	e712      	b.n	26180 <rp_enc_execute_fsm+0x48>
   2635a:	bf00      	nop
   2635c:	0003a860 	.word	0x0003a860
   26360:	0003a004 	.word	0x0003a004
   26364:	00039f74 	.word	0x00039f74

00026368 <llcp_rp_enc_rx>:

void llcp_rp_enc_rx(struct ll_conn *conn, struct proc_ctx *ctx, struct node_rx_pdu *rx)
{
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;

	switch (pdu->llctrl.opcode) {
   26368:	f892 c01f 	ldrb.w	ip, [r2, #31]
   2636c:	f1ac 0c03 	sub.w	ip, ip, #3
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;
   26370:	f102 031c 	add.w	r3, r2, #28
	switch (pdu->llctrl.opcode) {
   26374:	f1bc 0f08 	cmp.w	ip, #8
   26378:	d806      	bhi.n	26388 <llcp_rp_enc_rx+0x20>
   2637a:	e8df f00c 	tbb	[pc, ip]
   2637e:	0512      	.short	0x0512
   26380:	05050f05 	.word	0x05050f05
   26384:	0c05      	.short	0x0c05
   26386:	09          	.byte	0x09
   26387:	00          	.byte	0x00
		 * immediately exit the Connection state, and shall transition to the Standby state.
		 * The Host shall be notified that the link has been disconnected with the error
		 * code Connection Terminated Due to MIC Failure (0x3D).
		 */

		conn->llcp_terminate.reason_final = BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;
   26388:	233d      	movs	r3, #61	; 0x3d
   2638a:	f880 3148 	strb.w	r3, [r0, #328]	; 0x148
	}
}
   2638e:	4770      	bx	lr
		rp_enc_execute_fsm(conn, ctx, RP_ENC_EVT_PAUSE_ENC_RSP, pdu);
   26390:	2208      	movs	r2, #8
   26392:	f7ff bed1 	b.w	26138 <rp_enc_execute_fsm>
		rp_enc_execute_fsm(conn, ctx, RP_ENC_EVT_PAUSE_ENC_REQ, pdu);
   26396:	2207      	movs	r2, #7
   26398:	f7ff bece 	b.w	26138 <rp_enc_execute_fsm>
		rp_enc_execute_fsm(conn, ctx, RP_ENC_EVT_START_ENC_RSP, pdu);
   2639c:	2202      	movs	r2, #2
   2639e:	f7ff becb 	b.w	26138 <rp_enc_execute_fsm>
		rp_enc_execute_fsm(conn, ctx, RP_ENC_EVT_ENC_REQ, pdu);
   263a2:	2201      	movs	r2, #1
   263a4:	f7ff bec8 	b.w	26138 <rp_enc_execute_fsm>

000263a8 <llcp_rp_enc_init_proc>:

void llcp_rp_enc_init_proc(struct proc_ctx *ctx)
{
   263a8:	b508      	push	{r3, lr}
	switch (ctx->proc) {
   263aa:	7a03      	ldrb	r3, [r0, #8]
   263ac:	2b05      	cmp	r3, #5
   263ae:	d00f      	beq.n	263d0 <llcp_rp_enc_init_proc+0x28>
   263b0:	2b06      	cmp	r3, #6
   263b2:	d010      	beq.n	263d6 <llcp_rp_enc_init_proc+0x2e>
		break;
	case PROC_ENCRYPTION_PAUSE:
		ctx->state = RP_ENC_STATE_ENCRYPTED;
		break;
	default:
		LL_ASSERT(0);
   263b4:	4a09      	ldr	r2, [pc, #36]	; (263dc <llcp_rp_enc_init_proc+0x34>)
   263b6:	490a      	ldr	r1, [pc, #40]	; (263e0 <llcp_rp_enc_init_proc+0x38>)
   263b8:	480a      	ldr	r0, [pc, #40]	; (263e4 <llcp_rp_enc_init_proc+0x3c>)
   263ba:	f240 43e3 	movw	r3, #1251	; 0x4e3
   263be:	f00d f82b 	bl	33418 <assert_print>
   263c2:	4040      	eors	r0, r0
   263c4:	f380 8811 	msr	BASEPRI, r0
   263c8:	f04f 0003 	mov.w	r0, #3
   263cc:	df02      	svc	2
	}
}
   263ce:	bd08      	pop	{r3, pc}
		ctx->state = RP_ENC_STATE_UNENCRYPTED;
   263d0:	2300      	movs	r3, #0
   263d2:	7283      	strb	r3, [r0, #10]
}
   263d4:	bd08      	pop	{r3, pc}
		ctx->state = RP_ENC_STATE_ENCRYPTED;
   263d6:	230a      	movs	r3, #10
   263d8:	7283      	strb	r3, [r0, #10]
}
   263da:	bd08      	pop	{r3, pc}
   263dc:	0003a860 	.word	0x0003a860
   263e0:	0003a004 	.word	0x0003a004
   263e4:	00039f74 	.word	0x00039f74

000263e8 <llcp_rp_enc_ltk_req_reply>:

void llcp_rp_enc_ltk_req_reply(struct ll_conn *conn, struct proc_ctx *ctx)
{
	rp_enc_execute_fsm(conn, ctx, RP_ENC_EVT_LTK_REQ_REPLY, NULL);
   263e8:	2300      	movs	r3, #0
   263ea:	2203      	movs	r2, #3
   263ec:	f7ff bea4 	b.w	26138 <rp_enc_execute_fsm>

000263f0 <llcp_rp_enc_ltk_req_neg_reply>:
}

void llcp_rp_enc_ltk_req_neg_reply(struct ll_conn *conn, struct proc_ctx *ctx)
{
	rp_enc_execute_fsm(conn, ctx, RP_ENC_EVT_LTK_REQ_NEG_REPLY, NULL);
   263f0:	2300      	movs	r3, #0
   263f2:	2204      	movs	r2, #4
   263f4:	f7ff bea0 	b.w	26138 <rp_enc_execute_fsm>

000263f8 <llcp_rp_enc_ltk_req_reply_allowed>:
}

bool llcp_rp_enc_ltk_req_reply_allowed(struct ll_conn *conn, struct proc_ctx *ctx)
{
	return (ctx->state == RP_ENC_STATE_WAIT_LTK_REPLY);
   263f8:	7a88      	ldrb	r0, [r1, #10]
}
   263fa:	f1a0 0004 	sub.w	r0, r0, #4
   263fe:	fab0 f080 	clz	r0, r0
   26402:	0940      	lsrs	r0, r0, #5
   26404:	4770      	bx	lr
   26406:	bf00      	nop

00026408 <llcp_rp_enc_run>:

void llcp_rp_enc_run(struct ll_conn *conn, struct proc_ctx *ctx, void *param)
{
   26408:	4613      	mov	r3, r2
	rp_enc_execute_fsm(conn, ctx, RP_ENC_EVT_RUN, param);
   2640a:	2200      	movs	r2, #0
   2640c:	f7ff be94 	b.w	26138 <rp_enc_execute_fsm>

00026410 <ull_tx_q_init>:

#include "ull_tx_queue.h"

void ull_tx_q_init(struct ull_tx_q *queue)
{
	queue->pause_data = 0U;
   26410:	2300      	movs	r3, #0
   26412:	7003      	strb	r3, [r0, #0]
	list->head = NULL;
   26414:	6043      	str	r3, [r0, #4]
   26416:	6083      	str	r3, [r0, #8]
   26418:	60c3      	str	r3, [r0, #12]
   2641a:	6103      	str	r3, [r0, #16]
	sys_slist_init(&queue->tx_list);
	sys_slist_init(&queue->data_list);
}
   2641c:	4770      	bx	lr
   2641e:	bf00      	nop

00026420 <ull_tx_q_pause_data>:

void ull_tx_q_pause_data(struct ull_tx_q *queue)
{
	queue->pause_data++;
   26420:	7803      	ldrb	r3, [r0, #0]
   26422:	3301      	adds	r3, #1
   26424:	7003      	strb	r3, [r0, #0]
}
   26426:	4770      	bx	lr

00026428 <ull_tx_q_resume_data>:

void ull_tx_q_resume_data(struct ull_tx_q *queue)
{
	if (queue->pause_data > 0) {
   26428:	7803      	ldrb	r3, [r0, #0]
   2642a:	b95b      	cbnz	r3, 26444 <ull_tx_q_resume_data+0x1c>
	return list->head;
   2642c:	68c3      	ldr	r3, [r0, #12]
		queue->pause_data--;
	}

	/* move all paused data to the tail of tx list, only if not empty and no longer paused */
	if (!queue->pause_data &&  !sys_slist_is_empty(&queue->data_list)) {
   2642e:	b17b      	cbz	r3, 26450 <ull_tx_q_resume_data+0x28>
	return list->tail;
   26430:	6902      	ldr	r2, [r0, #16]
Z_GENLIST_APPEND_LIST(slist, snode)
   26432:	b11a      	cbz	r2, 2643c <ull_tx_q_resume_data+0x14>
	return list->tail;
   26434:	6881      	ldr	r1, [r0, #8]
Z_GENLIST_APPEND_LIST(slist, snode)
   26436:	b161      	cbz	r1, 26452 <ull_tx_q_resume_data+0x2a>
	parent->next = child;
   26438:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2643a:	6082      	str	r2, [r0, #8]
	list->head = NULL;
   2643c:	2300      	movs	r3, #0
   2643e:	60c3      	str	r3, [r0, #12]
   26440:	6103      	str	r3, [r0, #16]
		sys_slist_merge_slist(&queue->tx_list, &queue->data_list);
	}
}
   26442:	4770      	bx	lr
		queue->pause_data--;
   26444:	3b01      	subs	r3, #1
   26446:	b2db      	uxtb	r3, r3
   26448:	7003      	strb	r3, [r0, #0]
	if (!queue->pause_data &&  !sys_slist_is_empty(&queue->data_list)) {
   2644a:	2b00      	cmp	r3, #0
   2644c:	d0ee      	beq.n	2642c <ull_tx_q_resume_data+0x4>
}
   2644e:	4770      	bx	lr
   26450:	4770      	bx	lr
	list->head = node;
   26452:	6043      	str	r3, [r0, #4]
}
   26454:	e7f1      	b.n	2643a <ull_tx_q_resume_data+0x12>
   26456:	bf00      	nop

00026458 <ull_tx_q_enqueue_data>:

void ull_tx_q_enqueue_data(struct ull_tx_q *queue, struct node_tx *tx)
{
	sys_slist_t *list;

	if (queue->pause_data) {
   26458:	7803      	ldrb	r3, [r0, #0]
   2645a:	b13b      	cbz	r3, 2646c <ull_tx_q_enqueue_data+0x14>
	parent->next = child;
   2645c:	2300      	movs	r3, #0
		/* enqueue data pdu into paused data wait list */
		list = &queue->data_list;
   2645e:	300c      	adds	r0, #12
   26460:	600b      	str	r3, [r1, #0]
	return list->tail;
   26462:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   26464:	b143      	cbz	r3, 26478 <ull_tx_q_enqueue_data+0x20>
	parent->next = child;
   26466:	6019      	str	r1, [r3, #0]
	list->tail = node;
   26468:	6041      	str	r1, [r0, #4]
		/* enqueue data pdu into tx list */
		list = &queue->tx_list;
	}

	sys_slist_append(list, (sys_snode_t *)tx);
}
   2646a:	4770      	bx	lr
	parent->next = child;
   2646c:	2300      	movs	r3, #0
		list = &queue->tx_list;
   2646e:	3004      	adds	r0, #4
   26470:	600b      	str	r3, [r1, #0]
	return list->tail;
   26472:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   26474:	2b00      	cmp	r3, #0
   26476:	d1f6      	bne.n	26466 <ull_tx_q_enqueue_data+0xe>
	list->head = node;
   26478:	6001      	str	r1, [r0, #0]
   2647a:	6041      	str	r1, [r0, #4]
}
   2647c:	4770      	bx	lr
   2647e:	bf00      	nop

00026480 <ull_tx_q_enqueue_ctrl>:
	parent->next = child;
   26480:	2300      	movs	r3, #0
   26482:	600b      	str	r3, [r1, #0]
	return list->tail;
   26484:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   26486:	b113      	cbz	r3, 2648e <ull_tx_q_enqueue_ctrl+0xe>
	parent->next = child;
   26488:	6019      	str	r1, [r3, #0]
	list->tail = node;
   2648a:	6081      	str	r1, [r0, #8]

void ull_tx_q_enqueue_ctrl(struct ull_tx_q *queue, struct node_tx *tx)
{
	/* enqueue ctrl pdu into tx list */
	sys_slist_append(&queue->tx_list, (sys_snode_t *)tx);
}
   2648c:	4770      	bx	lr
	list->head = node;
   2648e:	6041      	str	r1, [r0, #4]
   26490:	6081      	str	r1, [r0, #8]
}
   26492:	4770      	bx	lr

00026494 <ull_tx_q_peek>:
	struct node_tx *tx;

	tx = (struct node_tx *)sys_slist_peek_head(&queue->tx_list);

	return tx;
}
   26494:	6840      	ldr	r0, [r0, #4]
   26496:	4770      	bx	lr

00026498 <ull_tx_q_dequeue>:

struct node_tx *ull_tx_q_dequeue(struct ull_tx_q *queue)
{
   26498:	4603      	mov	r3, r0
	return list->head;
   2649a:	6840      	ldr	r0, [r0, #4]
Z_GENLIST_GET(slist, snode)
   2649c:	b128      	cbz	r0, 264aa <ull_tx_q_dequeue+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2649e:	6899      	ldr	r1, [r3, #8]
	return node->next;
   264a0:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   264a2:	605a      	str	r2, [r3, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   264a4:	4288      	cmp	r0, r1
	list->tail = node;
   264a6:	bf08      	it	eq
   264a8:	609a      	streq	r2, [r3, #8]
	struct node_tx *tx;

	tx = (struct node_tx *)sys_slist_get(&queue->tx_list);

	return tx;
}
   264aa:	4770      	bx	lr

000264ac <pdu_validate_conn_update_ind>:
#define VALIDATE_PDU_LEN(pdu, type) (pdu->len == PDU_DATA_LLCTRL_LEN(type))

#if defined(CONFIG_BT_PERIPHERAL)
static bool pdu_validate_conn_update_ind(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, conn_update_ind);
   264ac:	7840      	ldrb	r0, [r0, #1]
}
   264ae:	f1a0 000c 	sub.w	r0, r0, #12
   264b2:	fab0 f080 	clz	r0, r0
   264b6:	0940      	lsrs	r0, r0, #5
   264b8:	4770      	bx	lr
   264ba:	bf00      	nop

000264bc <pdu_validate_chan_map_ind>:

static bool pdu_validate_chan_map_ind(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, chan_map_ind);
   264bc:	7840      	ldrb	r0, [r0, #1]
}
   264be:	f1a0 0008 	sub.w	r0, r0, #8
   264c2:	fab0 f080 	clz	r0, r0
   264c6:	0940      	lsrs	r0, r0, #5
   264c8:	4770      	bx	lr
   264ca:	bf00      	nop

000264cc <pdu_validate_terminate_ind>:
#endif /* CONFIG_BT_PERIPHERAL */

static bool pdu_validate_terminate_ind(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, terminate_ind);
   264cc:	7840      	ldrb	r0, [r0, #1]
}
   264ce:	f1a0 0002 	sub.w	r0, r0, #2
   264d2:	fab0 f080 	clz	r0, r0
   264d6:	0940      	lsrs	r0, r0, #5
   264d8:	4770      	bx	lr
   264da:	bf00      	nop

000264dc <pdu_validate_enc_req>:

#if defined(CONFIG_BT_CTLR_LE_ENC) && defined(CONFIG_BT_PERIPHERAL)
static bool pdu_validate_enc_req(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, enc_req);
   264dc:	7840      	ldrb	r0, [r0, #1]
}
   264de:	f1a0 0017 	sub.w	r0, r0, #23
   264e2:	fab0 f080 	clz	r0, r0
   264e6:	0940      	lsrs	r0, r0, #5
   264e8:	4770      	bx	lr
   264ea:	bf00      	nop

000264ec <pdu_validate_start_enc_rsp>:
#endif /* CONFIG_BT_CTLR_LE_ENC && CONFIG_BT_CENTRAL */

#if defined(CONFIG_BT_CTLR_LE_ENC) && defined(CONFIG_BT_PERIPHERAL)
static bool pdu_validate_start_enc_rsp(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, start_enc_rsp);
   264ec:	7840      	ldrb	r0, [r0, #1]
}
   264ee:	f1a0 0001 	sub.w	r0, r0, #1
   264f2:	fab0 f080 	clz	r0, r0
   264f6:	0940      	lsrs	r0, r0, #5
   264f8:	4770      	bx	lr
   264fa:	bf00      	nop

000264fc <pdu_validate_feature_req>:
}

#if defined(CONFIG_BT_PERIPHERAL)
static bool pdu_validate_feature_req(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, feature_req);
   264fc:	7840      	ldrb	r0, [r0, #1]
}
   264fe:	f1a0 0009 	sub.w	r0, r0, #9
   26502:	fab0 f080 	clz	r0, r0
   26506:	0940      	lsrs	r0, r0, #5
   26508:	4770      	bx	lr
   2650a:	bf00      	nop

0002650c <pdu_validate_version_ind>:
}
#endif

static bool pdu_validate_version_ind(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, version_ind);
   2650c:	7840      	ldrb	r0, [r0, #1]
}
   2650e:	f1a0 0006 	sub.w	r0, r0, #6
   26512:	fab0 f080 	clz	r0, r0
   26516:	0940      	lsrs	r0, r0, #5
   26518:	4770      	bx	lr
   2651a:	bf00      	nop

0002651c <pdu_validate_conn_param_req>:
#endif /* CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG && CONFIG_BT_CENTRAL */

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
static bool pdu_validate_conn_param_req(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, conn_param_req);
   2651c:	7840      	ldrb	r0, [r0, #1]
}
   2651e:	f1a0 0018 	sub.w	r0, r0, #24
   26522:	fab0 f080 	clz	r0, r0
   26526:	0940      	lsrs	r0, r0, #5
   26528:	4770      	bx	lr
   2652a:	bf00      	nop

0002652c <pdu_validate_reject_ext_ind>:
	return VALIDATE_PDU_LEN(pdu, conn_param_rsp);
}

static bool pdu_validate_reject_ext_ind(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, reject_ext_ind);
   2652c:	7840      	ldrb	r0, [r0, #1]
}
   2652e:	f1a0 0003 	sub.w	r0, r0, #3
   26532:	fab0 f080 	clz	r0, r0
   26536:	0940      	lsrs	r0, r0, #5
   26538:	4770      	bx	lr
   2653a:	bf00      	nop

0002653c <pdu_validate_phy_upd_ind>:
	return VALIDATE_PDU_LEN(pdu, phy_rsp);
}

static bool pdu_validate_phy_upd_ind(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, phy_upd_ind);
   2653c:	7840      	ldrb	r0, [r0, #1]
}
   2653e:	f1a0 0005 	sub.w	r0, r0, #5
   26542:	fab0 f080 	clz	r0, r0
   26546:	0940      	lsrs	r0, r0, #5
   26548:	4770      	bx	lr
   2654a:	bf00      	nop

0002654c <pdu_validate_clock_accuracy_rsp>:
{
	return VALIDATE_PDU_LEN(pdu, clock_accuracy_req);
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static bool pdu_validate_clock_accuracy_rsp(struct pdu_data *pdu)
   2654c:	7840      	ldrb	r0, [r0, #1]
   2654e:	f1a0 0002 	sub.w	r0, r0, #2
   26552:	fab0 f080 	clz	r0, r0
   26556:	0940      	lsrs	r0, r0, #5
   26558:	4770      	bx	lr
   2655a:	bf00      	nop

0002655c <pdu_validate_unknown_rsp>:
static bool pdu_validate_unknown_rsp(struct pdu_data *pdu)
   2655c:	7840      	ldrb	r0, [r0, #1]
   2655e:	f1a0 0002 	sub.w	r0, r0, #2
   26562:	fab0 f080 	clz	r0, r0
   26566:	0940      	lsrs	r0, r0, #5
   26568:	4770      	bx	lr
   2656a:	bf00      	nop

0002656c <pdu_validate_pause_enc_req>:
static bool pdu_validate_pause_enc_req(struct pdu_data *pdu)
   2656c:	7840      	ldrb	r0, [r0, #1]
   2656e:	f1a0 0001 	sub.w	r0, r0, #1
   26572:	fab0 f080 	clz	r0, r0
   26576:	0940      	lsrs	r0, r0, #5
   26578:	4770      	bx	lr
   2657a:	bf00      	nop

0002657c <pdu_validate_reject_ind>:
static bool pdu_validate_reject_ind(struct pdu_data *pdu)
   2657c:	7840      	ldrb	r0, [r0, #1]
   2657e:	f1a0 0002 	sub.w	r0, r0, #2
   26582:	fab0 f080 	clz	r0, r0
   26586:	0940      	lsrs	r0, r0, #5
   26588:	4770      	bx	lr
   2658a:	bf00      	nop

0002658c <pdu_validate_conn_param_rsp>:
static bool pdu_validate_conn_param_rsp(struct pdu_data *pdu)
   2658c:	7840      	ldrb	r0, [r0, #1]
   2658e:	f1a0 0018 	sub.w	r0, r0, #24
   26592:	fab0 f080 	clz	r0, r0
   26596:	0940      	lsrs	r0, r0, #5
   26598:	4770      	bx	lr
   2659a:	bf00      	nop

0002659c <pdu_validate_ping_req>:
static bool pdu_validate_ping_req(struct pdu_data *pdu)
   2659c:	7840      	ldrb	r0, [r0, #1]
   2659e:	f1a0 0001 	sub.w	r0, r0, #1
   265a2:	fab0 f080 	clz	r0, r0
   265a6:	0940      	lsrs	r0, r0, #5
   265a8:	4770      	bx	lr
   265aa:	bf00      	nop

000265ac <pdu_validate_ping_rsp>:
static bool pdu_validate_ping_rsp(struct pdu_data *pdu)
   265ac:	7840      	ldrb	r0, [r0, #1]
   265ae:	f1a0 0001 	sub.w	r0, r0, #1
   265b2:	fab0 f080 	clz	r0, r0
   265b6:	0940      	lsrs	r0, r0, #5
   265b8:	4770      	bx	lr
   265ba:	bf00      	nop

000265bc <pdu_validate_length_req>:
static bool pdu_validate_length_req(struct pdu_data *pdu)
   265bc:	7840      	ldrb	r0, [r0, #1]
   265be:	f1a0 0009 	sub.w	r0, r0, #9
   265c2:	fab0 f080 	clz	r0, r0
   265c6:	0940      	lsrs	r0, r0, #5
   265c8:	4770      	bx	lr
   265ca:	bf00      	nop

000265cc <pdu_validate_length_rsp>:
static bool pdu_validate_length_rsp(struct pdu_data *pdu)
   265cc:	7840      	ldrb	r0, [r0, #1]
   265ce:	f1a0 0009 	sub.w	r0, r0, #9
   265d2:	fab0 f080 	clz	r0, r0
   265d6:	0940      	lsrs	r0, r0, #5
   265d8:	4770      	bx	lr
   265da:	bf00      	nop

000265dc <pdu_validate_phy_req>:
static bool pdu_validate_phy_req(struct pdu_data *pdu)
   265dc:	7840      	ldrb	r0, [r0, #1]
   265de:	f1a0 0003 	sub.w	r0, r0, #3
   265e2:	fab0 f080 	clz	r0, r0
   265e6:	0940      	lsrs	r0, r0, #5
   265e8:	4770      	bx	lr
   265ea:	bf00      	nop

000265ec <pdu_validate_phy_rsp>:
static bool pdu_validate_phy_rsp(struct pdu_data *pdu)
   265ec:	7840      	ldrb	r0, [r0, #1]
   265ee:	f1a0 0003 	sub.w	r0, r0, #3
   265f2:	fab0 f080 	clz	r0, r0
   265f6:	0940      	lsrs	r0, r0, #5
   265f8:	4770      	bx	lr
   265fa:	bf00      	nop

000265fc <llcp_proc_ctx_release>:
{
   265fc:	b510      	push	{r4, lr}
	LL_ASSERT(ctx->owner);
   265fe:	6841      	ldr	r1, [r0, #4]
{
   26600:	4604      	mov	r4, r0
	LL_ASSERT(ctx->owner);
   26602:	b121      	cbz	r1, 2660e <llcp_proc_ctx_release+0x12>
	mem_release(ctx, &ctx->owner->free);
   26604:	4620      	mov	r0, r4
}
   26606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mem_release(ctx, &ctx->owner->free);
   2660a:	f7f8 bed3 	b.w	1f3b4 <mem_release>
	LL_ASSERT(ctx->owner);
   2660e:	4a09      	ldr	r2, [pc, #36]	; (26634 <llcp_proc_ctx_release+0x38>)
   26610:	4909      	ldr	r1, [pc, #36]	; (26638 <llcp_proc_ctx_release+0x3c>)
   26612:	480a      	ldr	r0, [pc, #40]	; (2663c <llcp_proc_ctx_release+0x40>)
   26614:	235d      	movs	r3, #93	; 0x5d
   26616:	f00c feff 	bl	33418 <assert_print>
   2661a:	4040      	eors	r0, r0
   2661c:	f380 8811 	msr	BASEPRI, r0
   26620:	f04f 0003 	mov.w	r0, #3
   26624:	df02      	svc	2
	mem_release(ctx, &ctx->owner->free);
   26626:	6861      	ldr	r1, [r4, #4]
   26628:	4620      	mov	r0, r4
}
   2662a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mem_release(ctx, &ctx->owner->free);
   2662e:	f7f8 bec1 	b.w	1f3b4 <mem_release>
   26632:	bf00      	nop
   26634:	0003a8a4 	.word	0x0003a8a4
   26638:	0003a8e4 	.word	0x0003a8e4
   2663c:	00039f74 	.word	0x00039f74

00026640 <llcp_tx_alloc_peek>:
	return mem_tx.free != NULL;
   26640:	4b02      	ldr	r3, [pc, #8]	; (2664c <llcp_tx_alloc_peek+0xc>)
   26642:	6818      	ldr	r0, [r3, #0]
}
   26644:	3800      	subs	r0, #0
   26646:	bf18      	it	ne
   26648:	2001      	movne	r0, #1
   2664a:	4770      	bx	lr
   2664c:	20000720 	.word	0x20000720

00026650 <llcp_tx_alloc>:
{
   26650:	b510      	push	{r4, lr}
	tx = (struct node_tx *)mem_acquire(&mem_tx.free);
   26652:	4804      	ldr	r0, [pc, #16]	; (26664 <llcp_tx_alloc+0x14>)
   26654:	f7f8 fe92 	bl	1f37c <mem_acquire>
   26658:	4604      	mov	r4, r0
	ull_pdu_data_init(pdu);
   2665a:	3004      	adds	r0, #4
   2665c:	f7fe fd86 	bl	2516c <ull_pdu_data_init>
}
   26660:	4620      	mov	r0, r4
   26662:	bd10      	pop	{r4, pc}
   26664:	20000720 	.word	0x20000720

00026668 <llcp_ntf_alloc_is_available>:
{
   26668:	b508      	push	{r3, lr}
	return ll_pdu_rx_alloc_peek(1) != NULL;
   2666a:	2001      	movs	r0, #1
   2666c:	f7fc fa72 	bl	22b54 <ll_pdu_rx_alloc_peek>
}
   26670:	3800      	subs	r0, #0
   26672:	bf18      	it	ne
   26674:	2001      	movne	r0, #1
   26676:	bd08      	pop	{r3, pc}

00026678 <llcp_ntf_alloc_num_available>:
{
   26678:	b508      	push	{r3, lr}
	return ll_pdu_rx_alloc_peek(count) != NULL;
   2667a:	f7fc fa6b 	bl	22b54 <ll_pdu_rx_alloc_peek>
}
   2667e:	3800      	subs	r0, #0
   26680:	bf18      	it	ne
   26682:	2001      	movne	r0, #1
   26684:	bd08      	pop	{r3, pc}
   26686:	bf00      	nop

00026688 <llcp_ntf_alloc>:
	return ll_pdu_rx_alloc();
   26688:	f7fc ba86 	b.w	22b98 <ll_pdu_rx_alloc>

0002668c <llcp_tx_enqueue>:
	ull_tx_q_enqueue_ctrl(&conn->tx_q, tx);
   2668c:	30d4      	adds	r0, #212	; 0xd4
   2668e:	f7ff bef7 	b.w	26480 <ull_tx_q_enqueue_ctrl>
   26692:	bf00      	nop

00026694 <llcp_tx_pause_data>:
{
   26694:	b538      	push	{r3, r4, r5, lr}
	if (conn->llcp.tx_q_pause_data_mask == 0) {
   26696:	f890 3146 	ldrb.w	r3, [r0, #326]	; 0x146
{
   2669a:	4605      	mov	r5, r0
   2669c:	460c      	mov	r4, r1
	if (conn->llcp.tx_q_pause_data_mask == 0) {
   2669e:	b11b      	cbz	r3, 266a8 <llcp_tx_pause_data+0x14>
	conn->llcp.tx_q_pause_data_mask |= pause_mask;
   266a0:	431c      	orrs	r4, r3
   266a2:	f885 4146 	strb.w	r4, [r5, #326]	; 0x146
}
   266a6:	bd38      	pop	{r3, r4, r5, pc}
		ull_tx_q_pause_data(&conn->tx_q);
   266a8:	30d4      	adds	r0, #212	; 0xd4
   266aa:	f7ff feb9 	bl	26420 <ull_tx_q_pause_data>
	conn->llcp.tx_q_pause_data_mask |= pause_mask;
   266ae:	f895 3146 	ldrb.w	r3, [r5, #326]	; 0x146
   266b2:	431c      	orrs	r4, r3
   266b4:	f885 4146 	strb.w	r4, [r5, #326]	; 0x146
}
   266b8:	bd38      	pop	{r3, r4, r5, pc}
   266ba:	bf00      	nop

000266bc <llcp_tx_resume_data>:
	conn->llcp.tx_q_pause_data_mask &= ~resume_mask;
   266bc:	f890 3146 	ldrb.w	r3, [r0, #326]	; 0x146
   266c0:	ea23 0101 	bic.w	r1, r3, r1
   266c4:	f880 1146 	strb.w	r1, [r0, #326]	; 0x146
	if (conn->llcp.tx_q_pause_data_mask == 0) {
   266c8:	b101      	cbz	r1, 266cc <llcp_tx_resume_data+0x10>
}
   266ca:	4770      	bx	lr
		ull_tx_q_resume_data(&conn->tx_q);
   266cc:	30d4      	adds	r0, #212	; 0xd4
   266ce:	f7ff beab 	b.w	26428 <ull_tx_q_resume_data>
   266d2:	bf00      	nop

000266d4 <llcp_create_local_procedure>:
{
   266d4:	b570      	push	{r4, r5, r6, lr}
	ctx = (struct proc_ctx *)mem_acquire(&owner->free);
   266d6:	4e20      	ldr	r6, [pc, #128]	; (26758 <llcp_create_local_procedure+0x84>)
{
   266d8:	4605      	mov	r5, r0
	ctx = (struct proc_ctx *)mem_acquire(&owner->free);
   266da:	4630      	mov	r0, r6
   266dc:	f7f8 fe4e 	bl	1f37c <mem_acquire>
	if (ctx) {
   266e0:	4604      	mov	r4, r0
   266e2:	b1e8      	cbz	r0, 26720 <llcp_create_local_procedure+0x4c>
	ctx->collision = 0U;
   266e4:	2100      	movs	r1, #0
		ctx->owner = owner;
   266e6:	6046      	str	r6, [r0, #4]
	ctx->proc = proc;
   266e8:	7205      	strb	r5, [r0, #8]
	ctx->collision = 0U;
   266ea:	6101      	str	r1, [r0, #16]
	ctx->done = 0U;
   266ec:	6181      	str	r1, [r0, #24]
	ctx->rx_greedy = 0U;
   266ee:	7301      	strb	r1, [r0, #12]
	ctx->tx_ack = NULL;
   266f0:	6141      	str	r1, [r0, #20]
	memset((void *)&ctx->data, 0, sizeof(ctx->data));
   266f2:	222c      	movs	r2, #44	; 0x2c
   266f4:	301c      	adds	r0, #28
   266f6:	f00e ff29 	bl	3554c <memset>
	switch (ctx->proc) {
   266fa:	7a23      	ldrb	r3, [r4, #8]
	ctx->rx_opcode = ULL_LLCP_INVALID_OPCODE;
   266fc:	22ff      	movs	r2, #255	; 0xff
	switch (ctx->proc) {
   266fe:	3b01      	subs	r3, #1
	ctx->rx_opcode = ULL_LLCP_INVALID_OPCODE;
   26700:	72e2      	strb	r2, [r4, #11]
	ctx->tx_opcode = ULL_LLCP_INVALID_OPCODE;
   26702:	7362      	strb	r2, [r4, #13]
	ctx->response_opcode = ULL_LLCP_INVALID_OPCODE;
   26704:	7262      	strb	r2, [r4, #9]
	switch (ctx->proc) {
   26706:	2b0b      	cmp	r3, #11
   26708:	d811      	bhi.n	2672e <llcp_create_local_procedure+0x5a>
   2670a:	e8df f003 	tbb	[pc, r3]
   2670e:	0606      	.short	0x0606
   26710:	10100606 	.word	0x10100606
   26714:	060b0b1f 	.word	0x060b0b1f
   26718:	0610      	.short	0x0610
		llcp_lp_comm_init_proc(ctx);
   2671a:	4620      	mov	r0, r4
   2671c:	f001 f888 	bl	27830 <llcp_lp_comm_init_proc>
}
   26720:	4620      	mov	r0, r4
   26722:	bd70      	pop	{r4, r5, r6, pc}
		llcp_lp_cu_init_proc(ctx);
   26724:	4620      	mov	r0, r4
   26726:	f002 faf5 	bl	28d14 <llcp_lp_cu_init_proc>
}
   2672a:	4620      	mov	r0, r4
   2672c:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(0);
   2672e:	4a0b      	ldr	r2, [pc, #44]	; (2675c <llcp_create_local_procedure+0x88>)
   26730:	490b      	ldr	r1, [pc, #44]	; (26760 <llcp_create_local_procedure+0x8c>)
   26732:	480c      	ldr	r0, [pc, #48]	; (26764 <llcp_create_local_procedure+0x90>)
   26734:	f240 1381 	movw	r3, #385	; 0x181
   26738:	f00c fe6e 	bl	33418 <assert_print>
   2673c:	4040      	eors	r0, r0
   2673e:	f380 8811 	msr	BASEPRI, r0
   26742:	f04f 0003 	mov.w	r0, #3
   26746:	df02      	svc	2
}
   26748:	4620      	mov	r0, r4
   2674a:	bd70      	pop	{r4, r5, r6, pc}
		llcp_lp_pu_init_proc(ctx);
   2674c:	4620      	mov	r0, r4
   2674e:	f7ff f9e5 	bl	25b1c <llcp_lp_pu_init_proc>
}
   26752:	4620      	mov	r0, r4
   26754:	bd70      	pop	{r4, r5, r6, pc}
   26756:	bf00      	nop
   26758:	20000718 	.word	0x20000718
   2675c:	0003a8a4 	.word	0x0003a8a4
   26760:	0003a004 	.word	0x0003a004
   26764:	00039f74 	.word	0x00039f74

00026768 <llcp_create_remote_procedure>:
{
   26768:	b570      	push	{r4, r5, r6, lr}
	ctx = (struct proc_ctx *)mem_acquire(&owner->free);
   2676a:	4e22      	ldr	r6, [pc, #136]	; (267f4 <llcp_create_remote_procedure+0x8c>)
{
   2676c:	4605      	mov	r5, r0
	ctx = (struct proc_ctx *)mem_acquire(&owner->free);
   2676e:	4630      	mov	r0, r6
   26770:	f7f8 fe04 	bl	1f37c <mem_acquire>
	if (ctx) {
   26774:	4604      	mov	r4, r0
   26776:	b1e8      	cbz	r0, 267b4 <llcp_create_remote_procedure+0x4c>
	ctx->collision = 0U;
   26778:	2100      	movs	r1, #0
		ctx->owner = owner;
   2677a:	6046      	str	r6, [r0, #4]
	ctx->proc = proc;
   2677c:	7205      	strb	r5, [r0, #8]
	ctx->collision = 0U;
   2677e:	6101      	str	r1, [r0, #16]
	ctx->done = 0U;
   26780:	6181      	str	r1, [r0, #24]
	ctx->rx_greedy = 0U;
   26782:	7301      	strb	r1, [r0, #12]
	ctx->tx_ack = NULL;
   26784:	6141      	str	r1, [r0, #20]
	memset((void *)&ctx->data, 0, sizeof(ctx->data));
   26786:	222c      	movs	r2, #44	; 0x2c
   26788:	301c      	adds	r0, #28
   2678a:	f00e fedf 	bl	3554c <memset>
	switch (ctx->proc) {
   2678e:	7a22      	ldrb	r2, [r4, #8]
	ctx->rx_opcode = ULL_LLCP_INVALID_OPCODE;
   26790:	23ff      	movs	r3, #255	; 0xff
   26792:	72e3      	strb	r3, [r4, #11]
	ctx->tx_opcode = ULL_LLCP_INVALID_OPCODE;
   26794:	7363      	strb	r3, [r4, #13]
	ctx->response_opcode = ULL_LLCP_INVALID_OPCODE;
   26796:	7263      	strb	r3, [r4, #9]
	switch (ctx->proc) {
   26798:	2a0c      	cmp	r2, #12
   2679a:	d81d      	bhi.n	267d8 <llcp_create_remote_procedure+0x70>
   2679c:	e8df f002 	tbb	[pc, r2]
   267a0:	0707070a 	.word	0x0707070a
   267a4:	180c0c07 	.word	0x180c0c07
   267a8:	14071010 	.word	0x14071010
   267ac:	07          	.byte	0x07
   267ad:	00          	.byte	0x00
		llcp_rp_comm_init_proc(ctx);
   267ae:	4620      	mov	r0, r4
   267b0:	f001 f850 	bl	27854 <llcp_rp_comm_init_proc>
}
   267b4:	4620      	mov	r0, r4
   267b6:	bd70      	pop	{r4, r5, r6, pc}
		llcp_rp_enc_init_proc(ctx);
   267b8:	4620      	mov	r0, r4
   267ba:	f7ff fdf5 	bl	263a8 <llcp_rp_enc_init_proc>
		break;
   267be:	e7f9      	b.n	267b4 <llcp_create_remote_procedure+0x4c>
		llcp_rp_cu_init_proc(ctx);
   267c0:	4620      	mov	r0, r4
   267c2:	f002 fad5 	bl	28d70 <llcp_rp_cu_init_proc>
		break;
   267c6:	e7f5      	b.n	267b4 <llcp_create_remote_procedure+0x4c>
		llcp_rp_chmu_init_proc(ctx);
   267c8:	4620      	mov	r0, r4
   267ca:	f002 fb25 	bl	28e18 <llcp_rp_chmu_init_proc>
		break;
   267ce:	e7f1      	b.n	267b4 <llcp_create_remote_procedure+0x4c>
		llcp_rp_pu_init_proc(ctx);
   267d0:	4620      	mov	r0, r4
   267d2:	f7ff fb43 	bl	25e5c <llcp_rp_pu_init_proc>
		break;
   267d6:	e7ed      	b.n	267b4 <llcp_create_remote_procedure+0x4c>
		LL_ASSERT(0);
   267d8:	4a07      	ldr	r2, [pc, #28]	; (267f8 <llcp_create_remote_procedure+0x90>)
   267da:	4908      	ldr	r1, [pc, #32]	; (267fc <llcp_create_remote_procedure+0x94>)
   267dc:	4808      	ldr	r0, [pc, #32]	; (26800 <llcp_create_remote_procedure+0x98>)
   267de:	f44f 73ec 	mov.w	r3, #472	; 0x1d8
   267e2:	f00c fe19 	bl	33418 <assert_print>
   267e6:	4040      	eors	r0, r0
   267e8:	f380 8811 	msr	BASEPRI, r0
   267ec:	f04f 0003 	mov.w	r0, #3
   267f0:	df02      	svc	2
		break;
   267f2:	e7df      	b.n	267b4 <llcp_create_remote_procedure+0x4c>
   267f4:	20000710 	.word	0x20000710
   267f8:	0003a8a4 	.word	0x0003a8a4
   267fc:	0003a004 	.word	0x0003a004
   26800:	00039f74 	.word	0x00039f74

00026804 <ull_cp_init>:
{
   26804:	b510      	push	{r4, lr}
	mem_init(mem_local_ctx.pool, PROC_CTX_BUF_SIZE,
   26806:	4b0a      	ldr	r3, [pc, #40]	; (26830 <ull_cp_init+0x2c>)
   26808:	2206      	movs	r2, #6
   2680a:	6858      	ldr	r0, [r3, #4]
   2680c:	214c      	movs	r1, #76	; 0x4c
   2680e:	f7f8 fd85 	bl	1f31c <mem_init>
	mem_init(mem_remote_ctx.pool, PROC_CTX_BUF_SIZE,
   26812:	4b08      	ldr	r3, [pc, #32]	; (26834 <ull_cp_init+0x30>)
   26814:	2201      	movs	r2, #1
   26816:	6858      	ldr	r0, [r3, #4]
   26818:	214c      	movs	r1, #76	; 0x4c
   2681a:	f7f8 fd7f 	bl	1f31c <mem_init>
	mem_init(mem_tx.pool, TX_CTRL_BUF_SIZE, LLCP_TX_CTRL_BUF_COUNT, &mem_tx.free);
   2681e:	4b06      	ldr	r3, [pc, #24]	; (26838 <ull_cp_init+0x34>)
}
   26820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mem_init(mem_tx.pool, TX_CTRL_BUF_SIZE, LLCP_TX_CTRL_BUF_COUNT, &mem_tx.free);
   26824:	6858      	ldr	r0, [r3, #4]
   26826:	2204      	movs	r2, #4
   26828:	212c      	movs	r1, #44	; 0x2c
   2682a:	f7f8 bd77 	b.w	1f31c <mem_init>
   2682e:	bf00      	nop
   26830:	20000718 	.word	0x20000718
   26834:	20000710 	.word	0x20000710
   26838:	20000720 	.word	0x20000720

0002683c <ull_llcp_init>:
{
   2683c:	b538      	push	{r3, r4, r5, lr}
   2683e:	4604      	mov	r4, r0
	list->head = NULL;
   26840:	2500      	movs	r5, #0
	llcp_lr_init(conn);
   26842:	f001 fa3f 	bl	27cc4 <llcp_lr_init>
	llcp_rr_init(conn);
   26846:	4620      	mov	r0, r4
	list->tail = NULL;
   26848:	e9c4 553a 	strd	r5, r5, [r4, #232]	; 0xe8
	conn->llcp.local.pause = 0U;
   2684c:	f884 50f4 	strb.w	r5, [r4, #244]	; 0xf4
	llcp_rr_init(conn);
   26850:	f002 fdd4 	bl	293fc <llcp_rr_init>
	memset(&conn->llcp.vex, 0, sizeof(conn->llcp.vex));
   26854:	2207      	movs	r2, #7
   26856:	4629      	mov	r1, r5
   26858:	e9c4 553e 	strd	r5, r5, [r4, #248]	; 0xf8
	conn->llcp.remote.incompat = INCOMPAT_NO_COLLISION;
   2685c:	f884 5106 	strb.w	r5, [r4, #262]	; 0x106
	conn->llcp.remote.pause = 0U;
   26860:	f8a4 5104 	strh.w	r5, [r4, #260]	; 0x104
	conn->llcp.prt_reload = 0U;
   26864:	f8a4 5108 	strh.w	r5, [r4, #264]	; 0x108
	memset(&conn->llcp.vex, 0, sizeof(conn->llcp.vex));
   26868:	f504 708a 	add.w	r0, r4, #276	; 0x114
   2686c:	f00e fe6e 	bl	3554c <memset>
	memset(&conn->llcp.muc, 0, sizeof(conn->llcp.muc));
   26870:	2202      	movs	r2, #2
   26872:	4629      	mov	r1, r5
   26874:	f504 709c 	add.w	r0, r4, #312	; 0x138
   26878:	f00e fe68 	bl	3554c <memset>
	memset(&conn->llcp.fex, 0, sizeof(conn->llcp.fex));
   2687c:	4629      	mov	r1, r5
   2687e:	2218      	movs	r2, #24
   26880:	f504 7090 	add.w	r0, r4, #288	; 0x120
   26884:	f00e fe62 	bl	3554c <memset>
	conn->llcp.fex.features_used = LL_FEAT;
   26888:	4806      	ldr	r0, [pc, #24]	; (268a4 <ull_llcp_init+0x68>)
	conn->lll.enc_rx = 0U;
   2688a:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
	conn->llcp.tx_q_pause_data_mask = 0;
   2688e:	f884 5146 	strb.w	r5, [r4, #326]	; 0x146
	conn->llcp.fex.features_used = LL_FEAT;
   26892:	2100      	movs	r1, #0
   26894:	e9c4 014c 	strd	r0, r1, [r4, #304]	; 0x130
	conn->lll.enc_rx = 0U;
   26898:	f023 0318 	bic.w	r3, r3, #24
   2689c:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
	conn->lll.event_counter = 0;
   268a0:	8665      	strh	r5, [r4, #50]	; 0x32
}
   268a2:	bd38      	pop	{r3, r4, r5, pc}
   268a4:	0001417f 	.word	0x0001417f

000268a8 <ull_cp_release_tx>:
	mem_release(tx, &mem_tx.free);
   268a8:	4608      	mov	r0, r1
   268aa:	4901      	ldr	r1, [pc, #4]	; (268b0 <ull_cp_release_tx+0x8>)
   268ac:	f7f8 bd82 	b.w	1f3b4 <mem_release>
   268b0:	20000720 	.word	0x20000720

000268b4 <ull_cp_prt_elapse>:
{
   268b4:	b538      	push	{r3, r4, r5, lr}
	if (*expire != 0U) {
   268b6:	f8b0 50f2 	ldrh.w	r5, [r0, #242]	; 0xf2
{
   268ba:	4603      	mov	r3, r0
   268bc:	4614      	mov	r4, r2
	if (*expire != 0U) {
   268be:	b125      	cbz	r5, 268ca <ull_cp_prt_elapse+0x16>
		if (*expire > elapsed_event) {
   268c0:	42a9      	cmp	r1, r5
   268c2:	d20e      	bcs.n	268e2 <ull_cp_prt_elapse+0x2e>
			*expire -= elapsed_event;
   268c4:	1a6d      	subs	r5, r5, r1
   268c6:	f8a0 50f2 	strh.w	r5, [r0, #242]	; 0xf2
	if (*expire != 0U) {
   268ca:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
   268ce:	b122      	cbz	r2, 268da <ull_cp_prt_elapse+0x26>
		if (*expire > elapsed_event) {
   268d0:	4291      	cmp	r1, r2
   268d2:	d20d      	bcs.n	268f0 <ull_cp_prt_elapse+0x3c>
			*expire -= elapsed_event;
   268d4:	1a52      	subs	r2, r2, r1
   268d6:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	return 0;
   268da:	2300      	movs	r3, #0
   268dc:	4618      	mov	r0, r3
			*error_code = ctx->data.term.error_code;
   268de:	7023      	strb	r3, [r4, #0]
}
   268e0:	bd38      	pop	{r3, r4, r5, pc}
		ctx = llcp_lr_peek(conn);
   268e2:	f001 f899 	bl	27a18 <llcp_lr_peek>
		LL_ASSERT(ctx);
   268e6:	4605      	mov	r5, r0
   268e8:	b150      	cbz	r0, 26900 <ull_cp_prt_elapse+0x4c>
		if (ctx->proc == PROC_TERMINATE) {
   268ea:	7a2b      	ldrb	r3, [r5, #8]
   268ec:	2b0a      	cmp	r3, #10
   268ee:	d003      	beq.n	268f8 <ull_cp_prt_elapse+0x44>
	return 0;
   268f0:	2322      	movs	r3, #34	; 0x22
		return -ETIMEDOUT;
   268f2:	f06f 0073 	mvn.w	r0, #115	; 0x73
   268f6:	e7f2      	b.n	268de <ull_cp_prt_elapse+0x2a>
			*error_code = ctx->data.term.error_code;
   268f8:	7f2b      	ldrb	r3, [r5, #28]
		return -ETIMEDOUT;
   268fa:	f06f 0073 	mvn.w	r0, #115	; 0x73
   268fe:	e7ee      	b.n	268de <ull_cp_prt_elapse+0x2a>
		LL_ASSERT(ctx);
   26900:	4a06      	ldr	r2, [pc, #24]	; (2691c <ull_cp_prt_elapse+0x68>)
   26902:	4907      	ldr	r1, [pc, #28]	; (26920 <ull_cp_prt_elapse+0x6c>)
   26904:	4807      	ldr	r0, [pc, #28]	; (26924 <ull_cp_prt_elapse+0x70>)
   26906:	f44f 7318 	mov.w	r3, #608	; 0x260
   2690a:	f00c fd85 	bl	33418 <assert_print>
   2690e:	4040      	eors	r0, r0
   26910:	f380 8811 	msr	BASEPRI, r0
   26914:	f04f 0003 	mov.w	r0, #3
   26918:	df02      	svc	2
   2691a:	e7e6      	b.n	268ea <ull_cp_prt_elapse+0x36>
   2691c:	0003a8a4 	.word	0x0003a8a4
   26920:	0003a8f0 	.word	0x0003a8f0
   26924:	00039f74 	.word	0x00039f74

00026928 <ull_cp_prt_reload_set>:
	conn->llcp.prt_reload = RADIO_CONN_EVENTS((40U * 1000U * 1000U), conn_intv_us);
   26928:	4b03      	ldr	r3, [pc, #12]	; (26938 <ull_cp_prt_reload_set+0x10>)
   2692a:	440b      	add	r3, r1
   2692c:	fbb3 f3f1 	udiv	r3, r3, r1
   26930:	f8a0 3108 	strh.w	r3, [r0, #264]	; 0x108
}
   26934:	4770      	bx	lr
   26936:	bf00      	nop
   26938:	026259ff 	.word	0x026259ff

0002693c <ull_cp_run>:
{
   2693c:	b510      	push	{r4, lr}
   2693e:	4604      	mov	r4, r0
	llcp_rr_run(conn);
   26940:	f002 fd64 	bl	2940c <llcp_rr_run>
	llcp_lr_run(conn);
   26944:	4620      	mov	r0, r4
}
   26946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	llcp_lr_run(conn);
   2694a:	f001 b9c3 	b.w	27cd4 <llcp_lr_run>
   2694e:	bf00      	nop

00026950 <ull_cp_state_set>:
{
   26950:	b510      	push	{r4, lr}
   26952:	4604      	mov	r4, r0
	switch (state) {
   26954:	b111      	cbz	r1, 2695c <ull_cp_state_set+0xc>
   26956:	2901      	cmp	r1, #1
   26958:	d007      	beq.n	2696a <ull_cp_state_set+0x1a>
}
   2695a:	bd10      	pop	{r4, pc}
		llcp_rr_connect(conn);
   2695c:	f002 fd5e 	bl	2941c <llcp_rr_connect>
		llcp_lr_connect(conn);
   26960:	4620      	mov	r0, r4
}
   26962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		llcp_lr_connect(conn);
   26966:	f001 b9e1 	b.w	27d2c <llcp_lr_connect>
		llcp_rr_disconnect(conn);
   2696a:	f002 fd5b 	bl	29424 <llcp_rr_disconnect>
		llcp_lr_disconnect(conn);
   2696e:	4620      	mov	r0, r4
}
   26970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		llcp_lr_disconnect(conn);
   26974:	f001 b9fc 	b.w	27d70 <llcp_lr_disconnect>

00026978 <ull_cp_min_used_chans>:
	if (conn->lll.role != BT_HCI_ROLE_PERIPHERAL) {
   26978:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   2697c:	2b00      	cmp	r3, #0
   2697e:	da11      	bge.n	269a4 <ull_cp_min_used_chans+0x2c>
{
   26980:	b570      	push	{r4, r5, r6, lr}
   26982:	4604      	mov	r4, r0
	ctx = llcp_create_local_procedure(PROC_MIN_USED_CHANS);
   26984:	2003      	movs	r0, #3
   26986:	460e      	mov	r6, r1
   26988:	4615      	mov	r5, r2
   2698a:	f7ff fea3 	bl	266d4 <llcp_create_local_procedure>
	if (!ctx) {
   2698e:	4601      	mov	r1, r0
   26990:	b130      	cbz	r0, 269a0 <ull_cp_min_used_chans+0x28>
	ctx->data.muc.phys = phys;
   26992:	7706      	strb	r6, [r0, #28]
	ctx->data.muc.min_used_chans = min_used_chans;
   26994:	7745      	strb	r5, [r0, #29]
	llcp_lr_enqueue(conn, ctx);
   26996:	4620      	mov	r0, r4
   26998:	f001 f80a 	bl	279b0 <llcp_lr_enqueue>
	return BT_HCI_ERR_SUCCESS;
   2699c:	2000      	movs	r0, #0
}
   2699e:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   269a0:	200c      	movs	r0, #12
}
   269a2:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   269a4:	200c      	movs	r0, #12
}
   269a6:	4770      	bx	lr

000269a8 <ull_cp_le_ping>:
{
   269a8:	b510      	push	{r4, lr}
   269aa:	4604      	mov	r4, r0
	ctx = llcp_create_local_procedure(PROC_LE_PING);
   269ac:	2001      	movs	r0, #1
   269ae:	f7ff fe91 	bl	266d4 <llcp_create_local_procedure>
	if (!ctx) {
   269b2:	b128      	cbz	r0, 269c0 <ull_cp_le_ping+0x18>
   269b4:	4601      	mov	r1, r0
	llcp_lr_enqueue(conn, ctx);
   269b6:	4620      	mov	r0, r4
   269b8:	f000 fffa 	bl	279b0 <llcp_lr_enqueue>
	return BT_HCI_ERR_SUCCESS;
   269bc:	2000      	movs	r0, #0
}
   269be:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   269c0:	200c      	movs	r0, #12
}
   269c2:	bd10      	pop	{r4, pc}

000269c4 <ull_cp_feature_exchange>:
{
   269c4:	b510      	push	{r4, lr}
   269c6:	4604      	mov	r4, r0
	ctx = llcp_create_local_procedure(PROC_FEATURE_EXCHANGE);
   269c8:	2002      	movs	r0, #2
   269ca:	f7ff fe83 	bl	266d4 <llcp_create_local_procedure>
	if (!ctx) {
   269ce:	b128      	cbz	r0, 269dc <ull_cp_feature_exchange+0x18>
   269d0:	4601      	mov	r1, r0
	llcp_lr_enqueue(conn, ctx);
   269d2:	4620      	mov	r0, r4
   269d4:	f000 ffec 	bl	279b0 <llcp_lr_enqueue>
	return BT_HCI_ERR_SUCCESS;
   269d8:	2000      	movs	r0, #0
}
   269da:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   269dc:	200c      	movs	r0, #12
}
   269de:	bd10      	pop	{r4, pc}

000269e0 <ull_cp_version_exchange>:
{
   269e0:	b510      	push	{r4, lr}
   269e2:	4604      	mov	r4, r0
	ctx = llcp_create_local_procedure(PROC_VERSION_EXCHANGE);
   269e4:	2004      	movs	r0, #4
   269e6:	f7ff fe75 	bl	266d4 <llcp_create_local_procedure>
	if (!ctx) {
   269ea:	b128      	cbz	r0, 269f8 <ull_cp_version_exchange+0x18>
   269ec:	4601      	mov	r1, r0
	llcp_lr_enqueue(conn, ctx);
   269ee:	4620      	mov	r0, r4
   269f0:	f000 ffde 	bl	279b0 <llcp_lr_enqueue>
	return BT_HCI_ERR_SUCCESS;
   269f4:	2000      	movs	r0, #0
}
   269f6:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   269f8:	200c      	movs	r0, #12
}
   269fa:	bd10      	pop	{r4, pc}

000269fc <ull_cp_phy_update>:
{
   269fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26a00:	4605      	mov	r5, r0
	ctx = llcp_create_local_procedure(PROC_PHY_UPDATE);
   26a02:	2007      	movs	r0, #7
{
   26a04:	f89d 6018 	ldrb.w	r6, [sp, #24]
   26a08:	4688      	mov	r8, r1
   26a0a:	4617      	mov	r7, r2
   26a0c:	461c      	mov	r4, r3
	ctx = llcp_create_local_procedure(PROC_PHY_UPDATE);
   26a0e:	f7ff fe61 	bl	266d4 <llcp_create_local_procedure>
	if (!ctx) {
   26a12:	b1a0      	cbz	r0, 26a3e <ull_cp_phy_update+0x42>
	ctx->data.pu.tx = tx;
   26a14:	00e3      	lsls	r3, r4, #3
   26a16:	f008 0807 	and.w	r8, r8, #7
   26a1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
   26a1e:	01bf      	lsls	r7, r7, #6
   26a20:	ea43 0308 	orr.w	r3, r3, r8
   26a24:	f007 0740 	and.w	r7, r7, #64	; 0x40
   26a28:	433b      	orrs	r3, r7
   26a2a:	ea43 13c6 	orr.w	r3, r3, r6, lsl #7
   26a2e:	4601      	mov	r1, r0
   26a30:	7703      	strb	r3, [r0, #28]
	llcp_lr_enqueue(conn, ctx);
   26a32:	4628      	mov	r0, r5
   26a34:	f000 ffbc 	bl	279b0 <llcp_lr_enqueue>
	return BT_HCI_ERR_SUCCESS;
   26a38:	2000      	movs	r0, #0
}
   26a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   26a3e:	200c      	movs	r0, #12
}
   26a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026a44 <ull_cp_terminate>:
{
   26a44:	b538      	push	{r3, r4, r5, lr}
   26a46:	4604      	mov	r4, r0
   26a48:	460d      	mov	r5, r1
	llcp_lr_abort(conn);
   26a4a:	f001 f995 	bl	27d78 <llcp_lr_abort>
	ctx = llcp_create_local_procedure(PROC_TERMINATE);
   26a4e:	200a      	movs	r0, #10
   26a50:	f7ff fe40 	bl	266d4 <llcp_create_local_procedure>
	if (!ctx) {
   26a54:	b130      	cbz	r0, 26a64 <ull_cp_terminate+0x20>
   26a56:	4601      	mov	r1, r0
	ctx->data.term.error_code = error_code;
   26a58:	7705      	strb	r5, [r0, #28]
	llcp_lr_enqueue(conn, ctx);
   26a5a:	4620      	mov	r0, r4
   26a5c:	f000 ffa8 	bl	279b0 <llcp_lr_enqueue>
	return BT_HCI_ERR_SUCCESS;
   26a60:	2000      	movs	r0, #0
}
   26a62:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   26a64:	200c      	movs	r0, #12
}
   26a66:	bd38      	pop	{r3, r4, r5, pc}

00026a68 <ull_cp_chan_map_update_pending>:
{
   26a68:	b508      	push	{r3, lr}
	if (conn->lll.role == BT_HCI_ROLE_CENTRAL) {
   26a6a:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   26a6e:	2b00      	cmp	r3, #0
   26a70:	db08      	blt.n	26a84 <ull_cp_chan_map_update_pending+0x1c>
		ctx = llcp_lr_peek(conn);
   26a72:	f000 ffd1 	bl	27a18 <llcp_lr_peek>
	if (ctx && ctx->proc == PROC_CHAN_MAP_UPDATE) {
   26a76:	b120      	cbz	r0, 26a82 <ull_cp_chan_map_update_pending+0x1a>
   26a78:	7a03      	ldrb	r3, [r0, #8]
   26a7a:	2b0b      	cmp	r3, #11
		return ctx->data.chmu.chm;
   26a7c:	bf0c      	ite	eq
   26a7e:	301e      	addeq	r0, #30
	return NULL;
   26a80:	2000      	movne	r0, #0
}
   26a82:	bd08      	pop	{r3, pc}
		ctx = llcp_rr_peek(conn);
   26a84:	f002 fc3c 	bl	29300 <llcp_rr_peek>
   26a88:	e7f5      	b.n	26a76 <ull_cp_chan_map_update_pending+0xe>
   26a8a:	bf00      	nop

00026a8c <ull_cp_data_length_update>:
{
   26a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26a8e:	4605      	mov	r5, r0
	ctx = llcp_create_local_procedure(PROC_DATA_LENGTH_UPDATE);
   26a90:	200c      	movs	r0, #12
{
   26a92:	460e      	mov	r6, r1
   26a94:	4617      	mov	r7, r2
	ctx = llcp_create_local_procedure(PROC_DATA_LENGTH_UPDATE);
   26a96:	f7ff fe1d 	bl	266d4 <llcp_create_local_procedure>
	if (!ctx) {
   26a9a:	b158      	cbz	r0, 26ab4 <ull_cp_data_length_update+0x28>
   26a9c:	4604      	mov	r4, r0
	ull_dle_local_tx_update(conn, max_tx_octets, max_tx_time);
   26a9e:	463a      	mov	r2, r7
   26aa0:	4631      	mov	r1, r6
   26aa2:	4628      	mov	r0, r5
   26aa4:	f7fe fc5c 	bl	25360 <ull_dle_local_tx_update>
	llcp_lr_enqueue(conn, ctx);
   26aa8:	4628      	mov	r0, r5
   26aaa:	4621      	mov	r1, r4
   26aac:	f000 ff80 	bl	279b0 <llcp_lr_enqueue>
	return BT_HCI_ERR_SUCCESS;
   26ab0:	2000      	movs	r0, #0
}
   26ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   26ab4:	200c      	movs	r0, #12
}
   26ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026ab8 <ull_cp_ltk_req_reply>:
{
   26ab8:	b570      	push	{r4, r5, r6, lr}
   26aba:	4605      	mov	r5, r0
   26abc:	460e      	mov	r6, r1
	ctx = llcp_rr_peek(conn);
   26abe:	f002 fc1f 	bl	29300 <llcp_rr_peek>
	if (ctx && (ctx->proc == PROC_ENCRYPTION_START || ctx->proc == PROC_ENCRYPTION_PAUSE) &&
   26ac2:	b120      	cbz	r0, 26ace <ull_cp_ltk_req_reply+0x16>
   26ac4:	7a03      	ldrb	r3, [r0, #8]
   26ac6:	3b05      	subs	r3, #5
   26ac8:	2b01      	cmp	r3, #1
   26aca:	4604      	mov	r4, r0
   26acc:	d901      	bls.n	26ad2 <ull_cp_ltk_req_reply+0x1a>
	return BT_HCI_ERR_CMD_DISALLOWED;
   26ace:	200c      	movs	r0, #12
}
   26ad0:	bd70      	pop	{r4, r5, r6, pc}
	    llcp_rp_enc_ltk_req_reply_allowed(conn, ctx)) {
   26ad2:	4601      	mov	r1, r0
   26ad4:	4628      	mov	r0, r5
   26ad6:	f7ff fc8f 	bl	263f8 <llcp_rp_enc_ltk_req_reply_allowed>
	if (ctx && (ctx->proc == PROC_ENCRYPTION_START || ctx->proc == PROC_ENCRYPTION_PAUSE) &&
   26ada:	2800      	cmp	r0, #0
   26adc:	d0f7      	beq.n	26ace <ull_cp_ltk_req_reply+0x16>
		memcpy(ctx->data.enc.ltk, ltk, sizeof(ctx->data.enc.ltk));
   26ade:	2210      	movs	r2, #16
   26ae0:	4631      	mov	r1, r6
   26ae2:	f104 0027 	add.w	r0, r4, #39	; 0x27
   26ae6:	f00e fd26 	bl	35536 <memcpy>
		llcp_rp_enc_ltk_req_reply(conn, ctx);
   26aea:	4628      	mov	r0, r5
   26aec:	4621      	mov	r1, r4
   26aee:	f7ff fc7b 	bl	263e8 <llcp_rp_enc_ltk_req_reply>
		return BT_HCI_ERR_SUCCESS;
   26af2:	2000      	movs	r0, #0
}
   26af4:	bd70      	pop	{r4, r5, r6, pc}
   26af6:	bf00      	nop

00026af8 <ull_cp_ltk_req_neq_reply>:
{
   26af8:	b538      	push	{r3, r4, r5, lr}
   26afa:	4605      	mov	r5, r0
	ctx = llcp_rr_peek(conn);
   26afc:	f002 fc00 	bl	29300 <llcp_rr_peek>
	if (ctx && (ctx->proc == PROC_ENCRYPTION_START || ctx->proc == PROC_ENCRYPTION_PAUSE) &&
   26b00:	b120      	cbz	r0, 26b0c <ull_cp_ltk_req_neq_reply+0x14>
   26b02:	7a03      	ldrb	r3, [r0, #8]
   26b04:	3b05      	subs	r3, #5
   26b06:	2b01      	cmp	r3, #1
   26b08:	4604      	mov	r4, r0
   26b0a:	d901      	bls.n	26b10 <ull_cp_ltk_req_neq_reply+0x18>
	return BT_HCI_ERR_CMD_DISALLOWED;
   26b0c:	200c      	movs	r0, #12
}
   26b0e:	bd38      	pop	{r3, r4, r5, pc}
	    llcp_rp_enc_ltk_req_reply_allowed(conn, ctx)) {
   26b10:	4601      	mov	r1, r0
   26b12:	4628      	mov	r0, r5
   26b14:	f7ff fc70 	bl	263f8 <llcp_rp_enc_ltk_req_reply_allowed>
	if (ctx && (ctx->proc == PROC_ENCRYPTION_START || ctx->proc == PROC_ENCRYPTION_PAUSE) &&
   26b18:	2800      	cmp	r0, #0
   26b1a:	d0f7      	beq.n	26b0c <ull_cp_ltk_req_neq_reply+0x14>
		llcp_rp_enc_ltk_req_neg_reply(conn, ctx);
   26b1c:	4628      	mov	r0, r5
   26b1e:	4621      	mov	r1, r4
   26b20:	f7ff fc66 	bl	263f0 <llcp_rp_enc_ltk_req_neg_reply>
		return BT_HCI_ERR_SUCCESS;
   26b24:	2000      	movs	r0, #0
}
   26b26:	bd38      	pop	{r3, r4, r5, pc}

00026b28 <ull_cp_conn_update>:
{
   26b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26b2c:	4605      	mov	r5, r0
	return (conn->llcp.fex.features_used & LL_FEAT_BIT_CONN_PARAM_REQ) != 0;
   26b2e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   26b32:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   26b36:	9e09      	ldr	r6, [sp, #36]	; 0x24
   26b38:	469a      	mov	sl, r3
	if (feature_conn_param_req(conn)) {
   26b3a:	0783      	lsls	r3, r0, #30
{
   26b3c:	4688      	mov	r8, r1
   26b3e:	4617      	mov	r7, r2
	if (feature_conn_param_req(conn)) {
   26b40:	d42f      	bmi.n	26ba2 <ull_cp_conn_update+0x7a>
	} else if (conn->lll.role == BT_HCI_ROLE_CENTRAL) {
   26b42:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   26b46:	2b00      	cmp	r3, #0
   26b48:	db4a      	blt.n	26be0 <ull_cp_conn_update+0xb8>
		ctx = llcp_create_local_procedure(PROC_CONN_UPDATE);
   26b4a:	2008      	movs	r0, #8
   26b4c:	f7ff fdc2 	bl	266d4 <llcp_create_local_procedure>
   26b50:	4604      	mov	r4, r0
	if (!ctx) {
   26b52:	2c00      	cmp	r4, #0
   26b54:	d052      	beq.n	26bfc <ull_cp_conn_update+0xd4>
	if (ctx->proc == PROC_CONN_UPDATE) {
   26b56:	7a23      	ldrb	r3, [r4, #8]
   26b58:	2b08      	cmp	r3, #8
   26b5a:	d027      	beq.n	26bac <ull_cp_conn_update+0x84>
	} else if (ctx->proc == PROC_CONN_PARAM_REQ) {
   26b5c:	2b09      	cmp	r3, #9
   26b5e:	d131      	bne.n	26bc4 <ull_cp_conn_update+0x9c>
		ctx->data.cu.interval_min = interval_min;
   26b60:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
		ctx->data.cu.interval_max = interval_max;
   26b64:	8527      	strh	r7, [r4, #40]	; 0x28
		ctx->data.cu.latency = latency;
   26b66:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
		ctx->data.cu.timeout = timeout;
   26b6a:	f8a4 902c 	strh.w	r9, [r4, #44]	; 0x2c
		ctx->data.cu.offsets[0] = offsets ? offsets[0] : 0x0000;
   26b6e:	2e00      	cmp	r6, #0
   26b70:	d039      	beq.n	26be6 <ull_cp_conn_update+0xbe>
   26b72:	8833      	ldrh	r3, [r6, #0]
   26b74:	8663      	strh	r3, [r4, #50]	; 0x32
		ctx->data.cu.offsets[1] = offsets ? offsets[1] : 0xffff;
   26b76:	8873      	ldrh	r3, [r6, #2]
   26b78:	86a3      	strh	r3, [r4, #52]	; 0x34
		ctx->data.cu.offsets[2] = offsets ? offsets[2] : 0xffff;
   26b7a:	88b3      	ldrh	r3, [r6, #4]
   26b7c:	86e3      	strh	r3, [r4, #54]	; 0x36
		ctx->data.cu.offsets[3] = offsets ? offsets[3] : 0xffff;
   26b7e:	88f3      	ldrh	r3, [r6, #6]
   26b80:	8723      	strh	r3, [r4, #56]	; 0x38
		ctx->data.cu.offsets[4] = offsets ? offsets[4] : 0xffff;
   26b82:	8933      	ldrh	r3, [r6, #8]
   26b84:	8763      	strh	r3, [r4, #58]	; 0x3a
		ctx->data.cu.offsets[5] = offsets ? offsets[5] : 0xffff;
   26b86:	8973      	ldrh	r3, [r6, #10]
   26b88:	87a3      	strh	r3, [r4, #60]	; 0x3c
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   26b8a:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   26b8e:	2b00      	cmp	r3, #0
   26b90:	da11      	bge.n	26bb6 <ull_cp_conn_update+0x8e>
			uint16_t handle = ll_conn_handle_get(conn);
   26b92:	4628      	mov	r0, r5
   26b94:	f7fd fc30 	bl	243f8 <ll_conn_handle_get>
   26b98:	4601      	mov	r1, r0
			ull_periph_latency_cancel(conn, handle);
   26b9a:	4628      	mov	r0, r5
   26b9c:	f002 fd60 	bl	29660 <ull_periph_latency_cancel>
   26ba0:	e009      	b.n	26bb6 <ull_cp_conn_update+0x8e>
		ctx = llcp_create_local_procedure(PROC_CONN_PARAM_REQ);
   26ba2:	2009      	movs	r0, #9
   26ba4:	f7ff fd96 	bl	266d4 <llcp_create_local_procedure>
   26ba8:	4604      	mov	r4, r0
   26baa:	e7d2      	b.n	26b52 <ull_cp_conn_update+0x2a>
		ctx->data.cu.interval_max = interval_max;
   26bac:	8527      	strh	r7, [r4, #40]	; 0x28
		ctx->data.cu.latency = latency;
   26bae:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
		ctx->data.cu.timeout = timeout;
   26bb2:	f8a4 902c 	strh.w	r9, [r4, #44]	; 0x2c
	llcp_lr_enqueue(conn, ctx);
   26bb6:	4628      	mov	r0, r5
   26bb8:	4621      	mov	r1, r4
   26bba:	f000 fef9 	bl	279b0 <llcp_lr_enqueue>
	return BT_HCI_ERR_SUCCESS;
   26bbe:	2000      	movs	r0, #0
}
   26bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LL_ASSERT(0); /* Unknown procedure */
   26bc4:	4a0e      	ldr	r2, [pc, #56]	; (26c00 <ull_cp_conn_update+0xd8>)
   26bc6:	490f      	ldr	r1, [pc, #60]	; (26c04 <ull_cp_conn_update+0xdc>)
   26bc8:	480f      	ldr	r0, [pc, #60]	; (26c08 <ull_cp_conn_update+0xe0>)
   26bca:	f240 4334 	movw	r3, #1076	; 0x434
   26bce:	f00c fc23 	bl	33418 <assert_print>
   26bd2:	4040      	eors	r0, r0
   26bd4:	f380 8811 	msr	BASEPRI, r0
   26bd8:	f04f 0003 	mov.w	r0, #3
   26bdc:	df02      	svc	2
   26bde:	e7ea      	b.n	26bb6 <ull_cp_conn_update+0x8e>
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   26be0:	201a      	movs	r0, #26
}
   26be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ctx->data.cu.offsets[0] = offsets ? offsets[0] : 0x0000;
   26be6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26bea:	4a08      	ldr	r2, [pc, #32]	; (26c0c <ull_cp_conn_update+0xe4>)
   26bec:	f8c4 3036 	str.w	r3, [r4, #54]	; 0x36
		ctx->data.cu.offsets[4] = offsets ? offsets[4] : 0xffff;
   26bf0:	8763      	strh	r3, [r4, #58]	; 0x3a
		ctx->data.cu.offsets[0] = offsets ? offsets[0] : 0x0000;
   26bf2:	f8c4 2032 	str.w	r2, [r4, #50]	; 0x32
		ctx->data.cu.offsets[5] = offsets ? offsets[5] : 0xffff;
   26bf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   26bfa:	e7c5      	b.n	26b88 <ull_cp_conn_update+0x60>
		return BT_HCI_ERR_CMD_DISALLOWED;
   26bfc:	200c      	movs	r0, #12
   26bfe:	e7df      	b.n	26bc0 <ull_cp_conn_update+0x98>
   26c00:	0003a8a4 	.word	0x0003a8a4
   26c04:	0003a004 	.word	0x0003a004
   26c08:	00039f74 	.word	0x00039f74
   26c0c:	ffff0000 	.word	0xffff0000

00026c10 <ull_cp_remote_dle_pending>:
{
   26c10:	b508      	push	{r3, lr}
	ctx = llcp_rr_peek(conn);
   26c12:	f002 fb75 	bl	29300 <llcp_rr_peek>
	return (ctx && ctx->proc == PROC_DATA_LENGTH_UPDATE);
   26c16:	b128      	cbz	r0, 26c24 <ull_cp_remote_dle_pending+0x14>
   26c18:	7a00      	ldrb	r0, [r0, #8]
   26c1a:	f1a0 000c 	sub.w	r0, r0, #12
   26c1e:	fab0 f080 	clz	r0, r0
   26c22:	0940      	lsrs	r0, r0, #5
}
   26c24:	bd08      	pop	{r3, pc}
   26c26:	bf00      	nop

00026c28 <ull_cp_conn_param_req_reply>:
{
   26c28:	b510      	push	{r4, lr}
   26c2a:	4604      	mov	r4, r0
	ctx = llcp_rr_peek(conn);
   26c2c:	f002 fb68 	bl	29300 <llcp_rr_peek>
	if (ctx && ctx->proc == PROC_CONN_PARAM_REQ) {
   26c30:	b110      	cbz	r0, 26c38 <ull_cp_conn_param_req_reply+0x10>
   26c32:	7a03      	ldrb	r3, [r0, #8]
   26c34:	2b09      	cmp	r3, #9
   26c36:	d000      	beq.n	26c3a <ull_cp_conn_param_req_reply+0x12>
}
   26c38:	bd10      	pop	{r4, pc}
		llcp_rp_conn_param_req_reply(conn, ctx);
   26c3a:	4601      	mov	r1, r0
   26c3c:	4620      	mov	r0, r4
}
   26c3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		llcp_rp_conn_param_req_reply(conn, ctx);
   26c42:	f002 b89d 	b.w	28d80 <llcp_rp_conn_param_req_reply>
   26c46:	bf00      	nop

00026c48 <ull_cp_conn_param_req_neg_reply>:
{
   26c48:	b538      	push	{r3, r4, r5, lr}
   26c4a:	4604      	mov	r4, r0
   26c4c:	460d      	mov	r5, r1
	ctx = llcp_rr_peek(conn);
   26c4e:	f002 fb57 	bl	29300 <llcp_rr_peek>
	if (ctx && ctx->proc == PROC_CONN_PARAM_REQ) {
   26c52:	b110      	cbz	r0, 26c5a <ull_cp_conn_param_req_neg_reply+0x12>
   26c54:	7a03      	ldrb	r3, [r0, #8]
   26c56:	2b09      	cmp	r3, #9
   26c58:	d000      	beq.n	26c5c <ull_cp_conn_param_req_neg_reply+0x14>
}
   26c5a:	bd38      	pop	{r3, r4, r5, pc}
		ctx->data.cu.error = error_code;
   26c5c:	7705      	strb	r5, [r0, #28]
		llcp_rp_conn_param_req_neg_reply(conn, ctx);
   26c5e:	4601      	mov	r1, r0
   26c60:	4620      	mov	r0, r4
}
   26c62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		llcp_rp_conn_param_req_neg_reply(conn, ctx);
   26c66:	f002 b88f 	b.w	28d88 <llcp_rp_conn_param_req_neg_reply>
   26c6a:	bf00      	nop

00026c6c <ull_cp_remote_cpr_pending>:
{
   26c6c:	b508      	push	{r3, lr}
	ctx = llcp_rr_peek(conn);
   26c6e:	f002 fb47 	bl	29300 <llcp_rr_peek>
	return (ctx && ctx->proc == PROC_CONN_PARAM_REQ);
   26c72:	b128      	cbz	r0, 26c80 <ull_cp_remote_cpr_pending+0x14>
   26c74:	7a00      	ldrb	r0, [r0, #8]
   26c76:	f1a0 0009 	sub.w	r0, r0, #9
   26c7a:	fab0 f080 	clz	r0, r0
   26c7e:	0940      	lsrs	r0, r0, #5
}
   26c80:	bd08      	pop	{r3, pc}
   26c82:	bf00      	nop

00026c84 <ull_cp_tx_ack>:
	/* consider unsupported and unknows PDUs as valid */
	return true;
}

void ull_cp_tx_ack(struct ll_conn *conn, struct node_tx *tx)
{
   26c84:	b538      	push	{r3, r4, r5, lr}
   26c86:	4605      	mov	r5, r0
   26c88:	460c      	mov	r4, r1
	struct proc_ctx *ctx;

	ctx = llcp_lr_peek(conn);
   26c8a:	f000 fec5 	bl	27a18 <llcp_lr_peek>
	if (ctx && ctx->tx_ack == tx) {
   26c8e:	b110      	cbz	r0, 26c96 <ull_cp_tx_ack+0x12>
   26c90:	6943      	ldr	r3, [r0, #20]
   26c92:	42a3      	cmp	r3, r4
   26c94:	d00e      	beq.n	26cb4 <ull_cp_tx_ack+0x30>
		/* TX ack re. local request */
		llcp_lr_tx_ack(conn, ctx, tx);
	}

	ctx = llcp_rr_peek(conn);
   26c96:	4628      	mov	r0, r5
   26c98:	f002 fb32 	bl	29300 <llcp_rr_peek>
	if (ctx && ctx->tx_ack == tx) {
   26c9c:	b110      	cbz	r0, 26ca4 <ull_cp_tx_ack+0x20>
   26c9e:	6943      	ldr	r3, [r0, #20]
   26ca0:	42a3      	cmp	r3, r4
   26ca2:	d000      	beq.n	26ca6 <ull_cp_tx_ack+0x22>
		/* TX ack re. remote response */
		llcp_rr_tx_ack(conn, ctx, tx);
	}
}
   26ca4:	bd38      	pop	{r3, r4, r5, pc}
		llcp_rr_tx_ack(conn, ctx, tx);
   26ca6:	4622      	mov	r2, r4
   26ca8:	4601      	mov	r1, r0
   26caa:	4628      	mov	r0, r5
}
   26cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		llcp_rr_tx_ack(conn, ctx, tx);
   26cb0:	f002 bb7c 	b.w	293ac <llcp_rr_tx_ack>
		llcp_lr_tx_ack(conn, ctx, tx);
   26cb4:	4601      	mov	r1, r0
   26cb6:	4622      	mov	r2, r4
   26cb8:	4628      	mov	r0, r5
   26cba:	f000 ffd1 	bl	27c60 <llcp_lr_tx_ack>
   26cbe:	e7ea      	b.n	26c96 <ull_cp_tx_ack+0x12>

00026cc0 <ull_cp_tx_ntf>:

void ull_cp_tx_ntf(struct ll_conn *conn)
{
   26cc0:	b510      	push	{r4, lr}
   26cc2:	4604      	mov	r4, r0
	struct proc_ctx *ctx;

	ctx = llcp_lr_peek(conn);
   26cc4:	f000 fea8 	bl	27a18 <llcp_lr_peek>
	if (ctx) {
   26cc8:	b118      	cbz	r0, 26cd2 <ull_cp_tx_ntf+0x12>
   26cca:	4601      	mov	r1, r0
		/* TX notifications towards Host */
		llcp_lr_tx_ntf(conn, ctx);
   26ccc:	4620      	mov	r0, r4
   26cce:	f000 ffe7 	bl	27ca0 <llcp_lr_tx_ntf>
	}

	ctx = llcp_rr_peek(conn);
   26cd2:	4620      	mov	r0, r4
   26cd4:	f002 fb14 	bl	29300 <llcp_rr_peek>
	if (ctx) {
   26cd8:	4601      	mov	r1, r0
   26cda:	b120      	cbz	r0, 26ce6 <ull_cp_tx_ntf+0x26>
		/* TX notifications towards Host */
		llcp_rr_tx_ntf(conn, ctx);
   26cdc:	4620      	mov	r0, r4
	}
}
   26cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		llcp_rr_tx_ntf(conn, ctx);
   26ce2:	f002 bb79 	b.w	293d8 <llcp_rr_tx_ntf>
}
   26ce6:	bd10      	pop	{r4, pc}

00026ce8 <ull_cp_rx>:

void ull_cp_rx(struct ll_conn *conn, struct node_rx_pdu *rx)
{
   26ce8:	b570      	push	{r4, r5, r6, lr}
	if (pdu->len < 1) {
   26cea:	7f4b      	ldrb	r3, [r1, #29]
{
   26cec:	460c      	mov	r4, r1
   26cee:	4605      	mov	r5, r0
	if (pdu->len < 1) {
   26cf0:	2b00      	cmp	r3, #0
   26cf2:	d03e      	beq.n	26d72 <ull_cp_rx+0x8a>
	if (pdu->llctrl.opcode < ARRAY_SIZE(pdu_validate)) {
   26cf4:	7fcb      	ldrb	r3, [r1, #31]
   26cf6:	2b1e      	cmp	r3, #30
   26cf8:	d929      	bls.n	26d4e <ull_cp_rx+0x66>
		/*  Process LL_TERMINATE_IND PDU's as new procedure */
		ctx_l = NULL;
		ctx_r = NULL;
	} else {
		/* Query local and remote activity */
		ctx_l = llcp_lr_peek(conn);
   26cfa:	4628      	mov	r0, r5
   26cfc:	f000 fe8c 	bl	27a18 <llcp_lr_peek>
   26d00:	4606      	mov	r6, r0
		ctx_r = llcp_rr_peek(conn);
   26d02:	4628      	mov	r0, r5
   26d04:	f002 fafc 	bl	29300 <llcp_rr_peek>
   26d08:	4601      	mov	r1, r0
	}

	if (ctx_l) {
   26d0a:	2e00      	cmp	r6, #0
   26d0c:	d05c      	beq.n	26dc8 <ull_cp_rx+0xe0>
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
   26d0e:	7af2      	ldrb	r2, [r6, #11]
   26d10:	7fe3      	ldrb	r3, [r4, #31]
		/* Local active procedure */

		if (ctx_r) {
   26d12:	2800      	cmp	r0, #0
   26d14:	d046      	beq.n	26da4 <ull_cp_rx+0xbc>
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
   26d16:	4293      	cmp	r3, r2
   26d18:	7ac0      	ldrb	r0, [r0, #11]
   26d1a:	d06f      	beq.n	26dfc <ull_cp_rx+0x114>
   26d1c:	7b32      	ldrb	r2, [r6, #12]
   26d1e:	2a00      	cmp	r2, #0
   26d20:	d05a      	beq.n	26dd8 <ull_cp_rx+0xf0>
   26d22:	4298      	cmp	r0, r3
   26d24:	d077      	beq.n	26e16 <ull_cp_rx+0x12e>
   26d26:	7b0a      	ldrb	r2, [r1, #12]
   26d28:	2a00      	cmp	r2, #0
   26d2a:	d174      	bne.n	26e16 <ull_cp_rx+0x12e>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   26d2c:	2b07      	cmp	r3, #7
   26d2e:	f000 80a3 	beq.w	26e78 <ull_cp_rx+0x190>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND) &&
   26d32:	2b11      	cmp	r3, #17
   26d34:	d104      	bne.n	26d40 <ull_cp_rx+0x58>
   26d36:	f894 2020 	ldrb.w	r2, [r4, #32]
   26d3a:	7b4b      	ldrb	r3, [r1, #13]
   26d3c:	429a      	cmp	r2, r3
   26d3e:	d06a      	beq.n	26e16 <ull_cp_rx+0x12e>
				 * Expected local procedure PDU
				 * No remote active procedure
				 */

				/* Process PDU in local procedure */
				llcp_lr_rx(conn, ctx_l, rx);
   26d40:	4622      	mov	r2, r4
   26d42:	4631      	mov	r1, r6
   26d44:	4628      	mov	r0, r5
		 */

		/* Process PDU as a new remote request */
		llcp_rr_new(conn, rx, pdu_valid);
	}
}
   26d46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				llcp_lr_rx(conn, ctx_l, rx);
   26d4a:	f000 bf51 	b.w	27bf0 <llcp_lr_rx>
		cb = pdu_validate[pdu->llctrl.opcode].validate_cb;
   26d4e:	4a4e      	ldr	r2, [pc, #312]	; (26e88 <ull_cp_rx+0x1a0>)
   26d50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
		if (cb) {
   26d54:	b122      	cbz	r2, 26d60 <ull_cp_rx+0x78>
			return cb(pdu);
   26d56:	f101 001c 	add.w	r0, r1, #28
   26d5a:	4790      	blx	r2
	if (!pdu_valid) {
   26d5c:	b158      	cbz	r0, 26d76 <ull_cp_rx+0x8e>
	return pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_TERMINATE_IND;
   26d5e:	7fe3      	ldrb	r3, [r4, #31]
	} else if (pdu_is_terminate(pdu)) {
   26d60:	2b02      	cmp	r3, #2
   26d62:	d1ca      	bne.n	26cfa <ull_cp_rx+0x12>
{
   26d64:	2201      	movs	r2, #1
		llcp_rr_new(conn, rx, pdu_valid);
   26d66:	4621      	mov	r1, r4
   26d68:	4628      	mov	r0, r5
}
   26d6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		llcp_rr_new(conn, rx, pdu_valid);
   26d6e:	f002 bb5d 	b.w	2942c <llcp_rr_new>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
   26d72:	23ff      	movs	r3, #255	; 0xff
   26d74:	77cb      	strb	r3, [r1, #31]
		ctx = llcp_lr_peek(conn);
   26d76:	4628      	mov	r0, r5
   26d78:	f000 fe4e 	bl	27a18 <llcp_lr_peek>
		if (ctx && pdu_is_expected(pdu, ctx)) {
   26d7c:	b128      	cbz	r0, 26d8a <ull_cp_rx+0xa2>
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
   26d7e:	7fe2      	ldrb	r2, [r4, #31]
   26d80:	7ac3      	ldrb	r3, [r0, #11]
   26d82:	429a      	cmp	r2, r3
   26d84:	d00d      	beq.n	26da2 <ull_cp_rx+0xba>
   26d86:	7b03      	ldrb	r3, [r0, #12]
   26d88:	b95b      	cbnz	r3, 26da2 <ull_cp_rx+0xba>
		ctx = llcp_rr_peek(conn);
   26d8a:	4628      	mov	r0, r5
   26d8c:	f002 fab8 	bl	29300 <llcp_rr_peek>
		if (ctx && pdu_is_expected(pdu, ctx)) {
   26d90:	2800      	cmp	r0, #0
   26d92:	d05e      	beq.n	26e52 <ull_cp_rx+0x16a>
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
   26d94:	7fe2      	ldrb	r2, [r4, #31]
   26d96:	7ac3      	ldrb	r3, [r0, #11]
   26d98:	429a      	cmp	r2, r3
   26d9a:	d002      	beq.n	26da2 <ull_cp_rx+0xba>
   26d9c:	7b02      	ldrb	r2, [r0, #12]
   26d9e:	2a00      	cmp	r2, #0
   26da0:	d0e1      	beq.n	26d66 <ull_cp_rx+0x7e>
}
   26da2:	bd70      	pop	{r4, r5, r6, pc}
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
   26da4:	4293      	cmp	r3, r2
   26da6:	d0cb      	beq.n	26d40 <ull_cp_rx+0x58>
   26da8:	7b32      	ldrb	r2, [r6, #12]
   26daa:	2a00      	cmp	r2, #0
   26dac:	d1c8      	bne.n	26d40 <ull_cp_rx+0x58>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   26dae:	2b07      	cmp	r3, #7
   26db0:	d05c      	beq.n	26e6c <ull_cp_rx+0x184>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND) &&
   26db2:	2b11      	cmp	r3, #17
   26db4:	d05a      	beq.n	26e6c <ull_cp_rx+0x184>
	return (pdu_is_reject_ext(pdu, ctx) || pdu_is_reject(pdu, ctx));
   26db6:	2b0d      	cmp	r3, #13
   26db8:	d0c2      	beq.n	26d40 <ull_cp_rx+0x58>
				llcp_rr_new(conn, rx, true);
   26dba:	4621      	mov	r1, r4
   26dbc:	4628      	mov	r0, r5
   26dbe:	2201      	movs	r2, #1
}
   26dc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				llcp_rr_new(conn, rx, true);
   26dc4:	f002 bb32 	b.w	2942c <llcp_rr_new>
	} else if (ctx_r) {
   26dc8:	2800      	cmp	r0, #0
   26dca:	d0cb      	beq.n	26d64 <ull_cp_rx+0x7c>
		llcp_rr_rx(conn, ctx_r, rx);
   26dcc:	4622      	mov	r2, r4
   26dce:	4628      	mov	r0, r5
}
   26dd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		llcp_rr_rx(conn, ctx_r, rx);
   26dd4:	f002 baaa 	b.w	2932c <llcp_rr_rx>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   26dd8:	2b07      	cmp	r3, #7
   26dda:	d03c      	beq.n	26e56 <ull_cp_rx+0x16e>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND) &&
   26ddc:	2b11      	cmp	r3, #17
   26dde:	d028      	beq.n	26e32 <ull_cp_rx+0x14a>
	return (pdu_is_reject_ext(pdu, ctx) || pdu_is_reject(pdu, ctx));
   26de0:	f1b3 020d 	subs.w	r2, r3, #13
   26de4:	bf18      	it	ne
   26de6:	2201      	movne	r2, #1
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
   26de8:	4298      	cmp	r0, r3
   26dea:	d02f      	beq.n	26e4c <ull_cp_rx+0x164>
   26dec:	7b0b      	ldrb	r3, [r1, #12]
   26dee:	bb6b      	cbnz	r3, 26e4c <ull_cp_rx+0x164>
			if (unexpected_l && unexpected_r) {
   26df0:	2a00      	cmp	r2, #0
   26df2:	d0a5      	beq.n	26d40 <ull_cp_rx+0x58>
				conn->llcp_terminate.reason_final = BT_HCI_ERR_LOCALHOST_TERM_CONN;
   26df4:	2316      	movs	r3, #22
   26df6:	f885 3148 	strb.w	r3, [r5, #328]	; 0x148
}
   26dfa:	bd70      	pop	{r4, r5, r6, pc}
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
   26dfc:	4298      	cmp	r0, r3
   26dfe:	d00a      	beq.n	26e16 <ull_cp_rx+0x12e>
   26e00:	7b0a      	ldrb	r2, [r1, #12]
   26e02:	b942      	cbnz	r2, 26e16 <ull_cp_rx+0x12e>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   26e04:	2b07      	cmp	r3, #7
   26e06:	d037      	beq.n	26e78 <ull_cp_rx+0x190>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND) &&
   26e08:	2b11      	cmp	r3, #17
   26e0a:	d199      	bne.n	26d40 <ull_cp_rx+0x58>
   26e0c:	7b4a      	ldrb	r2, [r1, #13]
   26e0e:	f894 3020 	ldrb.w	r3, [r4, #32]
   26e12:	429a      	cmp	r2, r3
   26e14:	d194      	bne.n	26d40 <ull_cp_rx+0x58>
				LL_ASSERT(0);
   26e16:	4a1d      	ldr	r2, [pc, #116]	; (26e8c <ull_cp_rx+0x1a4>)
   26e18:	491d      	ldr	r1, [pc, #116]	; (26e90 <ull_cp_rx+0x1a8>)
   26e1a:	481e      	ldr	r0, [pc, #120]	; (26e94 <ull_cp_rx+0x1ac>)
   26e1c:	f240 63c6 	movw	r3, #1734	; 0x6c6
   26e20:	f00c fafa 	bl	33418 <assert_print>
   26e24:	4040      	eors	r0, r0
   26e26:	f380 8811 	msr	BASEPRI, r0
   26e2a:	f04f 0003 	mov.w	r0, #3
   26e2e:	df02      	svc	2
}
   26e30:	bd70      	pop	{r4, r5, r6, pc}
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND) &&
   26e32:	7b72      	ldrb	r2, [r6, #13]
   26e34:	f894 3020 	ldrb.w	r3, [r4, #32]
   26e38:	1ad2      	subs	r2, r2, r3
   26e3a:	bf18      	it	ne
   26e3c:	2201      	movne	r2, #1
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
   26e3e:	2811      	cmp	r0, #17
   26e40:	d004      	beq.n	26e4c <ull_cp_rx+0x164>
   26e42:	7b08      	ldrb	r0, [r1, #12]
   26e44:	b910      	cbnz	r0, 26e4c <ull_cp_rx+0x164>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND) &&
   26e46:	7b48      	ldrb	r0, [r1, #13]
   26e48:	4298      	cmp	r0, r3
   26e4a:	d1d1      	bne.n	26df0 <ull_cp_rx+0x108>
			if (unexpected_l && unexpected_r) {
   26e4c:	2a00      	cmp	r2, #0
   26e4e:	d1bd      	bne.n	26dcc <ull_cp_rx+0xe4>
   26e50:	e7e1      	b.n	26e16 <ull_cp_rx+0x12e>
   26e52:	4602      	mov	r2, r0
   26e54:	e787      	b.n	26d66 <ull_cp_rx+0x7e>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   26e56:	7b72      	ldrb	r2, [r6, #13]
   26e58:	f894 3020 	ldrb.w	r3, [r4, #32]
   26e5c:	1ad2      	subs	r2, r2, r3
   26e5e:	bf18      	it	ne
   26e60:	2201      	movne	r2, #1
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
   26e62:	2807      	cmp	r0, #7
   26e64:	d1ed      	bne.n	26e42 <ull_cp_rx+0x15a>
			if (unexpected_l && unexpected_r) {
   26e66:	2a00      	cmp	r2, #0
   26e68:	d1b0      	bne.n	26dcc <ull_cp_rx+0xe4>
   26e6a:	e7d4      	b.n	26e16 <ull_cp_rx+0x12e>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND) &&
   26e6c:	7b72      	ldrb	r2, [r6, #13]
   26e6e:	f894 3020 	ldrb.w	r3, [r4, #32]
   26e72:	429a      	cmp	r2, r3
   26e74:	d1a1      	bne.n	26dba <ull_cp_rx+0xd2>
   26e76:	e763      	b.n	26d40 <ull_cp_rx+0x58>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   26e78:	7b4a      	ldrb	r2, [r1, #13]
   26e7a:	f894 3020 	ldrb.w	r3, [r4, #32]
   26e7e:	429a      	cmp	r2, r3
   26e80:	f47f af5e 	bne.w	26d40 <ull_cp_rx+0x58>
   26e84:	e7c7      	b.n	26e16 <ull_cp_rx+0x12e>
   26e86:	bf00      	nop
   26e88:	0003a8f4 	.word	0x0003a8f4
   26e8c:	0003a8a4 	.word	0x0003a8a4
   26e90:	0003a004 	.word	0x0003a004
   26e94:	00039f74 	.word	0x00039f74

00026e98 <rp_comm_ntf>:
{
	llcp_ntf_encode_length_change(conn, pdu);
}

static void rp_comm_ntf(struct ll_conn *conn, struct proc_ctx *ctx)
{
   26e98:	b570      	push	{r4, r5, r6, lr}
   26e9a:	4605      	mov	r5, r0
   26e9c:	460e      	mov	r6, r1
	struct node_rx_pdu *ntf;
	struct pdu_data *pdu;

	ARG_UNUSED(pdu);
	/* Allocate ntf node */
	ntf = llcp_ntf_alloc();
   26e9e:	f7ff fbf3 	bl	26688 <llcp_ntf_alloc>
	LL_ASSERT(ntf);
   26ea2:	4604      	mov	r4, r0
   26ea4:	b320      	cbz	r0, 26ef0 <rp_comm_ntf+0x58>

	ntf->hdr.type = NODE_RX_TYPE_DC_PDU;
   26ea6:	2303      	movs	r3, #3
   26ea8:	7123      	strb	r3, [r4, #4]
	ntf->hdr.handle = conn->lll.handle;
   26eaa:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
   26eac:	80e3      	strh	r3, [r4, #6]
	pdu = (struct pdu_data *)ntf->pdu;
	switch (ctx->proc) {
   26eae:	7a33      	ldrb	r3, [r6, #8]
   26eb0:	2b0c      	cmp	r3, #12
   26eb2:	d012      	beq.n	26eda <rp_comm_ntf+0x42>
	case PROC_DATA_LENGTH_UPDATE:
		rp_comm_ntf_length_change(conn, ctx, pdu);
		break;
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
	default:
		LL_ASSERT(0);
   26eb4:	4a15      	ldr	r2, [pc, #84]	; (26f0c <rp_comm_ntf+0x74>)
   26eb6:	4916      	ldr	r1, [pc, #88]	; (26f10 <rp_comm_ntf+0x78>)
   26eb8:	4816      	ldr	r0, [pc, #88]	; (26f14 <rp_comm_ntf+0x7c>)
   26eba:	f240 4389 	movw	r3, #1161	; 0x489
   26ebe:	f00c faab 	bl	33418 <assert_print>
   26ec2:	4040      	eors	r0, r0
   26ec4:	f380 8811 	msr	BASEPRI, r0
   26ec8:	f04f 0003 	mov.w	r0, #3
   26ecc:	df02      	svc	2
		break;
	}

	/* Enqueue notification towards LL */
	ll_rx_put_sched(ntf->hdr.link, ntf);
   26ece:	6820      	ldr	r0, [r4, #0]
   26ed0:	4621      	mov	r1, r4
}
   26ed2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_rx_put_sched(ntf->hdr.link, ntf);
   26ed6:	f7fb be29 	b.w	22b2c <ll_rx_put_sched>
	llcp_ntf_encode_length_change(conn, pdu);
   26eda:	f104 011c 	add.w	r1, r4, #28
   26ede:	4628      	mov	r0, r5
   26ee0:	f001 fa18 	bl	28314 <llcp_ntf_encode_length_change>
	ll_rx_put_sched(ntf->hdr.link, ntf);
   26ee4:	6820      	ldr	r0, [r4, #0]
   26ee6:	4621      	mov	r1, r4
}
   26ee8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_rx_put_sched(ntf->hdr.link, ntf);
   26eec:	f7fb be1e 	b.w	22b2c <ll_rx_put_sched>
	LL_ASSERT(ntf);
   26ef0:	4a06      	ldr	r2, [pc, #24]	; (26f0c <rp_comm_ntf+0x74>)
   26ef2:	4909      	ldr	r1, [pc, #36]	; (26f18 <rp_comm_ntf+0x80>)
   26ef4:	4807      	ldr	r0, [pc, #28]	; (26f14 <rp_comm_ntf+0x7c>)
   26ef6:	f240 437a 	movw	r3, #1146	; 0x47a
   26efa:	f00c fa8d 	bl	33418 <assert_print>
   26efe:	4040      	eors	r0, r0
   26f00:	f380 8811 	msr	BASEPRI, r0
   26f04:	f04f 0003 	mov.w	r0, #3
   26f08:	df02      	svc	2
   26f0a:	e7cc      	b.n	26ea6 <rp_comm_ntf+0xe>
   26f0c:	0003a970 	.word	0x0003a970
   26f10:	0003a004 	.word	0x0003a004
   26f14:	00039f74 	.word	0x00039f74
   26f18:	0003a844 	.word	0x0003a844

00026f1c <lp_comm_tx>:
{
   26f1c:	b570      	push	{r4, r5, r6, lr}
   26f1e:	4606      	mov	r6, r0
   26f20:	460c      	mov	r4, r1
	tx = llcp_tx_alloc(conn, ctx);
   26f22:	f7ff fb95 	bl	26650 <llcp_tx_alloc>
	LL_ASSERT(tx);
   26f26:	4605      	mov	r5, r0
   26f28:	2800      	cmp	r0, #0
   26f2a:	d060      	beq.n	26fee <lp_comm_tx+0xd2>
	switch (ctx->proc) {
   26f2c:	7a23      	ldrb	r3, [r4, #8]
   26f2e:	3b01      	subs	r3, #1
	pdu = (struct pdu_data *)tx->pdu;
   26f30:	1d29      	adds	r1, r5, #4
	switch (ctx->proc) {
   26f32:	2b0b      	cmp	r3, #11
   26f34:	d807      	bhi.n	26f46 <lp_comm_tx+0x2a>
   26f36:	e8df f003 	tbb	[pc, r3]
   26f3a:	2620      	.short	0x2620
   26f3c:	0606332c 	.word	0x0606332c
   26f40:	39060606 	.word	0x39060606
   26f44:	4006      	.short	0x4006
		LL_ASSERT(0);
   26f46:	4a30      	ldr	r2, [pc, #192]	; (27008 <lp_comm_tx+0xec>)
   26f48:	4930      	ldr	r1, [pc, #192]	; (2700c <lp_comm_tx+0xf0>)
   26f4a:	4831      	ldr	r0, [pc, #196]	; (27010 <lp_comm_tx+0xf4>)
   26f4c:	23ce      	movs	r3, #206	; 0xce
   26f4e:	f00c fa63 	bl	33418 <assert_print>
   26f52:	4040      	eors	r0, r0
   26f54:	f380 8811 	msr	BASEPRI, r0
   26f58:	f04f 0003 	mov.w	r0, #3
   26f5c:	df02      	svc	2
	ctx->tx_opcode = pdu->llctrl.opcode;
   26f5e:	79eb      	ldrb	r3, [r5, #7]
   26f60:	7363      	strb	r3, [r4, #13]
	llcp_tx_enqueue(conn, tx);
   26f62:	4629      	mov	r1, r5
   26f64:	4630      	mov	r0, r6
   26f66:	f7ff fb91 	bl	2668c <llcp_tx_enqueue>
	if (ctx->proc != PROC_TERMINATE) {
   26f6a:	7a23      	ldrb	r3, [r4, #8]
   26f6c:	2b0a      	cmp	r3, #10
   26f6e:	d02a      	beq.n	26fc6 <lp_comm_tx+0xaa>
		llcp_lr_prt_restart(conn);
   26f70:	4630      	mov	r0, r6
}
   26f72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		llcp_lr_prt_restart(conn);
   26f76:	f000 be2d 	b.w	27bd4 <llcp_lr_prt_restart>
		llcp_pdu_encode_ping_req(pdu);
   26f7a:	4608      	mov	r0, r1
   26f7c:	f000 ff12 	bl	27da4 <llcp_pdu_encode_ping_req>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   26f80:	2313      	movs	r3, #19
   26f82:	72e3      	strb	r3, [r4, #11]
		break;
   26f84:	e7eb      	b.n	26f5e <lp_comm_tx+0x42>
		llcp_pdu_encode_feature_req(conn, pdu);
   26f86:	4630      	mov	r0, r6
   26f88:	f000 ff40 	bl	27e0c <llcp_pdu_encode_feature_req>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   26f8c:	2309      	movs	r3, #9
   26f8e:	72e3      	strb	r3, [r4, #11]
		break;
   26f90:	e7e5      	b.n	26f5e <lp_comm_tx+0x42>
		llcp_pdu_encode_min_used_chans_ind(ctx, pdu);
   26f92:	4620      	mov	r0, r4
   26f94:	f000 ffca 	bl	27f2c <llcp_pdu_encode_min_used_chans_ind>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
   26f98:	23ff      	movs	r3, #255	; 0xff
		ctx->tx_ack = tx;
   26f9a:	6165      	str	r5, [r4, #20]
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
   26f9c:	72e3      	strb	r3, [r4, #11]
		break;
   26f9e:	e7de      	b.n	26f5e <lp_comm_tx+0x42>
		llcp_pdu_encode_version_ind(pdu);
   26fa0:	4608      	mov	r0, r1
   26fa2:	f000 ffe1 	bl	27f68 <llcp_pdu_encode_version_ind>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   26fa6:	230c      	movs	r3, #12
   26fa8:	72e3      	strb	r3, [r4, #11]
		break;
   26faa:	e7d8      	b.n	26f5e <lp_comm_tx+0x42>
		llcp_pdu_encode_terminate_ind(ctx, pdu);
   26fac:	4620      	mov	r0, r4
   26fae:	f000 ffcd 	bl	27f4c <llcp_pdu_encode_terminate_ind>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
   26fb2:	23ff      	movs	r3, #255	; 0xff
		ctx->tx_ack = tx;
   26fb4:	6165      	str	r5, [r4, #20]
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
   26fb6:	72e3      	strb	r3, [r4, #11]
		break;
   26fb8:	e7d1      	b.n	26f5e <lp_comm_tx+0x42>
		llcp_pdu_encode_length_req(conn, pdu);
   26fba:	4630      	mov	r0, r6
   26fbc:	f001 f97a 	bl	282b4 <llcp_pdu_encode_length_req>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   26fc0:	2315      	movs	r3, #21
   26fc2:	72e3      	strb	r3, [r4, #11]
		break;
   26fc4:	e7cb      	b.n	26f5e <lp_comm_tx+0x42>
		const uint32_t conn_interval_us = conn->lll.interval * CONN_INT_UNIT_US;
   26fc6:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
		const uint16_t sto_reload = RADIO_CONN_EVENTS(
   26fc8:	f8b6 1184 	ldrh.w	r1, [r6, #388]	; 0x184
		const uint32_t conn_interval_us = conn->lll.interval * CONN_INT_UNIT_US;
   26fcc:	f240 42e2 	movw	r2, #1250	; 0x4e2
   26fd0:	fb02 f303 	mul.w	r3, r2, r3
		const uint16_t sto_reload = RADIO_CONN_EVENTS(
   26fd4:	f242 7210 	movw	r2, #10000	; 0x2710
   26fd8:	fb02 3101 	mla	r1, r2, r1, r3
   26fdc:	3901      	subs	r1, #1
		llcp_lr_prt_restart_with_value(conn, sto_reload);
   26fde:	4630      	mov	r0, r6
		const uint16_t sto_reload = RADIO_CONN_EVENTS(
   26fe0:	fbb1 f1f3 	udiv	r1, r1, r3
}
   26fe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		llcp_lr_prt_restart_with_value(conn, sto_reload);
   26fe8:	b289      	uxth	r1, r1
   26fea:	f000 bdf9 	b.w	27be0 <llcp_lr_prt_restart_with_value>
	LL_ASSERT(tx);
   26fee:	4a06      	ldr	r2, [pc, #24]	; (27008 <lp_comm_tx+0xec>)
   26ff0:	4908      	ldr	r1, [pc, #32]	; (27014 <lp_comm_tx+0xf8>)
   26ff2:	4807      	ldr	r0, [pc, #28]	; (27010 <lp_comm_tx+0xf4>)
   26ff4:	2393      	movs	r3, #147	; 0x93
   26ff6:	f00c fa0f 	bl	33418 <assert_print>
   26ffa:	4040      	eors	r0, r0
   26ffc:	f380 8811 	msr	BASEPRI, r0
   27000:	f04f 0003 	mov.w	r0, #3
   27004:	df02      	svc	2
   27006:	e791      	b.n	26f2c <lp_comm_tx+0x10>
   27008:	0003a970 	.word	0x0003a970
   2700c:	0003a004 	.word	0x0003a004
   27010:	00039f74 	.word	0x00039f74
   27014:	0003a694 	.word	0x0003a694

00027018 <rp_comm_tx_proxy>:
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static bool rp_comm_tx_proxy(struct ll_conn *conn, struct proc_ctx *ctx, const bool complete)
{
   27018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2701c:	4607      	mov	r7, r0
   2701e:	460c      	mov	r4, r1
   27020:	4616      	mov	r6, r2
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   27022:	f002 f971 	bl	29308 <llcp_rr_ispaused>
   27026:	b128      	cbz	r0, 27034 <rp_comm_tx_proxy+0x1c>
		ctx->state = RP_COMMON_STATE_WAIT_TX;
   27028:	2303      	movs	r3, #3
   2702a:	72a3      	strb	r3, [r4, #10]
		return false;
   2702c:	2500      	movs	r5, #0
		llcp_rr_complete(conn);
		ctx->state = RP_COMMON_STATE_IDLE;
	}

	return true;
}
   2702e:	4628      	mov	r0, r5
   27030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   27034:	4621      	mov	r1, r4
   27036:	4638      	mov	r0, r7
   27038:	f7ff fb02 	bl	26640 <llcp_tx_alloc_peek>
   2703c:	4605      	mov	r5, r0
   2703e:	2800      	cmp	r0, #0
   27040:	d0f2      	beq.n	27028 <rp_comm_tx_proxy+0x10>
	tx = llcp_tx_alloc(conn, ctx);
   27042:	4621      	mov	r1, r4
   27044:	4638      	mov	r0, r7
   27046:	f7ff fb03 	bl	26650 <llcp_tx_alloc>
	LL_ASSERT(tx);
   2704a:	4680      	mov	r8, r0
   2704c:	b380      	cbz	r0, 270b0 <rp_comm_tx_proxy+0x98>
	switch (ctx->proc) {
   2704e:	7a23      	ldrb	r3, [r4, #8]
   27050:	3b01      	subs	r3, #1
	pdu = (struct pdu_data *)tx->pdu;
   27052:	f108 0004 	add.w	r0, r8, #4
	switch (ctx->proc) {
   27056:	2b0e      	cmp	r3, #14
   27058:	d809      	bhi.n	2706e <rp_comm_tx_proxy+0x56>
   2705a:	e8df f003 	tbb	[pc, r3]
   2705e:	413c      	.short	0x413c
   27060:	08084808 	.word	0x08084808
   27064:	08080808 	.word	0x08080808
   27068:	08084d08 	.word	0x08084d08
   2706c:	37          	.byte	0x37
   2706d:	00          	.byte	0x00
		LL_ASSERT(0);
   2706e:	4a27      	ldr	r2, [pc, #156]	; (2710c <rp_comm_tx_proxy+0xf4>)
   27070:	4927      	ldr	r1, [pc, #156]	; (27110 <rp_comm_tx_proxy+0xf8>)
   27072:	4828      	ldr	r0, [pc, #160]	; (27114 <rp_comm_tx_proxy+0xfc>)
   27074:	f240 4354 	movw	r3, #1108	; 0x454
   27078:	f00c f9ce 	bl	33418 <assert_print>
   2707c:	4040      	eors	r0, r0
   2707e:	f380 8811 	msr	BASEPRI, r0
   27082:	f04f 0003 	mov.w	r0, #3
   27086:	df02      	svc	2
	ctx->tx_opcode = pdu->llctrl.opcode;
   27088:	f898 3007 	ldrb.w	r3, [r8, #7]
   2708c:	7363      	strb	r3, [r4, #13]
	llcp_tx_enqueue(conn, tx);
   2708e:	4641      	mov	r1, r8
   27090:	4638      	mov	r0, r7
   27092:	f7ff fafb 	bl	2668c <llcp_tx_enqueue>
	llcp_rr_prt_restart(conn);
   27096:	4638      	mov	r0, r7
   27098:	f002 f93e 	bl	29318 <llcp_rr_prt_restart>
	ctx->state = RP_COMMON_STATE_WAIT_TX_ACK;
   2709c:	2304      	movs	r3, #4
   2709e:	72a3      	strb	r3, [r4, #10]
	if (complete) {
   270a0:	2e00      	cmp	r6, #0
   270a2:	d0c4      	beq.n	2702e <rp_comm_tx_proxy+0x16>
		llcp_rr_complete(conn);
   270a4:	4638      	mov	r0, r7
   270a6:	f002 f9b5 	bl	29414 <llcp_rr_complete>
		ctx->state = RP_COMMON_STATE_IDLE;
   270aa:	2300      	movs	r3, #0
   270ac:	72a3      	strb	r3, [r4, #10]
   270ae:	e7be      	b.n	2702e <rp_comm_tx_proxy+0x16>
	LL_ASSERT(tx);
   270b0:	4a16      	ldr	r2, [pc, #88]	; (2710c <rp_comm_tx_proxy+0xf4>)
   270b2:	4919      	ldr	r1, [pc, #100]	; (27118 <rp_comm_tx_proxy+0x100>)
   270b4:	4817      	ldr	r0, [pc, #92]	; (27114 <rp_comm_tx_proxy+0xfc>)
   270b6:	f240 4305 	movw	r3, #1029	; 0x405
   270ba:	f00c f9ad 	bl	33418 <assert_print>
   270be:	4040      	eors	r0, r0
   270c0:	f380 8811 	msr	BASEPRI, r0
   270c4:	f04f 0003 	mov.w	r0, #3
   270c8:	df02      	svc	2
   270ca:	e7c0      	b.n	2704e <rp_comm_tx_proxy+0x36>
		llcp_pdu_encode_reject_ext_ind(pdu, PDU_DATA_LLCTRL_TYPE_CIS_TERMINATE_IND,
   270cc:	2211      	movs	r2, #17
   270ce:	2122      	movs	r1, #34	; 0x22
   270d0:	f000 ffdc 	bl	2808c <llcp_pdu_encode_reject_ext_ind>
		break;
   270d4:	e7d8      	b.n	27088 <rp_comm_tx_proxy+0x70>
		llcp_pdu_encode_ping_rsp(pdu);
   270d6:	f000 fe6f 	bl	27db8 <llcp_pdu_encode_ping_rsp>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
   270da:	23ff      	movs	r3, #255	; 0xff
   270dc:	72e3      	strb	r3, [r4, #11]
		break;
   270de:	e7d3      	b.n	27088 <rp_comm_tx_proxy+0x70>
		llcp_pdu_encode_feature_rsp(conn, pdu);
   270e0:	4601      	mov	r1, r0
   270e2:	4638      	mov	r0, r7
   270e4:	f000 feb2 	bl	27e4c <llcp_pdu_encode_feature_rsp>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
   270e8:	23ff      	movs	r3, #255	; 0xff
   270ea:	72e3      	strb	r3, [r4, #11]
		break;
   270ec:	e7cc      	b.n	27088 <rp_comm_tx_proxy+0x70>
		llcp_pdu_encode_version_ind(pdu);
   270ee:	f000 ff3b 	bl	27f68 <llcp_pdu_encode_version_ind>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
   270f2:	23ff      	movs	r3, #255	; 0xff
   270f4:	72e3      	strb	r3, [r4, #11]
		break;
   270f6:	e7c7      	b.n	27088 <rp_comm_tx_proxy+0x70>
		llcp_pdu_encode_length_rsp(conn, pdu);
   270f8:	4601      	mov	r1, r0
   270fa:	4638      	mov	r0, r7
   270fc:	f001 f8f2 	bl	282e4 <llcp_pdu_encode_length_rsp>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
   27100:	23ff      	movs	r3, #255	; 0xff
		ctx->tx_ack = tx;
   27102:	f8c4 8014 	str.w	r8, [r4, #20]
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
   27106:	72e3      	strb	r3, [r4, #11]
		break;
   27108:	e7be      	b.n	27088 <rp_comm_tx_proxy+0x70>
   2710a:	bf00      	nop
   2710c:	0003a970 	.word	0x0003a970
   27110:	0003a004 	.word	0x0003a004
   27114:	00039f74 	.word	0x00039f74
   27118:	0003a694 	.word	0x0003a694

0002711c <rp_comm_send_rsp.constprop.0>:

static void rp_comm_send_rsp(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
   2711c:	b538      	push	{r3, r4, r5, lr}
{
	switch (ctx->proc) {
   2711e:	7a0b      	ldrb	r3, [r1, #8]
   27120:	3b01      	subs	r3, #1
static void rp_comm_send_rsp(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
   27122:	460c      	mov	r4, r1
   27124:	4605      	mov	r5, r0
	switch (ctx->proc) {
   27126:	2b0b      	cmp	r3, #11
   27128:	d807      	bhi.n	2713a <rp_comm_send_rsp.constprop.0+0x1e>
   2712a:	e8df f003 	tbb	[pc, r3]
   2712e:	1914      	.short	0x1914
   27130:	06062206 	.word	0x06062206
   27134:	2e060606 	.word	0x2e060606
   27138:	3606      	.short	0x3606
		rp_comm_tx_proxy(conn, ctx, false);
		break;
#endif /* CONFIG_BT_CTLR_SCA_UPDATE */
	default:
		/* Unknown procedure */
		LL_ASSERT(0);
   2713a:	4a1d      	ldr	r2, [pc, #116]	; (271b0 <rp_comm_send_rsp.constprop.0+0x94>)
   2713c:	491d      	ldr	r1, [pc, #116]	; (271b4 <rp_comm_send_rsp.constprop.0+0x98>)
   2713e:	481e      	ldr	r0, [pc, #120]	; (271b8 <rp_comm_send_rsp.constprop.0+0x9c>)
   27140:	f240 5315 	movw	r3, #1301	; 0x515
   27144:	f00c f968 	bl	33418 <assert_print>
   27148:	4040      	eors	r0, r0
   2714a:	f380 8811 	msr	BASEPRI, r0
   2714e:	f04f 0003 	mov.w	r0, #3
   27152:	df02      	svc	2
	}
}
   27154:	bd38      	pop	{r3, r4, r5, pc}
   27156:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		rp_comm_tx_proxy(conn, ctx, true);
   2715a:	2201      	movs	r2, #1
   2715c:	f7ff bf5c 	b.w	27018 <rp_comm_tx_proxy>
		if (rp_comm_tx_proxy(conn, ctx, true)) {
   27160:	2201      	movs	r2, #1
   27162:	f7ff ff59 	bl	27018 <rp_comm_tx_proxy>
   27166:	2800      	cmp	r0, #0
   27168:	d0f4      	beq.n	27154 <rp_comm_send_rsp.constprop.0+0x38>
			conn->llcp.fex.sent = 1;
   2716a:	2301      	movs	r3, #1
   2716c:	f885 3120 	strb.w	r3, [r5, #288]	; 0x120
}
   27170:	bd38      	pop	{r3, r4, r5, pc}
		if (!conn->llcp.vex.sent) {
   27172:	f890 3114 	ldrb.w	r3, [r0, #276]	; 0x114
   27176:	b9ab      	cbnz	r3, 271a4 <rp_comm_send_rsp.constprop.0+0x88>
			if (rp_comm_tx_proxy(conn, ctx, true)) {
   27178:	2201      	movs	r2, #1
   2717a:	f7ff ff4d 	bl	27018 <rp_comm_tx_proxy>
   2717e:	2800      	cmp	r0, #0
   27180:	d0e8      	beq.n	27154 <rp_comm_send_rsp.constprop.0+0x38>
				conn->llcp.vex.sent = 1;
   27182:	2301      	movs	r3, #1
   27184:	f885 3114 	strb.w	r3, [r5, #276]	; 0x114
}
   27188:	bd38      	pop	{r3, r4, r5, pc}
	llcp_rr_complete(conn);
   2718a:	f002 f943 	bl	29414 <llcp_rr_complete>
	conn->llcp_terminate.reason_final = ctx->data.term.error_code;
   2718e:	7f23      	ldrb	r3, [r4, #28]
	ctx->state = RP_COMMON_STATE_IDLE;
   27190:	2200      	movs	r2, #0
   27192:	72a2      	strb	r2, [r4, #10]
	conn->llcp_terminate.reason_final = ctx->data.term.error_code;
   27194:	f885 3148 	strb.w	r3, [r5, #328]	; 0x148
}
   27198:	bd38      	pop	{r3, r4, r5, pc}
   2719a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		rp_comm_tx_proxy(conn, ctx, false);
   2719e:	2200      	movs	r2, #0
   271a0:	f7ff bf3a 	b.w	27018 <rp_comm_tx_proxy>
			llcp_rr_complete(conn);
   271a4:	f002 f936 	bl	29414 <llcp_rr_complete>
			ctx->state = RP_COMMON_STATE_IDLE;
   271a8:	2300      	movs	r3, #0
   271aa:	72a3      	strb	r3, [r4, #10]
}
   271ac:	bd38      	pop	{r3, r4, r5, pc}
   271ae:	bf00      	nop
   271b0:	0003a970 	.word	0x0003a970
   271b4:	0003a004 	.word	0x0003a004
   271b8:	00039f74 	.word	0x00039f74

000271bc <rp_comm_execute_fsm>:
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static void rp_comm_execute_fsm(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
				void *param)
{
   271bc:	b570      	push	{r4, r5, r6, lr}
   271be:	460c      	mov	r4, r1
	switch (ctx->state) {
   271c0:	7a89      	ldrb	r1, [r1, #10]
{
   271c2:	4605      	mov	r5, r0
	switch (ctx->state) {
   271c4:	2905      	cmp	r1, #5
   271c6:	f200 8095 	bhi.w	272f4 <rp_comm_execute_fsm+0x138>
   271ca:	e8df f001 	tbb	[pc, r1]
   271ce:	0d08      	.short	0x0d08
   271d0:	03362e20 	.word	0x03362e20
	if (llcp_ntf_alloc_is_available()) {
   271d4:	f7ff fa48 	bl	26668 <llcp_ntf_alloc_is_available>
   271d8:	2800      	cmp	r0, #0
   271da:	d145      	bne.n	27268 <rp_comm_execute_fsm+0xac>
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
	default:
		/* Unknown state */
		LL_ASSERT(0);
	}
}
   271dc:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   271de:	2a00      	cmp	r2, #0
   271e0:	d1fc      	bne.n	271dc <rp_comm_execute_fsm+0x20>
		ctx->state = RP_COMMON_STATE_WAIT_RX;
   271e2:	2301      	movs	r3, #1
   271e4:	72a3      	strb	r3, [r4, #10]
}
   271e6:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   271e8:	2a02      	cmp	r2, #2
   271ea:	d1f7      	bne.n	271dc <rp_comm_execute_fsm+0x20>
	ctx->response_opcode = pdu->llctrl.opcode;
   271ec:	78da      	ldrb	r2, [r3, #3]
   271ee:	7262      	strb	r2, [r4, #9]
	switch (pdu->llctrl.opcode) {
   271f0:	3a02      	subs	r2, #2
   271f2:	2a12      	cmp	r2, #18
   271f4:	d850      	bhi.n	27298 <rp_comm_execute_fsm+0xdc>
   271f6:	e8df f002 	tbb	[pc, r2]
   271fa:	4f74      	.short	0x4f74
   271fc:	4f4f4f4f 	.word	0x4f4f4f4f
   27200:	4f4f4f6f 	.word	0x4f4f4f6f
   27204:	4f4f4f6a 	.word	0x4f4f4f6a
   27208:	4f1a4f4f 	.word	0x4f1a4f4f
   2720c:	5d          	.byte	0x5d
   2720d:	00          	.byte	0x00
	switch (evt) {
   2720e:	2a00      	cmp	r2, #0
   27210:	d1e4      	bne.n	271dc <rp_comm_execute_fsm+0x20>
		LL_ASSERT(ctx->proc == PROC_TERMINATE);
   27212:	7a23      	ldrb	r3, [r4, #8]
   27214:	2b0a      	cmp	r3, #10
   27216:	d131      	bne.n	2727c <rp_comm_execute_fsm+0xc0>
	llcp_rr_complete(conn);
   27218:	4628      	mov	r0, r5
   2721a:	f002 f8fb 	bl	29414 <llcp_rr_complete>
	conn->llcp_terminate.reason_final = ctx->data.term.error_code;
   2721e:	7f23      	ldrb	r3, [r4, #28]
	ctx->state = RP_COMMON_STATE_IDLE;
   27220:	2200      	movs	r2, #0
   27222:	72a2      	strb	r2, [r4, #10]
	conn->llcp_terminate.reason_final = ctx->data.term.error_code;
   27224:	f885 3148 	strb.w	r3, [r5, #328]	; 0x148
}
   27228:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   2722a:	2a00      	cmp	r2, #0
   2722c:	d1d6      	bne.n	271dc <rp_comm_execute_fsm+0x20>
		rp_comm_send_rsp(conn, ctx, evt, param);
   2722e:	4621      	mov	r1, r4
   27230:	4628      	mov	r0, r5
}
   27232:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rp_comm_send_rsp(conn, ctx, evt, param);
   27236:	f7ff bf71 	b.w	2711c <rp_comm_send_rsp.constprop.0>
	switch (evt) {
   2723a:	2a01      	cmp	r2, #1
   2723c:	d1ce      	bne.n	271dc <rp_comm_execute_fsm+0x20>
		switch (ctx->proc) {
   2723e:	7a23      	ldrb	r3, [r4, #8]
   27240:	2b0c      	cmp	r3, #12
   27242:	d1cb      	bne.n	271dc <rp_comm_execute_fsm+0x20>
			uint8_t dle_changed = ull_dle_update_eff_tx(conn);
   27244:	4628      	mov	r0, r5
   27246:	f7fe f859 	bl	252fc <ull_dle_update_eff_tx>
			dle_changed |= ctx->data.dle.ntf_dle;
   2724a:	7f23      	ldrb	r3, [r4, #28]
   2724c:	ea40 0603 	orr.w	r6, r0, r3
   27250:	b2f6      	uxtb	r6, r6
			llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_DATA_LENGTH);
   27252:	2104      	movs	r1, #4
   27254:	4628      	mov	r0, r5
   27256:	f7ff fa31 	bl	266bc <llcp_tx_resume_data>
			if (dle_changed && !llcp_ntf_alloc_is_available()) {
   2725a:	b14e      	cbz	r6, 27270 <rp_comm_execute_fsm+0xb4>
   2725c:	f7ff fa04 	bl	26668 <llcp_ntf_alloc_is_available>
   27260:	b910      	cbnz	r0, 27268 <rp_comm_execute_fsm+0xac>
				ctx->state = RP_COMMON_STATE_WAIT_NTF;
   27262:	2305      	movs	r3, #5
   27264:	72a3      	strb	r3, [r4, #10]
}
   27266:	bd70      	pop	{r4, r5, r6, pc}
					rp_comm_ntf(conn, ctx);
   27268:	4621      	mov	r1, r4
   2726a:	4628      	mov	r0, r5
   2726c:	f7ff fe14 	bl	26e98 <rp_comm_ntf>
				llcp_rr_complete(conn);
   27270:	4628      	mov	r0, r5
   27272:	f002 f8cf 	bl	29414 <llcp_rr_complete>
				ctx->state = RP_COMMON_STATE_IDLE;
   27276:	2300      	movs	r3, #0
   27278:	72a3      	strb	r3, [r4, #10]
}
   2727a:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(ctx->proc == PROC_TERMINATE);
   2727c:	4a24      	ldr	r2, [pc, #144]	; (27310 <rp_comm_execute_fsm+0x154>)
   2727e:	4925      	ldr	r1, [pc, #148]	; (27314 <rp_comm_execute_fsm+0x158>)
   27280:	4825      	ldr	r0, [pc, #148]	; (27318 <rp_comm_execute_fsm+0x15c>)
   27282:	f240 532b 	movw	r3, #1323	; 0x52b
   27286:	f00c f8c7 	bl	33418 <assert_print>
   2728a:	4040      	eors	r0, r0
   2728c:	f380 8811 	msr	BASEPRI, r0
   27290:	f04f 0003 	mov.w	r0, #3
   27294:	df02      	svc	2
   27296:	e7bf      	b.n	27218 <rp_comm_execute_fsm+0x5c>
		LL_ASSERT(0);
   27298:	4a1d      	ldr	r2, [pc, #116]	; (27310 <rp_comm_execute_fsm+0x154>)
   2729a:	4920      	ldr	r1, [pc, #128]	; (2731c <rp_comm_execute_fsm+0x160>)
   2729c:	481e      	ldr	r0, [pc, #120]	; (27318 <rp_comm_execute_fsm+0x15c>)
   2729e:	f240 33fa 	movw	r3, #1018	; 0x3fa
   272a2:	f00c f8b9 	bl	33418 <assert_print>
   272a6:	4040      	eors	r0, r0
   272a8:	f380 8811 	msr	BASEPRI, r0
   272ac:	f04f 0003 	mov.w	r0, #3
   272b0:	df02      	svc	2
   272b2:	e7bc      	b.n	2722e <rp_comm_execute_fsm+0x72>
		llcp_pdu_decode_length_req(conn, pdu);
   272b4:	4619      	mov	r1, r3
   272b6:	4628      	mov	r0, r5
   272b8:	f001 f844 	bl	28344 <llcp_pdu_decode_length_req>
		llcp_tx_pause_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_DATA_LENGTH);
   272bc:	2104      	movs	r1, #4
   272be:	4628      	mov	r0, r5
   272c0:	f7ff f9e8 	bl	26694 <llcp_tx_pause_data>
		ctx->data.dle.ntf_dle = ull_dle_update_eff_rx(conn);
   272c4:	4628      	mov	r0, r5
   272c6:	f7fd ffe7 	bl	25298 <ull_dle_update_eff_rx>
   272ca:	7720      	strb	r0, [r4, #28]
		break;
   272cc:	e7af      	b.n	2722e <rp_comm_execute_fsm+0x72>
		llcp_pdu_decode_version_ind(conn, pdu);
   272ce:	4619      	mov	r1, r3
   272d0:	4628      	mov	r0, r5
   272d2:	f000 fe71 	bl	27fb8 <llcp_pdu_decode_version_ind>
		break;
   272d6:	e7aa      	b.n	2722e <rp_comm_execute_fsm+0x72>
		llcp_pdu_decode_feature_req(conn, pdu);
   272d8:	4619      	mov	r1, r3
   272da:	4628      	mov	r0, r5
   272dc:	f000 fdee 	bl	27ebc <llcp_pdu_decode_feature_req>
		if (feature_phy_coded(conn)) {
   272e0:	e7a5      	b.n	2722e <rp_comm_execute_fsm+0x72>
		llcp_pdu_decode_terminate_ind(ctx, pdu);
   272e2:	4619      	mov	r1, r3
   272e4:	4620      	mov	r0, r4
   272e6:	f000 fe3b 	bl	27f60 <llcp_pdu_decode_terminate_ind>
		llcp_tx_pause_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_TERMINATE);
   272ea:	2108      	movs	r1, #8
   272ec:	4628      	mov	r0, r5
   272ee:	f7ff f9d1 	bl	26694 <llcp_tx_pause_data>
		break;
   272f2:	e79c      	b.n	2722e <rp_comm_execute_fsm+0x72>
		LL_ASSERT(0);
   272f4:	4a06      	ldr	r2, [pc, #24]	; (27310 <rp_comm_execute_fsm+0x154>)
   272f6:	4909      	ldr	r1, [pc, #36]	; (2731c <rp_comm_execute_fsm+0x160>)
   272f8:	4807      	ldr	r0, [pc, #28]	; (27318 <rp_comm_execute_fsm+0x15c>)
   272fa:	f240 53aa 	movw	r3, #1450	; 0x5aa
   272fe:	f00c f88b 	bl	33418 <assert_print>
   27302:	4040      	eors	r0, r0
   27304:	f380 8811 	msr	BASEPRI, r0
   27308:	f04f 0003 	mov.w	r0, #3
   2730c:	df02      	svc	2
}
   2730e:	bd70      	pop	{r4, r5, r6, pc}
   27310:	0003a970 	.word	0x0003a970
   27314:	0003a9b8 	.word	0x0003a9b8
   27318:	00039f74 	.word	0x00039f74
   2731c:	0003a004 	.word	0x0003a004

00027320 <lp_comm_ntf>:
{
   27320:	b570      	push	{r4, r5, r6, lr}
   27322:	4606      	mov	r6, r0
   27324:	460d      	mov	r5, r1
	ntf = llcp_ntf_alloc();
   27326:	f7ff f9af 	bl	26688 <llcp_ntf_alloc>
	LL_ASSERT(ntf);
   2732a:	4604      	mov	r4, r0
   2732c:	2800      	cmp	r0, #0
   2732e:	d05c      	beq.n	273ea <lp_comm_ntf+0xca>
	ntf->hdr.type = NODE_RX_TYPE_DC_PDU;
   27330:	2303      	movs	r3, #3
   27332:	7123      	strb	r3, [r4, #4]
	ntf->hdr.handle = conn->lll.handle;
   27334:	8d33      	ldrh	r3, [r6, #40]	; 0x28
   27336:	80e3      	strh	r3, [r4, #6]
	switch (ctx->proc) {
   27338:	7a2b      	ldrb	r3, [r5, #8]
   2733a:	2b04      	cmp	r3, #4
	pdu = (struct pdu_data *)ntf->pdu;
   2733c:	f104 011c 	add.w	r1, r4, #28
	switch (ctx->proc) {
   27340:	d016      	beq.n	27370 <lp_comm_ntf+0x50>
   27342:	2b0c      	cmp	r3, #12
   27344:	d03c      	beq.n	273c0 <lp_comm_ntf+0xa0>
   27346:	2b02      	cmp	r3, #2
   27348:	d028      	beq.n	2739c <lp_comm_ntf+0x7c>
		LL_ASSERT(0);
   2734a:	4a2f      	ldr	r2, [pc, #188]	; (27408 <lp_comm_ntf+0xe8>)
   2734c:	492f      	ldr	r1, [pc, #188]	; (2740c <lp_comm_ntf+0xec>)
   2734e:	4830      	ldr	r0, [pc, #192]	; (27410 <lp_comm_ntf+0xf0>)
   27350:	f44f 73cd 	mov.w	r3, #410	; 0x19a
   27354:	f00c f860 	bl	33418 <assert_print>
   27358:	4040      	eors	r0, r0
   2735a:	f380 8811 	msr	BASEPRI, r0
   2735e:	f04f 0003 	mov.w	r0, #3
   27362:	df02      	svc	2
	ll_rx_put_sched(ntf->hdr.link, ntf);
   27364:	6820      	ldr	r0, [r4, #0]
   27366:	4621      	mov	r1, r4
}
   27368:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_rx_put_sched(ntf->hdr.link, ntf);
   2736c:	f7fb bbde 	b.w	22b2c <ll_rx_put_sched>
	switch (ctx->response_opcode) {
   27370:	7a6b      	ldrb	r3, [r5, #9]
   27372:	2b0c      	cmp	r3, #12
   27374:	d031      	beq.n	273da <lp_comm_ntf+0xba>
		LL_ASSERT(0);
   27376:	4a24      	ldr	r2, [pc, #144]	; (27408 <lp_comm_ntf+0xe8>)
   27378:	4924      	ldr	r1, [pc, #144]	; (2740c <lp_comm_ntf+0xec>)
   2737a:	4825      	ldr	r0, [pc, #148]	; (27410 <lp_comm_ntf+0xf0>)
   2737c:	f44f 7380 	mov.w	r3, #256	; 0x100
   27380:	f00c f84a 	bl	33418 <assert_print>
   27384:	4040      	eors	r0, r0
   27386:	f380 8811 	msr	BASEPRI, r0
   2738a:	f04f 0003 	mov.w	r0, #3
   2738e:	df02      	svc	2
	ll_rx_put_sched(ntf->hdr.link, ntf);
   27390:	6820      	ldr	r0, [r4, #0]
   27392:	4621      	mov	r1, r4
}
   27394:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_rx_put_sched(ntf->hdr.link, ntf);
   27398:	f7fb bbc8 	b.w	22b2c <ll_rx_put_sched>
	switch (ctx->response_opcode) {
   2739c:	7a6b      	ldrb	r3, [r5, #9]
   2739e:	2b07      	cmp	r3, #7
   273a0:	d01f      	beq.n	273e2 <lp_comm_ntf+0xc2>
   273a2:	2b09      	cmp	r3, #9
   273a4:	d015      	beq.n	273d2 <lp_comm_ntf+0xb2>
		LL_ASSERT(0);
   273a6:	4a18      	ldr	r2, [pc, #96]	; (27408 <lp_comm_ntf+0xe8>)
   273a8:	4918      	ldr	r1, [pc, #96]	; (2740c <lp_comm_ntf+0xec>)
   273aa:	4819      	ldr	r0, [pc, #100]	; (27410 <lp_comm_ntf+0xf0>)
   273ac:	23f3      	movs	r3, #243	; 0xf3
   273ae:	f00c f833 	bl	33418 <assert_print>
   273b2:	4040      	eors	r0, r0
   273b4:	f380 8811 	msr	BASEPRI, r0
   273b8:	f04f 0003 	mov.w	r0, #3
   273bc:	df02      	svc	2
   273be:	e7d1      	b.n	27364 <lp_comm_ntf+0x44>
	llcp_ntf_encode_length_change(conn, pdu);
   273c0:	4630      	mov	r0, r6
   273c2:	f000 ffa7 	bl	28314 <llcp_ntf_encode_length_change>
	ll_rx_put_sched(ntf->hdr.link, ntf);
   273c6:	6820      	ldr	r0, [r4, #0]
   273c8:	4621      	mov	r1, r4
}
   273ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_rx_put_sched(ntf->hdr.link, ntf);
   273ce:	f7fb bbad 	b.w	22b2c <ll_rx_put_sched>
		llcp_ntf_encode_feature_rsp(conn, pdu);
   273d2:	4630      	mov	r0, r6
   273d4:	f000 fd54 	bl	27e80 <llcp_ntf_encode_feature_rsp>
		break;
   273d8:	e7c4      	b.n	27364 <lp_comm_ntf+0x44>
		llcp_ntf_encode_version_ind(conn, pdu);
   273da:	4630      	mov	r0, r6
   273dc:	f000 fdd6 	bl	27f8c <llcp_ntf_encode_version_ind>
		break;
   273e0:	e7c0      	b.n	27364 <lp_comm_ntf+0x44>
		llcp_ntf_encode_unknown_rsp(ctx, pdu);
   273e2:	4628      	mov	r0, r5
   273e4:	f000 fd04 	bl	27df0 <llcp_ntf_encode_unknown_rsp>
		break;
   273e8:	e7bc      	b.n	27364 <lp_comm_ntf+0x44>
	LL_ASSERT(ntf);
   273ea:	4a07      	ldr	r2, [pc, #28]	; (27408 <lp_comm_ntf+0xe8>)
   273ec:	4909      	ldr	r1, [pc, #36]	; (27414 <lp_comm_ntf+0xf4>)
   273ee:	4808      	ldr	r0, [pc, #32]	; (27410 <lp_comm_ntf+0xf0>)
   273f0:	f240 137d 	movw	r3, #381	; 0x17d
   273f4:	f00c f810 	bl	33418 <assert_print>
   273f8:	4040      	eors	r0, r0
   273fa:	f380 8811 	msr	BASEPRI, r0
   273fe:	f04f 0003 	mov.w	r0, #3
   27402:	df02      	svc	2
   27404:	e794      	b.n	27330 <lp_comm_ntf+0x10>
   27406:	bf00      	nop
   27408:	0003a970 	.word	0x0003a970
   2740c:	0003a004 	.word	0x0003a004
   27410:	00039f74 	.word	0x00039f74
   27414:	0003a844 	.word	0x0003a844

00027418 <lp_comm_complete.constprop.0>:
static void lp_comm_complete(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
   27418:	b538      	push	{r3, r4, r5, lr}
	switch (ctx->proc) {
   2741a:	7a0b      	ldrb	r3, [r1, #8]
   2741c:	3b01      	subs	r3, #1
static void lp_comm_complete(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
   2741e:	460c      	mov	r4, r1
   27420:	4605      	mov	r5, r0
	switch (ctx->proc) {
   27422:	2b0b      	cmp	r3, #11
   27424:	d815      	bhi.n	27452 <lp_comm_complete.constprop.0+0x3a>
   27426:	e8df f003 	tbb	[pc, r3]
   2742a:	2206      	.short	0x2206
   2742c:	1414280e 	.word	0x1414280e
   27430:	31141414 	.word	0x31141414
   27434:	3914      	.short	0x3914
		if (ctx->response_opcode == PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP ||
   27436:	7a4b      	ldrb	r3, [r1, #9]
   27438:	2b07      	cmp	r3, #7
   2743a:	d004      	beq.n	27446 <lp_comm_complete.constprop.0+0x2e>
   2743c:	2b13      	cmp	r3, #19
   2743e:	d002      	beq.n	27446 <lp_comm_complete.constprop.0+0x2e>
	conn->llcp_terminate.reason_final = BT_HCI_ERR_LMP_PDU_NOT_ALLOWED;
   27440:	2324      	movs	r3, #36	; 0x24
   27442:	f885 3148 	strb.w	r3, [r5, #328]	; 0x148
	llcp_lr_complete(conn);
   27446:	4628      	mov	r0, r5
   27448:	f000 fc48 	bl	27cdc <llcp_lr_complete>
	ctx->state = LP_COMMON_STATE_IDLE;
   2744c:	2300      	movs	r3, #0
   2744e:	72a3      	strb	r3, [r4, #10]
}
   27450:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(0);
   27452:	4a2c      	ldr	r2, [pc, #176]	; (27504 <lp_comm_complete.constprop.0+0xec>)
   27454:	492c      	ldr	r1, [pc, #176]	; (27508 <lp_comm_complete.constprop.0+0xf0>)
   27456:	482d      	ldr	r0, [pc, #180]	; (2750c <lp_comm_complete.constprop.0+0xf4>)
   27458:	f240 2336 	movw	r3, #566	; 0x236
   2745c:	f00b ffdc 	bl	33418 <assert_print>
   27460:	4040      	eors	r0, r0
   27462:	f380 8811 	msr	BASEPRI, r0
   27466:	f04f 0003 	mov.w	r0, #3
   2746a:	df02      	svc	2
}
   2746c:	bd38      	pop	{r3, r4, r5, pc}
			(ctx->response_opcode == PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP ||
   2746e:	7a4b      	ldrb	r3, [r1, #9]
   27470:	2b07      	cmp	r3, #7
   27472:	d005      	beq.n	27480 <lp_comm_complete.constprop.0+0x68>
   27474:	2b09      	cmp	r3, #9
   27476:	d1e3      	bne.n	27440 <lp_comm_complete.constprop.0+0x28>
   27478:	e002      	b.n	27480 <lp_comm_complete.constprop.0+0x68>
	if (valid_pdu) {
   2747a:	7a4b      	ldrb	r3, [r1, #9]
   2747c:	2b0c      	cmp	r3, #12
   2747e:	d1df      	bne.n	27440 <lp_comm_complete.constprop.0+0x28>
		if (!llcp_ntf_alloc_is_available()) {
   27480:	f7ff f8f2 	bl	26668 <llcp_ntf_alloc_is_available>
   27484:	bb20      	cbnz	r0, 274d0 <lp_comm_complete.constprop.0+0xb8>
			ctx->state = LP_COMMON_STATE_WAIT_NTF;
   27486:	2304      	movs	r3, #4
   27488:	72a3      	strb	r3, [r4, #10]
}
   2748a:	bd38      	pop	{r3, r4, r5, pc}
		llcp_lr_complete(conn);
   2748c:	f000 fc26 	bl	27cdc <llcp_lr_complete>
		ctx->state = LP_COMMON_STATE_IDLE;
   27490:	2200      	movs	r2, #0
		conn->llcp_terminate.reason_final = BT_HCI_ERR_LOCALHOST_TERM_CONN;
   27492:	2316      	movs	r3, #22
		ctx->state = LP_COMMON_STATE_IDLE;
   27494:	72a2      	strb	r2, [r4, #10]
		conn->llcp_terminate.reason_final = BT_HCI_ERR_LOCALHOST_TERM_CONN;
   27496:	f885 3148 	strb.w	r3, [r5, #328]	; 0x148
}
   2749a:	bd38      	pop	{r3, r4, r5, pc}
		if (ctx->response_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   2749c:	7a4b      	ldrb	r3, [r1, #9]
   2749e:	2b15      	cmp	r3, #21
   274a0:	d020      	beq.n	274e4 <lp_comm_complete.constprop.0+0xcc>
		} else if (ctx->response_opcode == PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) {
   274a2:	2b07      	cmp	r3, #7
   274a4:	d1cc      	bne.n	27440 <lp_comm_complete.constprop.0+0x28>
	conn->llcp.fex.features_used &= ~ll_feat_mask;
   274a6:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
   274aa:	f023 0320 	bic.w	r3, r3, #32
   274ae:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
			llcp_lr_complete(conn);
   274b2:	f000 fc13 	bl	27cdc <llcp_lr_complete>
			ctx->state = LP_COMMON_STATE_IDLE;
   274b6:	2300      	movs	r3, #0
				ctx->state = LP_COMMON_STATE_WAIT_NTF;
   274b8:	72a3      	strb	r3, [r4, #10]
		if (!ull_cp_remote_dle_pending(conn)) {
   274ba:	4628      	mov	r0, r5
   274bc:	f7ff fba8 	bl	26c10 <ull_cp_remote_dle_pending>
   274c0:	2800      	cmp	r0, #0
   274c2:	d1c5      	bne.n	27450 <lp_comm_complete.constprop.0+0x38>
			llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_DATA_LENGTH);
   274c4:	4628      	mov	r0, r5
   274c6:	2104      	movs	r1, #4
}
   274c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_DATA_LENGTH);
   274cc:	f7ff b8f6 	b.w	266bc <llcp_tx_resume_data>
			lp_comm_ntf(conn, ctx);
   274d0:	4621      	mov	r1, r4
   274d2:	4628      	mov	r0, r5
   274d4:	f7ff ff24 	bl	27320 <lp_comm_ntf>
			llcp_lr_complete(conn);
   274d8:	4628      	mov	r0, r5
   274da:	f000 fbff 	bl	27cdc <llcp_lr_complete>
			ctx->state = LP_COMMON_STATE_IDLE;
   274de:	2300      	movs	r3, #0
   274e0:	72a3      	strb	r3, [r4, #10]
}
   274e2:	bd38      	pop	{r3, r4, r5, pc}
			uint8_t dle_changed = ull_dle_update_eff(conn);
   274e4:	f7fd fe76 	bl	251d4 <ull_dle_update_eff>
			if (dle_changed && !llcp_ntf_alloc_is_available()) {
   274e8:	b140      	cbz	r0, 274fc <lp_comm_complete.constprop.0+0xe4>
   274ea:	f7ff f8bd 	bl	26668 <llcp_ntf_alloc_is_available>
   274ee:	b908      	cbnz	r0, 274f4 <lp_comm_complete.constprop.0+0xdc>
   274f0:	2304      	movs	r3, #4
   274f2:	e7e1      	b.n	274b8 <lp_comm_complete.constprop.0+0xa0>
					lp_comm_ntf(conn, ctx);
   274f4:	4621      	mov	r1, r4
   274f6:	4628      	mov	r0, r5
   274f8:	f7ff ff12 	bl	27320 <lp_comm_ntf>
				llcp_lr_complete(conn);
   274fc:	4628      	mov	r0, r5
   274fe:	f000 fbed 	bl	27cdc <llcp_lr_complete>
				ctx->state = LP_COMMON_STATE_IDLE;
   27502:	e7d8      	b.n	274b6 <lp_comm_complete.constprop.0+0x9e>
   27504:	0003a970 	.word	0x0003a970
   27508:	0003a004 	.word	0x0003a004
   2750c:	00039f74 	.word	0x00039f74

00027510 <lp_comm_send_req.constprop.0.isra.0>:
static void lp_comm_send_req(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
   27510:	b570      	push	{r4, r5, r6, lr}
	switch (ctx->proc) {
   27512:	7a0e      	ldrb	r6, [r1, #8]
   27514:	1e73      	subs	r3, r6, #1
static void lp_comm_send_req(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
   27516:	460c      	mov	r4, r1
   27518:	4605      	mov	r5, r0
	switch (ctx->proc) {
   2751a:	2b0b      	cmp	r3, #11
   2751c:	d807      	bhi.n	2752e <lp_comm_send_req.constprop.0.isra.0+0x1e>
   2751e:	e8df f003 	tbb	[pc, r3]
   27522:	1b14      	.short	0x1b14
   27524:	06064733 	.word	0x06064733
   27528:	64060606 	.word	0x64060606
   2752c:	7106      	.short	0x7106
		LL_ASSERT(0);
   2752e:	4a51      	ldr	r2, [pc, #324]	; (27674 <lp_comm_send_req.constprop.0.isra.0+0x164>)
   27530:	4951      	ldr	r1, [pc, #324]	; (27678 <lp_comm_send_req.constprop.0.isra.0+0x168>)
   27532:	4852      	ldr	r0, [pc, #328]	; (2767c <lp_comm_send_req.constprop.0.isra.0+0x16c>)
   27534:	f44f 732d 	mov.w	r3, #692	; 0x2b4
   27538:	f00b ff6e 	bl	33418 <assert_print>
   2753c:	4040      	eors	r0, r0
   2753e:	f380 8811 	msr	BASEPRI, r0
   27542:	f04f 0003 	mov.w	r0, #3
   27546:	df02      	svc	2
}
   27548:	bd70      	pop	{r4, r5, r6, pc}
	if (extra_cond || llcp_lr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   2754a:	f000 fb33 	bl	27bb4 <llcp_lr_ispaused>
   2754e:	2800      	cmp	r0, #0
   27550:	d07d      	beq.n	2764e <lp_comm_send_req.constprop.0.isra.0+0x13e>
		ctx->state = LP_COMMON_STATE_WAIT_TX;
   27552:	2301      	movs	r3, #1
   27554:	72a3      	strb	r3, [r4, #10]
}
   27556:	bd70      	pop	{r4, r5, r6, pc}
	if (extra_cond || llcp_lr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   27558:	f000 fb2c 	bl	27bb4 <llcp_lr_ispaused>
   2755c:	2800      	cmp	r0, #0
   2755e:	d1f8      	bne.n	27552 <lp_comm_send_req.constprop.0.isra.0+0x42>
   27560:	4621      	mov	r1, r4
   27562:	4628      	mov	r0, r5
   27564:	f7ff f86c 	bl	26640 <llcp_tx_alloc_peek>
   27568:	2800      	cmp	r0, #0
   2756a:	d0f2      	beq.n	27552 <lp_comm_send_req.constprop.0.isra.0+0x42>
		lp_comm_tx(conn, ctx);
   2756c:	4621      	mov	r1, r4
   2756e:	4628      	mov	r0, r5
   27570:	f7ff fcd4 	bl	26f1c <lp_comm_tx>
		ctx->state = ctx->tx_ack ? LP_COMMON_STATE_WAIT_TX_ACK : LP_COMMON_STATE_WAIT_RX;
   27574:	6962      	ldr	r2, [r4, #20]
   27576:	2a00      	cmp	r2, #0
			conn->llcp.fex.sent = 1;
   27578:	f04f 0301 	mov.w	r3, #1
		ctx->state = ctx->tx_ack ? LP_COMMON_STATE_WAIT_TX_ACK : LP_COMMON_STATE_WAIT_RX;
   2757c:	bf08      	it	eq
   2757e:	2603      	moveq	r6, #3
   27580:	72a6      	strb	r6, [r4, #10]
			conn->llcp.fex.sent = 1;
   27582:	f885 3120 	strb.w	r3, [r5, #288]	; 0x120
}
   27586:	bd70      	pop	{r4, r5, r6, pc}
	if (extra_cond || llcp_lr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   27588:	f000 fb14 	bl	27bb4 <llcp_lr_ispaused>
   2758c:	2800      	cmp	r0, #0
   2758e:	d1e0      	bne.n	27552 <lp_comm_send_req.constprop.0.isra.0+0x42>
   27590:	4621      	mov	r1, r4
   27592:	4628      	mov	r0, r5
   27594:	f7ff f854 	bl	26640 <llcp_tx_alloc_peek>
   27598:	2800      	cmp	r0, #0
   2759a:	d0da      	beq.n	27552 <lp_comm_send_req.constprop.0.isra.0+0x42>
		lp_comm_tx(conn, ctx);
   2759c:	4621      	mov	r1, r4
   2759e:	4628      	mov	r0, r5
   275a0:	f7ff fcbc 	bl	26f1c <lp_comm_tx>
		ctx->state = ctx->tx_ack ? LP_COMMON_STATE_WAIT_TX_ACK : LP_COMMON_STATE_WAIT_RX;
   275a4:	6963      	ldr	r3, [r4, #20]
   275a6:	2b00      	cmp	r3, #0
   275a8:	bf18      	it	ne
   275aa:	2602      	movne	r6, #2
   275ac:	72a6      	strb	r6, [r4, #10]
}
   275ae:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->llcp.vex.sent) {
   275b0:	f890 3114 	ldrb.w	r3, [r0, #276]	; 0x114
   275b4:	2b00      	cmp	r3, #0
   275b6:	d13e      	bne.n	27636 <lp_comm_send_req.constprop.0.isra.0+0x126>
	if (extra_cond || llcp_lr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   275b8:	f000 fafc 	bl	27bb4 <llcp_lr_ispaused>
   275bc:	2800      	cmp	r0, #0
   275be:	d1c8      	bne.n	27552 <lp_comm_send_req.constprop.0.isra.0+0x42>
   275c0:	4621      	mov	r1, r4
   275c2:	4628      	mov	r0, r5
   275c4:	f7ff f83c 	bl	26640 <llcp_tx_alloc_peek>
   275c8:	2800      	cmp	r0, #0
   275ca:	d0c2      	beq.n	27552 <lp_comm_send_req.constprop.0.isra.0+0x42>
		lp_comm_tx(conn, ctx);
   275cc:	4621      	mov	r1, r4
   275ce:	4628      	mov	r0, r5
   275d0:	f7ff fca4 	bl	26f1c <lp_comm_tx>
		ctx->state = ctx->tx_ack ? LP_COMMON_STATE_WAIT_TX_ACK : LP_COMMON_STATE_WAIT_RX;
   275d4:	6962      	ldr	r2, [r4, #20]
   275d6:	2a00      	cmp	r2, #0
				conn->llcp.vex.sent = 1;
   275d8:	f04f 0301 	mov.w	r3, #1
		ctx->state = ctx->tx_ack ? LP_COMMON_STATE_WAIT_TX_ACK : LP_COMMON_STATE_WAIT_RX;
   275dc:	bf0c      	ite	eq
   275de:	2203      	moveq	r2, #3
   275e0:	2202      	movne	r2, #2
   275e2:	72a2      	strb	r2, [r4, #10]
				conn->llcp.vex.sent = 1;
   275e4:	f885 3114 	strb.w	r3, [r5, #276]	; 0x114
}
   275e8:	bd70      	pop	{r4, r5, r6, pc}
		if (!llcp_tx_alloc_peek(conn, ctx)) {
   275ea:	f7ff f829 	bl	26640 <llcp_tx_alloc_peek>
   275ee:	2800      	cmp	r0, #0
   275f0:	d0af      	beq.n	27552 <lp_comm_send_req.constprop.0.isra.0+0x42>
			lp_comm_tx(conn, ctx);
   275f2:	4621      	mov	r1, r4
   275f4:	4628      	mov	r0, r5
   275f6:	f7ff fc91 	bl	26f1c <lp_comm_tx>
			ctx->data.term.error_code = BT_HCI_ERR_LOCALHOST_TERM_CONN;
   275fa:	2216      	movs	r2, #22
			ctx->state = LP_COMMON_STATE_WAIT_TX_ACK;
   275fc:	2302      	movs	r3, #2
			ctx->data.term.error_code = BT_HCI_ERR_LOCALHOST_TERM_CONN;
   275fe:	7722      	strb	r2, [r4, #28]
			ctx->state = LP_COMMON_STATE_WAIT_TX_ACK;
   27600:	72a3      	strb	r3, [r4, #10]
}
   27602:	bd70      	pop	{r4, r5, r6, pc}
		if (!ull_cp_remote_dle_pending(conn)) {
   27604:	f7ff fb04 	bl	26c10 <ull_cp_remote_dle_pending>
   27608:	b9d8      	cbnz	r0, 27642 <lp_comm_send_req.constprop.0.isra.0+0x132>
			if (llcp_lr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   2760a:	4628      	mov	r0, r5
   2760c:	f000 fad2 	bl	27bb4 <llcp_lr_ispaused>
   27610:	2800      	cmp	r0, #0
   27612:	d19e      	bne.n	27552 <lp_comm_send_req.constprop.0.isra.0+0x42>
   27614:	4621      	mov	r1, r4
   27616:	4628      	mov	r0, r5
   27618:	f7ff f812 	bl	26640 <llcp_tx_alloc_peek>
   2761c:	2800      	cmp	r0, #0
   2761e:	d098      	beq.n	27552 <lp_comm_send_req.constprop.0.isra.0+0x42>
				llcp_tx_pause_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_DATA_LENGTH);
   27620:	2104      	movs	r1, #4
   27622:	4628      	mov	r0, r5
   27624:	f7ff f836 	bl	26694 <llcp_tx_pause_data>
				lp_comm_tx(conn, ctx);
   27628:	4621      	mov	r1, r4
   2762a:	4628      	mov	r0, r5
   2762c:	f7ff fc76 	bl	26f1c <lp_comm_tx>
				ctx->state = LP_COMMON_STATE_WAIT_RX;
   27630:	2303      	movs	r3, #3
   27632:	72a3      	strb	r3, [r4, #10]
}
   27634:	bd70      	pop	{r4, r5, r6, pc}
			ctx->response_opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   27636:	230c      	movs	r3, #12
   27638:	724b      	strb	r3, [r1, #9]
}
   2763a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			lp_comm_complete(conn, ctx, evt, param);
   2763e:	f7ff beeb 	b.w	27418 <lp_comm_complete.constprop.0>
			llcp_lr_complete(conn);
   27642:	4628      	mov	r0, r5
   27644:	f000 fb4a 	bl	27cdc <llcp_lr_complete>
			ctx->state = LP_COMMON_STATE_IDLE;
   27648:	2300      	movs	r3, #0
   2764a:	72a3      	strb	r3, [r4, #10]
}
   2764c:	bd70      	pop	{r4, r5, r6, pc}
	if (extra_cond || llcp_lr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   2764e:	4621      	mov	r1, r4
   27650:	4628      	mov	r0, r5
   27652:	f7fe fff5 	bl	26640 <llcp_tx_alloc_peek>
   27656:	2800      	cmp	r0, #0
   27658:	f43f af7b 	beq.w	27552 <lp_comm_send_req.constprop.0.isra.0+0x42>
		lp_comm_tx(conn, ctx);
   2765c:	4621      	mov	r1, r4
   2765e:	4628      	mov	r0, r5
   27660:	f7ff fc5c 	bl	26f1c <lp_comm_tx>
		ctx->state = ctx->tx_ack ? LP_COMMON_STATE_WAIT_TX_ACK : LP_COMMON_STATE_WAIT_RX;
   27664:	6963      	ldr	r3, [r4, #20]
   27666:	2b00      	cmp	r3, #0
   27668:	bf0c      	ite	eq
   2766a:	2303      	moveq	r3, #3
   2766c:	2302      	movne	r3, #2
   2766e:	72a3      	strb	r3, [r4, #10]
}
   27670:	bd70      	pop	{r4, r5, r6, pc}
   27672:	bf00      	nop
   27674:	0003a970 	.word	0x0003a970
   27678:	0003a004 	.word	0x0003a004
   2767c:	00039f74 	.word	0x00039f74

00027680 <lp_comm_execute_fsm>:
{
   27680:	b530      	push	{r4, r5, lr}
   27682:	460c      	mov	r4, r1
	switch (ctx->state) {
   27684:	7a89      	ldrb	r1, [r1, #10]
{
   27686:	b083      	sub	sp, #12
   27688:	4605      	mov	r5, r0
	switch (ctx->state) {
   2768a:	2904      	cmp	r1, #4
   2768c:	f200 80b1 	bhi.w	277f2 <lp_comm_execute_fsm+0x172>
   27690:	e8df f001 	tbb	[pc, r1]
   27694:	371e2e1a 	.word	0x371e2e1a
   27698:	03          	.byte	0x03
   27699:	00          	.byte	0x00
	switch (evt) {
   2769a:	b9ba      	cbnz	r2, 276cc <lp_comm_execute_fsm+0x4c>
		switch (ctx->proc) {
   2769c:	7a21      	ldrb	r1, [r4, #8]
   2769e:	290c      	cmp	r1, #12
   276a0:	d814      	bhi.n	276cc <lp_comm_execute_fsm+0x4c>
   276a2:	f241 0314 	movw	r3, #4116	; 0x1014
   276a6:	40cb      	lsrs	r3, r1
   276a8:	07db      	lsls	r3, r3, #31
   276aa:	d50f      	bpl.n	276cc <lp_comm_execute_fsm+0x4c>
			if (llcp_ntf_alloc_is_available()) {
   276ac:	9201      	str	r2, [sp, #4]
   276ae:	f7fe ffdb 	bl	26668 <llcp_ntf_alloc_is_available>
   276b2:	b158      	cbz	r0, 276cc <lp_comm_execute_fsm+0x4c>
				lp_comm_ntf(conn, ctx);
   276b4:	4621      	mov	r1, r4
   276b6:	4628      	mov	r0, r5
   276b8:	f7ff fe32 	bl	27320 <lp_comm_ntf>
				llcp_lr_complete(conn);
   276bc:	4628      	mov	r0, r5
   276be:	f000 fb0d 	bl	27cdc <llcp_lr_complete>
				ctx->state = LP_COMMON_STATE_IDLE;
   276c2:	9a01      	ldr	r2, [sp, #4]
   276c4:	72a2      	strb	r2, [r4, #10]
   276c6:	e001      	b.n	276cc <lp_comm_execute_fsm+0x4c>
	switch (evt) {
   276c8:	2a00      	cmp	r2, #0
   276ca:	d055      	beq.n	27778 <lp_comm_execute_fsm+0xf8>
}
   276cc:	b003      	add	sp, #12
   276ce:	bd30      	pop	{r4, r5, pc}
	switch (evt) {
   276d0:	2a05      	cmp	r2, #5
   276d2:	d1fb      	bne.n	276cc <lp_comm_execute_fsm+0x4c>
		switch (ctx->proc) {
   276d4:	7a23      	ldrb	r3, [r4, #8]
   276d6:	2b03      	cmp	r3, #3
   276d8:	d001      	beq.n	276de <lp_comm_execute_fsm+0x5e>
   276da:	2b0a      	cmp	r3, #10
   276dc:	d1f6      	bne.n	276cc <lp_comm_execute_fsm+0x4c>
			ctx->tx_ack = NULL;
   276de:	2300      	movs	r3, #0
   276e0:	6163      	str	r3, [r4, #20]
		lp_comm_complete(conn, ctx, evt, param);
   276e2:	4621      	mov	r1, r4
   276e4:	4628      	mov	r0, r5
}
   276e6:	b003      	add	sp, #12
   276e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		lp_comm_complete(conn, ctx, evt, param);
   276ec:	f7ff be94 	b.w	27418 <lp_comm_complete.constprop.0>
	switch (evt) {
   276f0:	2a00      	cmp	r2, #0
   276f2:	d1eb      	bne.n	276cc <lp_comm_execute_fsm+0x4c>
		lp_comm_send_req(conn, ctx, evt, param);
   276f4:	4621      	mov	r1, r4
   276f6:	4628      	mov	r0, r5
}
   276f8:	b003      	add	sp, #12
   276fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		lp_comm_send_req(conn, ctx, evt, param);
   276fe:	f7ff bf07 	b.w	27510 <lp_comm_send_req.constprop.0.isra.0>
	switch (evt) {
   27702:	2a01      	cmp	r2, #1
   27704:	d1e2      	bne.n	276cc <lp_comm_execute_fsm+0x4c>
	ctx->response_opcode = pdu->llctrl.opcode;
   27706:	78da      	ldrb	r2, [r3, #3]
   27708:	7262      	strb	r2, [r4, #9]
	switch (pdu->llctrl.opcode) {
   2770a:	3a02      	subs	r2, #2
   2770c:	2a17      	cmp	r2, #23
   2770e:	d83b      	bhi.n	27788 <lp_comm_execute_fsm+0x108>
   27710:	a101      	add	r1, pc, #4	; (adr r1, 27718 <lp_comm_execute_fsm+0x98>)
   27712:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   27716:	bf00      	nop
   27718:	000277a5 	.word	0x000277a5
   2771c:	00027789 	.word	0x00027789
   27720:	00027789 	.word	0x00027789
   27724:	00027789 	.word	0x00027789
   27728:	00027789 	.word	0x00027789
   2772c:	000277e9 	.word	0x000277e9
   27730:	00027789 	.word	0x00027789
   27734:	000277df 	.word	0x000277df
   27738:	00027789 	.word	0x00027789
   2773c:	00027789 	.word	0x00027789
   27740:	000277c1 	.word	0x000277c1
   27744:	000276e3 	.word	0x000276e3
   27748:	00027789 	.word	0x00027789
   2774c:	00027789 	.word	0x00027789
   27750:	00027789 	.word	0x00027789
   27754:	000277d5 	.word	0x000277d5
   27758:	00027789 	.word	0x00027789
   2775c:	000276e3 	.word	0x000276e3
   27760:	00027789 	.word	0x00027789
   27764:	000277cb 	.word	0x000277cb
   27768:	00027789 	.word	0x00027789
   2776c:	00027789 	.word	0x00027789
   27770:	00027789 	.word	0x00027789
   27774:	000276e3 	.word	0x000276e3
		if (llcp_lr_ispaused(conn)) {
   27778:	4628      	mov	r0, r5
   2777a:	f000 fa1b 	bl	27bb4 <llcp_lr_ispaused>
   2777e:	2800      	cmp	r0, #0
   27780:	d0b8      	beq.n	276f4 <lp_comm_execute_fsm+0x74>
			ctx->state = LP_COMMON_STATE_WAIT_TX;
   27782:	2301      	movs	r3, #1
   27784:	72a3      	strb	r3, [r4, #10]
   27786:	e7a1      	b.n	276cc <lp_comm_execute_fsm+0x4c>
		LL_ASSERT(0);
   27788:	4a21      	ldr	r2, [pc, #132]	; (27810 <lp_comm_execute_fsm+0x190>)
   2778a:	4922      	ldr	r1, [pc, #136]	; (27814 <lp_comm_execute_fsm+0x194>)
   2778c:	4822      	ldr	r0, [pc, #136]	; (27818 <lp_comm_execute_fsm+0x198>)
   2778e:	f240 333b 	movw	r3, #827	; 0x33b
   27792:	f00b fe41 	bl	33418 <assert_print>
   27796:	4040      	eors	r0, r0
   27798:	f380 8811 	msr	BASEPRI, r0
   2779c:	f04f 0003 	mov.w	r0, #3
   277a0:	df02      	svc	2
   277a2:	e79e      	b.n	276e2 <lp_comm_execute_fsm+0x62>
		LL_ASSERT(0);
   277a4:	4a1a      	ldr	r2, [pc, #104]	; (27810 <lp_comm_execute_fsm+0x190>)
   277a6:	491b      	ldr	r1, [pc, #108]	; (27814 <lp_comm_execute_fsm+0x194>)
   277a8:	481b      	ldr	r0, [pc, #108]	; (27818 <lp_comm_execute_fsm+0x198>)
   277aa:	f240 3322 	movw	r3, #802	; 0x322
   277ae:	f00b fe33 	bl	33418 <assert_print>
   277b2:	4040      	eors	r0, r0
   277b4:	f380 8811 	msr	BASEPRI, r0
   277b8:	f04f 0003 	mov.w	r0, #3
   277bc:	df02      	svc	2
		break;
   277be:	e790      	b.n	276e2 <lp_comm_execute_fsm+0x62>
		llcp_pdu_decode_version_ind(conn, pdu);
   277c0:	4619      	mov	r1, r3
   277c2:	4628      	mov	r0, r5
   277c4:	f000 fbf8 	bl	27fb8 <llcp_pdu_decode_version_ind>
		break;
   277c8:	e78b      	b.n	276e2 <lp_comm_execute_fsm+0x62>
		llcp_pdu_decode_length_rsp(conn, pdu);
   277ca:	4619      	mov	r1, r3
   277cc:	4628      	mov	r0, r5
   277ce:	f000 fde1 	bl	28394 <llcp_pdu_decode_length_rsp>
		break;
   277d2:	e786      	b.n	276e2 <lp_comm_execute_fsm+0x62>
		llcp_pdu_decode_reject_ext_ind(ctx, pdu);
   277d4:	4619      	mov	r1, r3
   277d6:	4620      	mov	r0, r4
   277d8:	f000 fc66 	bl	280a8 <llcp_pdu_decode_reject_ext_ind>
		break;
   277dc:	e781      	b.n	276e2 <lp_comm_execute_fsm+0x62>
		llcp_pdu_decode_feature_rsp(conn, pdu);
   277de:	4619      	mov	r1, r3
   277e0:	4628      	mov	r0, r5
   277e2:	f000 fb89 	bl	27ef8 <llcp_pdu_decode_feature_rsp>
		if (feature_phy_coded(conn)) {
   277e6:	e77c      	b.n	276e2 <lp_comm_execute_fsm+0x62>
		llcp_pdu_decode_unknown_rsp(ctx, pdu);
   277e8:	4619      	mov	r1, r3
   277ea:	4620      	mov	r0, r4
   277ec:	f000 fafc 	bl	27de8 <llcp_pdu_decode_unknown_rsp>
		break;
   277f0:	e777      	b.n	276e2 <lp_comm_execute_fsm+0x62>
		LL_ASSERT(0);
   277f2:	4a07      	ldr	r2, [pc, #28]	; (27810 <lp_comm_execute_fsm+0x190>)
   277f4:	4907      	ldr	r1, [pc, #28]	; (27814 <lp_comm_execute_fsm+0x194>)
   277f6:	4808      	ldr	r0, [pc, #32]	; (27818 <lp_comm_execute_fsm+0x198>)
   277f8:	f44f 7362 	mov.w	r3, #904	; 0x388
   277fc:	f00b fe0c 	bl	33418 <assert_print>
   27800:	4040      	eors	r0, r0
   27802:	f380 8811 	msr	BASEPRI, r0
   27806:	f04f 0003 	mov.w	r0, #3
   2780a:	df02      	svc	2
}
   2780c:	e75e      	b.n	276cc <lp_comm_execute_fsm+0x4c>
   2780e:	bf00      	nop
   27810:	0003a970 	.word	0x0003a970
   27814:	0003a004 	.word	0x0003a004
   27818:	00039f74 	.word	0x00039f74

0002781c <llcp_lp_comm_tx_ack>:
	lp_comm_execute_fsm(conn, ctx, LP_COMMON_EVT_ACK, tx->pdu);
   2781c:	1d13      	adds	r3, r2, #4
   2781e:	2205      	movs	r2, #5
   27820:	f7ff bf2e 	b.w	27680 <lp_comm_execute_fsm>

00027824 <llcp_lp_comm_rx>:
	lp_comm_execute_fsm(conn, ctx, LP_COMMON_EVT_RESPONSE, rx->pdu);
   27824:	f102 031c 	add.w	r3, r2, #28
   27828:	2201      	movs	r2, #1
   2782a:	f7ff bf29 	b.w	27680 <lp_comm_execute_fsm>
   2782e:	bf00      	nop

00027830 <llcp_lp_comm_init_proc>:
	ctx->state = LP_COMMON_STATE_IDLE;
   27830:	2300      	movs	r3, #0
   27832:	7283      	strb	r3, [r0, #10]
}
   27834:	4770      	bx	lr
   27836:	bf00      	nop

00027838 <llcp_lp_comm_run>:
{
   27838:	4613      	mov	r3, r2
	lp_comm_execute_fsm(conn, ctx, LP_COMMON_EVT_RUN, param);
   2783a:	2200      	movs	r2, #0
   2783c:	f7ff bf20 	b.w	27680 <lp_comm_execute_fsm>

00027840 <llcp_rp_comm_rx>:

void llcp_rp_comm_rx(struct ll_conn *conn, struct proc_ctx *ctx, struct node_rx_pdu *rx)
{
	rp_comm_execute_fsm(conn, ctx, RP_COMMON_EVT_REQUEST, rx->pdu);
   27840:	f102 031c 	add.w	r3, r2, #28
   27844:	2202      	movs	r2, #2
   27846:	f7ff bcb9 	b.w	271bc <rp_comm_execute_fsm>
   2784a:	bf00      	nop

0002784c <llcp_rp_comm_tx_ack>:
}

void llcp_rp_comm_tx_ack(struct ll_conn *conn, struct proc_ctx *ctx, struct node_tx *tx)
{
	rp_comm_execute_fsm(conn, ctx, RP_COMMON_EVT_ACK, tx->pdu);
   2784c:	1d13      	adds	r3, r2, #4
   2784e:	2201      	movs	r2, #1
   27850:	f7ff bcb4 	b.w	271bc <rp_comm_execute_fsm>

00027854 <llcp_rp_comm_init_proc>:
}

void llcp_rp_comm_init_proc(struct proc_ctx *ctx)
   27854:	2300      	movs	r3, #0
   27856:	7283      	strb	r3, [r0, #10]
   27858:	4770      	bx	lr
   2785a:	bf00      	nop

0002785c <llcp_rp_comm_run>:
{
	ctx->state = RP_COMMON_STATE_IDLE;
}

void llcp_rp_comm_run(struct ll_conn *conn, struct proc_ctx *ctx, void *param)
{
   2785c:	4613      	mov	r3, r2
	rp_comm_execute_fsm(conn, ctx, RP_COMMON_EVT_RUN, param);
   2785e:	2200      	movs	r2, #0
   27860:	f7ff bcac 	b.w	271bc <rp_comm_execute_fsm>

00027864 <lr_dequeue>:

	shared_data_access_unlock(key);
}

static struct proc_ctx *lr_dequeue(struct ll_conn *conn)
{
   27864:	b570      	push	{r4, r5, r6, lr}
   27866:	4604      	mov	r4, r0
	if (mayfly_is_running()) {
   27868:	f005 fdda 	bl	2d420 <mayfly_is_running>
   2786c:	b168      	cbz	r0, 2788a <lr_dequeue+0x26>
	return list->head;
   2786e:	f8d4 50e8 	ldr.w	r5, [r4, #232]	; 0xe8
Z_GENLIST_GET(slist, snode)
   27872:	b145      	cbz	r5, 27886 <lr_dequeue+0x22>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   27874:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	return node->next;
   27878:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   2787a:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2787e:	4295      	cmp	r5, r2
	list->tail = node;
   27880:	bf08      	it	eq
   27882:	f8c4 30ec 	streq.w	r3, [r4, #236]	; 0xec
	ctx = (struct proc_ctx *)sys_slist_get(&conn->llcp.local.pend_proc_list);

	shared_data_access_unlock(key);

	return ctx;
}
   27886:	4628      	mov	r0, r5
   27888:	bd70      	pop	{r4, r5, r6, pc}
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
   2788a:	4605      	mov	r5, r0
   2788c:	2101      	movs	r1, #1
   2788e:	2003      	movs	r0, #3
   27890:	f005 fd68 	bl	2d364 <mayfly_is_enabled>
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
   27894:	462a      	mov	r2, r5
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
   27896:	4606      	mov	r6, r0
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
   27898:	2101      	movs	r1, #1
   2789a:	2003      	movs	r0, #3
   2789c:	f7f7 fe16 	bl	1f4cc <mayfly_enable>
	return list->head;
   278a0:	f8d4 50e8 	ldr.w	r5, [r4, #232]	; 0xe8
Z_GENLIST_GET(slist, snode)
   278a4:	b145      	cbz	r5, 278b8 <lr_dequeue+0x54>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   278a6:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	return node->next;
   278aa:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   278ac:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   278b0:	4295      	cmp	r5, r2
	list->tail = node;
   278b2:	bf08      	it	eq
   278b4:	f8c4 30ec 	streq.w	r3, [r4, #236]	; 0xec
	if (key) {
   278b8:	2e00      	cmp	r6, #0
   278ba:	d0e4      	beq.n	27886 <lr_dequeue+0x22>
		mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 1U);
   278bc:	2201      	movs	r2, #1
   278be:	4611      	mov	r1, r2
   278c0:	2003      	movs	r0, #3
   278c2:	f7f7 fe03 	bl	1f4cc <mayfly_enable>
}
   278c6:	4628      	mov	r0, r5
   278c8:	bd70      	pop	{r4, r5, r6, pc}
   278ca:	bf00      	nop

000278cc <lr_act_complete>:

	lr_check_done(conn, ctx);
}

static void lr_act_complete(struct ll_conn *conn)
{
   278cc:	b570      	push	{r4, r5, r6, lr}
   278ce:	4604      	mov	r4, r0
	if (mayfly_is_running()) {
   278d0:	f005 fda6 	bl	2d420 <mayfly_is_running>
   278d4:	b140      	cbz	r0, 278e8 <lr_act_complete+0x1c>
	return list->head;
   278d6:	f8d4 50e8 	ldr.w	r5, [r4, #232]	; 0xe8
	struct proc_ctx *ctx;

	ctx = llcp_lr_peek(conn);
	LL_ASSERT(ctx != NULL);
   278da:	b1dd      	cbz	r5, 27914 <lr_act_complete+0x48>
	conn->llcp.local.prt_expire = 0U;
   278dc:	2200      	movs	r2, #0

	/* Stop procedure response timeout timer */
	llcp_lr_prt_stop(conn);

	/* Mark the procedure as safe to delete */
	ctx->done = 1U;
   278de:	2301      	movs	r3, #1
	conn->llcp.local.prt_expire = 0U;
   278e0:	f8a4 20f2 	strh.w	r2, [r4, #242]	; 0xf2
	ctx->done = 1U;
   278e4:	61ab      	str	r3, [r5, #24]
}
   278e6:	bd70      	pop	{r4, r5, r6, pc}
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
   278e8:	4605      	mov	r5, r0
   278ea:	2101      	movs	r1, #1
   278ec:	2003      	movs	r0, #3
   278ee:	f005 fd39 	bl	2d364 <mayfly_is_enabled>
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
   278f2:	462a      	mov	r2, r5
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
   278f4:	4606      	mov	r6, r0
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
   278f6:	2101      	movs	r1, #1
   278f8:	2003      	movs	r0, #3
   278fa:	f7f7 fde7 	bl	1f4cc <mayfly_enable>
   278fe:	f8d4 50e8 	ldr.w	r5, [r4, #232]	; 0xe8
	if (key) {
   27902:	2e00      	cmp	r6, #0
   27904:	d0e9      	beq.n	278da <lr_act_complete+0xe>
		mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 1U);
   27906:	2201      	movs	r2, #1
   27908:	4611      	mov	r1, r2
   2790a:	2003      	movs	r0, #3
   2790c:	f7f7 fdde 	bl	1f4cc <mayfly_enable>
	LL_ASSERT(ctx != NULL);
   27910:	2d00      	cmp	r5, #0
   27912:	d1e3      	bne.n	278dc <lr_act_complete+0x10>
   27914:	4a06      	ldr	r2, [pc, #24]	; (27930 <lr_act_complete+0x64>)
   27916:	4907      	ldr	r1, [pc, #28]	; (27934 <lr_act_complete+0x68>)
   27918:	4807      	ldr	r0, [pc, #28]	; (27938 <lr_act_complete+0x6c>)
   2791a:	f240 139b 	movw	r3, #411	; 0x19b
   2791e:	f00b fd7b 	bl	33418 <assert_print>
   27922:	4040      	eors	r0, r0
   27924:	f380 8811 	msr	BASEPRI, r0
   27928:	f04f 0003 	mov.w	r0, #3
   2792c:	df02      	svc	2
   2792e:	e7d5      	b.n	278dc <lr_act_complete+0x10>
   27930:	0003a9d4 	.word	0x0003a9d4
   27934:	0003aa1c 	.word	0x0003aa1c
   27938:	00039f74 	.word	0x00039f74

0002793c <lr_check_done.part.0>:
static void lr_check_done(struct ll_conn *conn, struct proc_ctx *ctx)
   2793c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2793e:	4605      	mov	r5, r0
   27940:	460c      	mov	r4, r1
	if (mayfly_is_running()) {
   27942:	f005 fd6d 	bl	2d420 <mayfly_is_running>
   27946:	b1b8      	cbz	r0, 27978 <lr_check_done.part.0+0x3c>
   27948:	f8d5 60e8 	ldr.w	r6, [r5, #232]	; 0xe8
		LL_ASSERT(ctx_header == ctx);
   2794c:	42b4      	cmp	r4, r6
   2794e:	d00b      	beq.n	27968 <lr_check_done.part.0+0x2c>
   27950:	4a14      	ldr	r2, [pc, #80]	; (279a4 <lr_check_done.part.0+0x68>)
   27952:	4915      	ldr	r1, [pc, #84]	; (279a8 <lr_check_done.part.0+0x6c>)
   27954:	4815      	ldr	r0, [pc, #84]	; (279ac <lr_check_done.part.0+0x70>)
   27956:	234e      	movs	r3, #78	; 0x4e
   27958:	f00b fd5e 	bl	33418 <assert_print>
   2795c:	4040      	eors	r0, r0
   2795e:	f380 8811 	msr	BASEPRI, r0
   27962:	f04f 0003 	mov.w	r0, #3
   27966:	df02      	svc	2
		lr_dequeue(conn);
   27968:	4628      	mov	r0, r5
   2796a:	f7ff ff7b 	bl	27864 <lr_dequeue>
		llcp_proc_ctx_release(ctx);
   2796e:	4620      	mov	r0, r4
}
   27970:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		llcp_proc_ctx_release(ctx);
   27974:	f7fe be42 	b.w	265fc <llcp_proc_ctx_release>
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
   27978:	4606      	mov	r6, r0
   2797a:	2101      	movs	r1, #1
   2797c:	2003      	movs	r0, #3
   2797e:	f005 fcf1 	bl	2d364 <mayfly_is_enabled>
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
   27982:	4632      	mov	r2, r6
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
   27984:	4607      	mov	r7, r0
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
   27986:	2101      	movs	r1, #1
   27988:	2003      	movs	r0, #3
   2798a:	f7f7 fd9f 	bl	1f4cc <mayfly_enable>
   2798e:	f8d5 60e8 	ldr.w	r6, [r5, #232]	; 0xe8
	if (key) {
   27992:	2f00      	cmp	r7, #0
   27994:	d0da      	beq.n	2794c <lr_check_done.part.0+0x10>
		mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 1U);
   27996:	2201      	movs	r2, #1
   27998:	4611      	mov	r1, r2
   2799a:	2003      	movs	r0, #3
   2799c:	f7f7 fd96 	bl	1f4cc <mayfly_enable>
   279a0:	e7d4      	b.n	2794c <lr_check_done.part.0+0x10>
   279a2:	bf00      	nop
   279a4:	0003a9d4 	.word	0x0003a9d4
   279a8:	0003aa30 	.word	0x0003aa30
   279ac:	00039f74 	.word	0x00039f74

000279b0 <llcp_lr_enqueue>:
{
   279b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   279b2:	4605      	mov	r5, r0
   279b4:	460c      	mov	r4, r1
	if (mayfly_is_running()) {
   279b6:	f005 fd33 	bl	2d420 <mayfly_is_running>
   279ba:	b140      	cbz	r0, 279ce <llcp_lr_enqueue+0x1e>
	parent->next = child;
   279bc:	2300      	movs	r3, #0
   279be:	6023      	str	r3, [r4, #0]
	return list->tail;
   279c0:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
Z_GENLIST_APPEND(slist, snode)
   279c4:	b1f3      	cbz	r3, 27a04 <llcp_lr_enqueue+0x54>
	parent->next = child;
   279c6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   279c8:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
}
   279cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
   279ce:	4606      	mov	r6, r0
   279d0:	2101      	movs	r1, #1
   279d2:	2003      	movs	r0, #3
   279d4:	f005 fcc6 	bl	2d364 <mayfly_is_enabled>
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
   279d8:	4632      	mov	r2, r6
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
   279da:	4607      	mov	r7, r0
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
   279dc:	2101      	movs	r1, #1
   279de:	2003      	movs	r0, #3
   279e0:	f7f7 fd74 	bl	1f4cc <mayfly_enable>
	parent->next = child;
   279e4:	6026      	str	r6, [r4, #0]
	return list->tail;
   279e6:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
Z_GENLIST_APPEND(slist, snode)
   279ea:	b183      	cbz	r3, 27a0e <llcp_lr_enqueue+0x5e>
	parent->next = child;
   279ec:	601c      	str	r4, [r3, #0]
	list->tail = node;
   279ee:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
	if (key) {
   279f2:	2f00      	cmp	r7, #0
   279f4:	d0ea      	beq.n	279cc <llcp_lr_enqueue+0x1c>
		mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 1U);
   279f6:	2201      	movs	r2, #1
}
   279f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 1U);
   279fc:	4611      	mov	r1, r2
   279fe:	2003      	movs	r0, #3
   27a00:	f7f7 bd64 	b.w	1f4cc <mayfly_enable>
	list->head = node;
   27a04:	f8c5 40e8 	str.w	r4, [r5, #232]	; 0xe8
   27a08:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
}
   27a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27a0e:	f8c5 40e8 	str.w	r4, [r5, #232]	; 0xe8
   27a12:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
}
   27a16:	e7ec      	b.n	279f2 <llcp_lr_enqueue+0x42>

00027a18 <llcp_lr_peek>:
{
   27a18:	b570      	push	{r4, r5, r6, lr}
   27a1a:	4605      	mov	r5, r0
	if (mayfly_is_running()) {
   27a1c:	f005 fd00 	bl	2d420 <mayfly_is_running>
   27a20:	b118      	cbz	r0, 27a2a <llcp_lr_peek+0x12>
	return list->head;
   27a22:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
}
   27a26:	4620      	mov	r0, r4
   27a28:	bd70      	pop	{r4, r5, r6, pc}
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
   27a2a:	4604      	mov	r4, r0
   27a2c:	2101      	movs	r1, #1
   27a2e:	2003      	movs	r0, #3
   27a30:	f005 fc98 	bl	2d364 <mayfly_is_enabled>
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
   27a34:	4622      	mov	r2, r4
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
   27a36:	4606      	mov	r6, r0
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
   27a38:	2101      	movs	r1, #1
   27a3a:	2003      	movs	r0, #3
   27a3c:	f7f7 fd46 	bl	1f4cc <mayfly_enable>
   27a40:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
	if (key) {
   27a44:	2e00      	cmp	r6, #0
   27a46:	d0ee      	beq.n	27a26 <llcp_lr_peek+0xe>
		mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 1U);
   27a48:	2201      	movs	r2, #1
   27a4a:	4611      	mov	r1, r2
   27a4c:	2003      	movs	r0, #3
   27a4e:	f7f7 fd3d 	bl	1f4cc <mayfly_enable>
}
   27a52:	4620      	mov	r0, r4
   27a54:	bd70      	pop	{r4, r5, r6, pc}
   27a56:	bf00      	nop

00027a58 <lr_act_run>:
{
   27a58:	b538      	push	{r3, r4, r5, lr}
   27a5a:	4605      	mov	r5, r0
	ctx = llcp_lr_peek(conn);
   27a5c:	f7ff ffdc 	bl	27a18 <llcp_lr_peek>
	switch (ctx->proc) {
   27a60:	7a03      	ldrb	r3, [r0, #8]
   27a62:	3b01      	subs	r3, #1
	ctx = llcp_lr_peek(conn);
   27a64:	4604      	mov	r4, r0
	switch (ctx->proc) {
   27a66:	2b0b      	cmp	r3, #11
   27a68:	d81b      	bhi.n	27aa2 <lr_act_run+0x4a>
   27a6a:	e8df f003 	tbb	[pc, r3]
   27a6e:	0606      	.short	0x0606
   27a70:	1a1a0606 	.word	0x1a1a0606
   27a74:	06141428 	.word	0x06141428
   27a78:	061a      	.short	0x061a
		llcp_lp_comm_run(conn, ctx, NULL);
   27a7a:	4601      	mov	r1, r0
   27a7c:	2200      	movs	r2, #0
   27a7e:	4628      	mov	r0, r5
   27a80:	f7ff feda 	bl	27838 <llcp_lp_comm_run>
	if (ctx->done) {
   27a84:	69a3      	ldr	r3, [r4, #24]
   27a86:	b903      	cbnz	r3, 27a8a <lr_act_run+0x32>
}
   27a88:	bd38      	pop	{r3, r4, r5, pc}
   27a8a:	4621      	mov	r1, r4
   27a8c:	4628      	mov	r0, r5
   27a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27a92:	f7ff bf53 	b.w	2793c <lr_check_done.part.0>
		llcp_lp_cu_run(conn, ctx, NULL);
   27a96:	4601      	mov	r1, r0
   27a98:	2200      	movs	r2, #0
   27a9a:	4628      	mov	r0, r5
   27a9c:	f001 f93e 	bl	28d1c <llcp_lp_cu_run>
		break;
   27aa0:	e7f0      	b.n	27a84 <lr_act_run+0x2c>
		LL_ASSERT(0);
   27aa2:	4a0a      	ldr	r2, [pc, #40]	; (27acc <lr_act_run+0x74>)
   27aa4:	490a      	ldr	r1, [pc, #40]	; (27ad0 <lr_act_run+0x78>)
   27aa6:	480b      	ldr	r0, [pc, #44]	; (27ad4 <lr_act_run+0x7c>)
   27aa8:	f240 138f 	movw	r3, #399	; 0x18f
   27aac:	f00b fcb4 	bl	33418 <assert_print>
   27ab0:	4040      	eors	r0, r0
   27ab2:	f380 8811 	msr	BASEPRI, r0
   27ab6:	f04f 0003 	mov.w	r0, #3
   27aba:	df02      	svc	2
		break;
   27abc:	e7e2      	b.n	27a84 <lr_act_run+0x2c>
		llcp_lp_pu_run(conn, ctx, NULL);
   27abe:	4601      	mov	r1, r0
   27ac0:	2200      	movs	r2, #0
   27ac2:	4628      	mov	r0, r5
   27ac4:	f7fe f82e 	bl	25b24 <llcp_lp_pu_run>
		break;
   27ac8:	e7dc      	b.n	27a84 <lr_act_run+0x2c>
   27aca:	bf00      	nop
   27acc:	0003a9d4 	.word	0x0003a9d4
   27ad0:	0003a004 	.word	0x0003a004
   27ad4:	00039f74 	.word	0x00039f74

00027ad8 <lr_st_active.constprop.0>:
	}
}

static void lr_st_active(struct ll_conn *conn, uint8_t evt, void *param)
{
	switch (evt) {
   27ad8:	2901      	cmp	r1, #1
static void lr_st_active(struct ll_conn *conn, uint8_t evt, void *param)
   27ada:	b510      	push	{r4, lr}
   27adc:	4604      	mov	r4, r0
	switch (evt) {
   27ade:	d017      	beq.n	27b10 <lr_st_active.constprop.0+0x38>
   27ae0:	2903      	cmp	r1, #3
   27ae2:	d004      	beq.n	27aee <lr_st_active.constprop.0+0x16>
   27ae4:	b159      	cbz	r1, 27afe <lr_st_active.constprop.0+0x26>
		break;
	default:
		/* Ignore other evts */
		break;
	}
}
   27ae6:	bd10      	pop	{r4, pc}
		llcp_proc_ctx_release(ctx);
   27ae8:	f7fe fd88 	bl	265fc <llcp_proc_ctx_release>
		ctx = lr_dequeue(conn);
   27aec:	4620      	mov	r0, r4
   27aee:	f7ff feb9 	bl	27864 <lr_dequeue>
	while (ctx != NULL) {
   27af2:	2800      	cmp	r0, #0
   27af4:	d1f8      	bne.n	27ae8 <lr_st_active.constprop.0+0x10>
	conn->llcp.local.state = state;
   27af6:	2302      	movs	r3, #2
   27af8:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
}
   27afc:	bd10      	pop	{r4, pc}
		if (llcp_lr_peek(conn)) {
   27afe:	f7ff ff8b 	bl	27a18 <llcp_lr_peek>
   27b02:	2800      	cmp	r0, #0
   27b04:	d0ef      	beq.n	27ae6 <lr_st_active.constprop.0+0xe>
			lr_act_run(conn);
   27b06:	4620      	mov	r0, r4
}
   27b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			lr_act_run(conn);
   27b0c:	f7ff bfa4 	b.w	27a58 <lr_act_run>
		lr_act_complete(conn);
   27b10:	f7ff fedc 	bl	278cc <lr_act_complete>
	conn->llcp.local.state = state;
   27b14:	2300      	movs	r3, #0
   27b16:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
}
   27b1a:	bd10      	pop	{r4, pc}

00027b1c <lr_execute_fsm.constprop.0>:
		/* Ignore other evts */
		break;
	}
}

static void lr_execute_fsm(struct ll_conn *conn, uint8_t evt, void *param)
   27b1c:	b538      	push	{r3, r4, r5, lr}
{
	switch (conn->llcp.local.state) {
   27b1e:	f890 30f0 	ldrb.w	r3, [r0, #240]	; 0xf0
static void lr_execute_fsm(struct ll_conn *conn, uint8_t evt, void *param)
   27b22:	4604      	mov	r4, r0
	switch (conn->llcp.local.state) {
   27b24:	2b03      	cmp	r3, #3
   27b26:	d831      	bhi.n	27b8c <lr_execute_fsm.constprop.0+0x70>
   27b28:	e8df f003 	tbb	[pc, r3]
   27b2c:	020c0206 	.word	0x020c0206
		break;
	default:
		/* Unknown state */
		LL_ASSERT(0);
	}
}
   27b30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		lr_st_active(conn, evt, param);
   27b34:	f7ff bfd0 	b.w	27ad8 <lr_st_active.constprop.0>
	switch (evt) {
   27b38:	2901      	cmp	r1, #1
   27b3a:	d023      	beq.n	27b84 <lr_execute_fsm.constprop.0+0x68>
   27b3c:	2903      	cmp	r1, #3
   27b3e:	d009      	beq.n	27b54 <lr_execute_fsm.constprop.0+0x38>
   27b40:	b189      	cbz	r1, 27b66 <lr_execute_fsm.constprop.0+0x4a>
}
   27b42:	bd38      	pop	{r3, r4, r5, pc}
	switch (evt) {
   27b44:	2902      	cmp	r1, #2
   27b46:	d1fc      	bne.n	27b42 <lr_execute_fsm.constprop.0+0x26>
	conn->llcp.local.state = state;
   27b48:	2300      	movs	r3, #0
   27b4a:	f880 30f0 	strb.w	r3, [r0, #240]	; 0xf0
}
   27b4e:	bd38      	pop	{r3, r4, r5, pc}
		llcp_proc_ctx_release(ctx);
   27b50:	f7fe fd54 	bl	265fc <llcp_proc_ctx_release>
		ctx = lr_dequeue(conn);
   27b54:	4620      	mov	r0, r4
   27b56:	f7ff fe85 	bl	27864 <lr_dequeue>
	while (ctx != NULL) {
   27b5a:	2800      	cmp	r0, #0
   27b5c:	d1f8      	bne.n	27b50 <lr_execute_fsm.constprop.0+0x34>
	conn->llcp.local.state = state;
   27b5e:	2302      	movs	r3, #2
   27b60:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
}
   27b64:	bd38      	pop	{r3, r4, r5, pc}
		ctx = llcp_lr_peek(conn);
   27b66:	f7ff ff57 	bl	27a18 <llcp_lr_peek>
		if (ctx) {
   27b6a:	2800      	cmp	r0, #0
   27b6c:	d0e9      	beq.n	27b42 <lr_execute_fsm.constprop.0+0x26>
			const enum llcp_proc curr_proc = ctx->proc;
   27b6e:	7a05      	ldrb	r5, [r0, #8]
			lr_act_run(conn);
   27b70:	4620      	mov	r0, r4
   27b72:	f7ff ff71 	bl	27a58 <lr_act_run>
			if (curr_proc != PROC_TERMINATE) {
   27b76:	2d0a      	cmp	r5, #10
	conn->llcp.local.state = state;
   27b78:	bf14      	ite	ne
   27b7a:	2301      	movne	r3, #1
   27b7c:	2303      	moveq	r3, #3
   27b7e:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
}
   27b82:	bd38      	pop	{r3, r4, r5, pc}
   27b84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		lr_act_complete(conn);
   27b88:	f7ff bea0 	b.w	278cc <lr_act_complete>
		LL_ASSERT(0);
   27b8c:	4a06      	ldr	r2, [pc, #24]	; (27ba8 <lr_execute_fsm.constprop.0+0x8c>)
   27b8e:	4907      	ldr	r1, [pc, #28]	; (27bac <lr_execute_fsm.constprop.0+0x90>)
   27b90:	4807      	ldr	r0, [pc, #28]	; (27bb0 <lr_execute_fsm.constprop.0+0x94>)
   27b92:	f240 2329 	movw	r3, #553	; 0x229
   27b96:	f00b fc3f 	bl	33418 <assert_print>
   27b9a:	4040      	eors	r0, r0
   27b9c:	f380 8811 	msr	BASEPRI, r0
   27ba0:	f04f 0003 	mov.w	r0, #3
   27ba4:	df02      	svc	2
}
   27ba6:	bd38      	pop	{r3, r4, r5, pc}
   27ba8:	0003a9d4 	.word	0x0003a9d4
   27bac:	0003a004 	.word	0x0003a004
   27bb0:	00039f74 	.word	0x00039f74

00027bb4 <llcp_lr_ispaused>:
	return conn->llcp.local.pause == 1U;
   27bb4:	f890 00f4 	ldrb.w	r0, [r0, #244]	; 0xf4
}
   27bb8:	f1a0 0001 	sub.w	r0, r0, #1
   27bbc:	fab0 f080 	clz	r0, r0
   27bc0:	0940      	lsrs	r0, r0, #5
   27bc2:	4770      	bx	lr

00027bc4 <llcp_lr_pause>:
	conn->llcp.local.pause = 1U;
   27bc4:	2301      	movs	r3, #1
   27bc6:	f880 30f4 	strb.w	r3, [r0, #244]	; 0xf4
}
   27bca:	4770      	bx	lr

00027bcc <llcp_lr_resume>:
	conn->llcp.local.pause = 0U;
   27bcc:	2300      	movs	r3, #0
   27bce:	f880 30f4 	strb.w	r3, [r0, #244]	; 0xf4
}
   27bd2:	4770      	bx	lr

00027bd4 <llcp_lr_prt_restart>:
	conn->llcp.local.prt_expire = conn->llcp.prt_reload;
   27bd4:	f8b0 3108 	ldrh.w	r3, [r0, #264]	; 0x108
   27bd8:	f8a0 30f2 	strh.w	r3, [r0, #242]	; 0xf2
}
   27bdc:	4770      	bx	lr
   27bde:	bf00      	nop

00027be0 <llcp_lr_prt_restart_with_value>:
	conn->llcp.local.prt_expire = value;
   27be0:	f8a0 10f2 	strh.w	r1, [r0, #242]	; 0xf2
}
   27be4:	4770      	bx	lr
   27be6:	bf00      	nop

00027be8 <llcp_lr_prt_stop>:
	conn->llcp.local.prt_expire = 0U;
   27be8:	2300      	movs	r3, #0
   27bea:	f8a0 30f2 	strh.w	r3, [r0, #242]	; 0xf2
}
   27bee:	4770      	bx	lr

00027bf0 <llcp_lr_rx>:
{
   27bf0:	b538      	push	{r3, r4, r5, lr}
	switch (ctx->proc) {
   27bf2:	7a0b      	ldrb	r3, [r1, #8]
   27bf4:	3b01      	subs	r3, #1
{
   27bf6:	460c      	mov	r4, r1
   27bf8:	4605      	mov	r5, r0
	switch (ctx->proc) {
   27bfa:	2b0b      	cmp	r3, #11
   27bfc:	d817      	bhi.n	27c2e <llcp_lr_rx+0x3e>
   27bfe:	e8df f003 	tbb	[pc, r3]
   27c02:	0606      	.short	0x0606
   27c04:	16160606 	.word	0x16160606
   27c08:	06121224 	.word	0x06121224
   27c0c:	0616      	.short	0x0616
		llcp_lp_comm_rx(conn, ctx, rx);
   27c0e:	4621      	mov	r1, r4
   27c10:	f7ff fe08 	bl	27824 <llcp_lp_comm_rx>
	if (ctx->done) {
   27c14:	69a3      	ldr	r3, [r4, #24]
   27c16:	b903      	cbnz	r3, 27c1a <llcp_lr_rx+0x2a>
}
   27c18:	bd38      	pop	{r3, r4, r5, pc}
   27c1a:	4621      	mov	r1, r4
   27c1c:	4628      	mov	r0, r5
   27c1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27c22:	f7ff be8b 	b.w	2793c <lr_check_done.part.0>
		llcp_lp_cu_rx(conn, ctx, rx);
   27c26:	4621      	mov	r1, r4
   27c28:	f001 f820 	bl	28c6c <llcp_lp_cu_rx>
		break;
   27c2c:	e7f2      	b.n	27c14 <llcp_lr_rx+0x24>
		LL_ASSERT(0);
   27c2e:	4a09      	ldr	r2, [pc, #36]	; (27c54 <llcp_lr_rx+0x64>)
   27c30:	4909      	ldr	r1, [pc, #36]	; (27c58 <llcp_lr_rx+0x68>)
   27c32:	480a      	ldr	r0, [pc, #40]	; (27c5c <llcp_lr_rx+0x6c>)
   27c34:	f240 130d 	movw	r3, #269	; 0x10d
   27c38:	f00b fbee 	bl	33418 <assert_print>
   27c3c:	4040      	eors	r0, r0
   27c3e:	f380 8811 	msr	BASEPRI, r0
   27c42:	f04f 0003 	mov.w	r0, #3
   27c46:	df02      	svc	2
		break;
   27c48:	e7e4      	b.n	27c14 <llcp_lr_rx+0x24>
		llcp_lp_pu_rx(conn, ctx, rx);
   27c4a:	4621      	mov	r1, r4
   27c4c:	f7fd ff46 	bl	25adc <llcp_lp_pu_rx>
		break;
   27c50:	e7e0      	b.n	27c14 <llcp_lr_rx+0x24>
   27c52:	bf00      	nop
   27c54:	0003a9d4 	.word	0x0003a9d4
   27c58:	0003a004 	.word	0x0003a004
   27c5c:	00039f74 	.word	0x00039f74

00027c60 <llcp_lr_tx_ack>:
{
   27c60:	b538      	push	{r3, r4, r5, lr}
	switch (ctx->proc) {
   27c62:	7a0b      	ldrb	r3, [r1, #8]
   27c64:	3b03      	subs	r3, #3
{
   27c66:	460c      	mov	r4, r1
   27c68:	4605      	mov	r5, r0
	switch (ctx->proc) {
   27c6a:	2b09      	cmp	r3, #9
   27c6c:	d809      	bhi.n	27c82 <llcp_lr_tx_ack+0x22>
   27c6e:	e8df f003 	tbb	[pc, r3]
   27c72:	0805      	.short	0x0805
   27c74:	080b0808 	.word	0x080b0808
   27c78:	05080508 	.word	0x05080508
		llcp_lp_comm_tx_ack(conn, ctx, tx);
   27c7c:	4621      	mov	r1, r4
   27c7e:	f7ff fdcd 	bl	2781c <llcp_lp_comm_tx_ack>
	if (ctx->done) {
   27c82:	69a3      	ldr	r3, [r4, #24]
   27c84:	b933      	cbnz	r3, 27c94 <llcp_lr_tx_ack+0x34>
}
   27c86:	bd38      	pop	{r3, r4, r5, pc}
		llcp_lp_pu_tx_ack(conn, ctx, tx);
   27c88:	4621      	mov	r1, r4
   27c8a:	f7fd ff4f 	bl	25b2c <llcp_lp_pu_tx_ack>
	if (ctx->done) {
   27c8e:	69a3      	ldr	r3, [r4, #24]
   27c90:	2b00      	cmp	r3, #0
   27c92:	d0f8      	beq.n	27c86 <llcp_lr_tx_ack+0x26>
   27c94:	4621      	mov	r1, r4
   27c96:	4628      	mov	r0, r5
}
   27c98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27c9c:	f7ff be4e 	b.w	2793c <lr_check_done.part.0>

00027ca0 <llcp_lr_tx_ntf>:
{
   27ca0:	b538      	push	{r3, r4, r5, lr}
	switch (ctx->proc) {
   27ca2:	7a0b      	ldrb	r3, [r1, #8]
   27ca4:	2b07      	cmp	r3, #7
{
   27ca6:	460c      	mov	r4, r1
   27ca8:	4605      	mov	r5, r0
	switch (ctx->proc) {
   27caa:	d008      	beq.n	27cbe <llcp_lr_tx_ntf+0x1e>
	if (ctx->done) {
   27cac:	69a3      	ldr	r3, [r4, #24]
   27cae:	b903      	cbnz	r3, 27cb2 <llcp_lr_tx_ntf+0x12>
}
   27cb0:	bd38      	pop	{r3, r4, r5, pc}
   27cb2:	4621      	mov	r1, r4
   27cb4:	4628      	mov	r0, r5
   27cb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27cba:	f7ff be3f 	b.w	2793c <lr_check_done.part.0>
		llcp_lp_pu_tx_ntf(conn, ctx);
   27cbe:	f7fd ff39 	bl	25b34 <llcp_lp_pu_tx_ntf>
		break;
   27cc2:	e7f3      	b.n	27cac <llcp_lr_tx_ntf+0xc>

00027cc4 <llcp_lr_init>:
	conn->llcp.local.state = state;
   27cc4:	2202      	movs	r2, #2

void llcp_lr_init(struct ll_conn *conn)
{
	lr_set_state(conn, LR_STATE_DISCONNECT);
	conn->llcp.local.prt_expire = 0U;
   27cc6:	2300      	movs	r3, #0
	conn->llcp.local.state = state;
   27cc8:	f880 20f0 	strb.w	r2, [r0, #240]	; 0xf0
	conn->llcp.local.prt_expire = 0U;
   27ccc:	f8a0 30f2 	strh.w	r3, [r0, #242]	; 0xf2
}
   27cd0:	4770      	bx	lr
   27cd2:	bf00      	nop

00027cd4 <llcp_lr_run>:

void llcp_lr_run(struct ll_conn *conn)
{
	lr_execute_fsm(conn, LR_EVT_RUN, NULL);
   27cd4:	2100      	movs	r1, #0
   27cd6:	f7ff bf21 	b.w	27b1c <lr_execute_fsm.constprop.0>
   27cda:	bf00      	nop

00027cdc <llcp_lr_complete>:
}

void llcp_lr_complete(struct ll_conn *conn)
{
   27cdc:	b510      	push	{r4, lr}
	switch (conn->llcp.local.state) {
   27cde:	f890 30f0 	ldrb.w	r3, [r0, #240]	; 0xf0
{
   27ce2:	4604      	mov	r4, r0
	switch (conn->llcp.local.state) {
   27ce4:	2b03      	cmp	r3, #3
   27ce6:	d80d      	bhi.n	27d04 <llcp_lr_complete+0x28>
   27ce8:	e8df f003 	tbb	[pc, r3]
   27cec:	02070208 	.word	0x02070208
		lr_act_complete(conn);
   27cf0:	f7ff fdec 	bl	278cc <lr_act_complete>
	conn->llcp.local.state = state;
   27cf4:	2300      	movs	r3, #0
   27cf6:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
	lr_execute_fsm(conn, LR_EVT_COMPLETE, NULL);
}
   27cfa:	bd10      	pop	{r4, pc}
   27cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		lr_act_complete(conn);
   27d00:	f7ff bde4 	b.w	278cc <lr_act_complete>
		LL_ASSERT(0);
   27d04:	4a06      	ldr	r2, [pc, #24]	; (27d20 <llcp_lr_complete+0x44>)
   27d06:	4907      	ldr	r1, [pc, #28]	; (27d24 <llcp_lr_complete+0x48>)
   27d08:	4807      	ldr	r0, [pc, #28]	; (27d28 <llcp_lr_complete+0x4c>)
   27d0a:	f240 2329 	movw	r3, #553	; 0x229
   27d0e:	f00b fb83 	bl	33418 <assert_print>
   27d12:	4040      	eors	r0, r0
   27d14:	f380 8811 	msr	BASEPRI, r0
   27d18:	f04f 0003 	mov.w	r0, #3
   27d1c:	df02      	svc	2
}
   27d1e:	bd10      	pop	{r4, pc}
   27d20:	0003a9d4 	.word	0x0003a9d4
   27d24:	0003a004 	.word	0x0003a004
   27d28:	00039f74 	.word	0x00039f74

00027d2c <llcp_lr_connect>:

void llcp_lr_connect(struct ll_conn *conn)
{
   27d2c:	b508      	push	{r3, lr}
	switch (conn->llcp.local.state) {
   27d2e:	f890 30f0 	ldrb.w	r3, [r0, #240]	; 0xf0
   27d32:	2b02      	cmp	r3, #2
   27d34:	d011      	beq.n	27d5a <llcp_lr_connect+0x2e>
   27d36:	d800      	bhi.n	27d3a <llcp_lr_connect+0xe>
	lr_execute_fsm(conn, LR_EVT_CONNECT, NULL);
}
   27d38:	bd08      	pop	{r3, pc}
	switch (conn->llcp.local.state) {
   27d3a:	2b03      	cmp	r3, #3
   27d3c:	d0fc      	beq.n	27d38 <llcp_lr_connect+0xc>
		LL_ASSERT(0);
   27d3e:	4a09      	ldr	r2, [pc, #36]	; (27d64 <llcp_lr_connect+0x38>)
   27d40:	4909      	ldr	r1, [pc, #36]	; (27d68 <llcp_lr_connect+0x3c>)
   27d42:	480a      	ldr	r0, [pc, #40]	; (27d6c <llcp_lr_connect+0x40>)
   27d44:	f240 2329 	movw	r3, #553	; 0x229
   27d48:	f00b fb66 	bl	33418 <assert_print>
   27d4c:	4040      	eors	r0, r0
   27d4e:	f380 8811 	msr	BASEPRI, r0
   27d52:	f04f 0003 	mov.w	r0, #3
   27d56:	df02      	svc	2
}
   27d58:	bd08      	pop	{r3, pc}
	conn->llcp.local.state = state;
   27d5a:	2300      	movs	r3, #0
   27d5c:	f880 30f0 	strb.w	r3, [r0, #240]	; 0xf0
}
   27d60:	bd08      	pop	{r3, pc}
   27d62:	bf00      	nop
   27d64:	0003a9d4 	.word	0x0003a9d4
   27d68:	0003a004 	.word	0x0003a004
   27d6c:	00039f74 	.word	0x00039f74

00027d70 <llcp_lr_disconnect>:

void llcp_lr_disconnect(struct ll_conn *conn)
{
	lr_execute_fsm(conn, LR_EVT_DISCONNECT, NULL);
   27d70:	2103      	movs	r1, #3
   27d72:	f7ff bed3 	b.w	27b1c <lr_execute_fsm.constprop.0>
   27d76:	bf00      	nop

00027d78 <llcp_lr_abort>:
}

void llcp_lr_abort(struct ll_conn *conn)
{
   27d78:	b538      	push	{r3, r4, r5, lr}
   27d7a:	4604      	mov	r4, r0
	struct proc_ctx *ctx;

	/* Flush all pending procedures */
	ctx = lr_dequeue(conn);
   27d7c:	f7ff fd72 	bl	27864 <lr_dequeue>
	while (ctx) {
   27d80:	b130      	cbz	r0, 27d90 <llcp_lr_abort+0x18>
		llcp_proc_ctx_release(ctx);
   27d82:	f7fe fc3b 	bl	265fc <llcp_proc_ctx_release>
		ctx = lr_dequeue(conn);
   27d86:	4620      	mov	r0, r4
   27d88:	f7ff fd6c 	bl	27864 <lr_dequeue>
	while (ctx) {
   27d8c:	2800      	cmp	r0, #0
   27d8e:	d1f8      	bne.n	27d82 <llcp_lr_abort+0xa>
	conn->llcp.local.prt_expire = 0U;
   27d90:	2500      	movs	r5, #0
   27d92:	f8a4 50f2 	strh.w	r5, [r4, #242]	; 0xf2
	}

	llcp_lr_prt_stop(conn);
	llcp_rr_set_incompat(conn, 0U);
   27d96:	4629      	mov	r1, r5
   27d98:	4620      	mov	r0, r4
   27d9a:	f001 faa3 	bl	292e4 <llcp_rr_set_incompat>
	conn->llcp.local.state = state;
   27d9e:	f884 50f0 	strb.w	r5, [r4, #240]	; 0xf0
	lr_set_state(conn, LR_STATE_IDLE);
}
   27da2:	bd38      	pop	{r3, r4, r5, pc}

00027da4 <llcp_pdu_encode_ping_req>:
 * LE Ping Procedure Helpers
 */

void llcp_pdu_encode_ping_req(struct pdu_data *pdu)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   27da4:	7803      	ldrb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(ping_req);
   27da6:	2101      	movs	r1, #1
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   27da8:	2212      	movs	r2, #18
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   27daa:	f043 0303 	orr.w	r3, r3, #3
   27dae:	7003      	strb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(ping_req);
   27db0:	7041      	strb	r1, [r0, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   27db2:	70c2      	strb	r2, [r0, #3]
}
   27db4:	4770      	bx	lr
   27db6:	bf00      	nop

00027db8 <llcp_pdu_encode_ping_rsp>:

void llcp_pdu_encode_ping_rsp(struct pdu_data *pdu)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   27db8:	7803      	ldrb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(ping_rsp);
   27dba:	2101      	movs	r1, #1
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   27dbc:	2213      	movs	r2, #19
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   27dbe:	f043 0303 	orr.w	r3, r3, #3
   27dc2:	7003      	strb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(ping_rsp);
   27dc4:	7041      	strb	r1, [r0, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   27dc6:	70c2      	strb	r2, [r0, #3]
}
   27dc8:	4770      	bx	lr
   27dca:	bf00      	nop

00027dcc <llcp_pdu_encode_unknown_rsp>:
 * Unknown response helper
 */

void llcp_pdu_encode_unknown_rsp(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   27dcc:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(unknown_rsp);
   27dce:	f04f 0c02 	mov.w	ip, #2
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   27dd2:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   27dd6:	2207      	movs	r2, #7
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   27dd8:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(unknown_rsp);
   27dda:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   27dde:	70ca      	strb	r2, [r1, #3]

	pdu->llctrl.unknown_rsp.type = ctx->unknown_response.type;
   27de0:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
   27de4:	710b      	strb	r3, [r1, #4]
}
   27de6:	4770      	bx	lr

00027de8 <llcp_pdu_decode_unknown_rsp>:

void llcp_pdu_decode_unknown_rsp(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	ctx->unknown_response.type = pdu->llctrl.unknown_rsp.type;
   27de8:	790b      	ldrb	r3, [r1, #4]
   27dea:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
}
   27dee:	4770      	bx	lr

00027df0 <llcp_ntf_encode_unknown_rsp>:

void llcp_ntf_encode_unknown_rsp(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	struct pdu_data_llctrl_unknown_rsp *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
   27df0:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(unknown_rsp);
   27df2:	f04f 0c02 	mov.w	ip, #2
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   27df6:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   27dfa:	2207      	movs	r2, #7
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   27dfc:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(unknown_rsp);
   27dfe:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   27e02:	70ca      	strb	r2, [r1, #3]
	p = &pdu->llctrl.unknown_rsp;
	p->type = ctx->unknown_response.type;
   27e04:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
   27e08:	710b      	strb	r3, [r1, #4]
}
   27e0a:	4770      	bx	lr

00027e0c <llcp_pdu_encode_feature_req>:

void llcp_pdu_encode_feature_req(struct ll_conn *conn, struct pdu_data *pdu)
{
	struct pdu_data_llctrl_feature_req *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
   27e0c:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(feature_req);
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_REQ;
   27e0e:	f04f 0c08 	mov.w	ip, #8
	pdu->len = PDU_DATA_LLCTRL_LEN(feature_req);
   27e12:	2209      	movs	r2, #9
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   27e14:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_REQ;
   27e18:	f881 c003 	strb.w	ip, [r1, #3]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   27e1c:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(feature_req);
   27e1e:	704a      	strb	r2, [r1, #1]

#if defined(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG) && defined(CONFIG_BT_PERIPHERAL)
	if (conn->lll.role == BT_HCI_ROLE_PERIPHERAL) {
   27e20:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
	dst[1] = val >> 8;
   27e24:	2300      	movs	r3, #0
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PER_INIT_FEAT_XCHG;
   27e26:	429a      	cmp	r2, r3
	dst[0] = val;
   27e28:	f04f 027f 	mov.w	r2, #127	; 0x7f
   27e2c:	bfb8      	it	lt
   27e2e:	f04f 0c0e 	movlt.w	ip, #14
	dst[1] = val >> 8;
   27e32:	2041      	movs	r0, #65	; 0x41
	dst[0] = val;
   27e34:	710a      	strb	r2, [r1, #4]
   27e36:	2201      	movs	r2, #1
   27e38:	f881 c003 	strb.w	ip, [r1, #3]
	dst[1] = val >> 8;
   27e3c:	7148      	strb	r0, [r1, #5]
	dst[0] = val;
   27e3e:	718a      	strb	r2, [r1, #6]
	dst[1] = val >> 8;
   27e40:	71cb      	strb	r3, [r1, #7]
	dst[0] = val;
   27e42:	720b      	strb	r3, [r1, #8]
	dst[1] = val >> 8;
   27e44:	724b      	strb	r3, [r1, #9]
	dst[0] = val;
   27e46:	728b      	strb	r3, [r1, #10]
	dst[1] = val >> 8;
   27e48:	72cb      	strb	r3, [r1, #11]
	}
#endif /* CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG && CONFIG_BT_PERIPHERAL */

	p = &pdu->llctrl.feature_req;
	sys_put_le64(LL_FEAT, p->features);
}
   27e4a:	4770      	bx	lr

00027e4c <llcp_pdu_encode_feature_rsp>:
void llcp_pdu_encode_feature_rsp(struct ll_conn *conn, struct pdu_data *pdu)
{
	struct pdu_data_llctrl_feature_rsp *p;
	uint64_t feature_rsp = LL_FEAT;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
   27e4c:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(feature_rsp);
   27e4e:	2209      	movs	r2, #9
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   27e50:	f043 0303 	orr.w	r3, r3, #3
   27e54:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(feature_rsp);
   27e56:	704a      	strb	r2, [r1, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   27e58:	70ca      	strb	r2, [r1, #3]

	/*
	 * we only filter on octet 0, remaining 7 octets are the features
	 * we support, as defined in LL_FEAT
	 */
	feature_rsp &= (FEAT_FILT_OCTET0 | conn->llcp.fex.features_used);
   27e5a:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
   27e5e:	2300      	movs	r3, #0
   27e60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   27e64:	f04f 0c41 	mov.w	ip, #65	; 0x41
	dst[0] = val;
   27e68:	2001      	movs	r0, #1
   27e6a:	710a      	strb	r2, [r1, #4]
	dst[1] = val >> 8;
   27e6c:	f881 c005 	strb.w	ip, [r1, #5]
	dst[0] = val;
   27e70:	7188      	strb	r0, [r1, #6]
	dst[1] = val >> 8;
   27e72:	71cb      	strb	r3, [r1, #7]
	dst[0] = val;
   27e74:	720b      	strb	r3, [r1, #8]
	dst[1] = val >> 8;
   27e76:	724b      	strb	r3, [r1, #9]
	dst[0] = val;
   27e78:	728b      	strb	r3, [r1, #10]
	dst[1] = val >> 8;
   27e7a:	72cb      	strb	r3, [r1, #11]

	sys_put_le64(feature_rsp, p->features);
}
   27e7c:	4770      	bx	lr
   27e7e:	bf00      	nop

00027e80 <llcp_ntf_encode_feature_rsp>:

void llcp_ntf_encode_feature_rsp(struct ll_conn *conn, struct pdu_data *pdu)
{
	struct pdu_data_llctrl_feature_rsp *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
   27e80:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(feature_rsp);
   27e82:	2209      	movs	r2, #9
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   27e84:	f043 0303 	orr.w	r3, r3, #3
   27e88:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(feature_rsp);
   27e8a:	704a      	strb	r2, [r1, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   27e8c:	70ca      	strb	r2, [r1, #3]
	p = &pdu->llctrl.feature_rsp;

	sys_put_le64(conn->llcp.fex.features_peer, p->features);
   27e8e:	e9d0 234a 	ldrd	r2, r3, [r0, #296]	; 0x128
	sys_put_le16(val >> 16, &dst[2]);
   27e92:	0c10      	lsrs	r0, r2, #16
	dst[1] = val >> 8;
   27e94:	f3c2 2c07 	ubfx	ip, r2, #8, #8
	dst[0] = val;
   27e98:	710a      	strb	r2, [r1, #4]
	sys_put_le16(val >> 16, &dst[2]);
   27e9a:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   27e9c:	f881 c005 	strb.w	ip, [r1, #5]
	dst[0] = val;
   27ea0:	7188      	strb	r0, [r1, #6]
	dst[1] = val >> 8;
   27ea2:	ea4f 2c10 	mov.w	ip, r0, lsr #8
	dst[0] = val;
   27ea6:	720b      	strb	r3, [r1, #8]
	dst[1] = val >> 8;
   27ea8:	f3c3 2007 	ubfx	r0, r3, #8, #8
   27eac:	0a13      	lsrs	r3, r2, #8
   27eae:	f881 c007 	strb.w	ip, [r1, #7]
   27eb2:	7248      	strb	r0, [r1, #9]
	dst[0] = val;
   27eb4:	728a      	strb	r2, [r1, #10]
	dst[1] = val >> 8;
   27eb6:	72cb      	strb	r3, [r1, #11]
}
   27eb8:	4770      	bx	lr
   27eba:	bf00      	nop

00027ebc <llcp_pdu_decode_feature_req>:
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   27ebc:	688b      	ldr	r3, [r1, #8]
   27ebe:	f8d1 c004 	ldr.w	ip, [r1, #4]
void llcp_pdu_decode_feature_req(struct ll_conn *conn, struct pdu_data *pdu)
{
	uint64_t featureset;

	feature_filter(pdu->llctrl.feature_req.features, &featureset);
	conn->llcp.fex.features_used = LL_FEAT & featureset;
   27ec2:	4a0b      	ldr	r2, [pc, #44]	; (27ef0 <llcp_pdu_decode_feature_req+0x34>)

	featureset &= (FEAT_FILT_OCTET0 | conn->llcp.fex.features_used);
   27ec4:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	conn->llcp.fex.features_peer = featureset;
   27ec8:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c

	conn->llcp.fex.valid = 1;
   27ecc:	2301      	movs	r3, #1
   27ece:	f880 3121 	strb.w	r3, [r0, #289]	; 0x121
	featureset &= (FEAT_FILT_OCTET0 | conn->llcp.fex.features_used);
   27ed2:	4b08      	ldr	r3, [pc, #32]	; (27ef4 <llcp_pdu_decode_feature_req+0x38>)
	conn->llcp.fex.features_used = LL_FEAT & featureset;
   27ed4:	ea0c 0202 	and.w	r2, ip, r2
	featureset &= (FEAT_FILT_OCTET0 | conn->llcp.fex.features_used);
   27ed8:	4313      	orrs	r3, r2
   27eda:	ea03 030c 	and.w	r3, r3, ip
	conn->llcp.fex.features_peer = featureset;
   27ede:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
	conn->llcp.fex.features_used = LL_FEAT & featureset;
   27ee2:	2300      	movs	r3, #0
   27ee4:	f8c0 2130 	str.w	r2, [r0, #304]	; 0x130
   27ee8:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
}
   27eec:	4770      	bx	lr
   27eee:	bf00      	nop
   27ef0:	0001412f 	.word	0x0001412f
   27ef4:	f787cf00 	.word	0xf787cf00

00027ef8 <llcp_pdu_decode_feature_rsp>:
   27ef8:	f8d1 c004 	ldr.w	ip, [r1, #4]
void llcp_pdu_decode_feature_rsp(struct ll_conn *conn, struct pdu_data *pdu)
{
	uint64_t featureset;

	feature_filter(pdu->llctrl.feature_rsp.features, &featureset);
	conn->llcp.fex.features_used = LL_FEAT & featureset;
   27efc:	4a09      	ldr	r2, [pc, #36]	; (27f24 <llcp_pdu_decode_feature_rsp+0x2c>)
   27efe:	688b      	ldr	r3, [r1, #8]
   27f00:	ea0c 0202 	and.w	r2, ip, r2
   27f04:	f8c0 2130 	str.w	r2, [r0, #304]	; 0x130
	feat &= LL_FEAT_BIT_MASK_VALID;
   27f08:	4a07      	ldr	r2, [pc, #28]	; (27f28 <llcp_pdu_decode_feature_rsp+0x30>)
   27f0a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   27f0e:	ea0c 0202 	and.w	r2, ip, r2

	conn->llcp.fex.features_peer = featureset;
   27f12:	e9c0 234a 	strd	r2, r3, [r0, #296]	; 0x128
	conn->llcp.fex.valid = 1;
   27f16:	2101      	movs	r1, #1
	conn->llcp.fex.features_used = LL_FEAT & featureset;
   27f18:	2300      	movs	r3, #0
	conn->llcp.fex.valid = 1;
   27f1a:	f880 1121 	strb.w	r1, [r0, #289]	; 0x121
	conn->llcp.fex.features_used = LL_FEAT & featureset;
   27f1e:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
}
   27f22:	4770      	bx	lr
   27f24:	0001412f 	.word	0x0001412f
   27f28:	f787cf2f 	.word	0xf787cf2f

00027f2c <llcp_pdu_encode_min_used_chans_ind>:
#if defined(CONFIG_BT_PERIPHERAL)
void llcp_pdu_encode_min_used_chans_ind(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	struct pdu_data_llctrl_min_used_chans_ind *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
   27f2c:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(min_used_chans_ind);
   27f2e:	f04f 0c03 	mov.w	ip, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   27f32:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND;
   27f36:	2219      	movs	r2, #25
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   27f38:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(min_used_chans_ind);
   27f3a:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND;
   27f3e:	70ca      	strb	r2, [r1, #3]
	p = &pdu->llctrl.min_used_chans_ind;
	p->phys = ctx->data.muc.phys;
   27f40:	7f03      	ldrb	r3, [r0, #28]
   27f42:	710b      	strb	r3, [r1, #4]
	p->min_used_chans = ctx->data.muc.min_used_chans;
   27f44:	7f43      	ldrb	r3, [r0, #29]
   27f46:	714b      	strb	r3, [r1, #5]
}
   27f48:	4770      	bx	lr
   27f4a:	bf00      	nop

00027f4c <llcp_pdu_encode_terminate_ind>:
 */
void llcp_pdu_encode_terminate_ind(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	struct pdu_data_llctrl_terminate_ind *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
   27f4c:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(terminate_ind);
   27f4e:	2202      	movs	r2, #2
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   27f50:	f043 0303 	orr.w	r3, r3, #3
   27f54:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(terminate_ind);
   27f56:	704a      	strb	r2, [r1, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_TERMINATE_IND;
   27f58:	70ca      	strb	r2, [r1, #3]
	p = &pdu->llctrl.terminate_ind;
	p->error_code = ctx->data.term.error_code;
   27f5a:	7f03      	ldrb	r3, [r0, #28]
   27f5c:	710b      	strb	r3, [r1, #4]
}
   27f5e:	4770      	bx	lr

00027f60 <llcp_pdu_decode_terminate_ind>:

void llcp_pdu_decode_terminate_ind(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	ctx->data.term.error_code = pdu->llctrl.terminate_ind.error_code;
   27f60:	790b      	ldrb	r3, [r1, #4]
   27f62:	7703      	strb	r3, [r0, #28]
}
   27f64:	4770      	bx	lr
   27f66:	bf00      	nop

00027f68 <llcp_pdu_encode_version_ind>:
{
	uint16_t cid;
	uint16_t svn;
	struct pdu_data_llctrl_version_ind *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
   27f68:	7803      	ldrb	r3, [r0, #0]

	p = &pdu->llctrl.version_ind;
	p->version_number = LL_VERSION_NUMBER;
	cid = sys_cpu_to_le16(ll_settings_company_id());
	svn = sys_cpu_to_le16(ll_settings_subversion_number());
	p->company_id = cid;
   27f6a:	4a07      	ldr	r2, [pc, #28]	; (27f88 <llcp_pdu_encode_version_ind+0x20>)
   27f6c:	f8c0 2005 	str.w	r2, [r0, #5]
	pdu->len = PDU_DATA_LLCTRL_LEN(version_ind);
   27f70:	f04f 0c06 	mov.w	ip, #6
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   27f74:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   27f78:	f640 410c 	movw	r1, #3084	; 0xc0c
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   27f7c:	7003      	strb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(version_ind);
   27f7e:	f880 c001 	strb.w	ip, [r0, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   27f82:	f8a0 1003 	strh.w	r1, [r0, #3]
	p->sub_version_number = svn;
}
   27f86:	4770      	bx	lr
   27f88:	ffff05f1 	.word	0xffff05f1

00027f8c <llcp_ntf_encode_version_ind>:

void llcp_ntf_encode_version_ind(struct ll_conn *conn, struct pdu_data *pdu)
{
	struct pdu_data_llctrl_version_ind *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
   27f8c:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(version_ind);
   27f8e:	f04f 0c06 	mov.w	ip, #6
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   27f92:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   27f96:	220c      	movs	r2, #12
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   27f98:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(version_ind);
   27f9a:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   27f9e:	70ca      	strb	r2, [r1, #3]

	p = &pdu->llctrl.version_ind;
	p->version_number = conn->llcp.vex.cached.version_number;
   27fa0:	f890 3116 	ldrb.w	r3, [r0, #278]	; 0x116
   27fa4:	710b      	strb	r3, [r1, #4]
	p->company_id = sys_cpu_to_le16(conn->llcp.vex.cached.company_id);
   27fa6:	f8b0 3117 	ldrh.w	r3, [r0, #279]	; 0x117
   27faa:	f8a1 3005 	strh.w	r3, [r1, #5]
	p->sub_version_number = sys_cpu_to_le16(conn->llcp.vex.cached.sub_version_number);
   27fae:	f8b0 3119 	ldrh.w	r3, [r0, #281]	; 0x119
   27fb2:	f8a1 3007 	strh.w	r3, [r1, #7]
}
   27fb6:	4770      	bx	lr

00027fb8 <llcp_pdu_decode_version_ind>:

void llcp_pdu_decode_version_ind(struct ll_conn *conn, struct pdu_data *pdu)
{
	conn->llcp.vex.valid = 1;
   27fb8:	2301      	movs	r3, #1
   27fba:	f880 3115 	strb.w	r3, [r0, #277]	; 0x115
	conn->llcp.vex.cached.version_number = pdu->llctrl.version_ind.version_number;
   27fbe:	790b      	ldrb	r3, [r1, #4]
   27fc0:	f880 3116 	strb.w	r3, [r0, #278]	; 0x116
	conn->llcp.vex.cached.company_id = sys_le16_to_cpu(pdu->llctrl.version_ind.company_id);
   27fc4:	f8b1 3005 	ldrh.w	r3, [r1, #5]
   27fc8:	f8a0 3117 	strh.w	r3, [r0, #279]	; 0x117
	conn->llcp.vex.cached.sub_version_number =
		sys_le16_to_cpu(pdu->llctrl.version_ind.sub_version_number);
   27fcc:	f8b1 3007 	ldrh.w	r3, [r1, #7]
	conn->llcp.vex.cached.sub_version_number =
   27fd0:	f8a0 3119 	strh.w	r3, [r0, #281]	; 0x119
}
   27fd4:	4770      	bx	lr
   27fd6:	bf00      	nop

00027fd8 <llcp_ntf_encode_enc_req>:
}
#endif /* CONFIG_BT_CENTRAL */

#if defined(CONFIG_BT_PERIPHERAL)
void llcp_ntf_encode_enc_req(struct proc_ctx *ctx, struct pdu_data *pdu)
{
   27fd8:	b538      	push	{r3, r4, r5, lr}
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   27fda:	780b      	ldrb	r3, [r1, #0]
{
   27fdc:	460c      	mov	r4, r1
   27fde:	4605      	mov	r5, r0
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   27fe0:	f043 0303 	orr.w	r3, r3, #3
	pdu->len = PDU_DATA_LLCTRL_LEN(enc_req);
   27fe4:	2117      	movs	r1, #23
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   27fe6:	2203      	movs	r2, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   27fe8:	7023      	strb	r3, [r4, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(enc_req);
   27fea:	7061      	strb	r1, [r4, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   27fec:	70e2      	strb	r2, [r4, #3]
	memcpy(p->rand, ctx->data.enc.rand, sizeof(p->rand));
   27fee:	f100 011d 	add.w	r1, r0, #29
   27ff2:	2208      	movs	r2, #8
   27ff4:	1d20      	adds	r0, r4, #4
   27ff6:	f00d fa9e 	bl	35536 <memcpy>
	p->ediv[0] = ctx->data.enc.ediv[0];
   27ffa:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   27ffe:	7323      	strb	r3, [r4, #12]
	p->ediv[1] = ctx->data.enc.ediv[1];
   28000:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   28004:	7363      	strb	r3, [r4, #13]
	encode_enc_req(ctx, pdu);
}
   28006:	bd38      	pop	{r3, r4, r5, pc}

00028008 <llcp_pdu_encode_enc_rsp>:

void llcp_pdu_encode_enc_rsp(struct pdu_data *pdu)
{
   28008:	b510      	push	{r4, lr}
	struct pdu_data_llctrl_enc_rsp *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
   2800a:	7803      	ldrb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(enc_rsp);
   2800c:	210d      	movs	r1, #13
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   2800e:	2204      	movs	r2, #4
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   28010:	f043 0303 	orr.w	r3, r3, #3
	pdu->len = PDU_DATA_LLCTRL_LEN(enc_rsp);
   28014:	7041      	strb	r1, [r0, #1]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   28016:	7003      	strb	r3, [r0, #0]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   28018:	70c2      	strb	r2, [r0, #3]
	p = &pdu->llctrl.enc_rsp;
	/* Optimal getting random data, p->ivs is packed right after p->skds */
	BUILD_ASSERT(offsetof(struct pdu_data_llctrl_enc_rsp, ivs) ==
		     offsetof(struct pdu_data_llctrl_enc_rsp, skds) + sizeof(p->skds),
		     "Member IVS must be after member SKDS");
	csrand_get(p->skds, sizeof(p->skds) + sizeof(p->ivs));
   2801a:	1884      	adds	r4, r0, r2
	if (k_is_in_isr()) {
   2801c:	f010 fb77 	bl	3870e <k_is_in_isr>
		return lll_csrand_isr_get(buf, len);
   28020:	210c      	movs	r1, #12
	if (k_is_in_isr()) {
   28022:	b120      	cbz	r0, 2802e <llcp_pdu_encode_enc_rsp+0x26>
		return lll_csrand_isr_get(buf, len);
   28024:	4620      	mov	r0, r4
}
   28026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return lll_csrand_isr_get(buf, len);
   2802a:	f002 bea5 	b.w	2ad78 <lll_csrand_isr_get>
		return lll_csrand_get(buf, len);
   2802e:	4620      	mov	r0, r4
}
   28030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return lll_csrand_get(buf, len);
   28034:	f002 be96 	b.w	2ad64 <lll_csrand_get>

00028038 <llcp_pdu_encode_start_enc_req>:

void llcp_pdu_encode_start_enc_req(struct pdu_data *pdu)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   28038:	7803      	ldrb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(start_enc_req);
   2803a:	2101      	movs	r1, #1
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_REQ;
   2803c:	2205      	movs	r2, #5
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   2803e:	f043 0303 	orr.w	r3, r3, #3
   28042:	7003      	strb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(start_enc_req);
   28044:	7041      	strb	r1, [r0, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_REQ;
   28046:	70c2      	strb	r2, [r0, #3]
}
   28048:	4770      	bx	lr
   2804a:	bf00      	nop

0002804c <llcp_pdu_encode_start_enc_rsp>:
#endif /* CONFIG_BT_PERIPHERAL */

void llcp_pdu_encode_start_enc_rsp(struct pdu_data *pdu)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   2804c:	7803      	ldrb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(start_enc_rsp);
   2804e:	2101      	movs	r1, #1
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   28050:	2206      	movs	r2, #6
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   28052:	f043 0303 	orr.w	r3, r3, #3
   28056:	7003      	strb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(start_enc_rsp);
   28058:	7041      	strb	r1, [r0, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   2805a:	70c2      	strb	r2, [r0, #3]
}
   2805c:	4770      	bx	lr
   2805e:	bf00      	nop

00028060 <llcp_pdu_encode_pause_enc_rsp>:
}
#endif /* CONFIG_BT_CENTRAL */

void llcp_pdu_encode_pause_enc_rsp(struct pdu_data *pdu)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   28060:	7803      	ldrb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(pause_enc_rsp);
   28062:	2101      	movs	r1, #1
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   28064:	220b      	movs	r2, #11
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   28066:	f043 0303 	orr.w	r3, r3, #3
   2806a:	7003      	strb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(pause_enc_rsp);
   2806c:	7041      	strb	r1, [r0, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   2806e:	70c2      	strb	r2, [r0, #3]
}
   28070:	4770      	bx	lr
   28072:	bf00      	nop

00028074 <llcp_pdu_encode_reject_ind>:
#endif /* CONFIG_BT_CTLR_LE_ENC */

void llcp_pdu_encode_reject_ind(struct pdu_data *pdu, uint8_t error_code)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   28074:	7803      	ldrb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(reject_ind);
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
	pdu->llctrl.reject_ind.error_code = error_code;
   28076:	7101      	strb	r1, [r0, #4]
	pdu->len = PDU_DATA_LLCTRL_LEN(reject_ind);
   28078:	f04f 0c02 	mov.w	ip, #2
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   2807c:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   28080:	220d      	movs	r2, #13
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   28082:	7003      	strb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(reject_ind);
   28084:	f880 c001 	strb.w	ip, [r0, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   28088:	70c2      	strb	r2, [r0, #3]
}
   2808a:	4770      	bx	lr

0002808c <llcp_pdu_encode_reject_ext_ind>:

void llcp_pdu_encode_reject_ext_ind(struct pdu_data *pdu, uint8_t reject_opcode, uint8_t error_code)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   2808c:	7803      	ldrb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(reject_ext_ind);
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
	pdu->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   2808e:	7101      	strb	r1, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   28090:	f043 0303 	orr.w	r3, r3, #3
	pdu->len = PDU_DATA_LLCTRL_LEN(reject_ext_ind);
   28094:	f04f 0c03 	mov.w	ip, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   28098:	7003      	strb	r3, [r0, #0]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   2809a:	2311      	movs	r3, #17
	pdu->len = PDU_DATA_LLCTRL_LEN(reject_ext_ind);
   2809c:	f880 c001 	strb.w	ip, [r0, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   280a0:	70c3      	strb	r3, [r0, #3]
	pdu->llctrl.reject_ext_ind.error_code = error_code;
   280a2:	7142      	strb	r2, [r0, #5]
}
   280a4:	4770      	bx	lr
   280a6:	bf00      	nop

000280a8 <llcp_pdu_decode_reject_ext_ind>:

void llcp_pdu_decode_reject_ext_ind(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	ctx->reject_ext_ind.reject_opcode = pdu->llctrl.reject_ext_ind.reject_opcode;
   280a8:	790b      	ldrb	r3, [r1, #4]
   280aa:	f880 3049 	strb.w	r3, [r0, #73]	; 0x49
	ctx->reject_ext_ind.error_code = pdu->llctrl.reject_ext_ind.error_code;
   280ae:	794b      	ldrb	r3, [r1, #5]
   280b0:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
}
   280b4:	4770      	bx	lr
   280b6:	bf00      	nop

000280b8 <llcp_pdu_encode_phy_req>:
 * PHY Update Procedure Helper
 */

void llcp_pdu_encode_phy_req(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   280b8:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(phy_req);
   280ba:	f04f 0c03 	mov.w	ip, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   280be:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   280c2:	2216      	movs	r2, #22
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   280c4:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(phy_req);
   280c6:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   280ca:	70ca      	strb	r2, [r1, #3]
	pdu->llctrl.phy_req.rx_phys = ctx->data.pu.rx;
   280cc:	7f03      	ldrb	r3, [r0, #28]
   280ce:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   280d2:	714b      	strb	r3, [r1, #5]
	pdu->llctrl.phy_req.tx_phys = ctx->data.pu.tx;
   280d4:	7f03      	ldrb	r3, [r0, #28]
   280d6:	f3c3 0302 	ubfx	r3, r3, #0, #3
   280da:	710b      	strb	r3, [r1, #4]
}
   280dc:	4770      	bx	lr
   280de:	bf00      	nop

000280e0 <llcp_pdu_decode_phy_req>:

void llcp_pdu_decode_phy_req(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	ctx->data.pu.rx = pdu->llctrl.phy_req.tx_phys;
   280e0:	790a      	ldrb	r2, [r1, #4]
   280e2:	7f03      	ldrb	r3, [r0, #28]
   280e4:	f362 03c5 	bfi	r3, r2, #3, #3
   280e8:	7703      	strb	r3, [r0, #28]
	ctx->data.pu.tx = pdu->llctrl.phy_req.rx_phys;
   280ea:	794a      	ldrb	r2, [r1, #5]
   280ec:	f362 0302 	bfi	r3, r2, #0, #3
   280f0:	7703      	strb	r3, [r0, #28]
}
   280f2:	4770      	bx	lr

000280f4 <llcp_pdu_encode_phy_rsp>:

#if defined(CONFIG_BT_PERIPHERAL)
void llcp_pdu_encode_phy_rsp(struct ll_conn *conn, struct pdu_data *pdu)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   280f4:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(phy_rsp);
   280f6:	f04f 0c03 	mov.w	ip, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   280fa:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   280fe:	2217      	movs	r2, #23
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   28100:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(phy_rsp);
   28102:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   28106:	70ca      	strb	r2, [r1, #3]
	pdu->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   28108:	f890 318c 	ldrb.w	r3, [r0, #396]	; 0x18c
   2810c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   28110:	714b      	strb	r3, [r1, #5]
	pdu->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   28112:	f890 318c 	ldrb.w	r3, [r0, #396]	; 0x18c
   28116:	f3c3 0302 	ubfx	r3, r3, #0, #3
   2811a:	710b      	strb	r3, [r1, #4]
}
   2811c:	4770      	bx	lr
   2811e:	bf00      	nop

00028120 <llcp_pdu_decode_phy_update_ind>:
void llcp_pdu_decode_phy_update_ind(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	ctx->data.pu.instant = sys_le16_to_cpu(pdu->llctrl.phy_upd_ind.instant);
   28120:	88cb      	ldrh	r3, [r1, #6]
   28122:	8403      	strh	r3, [r0, #32]
	ctx->data.pu.c_to_p_phy = pdu->llctrl.phy_upd_ind.c_to_p_phy;
   28124:	790b      	ldrb	r3, [r1, #4]
   28126:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	ctx->data.pu.p_to_c_phy = pdu->llctrl.phy_upd_ind.p_to_c_phy;
   2812a:	794b      	ldrb	r3, [r1, #5]
   2812c:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
}
   28130:	4770      	bx	lr
   28132:	bf00      	nop

00028134 <llcp_pdu_encode_conn_param_req>:
 */
static void encode_conn_param_req_rsp_common(struct proc_ctx *ctx, struct pdu_data *pdu,
					     struct pdu_data_llctrl_conn_param_req_rsp_common *p,
					     uint8_t opcode)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   28134:	780b      	ldrb	r3, [r1, #0]
	/* The '+ 1U' is to count in opcode octet, the first member of struct pdu_data_llctrl */
	pdu->len = sizeof(struct pdu_data_llctrl_conn_param_req_rsp_common) + 1U;
   28136:	f04f 0c18 	mov.w	ip, #24
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   2813a:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = opcode;
   2813e:	220f      	movs	r2, #15
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   28140:	700b      	strb	r3, [r1, #0]
	pdu->len = sizeof(struct pdu_data_llctrl_conn_param_req_rsp_common) + 1U;
   28142:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = opcode;
   28146:	70ca      	strb	r2, [r1, #3]

	p->interval_min = sys_cpu_to_le16(ctx->data.cu.interval_min);
   28148:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   2814a:	808b      	strh	r3, [r1, #4]
	p->interval_max = sys_cpu_to_le16(ctx->data.cu.interval_max);
   2814c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   2814e:	80cb      	strh	r3, [r1, #6]
	p->latency = sys_cpu_to_le16(ctx->data.cu.latency);
   28150:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   28152:	810b      	strh	r3, [r1, #8]
	p->timeout = sys_cpu_to_le16(ctx->data.cu.timeout);
   28154:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   28156:	814b      	strh	r3, [r1, #10]
	p->preferred_periodicity = ctx->data.cu.preferred_periodicity;
   28158:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
   2815c:	730b      	strb	r3, [r1, #12]
	p->reference_conn_event_count = sys_cpu_to_le16(ctx->data.cu.reference_conn_event_count);
   2815e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   28160:	f8a1 300d 	strh.w	r3, [r1, #13]
	p->offset0 = sys_cpu_to_le16(ctx->data.cu.offsets[0]);
   28164:	8e43      	ldrh	r3, [r0, #50]	; 0x32
   28166:	f8a1 300f 	strh.w	r3, [r1, #15]
	p->offset1 = sys_cpu_to_le16(ctx->data.cu.offsets[1]);
   2816a:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   2816c:	f8a1 3011 	strh.w	r3, [r1, #17]
	p->offset2 = sys_cpu_to_le16(ctx->data.cu.offsets[2]);
   28170:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
   28172:	f8a1 3013 	strh.w	r3, [r1, #19]
	p->offset3 = sys_cpu_to_le16(ctx->data.cu.offsets[3]);
   28176:	8f03      	ldrh	r3, [r0, #56]	; 0x38
   28178:	f8a1 3015 	strh.w	r3, [r1, #21]
	p->offset4 = sys_cpu_to_le16(ctx->data.cu.offsets[4]);
   2817c:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
   2817e:	f8a1 3017 	strh.w	r3, [r1, #23]
	p->offset5 = sys_cpu_to_le16(ctx->data.cu.offsets[5]);
   28182:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
   28184:	f8a1 3019 	strh.w	r3, [r1, #25]
void llcp_pdu_encode_conn_param_req(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	encode_conn_param_req_rsp_common(ctx, pdu,
		(struct pdu_data_llctrl_conn_param_req_rsp_common *)&pdu->llctrl.conn_param_req,
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ);
}
   28188:	4770      	bx	lr
   2818a:	bf00      	nop

0002818c <llcp_pdu_encode_conn_param_rsp>:
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   2818c:	780b      	ldrb	r3, [r1, #0]
	pdu->len = sizeof(struct pdu_data_llctrl_conn_param_req_rsp_common) + 1U;
   2818e:	f04f 0c18 	mov.w	ip, #24
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   28192:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = opcode;
   28196:	2210      	movs	r2, #16
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   28198:	700b      	strb	r3, [r1, #0]
	pdu->len = sizeof(struct pdu_data_llctrl_conn_param_req_rsp_common) + 1U;
   2819a:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = opcode;
   2819e:	70ca      	strb	r2, [r1, #3]
	p->interval_min = sys_cpu_to_le16(ctx->data.cu.interval_min);
   281a0:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   281a2:	808b      	strh	r3, [r1, #4]
	p->interval_max = sys_cpu_to_le16(ctx->data.cu.interval_max);
   281a4:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   281a6:	80cb      	strh	r3, [r1, #6]
	p->latency = sys_cpu_to_le16(ctx->data.cu.latency);
   281a8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   281aa:	810b      	strh	r3, [r1, #8]
	p->timeout = sys_cpu_to_le16(ctx->data.cu.timeout);
   281ac:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   281ae:	814b      	strh	r3, [r1, #10]
	p->preferred_periodicity = ctx->data.cu.preferred_periodicity;
   281b0:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
   281b4:	730b      	strb	r3, [r1, #12]
	p->reference_conn_event_count = sys_cpu_to_le16(ctx->data.cu.reference_conn_event_count);
   281b6:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   281b8:	f8a1 300d 	strh.w	r3, [r1, #13]
	p->offset0 = sys_cpu_to_le16(ctx->data.cu.offsets[0]);
   281bc:	8e43      	ldrh	r3, [r0, #50]	; 0x32
   281be:	f8a1 300f 	strh.w	r3, [r1, #15]
	p->offset1 = sys_cpu_to_le16(ctx->data.cu.offsets[1]);
   281c2:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   281c4:	f8a1 3011 	strh.w	r3, [r1, #17]
	p->offset2 = sys_cpu_to_le16(ctx->data.cu.offsets[2]);
   281c8:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
   281ca:	f8a1 3013 	strh.w	r3, [r1, #19]
	p->offset3 = sys_cpu_to_le16(ctx->data.cu.offsets[3]);
   281ce:	8f03      	ldrh	r3, [r0, #56]	; 0x38
   281d0:	f8a1 3015 	strh.w	r3, [r1, #21]
	p->offset4 = sys_cpu_to_le16(ctx->data.cu.offsets[4]);
   281d4:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
   281d6:	f8a1 3017 	strh.w	r3, [r1, #23]
	p->offset5 = sys_cpu_to_le16(ctx->data.cu.offsets[5]);
   281da:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
   281dc:	f8a1 3019 	strh.w	r3, [r1, #25]
void llcp_pdu_encode_conn_param_rsp(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	encode_conn_param_req_rsp_common(ctx, pdu,
		(struct pdu_data_llctrl_conn_param_req_rsp_common *)&pdu->llctrl.conn_param_rsp,
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP);
}
   281e0:	4770      	bx	lr
   281e2:	bf00      	nop

000281e4 <llcp_pdu_decode_conn_param_req>:

static void decode_conn_param_req_rsp_common(struct proc_ctx *ctx,
					     struct pdu_data_llctrl_conn_param_req_rsp_common *p)
{
	ctx->data.cu.interval_min = sys_le16_to_cpu(p->interval_min);
   281e4:	888b      	ldrh	r3, [r1, #4]
   281e6:	84c3      	strh	r3, [r0, #38]	; 0x26
	ctx->data.cu.interval_max = sys_le16_to_cpu(p->interval_max);
   281e8:	88cb      	ldrh	r3, [r1, #6]
   281ea:	8503      	strh	r3, [r0, #40]	; 0x28
	ctx->data.cu.latency = sys_le16_to_cpu(p->latency);
   281ec:	890b      	ldrh	r3, [r1, #8]
   281ee:	8543      	strh	r3, [r0, #42]	; 0x2a
	ctx->data.cu.timeout = sys_le16_to_cpu(p->timeout);
   281f0:	894b      	ldrh	r3, [r1, #10]
   281f2:	8583      	strh	r3, [r0, #44]	; 0x2c
	ctx->data.cu.preferred_periodicity = p->preferred_periodicity;
   281f4:	7b0b      	ldrb	r3, [r1, #12]
   281f6:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
	ctx->data.cu.reference_conn_event_count = sys_le16_to_cpu(p->reference_conn_event_count);
   281fa:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   281fe:	8603      	strh	r3, [r0, #48]	; 0x30
	ctx->data.cu.offsets[0] = sys_le16_to_cpu(p->offset0);
   28200:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   28204:	8643      	strh	r3, [r0, #50]	; 0x32
	ctx->data.cu.offsets[1] = sys_le16_to_cpu(p->offset1);
   28206:	f8b1 3011 	ldrh.w	r3, [r1, #17]
   2820a:	8683      	strh	r3, [r0, #52]	; 0x34
	ctx->data.cu.offsets[2] = sys_le16_to_cpu(p->offset2);
   2820c:	f8b1 3013 	ldrh.w	r3, [r1, #19]
   28210:	86c3      	strh	r3, [r0, #54]	; 0x36
	ctx->data.cu.offsets[3] = sys_le16_to_cpu(p->offset3);
   28212:	f8b1 3015 	ldrh.w	r3, [r1, #21]
   28216:	8703      	strh	r3, [r0, #56]	; 0x38
	ctx->data.cu.offsets[4] = sys_le16_to_cpu(p->offset4);
   28218:	f8b1 3017 	ldrh.w	r3, [r1, #23]
   2821c:	8743      	strh	r3, [r0, #58]	; 0x3a
	ctx->data.cu.offsets[5] = sys_le16_to_cpu(p->offset5);
   2821e:	f8b1 3019 	ldrh.w	r3, [r1, #25]
   28222:	8783      	strh	r3, [r0, #60]	; 0x3c

void llcp_pdu_decode_conn_param_req(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	decode_conn_param_req_rsp_common(ctx,
		(struct pdu_data_llctrl_conn_param_req_rsp_common *)&pdu->llctrl.conn_param_req);
}
   28224:	4770      	bx	lr
   28226:	bf00      	nop

00028228 <llcp_pdu_encode_conn_update_ind>:

void llcp_pdu_encode_conn_update_ind(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	struct pdu_data_llctrl_conn_update_ind *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
   28228:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(conn_update_ind);
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
   2822a:	2200      	movs	r2, #0
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   2822c:	f043 0303 	orr.w	r3, r3, #3
	pdu->len = PDU_DATA_LLCTRL_LEN(conn_update_ind);
   28230:	f04f 0c0c 	mov.w	ip, #12
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
   28234:	70ca      	strb	r2, [r1, #3]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   28236:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(conn_update_ind);
   28238:	f881 c001 	strb.w	ip, [r1, #1]

	p = (void *)&pdu->llctrl.conn_update_ind;
	p->win_size = ctx->data.cu.win_size;
   2823c:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   28240:	710b      	strb	r3, [r1, #4]
	p->win_offset = sys_cpu_to_le16(ctx->data.cu.win_offset_us / CONN_INT_UNIT_US);
   28242:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   28244:	4a09      	ldr	r2, [pc, #36]	; (2826c <llcp_pdu_encode_conn_update_ind+0x44>)
   28246:	fba2 2303 	umull	r2, r3, r2, r3
   2824a:	0a9b      	lsrs	r3, r3, #10
   2824c:	f8a1 3005 	strh.w	r3, [r1, #5]
	p->latency = sys_cpu_to_le16(ctx->data.cu.latency);
   28250:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   28252:	f8a1 3009 	strh.w	r3, [r1, #9]
	p->interval = sys_cpu_to_le16(ctx->data.cu.interval_max);
   28256:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   28258:	f8a1 3007 	strh.w	r3, [r1, #7]
	p->timeout = sys_cpu_to_le16(ctx->data.cu.timeout);
   2825c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   2825e:	f8a1 300b 	strh.w	r3, [r1, #11]
	p->instant = sys_cpu_to_le16(ctx->data.cu.instant);
   28262:	8c03      	ldrh	r3, [r0, #32]
   28264:	f8a1 300d 	strh.w	r3, [r1, #13]
}
   28268:	4770      	bx	lr
   2826a:	bf00      	nop
   2826c:	d1b71759 	.word	0xd1b71759

00028270 <llcp_pdu_decode_conn_update_ind>:
void llcp_pdu_decode_conn_update_ind(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	struct pdu_data_llctrl_conn_update_ind *p;

	p = (void *)&pdu->llctrl.conn_update_ind;
	ctx->data.cu.win_size = p->win_size;
   28270:	790b      	ldrb	r3, [r1, #4]
   28272:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	ctx->data.cu.win_offset_us = sys_le16_to_cpu(p->win_offset) * CONN_INT_UNIT_US;
   28276:	f8b1 3005 	ldrh.w	r3, [r1, #5]
   2827a:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
   2827e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   28282:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   28286:	005b      	lsls	r3, r3, #1
   28288:	8483      	strh	r3, [r0, #36]	; 0x24
	ctx->data.cu.latency = sys_le16_to_cpu(p->latency);
   2828a:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   2828e:	8543      	strh	r3, [r0, #42]	; 0x2a
	ctx->data.cu.interval_max = sys_le16_to_cpu(p->interval);
   28290:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   28294:	8503      	strh	r3, [r0, #40]	; 0x28
	ctx->data.cu.timeout = sys_le16_to_cpu(p->timeout);
   28296:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   2829a:	8583      	strh	r3, [r0, #44]	; 0x2c
	ctx->data.cu.instant = sys_le16_to_cpu(p->instant);
   2829c:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   282a0:	8403      	strh	r3, [r0, #32]
}
   282a2:	4770      	bx	lr

000282a4 <llcp_pdu_decode_chan_map_update_ind>:
	memcpy(p->chm, ctx->data.chmu.chm, sizeof(p->chm));
}

void llcp_pdu_decode_chan_map_update_ind(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	ctx->data.chmu.instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   282a4:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   282a8:	8383      	strh	r3, [r0, #28]
	memcpy(ctx->data.chmu.chm, pdu->llctrl.chan_map_ind.chm, sizeof(ctx->data.chmu.chm));
   282aa:	2205      	movs	r2, #5
   282ac:	3104      	adds	r1, #4
   282ae:	301e      	adds	r0, #30
   282b0:	f00d b941 	b.w	35536 <memcpy>

000282b4 <llcp_pdu_encode_length_req>:
static void encode_length_req_rsp_common(struct pdu_data *pdu,
					 struct pdu_data_llctrl_length_req_rsp_common *p,
					 const uint8_t opcode,
					 const struct data_pdu_length *dle)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   282b4:	780b      	ldrb	r3, [r1, #0]
	/* The '+ 1U' is to count in opcode octet, the first member of struct pdu_data_llctrl */
	pdu->len = sizeof(struct pdu_data_llctrl_length_req_rsp_common) + 1U;
   282b6:	f04f 0c09 	mov.w	ip, #9
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   282ba:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = opcode;
   282be:	2214      	movs	r2, #20
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   282c0:	700b      	strb	r3, [r1, #0]
	pdu->len = sizeof(struct pdu_data_llctrl_length_req_rsp_common) + 1U;
   282c2:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = opcode;
   282c6:	70ca      	strb	r2, [r1, #3]
	p->max_rx_octets = sys_cpu_to_le16(dle->max_rx_octets);
   282c8:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
   282cc:	808b      	strh	r3, [r1, #4]
	p->max_tx_octets = sys_cpu_to_le16(dle->max_tx_octets);
   282ce:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
   282d2:	810b      	strh	r3, [r1, #8]
	p->max_rx_time = sys_cpu_to_le16(dle->max_rx_time);
   282d4:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
   282d8:	80cb      	strh	r3, [r1, #6]
	p->max_tx_time = sys_cpu_to_le16(dle->max_tx_time);
   282da:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
   282de:	814b      	strh	r3, [r1, #10]
{
	encode_length_req_rsp_common(pdu,
		(struct pdu_data_llctrl_length_req_rsp_common *)&pdu->llctrl.length_req,
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
		&conn->lll.dle.local);
}
   282e0:	4770      	bx	lr
   282e2:	bf00      	nop

000282e4 <llcp_pdu_encode_length_rsp>:
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   282e4:	780b      	ldrb	r3, [r1, #0]
	pdu->len = sizeof(struct pdu_data_llctrl_length_req_rsp_common) + 1U;
   282e6:	f04f 0c09 	mov.w	ip, #9
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   282ea:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = opcode;
   282ee:	2215      	movs	r2, #21
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   282f0:	700b      	strb	r3, [r1, #0]
	pdu->len = sizeof(struct pdu_data_llctrl_length_req_rsp_common) + 1U;
   282f2:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = opcode;
   282f6:	70ca      	strb	r2, [r1, #3]
	p->max_rx_octets = sys_cpu_to_le16(dle->max_rx_octets);
   282f8:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
   282fc:	808b      	strh	r3, [r1, #4]
	p->max_tx_octets = sys_cpu_to_le16(dle->max_tx_octets);
   282fe:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
   28302:	810b      	strh	r3, [r1, #8]
	p->max_rx_time = sys_cpu_to_le16(dle->max_rx_time);
   28304:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
   28308:	80cb      	strh	r3, [r1, #6]
	p->max_tx_time = sys_cpu_to_le16(dle->max_tx_time);
   2830a:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
   2830e:	814b      	strh	r3, [r1, #10]
{
	encode_length_req_rsp_common(pdu,
		(struct pdu_data_llctrl_length_req_rsp_common *)&pdu->llctrl.length_rsp,
		PDU_DATA_LLCTRL_TYPE_LENGTH_RSP,
		&conn->lll.dle.local);
}
   28310:	4770      	bx	lr
   28312:	bf00      	nop

00028314 <llcp_ntf_encode_length_change>:
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   28314:	780b      	ldrb	r3, [r1, #0]
	pdu->len = sizeof(struct pdu_data_llctrl_length_req_rsp_common) + 1U;
   28316:	f04f 0c09 	mov.w	ip, #9
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   2831a:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = opcode;
   2831e:	2215      	movs	r2, #21
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   28320:	700b      	strb	r3, [r1, #0]
	pdu->len = sizeof(struct pdu_data_llctrl_length_req_rsp_common) + 1U;
   28322:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = opcode;
   28326:	70ca      	strb	r2, [r1, #3]
	p->max_rx_octets = sys_cpu_to_le16(dle->max_rx_octets);
   28328:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
   2832c:	808b      	strh	r3, [r1, #4]
	p->max_tx_octets = sys_cpu_to_le16(dle->max_tx_octets);
   2832e:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
   28332:	810b      	strh	r3, [r1, #8]
	p->max_rx_time = sys_cpu_to_le16(dle->max_rx_time);
   28334:	f8b0 306e 	ldrh.w	r3, [r0, #110]	; 0x6e
   28338:	80cb      	strh	r3, [r1, #6]
	p->max_tx_time = sys_cpu_to_le16(dle->max_tx_time);
   2833a:	f8b0 306c 	ldrh.w	r3, [r0, #108]	; 0x6c
   2833e:	814b      	strh	r3, [r1, #10]
{
	encode_length_req_rsp_common(pdu,
		(struct pdu_data_llctrl_length_req_rsp_common *)&pdu->llctrl.length_rsp,
		PDU_DATA_LLCTRL_TYPE_LENGTH_RSP,
		&conn->lll.dle.eff);
}
   28340:	4770      	bx	lr
   28342:	bf00      	nop

00028344 <llcp_pdu_decode_length_req>:
static void decode_length_req_rsp_common(struct ll_conn *conn,
					 struct pdu_data_llctrl_length_req_rsp_common *p)
{
	struct data_pdu_length remote;

	remote.max_rx_octets = sys_le16_to_cpu(p->max_rx_octets);
   28344:	888b      	ldrh	r3, [r1, #4]
	if (!IN_RANGE(remote->max_rx_octets, PDU_DC_PAYLOAD_SIZE_MIN,
   28346:	f1a3 021b 	sub.w	r2, r3, #27
   2834a:	2ae0      	cmp	r2, #224	; 0xe0
   2834c:	d821      	bhi.n	28392 <llcp_pdu_decode_length_req+0x4e>
	remote.max_tx_octets = sys_le16_to_cpu(p->max_tx_octets);
   2834e:	f8b1 c008 	ldrh.w	ip, [r1, #8]
	if (!IN_RANGE(remote->max_tx_octets, PDU_DC_PAYLOAD_SIZE_MIN,
   28352:	f1ac 021b 	sub.w	r2, ip, #27
   28356:	2ae0      	cmp	r2, #224	; 0xe0
   28358:	d81b      	bhi.n	28392 <llcp_pdu_decode_length_req+0x4e>

	conn->lll.dle.remote = remote;
}

void llcp_pdu_decode_length_req(struct ll_conn *conn, struct pdu_data *pdu)
{
   2835a:	b530      	push	{r4, r5, lr}
	remote.max_rx_time = sys_le16_to_cpu(p->max_rx_time);
   2835c:	88cd      	ldrh	r5, [r1, #6]
	if (!IN_RANGE(remote->max_rx_time, PDU_DC_PAYLOAD_TIME_MIN,
   2835e:	f5a5 72a4 	sub.w	r2, r5, #328	; 0x148
   28362:	f244 1e48 	movw	lr, #16712	; 0x4148
   28366:	b292      	uxth	r2, r2
   28368:	4572      	cmp	r2, lr
   2836a:	d811      	bhi.n	28390 <llcp_pdu_decode_length_req+0x4c>
	remote.max_tx_time = sys_le16_to_cpu(p->max_tx_time);
   2836c:	894a      	ldrh	r2, [r1, #10]
   2836e:	2100      	movs	r1, #0
   28370:	460c      	mov	r4, r1
   28372:	f362 040f 	bfi	r4, r2, #0, #16
	if (!IN_RANGE(remote->max_tx_time, PDU_DC_PAYLOAD_TIME_MIN,
   28376:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
   2837a:	f36c 010f 	bfi	r1, ip, #0, #16
   2837e:	b292      	uxth	r2, r2
   28380:	f363 411f 	bfi	r1, r3, #16, #16
   28384:	f365 441f 	bfi	r4, r5, #16, #16
   28388:	4572      	cmp	r2, lr
	conn->lll.dle.remote = remote;
   2838a:	bf98      	it	ls
   2838c:	e9c0 1418 	strdls	r1, r4, [r0, #96]	; 0x60
	decode_length_req_rsp_common(conn,
		(struct pdu_data_llctrl_length_req_rsp_common *)&pdu->llctrl.length_req);
}
   28390:	bd30      	pop	{r4, r5, pc}
   28392:	4770      	bx	lr

00028394 <llcp_pdu_decode_length_rsp>:

void llcp_pdu_decode_length_rsp(struct ll_conn *conn, struct pdu_data *pdu)
   28394:	888b      	ldrh	r3, [r1, #4]
   28396:	f1a3 021b 	sub.w	r2, r3, #27
   2839a:	2ae0      	cmp	r2, #224	; 0xe0
   2839c:	d821      	bhi.n	283e2 <llcp_pdu_decode_length_rsp+0x4e>
   2839e:	f8b1 c008 	ldrh.w	ip, [r1, #8]
   283a2:	f1ac 021b 	sub.w	r2, ip, #27
   283a6:	2ae0      	cmp	r2, #224	; 0xe0
   283a8:	d81b      	bhi.n	283e2 <llcp_pdu_decode_length_rsp+0x4e>
   283aa:	b530      	push	{r4, r5, lr}
   283ac:	88cd      	ldrh	r5, [r1, #6]
   283ae:	f5a5 72a4 	sub.w	r2, r5, #328	; 0x148
   283b2:	f244 1e48 	movw	lr, #16712	; 0x4148
   283b6:	b292      	uxth	r2, r2
   283b8:	4572      	cmp	r2, lr
   283ba:	d811      	bhi.n	283e0 <llcp_pdu_decode_length_rsp+0x4c>
   283bc:	894a      	ldrh	r2, [r1, #10]
   283be:	2100      	movs	r1, #0
   283c0:	460c      	mov	r4, r1
   283c2:	f362 040f 	bfi	r4, r2, #0, #16
   283c6:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
   283ca:	f36c 010f 	bfi	r1, ip, #0, #16
   283ce:	b292      	uxth	r2, r2
   283d0:	f363 411f 	bfi	r1, r3, #16, #16
   283d4:	f365 441f 	bfi	r4, r5, #16, #16
   283d8:	4572      	cmp	r2, lr
   283da:	bf98      	it	ls
   283dc:	e9c0 1418 	strdls	r1, r4, [r0, #96]	; 0x60
   283e0:	bd30      	pop	{r4, r5, pc}
   283e2:	4770      	bx	lr

000283e4 <cu_ntf>:
	return (((ctx->proc == PROC_CONN_PARAM_REQ) && (ctx->data.cu.error != 0U)) ||
		(ctx->data.cu.params_changed != 0U));
}

static void cu_ntf(struct ll_conn *conn, struct proc_ctx *ctx)
{
   283e4:	b570      	push	{r4, r5, r6, lr}
   283e6:	4606      	mov	r6, r0
   283e8:	460d      	mov	r5, r1
	struct node_rx_pdu *ntf;
	struct node_rx_cu *pdu;

	/* Allocate ntf node */
	ntf = llcp_ntf_alloc();
   283ea:	f7fe f94d 	bl	26688 <llcp_ntf_alloc>
	LL_ASSERT(ntf);
   283ee:	4604      	mov	r4, r0
   283f0:	b1c8      	cbz	r0, 28426 <cu_ntf+0x42>

	ntf->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   283f2:	2319      	movs	r3, #25
   283f4:	7123      	strb	r3, [r4, #4]
	ntf->hdr.handle = conn->lll.handle;
   283f6:	8d33      	ldrh	r3, [r6, #40]	; 0x28
   283f8:	80e3      	strh	r3, [r4, #6]
	pdu = (struct node_rx_cu *)ntf->pdu;

	pdu->status = ctx->data.cu.error;
   283fa:	7f2b      	ldrb	r3, [r5, #28]
   283fc:	7723      	strb	r3, [r4, #28]
	if (!ctx->data.cu.error) {
   283fe:	b95b      	cbnz	r3, 28418 <cu_ntf+0x34>
		pdu->interval = ctx->data.cu.interval_max;
   28400:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
   28402:	83e3      	strh	r3, [r4, #30]
		pdu->latency = ctx->data.cu.latency;
   28404:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
   28406:	8423      	strh	r3, [r4, #32]
		pdu->timeout = ctx->data.cu.timeout;
   28408:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   2840a:	8463      	strh	r3, [r4, #34]	; 0x22
		pdu->latency = conn->lll.latency;
		pdu->timeout = conn->supervision_timeout;
	}

	/* Enqueue notification towards LL */
	ll_rx_put_sched(ntf->hdr.link, ntf);
   2840c:	6820      	ldr	r0, [r4, #0]
   2840e:	4621      	mov	r1, r4
}
   28410:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_rx_put_sched(ntf->hdr.link, ntf);
   28414:	f7fa bb8a 	b.w	22b2c <ll_rx_put_sched>
		pdu->interval = conn->lll.interval;
   28418:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
   2841a:	83e3      	strh	r3, [r4, #30]
		pdu->latency = conn->lll.latency;
   2841c:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
   2841e:	8423      	strh	r3, [r4, #32]
		pdu->timeout = conn->supervision_timeout;
   28420:	f8b6 3184 	ldrh.w	r3, [r6, #388]	; 0x184
   28424:	e7f1      	b.n	2840a <cu_ntf+0x26>
	LL_ASSERT(ntf);
   28426:	4a06      	ldr	r2, [pc, #24]	; (28440 <cu_ntf+0x5c>)
   28428:	4906      	ldr	r1, [pc, #24]	; (28444 <cu_ntf+0x60>)
   2842a:	4807      	ldr	r0, [pc, #28]	; (28448 <cu_ntf+0x64>)
   2842c:	23f1      	movs	r3, #241	; 0xf1
   2842e:	f00a fff3 	bl	33418 <assert_print>
   28432:	4040      	eors	r0, r0
   28434:	f380 8811 	msr	BASEPRI, r0
   28438:	f04f 0003 	mov.w	r0, #3
   2843c:	df02      	svc	2
   2843e:	e7d8      	b.n	283f2 <cu_ntf+0xe>
   28440:	0003aa44 	.word	0x0003aa44
   28444:	0003a844 	.word	0x0003a844
   28448:	00039f74 	.word	0x00039f74

0002844c <rp_cu_conn_param_req_ntf>:
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
static void rp_cu_conn_param_req_ntf(struct ll_conn *conn, struct proc_ctx *ctx)
{
   2844c:	b570      	push	{r4, r5, r6, lr}
   2844e:	4606      	mov	r6, r0
   28450:	460d      	mov	r5, r1
	struct node_rx_pdu *ntf;
	struct pdu_data *pdu;

	/* Allocate ntf node */
	ntf = llcp_ntf_alloc();
   28452:	f7fe f919 	bl	26688 <llcp_ntf_alloc>
	LL_ASSERT(ntf);
   28456:	4604      	mov	r4, r0
   28458:	b170      	cbz	r0, 28478 <rp_cu_conn_param_req_ntf+0x2c>

	ntf->hdr.type = NODE_RX_TYPE_DC_PDU;
   2845a:	2303      	movs	r3, #3
   2845c:	7123      	strb	r3, [r4, #4]
	ntf->hdr.handle = conn->lll.handle;
   2845e:	8d33      	ldrh	r3, [r6, #40]	; 0x28
   28460:	80e3      	strh	r3, [r4, #6]
	pdu = (struct pdu_data *)ntf->pdu;

	llcp_pdu_encode_conn_param_req(ctx, pdu);
   28462:	4628      	mov	r0, r5
   28464:	f104 011c 	add.w	r1, r4, #28
   28468:	f7ff fe64 	bl	28134 <llcp_pdu_encode_conn_param_req>

	/* Enqueue notification towards LL */
	ll_rx_put_sched(ntf->hdr.link, ntf);
   2846c:	6820      	ldr	r0, [r4, #0]
   2846e:	4621      	mov	r1, r4
}
   28470:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_rx_put_sched(ntf->hdr.link, ntf);
   28474:	f7fa bb5a 	b.w	22b2c <ll_rx_put_sched>
	LL_ASSERT(ntf);
   28478:	4a06      	ldr	r2, [pc, #24]	; (28494 <rp_cu_conn_param_req_ntf+0x48>)
   2847a:	4907      	ldr	r1, [pc, #28]	; (28498 <rp_cu_conn_param_req_ntf+0x4c>)
   2847c:	4807      	ldr	r0, [pc, #28]	; (2849c <rp_cu_conn_param_req_ntf+0x50>)
   2847e:	f240 23ea 	movw	r3, #746	; 0x2ea
   28482:	f00a ffc9 	bl	33418 <assert_print>
   28486:	4040      	eors	r0, r0
   28488:	f380 8811 	msr	BASEPRI, r0
   2848c:	f04f 0003 	mov.w	r0, #3
   28490:	df02      	svc	2
   28492:	e7e2      	b.n	2845a <rp_cu_conn_param_req_ntf+0xe>
   28494:	0003aa44 	.word	0x0003aa44
   28498:	0003a844 	.word	0x0003a844
   2849c:	00039f74 	.word	0x00039f74

000284a0 <cu_update_conn_parameters>:
{
   284a0:	b530      	push	{r4, r5, lr}
	if ((interval != lll->interval) || (latency != lll->latency) ||
   284a2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	ctx->data.cu.params_changed = cu_have_params_changed(
   284a4:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
   284a6:	8d4c      	ldrh	r4, [r1, #42]	; 0x2a
   284a8:	8d8d      	ldrh	r5, [r1, #44]	; 0x2c
	if ((interval != lll->interval) || (latency != lll->latency) ||
   284aa:	4293      	cmp	r3, r2
{
   284ac:	b085      	sub	sp, #20
	if ((interval != lll->interval) || (latency != lll->latency) ||
   284ae:	d102      	bne.n	284b6 <cu_update_conn_parameters+0x16>
   284b0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   284b2:	42a3      	cmp	r3, r4
   284b4:	d013      	beq.n	284de <cu_update_conn_parameters+0x3e>
   284b6:	2301      	movs	r3, #1
	ctx->data.cu.params_changed = cu_have_params_changed(
   284b8:	778b      	strb	r3, [r1, #30]
	ull_conn_update_parameters(conn, (ctx->proc == PROC_CONN_UPDATE), ctx->data.cu.win_size,
   284ba:	9502      	str	r5, [sp, #8]
   284bc:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
   284be:	e9cd 2400 	strd	r2, r4, [sp]
   284c2:	7a0c      	ldrb	r4, [r1, #8]
   284c4:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
   284c8:	8c09      	ldrh	r1, [r1, #32]
   284ca:	9103      	str	r1, [sp, #12]
   284cc:	f1a4 0108 	sub.w	r1, r4, #8
   284d0:	fab1 f181 	clz	r1, r1
   284d4:	0949      	lsrs	r1, r1, #5
   284d6:	f7e8 fda3 	bl	11020 <ull_conn_update_parameters>
}
   284da:	b005      	add	sp, #20
   284dc:	bd30      	pop	{r4, r5, pc}
	if ((interval != lll->interval) || (latency != lll->latency) ||
   284de:	f8b0 3184 	ldrh.w	r3, [r0, #388]	; 0x184
	ctx->data.cu.params_changed = cu_have_params_changed(
   284e2:	1b5b      	subs	r3, r3, r5
   284e4:	bf18      	it	ne
   284e6:	2301      	movne	r3, #1
   284e8:	e7e6      	b.n	284b8 <cu_update_conn_parameters+0x18>
   284ea:	bf00      	nop

000284ec <rp_cu_tx>:
{
   284ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   284ee:	4607      	mov	r7, r0
   284f0:	460d      	mov	r5, r1
   284f2:	4616      	mov	r6, r2
	tx = llcp_tx_alloc(conn, ctx);
   284f4:	f7fe f8ac 	bl	26650 <llcp_tx_alloc>
	LL_ASSERT(tx);
   284f8:	4604      	mov	r4, r0
   284fa:	2800      	cmp	r0, #0
   284fc:	d03b      	beq.n	28576 <rp_cu_tx+0x8a>
	pdu = (struct pdu_data *)tx->pdu;
   284fe:	1d21      	adds	r1, r4, #4
	switch (opcode) {
   28500:	2e11      	cmp	r6, #17
   28502:	d80a      	bhi.n	2851a <rp_cu_tx+0x2e>
   28504:	e8df f006 	tbb	[pc, r6]
   28508:	0909092a 	.word	0x0909092a
   2850c:	26090909 	.word	0x26090909
   28510:	09090909 	.word	0x09090909
   28514:	09090909 	.word	0x09090909
   28518:	202e      	.short	0x202e
		LL_ASSERT(0);
   2851a:	4a1e      	ldr	r2, [pc, #120]	; (28594 <rp_cu_tx+0xa8>)
   2851c:	491e      	ldr	r1, [pc, #120]	; (28598 <rp_cu_tx+0xac>)
   2851e:	481f      	ldr	r0, [pc, #124]	; (2859c <rp_cu_tx+0xb0>)
   28520:	f240 23d1 	movw	r3, #721	; 0x2d1
   28524:	f00a ff78 	bl	33418 <assert_print>
   28528:	4040      	eors	r0, r0
   2852a:	f380 8811 	msr	BASEPRI, r0
   2852e:	f04f 0003 	mov.w	r0, #3
   28532:	df02      	svc	2
	ctx->tx_opcode = pdu->llctrl.opcode;
   28534:	79e3      	ldrb	r3, [r4, #7]
   28536:	736b      	strb	r3, [r5, #13]
	llcp_tx_enqueue(conn, tx);
   28538:	4621      	mov	r1, r4
   2853a:	4638      	mov	r0, r7
   2853c:	f7fe f8a6 	bl	2668c <llcp_tx_enqueue>
	if (ctx->proc == PROC_CONN_PARAM_REQ) {
   28540:	7a2b      	ldrb	r3, [r5, #8]
   28542:	2b09      	cmp	r3, #9
   28544:	d012      	beq.n	2856c <rp_cu_tx+0x80>
}
   28546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		llcp_pdu_encode_reject_ext_ind(pdu, ctx->data.cu.rejected_opcode,
   28548:	4608      	mov	r0, r1
   2854a:	7f2a      	ldrb	r2, [r5, #28]
   2854c:	7f69      	ldrb	r1, [r5, #29]
   2854e:	f7ff fd9d 	bl	2808c <llcp_pdu_encode_reject_ext_ind>
		break;
   28552:	e7ef      	b.n	28534 <rp_cu_tx+0x48>
		llcp_pdu_encode_unknown_rsp(ctx, pdu);
   28554:	4628      	mov	r0, r5
   28556:	f7ff fc39 	bl	27dcc <llcp_pdu_encode_unknown_rsp>
		break;
   2855a:	e7eb      	b.n	28534 <rp_cu_tx+0x48>
		llcp_pdu_encode_conn_update_ind(ctx, pdu);
   2855c:	4628      	mov	r0, r5
   2855e:	f7ff fe63 	bl	28228 <llcp_pdu_encode_conn_update_ind>
		break;
   28562:	e7e7      	b.n	28534 <rp_cu_tx+0x48>
		llcp_pdu_encode_conn_param_rsp(ctx, pdu);
   28564:	4628      	mov	r0, r5
   28566:	f7ff fe11 	bl	2818c <llcp_pdu_encode_conn_param_rsp>
		break;
   2856a:	e7e3      	b.n	28534 <rp_cu_tx+0x48>
		llcp_rr_prt_restart(conn);
   2856c:	4638      	mov	r0, r7
}
   2856e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		llcp_rr_prt_restart(conn);
   28572:	f000 bed1 	b.w	29318 <llcp_rr_prt_restart>
	LL_ASSERT(tx);
   28576:	4a07      	ldr	r2, [pc, #28]	; (28594 <rp_cu_tx+0xa8>)
   28578:	4909      	ldr	r1, [pc, #36]	; (285a0 <rp_cu_tx+0xb4>)
   2857a:	4808      	ldr	r0, [pc, #32]	; (2859c <rp_cu_tx+0xb0>)
   2857c:	f44f 732e 	mov.w	r3, #696	; 0x2b8
   28580:	f00a ff4a 	bl	33418 <assert_print>
   28584:	4040      	eors	r0, r0
   28586:	f380 8811 	msr	BASEPRI, r0
   2858a:	f04f 0003 	mov.w	r0, #3
   2858e:	df02      	svc	2
   28590:	e7b5      	b.n	284fe <rp_cu_tx+0x12>
   28592:	bf00      	nop
   28594:	0003aa44 	.word	0x0003aa44
   28598:	0003a004 	.word	0x0003a004
   2859c:	00039f74 	.word	0x00039f74
   285a0:	0003a694 	.word	0x0003a694

000285a4 <rp_cu_send_conn_update_ind.constprop.0>:
		cu_ntf(conn, ctx);
		rp_cu_complete(conn, ctx);
	}
}

static void rp_cu_send_conn_update_ind(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
   285a4:	b570      	push	{r4, r5, r6, lr}
   285a6:	4606      	mov	r6, r0
   285a8:	460c      	mov	r4, r1
				       void *param)
{
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   285aa:	f000 fead 	bl	29308 <llcp_rr_ispaused>
   285ae:	b110      	cbz	r0, 285b6 <rp_cu_send_conn_update_ind.constprop.0+0x12>
		ctx->state = RP_CU_STATE_WAIT_TX_CONN_UPDATE_IND;
   285b0:	2309      	movs	r3, #9
   285b2:	72a3      	strb	r3, [r4, #10]
		cu_prepare_update_ind(conn, ctx);
		rp_cu_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND);
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
		ctx->state = RP_CU_STATE_WAIT_INSTANT;
	}
}
   285b4:	bd70      	pop	{r4, r5, r6, pc}
   285b6:	4605      	mov	r5, r0
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   285b8:	4621      	mov	r1, r4
   285ba:	4630      	mov	r0, r6
   285bc:	f7fe f840 	bl	26640 <llcp_tx_alloc_peek>
   285c0:	2800      	cmp	r0, #0
   285c2:	d0f5      	beq.n	285b0 <rp_cu_send_conn_update_ind.constprop.0+0xc>
	const uint8_t preferred_periodicity = ctx->data.cu.preferred_periodicity;
   285c4:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
		const uint16_t interval_max = (ctx->data.cu.interval_max / preferred_periodicity) *
   285c8:	8d21      	ldrh	r1, [r4, #40]	; 0x28
	ctx->data.cu.win_offset_us = 0U;
   285ca:	84a5      	strh	r5, [r4, #36]	; 0x24
	ctx->data.cu.win_size = 1U;
   285cc:	2301      	movs	r3, #1
   285ce:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	if (preferred_periodicity) {
   285d2:	b14a      	cbz	r2, 285e8 <rp_cu_send_conn_update_ind.constprop.0+0x44>
		const uint16_t interval_max = (ctx->data.cu.interval_max / preferred_periodicity) *
   285d4:	fbb1 f3f2 	udiv	r3, r1, r2
   285d8:	fb13 f302 	smulbb	r3, r3, r2
		if (interval_max >= ctx->data.cu.interval_min) {
   285dc:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
		const uint16_t interval_max = (ctx->data.cu.interval_max / preferred_periodicity) *
   285de:	b29b      	uxth	r3, r3
		if (interval_max >= ctx->data.cu.interval_min) {
   285e0:	429a      	cmp	r2, r3
			ctx->data.cu.interval_max = interval_max;
   285e2:	bf9c      	itt	ls
   285e4:	8523      	strhls	r3, [r4, #40]	; 0x28
   285e6:	4619      	movls	r1, r3
	if (ctx->data.cu.offsets[0] <= ctx->data.cu.interval_max) {
   285e8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   285ea:	428b      	cmp	r3, r1
   285ec:	d807      	bhi.n	285fe <rp_cu_send_conn_update_ind.constprop.0+0x5a>
		ctx->data.cu.win_offset_us = ctx->data.cu.offsets[0] * CONN_INT_UNIT_US;
   285ee:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
   285f2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   285f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   285fa:	005b      	lsls	r3, r3, #1
   285fc:	84a3      	strh	r3, [r4, #36]	; 0x24
	ctx->data.cu.instant = ull_conn_event_counter(conn) + conn->lll.latency +
   285fe:	4630      	mov	r0, r6
   28600:	f7fc fdc6 	bl	25190 <ull_conn_event_counter>
   28604:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
   28606:	3306      	adds	r3, #6
   28608:	4418      	add	r0, r3
   2860a:	8420      	strh	r0, [r4, #32]
		rp_cu_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND);
   2860c:	2200      	movs	r2, #0
   2860e:	4621      	mov	r1, r4
   28610:	4630      	mov	r0, r6
   28612:	f7ff ff6b 	bl	284ec <rp_cu_tx>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
   28616:	23ff      	movs	r3, #255	; 0xff
   28618:	72e3      	strb	r3, [r4, #11]
   2861a:	230b      	movs	r3, #11
		ctx->state = RP_CU_STATE_WAIT_TX_CONN_UPDATE_IND;
   2861c:	72a3      	strb	r3, [r4, #10]
}
   2861e:	bd70      	pop	{r4, r5, r6, pc}

00028620 <lp_cu_send_conn_param_req.constprop.0>:
static void lp_cu_send_conn_param_req(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
   28620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return conn_upd_curr && (conn_upd_curr != conn);
   28624:	4e31      	ldr	r6, [pc, #196]	; (286ec <lp_cu_send_conn_param_req.constprop.0+0xcc>)
   28626:	6833      	ldr	r3, [r6, #0]
   28628:	4604      	mov	r4, r0
   2862a:	460d      	mov	r5, r1
   2862c:	b12b      	cbz	r3, 2863a <lp_cu_send_conn_param_req.constprop.0+0x1a>
   2862e:	4283      	cmp	r3, r0
   28630:	d003      	beq.n	2863a <lp_cu_send_conn_param_req.constprop.0+0x1a>
		ctx->state = LP_CU_STATE_WAIT_TX_CONN_PARAM_REQ;
   28632:	2301      	movs	r3, #1
   28634:	72ab      	strb	r3, [r5, #10]
}
   28636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cpr_active_is_set(conn) || llcp_lr_ispaused(conn) ||
   2863a:	4620      	mov	r0, r4
   2863c:	f7ff faba 	bl	27bb4 <llcp_lr_ispaused>
   28640:	2800      	cmp	r0, #0
   28642:	d1f6      	bne.n	28632 <lp_cu_send_conn_param_req.constprop.0+0x12>
	     llcp_rr_get_collision(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   28644:	4620      	mov	r0, r4
   28646:	f000 fe55 	bl	292f4 <llcp_rr_get_collision>
	if (cpr_active_is_set(conn) || llcp_lr_ispaused(conn) ||
   2864a:	4607      	mov	r7, r0
   2864c:	2800      	cmp	r0, #0
   2864e:	d1f0      	bne.n	28632 <lp_cu_send_conn_param_req.constprop.0+0x12>
	     llcp_rr_get_collision(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   28650:	4629      	mov	r1, r5
   28652:	4620      	mov	r0, r4
   28654:	f7fd fff4 	bl	26640 <llcp_tx_alloc_peek>
   28658:	2800      	cmp	r0, #0
   2865a:	d0ea      	beq.n	28632 <lp_cu_send_conn_param_req.constprop.0+0x12>
		uint16_t event_counter = ull_conn_event_counter(conn);
   2865c:	4620      	mov	r0, r4
   2865e:	f7fc fd97 	bl	25190 <ull_conn_event_counter>
		llcp_rr_set_incompat(conn, INCOMPAT_RESOLVABLE);
   28662:	2101      	movs	r1, #1
		uint16_t event_counter = ull_conn_event_counter(conn);
   28664:	4680      	mov	r8, r0
		llcp_rr_set_incompat(conn, INCOMPAT_RESOLVABLE);
   28666:	4620      	mov	r0, r4
   28668:	f000 fe3c 	bl	292e4 <llcp_rr_set_incompat>
		ctx->data.cu.reference_conn_event_count = event_counter;
   2866c:	f8a5 8030 	strh.w	r8, [r5, #48]	; 0x30
		ctx->data.cu.preferred_periodicity = 0U;
   28670:	f885 702e 	strb.w	r7, [r5, #46]	; 0x2e
	tx = llcp_tx_alloc(conn, ctx);
   28674:	4629      	mov	r1, r5
   28676:	4620      	mov	r0, r4
	conn_upd_curr = conn;
   28678:	6034      	str	r4, [r6, #0]
   2867a:	f7fd ffe9 	bl	26650 <llcp_tx_alloc>
	LL_ASSERT(tx);
   2867e:	4606      	mov	r6, r0
   28680:	b328      	cbz	r0, 286ce <lp_cu_send_conn_param_req.constprop.0+0xae>
		llcp_pdu_encode_conn_param_req(ctx, pdu);
   28682:	1d31      	adds	r1, r6, #4
   28684:	4628      	mov	r0, r5
   28686:	f7ff fd55 	bl	28134 <llcp_pdu_encode_conn_param_req>
	ctx->tx_opcode = pdu->llctrl.opcode;
   2868a:	79f3      	ldrb	r3, [r6, #7]
   2868c:	736b      	strb	r3, [r5, #13]
	llcp_tx_enqueue(conn, tx);
   2868e:	4631      	mov	r1, r6
   28690:	4620      	mov	r0, r4
   28692:	f7fd fffb 	bl	2668c <llcp_tx_enqueue>
	if (ctx->proc == PROC_CONN_PARAM_REQ) {
   28696:	7a2b      	ldrb	r3, [r5, #8]
   28698:	2b09      	cmp	r3, #9
   2869a:	d014      	beq.n	286c6 <lp_cu_send_conn_param_req.constprop.0+0xa6>
		switch (conn->lll.role) {
   2869c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   286a0:	09db      	lsrs	r3, r3, #7
   286a2:	d002      	beq.n	286aa <lp_cu_send_conn_param_req.constprop.0+0x8a>
			ctx->state = LP_CU_STATE_WAIT_RX_CONN_UPDATE_IND;
   286a4:	2304      	movs	r3, #4
   286a6:	816b      	strh	r3, [r5, #10]
			break;
   286a8:	e7c5      	b.n	28636 <lp_cu_send_conn_param_req.constprop.0+0x16>
			LL_ASSERT(0);
   286aa:	4a11      	ldr	r2, [pc, #68]	; (286f0 <lp_cu_send_conn_param_req.constprop.0+0xd0>)
   286ac:	4911      	ldr	r1, [pc, #68]	; (286f4 <lp_cu_send_conn_param_req.constprop.0+0xd4>)
   286ae:	4812      	ldr	r0, [pc, #72]	; (286f8 <lp_cu_send_conn_param_req.constprop.0+0xd8>)
   286b0:	f240 137d 	movw	r3, #381	; 0x17d
   286b4:	f00a feb0 	bl	33418 <assert_print>
   286b8:	4040      	eors	r0, r0
   286ba:	f380 8811 	msr	BASEPRI, r0
   286be:	f04f 0003 	mov.w	r0, #3
   286c2:	df02      	svc	2
}
   286c4:	e7b7      	b.n	28636 <lp_cu_send_conn_param_req.constprop.0+0x16>
		llcp_lr_prt_restart(conn);
   286c6:	4620      	mov	r0, r4
   286c8:	f7ff fa84 	bl	27bd4 <llcp_lr_prt_restart>
   286cc:	e7e6      	b.n	2869c <lp_cu_send_conn_param_req.constprop.0+0x7c>
	LL_ASSERT(tx);
   286ce:	4a08      	ldr	r2, [pc, #32]	; (286f0 <lp_cu_send_conn_param_req.constprop.0+0xd0>)
   286d0:	490a      	ldr	r1, [pc, #40]	; (286fc <lp_cu_send_conn_param_req.constprop.0+0xdc>)
   286d2:	4809      	ldr	r0, [pc, #36]	; (286f8 <lp_cu_send_conn_param_req.constprop.0+0xd8>)
   286d4:	f44f 7387 	mov.w	r3, #270	; 0x10e
   286d8:	f00a fe9e 	bl	33418 <assert_print>
   286dc:	4040      	eors	r0, r0
   286de:	f380 8811 	msr	BASEPRI, r0
   286e2:	f04f 0003 	mov.w	r0, #3
   286e6:	df02      	svc	2
   286e8:	e7cb      	b.n	28682 <lp_cu_send_conn_param_req.constprop.0+0x62>
   286ea:	bf00      	nop
   286ec:	20002730 	.word	0x20002730
   286f0:	0003aa44 	.word	0x0003aa44
   286f4:	0003a004 	.word	0x0003a004
   286f8:	00039f74 	.word	0x00039f74
   286fc:	0003a694 	.word	0x0003a694

00028700 <rp_cu_send_reject_ext_ind.constprop.0>:

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
static void rp_cu_send_reject_ext_ind(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
   28700:	b570      	push	{r4, r5, r6, lr}
   28702:	4606      	mov	r6, r0
   28704:	460c      	mov	r4, r1
				      void *param)
{
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   28706:	f000 fdff 	bl	29308 <llcp_rr_ispaused>
   2870a:	b110      	cbz	r0, 28712 <rp_cu_send_reject_ext_ind.constprop.0+0x12>
		ctx->state = RP_CU_STATE_WAIT_TX_REJECT_EXT_IND;
   2870c:	2306      	movs	r3, #6
   2870e:	72a3      	strb	r3, [r4, #10]
	} else {
		rp_cu_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND);
		rp_cu_complete(conn, ctx);
	}
}
   28710:	bd70      	pop	{r4, r5, r6, pc}
   28712:	4605      	mov	r5, r0
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   28714:	4621      	mov	r1, r4
   28716:	4630      	mov	r0, r6
   28718:	f7fd ff92 	bl	26640 <llcp_tx_alloc_peek>
   2871c:	2800      	cmp	r0, #0
   2871e:	d0f5      	beq.n	2870c <rp_cu_send_reject_ext_ind.constprop.0+0xc>
		rp_cu_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND);
   28720:	2211      	movs	r2, #17
   28722:	4621      	mov	r1, r4
   28724:	4630      	mov	r0, r6
   28726:	f7ff fee1 	bl	284ec <rp_cu_tx>
	llcp_rr_complete(conn);
   2872a:	4630      	mov	r0, r6
   2872c:	f000 fe72 	bl	29414 <llcp_rr_complete>
	if (ctx->proc == PROC_CONN_PARAM_REQ) {
   28730:	7a23      	ldrb	r3, [r4, #8]
   28732:	2b09      	cmp	r3, #9
   28734:	d104      	bne.n	28740 <rp_cu_send_reject_ext_ind.constprop.0+0x40>
	if (conn == conn_upd_curr) {
   28736:	4b04      	ldr	r3, [pc, #16]	; (28748 <rp_cu_send_reject_ext_ind.constprop.0+0x48>)
   28738:	681a      	ldr	r2, [r3, #0]
   2873a:	4296      	cmp	r6, r2
		conn_upd_curr = NULL;
   2873c:	bf08      	it	eq
   2873e:	601d      	streq	r5, [r3, #0]
}
   28740:	2300      	movs	r3, #0
		ctx->state = RP_CU_STATE_WAIT_TX_REJECT_EXT_IND;
   28742:	72a3      	strb	r3, [r4, #10]
}
   28744:	bd70      	pop	{r4, r5, r6, pc}
   28746:	bf00      	nop
   28748:	20002730 	.word	0x20002730

0002874c <rp_cu_st_wait_conn_param_req_available.part.0.isra.0>:
		break;
	}
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
static void rp_cu_st_wait_conn_param_req_available(struct ll_conn *conn, struct proc_ctx *ctx,
   2874c:	b538      	push	{r3, r4, r5, lr}
	return conn_upd_curr && (conn_upd_curr != conn);
   2874e:	4a1d      	ldr	r2, [pc, #116]	; (287c4 <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x78>)
   28750:	6813      	ldr	r3, [r2, #0]
   28752:	4605      	mov	r5, r0
   28754:	460c      	mov	r4, r1
   28756:	b13b      	cbz	r3, 28768 <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x1c>
   28758:	4283      	cmp	r3, r0
   2875a:	d005      	beq.n	28768 <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x1c>
	 */
	switch (evt) {
	case RP_CU_EVT_CONN_PARAM_REQ:
	case RP_CU_EVT_RUN:
		if (cpr_active_is_set(conn)) {
			ctx->state = RP_CU_STATE_WAIT_CONN_PARAM_REQ_AVAILABLE;
   2875c:	2302      	movs	r3, #2
   2875e:	728b      	strb	r3, [r1, #10]
			if (!llcp_rr_ispaused(conn) && llcp_tx_alloc_peek(conn, ctx)) {
   28760:	f000 fdd2 	bl	29308 <llcp_rr_ispaused>
   28764:	b1b8      	cbz	r0, 28796 <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x4a>
		}
	default:
		/* Ignore other evts */
		break;
	}
}
   28766:	bd38      	pop	{r3, r4, r5, pc}
	if ((interval != lll->interval) || (latency != lll->latency) ||
   28768:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   2876a:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
	conn_upd_curr = conn;
   2876c:	6015      	str	r5, [r2, #0]
   2876e:	4299      	cmp	r1, r3
				cu_have_params_changed(conn, ctx->data.cu.interval_max,
   28770:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
   28772:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
	if ((interval != lll->interval) || (latency != lll->latency) ||
   28774:	d005      	beq.n	28782 <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x36>
	if (!llcp_ntf_alloc_is_available()) {
   28776:	f7fd ff77 	bl	26668 <llcp_ntf_alloc_is_available>
   2877a:	b9d8      	cbnz	r0, 287b4 <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x68>
		ctx->state = RP_CU_STATE_WAIT_NTF_CONN_PARAM_REQ;
   2877c:	2303      	movs	r3, #3
   2877e:	72a3      	strb	r3, [r4, #10]
}
   28780:	bd38      	pop	{r3, r4, r5, pc}
	if ((interval != lll->interval) || (latency != lll->latency) ||
   28782:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   28784:	4293      	cmp	r3, r2
   28786:	d1f6      	bne.n	28776 <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x2a>
   28788:	f8b5 3184 	ldrh.w	r3, [r5, #388]	; 0x184
   2878c:	4283      	cmp	r3, r0
   2878e:	d1f2      	bne.n	28776 <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x2a>
				ctx->state = RP_CU_STATE_WAIT_CONN_PARAM_REQ_REPLY_CONTINUE;
   28790:	2305      	movs	r3, #5
   28792:	72a3      	strb	r3, [r4, #10]
}
   28794:	bd38      	pop	{r3, r4, r5, pc}
			if (!llcp_rr_ispaused(conn) && llcp_tx_alloc_peek(conn, ctx)) {
   28796:	4621      	mov	r1, r4
   28798:	4628      	mov	r0, r5
   2879a:	f7fd ff51 	bl	26640 <llcp_tx_alloc_peek>
   2879e:	2800      	cmp	r0, #0
   287a0:	d0e1      	beq.n	28766 <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x1a>
				ctx->data.cu.error = BT_HCI_ERR_UNSUPP_LL_PARAM_VAL;
   287a2:	f44f 6372 	mov.w	r3, #3872	; 0xf20
   287a6:	83a3      	strh	r3, [r4, #28]
				rp_cu_send_reject_ext_ind(conn, ctx, evt, param);
   287a8:	4621      	mov	r1, r4
   287aa:	4628      	mov	r0, r5
}
   287ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				rp_cu_send_reject_ext_ind(conn, ctx, evt, param);
   287b0:	f7ff bfa6 	b.w	28700 <rp_cu_send_reject_ext_ind.constprop.0>
		rp_cu_conn_param_req_ntf(conn, ctx);
   287b4:	4621      	mov	r1, r4
   287b6:	4628      	mov	r0, r5
   287b8:	f7ff fe48 	bl	2844c <rp_cu_conn_param_req_ntf>
		ctx->state = RP_CU_STATE_WAIT_CONN_PARAM_REQ_REPLY;
   287bc:	2304      	movs	r3, #4
   287be:	72a3      	strb	r3, [r4, #10]
}
   287c0:	bd38      	pop	{r3, r4, r5, pc}
   287c2:	bf00      	nop
   287c4:	20002730 	.word	0x20002730

000287c8 <rp_cu_check_instant.isra.0>:
		/* Ignore other evts */
		break;
	}
}

static void rp_cu_check_instant(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
   287c8:	b538      	push	{r3, r4, r5, lr}
   287ca:	460c      	mov	r4, r1
   287cc:	4605      	mov	r5, r0
				void *param)
{
	uint16_t event_counter = ull_conn_event_counter(conn);
   287ce:	f7fc fcdf 	bl	25190 <ull_conn_event_counter>

	if (is_instant_reached_or_passed(ctx->data.cu.instant, event_counter)) {
   287d2:	8c23      	ldrh	r3, [r4, #32]
   287d4:	1ac3      	subs	r3, r0, r3
   287d6:	041b      	lsls	r3, r3, #16
   287d8:	d500      	bpl.n	287dc <rp_cu_check_instant.isra.0+0x14>
			rp_cu_wait_complete(conn, ctx, evt, param);
		} else {
			rp_cu_complete(conn, ctx);
		}
	}
}
   287da:	bd38      	pop	{r3, r4, r5, pc}
		cu_update_conn_parameters(conn, ctx);
   287dc:	4621      	mov	r1, r4
   287de:	4628      	mov	r0, r5
   287e0:	f7ff fe5e 	bl	284a0 <cu_update_conn_parameters>
		if (ctx->proc == PROC_CONN_PARAM_REQ) {
   287e4:	7a23      	ldrb	r3, [r4, #8]
   287e6:	2b09      	cmp	r3, #9
   287e8:	d01d      	beq.n	28826 <rp_cu_check_instant.isra.0+0x5e>
	return (((ctx->proc == PROC_CONN_PARAM_REQ) && (ctx->data.cu.error != 0U)) ||
   287ea:	7fa3      	ldrb	r3, [r4, #30]
   287ec:	b15b      	cbz	r3, 28806 <rp_cu_check_instant.isra.0+0x3e>
			ctx->data.cu.error = BT_HCI_ERR_SUCCESS;
   287ee:	2300      	movs	r3, #0
   287f0:	7723      	strb	r3, [r4, #28]
	if (!llcp_ntf_alloc_is_available()) {
   287f2:	f7fd ff39 	bl	26668 <llcp_ntf_alloc_is_available>
   287f6:	b910      	cbnz	r0, 287fe <rp_cu_check_instant.isra.0+0x36>
		ctx->state = RP_CU_STATE_WAIT_NTF;
   287f8:	230c      	movs	r3, #12
   287fa:	72a3      	strb	r3, [r4, #10]
}
   287fc:	bd38      	pop	{r3, r4, r5, pc}
		cu_ntf(conn, ctx);
   287fe:	4621      	mov	r1, r4
   28800:	4628      	mov	r0, r5
   28802:	f7ff fdef 	bl	283e4 <cu_ntf>
	llcp_rr_complete(conn);
   28806:	4628      	mov	r0, r5
   28808:	f000 fe04 	bl	29414 <llcp_rr_complete>
	if (ctx->proc == PROC_CONN_PARAM_REQ) {
   2880c:	7a23      	ldrb	r3, [r4, #8]
   2880e:	2b09      	cmp	r3, #9
   28810:	d002      	beq.n	28818 <rp_cu_check_instant.isra.0+0x50>
	ctx->state = RP_CU_STATE_IDLE;
   28812:	2300      	movs	r3, #0
   28814:	72a3      	strb	r3, [r4, #10]
}
   28816:	bd38      	pop	{r3, r4, r5, pc}
	if (conn == conn_upd_curr) {
   28818:	4b08      	ldr	r3, [pc, #32]	; (2883c <rp_cu_check_instant.isra.0+0x74>)
   2881a:	681a      	ldr	r2, [r3, #0]
   2881c:	4295      	cmp	r5, r2
		conn_upd_curr = NULL;
   2881e:	bf04      	itt	eq
   28820:	2200      	moveq	r2, #0
   28822:	601a      	streq	r2, [r3, #0]
   28824:	e7f5      	b.n	28812 <rp_cu_check_instant.isra.0+0x4a>
			llcp_rr_prt_stop(conn);
   28826:	4628      	mov	r0, r5
   28828:	f000 fd7c 	bl	29324 <llcp_rr_prt_stop>
	return (((ctx->proc == PROC_CONN_PARAM_REQ) && (ctx->data.cu.error != 0U)) ||
   2882c:	7a23      	ldrb	r3, [r4, #8]
   2882e:	2b09      	cmp	r3, #9
   28830:	d1db      	bne.n	287ea <rp_cu_check_instant.isra.0+0x22>
   28832:	7f23      	ldrb	r3, [r4, #28]
   28834:	2b00      	cmp	r3, #0
   28836:	d1da      	bne.n	287ee <rp_cu_check_instant.isra.0+0x26>
   28838:	e7d7      	b.n	287ea <rp_cu_check_instant.isra.0+0x22>
   2883a:	bf00      	nop
   2883c:	20002730 	.word	0x20002730

00028840 <rp_cu_execute_fsm>:
		break;
	}
}

static void rp_cu_execute_fsm(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
{
   28840:	b570      	push	{r4, r5, r6, lr}
   28842:	460c      	mov	r4, r1
	switch (ctx->state) {
   28844:	7a89      	ldrb	r1, [r1, #10]
{
   28846:	4605      	mov	r5, r0
	switch (ctx->state) {
   28848:	290c      	cmp	r1, #12
   2884a:	f200 80a9 	bhi.w	289a0 <rp_cu_execute_fsm+0x160>
   2884e:	e8df f001 	tbb	[pc, r1]
   28852:	170b      	.short	0x170b
   28854:	61584e46 	.word	0x61584e46
   28858:	8379a771 	.word	0x8379a771
   2885c:	9e8b      	.short	0x9e8b
   2885e:	07          	.byte	0x07
   2885f:	00          	.byte	0x00
	switch (evt) {
   28860:	2a00      	cmp	r2, #0
   28862:	f000 80ab 	beq.w	289bc <rp_cu_execute_fsm+0x17c>
	default:
		/* Unknown state */
		LL_ASSERT(0);
		break;
	}
}
   28866:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   28868:	2a00      	cmp	r2, #0
   2886a:	d1fc      	bne.n	28866 <rp_cu_execute_fsm+0x26>
		switch (ctx->proc) {
   2886c:	7a23      	ldrb	r3, [r4, #8]
   2886e:	2b08      	cmp	r3, #8
   28870:	f000 80bc 	beq.w	289ec <rp_cu_execute_fsm+0x1ac>
   28874:	2b09      	cmp	r3, #9
   28876:	f040 80ab 	bne.w	289d0 <rp_cu_execute_fsm+0x190>
			ctx->state = RP_CU_STATE_WAIT_RX_CONN_PARAM_REQ;
   2887a:	2301      	movs	r3, #1
   2887c:	72a3      	strb	r3, [r4, #10]
}
   2887e:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   28880:	2a01      	cmp	r2, #1
   28882:	d1f0      	bne.n	28866 <rp_cu_execute_fsm+0x26>
		llcp_pdu_decode_conn_param_req(ctx, param);
   28884:	4619      	mov	r1, r3
   28886:	4620      	mov	r0, r4
   28888:	f7ff fcac 	bl	281e4 <llcp_pdu_decode_conn_param_req>
	const uint16_t interval_min = ctx->data.cu.interval_min;
   2888c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
	const uint16_t interval_max = ctx->data.cu.interval_max; /* unit conn events (ie 1.25ms) */
   2888e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
	const uint16_t timeout = ctx->data.cu.timeout; /* unit 10ms */
   28890:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
	const uint16_t latency = ctx->data.cu.latency;
   28892:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
	const uint16_t preferred_periodicity = ctx->data.cu.preferred_periodicity;
   28894:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
	     ((latency + 1) * interval_max)) ||
   28898:	2b05      	cmp	r3, #5
   2889a:	d917      	bls.n	288cc <rp_cu_execute_fsm+0x8c>
	const bool invalid = ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   2889c:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   288a0:	d814      	bhi.n	288cc <rp_cu_execute_fsm+0x8c>
	    (interval_max > CONN_UPDATE_CONN_INTV_4SEC) ||
   288a2:	4293      	cmp	r3, r2
   288a4:	d812      	bhi.n	288cc <rp_cu_execute_fsm+0x8c>
	    (interval_min > interval_max) ||
   288a6:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
   288aa:	d20f      	bcs.n	288cc <rp_cu_execute_fsm+0x8c>
	    (latency > CONN_UPDATE_LATENCY_MAX) ||
   288ac:	f1a0 030a 	sub.w	r3, r0, #10
   288b0:	b29b      	uxth	r3, r3
   288b2:	f640 4c76 	movw	ip, #3190	; 0xc76
   288b6:	4563      	cmp	r3, ip
   288b8:	d808      	bhi.n	288cc <rp_cu_execute_fsm+0x8c>
	     ((latency + 1) * interval_max)) ||
   288ba:	1c4b      	adds	r3, r1, #1
   288bc:	b29b      	uxth	r3, r3
   288be:	fb02 f303 	mul.w	r3, r2, r3
	    (timeout < CONN_UPDATE_TIMEOUT_100MS) || (timeout > CONN_UPDATE_TIMEOUT_32SEC) ||
   288c2:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   288c6:	d201      	bcs.n	288cc <rp_cu_execute_fsm+0x8c>
	     ((latency + 1) * interval_max)) ||
   288c8:	42b2      	cmp	r2, r6
   288ca:	d20a      	bcs.n	288e2 <rp_cu_execute_fsm+0xa2>
			ctx->data.cu.error = BT_HCI_ERR_INVALID_LL_PARAM;
   288cc:	f640 731e 	movw	r3, #3870	; 0xf1e
   288d0:	83a3      	strh	r3, [r4, #28]
			rp_cu_send_reject_ext_ind(conn, ctx, evt, param);
   288d2:	4621      	mov	r1, r4
   288d4:	4628      	mov	r0, r5
}
   288d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			rp_cu_send_reject_ext_ind(conn, ctx, evt, param);
   288da:	f7ff bf11 	b.w	28700 <rp_cu_send_reject_ext_ind.constprop.0>
	switch (evt) {
   288de:	2a01      	cmp	r2, #1
   288e0:	d8c1      	bhi.n	28866 <rp_cu_execute_fsm+0x26>
   288e2:	4621      	mov	r1, r4
   288e4:	4628      	mov	r0, r5
}
   288e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   288ea:	f7ff bf2f 	b.w	2874c <rp_cu_st_wait_conn_param_req_available.part.0.isra.0>
	switch (evt) {
   288ee:	2a00      	cmp	r2, #0
   288f0:	d1b9      	bne.n	28866 <rp_cu_execute_fsm+0x26>
	if (!llcp_ntf_alloc_is_available()) {
   288f2:	f7fd feb9 	bl	26668 <llcp_ntf_alloc_is_available>
   288f6:	2800      	cmp	r0, #0
   288f8:	f040 809f 	bne.w	28a3a <rp_cu_execute_fsm+0x1fa>
		ctx->state = RP_CU_STATE_WAIT_NTF_CONN_PARAM_REQ;
   288fc:	2303      	movs	r3, #3
   288fe:	72a3      	strb	r3, [r4, #10]
}
   28900:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   28902:	2a03      	cmp	r2, #3
   28904:	d061      	beq.n	289ca <rp_cu_execute_fsm+0x18a>
   28906:	2a04      	cmp	r2, #4
   28908:	d1ad      	bne.n	28866 <rp_cu_execute_fsm+0x26>
		ctx->data.cu.rejected_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   2890a:	220f      	movs	r2, #15
		ctx->state = RP_CU_STATE_WAIT_TX_REJECT_EXT_IND;
   2890c:	2306      	movs	r3, #6
		ctx->data.cu.rejected_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   2890e:	7762      	strb	r2, [r4, #29]
		ctx->state = RP_CU_STATE_WAIT_TX_REJECT_EXT_IND;
   28910:	72a3      	strb	r3, [r4, #10]
}
   28912:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   28914:	2a00      	cmp	r2, #0
   28916:	d1a6      	bne.n	28866 <rp_cu_execute_fsm+0x26>
		if (conn->lll.role == BT_HCI_ROLE_CENTRAL) {
   28918:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   2891c:	2b00      	cmp	r3, #0
   2891e:	da1d      	bge.n	2895c <rp_cu_execute_fsm+0x11c>
			if (!ctx->data.cu.error) {
   28920:	7f23      	ldrb	r3, [r4, #28]
   28922:	b18b      	cbz	r3, 28948 <rp_cu_execute_fsm+0x108>
				ctx->data.cu.rejected_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   28924:	230f      	movs	r3, #15
   28926:	7763      	strb	r3, [r4, #29]
				rp_cu_send_reject_ext_ind(conn, ctx, evt, param);
   28928:	4621      	mov	r1, r4
   2892a:	4628      	mov	r0, r5
}
   2892c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				rp_cu_send_reject_ext_ind(conn, ctx, evt, param);
   28930:	f7ff bee6 	b.w	28700 <rp_cu_send_reject_ext_ind.constprop.0>
	switch (evt) {
   28934:	2a00      	cmp	r2, #0
   28936:	d196      	bne.n	28866 <rp_cu_execute_fsm+0x26>
		rp_cu_send_reject_ext_ind(conn, ctx, evt, param);
   28938:	4621      	mov	r1, r4
   2893a:	4628      	mov	r0, r5
}
   2893c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rp_cu_send_reject_ext_ind(conn, ctx, evt, param);
   28940:	f7ff bede 	b.w	28700 <rp_cu_send_reject_ext_ind.constprop.0>
	switch (evt) {
   28944:	2a00      	cmp	r2, #0
   28946:	d18e      	bne.n	28866 <rp_cu_execute_fsm+0x26>
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   28948:	4628      	mov	r0, r5
   2894a:	f000 fcdd 	bl	29308 <llcp_rr_ispaused>
   2894e:	2800      	cmp	r0, #0
   28950:	d04f      	beq.n	289f2 <rp_cu_execute_fsm+0x1b2>
		ctx->state = RP_CU_STATE_WAIT_TX_CONN_PARAM_RSP;
   28952:	2308      	movs	r3, #8
   28954:	72a3      	strb	r3, [r4, #10]
}
   28956:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   28958:	2a00      	cmp	r2, #0
   2895a:	d184      	bne.n	28866 <rp_cu_execute_fsm+0x26>
		rp_cu_send_conn_update_ind(conn, ctx, evt, param);
   2895c:	4621      	mov	r1, r4
   2895e:	4628      	mov	r0, r5
}
   28960:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rp_cu_send_conn_update_ind(conn, ctx, evt, param);
   28964:	f7ff be1e 	b.w	285a4 <rp_cu_send_conn_update_ind.constprop.0>
	switch (evt) {
   28968:	2a02      	cmp	r2, #2
   2896a:	f47f af7c 	bne.w	28866 <rp_cu_execute_fsm+0x26>
		switch (conn->lll.role) {
   2896e:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   28972:	f3c2 11c0 	ubfx	r1, r2, #7, #1
   28976:	09d2      	lsrs	r2, r2, #7
   28978:	d149      	bne.n	28a0e <rp_cu_execute_fsm+0x1ce>
			ctx->unknown_response.type = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
   2897a:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   2897e:	4628      	mov	r0, r5
   28980:	f000 fcc2 	bl	29308 <llcp_rr_ispaused>
   28984:	2800      	cmp	r0, #0
   28986:	d07a      	beq.n	28a7e <rp_cu_execute_fsm+0x23e>
		ctx->state = RP_CU_STATE_WAIT_TX_UNKNOWN_RSP;
   28988:	230d      	movs	r3, #13
   2898a:	72a3      	strb	r3, [r4, #10]
}
   2898c:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   2898e:	2a00      	cmp	r2, #0
   28990:	f47f af69 	bne.w	28866 <rp_cu_execute_fsm+0x26>
		rp_cu_check_instant(conn, ctx, evt, param);
   28994:	4621      	mov	r1, r4
   28996:	4628      	mov	r0, r5
}
   28998:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rp_cu_check_instant(conn, ctx, evt, param);
   2899c:	f7ff bf14 	b.w	287c8 <rp_cu_check_instant.isra.0>
		LL_ASSERT(0);
   289a0:	4a3d      	ldr	r2, [pc, #244]	; (28a98 <rp_cu_execute_fsm+0x258>)
   289a2:	493e      	ldr	r1, [pc, #248]	; (28a9c <rp_cu_execute_fsm+0x25c>)
   289a4:	483e      	ldr	r0, [pc, #248]	; (28aa0 <rp_cu_execute_fsm+0x260>)
   289a6:	f240 43a7 	movw	r3, #1191	; 0x4a7
   289aa:	f00a fd35 	bl	33418 <assert_print>
   289ae:	4040      	eors	r0, r0
   289b0:	f380 8811 	msr	BASEPRI, r0
   289b4:	f04f 0003 	mov.w	r0, #3
   289b8:	df02      	svc	2
}
   289ba:	bd70      	pop	{r4, r5, r6, pc}
	if (!llcp_ntf_alloc_is_available()) {
   289bc:	f7fd fe54 	bl	26668 <llcp_ntf_alloc_is_available>
   289c0:	2800      	cmp	r0, #0
   289c2:	d141      	bne.n	28a48 <rp_cu_execute_fsm+0x208>
		ctx->state = RP_CU_STATE_WAIT_NTF;
   289c4:	230c      	movs	r3, #12
   289c6:	72a3      	strb	r3, [r4, #10]
}
   289c8:	bd70      	pop	{r4, r5, r6, pc}
		ctx->state = RP_CU_STATE_WAIT_CONN_PARAM_REQ_REPLY_CONTINUE;
   289ca:	2305      	movs	r3, #5
   289cc:	72a3      	strb	r3, [r4, #10]
}
   289ce:	bd70      	pop	{r4, r5, r6, pc}
			LL_ASSERT(0);
   289d0:	4a31      	ldr	r2, [pc, #196]	; (28a98 <rp_cu_execute_fsm+0x258>)
   289d2:	4932      	ldr	r1, [pc, #200]	; (28a9c <rp_cu_execute_fsm+0x25c>)
   289d4:	4832      	ldr	r0, [pc, #200]	; (28aa0 <rp_cu_execute_fsm+0x260>)
   289d6:	f44f 7356 	mov.w	r3, #856	; 0x358
   289da:	f00a fd1d 	bl	33418 <assert_print>
   289de:	4040      	eors	r0, r0
   289e0:	f380 8811 	msr	BASEPRI, r0
   289e4:	f04f 0003 	mov.w	r0, #3
   289e8:	df02      	svc	2
}
   289ea:	bd70      	pop	{r4, r5, r6, pc}
			ctx->state = RP_CU_STATE_WAIT_RX_CONN_UPDATE_IND;
   289ec:	230a      	movs	r3, #10
   289ee:	72a3      	strb	r3, [r4, #10]
}
   289f0:	bd70      	pop	{r4, r5, r6, pc}
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   289f2:	4621      	mov	r1, r4
   289f4:	4628      	mov	r0, r5
   289f6:	f7fd fe23 	bl	26640 <llcp_tx_alloc_peek>
   289fa:	2800      	cmp	r0, #0
   289fc:	d0a9      	beq.n	28952 <rp_cu_execute_fsm+0x112>
		rp_cu_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP);
   289fe:	2210      	movs	r2, #16
   28a00:	4621      	mov	r1, r4
   28a02:	4628      	mov	r0, r5
   28a04:	f7ff fd72 	bl	284ec <rp_cu_tx>
		ctx->state = RP_CU_STATE_WAIT_RX_CONN_UPDATE_IND;
   28a08:	230a      	movs	r3, #10
   28a0a:	8163      	strh	r3, [r4, #10]
}
   28a0c:	bd70      	pop	{r4, r5, r6, pc}
			llcp_pdu_decode_conn_update_ind(ctx, param);
   28a0e:	4619      	mov	r1, r3
   28a10:	4620      	mov	r0, r4
   28a12:	f7ff fc2d 	bl	28270 <llcp_pdu_decode_conn_update_ind>
			if (is_instant_not_passed(ctx->data.cu.instant,
   28a16:	4628      	mov	r0, r5
   28a18:	8c26      	ldrh	r6, [r4, #32]
   28a1a:	f7fc fbb9 	bl	25190 <ull_conn_event_counter>
   28a1e:	1a33      	subs	r3, r6, r0
   28a20:	b29b      	uxth	r3, r3
   28a22:	f647 72fe 	movw	r2, #32766	; 0x7ffe
   28a26:	4293      	cmp	r3, r2
   28a28:	d81b      	bhi.n	28a62 <rp_cu_execute_fsm+0x222>
				ctx->state = RP_CU_STATE_WAIT_INSTANT;
   28a2a:	230b      	movs	r3, #11
   28a2c:	72a3      	strb	r3, [r4, #10]
				rp_cu_check_instant(conn, ctx, evt, param);
   28a2e:	4621      	mov	r1, r4
   28a30:	4628      	mov	r0, r5
}
   28a32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				rp_cu_check_instant(conn, ctx, evt, param);
   28a36:	f7ff bec7 	b.w	287c8 <rp_cu_check_instant.isra.0>
		rp_cu_conn_param_req_ntf(conn, ctx);
   28a3a:	4621      	mov	r1, r4
   28a3c:	4628      	mov	r0, r5
   28a3e:	f7ff fd05 	bl	2844c <rp_cu_conn_param_req_ntf>
		ctx->state = RP_CU_STATE_WAIT_CONN_PARAM_REQ_REPLY;
   28a42:	2304      	movs	r3, #4
   28a44:	72a3      	strb	r3, [r4, #10]
}
   28a46:	bd70      	pop	{r4, r5, r6, pc}
		cu_ntf(conn, ctx);
   28a48:	4621      	mov	r1, r4
   28a4a:	4628      	mov	r0, r5
   28a4c:	f7ff fcca 	bl	283e4 <cu_ntf>
	llcp_rr_complete(conn);
   28a50:	4628      	mov	r0, r5
   28a52:	f000 fcdf 	bl	29414 <llcp_rr_complete>
	if (ctx->proc == PROC_CONN_PARAM_REQ) {
   28a56:	7a23      	ldrb	r3, [r4, #8]
   28a58:	2b09      	cmp	r3, #9
   28a5a:	d009      	beq.n	28a70 <rp_cu_execute_fsm+0x230>
				ctx->state = RP_CU_STATE_IDLE;
   28a5c:	2300      	movs	r3, #0
   28a5e:	72a3      	strb	r3, [r4, #10]
}
   28a60:	bd70      	pop	{r4, r5, r6, pc}
				conn->llcp_terminate.reason_final = BT_HCI_ERR_INSTANT_PASSED;
   28a62:	2328      	movs	r3, #40	; 0x28
   28a64:	f885 3148 	strb.w	r3, [r5, #328]	; 0x148
				llcp_rr_complete(conn);
   28a68:	4628      	mov	r0, r5
   28a6a:	f000 fcd3 	bl	29414 <llcp_rr_complete>
   28a6e:	e7f5      	b.n	28a5c <rp_cu_execute_fsm+0x21c>
	if (conn == conn_upd_curr) {
   28a70:	4b0c      	ldr	r3, [pc, #48]	; (28aa4 <rp_cu_execute_fsm+0x264>)
   28a72:	681a      	ldr	r2, [r3, #0]
   28a74:	4295      	cmp	r5, r2
   28a76:	d1f1      	bne.n	28a5c <rp_cu_execute_fsm+0x21c>
		conn_upd_curr = NULL;
   28a78:	2200      	movs	r2, #0
   28a7a:	601a      	str	r2, [r3, #0]
	ctx->state = RP_CU_STATE_IDLE;
   28a7c:	e7ee      	b.n	28a5c <rp_cu_execute_fsm+0x21c>
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   28a7e:	4621      	mov	r1, r4
   28a80:	4628      	mov	r0, r5
   28a82:	f7fd fddd 	bl	26640 <llcp_tx_alloc_peek>
   28a86:	2800      	cmp	r0, #0
   28a88:	f43f af7e 	beq.w	28988 <rp_cu_execute_fsm+0x148>
		rp_cu_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP);
   28a8c:	2207      	movs	r2, #7
   28a8e:	4621      	mov	r1, r4
   28a90:	4628      	mov	r0, r5
   28a92:	f7ff fd2b 	bl	284ec <rp_cu_tx>
   28a96:	e7db      	b.n	28a50 <rp_cu_execute_fsm+0x210>
   28a98:	0003aa44 	.word	0x0003aa44
   28a9c:	0003a004 	.word	0x0003a004
   28aa0:	00039f74 	.word	0x00039f74
   28aa4:	20002730 	.word	0x20002730

00028aa8 <lp_cu_execute_fsm>:
{
   28aa8:	b570      	push	{r4, r5, r6, lr}
   28aaa:	460c      	mov	r4, r1
	switch (ctx->state) {
   28aac:	7a89      	ldrb	r1, [r1, #10]
{
   28aae:	4606      	mov	r6, r0
   28ab0:	4615      	mov	r5, r2
	switch (ctx->state) {
   28ab2:	2907      	cmp	r1, #7
   28ab4:	d808      	bhi.n	28ac8 <lp_cu_execute_fsm+0x20>
   28ab6:	e8df f001 	tbb	[pc, r1]
   28aba:	2815      	.short	0x2815
   28abc:	30600707 	.word	0x30600707
   28ac0:	0439      	.short	0x0439
	switch (evt) {
   28ac2:	2d00      	cmp	r5, #0
   28ac4:	d06e      	beq.n	28ba4 <lp_cu_execute_fsm+0xfc>
}
   28ac6:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(0);
   28ac8:	4a63      	ldr	r2, [pc, #396]	; (28c58 <lp_cu_execute_fsm+0x1b0>)
   28aca:	4964      	ldr	r1, [pc, #400]	; (28c5c <lp_cu_execute_fsm+0x1b4>)
   28acc:	4864      	ldr	r0, [pc, #400]	; (28c60 <lp_cu_execute_fsm+0x1b8>)
   28ace:	f240 2382 	movw	r3, #642	; 0x282
   28ad2:	f00a fca1 	bl	33418 <assert_print>
   28ad6:	4040      	eors	r0, r0
   28ad8:	f380 8811 	msr	BASEPRI, r0
   28adc:	f04f 0003 	mov.w	r0, #3
   28ae0:	df02      	svc	2
}
   28ae2:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   28ae4:	2d00      	cmp	r5, #0
   28ae6:	d1ee      	bne.n	28ac6 <lp_cu_execute_fsm+0x1e>
		switch (ctx->proc) {
   28ae8:	7a23      	ldrb	r3, [r4, #8]
   28aea:	2b09      	cmp	r3, #9
   28aec:	d00f      	beq.n	28b0e <lp_cu_execute_fsm+0x66>
			LL_ASSERT(0);
   28aee:	4a5a      	ldr	r2, [pc, #360]	; (28c58 <lp_cu_execute_fsm+0x1b0>)
   28af0:	495a      	ldr	r1, [pc, #360]	; (28c5c <lp_cu_execute_fsm+0x1b4>)
   28af2:	485b      	ldr	r0, [pc, #364]	; (28c60 <lp_cu_execute_fsm+0x1b8>)
   28af4:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
   28af8:	f00a fc8e 	bl	33418 <assert_print>
   28afc:	4040      	eors	r0, r0
   28afe:	f380 8811 	msr	BASEPRI, r0
   28b02:	f04f 0003 	mov.w	r0, #3
   28b06:	df02      	svc	2
}
   28b08:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   28b0a:	2d00      	cmp	r5, #0
   28b0c:	d1db      	bne.n	28ac6 <lp_cu_execute_fsm+0x1e>
			lp_cu_send_conn_param_req(conn, ctx, evt, param);
   28b0e:	4621      	mov	r1, r4
   28b10:	4630      	mov	r0, r6
}
   28b12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			lp_cu_send_conn_param_req(conn, ctx, evt, param);
   28b16:	f7ff bd83 	b.w	28620 <lp_cu_send_conn_param_req.constprop.0>
	switch (evt) {
   28b1a:	2d00      	cmp	r5, #0
   28b1c:	d1d3      	bne.n	28ac6 <lp_cu_execute_fsm+0x1e>
	if (llcp_lr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   28b1e:	f7ff f849 	bl	27bb4 <llcp_lr_ispaused>
   28b22:	2800      	cmp	r0, #0
   28b24:	d057      	beq.n	28bd6 <lp_cu_execute_fsm+0x12e>
		ctx->state = LP_CU_STATE_WAIT_TX_REJECT_EXT_IND;
   28b26:	2305      	movs	r3, #5
   28b28:	72a3      	strb	r3, [r4, #10]
}
   28b2a:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   28b2c:	2d00      	cmp	r5, #0
   28b2e:	d1ca      	bne.n	28ac6 <lp_cu_execute_fsm+0x1e>
	uint16_t event_counter = ull_conn_event_counter(conn);
   28b30:	f7fc fb2e 	bl	25190 <ull_conn_event_counter>
	if (is_instant_reached_or_passed(ctx->data.cu.instant, event_counter)) {
   28b34:	8c23      	ldrh	r3, [r4, #32]
   28b36:	1ac0      	subs	r0, r0, r3
   28b38:	0403      	lsls	r3, r0, #16
   28b3a:	d4c4      	bmi.n	28ac6 <lp_cu_execute_fsm+0x1e>
		llcp_rr_set_incompat(conn, INCOMPAT_NO_COLLISION);
   28b3c:	4629      	mov	r1, r5
   28b3e:	4630      	mov	r0, r6
   28b40:	f000 fbd0 	bl	292e4 <llcp_rr_set_incompat>
		cu_update_conn_parameters(conn, ctx);
   28b44:	4621      	mov	r1, r4
   28b46:	4630      	mov	r0, r6
   28b48:	f7ff fcaa 	bl	284a0 <cu_update_conn_parameters>
		if (ctx->proc == PROC_CONN_PARAM_REQ) {
   28b4c:	7a23      	ldrb	r3, [r4, #8]
   28b4e:	2b09      	cmp	r3, #9
   28b50:	d063      	beq.n	28c1a <lp_cu_execute_fsm+0x172>
	return (((ctx->proc == PROC_CONN_PARAM_REQ) && (ctx->data.cu.error != 0U)) ||
   28b52:	7fa3      	ldrb	r3, [r4, #30]
   28b54:	b143      	cbz	r3, 28b68 <lp_cu_execute_fsm+0xc0>
			ctx->data.cu.error = BT_HCI_ERR_SUCCESS;
   28b56:	2300      	movs	r3, #0
   28b58:	7723      	strb	r3, [r4, #28]
	if (!llcp_ntf_alloc_is_available()) {
   28b5a:	f7fd fd85 	bl	26668 <llcp_ntf_alloc_is_available>
   28b5e:	b328      	cbz	r0, 28bac <lp_cu_execute_fsm+0x104>
		cu_ntf(conn, ctx);
   28b60:	4621      	mov	r1, r4
   28b62:	4630      	mov	r0, r6
   28b64:	f7ff fc3e 	bl	283e4 <cu_ntf>
	llcp_lr_complete(conn);
   28b68:	4630      	mov	r0, r6
   28b6a:	f7ff f8b7 	bl	27cdc <llcp_lr_complete>
	if (ctx->proc == PROC_CONN_PARAM_REQ &&
   28b6e:	7a23      	ldrb	r3, [r4, #8]
   28b70:	2b09      	cmp	r3, #9
   28b72:	d025      	beq.n	28bc0 <lp_cu_execute_fsm+0x118>
	ctx->state = LP_CU_STATE_IDLE;
   28b74:	2300      	movs	r3, #0
   28b76:	72a3      	strb	r3, [r4, #10]
}
   28b78:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   28b7a:	2d03      	cmp	r5, #3
   28b7c:	d019      	beq.n	28bb2 <lp_cu_execute_fsm+0x10a>
   28b7e:	2d04      	cmp	r5, #4
   28b80:	d008      	beq.n	28b94 <lp_cu_execute_fsm+0xec>
   28b82:	2d02      	cmp	r5, #2
   28b84:	d19f      	bne.n	28ac6 <lp_cu_execute_fsm+0x1e>
		llcp_pdu_decode_conn_update_ind(ctx, param);
   28b86:	4619      	mov	r1, r3
   28b88:	4620      	mov	r0, r4
   28b8a:	f7ff fb71 	bl	28270 <llcp_pdu_decode_conn_update_ind>
		ctx->state = LP_CU_STATE_WAIT_INSTANT;
   28b8e:	2306      	movs	r3, #6
   28b90:	72a3      	strb	r3, [r4, #10]
}
   28b92:	bd70      	pop	{r4, r5, r6, pc}
   28b94:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
		ctx->data.cu.error = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   28b98:	221a      	movs	r2, #26
   28b9a:	f023 0302 	bic.w	r3, r3, #2
   28b9e:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
   28ba2:	7722      	strb	r2, [r4, #28]
	if (!llcp_ntf_alloc_is_available()) {
   28ba4:	f7fd fd60 	bl	26668 <llcp_ntf_alloc_is_available>
   28ba8:	2800      	cmp	r0, #0
   28baa:	d1d9      	bne.n	28b60 <lp_cu_execute_fsm+0xb8>
		ctx->state = LP_CU_STATE_WAIT_NTF;
   28bac:	2307      	movs	r3, #7
   28bae:	72a3      	strb	r3, [r4, #10]
}
   28bb0:	bd70      	pop	{r4, r5, r6, pc}
		ctx->data.cu.error = pdu->llctrl.reject_ext_ind.error_code;
   28bb2:	795b      	ldrb	r3, [r3, #5]
   28bb4:	7723      	strb	r3, [r4, #28]
	if (!llcp_ntf_alloc_is_available()) {
   28bb6:	f7fd fd57 	bl	26668 <llcp_ntf_alloc_is_available>
   28bba:	2800      	cmp	r0, #0
   28bbc:	d0f6      	beq.n	28bac <lp_cu_execute_fsm+0x104>
   28bbe:	e7cf      	b.n	28b60 <lp_cu_execute_fsm+0xb8>
	if (ctx->proc == PROC_CONN_PARAM_REQ &&
   28bc0:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
   28bc4:	2b00      	cmp	r3, #0
   28bc6:	db32      	blt.n	28c2e <lp_cu_execute_fsm+0x186>
	if (conn == conn_upd_curr) {
   28bc8:	4b26      	ldr	r3, [pc, #152]	; (28c64 <lp_cu_execute_fsm+0x1bc>)
   28bca:	681a      	ldr	r2, [r3, #0]
   28bcc:	4296      	cmp	r6, r2
   28bce:	d1d1      	bne.n	28b74 <lp_cu_execute_fsm+0xcc>
		conn_upd_curr = NULL;
   28bd0:	2200      	movs	r2, #0
   28bd2:	601a      	str	r2, [r3, #0]
   28bd4:	e7ce      	b.n	28b74 <lp_cu_execute_fsm+0xcc>
	if (llcp_lr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   28bd6:	4621      	mov	r1, r4
   28bd8:	4630      	mov	r0, r6
   28bda:	f7fd fd31 	bl	26640 <llcp_tx_alloc_peek>
   28bde:	2800      	cmp	r0, #0
   28be0:	d0a1      	beq.n	28b26 <lp_cu_execute_fsm+0x7e>
		llcp_rr_set_incompat(conn, INCOMPAT_NO_COLLISION);
   28be2:	4629      	mov	r1, r5
   28be4:	4630      	mov	r0, r6
   28be6:	f000 fb7d 	bl	292e4 <llcp_rr_set_incompat>
	tx = llcp_tx_alloc(conn, ctx);
   28bea:	4621      	mov	r1, r4
   28bec:	4630      	mov	r0, r6
   28bee:	f7fd fd2f 	bl	26650 <llcp_tx_alloc>
	LL_ASSERT(tx);
   28bf2:	4605      	mov	r5, r0
   28bf4:	b308      	cbz	r0, 28c3a <lp_cu_execute_fsm+0x192>
		llcp_pdu_encode_reject_ext_ind(pdu, ctx->data.cu.rejected_opcode,
   28bf6:	7f22      	ldrb	r2, [r4, #28]
   28bf8:	7f61      	ldrb	r1, [r4, #29]
   28bfa:	1d28      	adds	r0, r5, #4
   28bfc:	f7ff fa46 	bl	2808c <llcp_pdu_encode_reject_ext_ind>
	ctx->tx_opcode = pdu->llctrl.opcode;
   28c00:	79eb      	ldrb	r3, [r5, #7]
   28c02:	7363      	strb	r3, [r4, #13]
	llcp_tx_enqueue(conn, tx);
   28c04:	4629      	mov	r1, r5
   28c06:	4630      	mov	r0, r6
   28c08:	f7fd fd40 	bl	2668c <llcp_tx_enqueue>
	if (ctx->proc == PROC_CONN_PARAM_REQ) {
   28c0c:	7a23      	ldrb	r3, [r4, #8]
   28c0e:	2b09      	cmp	r3, #9
   28c10:	d1aa      	bne.n	28b68 <lp_cu_execute_fsm+0xc0>
		llcp_lr_prt_restart(conn);
   28c12:	4630      	mov	r0, r6
   28c14:	f7fe ffde 	bl	27bd4 <llcp_lr_prt_restart>
	llcp_lr_complete(conn);
   28c18:	e7a6      	b.n	28b68 <lp_cu_execute_fsm+0xc0>
			llcp_lr_prt_stop(conn);
   28c1a:	4630      	mov	r0, r6
   28c1c:	f7fe ffe4 	bl	27be8 <llcp_lr_prt_stop>
	return (((ctx->proc == PROC_CONN_PARAM_REQ) && (ctx->data.cu.error != 0U)) ||
   28c20:	7a23      	ldrb	r3, [r4, #8]
   28c22:	2b09      	cmp	r3, #9
   28c24:	d195      	bne.n	28b52 <lp_cu_execute_fsm+0xaa>
   28c26:	7f23      	ldrb	r3, [r4, #28]
   28c28:	2b00      	cmp	r3, #0
   28c2a:	d194      	bne.n	28b56 <lp_cu_execute_fsm+0xae>
   28c2c:	e791      	b.n	28b52 <lp_cu_execute_fsm+0xaa>
	    !(conn->lll.role && ull_cp_remote_cpr_pending(conn))) {
   28c2e:	4630      	mov	r0, r6
   28c30:	f7fe f81c 	bl	26c6c <ull_cp_remote_cpr_pending>
   28c34:	2800      	cmp	r0, #0
   28c36:	d0c7      	beq.n	28bc8 <lp_cu_execute_fsm+0x120>
   28c38:	e79c      	b.n	28b74 <lp_cu_execute_fsm+0xcc>
	LL_ASSERT(tx);
   28c3a:	4a07      	ldr	r2, [pc, #28]	; (28c58 <lp_cu_execute_fsm+0x1b0>)
   28c3c:	490a      	ldr	r1, [pc, #40]	; (28c68 <lp_cu_execute_fsm+0x1c0>)
   28c3e:	4808      	ldr	r0, [pc, #32]	; (28c60 <lp_cu_execute_fsm+0x1b8>)
   28c40:	f44f 7387 	mov.w	r3, #270	; 0x10e
   28c44:	f00a fbe8 	bl	33418 <assert_print>
   28c48:	4040      	eors	r0, r0
   28c4a:	f380 8811 	msr	BASEPRI, r0
   28c4e:	f04f 0003 	mov.w	r0, #3
   28c52:	df02      	svc	2
   28c54:	e7cf      	b.n	28bf6 <lp_cu_execute_fsm+0x14e>
   28c56:	bf00      	nop
   28c58:	0003aa44 	.word	0x0003aa44
   28c5c:	0003a004 	.word	0x0003a004
   28c60:	00039f74 	.word	0x00039f74
   28c64:	20002730 	.word	0x20002730
   28c68:	0003a694 	.word	0x0003a694

00028c6c <llcp_lp_cu_rx>:
{
   28c6c:	b510      	push	{r4, lr}
	switch (pdu->llctrl.opcode) {
   28c6e:	f892 c01f 	ldrb.w	ip, [r2, #31]
{
   28c72:	b082      	sub	sp, #8
   28c74:	4604      	mov	r4, r0
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;
   28c76:	f102 031c 	add.w	r3, r2, #28
	switch (pdu->llctrl.opcode) {
   28c7a:	f1bc 0f11 	cmp.w	ip, #17
   28c7e:	d80a      	bhi.n	28c96 <llcp_lp_cu_rx+0x2a>
   28c80:	e8df f00c 	tbb	[pc, ip]
   28c84:	0909092c 	.word	0x0909092c
   28c88:	25090909 	.word	0x25090909
   28c8c:	09090909 	.word	0x09090909
   28c90:	09090909 	.word	0x09090909
   28c94:	171e      	.short	0x171e
		conn->llcp_terminate.reason_final = BT_HCI_ERR_LMP_PDU_NOT_ALLOWED;
   28c96:	2324      	movs	r3, #36	; 0x24
   28c98:	f880 3148 	strb.w	r3, [r0, #328]	; 0x148
   28c9c:	9101      	str	r1, [sp, #4]
	llcp_lr_complete(conn);
   28c9e:	f7ff f81d 	bl	27cdc <llcp_lr_complete>
	if (ctx->proc == PROC_CONN_PARAM_REQ &&
   28ca2:	9901      	ldr	r1, [sp, #4]
   28ca4:	7a0b      	ldrb	r3, [r1, #8]
   28ca6:	2b09      	cmp	r3, #9
   28ca8:	d01f      	beq.n	28cea <llcp_lp_cu_rx+0x7e>
	ctx->state = LP_CU_STATE_IDLE;
   28caa:	2300      	movs	r3, #0
   28cac:	728b      	strb	r3, [r1, #10]
}
   28cae:	b002      	add	sp, #8
   28cb0:	bd10      	pop	{r4, pc}
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_REJECT, pdu);
   28cb2:	2203      	movs	r2, #3
   28cb4:	4620      	mov	r0, r4
}
   28cb6:	b002      	add	sp, #8
   28cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_REJECT, pdu);
   28cbc:	f7ff bef4 	b.w	28aa8 <lp_cu_execute_fsm>
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_CONN_PARAM_RSP, pdu);
   28cc0:	2201      	movs	r2, #1
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_REJECT, pdu);
   28cc2:	4620      	mov	r0, r4
}
   28cc4:	b002      	add	sp, #8
   28cc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_REJECT, pdu);
   28cca:	f7ff beed 	b.w	28aa8 <lp_cu_execute_fsm>
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_UNKNOWN, pdu);
   28cce:	2204      	movs	r2, #4
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_REJECT, pdu);
   28cd0:	4620      	mov	r0, r4
}
   28cd2:	b002      	add	sp, #8
   28cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_REJECT, pdu);
   28cd8:	f7ff bee6 	b.w	28aa8 <lp_cu_execute_fsm>
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_CONN_UPDATE_IND, pdu);
   28cdc:	2202      	movs	r2, #2
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_REJECT, pdu);
   28cde:	4620      	mov	r0, r4
}
   28ce0:	b002      	add	sp, #8
   28ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_REJECT, pdu);
   28ce6:	f7ff bedf 	b.w	28aa8 <lp_cu_execute_fsm>
	if (ctx->proc == PROC_CONN_PARAM_REQ &&
   28cea:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   28cee:	2b00      	cmp	r3, #0
   28cf0:	db06      	blt.n	28d00 <llcp_lp_cu_rx+0x94>
	if (conn == conn_upd_curr) {
   28cf2:	4b07      	ldr	r3, [pc, #28]	; (28d10 <llcp_lp_cu_rx+0xa4>)
   28cf4:	681a      	ldr	r2, [r3, #0]
   28cf6:	4294      	cmp	r4, r2
   28cf8:	d1d7      	bne.n	28caa <llcp_lp_cu_rx+0x3e>
		conn_upd_curr = NULL;
   28cfa:	2200      	movs	r2, #0
   28cfc:	601a      	str	r2, [r3, #0]
   28cfe:	e7d4      	b.n	28caa <llcp_lp_cu_rx+0x3e>
	    !(conn->lll.role && ull_cp_remote_cpr_pending(conn))) {
   28d00:	4620      	mov	r0, r4
   28d02:	9101      	str	r1, [sp, #4]
   28d04:	f7fd ffb2 	bl	26c6c <ull_cp_remote_cpr_pending>
   28d08:	9901      	ldr	r1, [sp, #4]
   28d0a:	2800      	cmp	r0, #0
   28d0c:	d0f1      	beq.n	28cf2 <llcp_lp_cu_rx+0x86>
   28d0e:	e7cc      	b.n	28caa <llcp_lp_cu_rx+0x3e>
   28d10:	20002730 	.word	0x20002730

00028d14 <llcp_lp_cu_init_proc>:
	ctx->state = LP_CU_STATE_IDLE;
   28d14:	2300      	movs	r3, #0
   28d16:	7283      	strb	r3, [r0, #10]
}
   28d18:	4770      	bx	lr
   28d1a:	bf00      	nop

00028d1c <llcp_lp_cu_run>:
{
   28d1c:	4613      	mov	r3, r2
	lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_RUN, param);
   28d1e:	2200      	movs	r2, #0
   28d20:	f7ff bec2 	b.w	28aa8 <lp_cu_execute_fsm>

00028d24 <llcp_rp_cu_rx>:

void llcp_rp_cu_rx(struct ll_conn *conn, struct proc_ctx *ctx, struct node_rx_pdu *rx)
{
   28d24:	b570      	push	{r4, r5, r6, lr}
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;

	switch (pdu->llctrl.opcode) {
   28d26:	7fd5      	ldrb	r5, [r2, #31]
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;
   28d28:	f102 031c 	add.w	r3, r2, #28
	switch (pdu->llctrl.opcode) {
   28d2c:	b135      	cbz	r5, 28d3c <llcp_rp_cu_rx+0x18>
   28d2e:	2d0f      	cmp	r5, #15
   28d30:	d109      	bne.n	28d46 <llcp_rp_cu_rx+0x22>
		/* Invalid PDU received so terminate connection */
		conn->llcp_terminate.reason_final = BT_HCI_ERR_LMP_PDU_NOT_ALLOWED;
		rp_cu_complete(conn, ctx);
		break;
	}
}
   28d32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rp_cu_execute_fsm(conn, ctx, RP_CU_EVT_CONN_PARAM_REQ, pdu);
   28d36:	2201      	movs	r2, #1
   28d38:	f7ff bd82 	b.w	28840 <rp_cu_execute_fsm>
}
   28d3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rp_cu_execute_fsm(conn, ctx, RP_CU_EVT_CONN_UPDATE_IND, pdu);
   28d40:	2202      	movs	r2, #2
   28d42:	f7ff bd7d 	b.w	28840 <rp_cu_execute_fsm>
		conn->llcp_terminate.reason_final = BT_HCI_ERR_LMP_PDU_NOT_ALLOWED;
   28d46:	2324      	movs	r3, #36	; 0x24
   28d48:	460e      	mov	r6, r1
   28d4a:	f880 3148 	strb.w	r3, [r0, #328]	; 0x148
		rp_cu_complete(conn, ctx);
   28d4e:	4604      	mov	r4, r0
	llcp_rr_complete(conn);
   28d50:	f000 fb60 	bl	29414 <llcp_rr_complete>
	if (ctx->proc == PROC_CONN_PARAM_REQ) {
   28d54:	7a33      	ldrb	r3, [r6, #8]
   28d56:	2b09      	cmp	r3, #9
   28d58:	d105      	bne.n	28d66 <llcp_rp_cu_rx+0x42>
	if (conn == conn_upd_curr) {
   28d5a:	4b04      	ldr	r3, [pc, #16]	; (28d6c <llcp_rp_cu_rx+0x48>)
   28d5c:	681a      	ldr	r2, [r3, #0]
   28d5e:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   28d60:	bf04      	itt	eq
   28d62:	2200      	moveq	r2, #0
   28d64:	601a      	streq	r2, [r3, #0]
	ctx->state = RP_CU_STATE_IDLE;
   28d66:	2300      	movs	r3, #0
   28d68:	72b3      	strb	r3, [r6, #10]
}
   28d6a:	bd70      	pop	{r4, r5, r6, pc}
   28d6c:	20002730 	.word	0x20002730

00028d70 <llcp_rp_cu_init_proc>:

void llcp_rp_cu_init_proc(struct proc_ctx *ctx)
   28d70:	2300      	movs	r3, #0
   28d72:	7283      	strb	r3, [r0, #10]
   28d74:	4770      	bx	lr
   28d76:	bf00      	nop

00028d78 <llcp_rp_cu_run>:
{
	ctx->state = RP_CU_STATE_IDLE;
}

void llcp_rp_cu_run(struct ll_conn *conn, struct proc_ctx *ctx, void *param)
{
   28d78:	4613      	mov	r3, r2
	rp_cu_execute_fsm(conn, ctx, RP_CU_EVT_RUN, param);
   28d7a:	2200      	movs	r2, #0
   28d7c:	f7ff bd60 	b.w	28840 <rp_cu_execute_fsm>

00028d80 <llcp_rp_conn_param_req_reply>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
void llcp_rp_conn_param_req_reply(struct ll_conn *conn, struct proc_ctx *ctx)
{
	rp_cu_execute_fsm(conn, ctx, RP_CU_EVT_CONN_PARAM_REQ_REPLY, NULL);
   28d80:	2300      	movs	r3, #0
   28d82:	2203      	movs	r2, #3
   28d84:	f7ff bd5c 	b.w	28840 <rp_cu_execute_fsm>

00028d88 <llcp_rp_conn_param_req_neg_reply>:
}

void llcp_rp_conn_param_req_neg_reply(struct ll_conn *conn, struct proc_ctx *ctx)
{
	rp_cu_execute_fsm(conn, ctx, RP_CU_EVT_CONN_PARAM_REQ_NEG_REPLY, NULL);
   28d88:	2300      	movs	r3, #0
   28d8a:	2204      	movs	r2, #4
   28d8c:	f7ff bd58 	b.w	28840 <rp_cu_execute_fsm>

00028d90 <llcp_rp_chmu_rx>:
		LL_ASSERT(0);
	}
}

void llcp_rp_chmu_rx(struct ll_conn *conn, struct proc_ctx *ctx, struct node_rx_pdu *rx)
{
   28d90:	b570      	push	{r4, r5, r6, lr}
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;

	switch (pdu->llctrl.opcode) {
   28d92:	7fd3      	ldrb	r3, [r2, #31]
   28d94:	2b01      	cmp	r3, #1
{
   28d96:	4605      	mov	r5, r0
   28d98:	460c      	mov	r4, r1
	switch (pdu->llctrl.opcode) {
   28d9a:	d007      	beq.n	28dac <llcp_rp_chmu_rx+0x1c>
		rp_chmu_execute_fsm(conn, ctx, RP_CHMU_EVT_RX_CHAN_MAP_IND, pdu);
		break;
	default:
		/* Invalid behaviour */
		/* Invalid PDU received so terminate connection */
		conn->llcp_terminate.reason_final = BT_HCI_ERR_LMP_PDU_NOT_ALLOWED;
   28d9c:	2324      	movs	r3, #36	; 0x24
   28d9e:	f880 3148 	strb.w	r3, [r0, #328]	; 0x148
		llcp_rr_complete(conn);
   28da2:	f000 fb37 	bl	29414 <llcp_rr_complete>
		ctx->state = RP_CHMU_STATE_IDLE;
   28da6:	2300      	movs	r3, #0
   28da8:	72a3      	strb	r3, [r4, #10]
		break;
	}
}
   28daa:	bd70      	pop	{r4, r5, r6, pc}
	switch (ctx->state) {
   28dac:	7a8b      	ldrb	r3, [r1, #10]
   28dae:	2b01      	cmp	r3, #1
   28db0:	d010      	beq.n	28dd4 <llcp_rp_chmu_rx+0x44>
   28db2:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   28db6:	d0f8      	beq.n	28daa <llcp_rp_chmu_rx+0x1a>
		LL_ASSERT(0);
   28db8:	4a14      	ldr	r2, [pc, #80]	; (28e0c <llcp_rp_chmu_rx+0x7c>)
   28dba:	4915      	ldr	r1, [pc, #84]	; (28e10 <llcp_rp_chmu_rx+0x80>)
   28dbc:	4815      	ldr	r0, [pc, #84]	; (28e14 <llcp_rp_chmu_rx+0x84>)
   28dbe:	f44f 7392 	mov.w	r3, #292	; 0x124
   28dc2:	f00a fb29 	bl	33418 <assert_print>
   28dc6:	4040      	eors	r0, r0
   28dc8:	f380 8811 	msr	BASEPRI, r0
   28dcc:	f04f 0003 	mov.w	r0, #3
   28dd0:	df02      	svc	2
}
   28dd2:	bd70      	pop	{r4, r5, r6, pc}
		llcp_pdu_decode_chan_map_update_ind(ctx, param);
   28dd4:	f102 011c 	add.w	r1, r2, #28
   28dd8:	4620      	mov	r0, r4
   28dda:	f7ff fa63 	bl	282a4 <llcp_pdu_decode_chan_map_update_ind>
		if (is_instant_not_passed(ctx->data.chmu.instant,
   28dde:	4628      	mov	r0, r5
   28de0:	8ba6      	ldrh	r6, [r4, #28]
   28de2:	f7fc f9d5 	bl	25190 <ull_conn_event_counter>
   28de6:	1a36      	subs	r6, r6, r0
   28de8:	b2b6      	uxth	r6, r6
   28dea:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   28dee:	429e      	cmp	r6, r3
   28df0:	d802      	bhi.n	28df8 <llcp_rp_chmu_rx+0x68>
			ctx->state = RP_CHMU_STATE_WAIT_INSTANT;
   28df2:	2302      	movs	r3, #2
   28df4:	72a3      	strb	r3, [r4, #10]
}
   28df6:	bd70      	pop	{r4, r5, r6, pc}
			conn->llcp_terminate.reason_final = BT_HCI_ERR_INSTANT_PASSED;
   28df8:	2328      	movs	r3, #40	; 0x28
   28dfa:	f885 3148 	strb.w	r3, [r5, #328]	; 0x148
			llcp_rr_complete(conn);
   28dfe:	4628      	mov	r0, r5
   28e00:	f000 fb08 	bl	29414 <llcp_rr_complete>
			ctx->state = RP_CHMU_STATE_IDLE;
   28e04:	2300      	movs	r3, #0
   28e06:	72a3      	strb	r3, [r4, #10]
}
   28e08:	bd70      	pop	{r4, r5, r6, pc}
   28e0a:	bf00      	nop
   28e0c:	0003aa90 	.word	0x0003aa90
   28e10:	0003a004 	.word	0x0003a004
   28e14:	00039f74 	.word	0x00039f74

00028e18 <llcp_rp_chmu_init_proc>:

void llcp_rp_chmu_init_proc(struct proc_ctx *ctx)
{
	ctx->state = RP_CHMU_STATE_IDLE;
   28e18:	2300      	movs	r3, #0
   28e1a:	7283      	strb	r3, [r0, #10]
}
   28e1c:	4770      	bx	lr
   28e1e:	bf00      	nop

00028e20 <llcp_rp_chmu_run>:

void llcp_rp_chmu_run(struct ll_conn *conn, struct proc_ctx *ctx, void *param)
{
   28e20:	b538      	push	{r3, r4, r5, lr}
	switch (ctx->state) {
   28e22:	7a8b      	ldrb	r3, [r1, #10]
   28e24:	2b01      	cmp	r3, #1
   28e26:	d010      	beq.n	28e4a <llcp_rp_chmu_run+0x2a>
   28e28:	2b02      	cmp	r3, #2
   28e2a:	460c      	mov	r4, r1
   28e2c:	d00e      	beq.n	28e4c <llcp_rp_chmu_run+0x2c>
   28e2e:	b1fb      	cbz	r3, 28e70 <llcp_rp_chmu_run+0x50>
		LL_ASSERT(0);
   28e30:	4a11      	ldr	r2, [pc, #68]	; (28e78 <llcp_rp_chmu_run+0x58>)
   28e32:	4912      	ldr	r1, [pc, #72]	; (28e7c <llcp_rp_chmu_run+0x5c>)
   28e34:	4812      	ldr	r0, [pc, #72]	; (28e80 <llcp_rp_chmu_run+0x60>)
   28e36:	f44f 7392 	mov.w	r3, #292	; 0x124
   28e3a:	f00a faed 	bl	33418 <assert_print>
   28e3e:	4040      	eors	r0, r0
   28e40:	f380 8811 	msr	BASEPRI, r0
   28e44:	f04f 0003 	mov.w	r0, #3
   28e48:	df02      	svc	2
	rp_chmu_execute_fsm(conn, ctx, RP_CHMU_EVT_RUN, param);
}
   28e4a:	bd38      	pop	{r3, r4, r5, pc}
	uint16_t event_counter = ull_conn_event_counter(conn);
   28e4c:	4605      	mov	r5, r0
   28e4e:	f7fc f99f 	bl	25190 <ull_conn_event_counter>
	if (((event_counter - ctx->data.chmu.instant) & 0xFFFF) <= 0x7FFF) {
   28e52:	8ba3      	ldrh	r3, [r4, #28]
   28e54:	1ac0      	subs	r0, r0, r3
   28e56:	0403      	lsls	r3, r0, #16
   28e58:	d4f7      	bmi.n	28e4a <llcp_rp_chmu_run+0x2a>
	ull_conn_chan_map_set(conn, ctx->data.chmu.chm);
   28e5a:	f104 011e 	add.w	r1, r4, #30
   28e5e:	4628      	mov	r0, r5
   28e60:	f7fc f99e 	bl	251a0 <ull_conn_chan_map_set>
	llcp_rr_complete(conn);
   28e64:	4628      	mov	r0, r5
   28e66:	f000 fad5 	bl	29414 <llcp_rr_complete>
	ctx->state = RP_CHMU_STATE_IDLE;
   28e6a:	2300      	movs	r3, #0
   28e6c:	72a3      	strb	r3, [r4, #10]
}
   28e6e:	bd38      	pop	{r3, r4, r5, pc}
		ctx->state = RP_CHMU_STATE_WAIT_RX_CHAN_MAP_IND;
   28e70:	2301      	movs	r3, #1
   28e72:	728b      	strb	r3, [r1, #10]
}
   28e74:	bd38      	pop	{r3, r4, r5, pc}
   28e76:	bf00      	nop
   28e78:	0003aa90 	.word	0x0003aa90
   28e7c:	0003a004 	.word	0x0003a004
   28e80:	00039f74 	.word	0x00039f74

00028e84 <rr_act_disconnect>:
{
	/* Empty on purpose */
}

static void rr_act_disconnect(struct ll_conn *conn)
{
   28e84:	b510      	push	{r4, lr}
   28e86:	4604      	mov	r4, r0
   28e88:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
Z_GENLIST_GET(slist, snode)
   28e8c:	b170      	cbz	r0, 28eac <rr_act_disconnect+0x28>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28e8e:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
	return node->next;
   28e92:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   28e94:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28e98:	4290      	cmp	r0, r2
	list->tail = node;
   28e9a:	bf08      	it	eq
   28e9c:	f8c4 30fc 	streq.w	r3, [r4, #252]	; 0xfc
	 * we may have been disconnected in the
	 * middle of a control procedure, in  which
	 * case we need to release all contexts
	 */
	while (ctx != NULL) {
		llcp_proc_ctx_release(ctx);
   28ea0:	f7fd fbac 	bl	265fc <llcp_proc_ctx_release>
	return list->head;
   28ea4:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
Z_GENLIST_GET(slist, snode)
   28ea8:	2800      	cmp	r0, #0
   28eaa:	d1f0      	bne.n	28e8e <rr_act_disconnect+0xa>
		ctx = rr_dequeue(conn);
	}
}
   28eac:	bd10      	pop	{r4, pc}
   28eae:	bf00      	nop

00028eb0 <rr_check_done.part.0>:
static void rr_check_done(struct ll_conn *conn, struct proc_ctx *ctx)
   28eb0:	b538      	push	{r3, r4, r5, lr}
		LL_ASSERT(ctx_header == ctx);
   28eb2:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   28eb6:	428b      	cmp	r3, r1
static void rr_check_done(struct ll_conn *conn, struct proc_ctx *ctx)
   28eb8:	4604      	mov	r4, r0
   28eba:	460d      	mov	r5, r1
		LL_ASSERT(ctx_header == ctx);
   28ebc:	d01c      	beq.n	28ef8 <rr_check_done.part.0+0x48>
   28ebe:	4a0f      	ldr	r2, [pc, #60]	; (28efc <rr_check_done.part.0+0x4c>)
   28ec0:	490f      	ldr	r1, [pc, #60]	; (28f00 <rr_check_done.part.0+0x50>)
   28ec2:	4810      	ldr	r0, [pc, #64]	; (28f04 <rr_check_done.part.0+0x54>)
   28ec4:	2374      	movs	r3, #116	; 0x74
   28ec6:	f00a faa7 	bl	33418 <assert_print>
   28eca:	4040      	eors	r0, r0
   28ecc:	f380 8811 	msr	BASEPRI, r0
   28ed0:	f04f 0003 	mov.w	r0, #3
   28ed4:	df02      	svc	2
	return list->head;
   28ed6:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
Z_GENLIST_GET(slist, snode)
   28eda:	b143      	cbz	r3, 28eee <rr_check_done.part.0+0x3e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28edc:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
	return node->next;
   28ee0:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   28ee2:	f8c4 20f8 	str.w	r2, [r4, #248]	; 0xf8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28ee6:	4299      	cmp	r1, r3
	list->tail = node;
   28ee8:	bf08      	it	eq
   28eea:	f8c4 20fc 	streq.w	r2, [r4, #252]	; 0xfc
		llcp_proc_ctx_release(ctx);
   28eee:	4628      	mov	r0, r5
}
   28ef0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		llcp_proc_ctx_release(ctx);
   28ef4:	f7fd bb82 	b.w	265fc <llcp_proc_ctx_release>
   28ef8:	460b      	mov	r3, r1
   28efa:	e7ee      	b.n	28eda <rr_check_done.part.0+0x2a>
   28efc:	0003aad8 	.word	0x0003aad8
   28f00:	0003aa30 	.word	0x0003aa30
   28f04:	00039f74 	.word	0x00039f74

00028f08 <rr_act_run>:
{
   28f08:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   28f0a:	f8d0 50f8 	ldr.w	r5, [r0, #248]	; 0xf8
	switch (ctx->proc) {
   28f0e:	7a2b      	ldrb	r3, [r5, #8]
   28f10:	3b01      	subs	r3, #1
{
   28f12:	4604      	mov	r4, r0
	switch (ctx->proc) {
   28f14:	2b0b      	cmp	r3, #11
   28f16:	d828      	bhi.n	28f6a <rr_act_run+0x62>
   28f18:	e8df f003 	tbb	[pc, r3]
   28f1c:	06060606 	.word	0x06060606
   28f20:	131d1818 	.word	0x131d1818
   28f24:	06220613 	.word	0x06220613
		llcp_rp_comm_run(conn, ctx, NULL);
   28f28:	2200      	movs	r2, #0
   28f2a:	4629      	mov	r1, r5
   28f2c:	f7fe fc96 	bl	2785c <llcp_rp_comm_run>
	if (ctx->done) {
   28f30:	69ab      	ldr	r3, [r5, #24]
   28f32:	b12b      	cbz	r3, 28f40 <rr_act_run+0x38>
   28f34:	4629      	mov	r1, r5
   28f36:	4620      	mov	r0, r4
}
   28f38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   28f3c:	f7ff bfb8 	b.w	28eb0 <rr_check_done.part.0>
   28f40:	bd38      	pop	{r3, r4, r5, pc}
		llcp_rp_cu_run(conn, ctx, NULL);
   28f42:	2200      	movs	r2, #0
   28f44:	4629      	mov	r1, r5
   28f46:	f7ff ff17 	bl	28d78 <llcp_rp_cu_run>
		break;
   28f4a:	e7f1      	b.n	28f30 <rr_act_run+0x28>
		llcp_rp_enc_run(conn, ctx, NULL);
   28f4c:	2200      	movs	r2, #0
   28f4e:	4629      	mov	r1, r5
   28f50:	f7fd fa5a 	bl	26408 <llcp_rp_enc_run>
		break;
   28f54:	e7ec      	b.n	28f30 <rr_act_run+0x28>
		llcp_rp_pu_run(conn, ctx, NULL);
   28f56:	2200      	movs	r2, #0
   28f58:	4629      	mov	r1, r5
   28f5a:	f7fc ff83 	bl	25e64 <llcp_rp_pu_run>
		break;
   28f5e:	e7e7      	b.n	28f30 <rr_act_run+0x28>
		llcp_rp_chmu_run(conn, ctx, NULL);
   28f60:	2200      	movs	r2, #0
   28f62:	4629      	mov	r1, r5
   28f64:	f7ff ff5c 	bl	28e20 <llcp_rp_chmu_run>
		break;
   28f68:	e7e2      	b.n	28f30 <rr_act_run+0x28>
		LL_ASSERT(0);
   28f6a:	4a07      	ldr	r2, [pc, #28]	; (28f88 <rr_act_run+0x80>)
   28f6c:	4907      	ldr	r1, [pc, #28]	; (28f8c <rr_act_run+0x84>)
   28f6e:	4808      	ldr	r0, [pc, #32]	; (28f90 <rr_act_run+0x88>)
   28f70:	f240 13a1 	movw	r3, #417	; 0x1a1
   28f74:	f00a fa50 	bl	33418 <assert_print>
   28f78:	4040      	eors	r0, r0
   28f7a:	f380 8811 	msr	BASEPRI, r0
   28f7e:	f04f 0003 	mov.w	r0, #3
   28f82:	df02      	svc	2
		break;
   28f84:	e7d4      	b.n	28f30 <rr_act_run+0x28>
   28f86:	bf00      	nop
   28f88:	0003aad8 	.word	0x0003aad8
   28f8c:	0003a004 	.word	0x0003a004
   28f90:	00039f74 	.word	0x00039f74

00028f94 <rr_st_active.constprop.0>:
	rr_act_unsupported(conn);
}

static void rr_st_active(struct ll_conn *conn, uint8_t evt, void *param)
{
	switch (evt) {
   28f94:	2902      	cmp	r1, #2
static void rr_st_active(struct ll_conn *conn, uint8_t evt, void *param)
   28f96:	b538      	push	{r3, r4, r5, lr}
   28f98:	4605      	mov	r5, r0
	switch (evt) {
   28f9a:	d012      	beq.n	28fc2 <rr_st_active.constprop.0+0x2e>
   28f9c:	2904      	cmp	r1, #4
   28f9e:	460c      	mov	r4, r1
   28fa0:	d00a      	beq.n	28fb8 <rr_st_active.constprop.0+0x24>
   28fa2:	2901      	cmp	r1, #1
   28fa4:	d000      	beq.n	28fa8 <rr_st_active.constprop.0+0x14>
		break;
	default:
		/* Ignore other evts */
		break;
	}
}
   28fa6:	bd38      	pop	{r3, r4, r5, pc}
		if (llcp_rr_peek(conn)) {
   28fa8:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   28fac:	2b00      	cmp	r3, #0
   28fae:	d0fa      	beq.n	28fa6 <rr_st_active.constprop.0+0x12>
}
   28fb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			rr_act_run(conn);
   28fb4:	f7ff bfa8 	b.w	28f08 <rr_act_run>
		rr_act_disconnect(conn);
   28fb8:	f7ff ff64 	bl	28e84 <rr_act_disconnect>
	conn->llcp.remote.state = state;
   28fbc:	f885 4100 	strb.w	r4, [r5, #256]	; 0x100
}
   28fc0:	bd38      	pop	{r3, r4, r5, pc}
   28fc2:	f8d0 40f8 	ldr.w	r4, [r0, #248]	; 0xf8
	conn->llcp.remote.collision = collision;
   28fc6:	2300      	movs	r3, #0
   28fc8:	f880 3105 	strb.w	r3, [r0, #261]	; 0x105
	LL_ASSERT(ctx != NULL);
   28fcc:	b13c      	cbz	r4, 28fde <rr_st_active.constprop.0+0x4a>
	conn->llcp.remote.prt_expire = 0U;
   28fce:	2300      	movs	r3, #0
	ctx->done = 1U;
   28fd0:	2201      	movs	r2, #1
	conn->llcp.remote.prt_expire = 0U;
   28fd2:	f8a5 3102 	strh.w	r3, [r5, #258]	; 0x102
	ctx->done = 1U;
   28fd6:	61a2      	str	r2, [r4, #24]
	conn->llcp.remote.state = state;
   28fd8:	f885 3100 	strb.w	r3, [r5, #256]	; 0x100
}
   28fdc:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(ctx != NULL);
   28fde:	4a07      	ldr	r2, [pc, #28]	; (28ffc <rr_st_active.constprop.0+0x68>)
   28fe0:	4907      	ldr	r1, [pc, #28]	; (29000 <rr_st_active.constprop.0+0x6c>)
   28fe2:	4808      	ldr	r0, [pc, #32]	; (29004 <rr_st_active.constprop.0+0x70>)
   28fe4:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
   28fe8:	f00a fa16 	bl	33418 <assert_print>
   28fec:	4040      	eors	r0, r0
   28fee:	f380 8811 	msr	BASEPRI, r0
   28ff2:	f04f 0003 	mov.w	r0, #3
   28ff6:	df02      	svc	2
   28ff8:	e7e9      	b.n	28fce <rr_st_active.constprop.0+0x3a>
   28ffa:	bf00      	nop
   28ffc:	0003aad8 	.word	0x0003aad8
   29000:	0003aa1c 	.word	0x0003aa1c
   29004:	00039f74 	.word	0x00039f74

00029008 <rr_act_unsupported>:
{
   29008:	b570      	push	{r4, r5, r6, lr}
   2900a:	f8d0 50f8 	ldr.w	r5, [r0, #248]	; 0xf8
   2900e:	4604      	mov	r4, r0
	LL_ASSERT(ctx != NULL);
   29010:	b31d      	cbz	r5, 2905a <rr_act_unsupported+0x52>
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   29012:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   29016:	2b01      	cmp	r3, #1
   29018:	d103      	bne.n	29022 <rr_act_unsupported+0x1a>
}
   2901a:	2302      	movs	r3, #2
	conn->llcp.remote.state = state;
   2901c:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
}
   29020:	bd70      	pop	{r4, r5, r6, pc}
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   29022:	4629      	mov	r1, r5
   29024:	4620      	mov	r0, r4
   29026:	f7fd fb0b 	bl	26640 <llcp_tx_alloc_peek>
   2902a:	2800      	cmp	r0, #0
   2902c:	d0f5      	beq.n	2901a <rr_act_unsupported+0x12>
	tx = llcp_tx_alloc(conn, ctx);
   2902e:	4629      	mov	r1, r5
   29030:	4620      	mov	r0, r4
   29032:	f7fd fb0d 	bl	26650 <llcp_tx_alloc>
	LL_ASSERT(tx);
   29036:	4606      	mov	r6, r0
   29038:	b1e8      	cbz	r0, 29076 <rr_act_unsupported+0x6e>
		llcp_pdu_encode_unknown_rsp(ctx, pdu);
   2903a:	1d31      	adds	r1, r6, #4
   2903c:	4628      	mov	r0, r5
   2903e:	f7fe fec5 	bl	27dcc <llcp_pdu_encode_unknown_rsp>
	ctx->tx_opcode = pdu->llctrl.opcode;
   29042:	79f3      	ldrb	r3, [r6, #7]
   29044:	736b      	strb	r3, [r5, #13]
	llcp_tx_enqueue(conn, tx);
   29046:	4631      	mov	r1, r6
   29048:	4620      	mov	r0, r4
   2904a:	f7fd fb1f 	bl	2668c <llcp_tx_enqueue>
		ctx->done = 1U;
   2904e:	2301      	movs	r3, #1
   29050:	61ab      	str	r3, [r5, #24]
}
   29052:	2300      	movs	r3, #0
	conn->llcp.remote.state = state;
   29054:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
}
   29058:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(ctx != NULL);
   2905a:	4a0e      	ldr	r2, [pc, #56]	; (29094 <rr_act_unsupported+0x8c>)
   2905c:	490e      	ldr	r1, [pc, #56]	; (29098 <rr_act_unsupported+0x90>)
   2905e:	480f      	ldr	r0, [pc, #60]	; (2909c <rr_act_unsupported+0x94>)
   29060:	f240 13e9 	movw	r3, #489	; 0x1e9
   29064:	f00a f9d8 	bl	33418 <assert_print>
   29068:	4040      	eors	r0, r0
   2906a:	f380 8811 	msr	BASEPRI, r0
   2906e:	f04f 0003 	mov.w	r0, #3
   29072:	df02      	svc	2
   29074:	e7cd      	b.n	29012 <rr_act_unsupported+0xa>
	LL_ASSERT(tx);
   29076:	4a07      	ldr	r2, [pc, #28]	; (29094 <rr_act_unsupported+0x8c>)
   29078:	4909      	ldr	r1, [pc, #36]	; (290a0 <rr_act_unsupported+0x98>)
   2907a:	4808      	ldr	r0, [pc, #32]	; (2909c <rr_act_unsupported+0x94>)
   2907c:	f240 13b1 	movw	r3, #433	; 0x1b1
   29080:	f00a f9ca 	bl	33418 <assert_print>
   29084:	4040      	eors	r0, r0
   29086:	f380 8811 	msr	BASEPRI, r0
   2908a:	f04f 0003 	mov.w	r0, #3
   2908e:	df02      	svc	2
   29090:	e7d3      	b.n	2903a <rr_act_unsupported+0x32>
   29092:	bf00      	nop
   29094:	0003aad8 	.word	0x0003aad8
   29098:	0003aa1c 	.word	0x0003aa1c
   2909c:	00039f74 	.word	0x00039f74
   290a0:	0003a694 	.word	0x0003a694

000290a4 <rr_act_reject>:
{
   290a4:	b570      	push	{r4, r5, r6, lr}
   290a6:	f8d0 50f8 	ldr.w	r5, [r0, #248]	; 0xf8
   290aa:	4604      	mov	r4, r0
	LL_ASSERT(ctx != NULL);
   290ac:	b3ad      	cbz	r5, 2911a <rr_act_reject+0x76>
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   290ae:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   290b2:	2b01      	cmp	r3, #1
   290b4:	d103      	bne.n	290be <rr_act_reject+0x1a>
}
   290b6:	2301      	movs	r3, #1
	conn->llcp.remote.state = state;
   290b8:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
}
   290bc:	bd70      	pop	{r4, r5, r6, pc}
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   290be:	4629      	mov	r1, r5
   290c0:	4620      	mov	r0, r4
   290c2:	f7fd fabd 	bl	26640 <llcp_tx_alloc_peek>
   290c6:	2800      	cmp	r0, #0
   290c8:	d0f5      	beq.n	290b6 <rr_act_reject+0x12>
	tx = llcp_tx_alloc(conn, ctx);
   290ca:	4629      	mov	r1, r5
   290cc:	4620      	mov	r0, r4
   290ce:	f7fd fabf 	bl	26650 <llcp_tx_alloc>
	LL_ASSERT(tx);
   290d2:	4606      	mov	r6, r0
   290d4:	2800      	cmp	r0, #0
   290d6:	d03b      	beq.n	29150 <rr_act_reject+0xac>
		ctx_local = llcp_lr_peek(conn);
   290d8:	4620      	mov	r0, r4
   290da:	f7fe fc9d 	bl	27a18 <llcp_lr_peek>
		if (ctx_local->proc == ctx->proc ||
   290de:	7a2a      	ldrb	r2, [r5, #8]
   290e0:	7a03      	ldrb	r3, [r0, #8]
   290e2:	4293      	cmp	r3, r2
	pdu = (struct pdu_data *)tx->pdu;
   290e4:	f106 0004 	add.w	r0, r6, #4
		if (ctx_local->proc == ctx->proc ||
   290e8:	d025      	beq.n	29136 <rr_act_reject+0x92>
   290ea:	2b08      	cmp	r3, #8
   290ec:	d025      	beq.n	2913a <rr_act_reject+0x96>
			reject_code = BT_HCI_ERR_DIFF_TRANS_COLLISION;
   290ee:	212a      	movs	r1, #42	; 0x2a
		if (conn->llcp.fex.valid && feature_ext_rej_ind(conn)) {
   290f0:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
   290f4:	b11b      	cbz	r3, 290fe <rr_act_reject+0x5a>
	return (conn->llcp.fex.features_used & LL_FEAT_BIT_EXT_REJ_IND) != 0;
   290f6:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
   290fa:	075b      	lsls	r3, r3, #29
   290fc:	d422      	bmi.n	29144 <rr_act_reject+0xa0>
			llcp_pdu_encode_reject_ind(pdu, reject_code);
   290fe:	f7fe ffb9 	bl	28074 <llcp_pdu_encode_reject_ind>
	ctx->tx_opcode = pdu->llctrl.opcode;
   29102:	79f3      	ldrb	r3, [r6, #7]
   29104:	736b      	strb	r3, [r5, #13]
	llcp_tx_enqueue(conn, tx);
   29106:	4631      	mov	r1, r6
   29108:	4620      	mov	r0, r4
   2910a:	f7fd fabf 	bl	2668c <llcp_tx_enqueue>
		ctx->done = 1U;
   2910e:	2301      	movs	r3, #1
   29110:	61ab      	str	r3, [r5, #24]
}
   29112:	2300      	movs	r3, #0
	conn->llcp.remote.state = state;
   29114:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
}
   29118:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(ctx != NULL);
   2911a:	4a14      	ldr	r2, [pc, #80]	; (2916c <rr_act_reject+0xc8>)
   2911c:	4914      	ldr	r1, [pc, #80]	; (29170 <rr_act_reject+0xcc>)
   2911e:	4815      	ldr	r0, [pc, #84]	; (29174 <rr_act_reject+0xd0>)
   29120:	f240 13d9 	movw	r3, #473	; 0x1d9
   29124:	f00a f978 	bl	33418 <assert_print>
   29128:	4040      	eors	r0, r0
   2912a:	f380 8811 	msr	BASEPRI, r0
   2912e:	f04f 0003 	mov.w	r0, #3
   29132:	df02      	svc	2
   29134:	e7bb      	b.n	290ae <rr_act_reject+0xa>
			reject_code = BT_HCI_ERR_LL_PROC_COLLISION;
   29136:	2123      	movs	r1, #35	; 0x23
   29138:	e7da      	b.n	290f0 <rr_act_reject+0x4c>
   2913a:	2a09      	cmp	r2, #9
   2913c:	bf14      	ite	ne
   2913e:	212a      	movne	r1, #42	; 0x2a
   29140:	2123      	moveq	r1, #35	; 0x23
   29142:	e7d5      	b.n	290f0 <rr_act_reject+0x4c>
			llcp_pdu_encode_reject_ext_ind(pdu, conn->llcp.remote.reject_opcode,
   29144:	460a      	mov	r2, r1
   29146:	f894 1107 	ldrb.w	r1, [r4, #263]	; 0x107
   2914a:	f7fe ff9f 	bl	2808c <llcp_pdu_encode_reject_ext_ind>
   2914e:	e7d8      	b.n	29102 <rr_act_reject+0x5e>
	LL_ASSERT(tx);
   29150:	4a06      	ldr	r2, [pc, #24]	; (2916c <rr_act_reject+0xc8>)
   29152:	4909      	ldr	r1, [pc, #36]	; (29178 <rr_act_reject+0xd4>)
   29154:	4807      	ldr	r0, [pc, #28]	; (29174 <rr_act_reject+0xd0>)
   29156:	f240 13b1 	movw	r3, #433	; 0x1b1
   2915a:	f00a f95d 	bl	33418 <assert_print>
   2915e:	4040      	eors	r0, r0
   29160:	f380 8811 	msr	BASEPRI, r0
   29164:	f04f 0003 	mov.w	r0, #3
   29168:	df02      	svc	2
   2916a:	e7b5      	b.n	290d8 <rr_act_reject+0x34>
   2916c:	0003aad8 	.word	0x0003aad8
   29170:	0003aa1c 	.word	0x0003aa1c
   29174:	00039f74 	.word	0x00039f74
   29178:	0003a694 	.word	0x0003a694

0002917c <rr_execute_fsm>:
		break;
	}
}

static void rr_execute_fsm(struct ll_conn *conn, uint8_t evt, void *param)
{
   2917c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (conn->llcp.remote.state) {
   2917e:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
{
   29182:	4604      	mov	r4, r0
   29184:	460e      	mov	r6, r1
   29186:	4615      	mov	r5, r2
	switch (conn->llcp.remote.state) {
   29188:	2b05      	cmp	r3, #5
   2918a:	f200 8094 	bhi.w	292b6 <rr_execute_fsm+0x13a>
   2918e:	e8df f003 	tbb	[pc, r3]
   29192:	160e      	.short	0x160e
   29194:	030b0307 	.word	0x030b0307
		break;
	default:
		/* Unknown state */
		LL_ASSERT(0);
	}
}
   29198:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		rr_st_active(conn, evt, param);
   2919c:	f7ff befa 	b.w	28f94 <rr_st_active.constprop.0>
}
   291a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	rr_act_unsupported(conn);
   291a4:	f7ff bf30 	b.w	29008 <rr_act_unsupported>
	switch (evt) {
   291a8:	2903      	cmp	r1, #3
   291aa:	d00c      	beq.n	291c6 <rr_execute_fsm+0x4a>
}
   291ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (evt) {
   291ae:	b171      	cbz	r1, 291ce <rr_execute_fsm+0x52>
   291b0:	2904      	cmp	r1, #4
   291b2:	d1fb      	bne.n	291ac <rr_execute_fsm+0x30>
		rr_act_disconnect(conn);
   291b4:	f7ff fe66 	bl	28e84 <rr_act_disconnect>
	conn->llcp.remote.state = state;
   291b8:	f884 6100 	strb.w	r6, [r4, #256]	; 0x100
}
   291bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   291be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	rr_act_reject(conn);
   291c2:	f7ff bf6f 	b.w	290a4 <rr_act_reject>
	conn->llcp.remote.state = state;
   291c6:	2300      	movs	r3, #0
   291c8:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
}
   291cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   291ce:	f8d0 70f8 	ldr.w	r7, [r0, #248]	; 0xf8
		if (ctx) {
   291d2:	2f00      	cmp	r7, #0
   291d4:	d0ea      	beq.n	291ac <rr_execute_fsm+0x30>
	return conn->llcp.remote.incompat;
   291d6:	7a3b      	ldrb	r3, [r7, #8]
   291d8:	f890 c106 	ldrb.w	ip, [r0, #262]	; 0x106
			const bool periph = !!(conn->lll.role == BT_HCI_ROLE_PERIPHERAL);
   291dc:	f890 e039 	ldrb.w	lr, [r0, #57]	; 0x39
	switch (ctx->proc) {
   291e0:	2b10      	cmp	r3, #16
   291e2:	d811      	bhi.n	29208 <rr_execute_fsm+0x8c>
   291e4:	4a3b      	ldr	r2, [pc, #236]	; (292d4 <rr_execute_fsm+0x158>)
   291e6:	2101      	movs	r1, #1
   291e8:	fa01 f003 	lsl.w	r0, r1, r3
   291ec:	4002      	ands	r2, r0
   291ee:	b342      	cbz	r2, 29242 <rr_execute_fsm+0xc6>
			if (ctx->proc == PROC_TERMINATE) {
   291f0:	2b0a      	cmp	r3, #10
   291f2:	d01f      	beq.n	29234 <rr_execute_fsm+0xb8>
			} else if (ctx->proc == PROC_UNKNOWN) {
   291f4:	b1b3      	cbz	r3, 29224 <rr_execute_fsm+0xa8>
	conn->llcp.remote.collision = collision;
   291f6:	f884 6105 	strb.w	r6, [r4, #261]	; 0x105
				rr_act_run(conn);
   291fa:	4620      	mov	r0, r4
   291fc:	f7ff fe84 	bl	28f08 <rr_act_run>
	conn->llcp.remote.state = state;
   29200:	2303      	movs	r3, #3
   29202:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
}
   29206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LL_ASSERT(0);
   29208:	4a33      	ldr	r2, [pc, #204]	; (292d8 <rr_execute_fsm+0x15c>)
   2920a:	4934      	ldr	r1, [pc, #208]	; (292dc <rr_execute_fsm+0x160>)
   2920c:	4834      	ldr	r0, [pc, #208]	; (292e0 <rr_execute_fsm+0x164>)
   2920e:	2367      	movs	r3, #103	; 0x67
   29210:	f00a f902 	bl	33418 <assert_print>
   29214:	4040      	eors	r0, r0
   29216:	f380 8811 	msr	BASEPRI, r0
   2921a:	f04f 0003 	mov.w	r0, #3
   2921e:	df02      	svc	2
			if (ctx->proc == PROC_TERMINATE) {
   29220:	7a3b      	ldrb	r3, [r7, #8]
   29222:	e7e5      	b.n	291f0 <rr_execute_fsm+0x74>
				ctx->unknown_response.type = pdu->llctrl.opcode;
   29224:	7feb      	ldrb	r3, [r5, #31]
   29226:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
				rr_act_unsupported(conn);
   2922a:	4620      	mov	r0, r4
}
   2922c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				rr_act_unsupported(conn);
   29230:	f7ff beea 	b.w	29008 <rr_act_unsupported>
				rr_act_run(conn);
   29234:	4620      	mov	r0, r4
   29236:	f7ff fe67 	bl	28f08 <rr_act_run>
	conn->llcp.remote.state = state;
   2923a:	2305      	movs	r3, #5
   2923c:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
}
   29240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (ctx->proc) {
   29242:	f410 6f38 	tst.w	r0, #2944	; 0xb80
   29246:	d0df      	beq.n	29208 <rr_execute_fsm+0x8c>
			if (ctx->proc == PROC_TERMINATE) {
   29248:	2b0a      	cmp	r3, #10
   2924a:	d0f3      	beq.n	29234 <rr_execute_fsm+0xb8>
			} else if (ctx->proc == PROC_UNKNOWN) {
   2924c:	2b00      	cmp	r3, #0
   2924e:	d0e9      	beq.n	29224 <rr_execute_fsm+0xa8>
			} else if (!with_instant || incompat == INCOMPAT_NO_COLLISION) {
   29250:	f1bc 0f00 	cmp.w	ip, #0
   29254:	d101      	bne.n	2925a <rr_execute_fsm+0xde>
   29256:	460e      	mov	r6, r1
   29258:	e7cd      	b.n	291f6 <rr_execute_fsm+0x7a>
			} else if (periph && incompat == INCOMPAT_RESOLVABLE) {
   2925a:	f01e 0f80 	tst.w	lr, #128	; 0x80
   2925e:	d112      	bne.n	29286 <rr_execute_fsm+0x10a>
			} else if (central && incompat == INCOMPAT_RESOLVABLE) {
   29260:	f1bc 0f01 	cmp.w	ip, #1
   29264:	d019      	beq.n	2929a <rr_execute_fsm+0x11e>
			} else if (incompat == INCOMPAT_RESERVED) {
   29266:	f1bc 0f02 	cmp.w	ip, #2
   2926a:	d19f      	bne.n	291ac <rr_execute_fsm+0x30>
				ctx_local = llcp_lr_peek(conn);
   2926c:	4620      	mov	r0, r4
   2926e:	f7fe fbd3 	bl	27a18 <llcp_lr_peek>
				if (ctx_local->proc == ctx->proc ||
   29272:	7a3b      	ldrb	r3, [r7, #8]
   29274:	7a02      	ldrb	r2, [r0, #8]
   29276:	429a      	cmp	r2, r3
   29278:	d019      	beq.n	292ae <rr_execute_fsm+0x132>
   2927a:	2a08      	cmp	r2, #8
   2927c:	d015      	beq.n	292aa <rr_execute_fsm+0x12e>
					conn->llcp_terminate.reason_final =
   2927e:	232a      	movs	r3, #42	; 0x2a
   29280:	f884 3148 	strb.w	r3, [r4, #328]	; 0x148
}
   29284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			} else if (periph && incompat == INCOMPAT_RESOLVABLE) {
   29286:	f1bc 0f01 	cmp.w	ip, #1
   2928a:	d1ec      	bne.n	29266 <rr_execute_fsm+0xea>
				rr_act_run(conn);
   2928c:	4620      	mov	r0, r4
   2928e:	f7ff fe3b 	bl	28f08 <rr_act_run>
	conn->llcp.remote.state = state;
   29292:	2303      	movs	r3, #3
   29294:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
}
   29298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				conn->llcp.remote.reject_opcode = pdu->llctrl.opcode;
   2929a:	7feb      	ldrb	r3, [r5, #31]
   2929c:	f884 3107 	strb.w	r3, [r4, #263]	; 0x107
				rr_act_reject(conn);
   292a0:	4620      	mov	r0, r4
}
   292a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				rr_act_reject(conn);
   292a6:	f7ff befd 	b.w	290a4 <rr_act_reject>
				    (ctx_local->proc == PROC_CONN_UPDATE &&
   292aa:	2b09      	cmp	r3, #9
   292ac:	d1e7      	bne.n	2927e <rr_execute_fsm+0x102>
					conn->llcp_terminate.reason_final =
   292ae:	2323      	movs	r3, #35	; 0x23
   292b0:	f884 3148 	strb.w	r3, [r4, #328]	; 0x148
}
   292b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LL_ASSERT(0);
   292b6:	4a08      	ldr	r2, [pc, #32]	; (292d8 <rr_execute_fsm+0x15c>)
   292b8:	4908      	ldr	r1, [pc, #32]	; (292dc <rr_execute_fsm+0x160>)
   292ba:	4809      	ldr	r0, [pc, #36]	; (292e0 <rr_execute_fsm+0x164>)
   292bc:	f44f 7336 	mov.w	r3, #728	; 0x2d8
   292c0:	f00a f8aa 	bl	33418 <assert_print>
   292c4:	4040      	eors	r0, r0
   292c6:	f380 8811 	msr	BASEPRI, r0
   292ca:	f04f 0003 	mov.w	r0, #3
   292ce:	df02      	svc	2
}
   292d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   292d2:	bf00      	nop
   292d4:	0001f47f 	.word	0x0001f47f
   292d8:	0003aad8 	.word	0x0003aad8
   292dc:	0003a004 	.word	0x0003a004
   292e0:	00039f74 	.word	0x00039f74

000292e4 <llcp_rr_set_incompat>:
	conn->llcp.remote.incompat = incompat;
   292e4:	f880 1106 	strb.w	r1, [r0, #262]	; 0x106
}
   292e8:	4770      	bx	lr
   292ea:	bf00      	nop

000292ec <llcp_rr_set_paused_cmd>:
}
   292ec:	4770      	bx	lr
   292ee:	bf00      	nop

000292f0 <llcp_rr_get_paused_cmd>:
}
   292f0:	2000      	movs	r0, #0
   292f2:	4770      	bx	lr

000292f4 <llcp_rr_get_collision>:
	return conn->llcp.remote.collision;
   292f4:	f890 0105 	ldrb.w	r0, [r0, #261]	; 0x105
}
   292f8:	3800      	subs	r0, #0
   292fa:	bf18      	it	ne
   292fc:	2001      	movne	r0, #1
   292fe:	4770      	bx	lr

00029300 <llcp_rr_peek>:
}
   29300:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
   29304:	4770      	bx	lr
   29306:	bf00      	nop

00029308 <llcp_rr_ispaused>:
	return conn->llcp.remote.pause == 1U;
   29308:	f890 0104 	ldrb.w	r0, [r0, #260]	; 0x104
}
   2930c:	f1a0 0001 	sub.w	r0, r0, #1
   29310:	fab0 f080 	clz	r0, r0
   29314:	0940      	lsrs	r0, r0, #5
   29316:	4770      	bx	lr

00029318 <llcp_rr_prt_restart>:
	conn->llcp.remote.prt_expire = conn->llcp.prt_reload;
   29318:	f8b0 3108 	ldrh.w	r3, [r0, #264]	; 0x108
   2931c:	f8a0 3102 	strh.w	r3, [r0, #258]	; 0x102
}
   29320:	4770      	bx	lr
   29322:	bf00      	nop

00029324 <llcp_rr_prt_stop>:
	conn->llcp.remote.prt_expire = 0U;
   29324:	2300      	movs	r3, #0
   29326:	f8a0 3102 	strh.w	r3, [r0, #258]	; 0x102
}
   2932a:	4770      	bx	lr

0002932c <llcp_rr_rx>:
{
   2932c:	b538      	push	{r3, r4, r5, lr}
	switch (ctx->proc) {
   2932e:	7a0b      	ldrb	r3, [r1, #8]
{
   29330:	460c      	mov	r4, r1
   29332:	4605      	mov	r5, r0
	switch (ctx->proc) {
   29334:	2b0c      	cmp	r3, #12
   29336:	d824      	bhi.n	29382 <llcp_rr_rx+0x56>
   29338:	e8df f003 	tbb	[pc, r3]
   2933c:	0707070a 	.word	0x0707070a
   29340:	1b171707 	.word	0x1b171707
   29344:	1f071313 	.word	0x1f071313
   29348:	07          	.byte	0x07
   29349:	00          	.byte	0x00
		llcp_rp_comm_rx(conn, ctx, rx);
   2934a:	4621      	mov	r1, r4
   2934c:	f7fe fa78 	bl	27840 <llcp_rp_comm_rx>
	if (ctx->done) {
   29350:	69a3      	ldr	r3, [r4, #24]
   29352:	b12b      	cbz	r3, 29360 <llcp_rr_rx+0x34>
   29354:	4621      	mov	r1, r4
   29356:	4628      	mov	r0, r5
}
   29358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2935c:	f7ff bda8 	b.w	28eb0 <rr_check_done.part.0>
   29360:	bd38      	pop	{r3, r4, r5, pc}
		llcp_rp_cu_rx(conn, ctx, rx);
   29362:	4621      	mov	r1, r4
   29364:	f7ff fcde 	bl	28d24 <llcp_rp_cu_rx>
		break;
   29368:	e7f2      	b.n	29350 <llcp_rr_rx+0x24>
		llcp_rp_enc_rx(conn, ctx, rx);
   2936a:	4621      	mov	r1, r4
   2936c:	f7fc fffc 	bl	26368 <llcp_rp_enc_rx>
		break;
   29370:	e7ee      	b.n	29350 <llcp_rr_rx+0x24>
		llcp_rp_pu_rx(conn, ctx, rx);
   29372:	4621      	mov	r1, r4
   29374:	f7fc fd54 	bl	25e20 <llcp_rp_pu_rx>
		break;
   29378:	e7ea      	b.n	29350 <llcp_rr_rx+0x24>
		llcp_rp_chmu_rx(conn, ctx, rx);
   2937a:	4621      	mov	r1, r4
   2937c:	f7ff fd08 	bl	28d90 <llcp_rp_chmu_rx>
		break;
   29380:	e7e6      	b.n	29350 <llcp_rr_rx+0x24>
		LL_ASSERT(0);
   29382:	4a07      	ldr	r2, [pc, #28]	; (293a0 <llcp_rr_rx+0x74>)
   29384:	4907      	ldr	r1, [pc, #28]	; (293a4 <llcp_rr_rx+0x78>)
   29386:	4808      	ldr	r0, [pc, #32]	; (293a8 <llcp_rr_rx+0x7c>)
   29388:	f44f 738f 	mov.w	r3, #286	; 0x11e
   2938c:	f00a f844 	bl	33418 <assert_print>
   29390:	4040      	eors	r0, r0
   29392:	f380 8811 	msr	BASEPRI, r0
   29396:	f04f 0003 	mov.w	r0, #3
   2939a:	df02      	svc	2
		break;
   2939c:	e7d8      	b.n	29350 <llcp_rr_rx+0x24>
   2939e:	bf00      	nop
   293a0:	0003aad8 	.word	0x0003aad8
   293a4:	0003a004 	.word	0x0003a004
   293a8:	00039f74 	.word	0x00039f74

000293ac <llcp_rr_tx_ack>:
{
   293ac:	b538      	push	{r3, r4, r5, lr}
	switch (ctx->proc) {
   293ae:	7a0b      	ldrb	r3, [r1, #8]
   293b0:	2b07      	cmp	r3, #7
{
   293b2:	460c      	mov	r4, r1
   293b4:	4605      	mov	r5, r0
	switch (ctx->proc) {
   293b6:	d00c      	beq.n	293d2 <llcp_rr_tx_ack+0x26>
   293b8:	2b0c      	cmp	r3, #12
   293ba:	d101      	bne.n	293c0 <llcp_rr_tx_ack+0x14>
		llcp_rp_comm_tx_ack(conn, ctx, tx);
   293bc:	f7fe fa46 	bl	2784c <llcp_rp_comm_tx_ack>
	if (ctx->done) {
   293c0:	69a3      	ldr	r3, [r4, #24]
   293c2:	b12b      	cbz	r3, 293d0 <llcp_rr_tx_ack+0x24>
   293c4:	4621      	mov	r1, r4
   293c6:	4628      	mov	r0, r5
}
   293c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   293cc:	f7ff bd70 	b.w	28eb0 <rr_check_done.part.0>
   293d0:	bd38      	pop	{r3, r4, r5, pc}
		llcp_rp_pu_tx_ack(conn, ctx, tx);
   293d2:	f7fc fd4b 	bl	25e6c <llcp_rp_pu_tx_ack>
		break;
   293d6:	e7f3      	b.n	293c0 <llcp_rr_tx_ack+0x14>

000293d8 <llcp_rr_tx_ntf>:
{
   293d8:	b538      	push	{r3, r4, r5, lr}
	switch (ctx->proc) {
   293da:	7a0b      	ldrb	r3, [r1, #8]
   293dc:	2b07      	cmp	r3, #7
{
   293de:	460c      	mov	r4, r1
   293e0:	4605      	mov	r5, r0
	switch (ctx->proc) {
   293e2:	d008      	beq.n	293f6 <llcp_rr_tx_ntf+0x1e>
	if (ctx->done) {
   293e4:	69a3      	ldr	r3, [r4, #24]
   293e6:	b12b      	cbz	r3, 293f4 <llcp_rr_tx_ntf+0x1c>
   293e8:	4621      	mov	r1, r4
   293ea:	4628      	mov	r0, r5
}
   293ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   293f0:	f7ff bd5e 	b.w	28eb0 <rr_check_done.part.0>
   293f4:	bd38      	pop	{r3, r4, r5, pc}
		llcp_rp_pu_tx_ntf(conn, ctx);
   293f6:	f7fc fd3d 	bl	25e74 <llcp_rp_pu_tx_ntf>
		break;
   293fa:	e7f3      	b.n	293e4 <llcp_rr_tx_ntf+0xc>

000293fc <llcp_rr_init>:
	conn->llcp.remote.state = state;
   293fc:	2204      	movs	r2, #4

void llcp_rr_init(struct ll_conn *conn)
{
	rr_set_state(conn, RR_STATE_DISCONNECT);
	conn->llcp.remote.prt_expire = 0U;
   293fe:	2300      	movs	r3, #0
	conn->llcp.remote.state = state;
   29400:	f880 2100 	strb.w	r2, [r0, #256]	; 0x100
	conn->llcp.remote.prt_expire = 0U;
   29404:	f8a0 3102 	strh.w	r3, [r0, #258]	; 0x102
}
   29408:	4770      	bx	lr
   2940a:	bf00      	nop

0002940c <llcp_rr_run>:
	rr_execute_fsm(conn, RR_EVT_PREPARE, rx);
}

void llcp_rr_run(struct ll_conn *conn)
{
	rr_execute_fsm(conn, RR_EVT_RUN, NULL);
   2940c:	2200      	movs	r2, #0
   2940e:	2101      	movs	r1, #1
   29410:	f7ff beb4 	b.w	2917c <rr_execute_fsm>

00029414 <llcp_rr_complete>:
}

void llcp_rr_complete(struct ll_conn *conn)
{
	rr_execute_fsm(conn, RR_EVT_COMPLETE, NULL);
   29414:	2200      	movs	r2, #0
   29416:	2102      	movs	r1, #2
   29418:	f7ff beb0 	b.w	2917c <rr_execute_fsm>

0002941c <llcp_rr_connect>:
}

void llcp_rr_connect(struct ll_conn *conn)
{
	rr_execute_fsm(conn, RR_EVT_CONNECT, NULL);
   2941c:	2200      	movs	r2, #0
   2941e:	2103      	movs	r1, #3
   29420:	f7ff beac 	b.w	2917c <rr_execute_fsm>

00029424 <llcp_rr_disconnect>:
}

void llcp_rr_disconnect(struct ll_conn *conn)
{
	rr_execute_fsm(conn, RR_EVT_DISCONNECT, NULL);
   29424:	2200      	movs	r2, #0
   29426:	2104      	movs	r1, #4
   29428:	f7ff bea8 	b.w	2917c <rr_execute_fsm>

0002942c <llcp_rr_new>:
	[PDU_DATA_LLCTRL_TYPE_CLOCK_ACCURACY_REQ] = { PROC_SCA_UPDATE, ACCEPT_ROLE_BOTH },
#endif /* CONFIG_BT_CTLR_SCA_UPDATE */
};

void llcp_rr_new(struct ll_conn *conn, struct node_rx_pdu *rx, bool valid_pdu)
{
   2942c:	b570      	push	{r4, r5, r6, lr}
   2942e:	4604      	mov	r4, r0
   29430:	460e      	mov	r6, r1
	uint8_t proc = PROC_UNKNOWN;

	pdu = (struct pdu_data *)rx->pdu;

	/* Is this a valid opcode */
	if (valid_pdu && pdu->llctrl.opcode < ARRAY_SIZE(new_proc_lut)) {
   29432:	b112      	cbz	r2, 2943a <llcp_rr_new+0xe>
   29434:	7fcb      	ldrb	r3, [r1, #31]
   29436:	2b1b      	cmp	r3, #27
   29438:	d923      	bls.n	29482 <llcp_rr_new+0x56>
	uint8_t proc = PROC_UNKNOWN;
   2943a:	2500      	movs	r5, #0

	if (proc == PROC_TERMINATE) {
		rr_abort(conn);
	}

	ctx = llcp_create_remote_procedure(proc);
   2943c:	4628      	mov	r0, r5
   2943e:	f7fd f993 	bl	26768 <llcp_create_remote_procedure>
	if (!ctx) {
   29442:	4605      	mov	r5, r0
   29444:	b1e0      	cbz	r0, 29480 <llcp_rr_new+0x54>
	parent->next = child;
   29446:	2300      	movs	r3, #0
   29448:	6003      	str	r3, [r0, #0]
	return list->tail;
   2944a:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
Z_GENLIST_APPEND(slist, snode)
   2944e:	2b00      	cmp	r3, #0
   29450:	d040      	beq.n	294d4 <llcp_rr_new+0xa8>
	parent->next = child;
   29452:	6018      	str	r0, [r3, #0]
	list->tail = node;
   29454:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
	rr_execute_fsm(conn, RR_EVT_PREPARE, rx);
   29458:	4632      	mov	r2, r6
   2945a:	2100      	movs	r1, #0
   2945c:	4620      	mov	r0, r4
   2945e:	f7ff fe8d 	bl	2917c <rr_execute_fsm>
	if (ctx->done) {
   29462:	69ab      	ldr	r3, [r5, #24]
   29464:	b11b      	cbz	r3, 2946e <llcp_rr_new+0x42>
   29466:	4629      	mov	r1, r5
   29468:	4620      	mov	r0, r4
   2946a:	f7ff fd21 	bl	28eb0 <rr_check_done.part.0>
	return list->head;
   2946e:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8

	rr_check_done(conn, ctx);

	/* Handle PDU */
	ctx = llcp_rr_peek(conn);
	if (ctx) {
   29472:	b129      	cbz	r1, 29480 <llcp_rr_new+0x54>
		llcp_rr_rx(conn, ctx, rx);
   29474:	4632      	mov	r2, r6
   29476:	4620      	mov	r0, r4
	}
}
   29478:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		llcp_rr_rx(conn, ctx, rx);
   2947c:	f7ff bf56 	b.w	2932c <llcp_rr_rx>
}
   29480:	bd70      	pop	{r4, r5, r6, pc}
		struct proc_role pr = new_proc_lut[pdu->llctrl.opcode];
   29482:	491b      	ldr	r1, [pc, #108]	; (294f0 <llcp_rr_new+0xc4>)
   29484:	b218      	sxth	r0, r3
   29486:	eb01 0343 	add.w	r3, r1, r3, lsl #1
		uint8_t role_mask  = (1 << conn->lll.role);
   2948a:	2501      	movs	r5, #1
		if (pr.accept & role_mask) {
   2948c:	785a      	ldrb	r2, [r3, #1]
		uint8_t role_mask  = (1 << conn->lll.role);
   2948e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   29492:	09db      	lsrs	r3, r3, #7
   29494:	409d      	lsls	r5, r3
		if (pr.accept & role_mask) {
   29496:	4015      	ands	r5, r2
   29498:	d0d0      	beq.n	2943c <llcp_rr_new+0x10>
		struct proc_role pr = new_proc_lut[pdu->llctrl.opcode];
   2949a:	f811 5010 	ldrb.w	r5, [r1, r0, lsl #1]
	if (proc == PROC_TERMINATE) {
   2949e:	2d0a      	cmp	r5, #10
   294a0:	d1cc      	bne.n	2943c <llcp_rr_new+0x10>
   294a2:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
Z_GENLIST_GET(slist, snode)
   294a6:	b1d0      	cbz	r0, 294de <llcp_rr_new+0xb2>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   294a8:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
	return node->next;
   294ac:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   294ae:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   294b2:	4290      	cmp	r0, r2
   294b4:	d00b      	beq.n	294ce <llcp_rr_new+0xa2>
	struct proc_ctx *ctx;

	/* Flush all pending procedures */
	ctx = rr_dequeue(conn);
	while (ctx) {
		llcp_proc_ctx_release(ctx);
   294b6:	f7fd f8a1 	bl	265fc <llcp_proc_ctx_release>
	return list->head;
   294ba:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
Z_GENLIST_GET(slist, snode)
   294be:	b170      	cbz	r0, 294de <llcp_rr_new+0xb2>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   294c0:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
	return node->next;
   294c4:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   294c6:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   294ca:	4290      	cmp	r0, r2
   294cc:	d1f3      	bne.n	294b6 <llcp_rr_new+0x8a>
	list->tail = node;
   294ce:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
}
   294d2:	e7f0      	b.n	294b6 <llcp_rr_new+0x8a>
	list->head = node;
   294d4:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
   294d8:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
}
   294dc:	e7bc      	b.n	29458 <llcp_rr_new+0x2c>
	conn->llcp.remote.prt_expire = 0U;
   294de:	2300      	movs	r3, #0
   294e0:	f8a4 3102 	strh.w	r3, [r4, #258]	; 0x102
	conn->llcp.remote.collision = collision;
   294e4:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
	conn->llcp.remote.state = state;
   294e8:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
	}

	llcp_rr_prt_stop(conn);
	rr_set_collision(conn, 0U);
	rr_set_state(conn, RR_STATE_IDLE);
}
   294ec:	e7a6      	b.n	2943c <llcp_rr_new+0x10>
   294ee:	bf00      	nop
   294f0:	0003ab20 	.word	0x0003ab20

000294f4 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param)
{
   294f4:	b510      	push	{r4, lr}
   294f6:	460c      	mov	r4, r1
	struct ll_conn *conn = param;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   294f8:	b930      	cbnz	r0, 29508 <ticker_update_latency_cancel_op_cb+0x14>

	conn->periph.latency_cancel = 0U;
   294fa:	f894 316c 	ldrb.w	r3, [r4, #364]	; 0x16c
   294fe:	f36f 0300 	bfc	r3, #0, #1
   29502:	f884 316c 	strb.w	r3, [r4, #364]	; 0x16c
}
   29506:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   29508:	4a09      	ldr	r2, [pc, #36]	; (29530 <ticker_update_latency_cancel_op_cb+0x3c>)
   2950a:	490a      	ldr	r1, [pc, #40]	; (29534 <ticker_update_latency_cancel_op_cb+0x40>)
   2950c:	480a      	ldr	r0, [pc, #40]	; (29538 <ticker_update_latency_cancel_op_cb+0x44>)
   2950e:	f240 23b6 	movw	r3, #694	; 0x2b6
   29512:	f009 ff81 	bl	33418 <assert_print>
   29516:	4040      	eors	r0, r0
   29518:	f380 8811 	msr	BASEPRI, r0
   2951c:	f04f 0003 	mov.w	r0, #3
   29520:	df02      	svc	2
	conn->periph.latency_cancel = 0U;
   29522:	f894 316c 	ldrb.w	r3, [r4, #364]	; 0x16c
   29526:	f36f 0300 	bfc	r3, #0, #1
   2952a:	f884 316c 	strb.w	r3, [r4, #364]	; 0x16c
}
   2952e:	bd10      	pop	{r4, pc}
   29530:	0003ab58 	.word	0x0003ab58
   29534:	0003aba0 	.word	0x0003aba0
   29538:	00039f74 	.word	0x00039f74

0002953c <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   2953c:	b900      	cbnz	r0, 29540 <ticker_op_cb+0x4>
   2953e:	4770      	bx	lr
{
   29540:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   29542:	4a07      	ldr	r2, [pc, #28]	; (29560 <ticker_op_cb+0x24>)
   29544:	4907      	ldr	r1, [pc, #28]	; (29564 <ticker_op_cb+0x28>)
   29546:	4808      	ldr	r0, [pc, #32]	; (29568 <ticker_op_cb+0x2c>)
   29548:	f240 23ae 	movw	r3, #686	; 0x2ae
   2954c:	f009 ff64 	bl	33418 <assert_print>
   29550:	4040      	eors	r0, r0
   29552:	f380 8811 	msr	BASEPRI, r0
   29556:	f04f 0003 	mov.w	r0, #3
   2955a:	df02      	svc	2
}
   2955c:	bd08      	pop	{r3, pc}
   2955e:	bf00      	nop
   29560:	0003ab58 	.word	0x0003ab58
   29564:	0003a6a8 	.word	0x0003a6a8
   29568:	00039f74 	.word	0x00039f74

0002956c <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   2956c:	2801      	cmp	r0, #1
   2956e:	d000      	beq.n	29572 <ticker_op_stop_adv_cb+0x6>
   29570:	4770      	bx	lr
{
   29572:	b510      	push	{r4, lr}
   29574:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   29576:	f7f9 fbbd 	bl	22cf4 <ull_disable_mark_get>
   2957a:	4284      	cmp	r4, r0
   2957c:	d00c      	beq.n	29598 <ticker_op_stop_adv_cb+0x2c>
   2957e:	4a07      	ldr	r2, [pc, #28]	; (2959c <ticker_op_stop_adv_cb+0x30>)
   29580:	4907      	ldr	r1, [pc, #28]	; (295a0 <ticker_op_stop_adv_cb+0x34>)
   29582:	4808      	ldr	r0, [pc, #32]	; (295a4 <ticker_op_stop_adv_cb+0x38>)
   29584:	f240 23a6 	movw	r3, #678	; 0x2a6
   29588:	f009 ff46 	bl	33418 <assert_print>
   2958c:	4040      	eors	r0, r0
   2958e:	f380 8811 	msr	BASEPRI, r0
   29592:	f04f 0003 	mov.w	r0, #3
   29596:	df02      	svc	2
}
   29598:	bd10      	pop	{r4, pc}
   2959a:	bf00      	nop
   2959c:	0003ab58 	.word	0x0003ab58
   295a0:	0003abb4 	.word	0x0003abb4
   295a4:	00039f74 	.word	0x00039f74

000295a8 <ull_periph_ticker_cb>:
{
   295a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   295ac:	9c07      	ldr	r4, [sp, #28]
   295ae:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   295b2:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
   295b4:	461d      	mov	r5, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   295b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   295ba:	4299      	cmp	r1, r3
   295bc:	d026      	beq.n	2960c <ull_periph_ticker_cb+0x64>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   295be:	4606      	mov	r6, r0
   295c0:	4617      	mov	r7, r2
   295c2:	4601      	mov	r1, r0
   295c4:	462a      	mov	r2, r5
   295c6:	4620      	mov	r0, r4
   295c8:	f7fb fa00 	bl	249cc <ull_conn_llcp>
		if (ret) {
   295cc:	b9f0      	cbnz	r0, 2960c <ull_periph_ticker_cb+0x64>
	return ++hdr->ref;
   295ce:	7823      	ldrb	r3, [r4, #0]
   295d0:	3301      	adds	r3, #1
   295d2:	b2db      	uxtb	r3, r3
   295d4:	7023      	strb	r3, [r4, #0]
	LL_ASSERT(ref);
   295d6:	b34b      	cbz	r3, 2962c <ull_periph_ticker_cb+0x84>
	p.ticks_at_expire = ticks_at_expire;
   295d8:	491b      	ldr	r1, [pc, #108]	; (29648 <ull_periph_ticker_cb+0xa0>)
	mfy.param = &p;
   295da:	4b1c      	ldr	r3, [pc, #112]	; (2964c <ull_periph_ticker_cb+0xa4>)
	p.lazy = lazy;
   295dc:	810d      	strh	r5, [r1, #8]
	p.param = &conn->lll;
   295de:	f104 001c 	add.w	r0, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   295e2:	2200      	movs	r2, #0
	p.param = &conn->lll;
   295e4:	60c8      	str	r0, [r1, #12]
	p.remainder = remainder;
   295e6:	e9c1 6700 	strd	r6, r7, [r1]
	p.force = force;
   295ea:	f881 800a 	strb.w	r8, [r1, #10]
	mfy.param = &p;
   295ee:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   295f0:	2001      	movs	r0, #1
   295f2:	4611      	mov	r1, r2
   295f4:	f7f5 ff9e 	bl	1f534 <mayfly_enqueue>
	LL_ASSERT(!err);
   295f8:	b950      	cbnz	r0, 29610 <ull_periph_ticker_cb+0x68>
	ull_conn_tx_demux(UINT8_MAX);
   295fa:	20ff      	movs	r0, #255	; 0xff
   295fc:	f7fb fa18 	bl	24a30 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   29600:	4620      	mov	r0, r4
   29602:	21ff      	movs	r1, #255	; 0xff
}
   29604:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   29608:	f7fb bc52 	b.w	24eb0 <ull_conn_tx_lll_enqueue>
}
   2960c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
   29610:	4a0f      	ldr	r2, [pc, #60]	; (29650 <ull_periph_ticker_cb+0xa8>)
   29612:	4910      	ldr	r1, [pc, #64]	; (29654 <ull_periph_ticker_cb+0xac>)
   29614:	4810      	ldr	r0, [pc, #64]	; (29658 <ull_periph_ticker_cb+0xb0>)
   29616:	f240 233e 	movw	r3, #574	; 0x23e
   2961a:	f009 fefd 	bl	33418 <assert_print>
   2961e:	4040      	eors	r0, r0
   29620:	f380 8811 	msr	BASEPRI, r0
   29624:	f04f 0003 	mov.w	r0, #3
   29628:	df02      	svc	2
   2962a:	e7e6      	b.n	295fa <ull_periph_ticker_cb+0x52>
	LL_ASSERT(ref);
   2962c:	4a08      	ldr	r2, [pc, #32]	; (29650 <ull_periph_ticker_cb+0xa8>)
   2962e:	490b      	ldr	r1, [pc, #44]	; (2965c <ull_periph_ticker_cb+0xb4>)
   29630:	4809      	ldr	r0, [pc, #36]	; (29658 <ull_periph_ticker_cb+0xb0>)
   29632:	f240 2331 	movw	r3, #561	; 0x231
   29636:	f009 feef 	bl	33418 <assert_print>
   2963a:	4040      	eors	r0, r0
   2963c:	f380 8811 	msr	BASEPRI, r0
   29640:	f04f 0003 	mov.w	r0, #3
   29644:	df02      	svc	2
   29646:	e7c7      	b.n	295d8 <ull_periph_ticker_cb+0x30>
   29648:	20002a00 	.word	0x20002a00
   2964c:	20000728 	.word	0x20000728
   29650:	0003ab58 	.word	0x0003ab58
   29654:	0003a33c 	.word	0x0003a33c
   29658:	00039f74 	.word	0x00039f74
   2965c:	0003a5d4 	.word	0x0003a5d4

00029660 <ull_periph_latency_cancel>:
	if (conn->lll.latency_event && !conn->periph.latency_cancel) {
   29660:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   29662:	b123      	cbz	r3, 2966e <ull_periph_latency_cancel+0xe>
   29664:	f890 216c 	ldrb.w	r2, [r0, #364]	; 0x16c
   29668:	f012 0301 	ands.w	r3, r2, #1
   2966c:	d000      	beq.n	29670 <ull_periph_latency_cancel+0x10>
   2966e:	4770      	bx	lr
{
   29670:	b510      	push	{r4, lr}
		conn->periph.latency_cancel = 1U;
   29672:	f042 0201 	orr.w	r2, r2, #1
{
   29676:	b088      	sub	sp, #32
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   29678:	4c11      	ldr	r4, [pc, #68]	; (296c0 <ull_periph_latency_cancel+0x60>)
		conn->periph.latency_cancel = 1U;
   2967a:	f880 216c 	strb.w	r2, [r0, #364]	; 0x16c
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   2967e:	3103      	adds	r1, #3
   29680:	2201      	movs	r2, #1
   29682:	e9cd 3202 	strd	r3, r2, [sp, #8]
   29686:	9006      	str	r0, [sp, #24]
   29688:	b2ca      	uxtb	r2, r1
   2968a:	e9cd 3404 	strd	r3, r4, [sp, #16]
   2968e:	e9cd 3300 	strd	r3, r3, [sp]
   29692:	2103      	movs	r1, #3
   29694:	4618      	mov	r0, r3
   29696:	f7f7 f80f 	bl	206b8 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   2969a:	f010 0ffd 	tst.w	r0, #253	; 0xfd
   2969e:	d00c      	beq.n	296ba <ull_periph_latency_cancel+0x5a>
   296a0:	4a08      	ldr	r2, [pc, #32]	; (296c4 <ull_periph_latency_cancel+0x64>)
   296a2:	4909      	ldr	r1, [pc, #36]	; (296c8 <ull_periph_latency_cancel+0x68>)
   296a4:	4809      	ldr	r0, [pc, #36]	; (296cc <ull_periph_latency_cancel+0x6c>)
   296a6:	f240 13f7 	movw	r3, #503	; 0x1f7
   296aa:	f009 feb5 	bl	33418 <assert_print>
   296ae:	4040      	eors	r0, r0
   296b0:	f380 8811 	msr	BASEPRI, r0
   296b4:	f04f 0003 	mov.w	r0, #3
   296b8:	df02      	svc	2
}
   296ba:	b008      	add	sp, #32
   296bc:	bd10      	pop	{r4, pc}
   296be:	bf00      	nop
   296c0:	000294f5 	.word	0x000294f5
   296c4:	0003ab58 	.word	0x0003ab58
   296c8:	0003a714 	.word	0x0003a714
   296cc:	00039f74 	.word	0x00039f74

000296d0 <ll_start_enc_req_send>:
{
   296d0:	b538      	push	{r3, r4, r5, lr}
   296d2:	460c      	mov	r4, r1
   296d4:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
   296d6:	f7fa fe9f 	bl	24418 <ll_connected_get>
	if (!conn) {
   296da:	b148      	cbz	r0, 296f0 <ll_start_enc_req_send+0x20>
	if (error_code) {
   296dc:	b11c      	cbz	r4, 296e6 <ll_start_enc_req_send+0x16>
}
   296de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return ull_cp_ltk_req_neq_reply(conn);
   296e2:	f7fd ba09 	b.w	26af8 <ull_cp_ltk_req_neq_reply>
		return ull_cp_ltk_req_reply(conn, ltk);
   296e6:	4629      	mov	r1, r5
}
   296e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return ull_cp_ltk_req_reply(conn, ltk);
   296ec:	f7fd b9e4 	b.w	26ab8 <ull_cp_ltk_req_reply>
}
   296f0:	2002      	movs	r0, #2
   296f2:	bd38      	pop	{r3, r4, r5, pc}

000296f4 <ll_set_min_used_chans>:

#if !defined(CONFIG_BT_LL_SW_LLCP_LEGACY)
#if defined(CONFIG_BT_CTLR_MIN_USED_CHAN)
uint8_t ll_set_min_used_chans(uint16_t handle, uint8_t const phys,
			      uint8_t const min_used_chans)
{
   296f4:	b538      	push	{r3, r4, r5, lr}
   296f6:	460c      	mov	r4, r1
   296f8:	4615      	mov	r5, r2
	struct ll_conn *conn;

	conn = ll_connected_get(handle);
   296fa:	f7fa fe8d 	bl	24418 <ll_connected_get>
	if (!conn) {
   296fe:	b158      	cbz	r0, 29718 <ll_set_min_used_chans+0x24>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
	}

	if (!conn->lll.role) {
   29700:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   29704:	2b00      	cmp	r3, #0
   29706:	da05      	bge.n	29714 <ll_set_min_used_chans+0x20>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	return ull_cp_min_used_chans(conn, phys, min_used_chans);
   29708:	462a      	mov	r2, r5
   2970a:	4621      	mov	r1, r4
}
   2970c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return ull_cp_min_used_chans(conn, phys, min_used_chans);
   29710:	f7fd b932 	b.w	26978 <ull_cp_min_used_chans>
		return BT_HCI_ERR_CMD_DISALLOWED;
   29714:	200c      	movs	r0, #12
}
   29716:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   29718:	2002      	movs	r0, #2
}
   2971a:	bd38      	pop	{r3, r4, r5, pc}

0002971c <lll_chan_sel_1>:
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.2
 * Channel Selection algorithm #1
 */
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   2971c:	b530      	push	{r4, r5, lr}
   2971e:	4604      	mov	r4, r0
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   29720:	7800      	ldrb	r0, [r0, #0]
{
   29722:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   29726:	fb02 1101 	mla	r1, r2, r1, r1
   2972a:	4a1f      	ldr	r2, [pc, #124]	; (297a8 <lll_chan_sel_1+0x8c>)
   2972c:	4401      	add	r1, r0
   2972e:	fb82 0201 	smull	r0, r2, r2, r1
   29732:	440a      	add	r2, r1
   29734:	1152      	asrs	r2, r2, #5
   29736:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
   2973a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   2973e:	1a8a      	subs	r2, r1, r2
   29740:	b2d0      	uxtb	r0, r2
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   29742:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
   29744:	7020      	strb	r0, [r4, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   29746:	5c59      	ldrb	r1, [r3, r1]
   29748:	f002 0207 	and.w	r2, r2, #7
   2974c:	fa41 f202 	asr.w	r2, r1, r2
   29750:	f012 0201 	ands.w	r2, r2, #1
   29754:	d11f      	bne.n	29796 <lll_chan_sel_1+0x7a>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   29756:	fbb0 f4f5 	udiv	r4, r0, r5
   2975a:	fb05 0414 	mls	r4, r5, r4, r0
   2975e:	b2e4      	uxtb	r4, r4
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   29760:	1e5d      	subs	r5, r3, #1
	chan_next = 0U;
   29762:	4610      	mov	r0, r2
   29764:	3304      	adds	r3, #4
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   29766:	f100 0e08 	add.w	lr, r0, #8
   2976a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
		bit_count = 8U;
		while (bit_count--) {
   2976e:	fa5f fe8e 	uxtb.w	lr, lr
		bite = *chan_map;
   29772:	4602      	mov	r2, r0
			if (bite & 0x01) {
   29774:	f011 0f01 	tst.w	r1, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   29778:	f102 0c01 	add.w	ip, r2, #1
			bite >>= 1;
   2977c:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   29780:	d002      	beq.n	29788 <lll_chan_sel_1+0x6c>
				if (chan_index == 0U) {
   29782:	b14c      	cbz	r4, 29798 <lll_chan_sel_1+0x7c>
				chan_index--;
   29784:	3c01      	subs	r4, #1
   29786:	b2e4      	uxtb	r4, r4
			chan_next++;
   29788:	fa5f f28c 	uxtb.w	r2, ip
		while (bit_count--) {
   2978c:	4572      	cmp	r2, lr
   2978e:	d1f1      	bne.n	29774 <lll_chan_sel_1+0x58>
			chan_next++;
   29790:	4610      	mov	r0, r2
	while (byte_count--) {
   29792:	429d      	cmp	r5, r3
   29794:	d1e7      	bne.n	29766 <lll_chan_sel_1+0x4a>
}
   29796:	bd30      	pop	{r4, r5, pc}
		}

		if (bit_count < 8) {
   29798:	1dc1      	adds	r1, r0, #7
   2979a:	1a89      	subs	r1, r1, r2
   2979c:	b2c9      	uxtb	r1, r1
   2979e:	2907      	cmp	r1, #7
   297a0:	4610      	mov	r0, r2
   297a2:	d8f6      	bhi.n	29792 <lll_chan_sel_1+0x76>
}
   297a4:	bd30      	pop	{r4, r5, pc}
   297a6:	bf00      	nop
   297a8:	dd67c8a7 	.word	0xdd67c8a7

000297ac <lll_chan_id>:
	return aa_ms ^ aa_ls;
   297ac:	8842      	ldrh	r2, [r0, #2]
   297ae:	8800      	ldrh	r0, [r0, #0]
}
   297b0:	4050      	eors	r0, r2
   297b2:	4770      	bx	lr

000297b4 <lll_chan_sel_2>:
{
   297b4:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.3.2
 * Inputs and basic components, for below operations
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   297b6:	4d34      	ldr	r5, [pc, #208]	; (29888 <lll_chan_sel_2+0xd4>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   297b8:	4c34      	ldr	r4, [pc, #208]	; (2988c <lll_chan_sel_2+0xd8>)
static uint16_t chan_prn_s(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_s;

	prn_s = counter ^ chan_id;
   297ba:	4048      	eors	r0, r1
   297bc:	f04f 0c03 	mov.w	ip, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   297c0:	0a06      	lsrs	r6, r0, #8
   297c2:	fa5f fe80 	uxtb.w	lr, r0
   297c6:	eb0e 2e8e 	add.w	lr, lr, lr, lsl #10
   297ca:	eb06 2086 	add.w	r0, r6, r6, lsl #10
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   297ce:	ea04 1740 	and.w	r7, r4, r0, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   297d2:	ea05 0640 	and.w	r6, r5, r0, lsl #1
   297d6:	ea05 004e 	and.w	r0, r5, lr, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   297da:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   297de:	433e      	orrs	r6, r7
   297e0:	ea40 000e 	orr.w	r0, r0, lr
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   297e4:	eb00 2700 	add.w	r7, r0, r0, lsl #8
   297e8:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
   297ec:	eb06 260e 	add.w	r6, r6, lr, lsl #8
   297f0:	eb00 2007 	add.w	r0, r0, r7, lsl #8
   297f4:	0c36      	lsrs	r6, r6, #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   297f6:	f3c0 4007 	ubfx	r0, r0, #16, #8
   297fa:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   297fe:	eb00 1000 	add.w	r0, r0, r0, lsl #4

	for (iterate = 0U; iterate < 3; iterate++) {
   29802:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   29806:	4408      	add	r0, r1
	for (iterate = 0U; iterate < 3; iterate++) {
   29808:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   2980c:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   2980e:	d1d7      	bne.n	297c0 <lll_chan_sel_2+0xc>
static uint16_t chan_prn_e(uint16_t counter, uint16_t chan_id)
{
	uint16_t prn_e;

	prn_e = chan_prn_s(counter, chan_id);
	prn_e ^= chan_id;
   29810:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   29812:	481f      	ldr	r0, [pc, #124]	; (29890 <lll_chan_sel_2+0xdc>)
   29814:	fba0 4001 	umull	r4, r0, r0, r1
   29818:	1a0c      	subs	r4, r1, r0
   2981a:	eb00 0054 	add.w	r0, r0, r4, lsr #1
   2981e:	0940      	lsrs	r0, r0, #5
   29820:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
   29824:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   29828:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   2982a:	f3c0 04c4 	ubfx	r4, r0, #3, #5
   2982e:	f000 0507 	and.w	r5, r0, #7
   29832:	5d14      	ldrb	r4, [r2, r4]
   29834:	412c      	asrs	r4, r5
   29836:	07e4      	lsls	r4, r4, #31
	chan_next = prn_e % 37;
   29838:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   2983a:	d41c      	bmi.n	29876 <lll_chan_sel_2+0xc2>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   2983c:	fb01 f303 	mul.w	r3, r1, r3
   29840:	1e56      	subs	r6, r2, #1
   29842:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   29846:	3204      	adds	r2, #4
	chan_next = 0U;
   29848:	4660      	mov	r0, ip
		bite = *chan_map;
   2984a:	f100 0508 	add.w	r5, r0, #8
   2984e:	f816 cf01 	ldrb.w	ip, [r6, #1]!
		while (bit_count--) {
   29852:	b2ed      	uxtb	r5, r5
		bite = *chan_map;
   29854:	4601      	mov	r1, r0
			if (bite & 0x01) {
   29856:	f01c 0f01 	tst.w	ip, #1
			chan_next++;
   2985a:	f101 0401 	add.w	r4, r1, #1
			bite >>= 1;
   2985e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
			if (bite & 0x01) {
   29862:	d002      	beq.n	2986a <lll_chan_sel_2+0xb6>
				if (chan_index == 0U) {
   29864:	b143      	cbz	r3, 29878 <lll_chan_sel_2+0xc4>
				chan_index--;
   29866:	3b01      	subs	r3, #1
   29868:	b2db      	uxtb	r3, r3
			chan_next++;
   2986a:	b2e1      	uxtb	r1, r4
		while (bit_count--) {
   2986c:	42a9      	cmp	r1, r5
   2986e:	d1f2      	bne.n	29856 <lll_chan_sel_2+0xa2>
			chan_next++;
   29870:	4608      	mov	r0, r1
	while (byte_count--) {
   29872:	4296      	cmp	r6, r2
   29874:	d1e9      	bne.n	2984a <lll_chan_sel_2+0x96>
}
   29876:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (bit_count < 8) {
   29878:	3007      	adds	r0, #7
   2987a:	1a40      	subs	r0, r0, r1
   2987c:	b2c0      	uxtb	r0, r0
   2987e:	2807      	cmp	r0, #7
   29880:	4608      	mov	r0, r1
   29882:	d8f6      	bhi.n	29872 <lll_chan_sel_2+0xbe>
}
   29884:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29886:	bf00      	nop
   29888:	00022110 	.word	0x00022110
   2988c:	00088440 	.word	0x00088440
   29890:	bacf914d 	.word	0xbacf914d

00029894 <rl_update>:
		}
	}
}

static void rl_update(void)
{
   29894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29898:	4d18      	ldr	r5, [pc, #96]	; (298fc <rl_update+0x68>)
   2989a:	4e19      	ldr	r6, [pc, #100]	; (29900 <rl_update+0x6c>)
   2989c:	2400      	movs	r4, #0
   2989e:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
}

static void filter_insert(struct lll_filter *const filter, int index,
			  uint8_t addr_type, const uint8_t *const bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   298a2:	1eaf      	subs	r7, r5, #2
   298a4:	f04f 0801 	mov.w	r8, #1
   298a8:	e006      	b.n	298b8 <rl_update+0x24>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   298aa:	3401      	adds	r4, #1
   298ac:	2c08      	cmp	r4, #8
   298ae:	f105 0506 	add.w	r5, r5, #6
   298b2:	f106 0628 	add.w	r6, r6, #40	; 0x28
   298b6:	d01f      	beq.n	298f8 <rl_update+0x64>
		if (rl[i].taken) {
   298b8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   298bc:	f819 3033 	ldrb.w	r3, [r9, r3, lsl #3]
   298c0:	07da      	lsls	r2, r3, #31
   298c2:	d5f2      	bpl.n	298aa <rl_update+0x16>
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   298c4:	787a      	ldrb	r2, [r7, #1]
	filter->enable_bitmask |= BIT(index);
   298c6:	f897 c000 	ldrb.w	ip, [r7]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   298ca:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   298ce:	fa08 f104 	lsl.w	r1, r8, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   298d2:	40a3      	lsls	r3, r4
	filter->enable_bitmask |= BIT(index);
   298d4:	ea4c 0c01 	orr.w	ip, ip, r1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   298d8:	4313      	orrs	r3, r2
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   298da:	4631      	mov	r1, r6
   298dc:	4628      	mov	r0, r5
   298de:	2206      	movs	r2, #6
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   298e0:	3401      	adds	r4, #1
	filter->enable_bitmask |= BIT(index);
   298e2:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   298e6:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   298e8:	f00b fe25 	bl	35536 <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   298ec:	2c08      	cmp	r4, #8
   298ee:	f105 0506 	add.w	r5, r5, #6
   298f2:	f106 0628 	add.w	r6, r6, #40	; 0x28
   298f6:	d1df      	bne.n	298b8 <rl_update+0x24>
}
   298f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   298fc:	20002a16 	.word	0x20002a16
   29900:	20002b01 	.word	0x20002b01

00029904 <fal_update>:
{
   29904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29908:	4e21      	ldr	r6, [pc, #132]	; (29990 <fal_update+0x8c>)
   2990a:	4d22      	ldr	r5, [pc, #136]	; (29994 <fal_update+0x90>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   2990c:	f8df 8088 	ldr.w	r8, [pc, #136]	; 29998 <fal_update+0x94>
   29910:	f8df 9088 	ldr.w	r9, [pc, #136]	; 2999c <fal_update+0x98>
{
   29914:	2400      	movs	r4, #0
   29916:	f1a5 0a02 	sub.w	sl, r5, #2
	filter->enable_bitmask |= BIT(index);
   2991a:	1eb7      	subs	r7, r6, #2
		if (!fal[i].taken) {
   2991c:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   29920:	f04f 0c01 	mov.w	ip, #1
		if (!fal[i].taken) {
   29924:	f013 0f01 	tst.w	r3, #1
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   29928:	4630      	mov	r0, r6
	filter->enable_bitmask |= BIT(index);
   2992a:	fa0c fc04 	lsl.w	ip, ip, r4
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   2992e:	4629      	mov	r1, r5
	for (i = 0U; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   29930:	f106 0606 	add.w	r6, r6, #6
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   29934:	f04f 0206 	mov.w	r2, #6
		if (!fal[i].taken) {
   29938:	d023      	beq.n	29982 <fal_update+0x7e>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   2993a:	f898 e000 	ldrb.w	lr, [r8]
		j = fal[i].rl_idx;
   2993e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   29942:	f1be 0f00 	cmp.w	lr, #0
   29946:	d00a      	beq.n	2995e <fal_update+0x5a>
   29948:	2b07      	cmp	r3, #7
   2994a:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   2994e:	d806      	bhi.n	2995e <fal_update+0x5a>
   29950:	f819 303e 	ldrb.w	r3, [r9, lr, lsl #3]
   29954:	f013 0f04 	tst.w	r3, #4
   29958:	d001      	beq.n	2995e <fal_update+0x5a>
   2995a:	06db      	lsls	r3, r3, #27
   2995c:	d511      	bpl.n	29982 <fal_update+0x7e>
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   2995e:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   29962:	f897 e000 	ldrb.w	lr, [r7]
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   29966:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->enable_bitmask |= BIT(index);
   2996a:	ea4e 0e0c 	orr.w	lr, lr, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   2996e:	f897 c001 	ldrb.w	ip, [r7, #1]
	filter->enable_bitmask |= BIT(index);
   29972:	f887 e000 	strb.w	lr, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   29976:	40a3      	lsls	r3, r4
   29978:	ea4c 0303 	orr.w	r3, ip, r3
   2997c:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   2997e:	f00b fdda 	bl	35536 <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   29982:	3401      	adds	r4, #1
   29984:	2c08      	cmp	r4, #8
   29986:	f105 0508 	add.w	r5, r5, #8
   2998a:	d1c7      	bne.n	2991c <fal_update+0x18>
}
   2998c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29990:	20002c82 	.word	0x20002c82
   29994:	20002c42 	.word	0x20002c42
   29998:	200033ec 	.word	0x200033ec
   2999c:	20002b00 	.word	0x20002b00

000299a0 <ll_fal_size_get>:
}
   299a0:	2008      	movs	r0, #8
   299a2:	4770      	bx	lr

000299a4 <ll_fal_clear>:
{
   299a4:	b538      	push	{r3, r4, r5, lr}
	if (ull_adv_filter_pol_get(0)) {
   299a6:	2000      	movs	r0, #0
   299a8:	f7fa fa22 	bl	23df0 <ull_adv_filter_pol_get>
   299ac:	b9c8      	cbnz	r0, 299e2 <ll_fal_clear+0x3e>
   299ae:	4c0e      	ldr	r4, [pc, #56]	; (299e8 <ll_fal_clear+0x44>)
			rl[j].fal = 0U;
   299b0:	4d0e      	ldr	r5, [pc, #56]	; (299ec <ll_fal_clear+0x48>)
   299b2:	1e62      	subs	r2, r4, #1
		uint8_t j = fal[i].rl_idx;
   299b4:	f814 3030 	ldrb.w	r3, [r4, r0, lsl #3]
		if (j < ARRAY_SIZE(rl)) {
   299b8:	2b07      	cmp	r3, #7
			rl[j].fal = 0U;
   299ba:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   299be:	d805      	bhi.n	299cc <ll_fal_clear+0x28>
			rl[j].fal = 0U;
   299c0:	f815 3031 	ldrb.w	r3, [r5, r1, lsl #3]
   299c4:	f36f 1345 	bfc	r3, #5, #1
   299c8:	f805 3031 	strb.w	r3, [r5, r1, lsl #3]
		fal[i].taken = 0U;
   299cc:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   299d0:	f36f 0300 	bfc	r3, #0, #1
   299d4:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   299d8:	3001      	adds	r0, #1
   299da:	2808      	cmp	r0, #8
   299dc:	d1ea      	bne.n	299b4 <ll_fal_clear+0x10>
	return 0;
   299de:	2000      	movs	r0, #0
}
   299e0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   299e2:	200c      	movs	r0, #12
}
   299e4:	bd38      	pop	{r3, r4, r5, pc}
   299e6:	bf00      	nop
   299e8:	20002c41 	.word	0x20002c41
   299ec:	20002b00 	.word	0x20002b00

000299f0 <ll_fal_add>:
{
   299f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   299f4:	4680      	mov	r8, r0
	if (ull_adv_filter_pol_get(0)) {
   299f6:	2000      	movs	r0, #0
   299f8:	f7fa f9fa 	bl	23df0 <ull_adv_filter_pol_get>
   299fc:	2800      	cmp	r0, #0
   299fe:	d167      	bne.n	29ad0 <ll_fal_add+0xe0>
	if (addr->type == ADDR_TYPE_ANON) {
   29a00:	f898 b000 	ldrb.w	fp, [r8]
   29a04:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   29a08:	4605      	mov	r5, r0
   29a0a:	d05f      	beq.n	29acc <ll_fal_add+0xdc>
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   29a0c:	4e3b      	ldr	r6, [pc, #236]	; (29afc <ll_fal_add+0x10c>)
   29a0e:	f108 0901 	add.w	r9, r8, #1
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   29a12:	f00b 0b01 	and.w	fp, fp, #1
		*free_idx = FILTER_IDX_NONE;
   29a16:	f04f 0aff 	mov.w	sl, #255	; 0xff
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   29a1a:	4604      	mov	r4, r0
   29a1c:	1eb7      	subs	r7, r6, #2
   29a1e:	e009      	b.n	29a34 <ll_fal_add+0x44>
		} else if (free_idx && !fal[i].taken &&
   29a20:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   29a24:	d101      	bne.n	29a2a <ll_fal_add+0x3a>
			*free_idx = i;
   29a26:	fa5f fa84 	uxtb.w	sl, r4
	for (i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   29a2a:	3401      	adds	r4, #1
   29a2c:	2c08      	cmp	r4, #8
   29a2e:	f106 0608 	add.w	r6, r6, #8
   29a32:	d016      	beq.n	29a62 <ll_fal_add+0x72>
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   29a34:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   29a38:	07d9      	lsls	r1, r3, #31
   29a3a:	f3c3 0240 	ubfx	r2, r3, #1, #1
   29a3e:	d5ef      	bpl.n	29a20 <ll_fal_add+0x30>
   29a40:	455a      	cmp	r2, fp
   29a42:	d1f2      	bne.n	29a2a <ll_fal_add+0x3a>
   29a44:	2206      	movs	r2, #6
   29a46:	4630      	mov	r0, r6
   29a48:	4649      	mov	r1, r9
   29a4a:	f00b fd64 	bl	35516 <memcmp>
   29a4e:	b3e0      	cbz	r0, 29aca <ll_fal_add+0xda>
		} else if (free_idx && !fal[i].taken &&
   29a50:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   29a54:	07da      	lsls	r2, r3, #31
   29a56:	d5e3      	bpl.n	29a20 <ll_fal_add+0x30>
	for (i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   29a58:	3401      	adds	r4, #1
   29a5a:	2c08      	cmp	r4, #8
   29a5c:	f106 0608 	add.w	r6, r6, #8
   29a60:	d1e8      	bne.n	29a34 <ll_fal_add+0x44>
	} else if (j >= ARRAY_SIZE(fal)) {
   29a62:	f1ba 0f07 	cmp.w	sl, #7
   29a66:	d836      	bhi.n	29ad6 <ll_fal_add+0xe6>
	fal[i].id_addr_type = id_addr->type & 0x1;
   29a68:	f898 2000 	ldrb.w	r2, [r8]
   29a6c:	f817 303a 	ldrb.w	r3, [r7, sl, lsl #3]
   29a70:	f362 0341 	bfi	r3, r2, #1, #1
   29a74:	f807 303a 	strb.w	r3, [r7, sl, lsl #3]
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
   29a78:	2302      	movs	r3, #2
   29a7a:	fb14 340a 	smlabb	r4, r4, sl, r3
	memcpy(dst, src, sizeof(*dst));
   29a7e:	1938      	adds	r0, r7, r4
   29a80:	2206      	movs	r2, #6
   29a82:	4649      	mov	r1, r9
   29a84:	f00b fd57 	bl	35536 <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   29a88:	4c1d      	ldr	r4, [pc, #116]	; (29b00 <ll_fal_add+0x110>)
   29a8a:	f898 b000 	ldrb.w	fp, [r8]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   29a8e:	1e66      	subs	r6, r4, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   29a90:	f00b 0b01 	and.w	fp, fp, #1
   29a94:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   29a98:	ea4f 08c3 	mov.w	r8, r3, lsl #3
   29a9c:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   29aa0:	f3c3 1280 	ubfx	r2, r3, #6, #1
   29aa4:	07db      	lsls	r3, r3, #31
   29aa6:	d501      	bpl.n	29aac <ll_fal_add+0xbc>
   29aa8:	455a      	cmp	r2, fp
   29aaa:	d017      	beq.n	29adc <ll_fal_add+0xec>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   29aac:	3501      	adds	r5, #1
   29aae:	2d08      	cmp	r5, #8
   29ab0:	f104 0428 	add.w	r4, r4, #40	; 0x28
   29ab4:	d1ee      	bne.n	29a94 <ll_fal_add+0xa4>
		fal[i].rl_idx = FILTER_IDX_NONE;
   29ab6:	25ff      	movs	r5, #255	; 0xff
	fal[i].taken = 1U;
   29ab8:	f817 303a 	ldrb.w	r3, [r7, sl, lsl #3]
   29abc:	eb07 02ca 	add.w	r2, r7, sl, lsl #3
   29ac0:	f043 0301 	orr.w	r3, r3, #1
   29ac4:	f807 303a 	strb.w	r3, [r7, sl, lsl #3]
   29ac8:	7055      	strb	r5, [r2, #1]
		fal[i].rl_idx = FILTER_IDX_NONE;
   29aca:	2000      	movs	r0, #0
}
   29acc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   29ad0:	200c      	movs	r0, #12
}
   29ad2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29ad6:	2007      	movs	r0, #7
   29ad8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   29adc:	4620      	mov	r0, r4
   29ade:	2206      	movs	r2, #6
   29ae0:	4649      	mov	r1, r9
   29ae2:	f00b fd18 	bl	35516 <memcmp>
   29ae6:	2800      	cmp	r0, #0
   29ae8:	d1e0      	bne.n	29aac <ll_fal_add+0xbc>
		rl[j].fal = 1U;
   29aea:	f816 3008 	ldrb.w	r3, [r6, r8]
   29aee:	f043 0320 	orr.w	r3, r3, #32
   29af2:	f806 3008 	strb.w	r3, [r6, r8]
   29af6:	b2ed      	uxtb	r5, r5
   29af8:	e7de      	b.n	29ab8 <ll_fal_add+0xc8>
   29afa:	bf00      	nop
   29afc:	20002c42 	.word	0x20002c42
   29b00:	20002b01 	.word	0x20002b01

00029b04 <ll_fal_remove>:
{
   29b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29b08:	4607      	mov	r7, r0
	if (ull_adv_filter_pol_get(0)) {
   29b0a:	2000      	movs	r0, #0
   29b0c:	f7fa f970 	bl	23df0 <ull_adv_filter_pol_get>
   29b10:	bbb8      	cbnz	r0, 29b82 <ll_fal_remove+0x7e>
	if (addr->type == ADDR_TYPE_ANON) {
   29b12:	783e      	ldrb	r6, [r7, #0]
   29b14:	2eff      	cmp	r6, #255	; 0xff
   29b16:	4604      	mov	r4, r0
   29b18:	d013      	beq.n	29b42 <ll_fal_remove+0x3e>
	uint8_t i = fal_find(id_addr->type, id_addr->a.val, NULL);
   29b1a:	4d1b      	ldr	r5, [pc, #108]	; (29b88 <ll_fal_remove+0x84>)
   29b1c:	3701      	adds	r7, #1
	for (i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   29b1e:	f1a5 0802 	sub.w	r8, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   29b22:	f006 0601 	and.w	r6, r6, #1
   29b26:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   29b2a:	f3c3 0240 	ubfx	r2, r3, #1, #1
   29b2e:	07db      	lsls	r3, r3, #31
   29b30:	d501      	bpl.n	29b36 <ll_fal_remove+0x32>
   29b32:	42b2      	cmp	r2, r6
   29b34:	d007      	beq.n	29b46 <ll_fal_remove+0x42>
	for (i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   29b36:	3401      	adds	r4, #1
   29b38:	2c08      	cmp	r4, #8
   29b3a:	f105 0508 	add.w	r5, r5, #8
   29b3e:	d1f2      	bne.n	29b26 <ll_fal_remove+0x22>
   29b40:	2002      	movs	r0, #2
}
   29b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   29b46:	2206      	movs	r2, #6
   29b48:	4628      	mov	r0, r5
   29b4a:	4639      	mov	r1, r7
   29b4c:	f00b fce3 	bl	35516 <memcmp>
   29b50:	2800      	cmp	r0, #0
   29b52:	d1f0      	bne.n	29b36 <ll_fal_remove+0x32>
		uint8_t j = fal[i].rl_idx;
   29b54:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   29b58:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   29b5a:	2b07      	cmp	r3, #7
   29b5c:	d808      	bhi.n	29b70 <ll_fal_remove+0x6c>
			rl[j].fal = 0U;
   29b5e:	4a0b      	ldr	r2, [pc, #44]	; (29b8c <ll_fal_remove+0x88>)
   29b60:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   29b64:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   29b68:	f360 1145 	bfi	r1, r0, #5, #1
   29b6c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		fal[i].taken = 0U;
   29b70:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   29b74:	f36f 0300 	bfc	r3, #0, #1
   29b78:	f808 3034 	strb.w	r3, [r8, r4, lsl #3]
		return 0;
   29b7c:	2000      	movs	r0, #0
}
   29b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   29b82:	200c      	movs	r0, #12
}
   29b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29b88:	20002c42 	.word	0x20002c42
   29b8c:	20002b00 	.word	0x20002b00

00029b90 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   29b90:	2807      	cmp	r0, #7
{
   29b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29b96:	4604      	mov	r4, r0
   29b98:	460e      	mov	r6, r1
   29b9a:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   29b9c:	d817      	bhi.n	29bce <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
   29b9e:	4d1a      	ldr	r5, [pc, #104]	; (29c08 <ll_rl_id_addr_get+0x78>)
   29ba0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   29ba4:	00a7      	lsls	r7, r4, #2
   29ba6:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   29baa:	07db      	lsls	r3, r3, #31
   29bac:	d51d      	bpl.n	29bea <ll_rl_id_addr_get+0x5a>
	*id_addr_type = rl[rl_idx].id_addr_type;
   29bae:	4427      	add	r7, r4
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   29bb0:	4640      	mov	r0, r8
	*id_addr_type = rl[rl_idx].id_addr_type;
   29bb2:	f815 3037 	ldrb.w	r3, [r5, r7, lsl #3]
   29bb6:	f3c3 1380 	ubfx	r3, r3, #6, #1
   29bba:	7033      	strb	r3, [r6, #0]
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   29bbc:	2328      	movs	r3, #40	; 0x28
   29bbe:	fb03 5104 	mla	r1, r3, r4, r5
   29bc2:	2206      	movs	r2, #6
}
   29bc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   29bc8:	3101      	adds	r1, #1
   29bca:	f00b bcb4 	b.w	35536 <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   29bce:	4a0f      	ldr	r2, [pc, #60]	; (29c0c <ll_rl_id_addr_get+0x7c>)
   29bd0:	490f      	ldr	r1, [pc, #60]	; (29c10 <ll_rl_id_addr_get+0x80>)
   29bd2:	4810      	ldr	r0, [pc, #64]	; (29c14 <ll_rl_id_addr_get+0x84>)
   29bd4:	f44f 7388 	mov.w	r3, #272	; 0x110
   29bd8:	f009 fc1e 	bl	33418 <assert_print>
   29bdc:	4040      	eors	r0, r0
   29bde:	f380 8811 	msr	BASEPRI, r0
   29be2:	f04f 0003 	mov.w	r0, #3
   29be6:	df02      	svc	2
   29be8:	e7d9      	b.n	29b9e <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   29bea:	4a08      	ldr	r2, [pc, #32]	; (29c0c <ll_rl_id_addr_get+0x7c>)
   29bec:	490a      	ldr	r1, [pc, #40]	; (29c18 <ll_rl_id_addr_get+0x88>)
   29bee:	4809      	ldr	r0, [pc, #36]	; (29c14 <ll_rl_id_addr_get+0x84>)
   29bf0:	f240 1311 	movw	r3, #273	; 0x111
   29bf4:	f009 fc10 	bl	33418 <assert_print>
   29bf8:	4040      	eors	r0, r0
   29bfa:	f380 8811 	msr	BASEPRI, r0
   29bfe:	f04f 0003 	mov.w	r0, #3
   29c02:	df02      	svc	2
   29c04:	e7d3      	b.n	29bae <ll_rl_id_addr_get+0x1e>
   29c06:	bf00      	nop
   29c08:	20002b00 	.word	0x20002b00
   29c0c:	0003abe4 	.word	0x0003abe4
   29c10:	0003ac28 	.word	0x0003ac28
   29c14:	00039f74 	.word	0x00039f74
   29c18:	0003ac34 	.word	0x0003ac34

00029c1c <ll_rl_size_get>:
uint8_t ll_rl_size_get(void)
   29c1c:	2008      	movs	r0, #8
   29c1e:	4770      	bx	lr

00029c20 <ll_rl_clear>:
{
   29c20:	b510      	push	{r4, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   29c22:	2000      	movs	r0, #0
   29c24:	f7fa f8d8 	bl	23dd8 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   29c28:	bb88      	cbnz	r0, 29c8e <ll_rl_clear+0x6e>
		rl[i].taken = 0U;
   29c2a:	4b1a      	ldr	r3, [pc, #104]	; (29c94 <ll_rl_clear+0x74>)
	peer_irk_count = 0U;
   29c2c:	4c1a      	ldr	r4, [pc, #104]	; (29c98 <ll_rl_clear+0x78>)
		rl[i].taken = 0U;
   29c2e:	7819      	ldrb	r1, [r3, #0]
   29c30:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
	peer_irk_count = 0U;
   29c34:	7020      	strb	r0, [r4, #0]
		rl[i].taken = 0U;
   29c36:	f360 0100 	bfi	r1, r0, #0, #1
   29c3a:	f360 0200 	bfi	r2, r0, #0, #1
   29c3e:	7019      	strb	r1, [r3, #0]
   29c40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   29c44:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
   29c48:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   29c4c:	f360 0100 	bfi	r1, r0, #0, #1
   29c50:	f360 0200 	bfi	r2, r0, #0, #1
   29c54:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
   29c58:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   29c5c:	f893 10a0 	ldrb.w	r1, [r3, #160]	; 0xa0
   29c60:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
   29c64:	f360 0100 	bfi	r1, r0, #0, #1
   29c68:	f360 0200 	bfi	r2, r0, #0, #1
   29c6c:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
   29c70:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
   29c74:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   29c78:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   29c7c:	f360 0100 	bfi	r1, r0, #0, #1
   29c80:	f360 0200 	bfi	r2, r0, #0, #1
   29c84:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   29c88:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   29c8c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   29c8e:	200c      	movs	r0, #12
}
   29c90:	bd10      	pop	{r4, pc}
   29c92:	bf00      	nop
   29c94:	20002b00 	.word	0x20002b00
   29c98:	200033eb 	.word	0x200033eb

00029c9c <ll_rl_remove>:
{
   29c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29ca0:	b083      	sub	sp, #12
   29ca2:	4603      	mov	r3, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   29ca4:	2000      	movs	r0, #0
{
   29ca6:	461d      	mov	r5, r3
   29ca8:	9300      	str	r3, [sp, #0]
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   29caa:	f7fa f895 	bl	23dd8 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   29cae:	2800      	cmp	r0, #0
   29cb0:	d150      	bne.n	29d54 <ll_rl_remove+0xb8>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   29cb2:	462b      	mov	r3, r5
   29cb4:	f8df 8140 	ldr.w	r8, [pc, #320]	; 29df8 <ll_rl_remove+0x15c>
   29cb8:	f813 bb01 	ldrb.w	fp, [r3], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   29cbc:	4604      	mov	r4, r0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   29cbe:	f00b 0b01 	and.w	fp, fp, #1
   29cc2:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
   29cc6:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   29cca:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   29cce:	f816 2035 	ldrb.w	r2, [r6, r5, lsl #3]
   29cd2:	07d0      	lsls	r0, r2, #31
   29cd4:	ea4f 0984 	mov.w	r9, r4, lsl #2
   29cd8:	f3c2 1180 	ubfx	r1, r2, #6, #1
   29cdc:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   29ce0:	d501      	bpl.n	29ce6 <ll_rl_remove+0x4a>
   29ce2:	4559      	cmp	r1, fp
   29ce4:	d008      	beq.n	29cf8 <ll_rl_remove+0x5c>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   29ce6:	3401      	adds	r4, #1
   29ce8:	2c08      	cmp	r4, #8
   29cea:	f108 0828 	add.w	r8, r8, #40	; 0x28
   29cee:	d1ea      	bne.n	29cc6 <ll_rl_remove+0x2a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   29cf0:	2002      	movs	r0, #2
}
   29cf2:	b003      	add	sp, #12
   29cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   29cf8:	4619      	mov	r1, r3
   29cfa:	4640      	mov	r0, r8
   29cfc:	2206      	movs	r2, #6
   29cfe:	9301      	str	r3, [sp, #4]
   29d00:	f00b fc09 	bl	35516 <memcmp>
   29d04:	9b01      	ldr	r3, [sp, #4]
   29d06:	4607      	mov	r7, r0
   29d08:	2800      	cmp	r0, #0
   29d0a:	d1ec      	bne.n	29ce6 <ll_rl_remove+0x4a>
		if (rl[i].pirk) {
   29d0c:	f816 200a 	ldrb.w	r2, [r6, sl]
   29d10:	0752      	lsls	r2, r2, #29
   29d12:	d432      	bmi.n	29d7a <ll_rl_remove+0xde>
		j = fal_find(id_addr->type, id_addr->a.val, NULL);
   29d14:	9a00      	ldr	r2, [sp, #0]
   29d16:	4d39      	ldr	r5, [pc, #228]	; (29dfc <ll_rl_remove+0x160>)
   29d18:	f892 a000 	ldrb.w	sl, [r2]
	for (i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   29d1c:	f1a5 0802 	sub.w	r8, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   29d20:	f00a 0a01 	and.w	sl, sl, #1
   29d24:	f818 2037 	ldrb.w	r2, [r8, r7, lsl #3]
   29d28:	f3c2 0140 	ubfx	r1, r2, #1, #1
   29d2c:	07d2      	lsls	r2, r2, #31
   29d2e:	d501      	bpl.n	29d34 <ll_rl_remove+0x98>
   29d30:	4551      	cmp	r1, sl
   29d32:	d013      	beq.n	29d5c <ll_rl_remove+0xc0>
	for (i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   29d34:	3701      	adds	r7, #1
   29d36:	2f08      	cmp	r7, #8
   29d38:	f105 0508 	add.w	r5, r5, #8
   29d3c:	d1f2      	bne.n	29d24 <ll_rl_remove+0x88>
		rl[i].taken = 0U;
   29d3e:	44a1      	add	r9, r4
		return 0;
   29d40:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   29d42:	f816 3039 	ldrb.w	r3, [r6, r9, lsl #3]
   29d46:	f36f 0300 	bfc	r3, #0, #1
   29d4a:	f806 3039 	strb.w	r3, [r6, r9, lsl #3]
}
   29d4e:	b003      	add	sp, #12
   29d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   29d54:	200c      	movs	r0, #12
}
   29d56:	b003      	add	sp, #12
   29d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   29d5c:	4619      	mov	r1, r3
   29d5e:	2206      	movs	r2, #6
   29d60:	4628      	mov	r0, r5
   29d62:	9300      	str	r3, [sp, #0]
   29d64:	f00b fbd7 	bl	35516 <memcmp>
   29d68:	9b00      	ldr	r3, [sp, #0]
   29d6a:	2800      	cmp	r0, #0
   29d6c:	d1e2      	bne.n	29d34 <ll_rl_remove+0x98>
			fal[j].rl_idx = FILTER_IDX_NONE;
   29d6e:	eb08 08c7 	add.w	r8, r8, r7, lsl #3
   29d72:	23ff      	movs	r3, #255	; 0xff
   29d74:	f888 3001 	strb.w	r3, [r8, #1]
   29d78:	e7e1      	b.n	29d3e <ll_rl_remove+0xa2>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   29d7a:	f8df a084 	ldr.w	sl, [pc, #132]	; 29e00 <ll_rl_remove+0x164>
   29d7e:	f89a 8000 	ldrb.w	r8, [sl]
   29d82:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			if (pj && pi != pj) {
   29d86:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
   29d8a:	d002      	beq.n	29d92 <ll_rl_remove+0xf6>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   29d8c:	7ded      	ldrb	r5, [r5, #23]
			if (pj && pi != pj) {
   29d8e:	4545      	cmp	r5, r8
   29d90:	d102      	bne.n	29d98 <ll_rl_remove+0xfc>
			peer_irk_count--;
   29d92:	f88a 8000 	strb.w	r8, [sl]
   29d96:	e7bd      	b.n	29d14 <ll_rl_remove+0x78>
				(void)memcpy(peer_irks[pi], peer_irks[pj],
   29d98:	481a      	ldr	r0, [pc, #104]	; (29e04 <ll_rl_remove+0x168>)
   29d9a:	2210      	movs	r2, #16
   29d9c:	eb00 1108 	add.w	r1, r0, r8, lsl #4
   29da0:	eb00 1005 	add.w	r0, r0, r5, lsl #4
   29da4:	f00b fbc7 	bl	35536 <memcpy>
				     k < CONFIG_BT_CTLR_RL_SIZE;
   29da8:	4817      	ldr	r0, [pc, #92]	; (29e08 <ll_rl_remove+0x16c>)
				(void)memcpy(peer_irks[pi], peer_irks[pj],
   29daa:	9b01      	ldr	r3, [sp, #4]
   29dac:	463a      	mov	r2, r7
					if (rl[k].taken && rl[k].pirk &&
   29dae:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   29db2:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
   29db6:	f816 1031 	ldrb.w	r1, [r6, r1, lsl #3]
   29dba:	f011 0f01 	tst.w	r1, #1
   29dbe:	d004      	beq.n	29dca <ll_rl_remove+0x12e>
   29dc0:	0749      	lsls	r1, r1, #29
   29dc2:	d502      	bpl.n	29dca <ll_rl_remove+0x12e>
   29dc4:	7dc1      	ldrb	r1, [r0, #23]
   29dc6:	4541      	cmp	r1, r8
   29dc8:	d00b      	beq.n	29de2 <ll_rl_remove+0x146>
				     k < CONFIG_BT_CTLR_RL_SIZE;
   29dca:	3201      	adds	r2, #1
   29dcc:	2a08      	cmp	r2, #8
   29dce:	f100 0028 	add.w	r0, r0, #40	; 0x28
   29dd2:	d1ec      	bne.n	29dae <ll_rl_remove+0x112>
			peer_irk_count--;
   29dd4:	f89a 8000 	ldrb.w	r8, [sl]
   29dd8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   29ddc:	fa5f f888 	uxtb.w	r8, r8
   29de0:	e7d7      	b.n	29d92 <ll_rl_remove+0xf6>
   29de2:	f89a 8000 	ldrb.w	r8, [sl]
						peer_irk_rl_ids[pi] = k;
   29de6:	4909      	ldr	r1, [pc, #36]	; (29e0c <ll_rl_remove+0x170>)
						rl[k].pirk_idx = pi;
   29de8:	f88c 5017 	strb.w	r5, [ip, #23]
			peer_irk_count--;
   29dec:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
						peer_irk_rl_ids[pi] = k;
   29df0:	554a      	strb	r2, [r1, r5]
			peer_irk_count--;
   29df2:	fa5f f888 	uxtb.w	r8, r8
						break;
   29df6:	e7cc      	b.n	29d92 <ll_rl_remove+0xf6>
   29df8:	20002b01 	.word	0x20002b01
   29dfc:	20002c42 	.word	0x20002c42
   29e00:	200033eb 	.word	0x200033eb
   29e04:	20002a80 	.word	0x20002a80
   29e08:	20002b00 	.word	0x20002b00
   29e0c:	20002a78 	.word	0x20002a78

00029e10 <ll_rl_crpa_set>:
{
   29e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   29e14:	795c      	ldrb	r4, [r3, #5]
   29e16:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   29e1a:	2c40      	cmp	r4, #64	; 0x40
   29e1c:	d001      	beq.n	29e22 <ll_rl_crpa_set+0x12>
}
   29e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (id_addr) {
   29e22:	461d      	mov	r5, r3
   29e24:	460f      	mov	r7, r1
   29e26:	b1f1      	cbz	r1, 29e66 <ll_rl_crpa_set+0x56>
   29e28:	f8df 8060 	ldr.w	r8, [pc, #96]	; 29e8c <ll_rl_crpa_set+0x7c>
   29e2c:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   29e2e:	f000 0601 	and.w	r6, r0, #1
   29e32:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
   29e36:	e004      	b.n	29e42 <ll_rl_crpa_set+0x32>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   29e38:	3401      	adds	r4, #1
   29e3a:	2c08      	cmp	r4, #8
   29e3c:	f108 0828 	add.w	r8, r8, #40	; 0x28
   29e40:	d0ed      	beq.n	29e1e <ll_rl_crpa_set+0xe>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   29e42:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   29e46:	f819 2033 	ldrb.w	r2, [r9, r3, lsl #3]
   29e4a:	f3c2 1380 	ubfx	r3, r2, #6, #1
   29e4e:	07d2      	lsls	r2, r2, #31
   29e50:	d5f2      	bpl.n	29e38 <ll_rl_crpa_set+0x28>
   29e52:	42b3      	cmp	r3, r6
   29e54:	d1f0      	bne.n	29e38 <ll_rl_crpa_set+0x28>
   29e56:	2206      	movs	r2, #6
   29e58:	4640      	mov	r0, r8
   29e5a:	4639      	mov	r1, r7
   29e5c:	f00b fb5b 	bl	35516 <memcmp>
   29e60:	2800      	cmp	r0, #0
   29e62:	d1e9      	bne.n	29e38 <ll_rl_crpa_set+0x28>
   29e64:	b2e2      	uxtb	r2, r4
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   29e66:	2a07      	cmp	r2, #7
   29e68:	d8d9      	bhi.n	29e1e <ll_rl_crpa_set+0xe>
   29e6a:	4809      	ldr	r0, [pc, #36]	; (29e90 <ll_rl_crpa_set+0x80>)
   29e6c:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   29e70:	f810 3033 	ldrb.w	r3, [r0, r3, lsl #3]
   29e74:	07db      	lsls	r3, r3, #31
   29e76:	d5d2      	bpl.n	29e1e <ll_rl_crpa_set+0xe>
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
   29e78:	2328      	movs	r3, #40	; 0x28
   29e7a:	fb03 0002 	mla	r0, r3, r2, r0
   29e7e:	4629      	mov	r1, r5
   29e80:	2206      	movs	r2, #6
}
   29e82:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
   29e86:	3018      	adds	r0, #24
   29e88:	f00b bb55 	b.w	35536 <memcpy>
   29e8c:	20002b01 	.word	0x20002b01
   29e90:	20002b00 	.word	0x20002b00

00029e94 <ll_rl_crpa_get>:
{
   29e94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   29e98:	4682      	mov	sl, r0
   29e9a:	4e1a      	ldr	r6, [pc, #104]	; (29f04 <ll_rl_crpa_get+0x70>)
   29e9c:	f81a 8b01 	ldrb.w	r8, [sl], #1
{
   29ea0:	4689      	mov	r9, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   29ea2:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   29ea4:	f008 0801 	and.w	r8, r8, #1
   29ea8:	1e77      	subs	r7, r6, #1
   29eaa:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   29eae:	00d5      	lsls	r5, r2, #3
   29eb0:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   29eb4:	f3c3 1280 	ubfx	r2, r3, #6, #1
   29eb8:	07db      	lsls	r3, r3, #31
   29eba:	f104 0401 	add.w	r4, r4, #1
   29ebe:	d501      	bpl.n	29ec4 <ll_rl_crpa_get+0x30>
   29ec0:	4542      	cmp	r2, r8
   29ec2:	d006      	beq.n	29ed2 <ll_rl_crpa_get+0x3e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   29ec4:	2c08      	cmp	r4, #8
   29ec6:	f106 0628 	add.w	r6, r6, #40	; 0x28
   29eca:	d1ee      	bne.n	29eaa <ll_rl_crpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   29ecc:	2002      	movs	r0, #2
}
   29ece:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   29ed2:	4630      	mov	r0, r6
   29ed4:	2206      	movs	r2, #6
   29ed6:	4651      	mov	r1, sl
   29ed8:	f00b fb1d 	bl	35516 <memcmp>
   29edc:	4683      	mov	fp, r0
   29ede:	2800      	cmp	r0, #0
   29ee0:	d1f0      	bne.n	29ec4 <ll_rl_crpa_get+0x30>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   29ee2:	f105 0218 	add.w	r2, r5, #24
   29ee6:	4417      	add	r7, r2
   29ee8:	2106      	movs	r1, #6
   29eea:	4638      	mov	r0, r7
   29eec:	f7f5 fa92 	bl	1f414 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   29ef0:	2800      	cmp	r0, #0
   29ef2:	d0eb      	beq.n	29ecc <ll_rl_crpa_get+0x38>
   29ef4:	2206      	movs	r2, #6
   29ef6:	4639      	mov	r1, r7
   29ef8:	4648      	mov	r0, r9
   29efa:	f00b fb1c 	bl	35536 <memcpy>
		return 0;
   29efe:	4658      	mov	r0, fp
}
   29f00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29f04:	20002b01 	.word	0x20002b01

00029f08 <ll_rl_lrpa_get>:
{
   29f08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   29f0c:	4682      	mov	sl, r0
   29f0e:	4e16      	ldr	r6, [pc, #88]	; (29f68 <ll_rl_lrpa_get+0x60>)
   29f10:	f81a 8b01 	ldrb.w	r8, [sl], #1
{
   29f14:	4689      	mov	r9, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   29f16:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   29f18:	f008 0801 	and.w	r8, r8, #1
   29f1c:	1e77      	subs	r7, r6, #1
   29f1e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   29f22:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   29f26:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   29f2a:	f3c3 1280 	ubfx	r2, r3, #6, #1
   29f2e:	07db      	lsls	r3, r3, #31
   29f30:	f104 0401 	add.w	r4, r4, #1
   29f34:	d501      	bpl.n	29f3a <ll_rl_lrpa_get+0x32>
   29f36:	4542      	cmp	r2, r8
   29f38:	d006      	beq.n	29f48 <ll_rl_lrpa_get+0x40>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   29f3a:	2c08      	cmp	r4, #8
   29f3c:	f106 0628 	add.w	r6, r6, #40	; 0x28
   29f40:	d1ed      	bne.n	29f1e <ll_rl_lrpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   29f42:	2002      	movs	r0, #2
}
   29f44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   29f48:	4630      	mov	r0, r6
   29f4a:	2206      	movs	r2, #6
   29f4c:	4651      	mov	r1, sl
   29f4e:	f00b fae2 	bl	35516 <memcmp>
   29f52:	4683      	mov	fp, r0
   29f54:	2800      	cmp	r0, #0
   29f56:	d1f0      	bne.n	29f3a <ll_rl_lrpa_get+0x32>
   29f58:	6a69      	ldr	r1, [r5, #36]	; 0x24
   29f5a:	2206      	movs	r2, #6
   29f5c:	4648      	mov	r0, r9
   29f5e:	f00b faea 	bl	35536 <memcpy>
		return 0;
   29f62:	4658      	mov	r0, fp
}
   29f64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29f68:	20002b01 	.word	0x20002b01

00029f6c <ll_rl_enable>:
{
   29f6c:	b510      	push	{r4, lr}
   29f6e:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   29f70:	2000      	movs	r0, #0
   29f72:	f7f9 ff31 	bl	23dd8 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   29f76:	b940      	cbnz	r0, 29f8a <ll_rl_enable+0x1e>
	switch (enable) {
   29f78:	b11c      	cbz	r4, 29f82 <ll_rl_enable+0x16>
   29f7a:	2c01      	cmp	r4, #1
   29f7c:	d001      	beq.n	29f82 <ll_rl_enable+0x16>
   29f7e:	2012      	movs	r0, #18
}
   29f80:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   29f82:	4b03      	ldr	r3, [pc, #12]	; (29f90 <ll_rl_enable+0x24>)
   29f84:	701c      	strb	r4, [r3, #0]
	return 0;
   29f86:	2000      	movs	r0, #0
}
   29f88:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   29f8a:	200c      	movs	r0, #12
}
   29f8c:	bd10      	pop	{r4, pc}
   29f8e:	bf00      	nop
   29f90:	200033ec 	.word	0x200033ec

00029f94 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   29f94:	4b03      	ldr	r3, [pc, #12]	; (29fa4 <ll_rl_timeout_set+0x10>)
   29f96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29f9a:	fb02 f000 	mul.w	r0, r2, r0
   29f9e:	6018      	str	r0, [r3, #0]
}
   29fa0:	4770      	bx	lr
   29fa2:	bf00      	nop
   29fa4:	20002a10 	.word	0x20002a10

00029fa8 <ll_priv_mode_set>:
{
   29fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29fac:	4682      	mov	sl, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   29fae:	2000      	movs	r0, #0
{
   29fb0:	4688      	mov	r8, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   29fb2:	f7f9 ff11 	bl	23dd8 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   29fb6:	bb70      	cbnz	r0, 2a016 <ll_priv_mode_set+0x6e>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   29fb8:	4e1d      	ldr	r6, [pc, #116]	; (2a030 <ll_priv_mode_set+0x88>)
   29fba:	f81a 9b01 	ldrb.w	r9, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   29fbe:	4604      	mov	r4, r0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   29fc0:	f009 0901 	and.w	r9, r9, #1
   29fc4:	1e77      	subs	r7, r6, #1
   29fc6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   29fca:	00d5      	lsls	r5, r2, #3
   29fcc:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   29fd0:	f3c3 1280 	ubfx	r2, r3, #6, #1
   29fd4:	07db      	lsls	r3, r3, #31
   29fd6:	f104 0401 	add.w	r4, r4, #1
   29fda:	d501      	bpl.n	29fe0 <ll_priv_mode_set+0x38>
   29fdc:	454a      	cmp	r2, r9
   29fde:	d006      	beq.n	29fee <ll_priv_mode_set+0x46>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   29fe0:	2c08      	cmp	r4, #8
   29fe2:	f106 0628 	add.w	r6, r6, #40	; 0x28
   29fe6:	d1ee      	bne.n	29fc6 <ll_priv_mode_set+0x1e>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   29fe8:	2002      	movs	r0, #2
}
   29fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   29fee:	4630      	mov	r0, r6
   29ff0:	2206      	movs	r2, #6
   29ff2:	4651      	mov	r1, sl
   29ff4:	f00b fa8f 	bl	35516 <memcmp>
   29ff8:	2800      	cmp	r0, #0
   29ffa:	d1f1      	bne.n	29fe0 <ll_priv_mode_set+0x38>
		switch (mode) {
   29ffc:	f1b8 0f00 	cmp.w	r8, #0
   2a000:	d00f      	beq.n	2a022 <ll_priv_mode_set+0x7a>
   2a002:	f1b8 0f01 	cmp.w	r8, #1
   2a006:	d109      	bne.n	2a01c <ll_priv_mode_set+0x74>
			rl[i].dev = 1U;
   2a008:	5d7b      	ldrb	r3, [r7, r5]
   2a00a:	f043 0310 	orr.w	r3, r3, #16
   2a00e:	557b      	strb	r3, [r7, r5]
	return 0;
   2a010:	2000      	movs	r0, #0
}
   2a012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   2a016:	200c      	movs	r0, #12
}
   2a018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch (mode) {
   2a01c:	2012      	movs	r0, #18
}
   2a01e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rl[i].dev = 0U;
   2a022:	5d7b      	ldrb	r3, [r7, r5]
   2a024:	f368 1304 	bfi	r3, r8, #4, #1
   2a028:	557b      	strb	r3, [r7, r5]
	return 0;
   2a02a:	2000      	movs	r0, #0
   2a02c:	e7f1      	b.n	2a012 <ll_priv_mode_set+0x6a>
   2a02e:	bf00      	nop
   2a030:	20002b01 	.word	0x20002b01

0002a034 <ull_filter_reset>:
{
   2a034:	b5d0      	push	{r4, r6, r7, lr}
   2a036:	4c31      	ldr	r4, [pc, #196]	; (2a0fc <ull_filter_reset+0xc8>)
   2a038:	4931      	ldr	r1, [pc, #196]	; (2a100 <ull_filter_reset+0xcc>)
	for (int i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   2a03a:	2300      	movs	r3, #0
   2a03c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		uint8_t j = fal[i].rl_idx;
   2a040:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
		if (j < ARRAY_SIZE(rl)) {
   2a044:	2a07      	cmp	r2, #7
			rl[j].fal = 0U;
   2a046:	eb02 0e82 	add.w	lr, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   2a04a:	d805      	bhi.n	2a058 <ull_filter_reset+0x24>
			rl[j].fal = 0U;
   2a04c:	f811 203e 	ldrb.w	r2, [r1, lr, lsl #3]
   2a050:	f36f 1245 	bfc	r2, #5, #1
   2a054:	f801 203e 	strb.w	r2, [r1, lr, lsl #3]
		fal[i].taken = 0U;
   2a058:	f81c 2033 	ldrb.w	r2, [ip, r3, lsl #3]
   2a05c:	f36f 0200 	bfc	r2, #0, #1
   2a060:	f80c 2033 	strb.w	r2, [ip, r3, lsl #3]
	for (int i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   2a064:	3301      	adds	r3, #1
   2a066:	2b08      	cmp	r3, #8
   2a068:	d1ea      	bne.n	2a040 <ull_filter_reset+0xc>
	rl_enable = 0U;
   2a06a:	4a26      	ldr	r2, [pc, #152]	; (2a104 <ull_filter_reset+0xd0>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   2a06c:	4c26      	ldr	r4, [pc, #152]	; (2a108 <ull_filter_reset+0xd4>)
	rl_enable = 0U;
   2a06e:	2300      	movs	r3, #0
   2a070:	7013      	strb	r3, [r2, #0]
		rl[i].taken = 0U;
   2a072:	780a      	ldrb	r2, [r1, #0]
   2a074:	f363 0200 	bfi	r2, r3, #0, #1
   2a078:	700a      	strb	r2, [r1, #0]
   2a07a:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
   2a07e:	f363 0200 	bfi	r2, r3, #0, #1
   2a082:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
   2a086:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
   2a08a:	f363 0200 	bfi	r2, r3, #0, #1
   2a08e:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
   2a092:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   2a096:	f363 0200 	bfi	r2, r3, #0, #1
   2a09a:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   2a09e:	f891 20a0 	ldrb.w	r2, [r1, #160]	; 0xa0
   2a0a2:	f363 0200 	bfi	r2, r3, #0, #1
   2a0a6:	f881 20a0 	strb.w	r2, [r1, #160]	; 0xa0
   2a0aa:	f891 20c8 	ldrb.w	r2, [r1, #200]	; 0xc8
   2a0ae:	f363 0200 	bfi	r2, r3, #0, #1
   2a0b2:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
   2a0b6:	f891 20f0 	ldrb.w	r2, [r1, #240]	; 0xf0
   2a0ba:	f363 0200 	bfi	r2, r3, #0, #1
   2a0be:	f881 20f0 	strb.w	r2, [r1, #240]	; 0xf0
   2a0c2:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
   2a0c6:	f363 0200 	bfi	r2, r3, #0, #1
   2a0ca:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   2a0ce:	4a0f      	ldr	r2, [pc, #60]	; (2a10c <ull_filter_reset+0xd8>)
   2a0d0:	7013      	strb	r3, [r2, #0]
	rpa_last_ms = -1;
   2a0d2:	4b0f      	ldr	r3, [pc, #60]	; (2a110 <ull_filter_reset+0xdc>)
   2a0d4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2a0d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2a0dc:	e9c3 6700 	strd	r6, r7, [r3]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   2a0e0:	4b0c      	ldr	r3, [pc, #48]	; (2a114 <ull_filter_reset+0xe0>)
   2a0e2:	6023      	str	r3, [r4, #0]
	if (init) {
   2a0e4:	b128      	cbz	r0, 2a0f2 <ull_filter_reset+0xbe>
}
   2a0e6:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
		k_work_init_delayable(&rpa_work, rpa_timeout);
   2a0ea:	490b      	ldr	r1, [pc, #44]	; (2a118 <ull_filter_reset+0xe4>)
   2a0ec:	480b      	ldr	r0, [pc, #44]	; (2a11c <ull_filter_reset+0xe8>)
   2a0ee:	f00e bcae 	b.w	38a4e <k_work_init_delayable>
}
   2a0f2:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
		k_work_cancel_delayable(&rpa_work);
   2a0f6:	4809      	ldr	r0, [pc, #36]	; (2a11c <ull_filter_reset+0xe8>)
   2a0f8:	f00e bcb7 	b.w	38a6a <k_work_cancel_delayable>
   2a0fc:	20002c41 	.word	0x20002c41
   2a100:	20002b00 	.word	0x20002b00
   2a104:	200033ec 	.word	0x200033ec
   2a108:	20002a10 	.word	0x20002a10
   2a10c:	200033eb 	.word	0x200033eb
   2a110:	20001888 	.word	0x20001888
   2a114:	000dbba0 	.word	0x000dbba0
   2a118:	0002a39d 	.word	0x0002a39d
   2a11c:	20001858 	.word	0x20001858

0002a120 <ull_filter_lll_get>:
	return &rl_filter;
   2a120:	4a03      	ldr	r2, [pc, #12]	; (2a130 <ull_filter_lll_get+0x10>)
   2a122:	4b04      	ldr	r3, [pc, #16]	; (2a134 <ull_filter_lll_get+0x14>)
}
   2a124:	2800      	cmp	r0, #0
   2a126:	bf14      	ite	ne
   2a128:	4610      	movne	r0, r2
   2a12a:	4618      	moveq	r0, r3
   2a12c:	4770      	bx	lr
   2a12e:	bf00      	nop
   2a130:	20002c80 	.word	0x20002c80
   2a134:	20002a14 	.word	0x20002a14

0002a138 <ull_filter_adv_scan_state_cb>:
	if (bm) {
   2a138:	b1a8      	cbz	r0, 2a166 <ull_filter_adv_scan_state_cb+0x2e>
{
   2a13a:	b510      	push	{r4, lr}
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   2a13c:	4a0b      	ldr	r2, [pc, #44]	; (2a16c <ull_filter_adv_scan_state_cb+0x34>)
   2a13e:	6812      	ldr	r2, [r2, #0]
   2a140:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   2a144:	f240 30e7 	movw	r0, #999	; 0x3e7
   2a148:	2100      	movs	r1, #0
   2a14a:	fbe2 0103 	umlal	r0, r1, r2, r3
   2a14e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2a152:	2300      	movs	r3, #0
   2a154:	f7e6 f824 	bl	101a0 <__aeabi_uldivmod>
}
   2a158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a15c:	4602      	mov	r2, r0
   2a15e:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   2a160:	4803      	ldr	r0, [pc, #12]	; (2a170 <ull_filter_adv_scan_state_cb+0x38>)
   2a162:	f007 bebd 	b.w	31ee0 <k_work_schedule>
	k_work_cancel_delayable(&rpa_work);
   2a166:	4802      	ldr	r0, [pc, #8]	; (2a170 <ull_filter_adv_scan_state_cb+0x38>)
   2a168:	f00e bc7f 	b.w	38a6a <k_work_cancel_delayable>
   2a16c:	20002a10 	.word	0x20002a10
   2a170:	20001858 	.word	0x20001858

0002a174 <ull_filter_adv_update>:
{
   2a174:	b508      	push	{r3, lr}
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   2a176:	4b09      	ldr	r3, [pc, #36]	; (2a19c <ull_filter_adv_update+0x28>)
   2a178:	2200      	movs	r2, #0
   2a17a:	801a      	strh	r2, [r3, #0]
	if (adv_fp &&
   2a17c:	b930      	cbnz	r0, 2a18c <ull_filter_adv_update+0x18>
	if (rl_enable &&
   2a17e:	4b08      	ldr	r3, [pc, #32]	; (2a1a0 <ull_filter_adv_update+0x2c>)
	filter->enable_bitmask = 0;
   2a180:	4a08      	ldr	r2, [pc, #32]	; (2a1a4 <ull_filter_adv_update+0x30>)
	if (rl_enable &&
   2a182:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   2a184:	2100      	movs	r1, #0
   2a186:	8011      	strh	r1, [r2, #0]
	if (rl_enable &&
   2a188:	b91b      	cbnz	r3, 2a192 <ull_filter_adv_update+0x1e>
}
   2a18a:	bd08      	pop	{r3, pc}
		fal_update();
   2a18c:	f7ff fbba 	bl	29904 <fal_update>
   2a190:	e7f5      	b.n	2a17e <ull_filter_adv_update+0xa>
}
   2a192:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   2a196:	f7ff bb7d 	b.w	29894 <rl_update>
   2a19a:	bf00      	nop
   2a19c:	20002c80 	.word	0x20002c80
   2a1a0:	200033ec 	.word	0x200033ec
   2a1a4:	20002a14 	.word	0x20002a14

0002a1a8 <ull_filter_rpa_update>:
{
   2a1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a1ac:	4682      	mov	sl, r0
   2a1ae:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   2a1b0:	f00e fdfb 	bl	38daa <z_impl_k_uptime_ticks>
   2a1b4:	014a      	lsls	r2, r1, #5
   2a1b6:	0143      	lsls	r3, r0, #5
   2a1b8:	1a1b      	subs	r3, r3, r0
   2a1ba:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   2a1be:	eb62 0201 	sbc.w	r2, r2, r1
   2a1c2:	0092      	lsls	r2, r2, #2
   2a1c4:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   2a1c8:	009b      	lsls	r3, r3, #2
   2a1ca:	181b      	adds	r3, r3, r0
   2a1cc:	eb41 0902 	adc.w	r9, r1, r2
   2a1d0:	ea4f 09c9 	mov.w	r9, r9, lsl #3
   2a1d4:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
   2a1d8:	f3c3 3310 	ubfx	r3, r3, #12, #17
   2a1dc:	ea43 4349 	orr.w	r3, r3, r9, lsl #17
   2a1e0:	ea4f 39d9 	mov.w	r9, r9, lsr #15
	bool all = timeout || (rpa_last_ms == -1) ||
   2a1e4:	f1ba 0f00 	cmp.w	sl, #0
   2a1e8:	d116      	bne.n	2a218 <ull_filter_rpa_update+0x70>
   2a1ea:	4a64      	ldr	r2, [pc, #400]	; (2a37c <ull_filter_rpa_update+0x1d4>)
   2a1ec:	e9d2 1200 	ldrd	r1, r2, [r2]
   2a1f0:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   2a1f4:	bf08      	it	eq
   2a1f6:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
   2a1fa:	d00d      	beq.n	2a218 <ull_filter_rpa_update+0x70>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   2a1fc:	4860      	ldr	r0, [pc, #384]	; (2a380 <ull_filter_rpa_update+0x1d8>)
   2a1fe:	6800      	ldr	r0, [r0, #0]
   2a200:	1a59      	subs	r1, r3, r1
   2a202:	eb69 0202 	sbc.w	r2, r9, r2
	bool all = timeout || (rpa_last_ms == -1) ||
   2a206:	4281      	cmp	r1, r0
   2a208:	f172 0200 	sbcs.w	r2, r2, #0
   2a20c:	bfac      	ite	ge
   2a20e:	f04f 0b01 	movge.w	fp, #1
   2a212:	f04f 0b00 	movlt.w	fp, #0
   2a216:	e001      	b.n	2a21c <ull_filter_rpa_update+0x74>
   2a218:	f04f 0b01 	mov.w	fp, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   2a21c:	4e59      	ldr	r6, [pc, #356]	; (2a384 <ull_filter_rpa_update+0x1dc>)
   2a21e:	f8cd a004 	str.w	sl, [sp, #4]
   2a222:	f8df 8164 	ldr.w	r8, [pc, #356]	; 2a388 <ull_filter_rpa_update+0x1e0>
	bool all = timeout || (rpa_last_ms == -1) ||
   2a226:	2400      	movs	r4, #0
   2a228:	1ff7      	subs	r7, r6, #7
   2a22a:	469a      	mov	sl, r3
   2a22c:	e00d      	b.n	2a24a <ull_filter_rpa_update+0xa2>
			rl[i].rpas_ready = 1U;
   2a22e:	4425      	add	r5, r4
   2a230:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   2a234:	f043 0302 	orr.w	r3, r3, #2
   2a238:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   2a23c:	3401      	adds	r4, #1
   2a23e:	2c08      	cmp	r4, #8
   2a240:	f108 0806 	add.w	r8, r8, #6
   2a244:	f106 0628 	add.w	r6, r6, #40	; 0x28
   2a248:	d026      	beq.n	2a298 <ull_filter_rpa_update+0xf0>
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   2a24a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2a24e:	00a5      	lsls	r5, r4, #2
   2a250:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   2a254:	07da      	lsls	r2, r3, #31
   2a256:	d5f1      	bpl.n	2a23c <ull_filter_rpa_update+0x94>
   2a258:	f1bb 0f00 	cmp.w	fp, #0
   2a25c:	d101      	bne.n	2a262 <ull_filter_rpa_update+0xba>
   2a25e:	0798      	lsls	r0, r3, #30
   2a260:	d4ec      	bmi.n	2a23c <ull_filter_rpa_update+0x94>
			if (rl[i].pirk) {
   2a262:	192b      	adds	r3, r5, r4
   2a264:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   2a268:	0759      	lsls	r1, r3, #29
   2a26a:	d453      	bmi.n	2a314 <ull_filter_rpa_update+0x16c>
			if (rl[i].lirk) {
   2a26c:	192b      	adds	r3, r5, r4
   2a26e:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   2a272:	071a      	lsls	r2, r3, #28
   2a274:	d5db      	bpl.n	2a22e <ull_filter_rpa_update+0x86>
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   2a276:	a902      	add	r1, sp, #8
   2a278:	4630      	mov	r0, r6
   2a27a:	f00b f9d4 	bl	35626 <bt_rpa_create>
				LL_ASSERT(!err);
   2a27e:	2800      	cmp	r0, #0
   2a280:	d16d      	bne.n	2a35e <ull_filter_rpa_update+0x1b6>
				rl[i].local_rpa = &rpa;
   2a282:	ab02      	add	r3, sp, #8
   2a284:	f8c6 301d 	str.w	r3, [r6, #29]
   2a288:	4619      	mov	r1, r3
   2a28a:	2206      	movs	r2, #6
   2a28c:	4640      	mov	r0, r8
   2a28e:	f00b f952 	bl	35536 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   2a292:	f8c6 801d 	str.w	r8, [r6, #29]
   2a296:	e7ca      	b.n	2a22e <ull_filter_rpa_update+0x86>
	if (all) {
   2a298:	4653      	mov	r3, sl
   2a29a:	f8dd a004 	ldr.w	sl, [sp, #4]
   2a29e:	f1bb 0f00 	cmp.w	fp, #0
   2a2a2:	d002      	beq.n	2a2aa <ull_filter_rpa_update+0x102>
		rpa_last_ms = now;
   2a2a4:	4a35      	ldr	r2, [pc, #212]	; (2a37c <ull_filter_rpa_update+0x1d4>)
   2a2a6:	e9c2 3900 	strd	r3, r9, [r2]
	if (timeout) {
   2a2aa:	f1ba 0f00 	cmp.w	sl, #0
   2a2ae:	d008      	beq.n	2a2c2 <ull_filter_rpa_update+0x11a>
			adv = ull_adv_is_enabled_get(handle);
   2a2b0:	2000      	movs	r0, #0
   2a2b2:	f7f9 fd83 	bl	23dbc <ull_adv_is_enabled_get>
			if (adv) {
   2a2b6:	4604      	mov	r4, r0
   2a2b8:	b118      	cbz	r0, 2a2c2 <ull_filter_rpa_update+0x11a>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   2a2ba:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   2a2be:	075b      	lsls	r3, r3, #29
   2a2c0:	d402      	bmi.n	2a2c8 <ull_filter_rpa_update+0x120>
}
   2a2c2:	b007      	add	sp, #28
   2a2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (lll->rl_idx >= ARRAY_SIZE(rl)) {
   2a2c8:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   2a2cc:	2b07      	cmp	r3, #7
   2a2ce:	d8f8      	bhi.n	2a2c2 <ull_filter_rpa_update+0x11a>
	pri_idx = UINT8_MAX;
   2a2d0:	23ff      	movs	r3, #255	; 0xff
   2a2d2:	f88d 3008 	strb.w	r3, [sp, #8]
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   2a2d6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   2a2da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   2a2de:	a902      	add	r1, sp, #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   2a2e0:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   2a2e2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2a2e6:	f001 fa1b 	bl	2b720 <lll_adv_pdu_alloc>
		(void)memcpy(pdu, prev, (PDU_AC_LL_HEADER_SIZE + prev->len));
   2a2ea:	7872      	ldrb	r2, [r6, #1]
   2a2ec:	4605      	mov	r5, r0
   2a2ee:	3202      	adds	r2, #2
   2a2f0:	4631      	mov	r1, r6
   2a2f2:	f00b f920 	bl	35536 <memcpy>
	if (pdu) {
   2a2f6:	2d00      	cmp	r5, #0
   2a2f8:	d0e3      	beq.n	2a2c2 <ull_filter_rpa_update+0x11a>
		ull_adv_pdu_update_addrs(adv, pdu);
   2a2fa:	4629      	mov	r1, r5
   2a2fc:	4620      	mov	r0, r4
   2a2fe:	f7f9 fd87 	bl	23e10 <ull_adv_pdu_update_addrs>
		if (pri_idx != UINT8_MAX) {
   2a302:	f89d 3008 	ldrb.w	r3, [sp, #8]
   2a306:	2bff      	cmp	r3, #255	; 0xff
   2a308:	d0db      	beq.n	2a2c2 <ull_filter_rpa_update+0x11a>
	pdu->last = idx;
   2a30a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
   2a30e:	b007      	add	sp, #28
   2a310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	psrc += length - 1;
   2a314:	7c31      	ldrb	r1, [r6, #16]
   2a316:	4b1d      	ldr	r3, [pc, #116]	; (2a38c <ull_filter_rpa_update+0x1e4>)
   2a318:	220f      	movs	r2, #15
   2a31a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
   2a31e:	441a      	add	r2, r3
	for (; length > 0; length--) {
   2a320:	f10d 0017 	add.w	r0, sp, #23
   2a324:	f10d 0307 	add.w	r3, sp, #7
		*pdst++ = *psrc--;
   2a328:	f812 1901 	ldrb.w	r1, [r2], #-1
   2a32c:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   2a330:	4283      	cmp	r3, r0
   2a332:	d1f9      	bne.n	2a328 <ull_filter_rpa_update+0x180>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   2a334:	f106 0117 	add.w	r1, r6, #23
   2a338:	a802      	add	r0, sp, #8
   2a33a:	f00b f974 	bl	35626 <bt_rpa_create>
				LL_ASSERT(!err);
   2a33e:	2800      	cmp	r0, #0
   2a340:	d094      	beq.n	2a26c <ull_filter_rpa_update+0xc4>
   2a342:	4a13      	ldr	r2, [pc, #76]	; (2a390 <ull_filter_rpa_update+0x1e8>)
   2a344:	4913      	ldr	r1, [pc, #76]	; (2a394 <ull_filter_rpa_update+0x1ec>)
   2a346:	4814      	ldr	r0, [pc, #80]	; (2a398 <ull_filter_rpa_update+0x1f0>)
   2a348:	f240 23e9 	movw	r3, #745	; 0x2e9
   2a34c:	f009 f864 	bl	33418 <assert_print>
   2a350:	4040      	eors	r0, r0
   2a352:	f380 8811 	msr	BASEPRI, r0
   2a356:	f04f 0003 	mov.w	r0, #3
   2a35a:	df02      	svc	2
   2a35c:	e786      	b.n	2a26c <ull_filter_rpa_update+0xc4>
				LL_ASSERT(!err);
   2a35e:	4a0c      	ldr	r2, [pc, #48]	; (2a390 <ull_filter_rpa_update+0x1e8>)
   2a360:	490c      	ldr	r1, [pc, #48]	; (2a394 <ull_filter_rpa_update+0x1ec>)
   2a362:	480d      	ldr	r0, [pc, #52]	; (2a398 <ull_filter_rpa_update+0x1f0>)
   2a364:	f240 23f6 	movw	r3, #758	; 0x2f6
   2a368:	f009 f856 	bl	33418 <assert_print>
   2a36c:	4040      	eors	r0, r0
   2a36e:	f380 8811 	msr	BASEPRI, r0
   2a372:	f04f 0003 	mov.w	r0, #3
   2a376:	df02      	svc	2
   2a378:	e783      	b.n	2a282 <ull_filter_rpa_update+0xda>
   2a37a:	bf00      	nop
   2a37c:	20001888 	.word	0x20001888
   2a380:	20002a10 	.word	0x20002a10
   2a384:	20002b07 	.word	0x20002b07
   2a388:	20002a48 	.word	0x20002a48
   2a38c:	20002a80 	.word	0x20002a80
   2a390:	0003abe4 	.word	0x0003abe4
   2a394:	0003a33c 	.word	0x0003a33c
   2a398:	00039f74 	.word	0x00039f74

0002a39c <rpa_timeout>:
{
   2a39c:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   2a39e:	2001      	movs	r0, #1
   2a3a0:	f7ff ff02 	bl	2a1a8 <ull_filter_rpa_update>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   2a3a4:	4a0a      	ldr	r2, [pc, #40]	; (2a3d0 <rpa_timeout+0x34>)
   2a3a6:	6812      	ldr	r2, [r2, #0]
   2a3a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   2a3ac:	f240 30e7 	movw	r0, #999	; 0x3e7
   2a3b0:	2100      	movs	r1, #0
   2a3b2:	fbe2 0103 	umlal	r0, r1, r2, r3
   2a3b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2a3ba:	2300      	movs	r3, #0
   2a3bc:	f7e5 fef0 	bl	101a0 <__aeabi_uldivmod>
}
   2a3c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a3c4:	4602      	mov	r2, r0
   2a3c6:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   2a3c8:	4802      	ldr	r0, [pc, #8]	; (2a3d4 <rpa_timeout+0x38>)
   2a3ca:	f007 bd89 	b.w	31ee0 <k_work_schedule>
   2a3ce:	bf00      	nop
   2a3d0:	20002a10 	.word	0x20002a10
   2a3d4:	20001858 	.word	0x20001858

0002a3d8 <ull_filter_adva_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   2a3d8:	2807      	cmp	r0, #7
   2a3da:	d813      	bhi.n	2a404 <ull_filter_adva_get+0x2c>
{
   2a3dc:	b570      	push	{r4, r5, r6, lr}
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   2a3de:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   2a3e2:	4d10      	ldr	r5, [pc, #64]	; (2a424 <ull_filter_adva_get+0x4c>)
   2a3e4:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   2a3e8:	071a      	lsls	r2, r3, #28
   2a3ea:	4604      	mov	r4, r0
   2a3ec:	ea4f 0680 	mov.w	r6, r0, lsl #2
   2a3f0:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   2a3f4:	d505      	bpl.n	2a402 <ull_filter_adva_get+0x2a>
		LL_ASSERT(rl[rl_idx].rpas_ready);
   2a3f6:	079b      	lsls	r3, r3, #30
   2a3f8:	d506      	bpl.n	2a408 <ull_filter_adva_get+0x30>
		return rl[rl_idx].local_rpa->val;
   2a3fa:	4426      	add	r6, r4
   2a3fc:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
   2a400:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   2a402:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   2a404:	2000      	movs	r0, #0
}
   2a406:	4770      	bx	lr
		LL_ASSERT(rl[rl_idx].rpas_ready);
   2a408:	4a07      	ldr	r2, [pc, #28]	; (2a428 <ull_filter_adva_get+0x50>)
   2a40a:	4908      	ldr	r1, [pc, #32]	; (2a42c <ull_filter_adva_get+0x54>)
   2a40c:	4808      	ldr	r0, [pc, #32]	; (2a430 <ull_filter_adva_get+0x58>)
   2a40e:	f240 331d 	movw	r3, #797	; 0x31d
   2a412:	f009 f801 	bl	33418 <assert_print>
   2a416:	4040      	eors	r0, r0
   2a418:	f380 8811 	msr	BASEPRI, r0
   2a41c:	f04f 0003 	mov.w	r0, #3
   2a420:	df02      	svc	2
   2a422:	e7ea      	b.n	2a3fa <ull_filter_adva_get+0x22>
   2a424:	20002b00 	.word	0x20002b00
   2a428:	0003abe4 	.word	0x0003abe4
   2a42c:	0003ac48 	.word	0x0003ac48
   2a430:	00039f74 	.word	0x00039f74

0002a434 <ull_filter_tgta_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].pirk) {
   2a434:	2807      	cmp	r0, #7
   2a436:	d80c      	bhi.n	2a452 <ull_filter_tgta_get+0x1e>
   2a438:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   2a43c:	4a06      	ldr	r2, [pc, #24]	; (2a458 <ull_filter_tgta_get+0x24>)
   2a43e:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   2a442:	074b      	lsls	r3, r1, #29
   2a444:	d505      	bpl.n	2a452 <ull_filter_tgta_get+0x1e>
		return rl[rl_idx].peer_rpa.val;
   2a446:	2328      	movs	r3, #40	; 0x28
   2a448:	fb03 2200 	mla	r2, r3, r0, r2
   2a44c:	f102 001e 	add.w	r0, r2, #30
   2a450:	4770      	bx	lr
	return NULL;
   2a452:	2000      	movs	r0, #0
   2a454:	4770      	bx	lr
   2a456:	bf00      	nop
   2a458:	20002b00 	.word	0x20002b00

0002a45c <ull_filter_rl_find>:
{
   2a45c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a460:	468b      	mov	fp, r1
	if (free_idx) {
   2a462:	4617      	mov	r7, r2
   2a464:	b10a      	cbz	r2, 2a46a <ull_filter_rl_find+0xe>
		*free_idx = FILTER_IDX_NONE;
   2a466:	23ff      	movs	r3, #255	; 0xff
   2a468:	7013      	strb	r3, [r2, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   2a46a:	4d1b      	ldr	r5, [pc, #108]	; (2a4d8 <ull_filter_rl_find+0x7c>)
{
   2a46c:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   2a46e:	f000 0a01 	and.w	sl, r0, #1
   2a472:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   2a476:	e006      	b.n	2a486 <ull_filter_rl_find+0x2a>
   2a478:	4552      	cmp	r2, sl
   2a47a:	d01f      	beq.n	2a4bc <ull_filter_rl_find+0x60>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   2a47c:	3401      	adds	r4, #1
   2a47e:	2c08      	cmp	r4, #8
   2a480:	f105 0528 	add.w	r5, r5, #40	; 0x28
   2a484:	d015      	beq.n	2a4b2 <ull_filter_rl_find+0x56>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   2a486:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   2a48a:	fa5f f884 	uxtb.w	r8, r4
   2a48e:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   2a492:	07d9      	lsls	r1, r3, #31
   2a494:	f3c3 1280 	ubfx	r2, r3, #6, #1
   2a498:	d4ee      	bmi.n	2a478 <ull_filter_rl_find+0x1c>
		} else if (free_idx && !rl[i].taken &&
   2a49a:	2f00      	cmp	r7, #0
   2a49c:	d0ee      	beq.n	2a47c <ull_filter_rl_find+0x20>
   2a49e:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   2a4a0:	3401      	adds	r4, #1
		} else if (free_idx && !rl[i].taken &&
   2a4a2:	2bff      	cmp	r3, #255	; 0xff
			*free_idx = i;
   2a4a4:	bf08      	it	eq
   2a4a6:	f887 8000 	strbeq.w	r8, [r7]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   2a4aa:	2c08      	cmp	r4, #8
   2a4ac:	f105 0528 	add.w	r5, r5, #40	; 0x28
   2a4b0:	d1e9      	bne.n	2a486 <ull_filter_rl_find+0x2a>
	return FILTER_IDX_NONE;
   2a4b2:	f04f 08ff 	mov.w	r8, #255	; 0xff
}
   2a4b6:	4640      	mov	r0, r8
   2a4b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   2a4bc:	4628      	mov	r0, r5
   2a4be:	2206      	movs	r2, #6
   2a4c0:	4659      	mov	r1, fp
   2a4c2:	f00b f828 	bl	35516 <memcmp>
   2a4c6:	2800      	cmp	r0, #0
   2a4c8:	d0f5      	beq.n	2a4b6 <ull_filter_rl_find+0x5a>
		} else if (free_idx && !rl[i].taken &&
   2a4ca:	2f00      	cmp	r7, #0
   2a4cc:	d0d6      	beq.n	2a47c <ull_filter_rl_find+0x20>
   2a4ce:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   2a4d2:	07db      	lsls	r3, r3, #31
   2a4d4:	d4d2      	bmi.n	2a47c <ull_filter_rl_find+0x20>
   2a4d6:	e7e2      	b.n	2a49e <ull_filter_rl_find+0x42>
   2a4d8:	20002b01 	.word	0x20002b01

0002a4dc <ll_rl_add>:
{
   2a4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a4e0:	4607      	mov	r7, r0
   2a4e2:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   2a4e4:	2000      	movs	r0, #0
{
   2a4e6:	460d      	mov	r5, r1
   2a4e8:	4691      	mov	r9, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   2a4ea:	f7f9 fc75 	bl	23dd8 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   2a4ee:	2800      	cmp	r0, #0
   2a4f0:	d17a      	bne.n	2a5e8 <ll_rl_add+0x10c>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   2a4f2:	46ba      	mov	sl, r7
   2a4f4:	4604      	mov	r4, r0
   2a4f6:	f81a 0b01 	ldrb.w	r0, [sl], #1
   2a4fa:	f10d 020f 	add.w	r2, sp, #15
   2a4fe:	4651      	mov	r1, sl
   2a500:	f7ff ffac 	bl	2a45c <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   2a504:	2807      	cmp	r0, #7
   2a506:	f240 80b4 	bls.w	2a672 <ll_rl_add+0x196>
	} else if (j >= ARRAY_SIZE(rl)) {
   2a50a:	f89d 800f 	ldrb.w	r8, [sp, #15]
   2a50e:	f1b8 0f07 	cmp.w	r8, #7
   2a512:	d87b      	bhi.n	2a60c <ll_rl_add+0x130>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   2a514:	eb08 0388 	add.w	r3, r8, r8, lsl #2
   2a518:	4e58      	ldr	r6, [pc, #352]	; (2a67c <ll_rl_add+0x1a0>)
   2a51a:	00db      	lsls	r3, r3, #3
   2a51c:	1c58      	adds	r0, r3, #1
   2a51e:	2206      	movs	r2, #6
   2a520:	4651      	mov	r1, sl
   2a522:	4430      	add	r0, r6
   2a524:	9300      	str	r3, [sp, #0]
   2a526:	f00b f806 	bl	35536 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   2a52a:	eb08 0288 	add.w	r2, r8, r8, lsl #2
   2a52e:	7838      	ldrb	r0, [r7, #0]
   2a530:	f816 1032 	ldrb.w	r1, [r6, r2, lsl #3]
   2a534:	ea4f 0bc2 	mov.w	fp, r2, lsl #3
   2a538:	f360 1186 	bfi	r1, r0, #6, #1
   2a53c:	eb06 03c2 	add.w	r3, r6, r2, lsl #3
   2a540:	f806 100b 	strb.w	r1, [r6, fp]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   2a544:	4628      	mov	r0, r5
   2a546:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   2a548:	9301      	str	r3, [sp, #4]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   2a54a:	f7f4 ff63 	bl	1f414 <mem_nz>
   2a54e:	f816 200b 	ldrb.w	r2, [r6, fp]
   2a552:	f360 0282 	bfi	r2, r0, #2, #1
   2a556:	f806 200b 	strb.w	r2, [r6, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   2a55a:	2110      	movs	r1, #16
   2a55c:	4648      	mov	r0, r9
   2a55e:	f7f4 ff59 	bl	1f414 <mem_nz>
   2a562:	f816 200b 	ldrb.w	r2, [r6, fp]
	if (rl[i].pirk) {
   2a566:	9b00      	ldr	r3, [sp, #0]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   2a568:	f000 0001 	and.w	r0, r0, #1
   2a56c:	f360 02c3 	bfi	r2, r0, #3, #1
	if (rl[i].pirk) {
   2a570:	f012 0f04 	tst.w	r2, #4
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   2a574:	f806 200b 	strb.w	r2, [r6, fp]
	rl[i].id_addr_type = id_addr->type & 0x1;
   2a578:	ea4f 0b88 	mov.w	fp, r8, lsl #2
	if (rl[i].pirk) {
   2a57c:	d14a      	bne.n	2a614 <ll_rl_add+0x138>
	if (rl[i].lirk) {
   2a57e:	2800      	cmp	r0, #0
   2a580:	d168      	bne.n	2a654 <ll_rl_add+0x178>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   2a582:	f103 0018 	add.w	r0, r3, #24
   2a586:	2206      	movs	r2, #6
   2a588:	4430      	add	r0, r6
   2a58a:	2100      	movs	r1, #0
   2a58c:	f00a ffde 	bl	3554c <memset>
	rl[i].dev = 0U;
   2a590:	eb0b 0308 	add.w	r3, fp, r8
   2a594:	4d3a      	ldr	r5, [pc, #232]	; (2a680 <ll_rl_add+0x1a4>)
	rl[i].rpas_ready = 0U;
   2a596:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
   2a59a:	f022 0212 	bic.w	r2, r2, #18
   2a59e:	f806 2033 	strb.w	r2, [r6, r3, lsl #3]
	j = fal_find(id_addr->type, id_addr->a.val, NULL);
   2a5a2:	f897 9000 	ldrb.w	r9, [r7]
	for (i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   2a5a6:	1eaf      	subs	r7, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   2a5a8:	f009 0901 	and.w	r9, r9, #1
   2a5ac:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   2a5b0:	f3c3 0240 	ubfx	r2, r3, #1, #1
   2a5b4:	f013 0301 	ands.w	r3, r3, #1
   2a5b8:	d001      	beq.n	2a5be <ll_rl_add+0xe2>
   2a5ba:	454a      	cmp	r2, r9
   2a5bc:	d018      	beq.n	2a5f0 <ll_rl_add+0x114>
	for (i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
   2a5be:	3401      	adds	r4, #1
   2a5c0:	2c08      	cmp	r4, #8
   2a5c2:	f105 0508 	add.w	r5, r5, #8
   2a5c6:	d1f1      	bne.n	2a5ac <ll_rl_add+0xd0>
   2a5c8:	2300      	movs	r3, #0
	rl[i].taken = 1U;
   2a5ca:	44c3      	add	fp, r8
   2a5cc:	015b      	lsls	r3, r3, #5
   2a5ce:	f816 203b 	ldrb.w	r2, [r6, fp, lsl #3]
   2a5d2:	f043 0301 	orr.w	r3, r3, #1
   2a5d6:	f022 0221 	bic.w	r2, r2, #33	; 0x21
   2a5da:	4313      	orrs	r3, r2
	return 0;
   2a5dc:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   2a5de:	f806 303b 	strb.w	r3, [r6, fp, lsl #3]
}
   2a5e2:	b005      	add	sp, #20
   2a5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   2a5e8:	200c      	movs	r0, #12
}
   2a5ea:	b005      	add	sp, #20
   2a5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   2a5f0:	4628      	mov	r0, r5
   2a5f2:	2206      	movs	r2, #6
   2a5f4:	4651      	mov	r1, sl
   2a5f6:	9300      	str	r3, [sp, #0]
   2a5f8:	f00a ff8d 	bl	35516 <memcmp>
   2a5fc:	9b00      	ldr	r3, [sp, #0]
   2a5fe:	2800      	cmp	r0, #0
   2a600:	d1dd      	bne.n	2a5be <ll_rl_add+0xe2>
		fal[j].rl_idx = i;
   2a602:	eb07 07c4 	add.w	r7, r7, r4, lsl #3
   2a606:	f887 8001 	strb.w	r8, [r7, #1]
		rl[i].fal = 1U;
   2a60a:	e7de      	b.n	2a5ca <ll_rl_add+0xee>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   2a60c:	2007      	movs	r0, #7
}
   2a60e:	b005      	add	sp, #20
   2a610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   2a614:	f8df c06c 	ldr.w	ip, [pc, #108]	; 2a684 <ll_rl_add+0x1a8>
		peer_irk_rl_ids[peer_irk_count] = i;
   2a618:	491b      	ldr	r1, [pc, #108]	; (2a688 <ll_rl_add+0x1ac>)
		rl[i].pirk_idx = peer_irk_count;
   2a61a:	f89c 2000 	ldrb.w	r2, [ip]
   2a61e:	f8dd e004 	ldr.w	lr, [sp, #4]
		peer_irk_rl_ids[peer_irk_count] = i;
   2a622:	f801 8002 	strb.w	r8, [r1, r2]
		rl[i].pirk_idx = peer_irk_count;
   2a626:	f88e 2017 	strb.w	r2, [lr, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   2a62a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2a62e:	f8df e05c 	ldr.w	lr, [pc, #92]	; 2a68c <ll_rl_add+0x1b0>
   2a632:	eb01 1102 	add.w	r1, r1, r2, lsl #4
   2a636:	3201      	adds	r2, #1
   2a638:	f88c 2000 	strb.w	r2, [ip]
   2a63c:	4471      	add	r1, lr
	psrc += length - 1;
   2a63e:	f105 020f 	add.w	r2, r5, #15
	for (; length > 0; length--) {
   2a642:	3d01      	subs	r5, #1
		*pdst++ = *psrc--;
   2a644:	f812 c901 	ldrb.w	ip, [r2], #-1
   2a648:	f801 cf01 	strb.w	ip, [r1, #1]!
	for (; length > 0; length--) {
   2a64c:	42aa      	cmp	r2, r5
   2a64e:	d1f9      	bne.n	2a644 <ll_rl_add+0x168>
	if (rl[i].lirk) {
   2a650:	2800      	cmp	r0, #0
   2a652:	d096      	beq.n	2a582 <ll_rl_add+0xa6>
		(void)memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   2a654:	1dd8      	adds	r0, r3, #7
   2a656:	4649      	mov	r1, r9
   2a658:	2210      	movs	r2, #16
   2a65a:	4430      	add	r0, r6
   2a65c:	9300      	str	r3, [sp, #0]
   2a65e:	f00a ff6a 	bl	35536 <memcpy>
		rl[i].local_rpa = NULL;
   2a662:	eb0b 0208 	add.w	r2, fp, r8
   2a666:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   2a66a:	2100      	movs	r1, #0
   2a66c:	9b00      	ldr	r3, [sp, #0]
   2a66e:	6251      	str	r1, [r2, #36]	; 0x24
   2a670:	e787      	b.n	2a582 <ll_rl_add+0xa6>
		return BT_HCI_ERR_INVALID_PARAM;
   2a672:	2012      	movs	r0, #18
}
   2a674:	b005      	add	sp, #20
   2a676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a67a:	bf00      	nop
   2a67c:	20002b00 	.word	0x20002b00
   2a680:	20002c42 	.word	0x20002c42
   2a684:	200033eb 	.word	0x200033eb
   2a688:	20002a78 	.word	0x20002a78
   2a68c:	20002a80 	.word	0x20002a80

0002a690 <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   2a690:	2807      	cmp	r0, #7
   2a692:	d807      	bhi.n	2a6a4 <ull_filter_lll_lrpa_used+0x14>
   2a694:	4b04      	ldr	r3, [pc, #16]	; (2a6a8 <ull_filter_lll_lrpa_used+0x18>)
   2a696:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2a69a:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   2a69e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   2a6a2:	4770      	bx	lr
   2a6a4:	2000      	movs	r0, #0
}
   2a6a6:	4770      	bx	lr
   2a6a8:	20002b00 	.word	0x20002b00

0002a6ac <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   2a6ac:	4b02      	ldr	r3, [pc, #8]	; (2a6b8 <ull_filter_lll_irks_get+0xc>)
   2a6ae:	781b      	ldrb	r3, [r3, #0]
   2a6b0:	7003      	strb	r3, [r0, #0]
}
   2a6b2:	4802      	ldr	r0, [pc, #8]	; (2a6bc <ull_filter_lll_irks_get+0x10>)
   2a6b4:	4770      	bx	lr
   2a6b6:	bf00      	nop
   2a6b8:	200033eb 	.word	0x200033eb
   2a6bc:	20002a80 	.word	0x20002a80

0002a6c0 <ull_filter_lll_rl_irk_idx>:
{
   2a6c0:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   2a6c2:	4b20      	ldr	r3, [pc, #128]	; (2a744 <ull_filter_lll_rl_irk_idx+0x84>)
   2a6c4:	781b      	ldrb	r3, [r3, #0]
   2a6c6:	4283      	cmp	r3, r0
{
   2a6c8:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   2a6ca:	d90c      	bls.n	2a6e6 <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   2a6cc:	4b1e      	ldr	r3, [pc, #120]	; (2a748 <ull_filter_lll_rl_irk_idx+0x88>)
   2a6ce:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   2a6d0:	2c07      	cmp	r4, #7
   2a6d2:	d819      	bhi.n	2a708 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   2a6d4:	4b1d      	ldr	r3, [pc, #116]	; (2a74c <ull_filter_lll_rl_irk_idx+0x8c>)
   2a6d6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   2a6da:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   2a6de:	07db      	lsls	r3, r3, #31
   2a6e0:	d520      	bpl.n	2a724 <ull_filter_lll_rl_irk_idx+0x64>
}
   2a6e2:	4620      	mov	r0, r4
   2a6e4:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   2a6e6:	4a1a      	ldr	r2, [pc, #104]	; (2a750 <ull_filter_lll_rl_irk_idx+0x90>)
   2a6e8:	491a      	ldr	r1, [pc, #104]	; (2a754 <ull_filter_lll_rl_irk_idx+0x94>)
   2a6ea:	481b      	ldr	r0, [pc, #108]	; (2a758 <ull_filter_lll_rl_irk_idx+0x98>)
   2a6ec:	f240 336e 	movw	r3, #878	; 0x36e
   2a6f0:	f008 fe92 	bl	33418 <assert_print>
   2a6f4:	4040      	eors	r0, r0
   2a6f6:	f380 8811 	msr	BASEPRI, r0
   2a6fa:	f04f 0003 	mov.w	r0, #3
   2a6fe:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   2a700:	4b11      	ldr	r3, [pc, #68]	; (2a748 <ull_filter_lll_rl_irk_idx+0x88>)
   2a702:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   2a704:	2c07      	cmp	r4, #7
   2a706:	d9e5      	bls.n	2a6d4 <ull_filter_lll_rl_irk_idx+0x14>
   2a708:	4a11      	ldr	r2, [pc, #68]	; (2a750 <ull_filter_lll_rl_irk_idx+0x90>)
   2a70a:	4914      	ldr	r1, [pc, #80]	; (2a75c <ull_filter_lll_rl_irk_idx+0x9c>)
   2a70c:	4812      	ldr	r0, [pc, #72]	; (2a758 <ull_filter_lll_rl_irk_idx+0x98>)
   2a70e:	f44f 735c 	mov.w	r3, #880	; 0x370
   2a712:	f008 fe81 	bl	33418 <assert_print>
   2a716:	4040      	eors	r0, r0
   2a718:	f380 8811 	msr	BASEPRI, r0
   2a71c:	f04f 0003 	mov.w	r0, #3
   2a720:	df02      	svc	2
   2a722:	e7d7      	b.n	2a6d4 <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   2a724:	4a0a      	ldr	r2, [pc, #40]	; (2a750 <ull_filter_lll_rl_irk_idx+0x90>)
   2a726:	490e      	ldr	r1, [pc, #56]	; (2a760 <ull_filter_lll_rl_irk_idx+0xa0>)
   2a728:	480b      	ldr	r0, [pc, #44]	; (2a758 <ull_filter_lll_rl_irk_idx+0x98>)
   2a72a:	f240 3371 	movw	r3, #881	; 0x371
   2a72e:	f008 fe73 	bl	33418 <assert_print>
   2a732:	4040      	eors	r0, r0
   2a734:	f380 8811 	msr	BASEPRI, r0
   2a738:	f04f 0003 	mov.w	r0, #3
   2a73c:	df02      	svc	2
}
   2a73e:	4620      	mov	r0, r4
   2a740:	bd10      	pop	{r4, pc}
   2a742:	bf00      	nop
   2a744:	200033eb 	.word	0x200033eb
   2a748:	20002a78 	.word	0x20002a78
   2a74c:	20002b00 	.word	0x20002b00
   2a750:	0003abe4 	.word	0x0003abe4
   2a754:	0003add8 	.word	0x0003add8
   2a758:	00039f74 	.word	0x00039f74
   2a75c:	0003adf8 	.word	0x0003adf8
   2a760:	0003adcc 	.word	0x0003adcc

0002a764 <ull_filter_lll_irk_in_fal>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   2a764:	2807      	cmp	r0, #7
   2a766:	d823      	bhi.n	2a7b0 <ull_filter_lll_irk_in_fal+0x4c>
{
   2a768:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   2a76a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   2a76e:	4e11      	ldr	r6, [pc, #68]	; (2a7b4 <ull_filter_lll_irk_in_fal+0x50>)
   2a770:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   2a774:	07db      	lsls	r3, r3, #31
   2a776:	4604      	mov	r4, r0
   2a778:	ea4f 0580 	mov.w	r5, r0, lsl #2
   2a77c:	d505      	bpl.n	2a78a <ull_filter_lll_irk_in_fal+0x26>
	return rl[rl_idx].fal;
   2a77e:	4425      	add	r5, r4
   2a780:	f816 0035 	ldrb.w	r0, [r6, r5, lsl #3]
   2a784:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   2a788:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   2a78a:	4a0b      	ldr	r2, [pc, #44]	; (2a7b8 <ull_filter_lll_irk_in_fal+0x54>)
   2a78c:	490b      	ldr	r1, [pc, #44]	; (2a7bc <ull_filter_lll_irk_in_fal+0x58>)
   2a78e:	480c      	ldr	r0, [pc, #48]	; (2a7c0 <ull_filter_lll_irk_in_fal+0x5c>)
   2a790:	f44f 735f 	mov.w	r3, #892	; 0x37c
   2a794:	f008 fe40 	bl	33418 <assert_print>
   2a798:	4040      	eors	r0, r0
   2a79a:	f380 8811 	msr	BASEPRI, r0
   2a79e:	f04f 0003 	mov.w	r0, #3
   2a7a2:	df02      	svc	2
	return rl[rl_idx].fal;
   2a7a4:	4425      	add	r5, r4
   2a7a6:	f816 0035 	ldrb.w	r0, [r6, r5, lsl #3]
   2a7aa:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   2a7ae:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   2a7b0:	2000      	movs	r0, #0
}
   2a7b2:	4770      	bx	lr
   2a7b4:	20002b00 	.word	0x20002b00
   2a7b8:	0003abe4 	.word	0x0003abe4
   2a7bc:	0003ac34 	.word	0x0003ac34
   2a7c0:	00039f74 	.word	0x00039f74

0002a7c4 <ull_filter_lll_rl_addr_allowed>:
	if (*rl_idx != FILTER_IDX_NONE) {
   2a7c4:	7813      	ldrb	r3, [r2, #0]
   2a7c6:	2bff      	cmp	r3, #255	; 0xff
   2a7c8:	d119      	bne.n	2a7fe <ull_filter_lll_rl_addr_allowed+0x3a>
{
   2a7ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a7ce:	4d19      	ldr	r5, [pc, #100]	; (2a834 <ull_filter_lll_rl_addr_allowed+0x70>)
   2a7d0:	4604      	mov	r4, r0
   2a7d2:	46ae      	mov	lr, r5
	if (*rl_idx != FILTER_IDX_NONE) {
   2a7d4:	2300      	movs	r3, #0
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   2a7d6:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   2a7da:	009e      	lsls	r6, r3, #2
   2a7dc:	f815 c03c 	ldrb.w	ip, [r5, ip, lsl #3]
   2a7e0:	f01c 0001 	ands.w	r0, ip, #1
   2a7e4:	d003      	beq.n	2a7ee <ull_filter_lll_rl_addr_allowed+0x2a>
   2a7e6:	f3cc 1c80 	ubfx	ip, ip, #6, #1
   2a7ea:	45a4      	cmp	ip, r4
   2a7ec:	d009      	beq.n	2a802 <ull_filter_lll_rl_addr_allowed+0x3e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   2a7ee:	3301      	adds	r3, #1
   2a7f0:	2b08      	cmp	r3, #8
   2a7f2:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
   2a7f6:	d1ee      	bne.n	2a7d6 <ull_filter_lll_rl_addr_allowed+0x12>
		return true;
   2a7f8:	2001      	movs	r0, #1
}
   2a7fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return true;
   2a7fe:	2001      	movs	r0, #1
}
   2a800:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   2a802:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   2a806:	4677      	mov	r7, lr
   2a808:	f04f 0c00 	mov.w	ip, #0
				if (addr[j] != id_addr[j]) {
   2a80c:	f817 af01 	ldrb.w	sl, [r7, #1]!
   2a810:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   2a814:	45ca      	cmp	sl, r9
			for (j = 0U; j < BDADDR_SIZE; j++) {
   2a816:	f10c 0c01 	add.w	ip, ip, #1
				if (addr[j] != id_addr[j]) {
   2a81a:	d1e8      	bne.n	2a7ee <ull_filter_lll_rl_addr_allowed+0x2a>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   2a81c:	f1bc 0f06 	cmp.w	ip, #6
   2a820:	d1f4      	bne.n	2a80c <ull_filter_lll_rl_addr_allowed+0x48>
				return !rl[i].pirk || rl[i].dev;
   2a822:	441e      	add	r6, r3
				*rl_idx = i;
   2a824:	7013      	strb	r3, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   2a826:	f815 3036 	ldrb.w	r3, [r5, r6, lsl #3]
   2a82a:	075a      	lsls	r2, r3, #29
   2a82c:	d5e5      	bpl.n	2a7fa <ull_filter_lll_rl_addr_allowed+0x36>
   2a82e:	f3c3 1000 	ubfx	r0, r3, #4, #1
   2a832:	e7e2      	b.n	2a7fa <ull_filter_lll_rl_addr_allowed+0x36>
   2a834:	20002b00 	.word	0x20002b00

0002a838 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   2a838:	4b02      	ldr	r3, [pc, #8]	; (2a844 <ull_filter_lll_rl_enabled+0xc>)
   2a83a:	7818      	ldrb	r0, [r3, #0]
}
   2a83c:	3800      	subs	r0, #0
   2a83e:	bf18      	it	ne
   2a840:	2001      	movne	r0, #1
   2a842:	4770      	bx	lr
   2a844:	200033ec 	.word	0x200033ec

0002a848 <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   2a848:	4668      	mov	r0, sp
   2a84a:	f020 0107 	bic.w	r1, r0, #7
   2a84e:	468d      	mov	sp, r1
   2a850:	b501      	push	{r0, lr}
	isr_radio();
   2a852:	f002 f8f1 	bl	2ca38 <isr_radio>
	ISR_DIRECT_PM();
   2a856:	f7ea f893 	bl	14980 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   2a85a:	f7ea f983 	bl	14b64 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   2a85e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2a862:	4685      	mov	sp, r0
   2a864:	4770      	bx	lr
   2a866:	bf00      	nop

0002a868 <rtc0_nrf5_isr>:
{
   2a868:	b508      	push	{r3, lr}
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   2a86a:	4b09      	ldr	r3, [pc, #36]	; (2a890 <rtc0_nrf5_isr+0x28>)
   2a86c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   2a870:	b93a      	cbnz	r2, 2a882 <rtc0_nrf5_isr+0x1a>
	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   2a872:	2001      	movs	r0, #1
   2a874:	f7f4 febc 	bl	1f5f0 <mayfly_run>
}
   2a878:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   2a87c:	2002      	movs	r0, #2
   2a87e:	f7f4 beb7 	b.w	1f5f0 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   2a882:	2000      	movs	r0, #0
   2a884:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   2a888:	f7f5 fe36 	bl	204f8 <ticker_trigger>
   2a88c:	e7f1      	b.n	2a872 <rtc0_nrf5_isr+0xa>
   2a88e:	bf00      	nop
   2a890:	4000b000 	.word	0x4000b000

0002a894 <swi_lll_nrf5_isr>:
	mayfly_run(TICKER_USER_ID_LLL);
   2a894:	2000      	movs	r0, #0
   2a896:	f7f4 beab 	b.w	1f5f0 <mayfly_run>
   2a89a:	bf00      	nop

0002a89c <ticker_start_op_cb>:

	preempt_req = preempt_ack;
}

static void ticker_start_op_cb(uint32_t status, void *param)
{
   2a89c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(param);
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   2a89e:	b9f8      	cbnz	r0, 2a8e0 <ticker_start_op_cb+0x44>

	LL_ASSERT(preempt_start_req != preempt_start_ack);
   2a8a0:	4b1e      	ldr	r3, [pc, #120]	; (2a91c <ticker_start_op_cb+0x80>)
   2a8a2:	4d1f      	ldr	r5, [pc, #124]	; (2a920 <ticker_start_op_cb+0x84>)
   2a8a4:	781a      	ldrb	r2, [r3, #0]
   2a8a6:	782b      	ldrb	r3, [r5, #0]
   2a8a8:	429a      	cmp	r2, r3
   2a8aa:	d027      	beq.n	2a8fc <ticker_start_op_cb+0x60>
	preempt_start_ack++;

	LL_ASSERT(preempt_req == preempt_ack);
   2a8ac:	4a1d      	ldr	r2, [pc, #116]	; (2a924 <ticker_start_op_cb+0x88>)
   2a8ae:	4c1e      	ldr	r4, [pc, #120]	; (2a928 <ticker_start_op_cb+0x8c>)
   2a8b0:	7812      	ldrb	r2, [r2, #0]
   2a8b2:	7821      	ldrb	r1, [r4, #0]
	preempt_start_ack++;
   2a8b4:	3301      	adds	r3, #1
	LL_ASSERT(preempt_req == preempt_ack);
   2a8b6:	4291      	cmp	r1, r2
	preempt_start_ack++;
   2a8b8:	702b      	strb	r3, [r5, #0]
	LL_ASSERT(preempt_req == preempt_ack);
   2a8ba:	b2d3      	uxtb	r3, r2
   2a8bc:	d00d      	beq.n	2a8da <ticker_start_op_cb+0x3e>
   2a8be:	4a1b      	ldr	r2, [pc, #108]	; (2a92c <ticker_start_op_cb+0x90>)
   2a8c0:	491b      	ldr	r1, [pc, #108]	; (2a930 <ticker_start_op_cb+0x94>)
   2a8c2:	481c      	ldr	r0, [pc, #112]	; (2a934 <ticker_start_op_cb+0x98>)
   2a8c4:	f240 332f 	movw	r3, #815	; 0x32f
   2a8c8:	f008 fda6 	bl	33418 <assert_print>
   2a8cc:	4040      	eors	r0, r0
   2a8ce:	f380 8811 	msr	BASEPRI, r0
   2a8d2:	f04f 0003 	mov.w	r0, #3
   2a8d6:	df02      	svc	2
	preempt_req++;
   2a8d8:	7823      	ldrb	r3, [r4, #0]
   2a8da:	3301      	adds	r3, #1
   2a8dc:	7023      	strb	r3, [r4, #0]
}
   2a8de:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   2a8e0:	4a12      	ldr	r2, [pc, #72]	; (2a92c <ticker_start_op_cb+0x90>)
   2a8e2:	4915      	ldr	r1, [pc, #84]	; (2a938 <ticker_start_op_cb+0x9c>)
   2a8e4:	4813      	ldr	r0, [pc, #76]	; (2a934 <ticker_start_op_cb+0x98>)
   2a8e6:	f240 332a 	movw	r3, #810	; 0x32a
   2a8ea:	f008 fd95 	bl	33418 <assert_print>
   2a8ee:	4040      	eors	r0, r0
   2a8f0:	f380 8811 	msr	BASEPRI, r0
   2a8f4:	f04f 0003 	mov.w	r0, #3
   2a8f8:	df02      	svc	2
   2a8fa:	e7d1      	b.n	2a8a0 <ticker_start_op_cb+0x4>
	LL_ASSERT(preempt_start_req != preempt_start_ack);
   2a8fc:	4a0b      	ldr	r2, [pc, #44]	; (2a92c <ticker_start_op_cb+0x90>)
   2a8fe:	490f      	ldr	r1, [pc, #60]	; (2a93c <ticker_start_op_cb+0xa0>)
   2a900:	480c      	ldr	r0, [pc, #48]	; (2a934 <ticker_start_op_cb+0x98>)
   2a902:	f44f 734b 	mov.w	r3, #812	; 0x32c
   2a906:	f008 fd87 	bl	33418 <assert_print>
   2a90a:	4040      	eors	r0, r0
   2a90c:	f380 8811 	msr	BASEPRI, r0
   2a910:	f04f 0003 	mov.w	r0, #3
   2a914:	df02      	svc	2
	preempt_start_ack++;
   2a916:	782b      	ldrb	r3, [r5, #0]
   2a918:	e7c8      	b.n	2a8ac <ticker_start_op_cb+0x10>
   2a91a:	bf00      	nop
   2a91c:	200033f2 	.word	0x200033f2
   2a920:	200033f1 	.word	0x200033f1
   2a924:	200033ed 	.word	0x200033ed
   2a928:	200033ee 	.word	0x200033ee
   2a92c:	0003ae14 	.word	0x0003ae14
   2a930:	0003ae84 	.word	0x0003ae84
   2a934:	00039f74 	.word	0x00039f74
   2a938:	0003a6a8 	.word	0x0003a6a8
   2a93c:	0003ae5c 	.word	0x0003ae5c

0002a940 <ticker_stop_op_cb>:
{
   2a940:	b510      	push	{r4, lr}
	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   2a942:	4b0e      	ldr	r3, [pc, #56]	; (2a97c <ticker_stop_op_cb+0x3c>)
   2a944:	4c0e      	ldr	r4, [pc, #56]	; (2a980 <ticker_stop_op_cb+0x40>)
   2a946:	781a      	ldrb	r2, [r3, #0]
   2a948:	7823      	ldrb	r3, [r4, #0]
   2a94a:	429a      	cmp	r2, r3
   2a94c:	d006      	beq.n	2a95c <ticker_stop_op_cb+0x1c>
	preempt_req = preempt_ack;
   2a94e:	490d      	ldr	r1, [pc, #52]	; (2a984 <ticker_stop_op_cb+0x44>)
   2a950:	4a0d      	ldr	r2, [pc, #52]	; (2a988 <ticker_stop_op_cb+0x48>)
   2a952:	7809      	ldrb	r1, [r1, #0]
   2a954:	7011      	strb	r1, [r2, #0]
	preempt_stop_ack++;
   2a956:	3301      	adds	r3, #1
   2a958:	7023      	strb	r3, [r4, #0]
}
   2a95a:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   2a95c:	4a0b      	ldr	r2, [pc, #44]	; (2a98c <ticker_stop_op_cb+0x4c>)
   2a95e:	490c      	ldr	r1, [pc, #48]	; (2a990 <ticker_stop_op_cb+0x50>)
   2a960:	480c      	ldr	r0, [pc, #48]	; (2a994 <ticker_stop_op_cb+0x54>)
   2a962:	f240 3321 	movw	r3, #801	; 0x321
   2a966:	f008 fd57 	bl	33418 <assert_print>
   2a96a:	4040      	eors	r0, r0
   2a96c:	f380 8811 	msr	BASEPRI, r0
   2a970:	f04f 0003 	mov.w	r0, #3
   2a974:	df02      	svc	2
	preempt_stop_ack++;
   2a976:	7823      	ldrb	r3, [r4, #0]
   2a978:	e7e9      	b.n	2a94e <ticker_stop_op_cb+0xe>
   2a97a:	bf00      	nop
   2a97c:	200033f0 	.word	0x200033f0
   2a980:	200033ef 	.word	0x200033ef
   2a984:	200033ed 	.word	0x200033ed
   2a988:	200033ee 	.word	0x200033ee
   2a98c:	0003ae14 	.word	0x0003ae14
   2a990:	0003aea0 	.word	0x0003aea0
   2a994:	00039f74 	.word	0x00039f74

0002a998 <isr_race>:
	radio_status_reset();
   2a998:	f002 b952 	b.w	2cc40 <radio_status_reset>

0002a99c <preempt_ticker_cb>:
}

static void preempt_ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
			      uint32_t remainder, uint16_t lazy, uint8_t force,
			      void *param)
{
   2a99c:	b510      	push	{r4, lr}
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	LL_ASSERT(preempt_ack != preempt_req);
   2a99e:	4a18      	ldr	r2, [pc, #96]	; (2aa00 <preempt_ticker_cb+0x64>)
   2a9a0:	4c18      	ldr	r4, [pc, #96]	; (2aa04 <preempt_ticker_cb+0x68>)
   2a9a2:	7812      	ldrb	r2, [r2, #0]
   2a9a4:	7823      	ldrb	r3, [r4, #0]
   2a9a6:	429a      	cmp	r2, r3
   2a9a8:	d01b      	beq.n	2a9e2 <preempt_ticker_cb+0x46>
	preempt_ack++;
   2a9aa:	7821      	ldrb	r1, [r4, #0]

	mfy.param = param;
   2a9ac:	4b16      	ldr	r3, [pc, #88]	; (2aa08 <preempt_ticker_cb+0x6c>)
	preempt_ack++;
   2a9ae:	3101      	adds	r1, #1
   2a9b0:	b2c9      	uxtb	r1, r1
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   2a9b2:	2200      	movs	r2, #0
	preempt_ack++;
   2a9b4:	7021      	strb	r1, [r4, #0]
	mfy.param = param;
   2a9b6:	9903      	ldr	r1, [sp, #12]
   2a9b8:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   2a9ba:	2001      	movs	r0, #1
   2a9bc:	4611      	mov	r1, r2
   2a9be:	f7f4 fdb9 	bl	1f534 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   2a9c2:	b900      	cbnz	r0, 2a9c6 <preempt_ticker_cb+0x2a>
}
   2a9c4:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   2a9c6:	4a11      	ldr	r2, [pc, #68]	; (2aa0c <preempt_ticker_cb+0x70>)
   2a9c8:	4911      	ldr	r1, [pc, #68]	; (2aa10 <preempt_ticker_cb+0x74>)
   2a9ca:	4812      	ldr	r0, [pc, #72]	; (2aa14 <preempt_ticker_cb+0x78>)
   2a9cc:	f240 33ad 	movw	r3, #941	; 0x3ad
   2a9d0:	f008 fd22 	bl	33418 <assert_print>
   2a9d4:	4040      	eors	r0, r0
   2a9d6:	f380 8811 	msr	BASEPRI, r0
   2a9da:	f04f 0003 	mov.w	r0, #3
   2a9de:	df02      	svc	2
}
   2a9e0:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_ack != preempt_req);
   2a9e2:	4a0a      	ldr	r2, [pc, #40]	; (2aa0c <preempt_ticker_cb+0x70>)
   2a9e4:	490c      	ldr	r1, [pc, #48]	; (2aa18 <preempt_ticker_cb+0x7c>)
   2a9e6:	480b      	ldr	r0, [pc, #44]	; (2aa14 <preempt_ticker_cb+0x78>)
   2a9e8:	f240 33a7 	movw	r3, #935	; 0x3a7
   2a9ec:	f008 fd14 	bl	33418 <assert_print>
   2a9f0:	4040      	eors	r0, r0
   2a9f2:	f380 8811 	msr	BASEPRI, r0
   2a9f6:	f04f 0003 	mov.w	r0, #3
   2a9fa:	df02      	svc	2
   2a9fc:	e7d5      	b.n	2a9aa <preempt_ticker_cb+0xe>
   2a9fe:	bf00      	nop
   2aa00:	200033ee 	.word	0x200033ee
   2aa04:	200033ed 	.word	0x200033ed
   2aa08:	20000738 	.word	0x20000738
   2aa0c:	0003ae14 	.word	0x0003ae14
   2aa10:	0003a43c 	.word	0x0003a43c
   2aa14:	00039f74 	.word	0x00039f74
   2aa18:	0003aec8 	.word	0x0003aec8

0002aa1c <preempt_ticker_start>:
{
   2aa1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((preempt_start_req != preempt_start_ack) ||
   2aa20:	f8df 8144 	ldr.w	r8, [pc, #324]	; 2ab68 <preempt_ticker_start+0x14c>
{
   2aa24:	4615      	mov	r5, r2
	if ((preempt_start_req != preempt_start_ack) ||
   2aa26:	4a51      	ldr	r2, [pc, #324]	; (2ab6c <preempt_ticker_start+0x150>)
   2aa28:	f898 3000 	ldrb.w	r3, [r8]
   2aa2c:	7812      	ldrb	r2, [r2, #0]
   2aa2e:	429a      	cmp	r2, r3
{
   2aa30:	b08a      	sub	sp, #40	; 0x28
   2aa32:	460c      	mov	r4, r1
	if ((preempt_start_req != preempt_start_ack) ||
   2aa34:	d04a      	beq.n	2aacc <preempt_ticker_start+0xb0>
		if (!prev || prev->is_aborted ||
   2aa36:	2c00      	cmp	r4, #0
   2aa38:	d063      	beq.n	2ab02 <preempt_ticker_start+0xe6>
   2aa3a:	7f22      	ldrb	r2, [r4, #28]
   2aa3c:	f012 0202 	ands.w	r2, r2, #2
   2aa40:	d15f      	bne.n	2ab02 <preempt_ticker_start+0xe6>
		ull = HDR_LLL2ULL(p->param);
   2aa42:	68eb      	ldr	r3, [r5, #12]
		preempt_anchor = p->ticks_at_expire;
   2aa44:	f8d5 a000 	ldr.w	sl, [r5]
		ull = HDR_LLL2ULL(p->param);
   2aa48:	681b      	ldr	r3, [r3, #0]
		diff = ticks_at_preempt_new - ticks_at_preempt;
   2aa4a:	f8df 9124 	ldr.w	r9, [pc, #292]	; 2ab70 <preempt_ticker_start+0x154>
		preempt_to = MAX(ull->ticks_active_to_start,
   2aa4e:	68df      	ldr	r7, [r3, #12]
   2aa50:	e9d3 1001 	ldrd	r1, r0, [r3, #4]
   2aa54:	4288      	cmp	r0, r1
   2aa56:	bf2c      	ite	cs
   2aa58:	ebc7 0700 	rsbcs	r7, r7, r0
   2aa5c:	ebc7 0701 	rsbcc	r7, r7, r1
		ticks_at_preempt_new = preempt_anchor + preempt_to;
   2aa60:	eb0a 0607 	add.w	r6, sl, r7
		diff = ticks_at_preempt_new - ticks_at_preempt;
   2aa64:	f8d9 0000 	ldr.w	r0, [r9]
		ticks_at_preempt_new &= HAL_TICKER_CNTR_MASK;
   2aa68:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		diff = ticks_at_preempt_new - ticks_at_preempt;
   2aa6c:	1a30      	subs	r0, r6, r0
		if (!prev || prev->is_aborted ||
   2aa6e:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
   2aa72:	d047      	beq.n	2ab04 <preempt_ticker_start+0xe8>
	if ((preempt_stop_req != preempt_stop_ack) ||
   2aa74:	493f      	ldr	r1, [pc, #252]	; (2ab74 <preempt_ticker_start+0x158>)
   2aa76:	4b40      	ldr	r3, [pc, #256]	; (2ab78 <preempt_ticker_start+0x15c>)
   2aa78:	7808      	ldrb	r0, [r1, #0]
   2aa7a:	7819      	ldrb	r1, [r3, #0]
   2aa7c:	4288      	cmp	r0, r1
   2aa7e:	d044      	beq.n	2ab0a <preempt_ticker_start+0xee>
		prev->is_aborted = 1U;
   2aa80:	7f23      	ldrb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   2aa82:	68e1      	ldr	r1, [r4, #12]
		ticks_at_preempt = ticks_at_preempt_new;
   2aa84:	f8c9 6000 	str.w	r6, [r9]
		prev->is_aborted = 1U;
   2aa88:	f043 0302 	orr.w	r3, r3, #2
   2aa8c:	7723      	strb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   2aa8e:	4620      	mov	r0, r4
   2aa90:	69a3      	ldr	r3, [r4, #24]
   2aa92:	4798      	blx	r3
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   2aa94:	4b39      	ldr	r3, [pc, #228]	; (2ab7c <preempt_ticker_start+0x160>)
	ticks_at_preempt = ticks_at_preempt_new;
   2aa96:	f8c9 6000 	str.w	r6, [r9]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   2aa9a:	e9cd 3507 	strd	r3, r5, [sp, #28]
   2aa9e:	4b38      	ldr	r3, [pc, #224]	; (2ab80 <preempt_ticker_start+0x164>)
   2aaa0:	9700      	str	r7, [sp, #0]
   2aaa2:	2200      	movs	r2, #0
   2aaa4:	e9cd 3505 	strd	r3, r5, [sp, #20]
   2aaa8:	e9cd 2203 	strd	r2, r2, [sp, #12]
   2aaac:	e9cd 2201 	strd	r2, r2, [sp, #4]
	preempt_start_req++;
   2aab0:	f898 4000 	ldrb.w	r4, [r8]
   2aab4:	3401      	adds	r4, #1
   2aab6:	b2e4      	uxtb	r4, r4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   2aab8:	4653      	mov	r3, sl
   2aaba:	4611      	mov	r1, r2
   2aabc:	4610      	mov	r0, r2
	preempt_start_req++;
   2aabe:	f888 4000 	strb.w	r4, [r8]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   2aac2:	f7f5 fd87 	bl	205d4 <ticker_start>
}
   2aac6:	b00a      	add	sp, #40	; 0x28
   2aac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    (preempt_req != preempt_ack)) {
   2aacc:	4b2d      	ldr	r3, [pc, #180]	; (2ab84 <preempt_ticker_start+0x168>)
   2aace:	4a2e      	ldr	r2, [pc, #184]	; (2ab88 <preempt_ticker_start+0x16c>)
   2aad0:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   2aad2:	7812      	ldrb	r2, [r2, #0]
   2aad4:	429a      	cmp	r2, r3
   2aad6:	d1ae      	bne.n	2aa36 <preempt_ticker_start+0x1a>
		ull = HDR_LLL2ULL(p->param);
   2aad8:	68c3      	ldr	r3, [r0, #12]
		preempt_anchor = p->ticks_at_expire;
   2aada:	f8d0 a000 	ldr.w	sl, [r0]
		ull = HDR_LLL2ULL(p->param);
   2aade:	681b      	ldr	r3, [r3, #0]
		preempt_to = MAX(ull->ticks_active_to_start,
   2aae0:	f8df 908c 	ldr.w	r9, [pc, #140]	; 2ab70 <preempt_ticker_start+0x154>
   2aae4:	68df      	ldr	r7, [r3, #12]
   2aae6:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   2aaea:	4291      	cmp	r1, r2
   2aaec:	bf2c      	ite	cs
   2aaee:	ebc7 0701 	rsbcs	r7, r7, r1
   2aaf2:	ebc7 0702 	rsbcc	r7, r7, r2
		ticks_at_preempt_new = preempt_anchor + preempt_to;
   2aaf6:	eb0a 0607 	add.w	r6, sl, r7
		ticks_at_preempt_new &= HAL_TICKER_CNTR_MASK;
   2aafa:	4605      	mov	r5, r0
   2aafc:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
   2ab00:	e7c8      	b.n	2aa94 <preempt_ticker_start+0x78>
			return TICKER_STATUS_SUCCESS;
   2ab02:	2000      	movs	r0, #0
}
   2ab04:	b00a      	add	sp, #40	; 0x28
   2ab06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    (preempt_req == preempt_ack)) {
   2ab0a:	491e      	ldr	r1, [pc, #120]	; (2ab84 <preempt_ticker_start+0x168>)
   2ab0c:	481e      	ldr	r0, [pc, #120]	; (2ab88 <preempt_ticker_start+0x16c>)
   2ab0e:	7809      	ldrb	r1, [r1, #0]
	if ((preempt_stop_req != preempt_stop_ack) ||
   2ab10:	7800      	ldrb	r0, [r0, #0]
   2ab12:	4288      	cmp	r0, r1
   2ab14:	d0b4      	beq.n	2aa80 <preempt_ticker_start+0x64>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   2ab16:	9200      	str	r2, [sp, #0]
	preempt_stop_req++;
   2ab18:	7819      	ldrb	r1, [r3, #0]
   2ab1a:	3101      	adds	r1, #1
   2ab1c:	b2c9      	uxtb	r1, r1
   2ab1e:	7019      	strb	r1, [r3, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   2ab20:	4610      	mov	r0, r2
   2ab22:	4b1a      	ldr	r3, [pc, #104]	; (2ab8c <preempt_ticker_start+0x170>)
   2ab24:	4611      	mov	r1, r2
   2ab26:	f7f5 fddf 	bl	206e8 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   2ab2a:	f010 0ffd 	tst.w	r0, #253	; 0xfd
   2ab2e:	d0a7      	beq.n	2aa80 <preempt_ticker_start+0x64>
   2ab30:	4a17      	ldr	r2, [pc, #92]	; (2ab90 <preempt_ticker_start+0x174>)
   2ab32:	4918      	ldr	r1, [pc, #96]	; (2ab94 <preempt_ticker_start+0x178>)
   2ab34:	4818      	ldr	r0, [pc, #96]	; (2ab98 <preempt_ticker_start+0x17c>)
   2ab36:	f240 3399 	movw	r3, #921	; 0x399
   2ab3a:	f008 fc6d 	bl	33418 <assert_print>
   2ab3e:	4040      	eors	r0, r0
   2ab40:	f380 8811 	msr	BASEPRI, r0
   2ab44:	f04f 0003 	mov.w	r0, #3
   2ab48:	df02      	svc	2
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   2ab4a:	4a11      	ldr	r2, [pc, #68]	; (2ab90 <preempt_ticker_start+0x174>)
   2ab4c:	4911      	ldr	r1, [pc, #68]	; (2ab94 <preempt_ticker_start+0x178>)
   2ab4e:	4812      	ldr	r0, [pc, #72]	; (2ab98 <preempt_ticker_start+0x17c>)
   2ab50:	f44f 7356 	mov.w	r3, #856	; 0x358
   2ab54:	f008 fc60 	bl	33418 <assert_print>
   2ab58:	4040      	eors	r0, r0
   2ab5a:	f380 8811 	msr	BASEPRI, r0
   2ab5e:	f04f 0003 	mov.w	r0, #3
   2ab62:	df02      	svc	2
   2ab64:	e78c      	b.n	2aa80 <preempt_ticker_start+0x64>
   2ab66:	bf00      	nop
   2ab68:	200033f2 	.word	0x200033f2
   2ab6c:	200033f1 	.word	0x200033f1
   2ab70:	20002cbc 	.word	0x20002cbc
   2ab74:	200033ef 	.word	0x200033ef
   2ab78:	200033f0 	.word	0x200033f0
   2ab7c:	0002a89d 	.word	0x0002a89d
   2ab80:	0002a99d 	.word	0x0002a99d
   2ab84:	200033ed 	.word	0x200033ed
   2ab88:	200033ee 	.word	0x200033ee
   2ab8c:	0002a941 	.word	0x0002a941
   2ab90:	0003ae14 	.word	0x0003ae14
   2ab94:	0003a510 	.word	0x0003a510
   2ab98:	00039f74 	.word	0x00039f74

0002ab9c <preempt>:

static void preempt(void *param)
{
   2ab9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
   2ab9e:	4e4b      	ldr	r6, [pc, #300]	; (2accc <preempt+0x130>)
   2aba0:	68b3      	ldr	r3, [r6, #8]
{
   2aba2:	b089      	sub	sp, #36	; 0x24
	if (!event.curr.abort_cb || !event.curr.param) {
   2aba4:	b15b      	cbz	r3, 2abbe <preempt+0x22>
   2aba6:	6833      	ldr	r3, [r6, #0]
   2aba8:	b14b      	cbz	r3, 2abbe <preempt+0x22>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
   2abaa:	23ff      	movs	r3, #255	; 0xff
   2abac:	4605      	mov	r5, r0
	next = ull_prepare_dequeue_iter(&idx);
   2abae:	f10d 000a 	add.w	r0, sp, #10
	idx = UINT8_MAX;
   2abb2:	f88d 300a 	strb.w	r3, [sp, #10]
	next = ull_prepare_dequeue_iter(&idx);
   2abb6:	f7f8 f9e9 	bl	22f8c <ull_prepare_dequeue_iter>
	if (!next) {
   2abba:	4602      	mov	r2, r0
   2abbc:	b930      	cbnz	r0, 2abcc <preempt+0x30>
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
	}
}
   2abbe:	b009      	add	sp, #36	; 0x24
   2abc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = ull_prepare_dequeue_iter(&idx);
   2abc2:	f7f8 f9e3 	bl	22f8c <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   2abc6:	4602      	mov	r2, r0
   2abc8:	2800      	cmp	r0, #0
   2abca:	d0f8      	beq.n	2abbe <preempt+0x22>
   2abcc:	7f11      	ldrb	r1, [r2, #28]
   2abce:	f011 0403 	ands.w	r4, r1, #3
		next = ull_prepare_dequeue_iter(&idx);
   2abd2:	f10d 000a 	add.w	r0, sp, #10
	while (next && (next->is_aborted || next->is_resume)) {
   2abd6:	d1f4      	bne.n	2abc2 <preempt+0x26>
	if (next != param) {
   2abd8:	4295      	cmp	r5, r2
   2abda:	d126      	bne.n	2ac2a <preempt+0x8e>
	err = event.curr.is_abort_cb(next->prepare_param.param,
   2abdc:	6873      	ldr	r3, [r6, #4]
   2abde:	6831      	ldr	r1, [r6, #0]
   2abe0:	68e8      	ldr	r0, [r5, #12]
   2abe2:	aa03      	add	r2, sp, #12
   2abe4:	4798      	blx	r3
	if (!err) {
   2abe6:	4607      	mov	r7, r0
   2abe8:	b1b0      	cbz	r0, 2ac18 <preempt+0x7c>
	event.curr.abort_cb(NULL, event.curr.param);
   2abea:	68b3      	ldr	r3, [r6, #8]
   2abec:	6831      	ldr	r1, [r6, #0]
   2abee:	4620      	mov	r0, r4
   2abf0:	4798      	blx	r3
	if (err == -EAGAIN) {
   2abf2:	f117 0f0b 	cmn.w	r7, #11
   2abf6:	d02d      	beq.n	2ac54 <preempt+0xb8>
		LL_ASSERT(err == -ECANCELED);
   2abf8:	378c      	adds	r7, #140	; 0x8c
   2abfa:	d0e0      	beq.n	2abbe <preempt+0x22>
   2abfc:	4a34      	ldr	r2, [pc, #208]	; (2acd0 <preempt+0x134>)
   2abfe:	4935      	ldr	r1, [pc, #212]	; (2acd4 <preempt+0x138>)
   2ac00:	4835      	ldr	r0, [pc, #212]	; (2acd8 <preempt+0x13c>)
   2ac02:	f240 4307 	movw	r3, #1031	; 0x407
   2ac06:	f008 fc07 	bl	33418 <assert_print>
   2ac0a:	4040      	eors	r0, r0
   2ac0c:	f380 8811 	msr	BASEPRI, r0
   2ac10:	f04f 0003 	mov.w	r0, #3
   2ac14:	df02      	svc	2
   2ac16:	e7d2      	b.n	2abbe <preempt+0x22>
		next->is_aborted = 1;
   2ac18:	7f2b      	ldrb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   2ac1a:	69aa      	ldr	r2, [r5, #24]
   2ac1c:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   2ac1e:	f043 0302 	orr.w	r3, r3, #2
   2ac22:	772b      	strb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   2ac24:	4628      	mov	r0, r5
   2ac26:	4790      	blx	r2
		return;
   2ac28:	e7c9      	b.n	2abbe <preempt+0x22>
		ret = preempt_ticker_start(next, NULL, next);
   2ac2a:	4621      	mov	r1, r4
   2ac2c:	4610      	mov	r0, r2
   2ac2e:	f7ff fef5 	bl	2aa1c <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   2ac32:	f030 0302 	bics.w	r3, r0, #2
   2ac36:	d0c2      	beq.n	2abbe <preempt+0x22>
   2ac38:	4a25      	ldr	r2, [pc, #148]	; (2acd0 <preempt+0x134>)
   2ac3a:	4928      	ldr	r1, [pc, #160]	; (2acdc <preempt+0x140>)
   2ac3c:	4826      	ldr	r0, [pc, #152]	; (2acd8 <preempt+0x13c>)
   2ac3e:	f240 33d3 	movw	r3, #979	; 0x3d3
   2ac42:	f008 fbe9 	bl	33418 <assert_print>
   2ac46:	4040      	eors	r0, r0
   2ac48:	f380 8811 	msr	BASEPRI, r0
   2ac4c:	f04f 0003 	mov.w	r0, #3
   2ac50:	df02      	svc	2
   2ac52:	e7b4      	b.n	2abbe <preempt+0x22>
		iter_idx = UINT8_MAX;
   2ac54:	24ff      	movs	r4, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   2ac56:	f10d 000b 	add.w	r0, sp, #11
		iter_idx = UINT8_MAX;
   2ac5a:	f88d 400b 	strb.w	r4, [sp, #11]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   2ac5e:	f7f8 f995 	bl	22f8c <ull_prepare_dequeue_iter>
		while (iter) {
   2ac62:	b928      	cbnz	r0, 2ac70 <preempt+0xd4>
   2ac64:	e013      	b.n	2ac8e <preempt+0xf2>
			iter = ull_prepare_dequeue_iter(&iter_idx);
   2ac66:	f10d 000b 	add.w	r0, sp, #11
   2ac6a:	f7f8 f98f 	bl	22f8c <ull_prepare_dequeue_iter>
		while (iter) {
   2ac6e:	b170      	cbz	r0, 2ac8e <preempt+0xf2>
			if (!iter->is_aborted &&
   2ac70:	7f03      	ldrb	r3, [r0, #28]
   2ac72:	079a      	lsls	r2, r3, #30
   2ac74:	d4f7      	bmi.n	2ac66 <preempt+0xca>
			    event.curr.param == iter->prepare_param.param) {
   2ac76:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   2ac78:	6831      	ldr	r1, [r6, #0]
   2ac7a:	4291      	cmp	r1, r2
   2ac7c:	d1f3      	bne.n	2ac66 <preempt+0xca>
				iter->is_aborted = 1;
   2ac7e:	f043 0302 	orr.w	r3, r3, #2
   2ac82:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   2ac84:	6983      	ldr	r3, [r0, #24]
   2ac86:	4798      	blx	r3
				iter_idx = UINT8_MAX;
   2ac88:	f88d 400b 	strb.w	r4, [sp, #11]
   2ac8c:	e7eb      	b.n	2ac66 <preempt+0xca>
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   2ac8e:	2301      	movs	r3, #1
	prepare_param.param = event.curr.param;
   2ac90:	6830      	ldr	r0, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   2ac92:	9300      	str	r3, [sp, #0]
	struct lll_prepare_param prepare_param = {0};
   2ac94:	2100      	movs	r1, #0
   2ac96:	e9cd 1104 	strd	r1, r1, [sp, #16]
   2ac9a:	9106      	str	r1, [sp, #24]
	prepare_param.param = event.curr.param;
   2ac9c:	9007      	str	r0, [sp, #28]
	event.curr.param = NULL;
   2ac9e:	6031      	str	r1, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   2aca0:	9b03      	ldr	r3, [sp, #12]
   2aca2:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   2aca6:	aa04      	add	r2, sp, #16
   2aca8:	f7f8 f930 	bl	22f0c <ull_prepare_enqueue>
		LL_ASSERT(iter);
   2acac:	2800      	cmp	r0, #0
   2acae:	d186      	bne.n	2abbe <preempt+0x22>
   2acb0:	4a07      	ldr	r2, [pc, #28]	; (2acd0 <preempt+0x134>)
   2acb2:	490b      	ldr	r1, [pc, #44]	; (2ace0 <preempt+0x144>)
   2acb4:	4808      	ldr	r0, [pc, #32]	; (2acd8 <preempt+0x13c>)
   2acb6:	f240 4305 	movw	r3, #1029	; 0x405
   2acba:	f008 fbad 	bl	33418 <assert_print>
   2acbe:	4040      	eors	r0, r0
   2acc0:	f380 8811 	msr	BASEPRI, r0
   2acc4:	f04f 0003 	mov.w	r0, #3
   2acc8:	df02      	svc	2
   2acca:	e778      	b.n	2abbe <preempt+0x22>
   2accc:	20002cc0 	.word	0x20002cc0
   2acd0:	0003ae14 	.word	0x0003ae14
   2acd4:	0003aeec 	.word	0x0003aeec
   2acd8:	00039f74 	.word	0x00039f74
   2acdc:	0003a510 	.word	0x0003a510
   2ace0:	0003aee4 	.word	0x0003aee4

0002ace4 <lll_init>:
{
   2ace4:	b510      	push	{r4, lr}
   2ace6:	4815      	ldr	r0, [pc, #84]	; (2ad3c <lll_init+0x58>)
   2ace8:	f00d fc48 	bl	3857c <z_device_is_ready>
	if (!device_is_ready(dev_entropy)) {
   2acec:	b310      	cbz	r0, 2ad34 <lll_init+0x50>
	event.curr.abort_cb = NULL;
   2acee:	4b14      	ldr	r3, [pc, #80]	; (2ad40 <lll_init+0x5c>)
   2acf0:	2400      	movs	r4, #0
   2acf2:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   2acf4:	f000 faea 	bl	2b2cc <lll_clock_init>
	if (err < 0) {
   2acf8:	2800      	cmp	r0, #0
   2acfa:	db1a      	blt.n	2ad32 <lll_init+0x4e>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   2acfc:	4621      	mov	r1, r4
   2acfe:	2001      	movs	r0, #1
   2ad00:	4622      	mov	r2, r4
   2ad02:	f7e9 fe25 	bl	14950 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   2ad06:	4622      	mov	r2, r4
   2ad08:	200b      	movs	r0, #11
   2ad0a:	2101      	movs	r1, #1
   2ad0c:	f7e9 fe20 	bl	14950 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   2ad10:	4622      	mov	r2, r4
   2ad12:	4621      	mov	r1, r4
   2ad14:	2018      	movs	r0, #24
   2ad16:	f7e9 fe1b 	bl	14950 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   2ad1a:	2001      	movs	r0, #1
   2ad1c:	f7e9 fde8 	bl	148f0 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   2ad20:	200b      	movs	r0, #11
   2ad22:	f7e9 fde5 	bl	148f0 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   2ad26:	2018      	movs	r0, #24
   2ad28:	f7e9 fde2 	bl	148f0 <arch_irq_enable>
	radio_setup();
   2ad2c:	f001 feb4 	bl	2ca98 <radio_setup>
	return 0;
   2ad30:	4620      	mov	r0, r4
}
   2ad32:	bd10      	pop	{r4, pc}
		return -ENODEV;
   2ad34:	f06f 0012 	mvn.w	r0, #18
}
   2ad38:	bd10      	pop	{r4, pc}
   2ad3a:	bf00      	nop
   2ad3c:	00039210 	.word	0x00039210
   2ad40:	20002cc0 	.word	0x20002cc0

0002ad44 <lll_deinit>:
{
   2ad44:	b508      	push	{r3, lr}
	err = lll_clock_deinit();
   2ad46:	f000 fad1 	bl	2b2ec <lll_clock_deinit>
	if (err < 0) {
   2ad4a:	2800      	cmp	r0, #0
   2ad4c:	db09      	blt.n	2ad62 <lll_deinit+0x1e>
	irq_disable(RADIO_IRQn);
   2ad4e:	2001      	movs	r0, #1
   2ad50:	f7e9 fddc 	bl	1490c <arch_irq_disable>
	irq_disable(RTC0_IRQn);
   2ad54:	200b      	movs	r0, #11
   2ad56:	f7e9 fdd9 	bl	1490c <arch_irq_disable>
	irq_disable(HAL_SWI_RADIO_IRQ);
   2ad5a:	2018      	movs	r0, #24
   2ad5c:	f7e9 fdd6 	bl	1490c <arch_irq_disable>
	return 0;
   2ad60:	2000      	movs	r0, #0
}
   2ad62:	bd08      	pop	{r3, pc}

0002ad64 <lll_csrand_get>:
{
   2ad64:	4603      	mov	r3, r0
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   2ad66:	4803      	ldr	r0, [pc, #12]	; (2ad74 <lll_csrand_get+0x10>)
   2ad68:	b28a      	uxth	r2, r1
   2ad6a:	4619      	mov	r1, r3
   2ad6c:	6883      	ldr	r3, [r0, #8]
   2ad6e:	681b      	ldr	r3, [r3, #0]
   2ad70:	4718      	bx	r3
   2ad72:	bf00      	nop
   2ad74:	00039210 	.word	0x00039210

0002ad78 <lll_csrand_isr_get>:
{
   2ad78:	b430      	push	{r4, r5}
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   2ad7a:	4d07      	ldr	r5, [pc, #28]	; (2ad98 <lll_csrand_isr_get+0x20>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   2ad7c:	68ab      	ldr	r3, [r5, #8]
   2ad7e:	685c      	ldr	r4, [r3, #4]
   2ad80:	b134      	cbz	r4, 2ad90 <lll_csrand_isr_get+0x18>
   2ad82:	b28a      	uxth	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   2ad84:	46a4      	mov	ip, r4
   2ad86:	4601      	mov	r1, r0
   2ad88:	2300      	movs	r3, #0
   2ad8a:	4628      	mov	r0, r5
}
   2ad8c:	bc30      	pop	{r4, r5}
   2ad8e:	4760      	bx	ip
   2ad90:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2ad94:	bc30      	pop	{r4, r5}
   2ad96:	4770      	bx	lr
   2ad98:	00039210 	.word	0x00039210

0002ad9c <lll_rand_isr_get>:
int lll_rand_isr_get(void *buf, size_t len)
   2ad9c:	b430      	push	{r4, r5}
   2ad9e:	4d07      	ldr	r5, [pc, #28]	; (2adbc <lll_rand_isr_get+0x20>)
   2ada0:	68ab      	ldr	r3, [r5, #8]
   2ada2:	685c      	ldr	r4, [r3, #4]
   2ada4:	b134      	cbz	r4, 2adb4 <lll_rand_isr_get+0x18>
   2ada6:	b28a      	uxth	r2, r1
   2ada8:	46a4      	mov	ip, r4
   2adaa:	4601      	mov	r1, r0
   2adac:	2300      	movs	r3, #0
   2adae:	4628      	mov	r0, r5
   2adb0:	bc30      	pop	{r4, r5}
   2adb2:	4760      	bx	ip
   2adb4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2adb8:	bc30      	pop	{r4, r5}
   2adba:	4770      	bx	lr
   2adbc:	00039210 	.word	0x00039210

0002adc0 <lll_reset>:
}
   2adc0:	2000      	movs	r0, #0
   2adc2:	4770      	bx	lr

0002adc4 <lll_disable>:
{
   2adc4:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   2adc6:	4604      	mov	r4, r0
{
   2adc8:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   2adca:	b378      	cbz	r0, 2ae2c <lll_disable+0x68>
   2adcc:	4b23      	ldr	r3, [pc, #140]	; (2ae5c <lll_disable+0x98>)
   2adce:	681a      	ldr	r2, [r3, #0]
   2add0:	4282      	cmp	r2, r0
   2add2:	d025      	beq.n	2ae20 <lll_disable+0x5c>
		idx = UINT8_MAX;
   2add4:	25ff      	movs	r5, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   2add6:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   2adda:	f88d 5007 	strb.w	r5, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   2adde:	f7f8 f8d5 	bl	22f8c <ull_prepare_dequeue_iter>
		while (next) {
   2ade2:	b938      	cbnz	r0, 2adf4 <lll_disable+0x30>
   2ade4:	e01a      	b.n	2ae1c <lll_disable+0x58>
			    (!param || (param == next->prepare_param.param))) {
   2ade6:	42a1      	cmp	r1, r4
   2ade8:	d00a      	beq.n	2ae00 <lll_disable+0x3c>
			next = ull_prepare_dequeue_iter(&idx);
   2adea:	f10d 0007 	add.w	r0, sp, #7
   2adee:	f7f8 f8cd 	bl	22f8c <ull_prepare_dequeue_iter>
		while (next) {
   2adf2:	b198      	cbz	r0, 2ae1c <lll_disable+0x58>
			if (!next->is_aborted &&
   2adf4:	7f03      	ldrb	r3, [r0, #28]
   2adf6:	079b      	lsls	r3, r3, #30
   2adf8:	d4f7      	bmi.n	2adea <lll_disable+0x26>
			    (!param || (param == next->prepare_param.param))) {
   2adfa:	68c1      	ldr	r1, [r0, #12]
			if (!next->is_aborted &&
   2adfc:	2c00      	cmp	r4, #0
   2adfe:	d1f2      	bne.n	2ade6 <lll_disable+0x22>
				next->is_aborted = 1;
   2ae00:	7f03      	ldrb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   2ae02:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   2ae04:	f043 0302 	orr.w	r3, r3, #2
   2ae08:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   2ae0a:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   2ae0c:	f10d 0007 	add.w	r0, sp, #7
				idx = UINT8_MAX;
   2ae10:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   2ae14:	f7f8 f8ba 	bl	22f8c <ull_prepare_dequeue_iter>
		while (next) {
   2ae18:	2800      	cmp	r0, #0
   2ae1a:	d1eb      	bne.n	2adf4 <lll_disable+0x30>
}
   2ae1c:	b003      	add	sp, #12
   2ae1e:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   2ae20:	689b      	ldr	r3, [r3, #8]
   2ae22:	b16b      	cbz	r3, 2ae40 <lll_disable+0x7c>
   2ae24:	4601      	mov	r1, r0
			event.curr.abort_cb(NULL, event.curr.param);
   2ae26:	2000      	movs	r0, #0
   2ae28:	4798      	blx	r3
   2ae2a:	e7d3      	b.n	2add4 <lll_disable+0x10>
		if (event.curr.abort_cb && event.curr.param) {
   2ae2c:	4a0b      	ldr	r2, [pc, #44]	; (2ae5c <lll_disable+0x98>)
   2ae2e:	6893      	ldr	r3, [r2, #8]
   2ae30:	2b00      	cmp	r3, #0
   2ae32:	d0cf      	beq.n	2add4 <lll_disable+0x10>
   2ae34:	6811      	ldr	r1, [r2, #0]
   2ae36:	2900      	cmp	r1, #0
   2ae38:	d0cc      	beq.n	2add4 <lll_disable+0x10>
			event.curr.abort_cb(NULL, event.curr.param);
   2ae3a:	2000      	movs	r0, #0
   2ae3c:	4798      	blx	r3
   2ae3e:	e7c9      	b.n	2add4 <lll_disable+0x10>
			LL_ASSERT(!param);
   2ae40:	4a07      	ldr	r2, [pc, #28]	; (2ae60 <lll_disable+0x9c>)
   2ae42:	4908      	ldr	r1, [pc, #32]	; (2ae64 <lll_disable+0xa0>)
   2ae44:	4808      	ldr	r0, [pc, #32]	; (2ae68 <lll_disable+0xa4>)
   2ae46:	f240 1311 	movw	r3, #273	; 0x111
   2ae4a:	f008 fae5 	bl	33418 <assert_print>
   2ae4e:	4040      	eors	r0, r0
   2ae50:	f380 8811 	msr	BASEPRI, r0
   2ae54:	f04f 0003 	mov.w	r0, #3
   2ae58:	df02      	svc	2
   2ae5a:	e7bb      	b.n	2add4 <lll_disable+0x10>
   2ae5c:	20002cc0 	.word	0x20002cc0
   2ae60:	0003ae14 	.word	0x0003ae14
   2ae64:	0003aef8 	.word	0x0003aef8
   2ae68:	00039f74 	.word	0x00039f74

0002ae6c <lll_prepare_done>:
}
   2ae6c:	2000      	movs	r0, #0
   2ae6e:	4770      	bx	lr

0002ae70 <lll_done>:
{
   2ae70:	b538      	push	{r3, r4, r5, lr}
   2ae72:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   2ae74:	f7f8 f87c 	bl	22f70 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   2ae78:	b154      	cbz	r4, 2ae90 <lll_done+0x20>
   2ae7a:	b310      	cbz	r0, 2aec2 <lll_done+0x52>
			ull = HDR_LLL2ULL(param);
   2ae7c:	6824      	ldr	r4, [r4, #0]
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   2ae7e:	2000      	movs	r0, #0
   2ae80:	f7f8 f8a4 	bl	22fcc <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   2ae84:	4620      	mov	r0, r4
   2ae86:	f7f8 f915 	bl	230b4 <ull_event_done>
	LL_ASSERT(evdone);
   2ae8a:	b158      	cbz	r0, 2aea4 <lll_done+0x34>
}
   2ae8c:	2000      	movs	r0, #0
   2ae8e:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(event.curr.abort_cb);
   2ae90:	4d1a      	ldr	r5, [pc, #104]	; (2aefc <lll_done+0x8c>)
   2ae92:	68ab      	ldr	r3, [r5, #8]
   2ae94:	b31b      	cbz	r3, 2aede <lll_done+0x6e>
		param = event.curr.param;
   2ae96:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   2ae98:	2300      	movs	r3, #0
   2ae9a:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   2ae9c:	602b      	str	r3, [r5, #0]
		if (param) {
   2ae9e:	2c00      	cmp	r4, #0
   2aea0:	d1ec      	bne.n	2ae7c <lll_done+0xc>
   2aea2:	e7ec      	b.n	2ae7e <lll_done+0xe>
	LL_ASSERT(evdone);
   2aea4:	4a16      	ldr	r2, [pc, #88]	; (2af00 <lll_done+0x90>)
   2aea6:	4917      	ldr	r1, [pc, #92]	; (2af04 <lll_done+0x94>)
   2aea8:	4817      	ldr	r0, [pc, #92]	; (2af08 <lll_done+0x98>)
   2aeaa:	f44f 73c1 	mov.w	r3, #386	; 0x182
   2aeae:	f008 fab3 	bl	33418 <assert_print>
   2aeb2:	4040      	eors	r0, r0
   2aeb4:	f380 8811 	msr	BASEPRI, r0
   2aeb8:	f04f 0003 	mov.w	r0, #3
   2aebc:	df02      	svc	2
}
   2aebe:	2000      	movs	r0, #0
   2aec0:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!param || next);
   2aec2:	4a0f      	ldr	r2, [pc, #60]	; (2af00 <lll_done+0x90>)
   2aec4:	4911      	ldr	r1, [pc, #68]	; (2af0c <lll_done+0x9c>)
   2aec6:	4810      	ldr	r0, [pc, #64]	; (2af08 <lll_done+0x98>)
   2aec8:	f240 134b 	movw	r3, #331	; 0x14b
   2aecc:	f008 faa4 	bl	33418 <assert_print>
   2aed0:	4040      	eors	r0, r0
   2aed2:	f380 8811 	msr	BASEPRI, r0
   2aed6:	f04f 0003 	mov.w	r0, #3
   2aeda:	df02      	svc	2
		ull = HDR_LLL2ULL(param);
   2aedc:	e7ce      	b.n	2ae7c <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   2aede:	4a08      	ldr	r2, [pc, #32]	; (2af00 <lll_done+0x90>)
   2aee0:	490b      	ldr	r1, [pc, #44]	; (2af10 <lll_done+0xa0>)
   2aee2:	4809      	ldr	r0, [pc, #36]	; (2af08 <lll_done+0x98>)
   2aee4:	f44f 73a8 	mov.w	r3, #336	; 0x150
   2aee8:	f008 fa96 	bl	33418 <assert_print>
   2aeec:	4040      	eors	r0, r0
   2aeee:	f380 8811 	msr	BASEPRI, r0
   2aef2:	f04f 0003 	mov.w	r0, #3
   2aef6:	df02      	svc	2
   2aef8:	e7cd      	b.n	2ae96 <lll_done+0x26>
   2aefa:	bf00      	nop
   2aefc:	20002cc0 	.word	0x20002cc0
   2af00:	0003ae14 	.word	0x0003ae14
   2af04:	0003af24 	.word	0x0003af24
   2af08:	00039f74 	.word	0x00039f74
   2af0c:	0003af00 	.word	0x0003af00
   2af10:	0003af10 	.word	0x0003af10

0002af14 <lll_is_abort_cb>:
}
   2af14:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   2af18:	4770      	bx	lr
   2af1a:	bf00      	nop

0002af1c <lll_event_offset_get>:
		return MAX(ull->ticks_active_to_start,
   2af1c:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   2af20:	2a00      	cmp	r2, #0
   2af22:	db04      	blt.n	2af2e <lll_event_offset_get+0x12>
		return MAX(ull->ticks_active_to_start,
   2af24:	429a      	cmp	r2, r3
   2af26:	bf38      	it	cc
   2af28:	461a      	movcc	r2, r3
   2af2a:	4610      	mov	r0, r2
}
   2af2c:	4770      	bx	lr
		return MAX(ull->ticks_active_to_start,
   2af2e:	68c0      	ldr	r0, [r0, #12]
   2af30:	4298      	cmp	r0, r3
   2af32:	bf38      	it	cc
   2af34:	4618      	movcc	r0, r3
   2af36:	4770      	bx	lr

0002af38 <lll_chan_set>:
	switch (chan) {
   2af38:	2826      	cmp	r0, #38	; 0x26
{
   2af3a:	b510      	push	{r4, lr}
   2af3c:	4604      	mov	r4, r0
	switch (chan) {
   2af3e:	d01c      	beq.n	2af7a <lll_chan_set+0x42>
   2af40:	2827      	cmp	r0, #39	; 0x27
   2af42:	d012      	beq.n	2af6a <lll_chan_set+0x32>
   2af44:	2825      	cmp	r0, #37	; 0x25
   2af46:	d008      	beq.n	2af5a <lll_chan_set+0x22>
		if (chan < 11) {
   2af48:	280a      	cmp	r0, #10
   2af4a:	d91e      	bls.n	2af8a <lll_chan_set+0x52>
		} else if (chan < 40) {
   2af4c:	2827      	cmp	r0, #39	; 0x27
   2af4e:	d821      	bhi.n	2af94 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   2af50:	3003      	adds	r0, #3
   2af52:	0040      	lsls	r0, r0, #1
   2af54:	f001 fdee 	bl	2cb34 <radio_freq_chan_set>
   2af58:	e002      	b.n	2af60 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   2af5a:	2002      	movs	r0, #2
   2af5c:	f001 fdea 	bl	2cb34 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   2af60:	4620      	mov	r0, r4
}
   2af62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   2af66:	f001 bdeb 	b.w	2cb40 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   2af6a:	2050      	movs	r0, #80	; 0x50
   2af6c:	f001 fde2 	bl	2cb34 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   2af70:	4620      	mov	r0, r4
}
   2af72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   2af76:	f001 bde3 	b.w	2cb40 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   2af7a:	201a      	movs	r0, #26
   2af7c:	f001 fdda 	bl	2cb34 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   2af80:	4620      	mov	r0, r4
}
   2af82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   2af86:	f001 bddb 	b.w	2cb40 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   2af8a:	3002      	adds	r0, #2
   2af8c:	0040      	lsls	r0, r0, #1
   2af8e:	f001 fdd1 	bl	2cb34 <radio_freq_chan_set>
   2af92:	e7e5      	b.n	2af60 <lll_chan_set+0x28>
			LL_ASSERT(0);
   2af94:	4a06      	ldr	r2, [pc, #24]	; (2afb0 <lll_chan_set+0x78>)
   2af96:	4907      	ldr	r1, [pc, #28]	; (2afb4 <lll_chan_set+0x7c>)
   2af98:	4807      	ldr	r0, [pc, #28]	; (2afb8 <lll_chan_set+0x80>)
   2af9a:	f240 13f7 	movw	r3, #503	; 0x1f7
   2af9e:	f008 fa3b 	bl	33418 <assert_print>
   2afa2:	4040      	eors	r0, r0
   2afa4:	f380 8811 	msr	BASEPRI, r0
   2afa8:	f04f 0003 	mov.w	r0, #3
   2afac:	df02      	svc	2
   2afae:	e7d7      	b.n	2af60 <lll_chan_set+0x28>
   2afb0:	0003ae14 	.word	0x0003ae14
   2afb4:	0003a004 	.word	0x0003a004
   2afb8:	00039f74 	.word	0x00039f74

0002afbc <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   2afbc:	f001 be1e 	b.w	2cbfc <radio_rx_ready_delay_get>

0002afc0 <lll_isr_tx_status_reset>:
{
   2afc0:	b508      	push	{r3, lr}
	radio_status_reset();
   2afc2:	f001 fe3d 	bl	2cc40 <radio_status_reset>
}
   2afc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   2afca:	f001 bf8b 	b.w	2cee4 <radio_tmr_status_reset>
   2afce:	bf00      	nop

0002afd0 <lll_isr_rx_status_reset>:
{
   2afd0:	b508      	push	{r3, lr}
	radio_status_reset();
   2afd2:	f001 fe35 	bl	2cc40 <radio_status_reset>
	radio_tmr_status_reset();
   2afd6:	f001 ff85 	bl	2cee4 <radio_tmr_status_reset>
}
   2afda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   2afde:	f001 bf2d 	b.w	2ce3c <radio_rssi_status_reset>
   2afe2:	bf00      	nop

0002afe4 <lll_isr_status_reset>:
{
   2afe4:	b508      	push	{r3, lr}
	radio_status_reset();
   2afe6:	f001 fe2b 	bl	2cc40 <radio_status_reset>
	radio_tmr_status_reset();
   2afea:	f001 ff7b 	bl	2cee4 <radio_tmr_status_reset>
	radio_filter_status_reset();
   2afee:	f001 ff61 	bl	2ceb4 <radio_filter_status_reset>
		radio_ar_status_reset();
   2aff2:	f002 f957 	bl	2d2a4 <radio_ar_status_reset>
}
   2aff6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   2affa:	f001 bf1f 	b.w	2ce3c <radio_rssi_status_reset>
   2affe:	bf00      	nop

0002b000 <lll_isr_cleanup>:
{
   2b000:	b508      	push	{r3, lr}
   2b002:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   2b004:	4817      	ldr	r0, [pc, #92]	; (2b064 <lll_isr_cleanup+0x64>)
   2b006:	f001 fd27 	bl	2ca58 <radio_isr_set>
	if (!radio_is_idle()) {
   2b00a:	f001 fe39 	bl	2cc80 <radio_is_idle>
   2b00e:	b160      	cbz	r0, 2b02a <lll_isr_cleanup+0x2a>
	radio_tmr_stop();
   2b010:	f002 f80c 	bl	2d02c <radio_tmr_stop>
	radio_stop();
   2b014:	f001 fd78 	bl	2cb08 <radio_stop>
	err = lll_hfclock_off();
   2b018:	f000 f9a4 	bl	2b364 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   2b01c:	2800      	cmp	r0, #0
   2b01e:	db0e      	blt.n	2b03e <lll_isr_cleanup+0x3e>
}
   2b020:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   2b024:	2000      	movs	r0, #0
   2b026:	f7ff bf23 	b.w	2ae70 <lll_done>
		radio_disable();
   2b02a:	f001 fdf5 	bl	2cc18 <radio_disable>
	radio_tmr_stop();
   2b02e:	f001 fffd 	bl	2d02c <radio_tmr_stop>
	radio_stop();
   2b032:	f001 fd69 	bl	2cb08 <radio_stop>
	err = lll_hfclock_off();
   2b036:	f000 f995 	bl	2b364 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   2b03a:	2800      	cmp	r0, #0
   2b03c:	daf0      	bge.n	2b020 <lll_isr_cleanup+0x20>
   2b03e:	4a0a      	ldr	r2, [pc, #40]	; (2b068 <lll_isr_cleanup+0x68>)
   2b040:	490a      	ldr	r1, [pc, #40]	; (2b06c <lll_isr_cleanup+0x6c>)
   2b042:	480b      	ldr	r0, [pc, #44]	; (2b070 <lll_isr_cleanup+0x70>)
   2b044:	f240 235d 	movw	r3, #605	; 0x25d
   2b048:	f008 f9e6 	bl	33418 <assert_print>
   2b04c:	4040      	eors	r0, r0
   2b04e:	f380 8811 	msr	BASEPRI, r0
   2b052:	f04f 0003 	mov.w	r0, #3
   2b056:	df02      	svc	2
	lll_done(NULL);
   2b058:	2000      	movs	r0, #0
}
   2b05a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   2b05e:	f7ff bf07 	b.w	2ae70 <lll_done>
   2b062:	bf00      	nop
   2b064:	0002a999 	.word	0x0002a999
   2b068:	0003ae14 	.word	0x0003ae14
   2b06c:	0003af2c 	.word	0x0003af2c
   2b070:	00039f74 	.word	0x00039f74

0002b074 <lll_isr_abort>:
{
   2b074:	b510      	push	{r4, lr}
   2b076:	4604      	mov	r4, r0
	radio_status_reset();
   2b078:	f001 fde2 	bl	2cc40 <radio_status_reset>
	radio_tmr_status_reset();
   2b07c:	f001 ff32 	bl	2cee4 <radio_tmr_status_reset>
	radio_filter_status_reset();
   2b080:	f001 ff18 	bl	2ceb4 <radio_filter_status_reset>
		radio_ar_status_reset();
   2b084:	f002 f90e 	bl	2d2a4 <radio_ar_status_reset>
	radio_rssi_status_reset();
   2b088:	f001 fed8 	bl	2ce3c <radio_rssi_status_reset>
	lll_isr_cleanup(param);
   2b08c:	4620      	mov	r0, r4
}
   2b08e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   2b092:	f7ff bfb5 	b.w	2b000 <lll_isr_cleanup>
   2b096:	bf00      	nop

0002b098 <lll_isr_early_abort>:
{
   2b098:	b508      	push	{r3, lr}
   2b09a:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   2b09c:	4813      	ldr	r0, [pc, #76]	; (2b0ec <lll_isr_early_abort+0x54>)
   2b09e:	f001 fcdb 	bl	2ca58 <radio_isr_set>
	if (!radio_is_idle()) {
   2b0a2:	f001 fded 	bl	2cc80 <radio_is_idle>
   2b0a6:	b140      	cbz	r0, 2b0ba <lll_isr_early_abort+0x22>
	err = lll_hfclock_off();
   2b0a8:	f000 f95c 	bl	2b364 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   2b0ac:	2800      	cmp	r0, #0
   2b0ae:	db0a      	blt.n	2b0c6 <lll_isr_early_abort+0x2e>
}
   2b0b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   2b0b4:	2000      	movs	r0, #0
   2b0b6:	f7ff bedb 	b.w	2ae70 <lll_done>
		radio_disable();
   2b0ba:	f001 fdad 	bl	2cc18 <radio_disable>
	err = lll_hfclock_off();
   2b0be:	f000 f951 	bl	2b364 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   2b0c2:	2800      	cmp	r0, #0
   2b0c4:	daf4      	bge.n	2b0b0 <lll_isr_early_abort+0x18>
   2b0c6:	4a0a      	ldr	r2, [pc, #40]	; (2b0f0 <lll_isr_early_abort+0x58>)
   2b0c8:	490a      	ldr	r1, [pc, #40]	; (2b0f4 <lll_isr_early_abort+0x5c>)
   2b0ca:	480b      	ldr	r0, [pc, #44]	; (2b0f8 <lll_isr_early_abort+0x60>)
   2b0cc:	f44f 731b 	mov.w	r3, #620	; 0x26c
   2b0d0:	f008 f9a2 	bl	33418 <assert_print>
   2b0d4:	4040      	eors	r0, r0
   2b0d6:	f380 8811 	msr	BASEPRI, r0
   2b0da:	f04f 0003 	mov.w	r0, #3
   2b0de:	df02      	svc	2
	lll_done(NULL);
   2b0e0:	2000      	movs	r0, #0
}
   2b0e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   2b0e6:	f7ff bec3 	b.w	2ae70 <lll_done>
   2b0ea:	bf00      	nop
   2b0ec:	0002a999 	.word	0x0002a999
   2b0f0:	0003ae14 	.word	0x0003ae14
   2b0f4:	0003af2c 	.word	0x0003af2c
   2b0f8:	00039f74 	.word	0x00039f74

0002b0fc <lll_prepare_resolve>:
{
   2b0fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b100:	b084      	sub	sp, #16
   2b102:	4606      	mov	r6, r0
   2b104:	461d      	mov	r5, r3
	p = ull_prepare_dequeue_iter(&idx);
   2b106:	f10d 000f 	add.w	r0, sp, #15
	idx = UINT8_MAX;
   2b10a:	23ff      	movs	r3, #255	; 0xff
{
   2b10c:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	idx = UINT8_MAX;
   2b110:	f88d 300f 	strb.w	r3, [sp, #15]
{
   2b114:	460f      	mov	r7, r1
   2b116:	4690      	mov	r8, r2
	p = ull_prepare_dequeue_iter(&idx);
   2b118:	f7f7 ff38 	bl	22f8c <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   2b11c:	4604      	mov	r4, r0
   2b11e:	b928      	cbnz	r0, 2b12c <lll_prepare_resolve+0x30>
   2b120:	e03b      	b.n	2b19a <lll_prepare_resolve+0x9e>
		p = ull_prepare_dequeue_iter(&idx);
   2b122:	f7f7 ff33 	bl	22f8c <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   2b126:	4604      	mov	r4, r0
   2b128:	2800      	cmp	r0, #0
   2b12a:	d036      	beq.n	2b19a <lll_prepare_resolve+0x9e>
   2b12c:	f894 c01c 	ldrb.w	ip, [r4, #28]
   2b130:	f01c 0f03 	tst.w	ip, #3
		p = ull_prepare_dequeue_iter(&idx);
   2b134:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   2b138:	d1f3      	bne.n	2b122 <lll_prepare_resolve+0x26>
	    event.curr.abort_cb ||
   2b13a:	f8df a11c 	ldr.w	sl, [pc, #284]	; 2b258 <lll_prepare_resolve+0x15c>
	if ((!is_dequeue && !is_done_sync()) ||
   2b13e:	f8da 3008 	ldr.w	r3, [sl, #8]
   2b142:	2b00      	cmp	r3, #0
   2b144:	d130      	bne.n	2b1a8 <lll_prepare_resolve+0xac>
	    (p && is_resume)) {
   2b146:	f1b9 0f00 	cmp.w	r9, #0
   2b14a:	d16b      	bne.n	2b224 <lll_prepare_resolve+0x128>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
   2b14c:	42ac      	cmp	r4, r5
   2b14e:	d00c      	beq.n	2b16a <lll_prepare_resolve+0x6e>
   2b150:	4a42      	ldr	r2, [pc, #264]	; (2b25c <lll_prepare_resolve+0x160>)
   2b152:	4943      	ldr	r1, [pc, #268]	; (2b260 <lll_prepare_resolve+0x164>)
   2b154:	4843      	ldr	r0, [pc, #268]	; (2b264 <lll_prepare_resolve+0x168>)
   2b156:	f240 23db 	movw	r3, #731	; 0x2db
   2b15a:	f008 f95d 	bl	33418 <assert_print>
   2b15e:	4040      	eors	r0, r0
   2b160:	f380 8811 	msr	BASEPRI, r0
   2b164:	f04f 0003 	mov.w	r0, #3
   2b168:	df02      	svc	2
	event.curr.param = prepare_param->param;
   2b16a:	68eb      	ldr	r3, [r5, #12]
   2b16c:	f8ca 3000 	str.w	r3, [sl]
	event.curr.abort_cb = abort_cb;
   2b170:	e9ca 6701 	strd	r6, r7, [sl, #4]
	err = prepare_cb(prepare_param);
   2b174:	4628      	mov	r0, r5
   2b176:	47c0      	blx	r8
   2b178:	4604      	mov	r4, r0
   2b17a:	e003      	b.n	2b184 <lll_prepare_resolve+0x88>
	} while (p->is_aborted || p->is_resume);
   2b17c:	7f01      	ldrb	r1, [r0, #28]
   2b17e:	f011 0103 	ands.w	r1, r1, #3
   2b182:	d039      	beq.n	2b1f8 <lll_prepare_resolve+0xfc>
		p = ull_prepare_dequeue_iter(&idx);
   2b184:	f10d 000f 	add.w	r0, sp, #15
   2b188:	f7f7 ff00 	bl	22f8c <ull_prepare_dequeue_iter>
   2b18c:	4602      	mov	r2, r0
		if (!p) {
   2b18e:	2800      	cmp	r0, #0
   2b190:	d1f4      	bne.n	2b17c <lll_prepare_resolve+0x80>
}
   2b192:	4620      	mov	r0, r4
   2b194:	b004      	add	sp, #16
   2b196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    event.curr.abort_cb ||
   2b19a:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 2b258 <lll_prepare_resolve+0x15c>
	if ((!is_dequeue && !is_done_sync()) ||
   2b19e:	f8da 3008 	ldr.w	r3, [sl, #8]
   2b1a2:	2b00      	cmp	r3, #0
   2b1a4:	d0e1      	beq.n	2b16a <lll_prepare_resolve+0x6e>
{
   2b1a6:	2400      	movs	r4, #0
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   2b1a8:	462a      	mov	r2, r5
   2b1aa:	f8cd 9000 	str.w	r9, [sp]
   2b1ae:	4643      	mov	r3, r8
   2b1b0:	4639      	mov	r1, r7
   2b1b2:	4630      	mov	r0, r6
   2b1b4:	f7f7 feaa 	bl	22f0c <ull_prepare_enqueue>
		LL_ASSERT(next);
   2b1b8:	4602      	mov	r2, r0
   2b1ba:	2800      	cmp	r0, #0
   2b1bc:	d03c      	beq.n	2b238 <lll_prepare_resolve+0x13c>
		if (is_resume) {
   2b1be:	f1b9 0f00 	cmp.w	r9, #0
   2b1c2:	d116      	bne.n	2b1f2 <lll_prepare_resolve+0xf6>
		ret  = preempt_ticker_start(first, p, next);
   2b1c4:	2c00      	cmp	r4, #0
   2b1c6:	bf14      	ite	ne
   2b1c8:	4620      	movne	r0, r4
   2b1ca:	4610      	moveq	r0, r2
   2b1cc:	4621      	mov	r1, r4
   2b1ce:	f7ff fc25 	bl	2aa1c <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   2b1d2:	f030 0302 	bics.w	r3, r0, #2
   2b1d6:	d00c      	beq.n	2b1f2 <lll_prepare_resolve+0xf6>
   2b1d8:	4a20      	ldr	r2, [pc, #128]	; (2b25c <lll_prepare_resolve+0x160>)
   2b1da:	4923      	ldr	r1, [pc, #140]	; (2b268 <lll_prepare_resolve+0x16c>)
   2b1dc:	4821      	ldr	r0, [pc, #132]	; (2b264 <lll_prepare_resolve+0x168>)
   2b1de:	f240 23b5 	movw	r3, #693	; 0x2b5
   2b1e2:	f008 f919 	bl	33418 <assert_print>
   2b1e6:	4040      	eors	r0, r0
   2b1e8:	f380 8811 	msr	BASEPRI, r0
   2b1ec:	f04f 0003 	mov.w	r0, #3
   2b1f0:	df02      	svc	2
			return -EINPROGRESS;
   2b1f2:	f06f 0476 	mvn.w	r4, #118	; 0x76
   2b1f6:	e7cc      	b.n	2b192 <lll_prepare_resolve+0x96>
	ret = preempt_ticker_start(p, NULL, p);
   2b1f8:	f7ff fc10 	bl	2aa1c <preempt_ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   2b1fc:	f030 0302 	bics.w	r3, r0, #2
   2b200:	d0c7      	beq.n	2b192 <lll_prepare_resolve+0x96>
   2b202:	4a16      	ldr	r2, [pc, #88]	; (2b25c <lll_prepare_resolve+0x160>)
   2b204:	4918      	ldr	r1, [pc, #96]	; (2b268 <lll_prepare_resolve+0x16c>)
   2b206:	4817      	ldr	r0, [pc, #92]	; (2b264 <lll_prepare_resolve+0x168>)
   2b208:	f44f 733e 	mov.w	r3, #760	; 0x2f8
   2b20c:	f008 f904 	bl	33418 <assert_print>
   2b210:	4040      	eors	r0, r0
   2b212:	f380 8811 	msr	BASEPRI, r0
   2b216:	f04f 0003 	mov.w	r0, #3
   2b21a:	df02      	svc	2
}
   2b21c:	4620      	mov	r0, r4
   2b21e:	b004      	add	sp, #16
   2b220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   2b224:	f8cd 9000 	str.w	r9, [sp]
   2b228:	4643      	mov	r3, r8
   2b22a:	462a      	mov	r2, r5
   2b22c:	4639      	mov	r1, r7
   2b22e:	4630      	mov	r0, r6
   2b230:	f7f7 fe6c 	bl	22f0c <ull_prepare_enqueue>
		LL_ASSERT(next);
   2b234:	2800      	cmp	r0, #0
   2b236:	d1dc      	bne.n	2b1f2 <lll_prepare_resolve+0xf6>
   2b238:	4a08      	ldr	r2, [pc, #32]	; (2b25c <lll_prepare_resolve+0x160>)
   2b23a:	490c      	ldr	r1, [pc, #48]	; (2b26c <lll_prepare_resolve+0x170>)
   2b23c:	4809      	ldr	r0, [pc, #36]	; (2b264 <lll_prepare_resolve+0x168>)
   2b23e:	f44f 732a 	mov.w	r3, #680	; 0x2a8
   2b242:	f008 f8e9 	bl	33418 <assert_print>
   2b246:	4040      	eors	r0, r0
   2b248:	f380 8811 	msr	BASEPRI, r0
   2b24c:	f04f 0003 	mov.w	r0, #3
   2b250:	df02      	svc	2
   2b252:	2200      	movs	r2, #0
   2b254:	e7b3      	b.n	2b1be <lll_prepare_resolve+0xc2>
   2b256:	bf00      	nop
   2b258:	20002cc0 	.word	0x20002cc0
   2b25c:	0003ae14 	.word	0x0003ae14
   2b260:	0003af6c 	.word	0x0003af6c
   2b264:	00039f74 	.word	0x00039f74
   2b268:	0003a510 	.word	0x0003a510
   2b26c:	0003af64 	.word	0x0003af64

0002b270 <clock_ready>:
	z_impl_k_sem_give(sem);
   2b270:	f101 0010 	add.w	r0, r1, #16
   2b274:	f006 bc2e 	b.w	31ad4 <z_impl_k_sem_give>

0002b278 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   2b278:	b570      	push	{r4, r5, r6, lr}
   2b27a:	4605      	mov	r5, r0
   2b27c:	b08a      	sub	sp, #40	; 0x28
   2b27e:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   2b280:	2201      	movs	r2, #1
   2b282:	2100      	movs	r1, #0
   2b284:	a804      	add	r0, sp, #16
   2b286:	f00d fb1c 	bl	388c2 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   2b28a:	4b0f      	ldr	r3, [pc, #60]	; (2b2c8 <blocking_on+0x50>)
   2b28c:	9301      	str	r3, [sp, #4]
   2b28e:	2600      	movs	r6, #0
   2b290:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   2b292:	4669      	mov	r1, sp
   2b294:	4628      	mov	r0, r5
   2b296:	9603      	str	r6, [sp, #12]
   2b298:	9302      	str	r3, [sp, #8]
   2b29a:	f007 ffb6 	bl	3320a <onoff_request>
	if (err < 0) {
   2b29e:	2800      	cmp	r0, #0
   2b2a0:	db10      	blt.n	2b2c4 <blocking_on+0x4c>
   2b2a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   2b2a6:	4631      	mov	r1, r6
   2b2a8:	f240 30e7 	movw	r0, #999	; 0x3e7
   2b2ac:	fbe4 0103 	umlal	r0, r1, r4, r3
   2b2b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2b2b4:	2300      	movs	r3, #0
   2b2b6:	f7e4 ff73 	bl	101a0 <__aeabi_uldivmod>
   2b2ba:	4602      	mov	r2, r0
   2b2bc:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   2b2be:	a804      	add	r0, sp, #16
   2b2c0:	f006 fc2e 	bl	31b20 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   2b2c4:	b00a      	add	sp, #40	; 0x28
   2b2c6:	bd70      	pop	{r4, r5, r6, pc}
   2b2c8:	0002b271 	.word	0x0002b271

0002b2cc <lll_clock_init>:

int lll_clock_init(void)
{
   2b2cc:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   2b2ce:	2001      	movs	r0, #1
   2b2d0:	f002 fbfc 	bl	2dacc <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   2b2d4:	4904      	ldr	r1, [pc, #16]	; (2b2e8 <lll_clock_init+0x1c>)
   2b2d6:	2300      	movs	r3, #0
   2b2d8:	2401      	movs	r4, #1
   2b2da:	604b      	str	r3, [r1, #4]
   2b2dc:	608c      	str	r4, [r1, #8]
   2b2de:	60cb      	str	r3, [r1, #12]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   2b2e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return onoff_request(mgr, &lf_cli);
   2b2e4:	f007 bf91 	b.w	3320a <onoff_request>
   2b2e8:	20002cd0 	.word	0x20002cd0

0002b2ec <lll_clock_deinit>:

int lll_clock_deinit(void)
{
   2b2ec:	b508      	push	{r3, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   2b2ee:	2001      	movs	r0, #1
   2b2f0:	f002 fbec 	bl	2dacc <z_nrf_clock_control_get_onoff>

	return onoff_release(mgr);
}
   2b2f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return onoff_release(mgr);
   2b2f8:	f007 bfdf 	b.w	332ba <onoff_release>

0002b2fc <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   2b2fc:	4b0c      	ldr	r3, [pc, #48]	; (2b330 <lll_clock_wait+0x34>)
   2b2fe:	781a      	ldrb	r2, [r3, #0]
   2b300:	b10a      	cbz	r2, 2b306 <lll_clock_wait+0xa>
		return 0;
   2b302:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   2b304:	4770      	bx	lr
{
   2b306:	b510      	push	{r4, lr}
	done = true;
   2b308:	2001      	movs	r0, #1
   2b30a:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   2b30c:	f002 fbde 	bl	2dacc <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   2b310:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   2b314:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   2b316:	f7ff ffaf 	bl	2b278 <blocking_on>
	if (err) {
   2b31a:	b938      	cbnz	r0, 2b32c <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   2b31c:	4620      	mov	r0, r4
   2b31e:	f007 ffcc 	bl	332ba <onoff_release>
	if (err != ONOFF_STATE_ON) {
   2b322:	2802      	cmp	r0, #2
		return 0;
   2b324:	bf0c      	ite	eq
   2b326:	2000      	moveq	r0, #0
		return -EIO;
   2b328:	f06f 0004 	mvnne.w	r0, #4
}
   2b32c:	bd10      	pop	{r4, pc}
   2b32e:	bf00      	nop
   2b330:	200033f3 	.word	0x200033f3

0002b334 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   2b334:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2b336:	4b0a      	ldr	r3, [pc, #40]	; (2b360 <lll_hfclock_on+0x2c>)
   2b338:	f3bf 8f5b 	dmb	ish
   2b33c:	e853 2f00 	ldrex	r2, [r3]
   2b340:	1c51      	adds	r1, r2, #1
   2b342:	e843 1000 	strex	r0, r1, [r3]
   2b346:	2800      	cmp	r0, #0
   2b348:	d1f8      	bne.n	2b33c <lll_hfclock_on+0x8>
   2b34a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   2b34e:	2a00      	cmp	r2, #0
   2b350:	dd01      	ble.n	2b356 <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   2b352:	2000      	movs	r0, #0
   2b354:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   2b356:	f002 fbc1 	bl	2dadc <z_nrf_clock_bt_ctlr_hf_request>
}
   2b35a:	2000      	movs	r0, #0
   2b35c:	bd08      	pop	{r3, pc}
   2b35e:	bf00      	nop
   2b360:	20002ccc 	.word	0x20002ccc

0002b364 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   2b364:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   2b366:	4b0c      	ldr	r3, [pc, #48]	; (2b398 <lll_hfclock_off+0x34>)
   2b368:	681a      	ldr	r2, [r3, #0]
   2b36a:	2a00      	cmp	r2, #0
   2b36c:	dd11      	ble.n	2b392 <lll_hfclock_off+0x2e>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2b36e:	f3bf 8f5b 	dmb	ish
   2b372:	e853 2f00 	ldrex	r2, [r3]
   2b376:	1e51      	subs	r1, r2, #1
   2b378:	e843 1000 	strex	r0, r1, [r3]
   2b37c:	2800      	cmp	r0, #0
   2b37e:	d1f8      	bne.n	2b372 <lll_hfclock_off+0xe>
   2b380:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   2b384:	2a01      	cmp	r2, #1
   2b386:	dd01      	ble.n	2b38c <lll_hfclock_off+0x28>
		return 0;
   2b388:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   2b38a:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   2b38c:	f002 fbbc 	bl	2db08 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   2b390:	e7fa      	b.n	2b388 <lll_hfclock_off+0x24>
		return -EALREADY;
   2b392:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   2b396:	bd08      	pop	{r3, pc}
   2b398:	20002ccc 	.word	0x20002ccc

0002b39c <lll_clock_ppm_local_get>:
}

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   2b39c:	2032      	movs	r0, #50	; 0x32
   2b39e:	4770      	bx	lr

0002b3a0 <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   2b3a0:	4b01      	ldr	r3, [pc, #4]	; (2b3a8 <lll_clock_ppm_get+0x8>)
}
   2b3a2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   2b3a6:	4770      	bx	lr
   2b3a8:	0003afac 	.word	0x0003afac

0002b3ac <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   2b3ac:	b510      	push	{r4, lr}
   2b3ae:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   2b3b0:	f7ff fe18 	bl	2afe4 <lll_isr_status_reset>

	/* Disable any filter that was setup */
	radio_filter_disable();
   2b3b4:	f001 fd74 	bl	2cea0 <radio_filter_disable>

	/* Current LLL radio event is done*/
	lll_isr_cleanup(param);
   2b3b8:	4620      	mov	r0, r4
}
   2b3ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   2b3be:	f7ff be1f 	b.w	2b000 <lll_isr_cleanup>
   2b3c2:	bf00      	nop

0002b3c4 <isr_tx>:
{
   2b3c4:	b530      	push	{r4, r5, lr}
   2b3c6:	b083      	sub	sp, #12
   2b3c8:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   2b3ca:	f7ff fdf9 	bl	2afc0 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   2b3ce:	2096      	movs	r0, #150	; 0x96
   2b3d0:	f001 fd98 	bl	2cf04 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, phy_flags);
   2b3d4:	2300      	movs	r3, #0
   2b3d6:	4618      	mov	r0, r3
   2b3d8:	461a      	mov	r2, r3
   2b3da:	4619      	mov	r1, r3
   2b3dc:	f001 fcc0 	bl	2cd60 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   2b3e0:	2001      	movs	r0, #1
   2b3e2:	f7f7 fd2b 	bl	22e3c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   2b3e6:	4604      	mov	r4, r0
   2b3e8:	2800      	cmp	r0, #0
   2b3ea:	d043      	beq.n	2b474 <isr_tx+0xb0>
	radio_pkt_rx_set(node_rx->pdu);
   2b3ec:	f104 001c 	add.w	r0, r4, #28
   2b3f0:	f001 fbf6 	bl	2cbe0 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   2b3f4:	f001 fc30 	bl	2cc58 <radio_is_ready>
   2b3f8:	b9e0      	cbnz	r0, 2b434 <isr_tx+0x70>
	radio_isr_set(isr_rx, param);
   2b3fa:	4825      	ldr	r0, [pc, #148]	; (2b490 <isr_tx+0xcc>)
   2b3fc:	4629      	mov	r1, r5
   2b3fe:	f001 fb2b 	bl	2ca58 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   2b402:	f7ff fa19 	bl	2a838 <ull_filter_lll_rl_enabled>
   2b406:	bb50      	cbnz	r0, 2b45e <isr_tx+0x9a>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   2b408:	f001 fe64 	bl	2d0d4 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   2b40c:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   2b40e:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   2b410:	4608      	mov	r0, r1
   2b412:	f001 fbf5 	bl	2cc00 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   2b416:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   2b418:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   2b41a:	4608      	mov	r0, r1
   2b41c:	f001 fbec 	bl	2cbf8 <radio_tx_chain_delay_get>
   2b420:	442c      	add	r4, r5
   2b422:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   2b424:	1a20      	subs	r0, r4, r0
   2b426:	f001 fe0d 	bl	2d044 <radio_tmr_hcto_configure>
}
   2b42a:	b003      	add	sp, #12
   2b42c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_tmr_end_capture();
   2b430:	f001 be42 	b.w	2d0b8 <radio_tmr_end_capture>
	LL_ASSERT(!radio_is_ready());
   2b434:	4a17      	ldr	r2, [pc, #92]	; (2b494 <isr_tx+0xd0>)
   2b436:	4918      	ldr	r1, [pc, #96]	; (2b498 <isr_tx+0xd4>)
   2b438:	4818      	ldr	r0, [pc, #96]	; (2b49c <isr_tx+0xd8>)
   2b43a:	f240 4385 	movw	r3, #1157	; 0x485
   2b43e:	f007 ffeb 	bl	33418 <assert_print>
   2b442:	4040      	eors	r0, r0
   2b444:	f380 8811 	msr	BASEPRI, r0
   2b448:	f04f 0003 	mov.w	r0, #3
   2b44c:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   2b44e:	4810      	ldr	r0, [pc, #64]	; (2b490 <isr_tx+0xcc>)
   2b450:	4629      	mov	r1, r5
   2b452:	f001 fb01 	bl	2ca58 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   2b456:	f7ff f9ef 	bl	2a838 <ull_filter_lll_rl_enabled>
   2b45a:	2800      	cmp	r0, #0
   2b45c:	d0d4      	beq.n	2b408 <isr_tx+0x44>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   2b45e:	f10d 0007 	add.w	r0, sp, #7
   2b462:	f7ff f923 	bl	2a6ac <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   2b466:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   2b468:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   2b46a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2b46e:	f001 fedf 	bl	2d230 <radio_ar_configure>
   2b472:	e7c9      	b.n	2b408 <isr_tx+0x44>
	LL_ASSERT(node_rx);
   2b474:	4a07      	ldr	r2, [pc, #28]	; (2b494 <isr_tx+0xd0>)
   2b476:	490a      	ldr	r1, [pc, #40]	; (2b4a0 <isr_tx+0xdc>)
   2b478:	4808      	ldr	r0, [pc, #32]	; (2b49c <isr_tx+0xd8>)
   2b47a:	f240 4381 	movw	r3, #1153	; 0x481
   2b47e:	f007 ffcb 	bl	33418 <assert_print>
   2b482:	4040      	eors	r0, r0
   2b484:	f380 8811 	msr	BASEPRI, r0
   2b488:	f04f 0003 	mov.w	r0, #3
   2b48c:	df02      	svc	2
   2b48e:	e7ad      	b.n	2b3ec <isr_tx+0x28>
   2b490:	0002bc5d 	.word	0x0002bc5d
   2b494:	0003afbc 	.word	0x0003afbc
   2b498:	0003b010 	.word	0x0003b010
   2b49c:	00039f74 	.word	0x00039f74
   2b4a0:	0003b008 	.word	0x0003b008

0002b4a4 <is_abort_cb>:
	if (next != curr) {
   2b4a4:	4281      	cmp	r1, r0
{
   2b4a6:	b508      	push	{r3, lr}
	if (next != curr) {
   2b4a8:	d00e      	beq.n	2b4c8 <is_abort_cb+0x24>
		} else if (lll->is_hdcd) {
   2b4aa:	7a0b      	ldrb	r3, [r1, #8]
   2b4ac:	07db      	lsls	r3, r3, #31
   2b4ae:	d402      	bmi.n	2b4b6 <is_abort_cb+0x12>
			return -ECANCELED;
   2b4b0:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   2b4b4:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   2b4b6:	4b12      	ldr	r3, [pc, #72]	; (2b500 <is_abort_cb+0x5c>)
   2b4b8:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   2b4ba:	f7ff ff3b 	bl	2b334 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   2b4be:	2800      	cmp	r0, #0
   2b4c0:	db0f      	blt.n	2b4e2 <is_abort_cb+0x3e>
{
   2b4c2:	f06f 000a 	mvn.w	r0, #10
}
   2b4c6:	bd08      	pop	{r3, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   2b4c8:	7b0b      	ldrb	r3, [r1, #12]
   2b4ca:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   2b4ce:	690b      	ldr	r3, [r1, #16]
   2b4d0:	781b      	ldrb	r3, [r3, #0]
   2b4d2:	f003 030f 	and.w	r3, r3, #15
		return 0;
   2b4d6:	2b01      	cmp	r3, #1
   2b4d8:	bf14      	ite	ne
   2b4da:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   2b4de:	2000      	moveq	r0, #0
}
   2b4e0:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   2b4e2:	4a08      	ldr	r2, [pc, #32]	; (2b504 <is_abort_cb+0x60>)
   2b4e4:	4908      	ldr	r1, [pc, #32]	; (2b508 <is_abort_cb+0x64>)
   2b4e6:	4809      	ldr	r0, [pc, #36]	; (2b50c <is_abort_cb+0x68>)
   2b4e8:	f240 433a 	movw	r3, #1082	; 0x43a
   2b4ec:	f007 ff94 	bl	33418 <assert_print>
   2b4f0:	4040      	eors	r0, r0
   2b4f2:	f380 8811 	msr	BASEPRI, r0
   2b4f6:	f04f 0003 	mov.w	r0, #3
   2b4fa:	df02      	svc	2
   2b4fc:	e7e1      	b.n	2b4c2 <is_abort_cb+0x1e>
   2b4fe:	bf00      	nop
   2b500:	0002ba6d 	.word	0x0002ba6d
   2b504:	0003afbc 	.word	0x0003afbc
   2b508:	0003af2c 	.word	0x0003af2c
   2b50c:	00039f74 	.word	0x00039f74

0002b510 <isr_abort_all>:

#if defined(CONFIG_BT_PERIPHERAL)
static void isr_abort_all(void *param)
{
   2b510:	b510      	push	{r4, lr}
   2b512:	4604      	mov	r4, r0
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, lll_disable};
	uint32_t ret;

	/* Clear radio status and events */
	lll_isr_status_reset();
   2b514:	f7ff fd66 	bl	2afe4 <lll_isr_status_reset>

	/* Disable any filter that was setup */
	radio_filter_disable();
   2b518:	f001 fcc2 	bl	2cea0 <radio_filter_disable>

	/* Current LLL radio event is done*/
	lll_isr_cleanup(param);
   2b51c:	4620      	mov	r0, r4
   2b51e:	f7ff fd6f 	bl	2b000 <lll_isr_cleanup>

	/* Abort any LLL prepare/resume enqueued in pipeline */
	mfy.param = param;
   2b522:	4b0b      	ldr	r3, [pc, #44]	; (2b550 <isr_abort_all+0x40>)
	ret = mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_LLL, 1U, &mfy);
   2b524:	2100      	movs	r1, #0
   2b526:	2201      	movs	r2, #1
   2b528:	4608      	mov	r0, r1
	mfy.param = param;
   2b52a:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_LLL, 1U, &mfy);
   2b52c:	f7f4 f802 	bl	1f534 <mayfly_enqueue>
	LL_ASSERT(!ret);
   2b530:	b900      	cbnz	r0, 2b534 <isr_abort_all+0x24>
}
   2b532:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   2b534:	4a07      	ldr	r2, [pc, #28]	; (2b554 <isr_abort_all+0x44>)
   2b536:	4908      	ldr	r1, [pc, #32]	; (2b558 <isr_abort_all+0x48>)
   2b538:	4808      	ldr	r0, [pc, #32]	; (2b55c <isr_abort_all+0x4c>)
   2b53a:	f240 538e 	movw	r3, #1422	; 0x58e
   2b53e:	f007 ff6b 	bl	33418 <assert_print>
   2b542:	4040      	eors	r0, r0
   2b544:	f380 8811 	msr	BASEPRI, r0
   2b548:	f04f 0003 	mov.w	r0, #3
   2b54c:	df02      	svc	2
}
   2b54e:	bd10      	pop	{r4, pc}
   2b550:	20000748 	.word	0x20000748
   2b554:	0003afbc 	.word	0x0003afbc
   2b558:	0003a43c 	.word	0x0003a43c
   2b55c:	00039f74 	.word	0x00039f74

0002b560 <abort_cb>:
{
   2b560:	b510      	push	{r4, lr}
	if (!prepare_param) {
   2b562:	b1d8      	cbz	r0, 2b59c <abort_cb+0x3c>
	err = lll_hfclock_off();
   2b564:	460c      	mov	r4, r1
   2b566:	f7ff fefd 	bl	2b364 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   2b56a:	2800      	cmp	r0, #0
   2b56c:	db04      	blt.n	2b578 <abort_cb+0x18>
	lll_done(param);
   2b56e:	4620      	mov	r0, r4
}
   2b570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   2b574:	f7ff bc7c 	b.w	2ae70 <lll_done>
	LL_ASSERT(err >= 0);
   2b578:	4a0c      	ldr	r2, [pc, #48]	; (2b5ac <abort_cb+0x4c>)
   2b57a:	490d      	ldr	r1, [pc, #52]	; (2b5b0 <abort_cb+0x50>)
   2b57c:	480d      	ldr	r0, [pc, #52]	; (2b5b4 <abort_cb+0x54>)
   2b57e:	f44f 638c 	mov.w	r3, #1120	; 0x460
   2b582:	f007 ff49 	bl	33418 <assert_print>
   2b586:	4040      	eors	r0, r0
   2b588:	f380 8811 	msr	BASEPRI, r0
   2b58c:	f04f 0003 	mov.w	r0, #3
   2b590:	df02      	svc	2
	lll_done(param);
   2b592:	4620      	mov	r0, r4
}
   2b594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   2b598:	f7ff bc6a 	b.w	2ae70 <lll_done>
		radio_isr_set(isr_abort, param);
   2b59c:	4806      	ldr	r0, [pc, #24]	; (2b5b8 <abort_cb+0x58>)
   2b59e:	f001 fa5b 	bl	2ca58 <radio_isr_set>
}
   2b5a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   2b5a6:	f001 bb37 	b.w	2cc18 <radio_disable>
   2b5aa:	bf00      	nop
   2b5ac:	0003afbc 	.word	0x0003afbc
   2b5b0:	0003af2c 	.word	0x0003af2c
   2b5b4:	00039f74 	.word	0x00039f74
   2b5b8:	0002b3ad 	.word	0x0002b3ad

0002b5bc <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   2b5bc:	4b08      	ldr	r3, [pc, #32]	; (2b5e0 <lll_adv_init+0x24>)
   2b5be:	2204      	movs	r2, #4
{
   2b5c0:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   2b5c2:	1898      	adds	r0, r3, r2
   2b5c4:	2128      	movs	r1, #40	; 0x28
   2b5c6:	f7f3 fea9 	bl	1f31c <mem_init>
	MFIFO_INIT(pdu_free);
   2b5ca:	4b06      	ldr	r3, [pc, #24]	; (2b5e4 <lll_adv_init+0x28>)
   2b5cc:	2400      	movs	r4, #0
   2b5ce:	809c      	strh	r4, [r3, #4]
	return z_impl_k_sem_init(sem, initial_count, limit);
   2b5d0:	2202      	movs	r2, #2
   2b5d2:	4621      	mov	r1, r4
   2b5d4:	4804      	ldr	r0, [pc, #16]	; (2b5e8 <lll_adv_init+0x2c>)
   2b5d6:	f00d f974 	bl	388c2 <z_impl_k_sem_init>
}
   2b5da:	4620      	mov	r0, r4
   2b5dc:	bd10      	pop	{r4, pc}
   2b5de:	bf00      	nop
   2b5e0:	20002d00 	.word	0x20002d00
   2b5e4:	20000758 	.word	0x20000758
   2b5e8:	20002ce8 	.word	0x20002ce8

0002b5ec <lll_adv_reset>:
int lll_adv_reset(void)
   2b5ec:	4b08      	ldr	r3, [pc, #32]	; (2b610 <lll_adv_reset+0x24>)
   2b5ee:	2204      	movs	r2, #4
   2b5f0:	b510      	push	{r4, lr}
   2b5f2:	1898      	adds	r0, r3, r2
   2b5f4:	2128      	movs	r1, #40	; 0x28
   2b5f6:	f7f3 fe91 	bl	1f31c <mem_init>
   2b5fa:	4b06      	ldr	r3, [pc, #24]	; (2b614 <lll_adv_reset+0x28>)
   2b5fc:	2400      	movs	r4, #0
   2b5fe:	809c      	strh	r4, [r3, #4]
   2b600:	2202      	movs	r2, #2
   2b602:	4621      	mov	r1, r4
   2b604:	4804      	ldr	r0, [pc, #16]	; (2b618 <lll_adv_reset+0x2c>)
   2b606:	f00d f95c 	bl	388c2 <z_impl_k_sem_init>
   2b60a:	4620      	mov	r0, r4
   2b60c:	bd10      	pop	{r4, pc}
   2b60e:	bf00      	nop
   2b610:	20002d00 	.word	0x20002d00
   2b614:	20000758 	.word	0x20000758
   2b618:	20002ce8 	.word	0x20002ce8

0002b61c <lll_adv_data_init>:
{
   2b61c:	b510      	push	{r4, lr}
   2b61e:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   2b620:	4805      	ldr	r0, [pc, #20]	; (2b638 <lll_adv_data_init+0x1c>)
   2b622:	f7f3 feab 	bl	1f37c <mem_acquire>
	if (!p) {
   2b626:	b120      	cbz	r0, 2b632 <lll_adv_data_init+0x16>
   2b628:	4603      	mov	r3, r0
	p->len = 0U;
   2b62a:	2000      	movs	r0, #0
   2b62c:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   2b62e:	6063      	str	r3, [r4, #4]
}
   2b630:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   2b632:	f06f 000b 	mvn.w	r0, #11
}
   2b636:	bd10      	pop	{r4, pc}
   2b638:	20002d00 	.word	0x20002d00

0002b63c <lll_adv_data_reset>:
{
   2b63c:	4603      	mov	r3, r0
	pdu->first = 0U;
   2b63e:	2000      	movs	r0, #0
   2b640:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   2b642:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   2b644:	6098      	str	r0, [r3, #8]
}
   2b646:	4770      	bx	lr

0002b648 <lll_adv_pdu_alloc_pdu_adv>:
{
   2b648:	b538      	push	{r3, r4, r5, lr}
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   2b64a:	4c2d      	ldr	r4, [pc, #180]	; (2b700 <lll_adv_pdu_alloc_pdu_adv+0xb8>)
   2b64c:	7923      	ldrb	r3, [r4, #4]
	if (first == last) {
   2b64e:	7962      	ldrb	r2, [r4, #5]
   2b650:	7821      	ldrb	r1, [r4, #0]
   2b652:	429a      	cmp	r2, r3
   2b654:	d003      	beq.n	2b65e <lll_adv_pdu_alloc_pdu_adv+0x16>
	return *((void **)(fifo + first * size));
   2b656:	fb01 4303 	mla	r3, r1, r3, r4
   2b65a:	689d      	ldr	r5, [r3, #8]
	if (p) {
   2b65c:	b935      	cbnz	r5, 2b66c <lll_adv_pdu_alloc_pdu_adv+0x24>
	p = mem_acquire(&mem_pdu.free);
   2b65e:	4829      	ldr	r0, [pc, #164]	; (2b704 <lll_adv_pdu_alloc_pdu_adv+0xbc>)
   2b660:	f7f3 fe8c 	bl	1f37c <mem_acquire>
	if (p) {
   2b664:	4605      	mov	r5, r0
   2b666:	b188      	cbz	r0, 2b68c <lll_adv_pdu_alloc_pdu_adv+0x44>
}
   2b668:	4628      	mov	r0, r5
   2b66a:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_reset(sem);
   2b66c:	4826      	ldr	r0, [pc, #152]	; (2b708 <lll_adv_pdu_alloc_pdu_adv+0xc0>)
   2b66e:	f006 fa7f 	bl	31b70 <z_impl_k_sem_reset>
	uint8_t _first = *first; /* Copy read-index */
   2b672:	7923      	ldrb	r3, [r4, #4]
	if (_first == last) {
   2b674:	7962      	ldrb	r2, [r4, #5]
		MFIFO_DEQUEUE(pdu_free);
   2b676:	78a1      	ldrb	r1, [r4, #2]
   2b678:	429a      	cmp	r2, r3
   2b67a:	d0f5      	beq.n	2b668 <lll_adv_pdu_alloc_pdu_adv+0x20>
	_first += 1U;
   2b67c:	3301      	adds	r3, #1
   2b67e:	b2db      	uxtb	r3, r3
		_first = 0U;
   2b680:	4299      	cmp	r1, r3
   2b682:	bf08      	it	eq
   2b684:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   2b686:	7123      	strb	r3, [r4, #4]
}
   2b688:	4628      	mov	r0, r5
   2b68a:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_sem_take(sem, timeout);
   2b68c:	481e      	ldr	r0, [pc, #120]	; (2b708 <lll_adv_pdu_alloc_pdu_adv+0xc0>)
   2b68e:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   2b692:	2300      	movs	r3, #0
   2b694:	f006 fa44 	bl	31b20 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   2b698:	b9b0      	cbnz	r0, 2b6c8 <lll_adv_pdu_alloc_pdu_adv+0x80>
	z_impl_k_sem_reset(sem);
   2b69a:	481b      	ldr	r0, [pc, #108]	; (2b708 <lll_adv_pdu_alloc_pdu_adv+0xc0>)
   2b69c:	f006 fa68 	bl	31b70 <z_impl_k_sem_reset>
	uint8_t _first = *first; /* Copy read-index */
   2b6a0:	7923      	ldrb	r3, [r4, #4]
	if (_first == last) {
   2b6a2:	7961      	ldrb	r1, [r4, #5]
	p = MFIFO_DEQUEUE(pdu_free);
   2b6a4:	7822      	ldrb	r2, [r4, #0]
   2b6a6:	78a0      	ldrb	r0, [r4, #2]
   2b6a8:	4299      	cmp	r1, r3
   2b6aa:	d01b      	beq.n	2b6e4 <lll_adv_pdu_alloc_pdu_adv+0x9c>
	mem = *((void **)(fifo + _first * size));
   2b6ac:	fb13 f202 	smulbb	r2, r3, r2
   2b6b0:	4916      	ldr	r1, [pc, #88]	; (2b70c <lll_adv_pdu_alloc_pdu_adv+0xc4>)
	_first += 1U;
   2b6b2:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   2b6b4:	588a      	ldr	r2, [r1, r2]
	_first += 1U;
   2b6b6:	b2db      	uxtb	r3, r3
		_first = 0U;
   2b6b8:	4298      	cmp	r0, r3
   2b6ba:	bf08      	it	eq
   2b6bc:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   2b6be:	7123      	strb	r3, [r4, #4]
	LL_ASSERT(p);
   2b6c0:	b182      	cbz	r2, 2b6e4 <lll_adv_pdu_alloc_pdu_adv+0x9c>
   2b6c2:	4615      	mov	r5, r2
}
   2b6c4:	4628      	mov	r0, r5
   2b6c6:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!err);
   2b6c8:	4a11      	ldr	r2, [pc, #68]	; (2b710 <lll_adv_pdu_alloc_pdu_adv+0xc8>)
   2b6ca:	4912      	ldr	r1, [pc, #72]	; (2b714 <lll_adv_pdu_alloc_pdu_adv+0xcc>)
   2b6cc:	4812      	ldr	r0, [pc, #72]	; (2b718 <lll_adv_pdu_alloc_pdu_adv+0xd0>)
   2b6ce:	f240 13b1 	movw	r3, #433	; 0x1b1
   2b6d2:	f007 fea1 	bl	33418 <assert_print>
   2b6d6:	4040      	eors	r0, r0
   2b6d8:	f380 8811 	msr	BASEPRI, r0
   2b6dc:	f04f 0003 	mov.w	r0, #3
   2b6e0:	df02      	svc	2
   2b6e2:	e7da      	b.n	2b69a <lll_adv_pdu_alloc_pdu_adv+0x52>
	LL_ASSERT(p);
   2b6e4:	4a0a      	ldr	r2, [pc, #40]	; (2b710 <lll_adv_pdu_alloc_pdu_adv+0xc8>)
   2b6e6:	490d      	ldr	r1, [pc, #52]	; (2b71c <lll_adv_pdu_alloc_pdu_adv+0xd4>)
   2b6e8:	480b      	ldr	r0, [pc, #44]	; (2b718 <lll_adv_pdu_alloc_pdu_adv+0xd0>)
   2b6ea:	f44f 73db 	mov.w	r3, #438	; 0x1b6
   2b6ee:	f007 fe93 	bl	33418 <assert_print>
   2b6f2:	4040      	eors	r0, r0
   2b6f4:	f380 8811 	msr	BASEPRI, r0
   2b6f8:	f04f 0003 	mov.w	r0, #3
   2b6fc:	df02      	svc	2
   2b6fe:	e7b3      	b.n	2b668 <lll_adv_pdu_alloc_pdu_adv+0x20>
   2b700:	20000758 	.word	0x20000758
   2b704:	20002d00 	.word	0x20002d00
   2b708:	20002ce8 	.word	0x20002ce8
   2b70c:	20000760 	.word	0x20000760
   2b710:	0003afbc 	.word	0x0003afbc
   2b714:	0003a33c 	.word	0x0003a33c
   2b718:	00039f74 	.word	0x00039f74
   2b71c:	0003b024 	.word	0x0003b024

0002b720 <lll_adv_pdu_alloc>:
{
   2b720:	b510      	push	{r4, lr}
	first = pdu->first;
   2b722:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   2b724:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   2b726:	429a      	cmp	r2, r3
   2b728:	d014      	beq.n	2b754 <lll_adv_pdu_alloc+0x34>
		pdu->last = first;
   2b72a:	b2d4      	uxtb	r4, r2
   2b72c:	7044      	strb	r4, [r0, #1]
		first_latest = pdu->first;
   2b72e:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   2b730:	4294      	cmp	r4, r2
   2b732:	d004      	beq.n	2b73e <lll_adv_pdu_alloc+0x1e>
			last++;
   2b734:	1c5a      	adds	r2, r3, #1
			pdu->last = last;
   2b736:	7043      	strb	r3, [r0, #1]
			last++;
   2b738:	b2d3      	uxtb	r3, r2
			if (last == DOUBLE_BUFFER_SIZE) {
   2b73a:	2b02      	cmp	r3, #2
   2b73c:	d00e      	beq.n	2b75c <lll_adv_pdu_alloc+0x3c>
	p = (void *)pdu->pdu[last];
   2b73e:	461a      	mov	r2, r3
	*idx = last;
   2b740:	eb00 0482 	add.w	r4, r0, r2, lsl #2
   2b744:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   2b746:	6860      	ldr	r0, [r4, #4]
	if (p) {
   2b748:	b100      	cbz	r0, 2b74c <lll_adv_pdu_alloc+0x2c>
}
   2b74a:	bd10      	pop	{r4, pc}
	p = lll_adv_pdu_alloc_pdu_adv();
   2b74c:	f7ff ff7c 	bl	2b648 <lll_adv_pdu_alloc_pdu_adv>
	pdu->pdu[last] = (void *)p;
   2b750:	6060      	str	r0, [r4, #4]
}
   2b752:	bd10      	pop	{r4, pc}
		last++;
   2b754:	3301      	adds	r3, #1
   2b756:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   2b758:	2b02      	cmp	r3, #2
   2b75a:	d1f0      	bne.n	2b73e <lll_adv_pdu_alloc+0x1e>
{
   2b75c:	2200      	movs	r2, #0
			last = 0U;
   2b75e:	4613      	mov	r3, r2
   2b760:	e7ee      	b.n	2b740 <lll_adv_pdu_alloc+0x20>
   2b762:	bf00      	nop

0002b764 <lll_adv_pdu_latest_get>:
{
   2b764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	first = pdu->first;
   2b766:	7802      	ldrb	r2, [r0, #0]
	if (first != pdu->last) {
   2b768:	7843      	ldrb	r3, [r0, #1]
   2b76a:	4293      	cmp	r3, r2
{
   2b76c:	4604      	mov	r4, r0
	if (first != pdu->last) {
   2b76e:	d02c      	beq.n	2b7ca <lll_adv_pdu_latest_get+0x66>
		pdu_idx = first;
   2b770:	b2d5      	uxtb	r5, r2
			if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   2b772:	4a18      	ldr	r2, [pc, #96]	; (2b7d4 <lll_adv_pdu_latest_get+0x70>)
   2b774:	f892 e005 	ldrb.w	lr, [r2, #5]
   2b778:	eb00 0785 	add.w	r7, r0, r5, lsl #2
	last = last + 1;
   2b77c:	f10e 0301 	add.w	r3, lr, #1
	if (last == count) {
   2b780:	7890      	ldrb	r0, [r2, #2]
	last = last + 1;
   2b782:	b2db      	uxtb	r3, r3
		last = 0U;
   2b784:	4298      	cmp	r0, r3
   2b786:	bf08      	it	eq
   2b788:	2300      	moveq	r3, #0
   2b78a:	7910      	ldrb	r0, [r2, #4]
	if (last == first) {
   2b78c:	4298      	cmp	r0, r3
   2b78e:	460e      	mov	r6, r1
		p = pdu->pdu[pdu_idx];
   2b790:	6879      	ldr	r1, [r7, #4]
   2b792:	d00b      	beq.n	2b7ac <lll_adv_pdu_latest_get+0x48>
			MFIFO_BY_IDX_ENQUEUE(pdu_free, free_idx, p);
   2b794:	4694      	mov	ip, r2
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   2b796:	f81c 0b08 	ldrb.w	r0, [ip], #8
   2b79a:	fb10 f00e 	smulbb	r0, r0, lr
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   2b79e:	f84c 1000 	str.w	r1, [ip, r0]
	*last = idx; /* Commit: Update write index */
   2b7a2:	7153      	strb	r3, [r2, #5]
	z_impl_k_sem_give(sem);
   2b7a4:	480c      	ldr	r0, [pc, #48]	; (2b7d8 <lll_adv_pdu_latest_get+0x74>)
   2b7a6:	f006 f995 	bl	31ad4 <z_impl_k_sem_give>
			p = next;
   2b7aa:	2100      	movs	r1, #0
		first += 1U;
   2b7ac:	1c6b      	adds	r3, r5, #1
   2b7ae:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   2b7b0:	2b02      	cmp	r3, #2
   2b7b2:	bf0a      	itet	eq
   2b7b4:	2200      	moveq	r2, #0
	return (void *)pdu->pdu[first];
   2b7b6:	461a      	movne	r2, r3
			first = 0U;
   2b7b8:	4613      	moveq	r3, r2
		pdu->pdu[pdu_idx] = p;
   2b7ba:	6079      	str	r1, [r7, #4]
		pdu->first = first;
   2b7bc:	7023      	strb	r3, [r4, #0]
		*is_modified = 1U;
   2b7be:	2101      	movs	r1, #1
	return (void *)pdu->pdu[first];
   2b7c0:	eb04 0482 	add.w	r4, r4, r2, lsl #2
		*is_modified = 1U;
   2b7c4:	7031      	strb	r1, [r6, #0]
}
   2b7c6:	6860      	ldr	r0, [r4, #4]
   2b7c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = pdu->pdu[pdu_idx];
   2b7ca:	461a      	mov	r2, r3
	return (void *)pdu->pdu[first];
   2b7cc:	eb04 0482 	add.w	r4, r4, r2, lsl #2
}
   2b7d0:	6860      	ldr	r0, [r4, #4]
   2b7d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b7d4:	20000758 	.word	0x20000758
   2b7d8:	20002ce8 	.word	0x20002ce8

0002b7dc <chan_prepare.isra.0>:
#endif /* CONFIG_BT_PERIPHERAL */

static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   2b7dc:	b570      	push	{r4, r5, r6, lr}
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   2b7de:	7a03      	ldrb	r3, [r0, #8]
   2b7e0:	f3c3 1302 	ubfx	r3, r3, #4, #3
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   2b7e4:	4604      	mov	r4, r0
   2b7e6:	2b00      	cmp	r3, #0
   2b7e8:	fa93 f0a3 	rbit	r0, r3
   2b7ec:	fab0 f080 	clz	r0, r0
   2b7f0:	bf08      	it	eq
   2b7f2:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
   2b7f6:	b082      	sub	sp, #8
   2b7f8:	f100 0501 	add.w	r5, r0, #1
	LL_ASSERT(chan);
   2b7fc:	d045      	beq.n	2b88a <chan_prepare.isra.0+0xae>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   2b7fe:	7a21      	ldrb	r1, [r4, #8]
   2b800:	1e5a      	subs	r2, r3, #1
   2b802:	4013      	ands	r3, r2
   2b804:	f363 1106 	bfi	r1, r3, #4, #3

	lll_chan_set(36 + chan);
   2b808:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   2b80c:	7221      	strb	r1, [r4, #8]
	lll_chan_set(36 + chan);
   2b80e:	f7ff fb93 	bl	2af38 <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   2b812:	2300      	movs	r3, #0
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static inline struct pdu_adv *lll_adv_data_latest_get(struct lll_adv *lll,
						      uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   2b814:	f10d 0107 	add.w	r1, sp, #7
   2b818:	f104 000c 	add.w	r0, r4, #12
   2b81c:	f88d 3007 	strb.w	r3, [sp, #7]
   2b820:	f7ff ffa0 	bl	2b764 <lll_adv_pdu_latest_get>
	pdu = lll_adv_data_latest_get(lll, &upd);
	LL_ASSERT(pdu);
   2b824:	4605      	mov	r5, r0
   2b826:	2800      	cmp	r0, #0
   2b828:	d040      	beq.n	2b8ac <chan_prepare.isra.0+0xd0>

	radio_pkt_tx_set(pdu);
   2b82a:	4628      	mov	r0, r5
   2b82c:	f001 f9de 	bl	2cbec <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   2b830:	782b      	ldrb	r3, [r5, #0]
   2b832:	f003 030f 	and.w	r3, r3, #15
   2b836:	2b02      	cmp	r3, #2
   2b838:	d01e      	beq.n	2b878 <chan_prepare.isra.0+0x9c>
}

static inline struct pdu_adv *lll_adv_scan_rsp_latest_get(struct lll_adv *lll,
							  uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   2b83a:	f10d 0107 	add.w	r1, sp, #7
   2b83e:	f104 0018 	add.w	r0, r4, #24
   2b842:	f7ff ff8f 	bl	2b764 <lll_adv_pdu_latest_get>
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);
		LL_ASSERT(scan_pdu);
   2b846:	4606      	mov	r6, r0
   2b848:	2800      	cmp	r0, #0
   2b84a:	d03d      	beq.n	2b8c8 <chan_prepare.isra.0+0xec>

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
   2b84c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2b850:	b963      	cbnz	r3, 2b86c <chan_prepare.isra.0+0x90>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   2b852:	4621      	mov	r1, r4
   2b854:	4823      	ldr	r0, [pc, #140]	; (2b8e4 <chan_prepare.isra.0+0x108>)
   2b856:	f001 f8ff 	bl	2ca58 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   2b85a:	2096      	movs	r0, #150	; 0x96
   2b85c:	f001 fb52 	bl	2cf04 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   2b860:	2000      	movs	r0, #0
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   2b862:	b002      	add	sp, #8
   2b864:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_switch_complete_and_rx(0);
   2b868:	f001 ba32 	b.w	2ccd0 <radio_switch_complete_and_rx>
			memcpy(&scan_pdu->scan_rsp.addr[0],
   2b86c:	2206      	movs	r2, #6
   2b86e:	1ca9      	adds	r1, r5, #2
   2b870:	1cb0      	adds	r0, r6, #2
   2b872:	f009 fe60 	bl	35536 <memcpy>
   2b876:	e7ec      	b.n	2b852 <chan_prepare.isra.0+0x76>
		radio_isr_set(isr_done, lll);
   2b878:	481b      	ldr	r0, [pc, #108]	; (2b8e8 <chan_prepare.isra.0+0x10c>)
   2b87a:	4621      	mov	r1, r4
   2b87c:	f001 f8ec 	bl	2ca58 <radio_isr_set>
}
   2b880:	b002      	add	sp, #8
   2b882:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_switch_complete_and_disable();
   2b886:	f001 bacb 	b.w	2ce20 <radio_switch_complete_and_disable>
	LL_ASSERT(chan);
   2b88a:	4a18      	ldr	r2, [pc, #96]	; (2b8ec <chan_prepare.isra.0+0x110>)
   2b88c:	4918      	ldr	r1, [pc, #96]	; (2b8f0 <chan_prepare.isra.0+0x114>)
   2b88e:	4819      	ldr	r0, [pc, #100]	; (2b8f4 <chan_prepare.isra.0+0x118>)
   2b890:	f240 5399 	movw	r3, #1433	; 0x599
   2b894:	f007 fdc0 	bl	33418 <assert_print>
   2b898:	4040      	eors	r0, r0
   2b89a:	f380 8811 	msr	BASEPRI, r0
   2b89e:	f04f 0003 	mov.w	r0, #3
   2b8a2:	df02      	svc	2
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   2b8a4:	7a23      	ldrb	r3, [r4, #8]
   2b8a6:	f3c3 1302 	ubfx	r3, r3, #4, #3
   2b8aa:	e7a8      	b.n	2b7fe <chan_prepare.isra.0+0x22>
	LL_ASSERT(pdu);
   2b8ac:	4a0f      	ldr	r2, [pc, #60]	; (2b8ec <chan_prepare.isra.0+0x110>)
   2b8ae:	4912      	ldr	r1, [pc, #72]	; (2b8f8 <chan_prepare.isra.0+0x11c>)
   2b8b0:	4810      	ldr	r0, [pc, #64]	; (2b8f4 <chan_prepare.isra.0+0x118>)
   2b8b2:	f240 53a2 	movw	r3, #1442	; 0x5a2
   2b8b6:	f007 fdaf 	bl	33418 <assert_print>
   2b8ba:	4040      	eors	r0, r0
   2b8bc:	f380 8811 	msr	BASEPRI, r0
   2b8c0:	f04f 0003 	mov.w	r0, #3
   2b8c4:	df02      	svc	2
   2b8c6:	e7b0      	b.n	2b82a <chan_prepare.isra.0+0x4e>
		LL_ASSERT(scan_pdu);
   2b8c8:	4a08      	ldr	r2, [pc, #32]	; (2b8ec <chan_prepare.isra.0+0x110>)
   2b8ca:	490c      	ldr	r1, [pc, #48]	; (2b8fc <chan_prepare.isra.0+0x120>)
   2b8cc:	4809      	ldr	r0, [pc, #36]	; (2b8f4 <chan_prepare.isra.0+0x118>)
   2b8ce:	f240 53ac 	movw	r3, #1452	; 0x5ac
   2b8d2:	f007 fda1 	bl	33418 <assert_print>
   2b8d6:	4040      	eors	r0, r0
   2b8d8:	f380 8811 	msr	BASEPRI, r0
   2b8dc:	f04f 0003 	mov.w	r0, #3
   2b8e0:	df02      	svc	2
   2b8e2:	e7b3      	b.n	2b84c <chan_prepare.isra.0+0x70>
   2b8e4:	0002b3c5 	.word	0x0002b3c5
   2b8e8:	0002b901 	.word	0x0002b901
   2b8ec:	0003afbc 	.word	0x0003afbc
   2b8f0:	0003b028 	.word	0x0003b028
   2b8f4:	00039f74 	.word	0x00039f74
   2b8f8:	0003b030 	.word	0x0003b030
   2b8fc:	0003b034 	.word	0x0003b034

0002b900 <isr_done>:
{
   2b900:	b510      	push	{r4, lr}
   2b902:	4604      	mov	r4, r0
	lll_isr_status_reset();
   2b904:	f7ff fb6e 	bl	2afe4 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   2b908:	7a23      	ldrb	r3, [r4, #8]
   2b90a:	f003 0271 	and.w	r2, r3, #113	; 0x71
   2b90e:	2a01      	cmp	r2, #1
   2b910:	d105      	bne.n	2b91e <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   2b912:	f3c3 0242 	ubfx	r2, r3, #1, #3
   2b916:	f362 1306 	bfi	r3, r2, #4, #3
   2b91a:	7223      	strb	r3, [r4, #8]
	if (lll->chan_map_curr &&
   2b91c:	b2db      	uxtb	r3, r3
   2b91e:	f013 0f70 	tst.w	r3, #112	; 0x70
   2b922:	d005      	beq.n	2b930 <isr_done+0x30>
	    (!lll->conn || !lll->conn->periph.cancelled) &&
   2b924:	6863      	ldr	r3, [r4, #4]
   2b926:	b153      	cbz	r3, 2b93e <isr_done+0x3e>
   2b928:	f893 3020 	ldrb.w	r3, [r3, #32]
   2b92c:	079b      	lsls	r3, r3, #30
   2b92e:	d506      	bpl.n	2b93e <isr_done+0x3e>
	radio_filter_disable();
   2b930:	f001 fab6 	bl	2cea0 <radio_filter_disable>
	lll_isr_cleanup(param);
   2b934:	4620      	mov	r0, r4
}
   2b936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   2b93a:	f7ff bb61 	b.w	2b000 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   2b93e:	4620      	mov	r0, r4
   2b940:	f7ff ff4c 	bl	2b7dc <chan_prepare.isra.0>
		radio_tx_enable();
   2b944:	f001 f962 	bl	2cc0c <radio_tx_enable>
}
   2b948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   2b94c:	f001 bbb4 	b.w	2d0b8 <radio_tmr_end_capture>

0002b950 <prepare_cb>:
{
   2b950:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   2b952:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->conn &&
   2b954:	6863      	ldr	r3, [r4, #4]
{
   2b956:	b083      	sub	sp, #12
   2b958:	4605      	mov	r5, r0
	if (unlikely(lll->conn &&
   2b95a:	2b00      	cmp	r3, #0
   2b95c:	d16d      	bne.n	2ba3a <prepare_cb+0xea>
	radio_reset();
   2b95e:	f001 f8bd 	bl	2cadc <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   2b962:	2000      	movs	r0, #0
   2b964:	f001 f8e0 	bl	2cb28 <radio_tx_power_set>
	radio_phy_set(0, 0);
   2b968:	2100      	movs	r1, #0
   2b96a:	4608      	mov	r0, r1
   2b96c:	f001 f8ce 	bl	2cb0c <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   2b970:	2200      	movs	r2, #0
   2b972:	2125      	movs	r1, #37	; 0x25
   2b974:	2008      	movs	r0, #8
   2b976:	f001 f90d 	bl	2cb94 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   2b97a:	4b35      	ldr	r3, [pc, #212]	; (2ba50 <prepare_cb+0x100>)
   2b97c:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   2b97e:	a801      	add	r0, sp, #4
   2b980:	f001 f8f0 	bl	2cb64 <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   2b984:	4933      	ldr	r1, [pc, #204]	; (2ba54 <prepare_cb+0x104>)
   2b986:	f240 605b 	movw	r0, #1627	; 0x65b
   2b98a:	f001 f983 	bl	2cc94 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   2b98e:	7a23      	ldrb	r3, [r4, #8]
   2b990:	f3c3 0242 	ubfx	r2, r3, #1, #3
   2b994:	f362 1306 	bfi	r3, r2, #4, #3
	pdu = chan_prepare(lll);
   2b998:	4620      	mov	r0, r4
	lll->chan_map_curr = lll->chan_map;
   2b99a:	7223      	strb	r3, [r4, #8]
	pdu = chan_prepare(lll);
   2b99c:	f7ff ff1e 	bl	2b7dc <chan_prepare.isra.0>
	if (ull_filter_lll_rl_enabled()) {
   2b9a0:	f7fe ff4a 	bl	2a838 <ull_filter_lll_rl_enabled>
   2b9a4:	bb98      	cbnz	r0, 2ba0e <prepare_cb+0xbe>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   2b9a6:	7a63      	ldrb	r3, [r4, #9]
   2b9a8:	079b      	lsls	r3, r3, #30
   2b9aa:	d127      	bne.n	2b9fc <prepare_cb+0xac>
	ull = HDR_LLL2ULL(lll);
   2b9ac:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   2b9ae:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   2b9b0:	4638      	mov	r0, r7
   2b9b2:	f7ff fab3 	bl	2af1c <lll_event_offset_get>
   2b9b6:	4406      	add	r6, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   2b9b8:	686a      	ldr	r2, [r5, #4]
   2b9ba:	f106 0109 	add.w	r1, r6, #9
   2b9be:	2001      	movs	r0, #1
   2b9c0:	f001 faac 	bl	2cf1c <radio_tmr_start>
	radio_tmr_end_capture();
   2b9c4:	f001 fb78 	bl	2d0b8 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   2b9c8:	4620      	mov	r0, r4
   2b9ca:	f7f8 f9e9 	bl	23da0 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_ADV_BASE +
   2b9ce:	1c81      	adds	r1, r0, #2
   2b9d0:	4632      	mov	r2, r6
   2b9d2:	b2c9      	uxtb	r1, r1
   2b9d4:	4638      	mov	r0, r7
   2b9d6:	f7e5 fe5b 	bl	11690 <lll_preempt_calc>
   2b9da:	b930      	cbnz	r0, 2b9ea <prepare_cb+0x9a>
		ret = lll_prepare_done(lll);
   2b9dc:	4620      	mov	r0, r4
   2b9de:	f7ff fa45 	bl	2ae6c <lll_prepare_done>
		LL_ASSERT(!ret);
   2b9e2:	b9d0      	cbnz	r0, 2ba1a <prepare_cb+0xca>
}
   2b9e4:	2000      	movs	r0, #0
   2b9e6:	b003      	add	sp, #12
   2b9e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   2b9ea:	481b      	ldr	r0, [pc, #108]	; (2ba58 <prepare_cb+0x108>)
   2b9ec:	4621      	mov	r1, r4
   2b9ee:	f001 f833 	bl	2ca58 <radio_isr_set>
		radio_disable();
   2b9f2:	f001 f911 	bl	2cc18 <radio_disable>
}
   2b9f6:	2000      	movs	r0, #0
   2b9f8:	b003      	add	sp, #12
   2b9fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct lll_filter *fal = ull_filter_lll_get(true);
   2b9fc:	2001      	movs	r0, #1
   2b9fe:	f7fe fb8f 	bl	2a120 <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   2ba02:	7841      	ldrb	r1, [r0, #1]
   2ba04:	1c82      	adds	r2, r0, #2
   2ba06:	7800      	ldrb	r0, [r0, #0]
   2ba08:	f001 fa2a 	bl	2ce60 <radio_filter_configure>
   2ba0c:	e7ce      	b.n	2b9ac <prepare_cb+0x5c>
			ull_filter_lll_get(!!(lll->filter_policy));
   2ba0e:	7a60      	ldrb	r0, [r4, #9]
   2ba10:	f010 0003 	ands.w	r0, r0, #3
   2ba14:	bf18      	it	ne
   2ba16:	2001      	movne	r0, #1
   2ba18:	e7f1      	b.n	2b9fe <prepare_cb+0xae>
		LL_ASSERT(!ret);
   2ba1a:	4a10      	ldr	r2, [pc, #64]	; (2ba5c <prepare_cb+0x10c>)
   2ba1c:	4910      	ldr	r1, [pc, #64]	; (2ba60 <prepare_cb+0x110>)
   2ba1e:	4811      	ldr	r0, [pc, #68]	; (2ba64 <prepare_cb+0x114>)
   2ba20:	f240 4311 	movw	r3, #1041	; 0x411
   2ba24:	f007 fcf8 	bl	33418 <assert_print>
   2ba28:	4040      	eors	r0, r0
   2ba2a:	f380 8811 	msr	BASEPRI, r0
   2ba2e:	f04f 0003 	mov.w	r0, #3
   2ba32:	df02      	svc	2
}
   2ba34:	2000      	movs	r0, #0
   2ba36:	b003      	add	sp, #12
   2ba38:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (unlikely(lll->conn &&
   2ba3a:	f893 3020 	ldrb.w	r3, [r3, #32]
   2ba3e:	079a      	lsls	r2, r3, #30
   2ba40:	d08d      	beq.n	2b95e <prepare_cb+0xe>
		radio_isr_set(lll_isr_early_abort, lll);
   2ba42:	4809      	ldr	r0, [pc, #36]	; (2ba68 <prepare_cb+0x118>)
   2ba44:	4621      	mov	r1, r4
   2ba46:	f001 f807 	bl	2ca58 <radio_isr_set>
		radio_disable();
   2ba4a:	f001 f8e5 	bl	2cc18 <radio_disable>
		return 0;
   2ba4e:	e7c9      	b.n	2b9e4 <prepare_cb+0x94>
   2ba50:	8e89bed6 	.word	0x8e89bed6
   2ba54:	00555555 	.word	0x00555555
   2ba58:	0002b3ad 	.word	0x0002b3ad
   2ba5c:	0003afbc 	.word	0x0003afbc
   2ba60:	0003a43c 	.word	0x0003a43c
   2ba64:	00039f74 	.word	0x00039f74
   2ba68:	0002b099 	.word	0x0002b099

0002ba6c <resume_prepare_cb>:
{
   2ba6c:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   2ba6e:	68c3      	ldr	r3, [r0, #12]
{
   2ba70:	4604      	mov	r4, r0
	ull = HDR_LLL2ULL(p->param);
   2ba72:	681e      	ldr	r6, [r3, #0]
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   2ba74:	f7f4 febe 	bl	207f4 <ticker_ticks_now_get>
   2ba78:	4605      	mov	r5, r0
   2ba7a:	4630      	mov	r0, r6
   2ba7c:	f7ff fa4e 	bl	2af1c <lll_event_offset_get>
	p->remainder = 0;
   2ba80:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   2ba82:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   2ba84:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   2ba88:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   2ba8a:	4620      	mov	r0, r4
}
   2ba8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   2ba90:	f7ff bf5e 	b.w	2b950 <prepare_cb>

0002ba94 <lll_adv_prepare>:
{
   2ba94:	b510      	push	{r4, lr}
   2ba96:	b082      	sub	sp, #8
   2ba98:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   2ba9a:	f7ff fc4b 	bl	2b334 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   2ba9e:	2800      	cmp	r0, #0
   2baa0:	db1a      	blt.n	2bad8 <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   2baa2:	4a14      	ldr	r2, [pc, #80]	; (2baf4 <lll_adv_prepare+0x60>)
   2baa4:	4914      	ldr	r1, [pc, #80]	; (2baf8 <lll_adv_prepare+0x64>)
   2baa6:	4815      	ldr	r0, [pc, #84]	; (2bafc <lll_adv_prepare+0x68>)
   2baa8:	9400      	str	r4, [sp, #0]
   2baaa:	2300      	movs	r3, #0
   2baac:	f7f7 fd24 	bl	234f8 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   2bab0:	b108      	cbz	r0, 2bab6 <lll_adv_prepare+0x22>
   2bab2:	3077      	adds	r0, #119	; 0x77
   2bab4:	d101      	bne.n	2baba <lll_adv_prepare+0x26>
}
   2bab6:	b002      	add	sp, #8
   2bab8:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   2baba:	4a11      	ldr	r2, [pc, #68]	; (2bb00 <lll_adv_prepare+0x6c>)
   2babc:	4911      	ldr	r1, [pc, #68]	; (2bb04 <lll_adv_prepare+0x70>)
   2babe:	4812      	ldr	r0, [pc, #72]	; (2bb08 <lll_adv_prepare+0x74>)
   2bac0:	f240 23aa 	movw	r3, #682	; 0x2aa
   2bac4:	f007 fca8 	bl	33418 <assert_print>
   2bac8:	4040      	eors	r0, r0
   2baca:	f380 8811 	msr	BASEPRI, r0
   2bace:	f04f 0003 	mov.w	r0, #3
   2bad2:	df02      	svc	2
}
   2bad4:	b002      	add	sp, #8
   2bad6:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   2bad8:	4a09      	ldr	r2, [pc, #36]	; (2bb00 <lll_adv_prepare+0x6c>)
   2bada:	490c      	ldr	r1, [pc, #48]	; (2bb0c <lll_adv_prepare+0x78>)
   2badc:	480a      	ldr	r0, [pc, #40]	; (2bb08 <lll_adv_prepare+0x74>)
   2bade:	f240 23a7 	movw	r3, #679	; 0x2a7
   2bae2:	f007 fc99 	bl	33418 <assert_print>
   2bae6:	4040      	eors	r0, r0
   2bae8:	f380 8811 	msr	BASEPRI, r0
   2baec:	f04f 0003 	mov.w	r0, #3
   2baf0:	df02      	svc	2
   2baf2:	e7d6      	b.n	2baa2 <lll_adv_prepare+0xe>
   2baf4:	0002b951 	.word	0x0002b951
   2baf8:	0002b561 	.word	0x0002b561
   2bafc:	0002b4a5 	.word	0x0002b4a5
   2bb00:	0003afbc 	.word	0x0003afbc
   2bb04:	0003b040 	.word	0x0003b040
   2bb08:	00039f74 	.word	0x00039f74
   2bb0c:	0003af2c 	.word	0x0003af2c

0002bb10 <lll_adv_scan_req_check>:
{
   2bb10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   2bb14:	f890 c009 	ldrb.w	ip, [r0, #9]
{
   2bb18:	f89d 8018 	ldrb.w	r8, [sp, #24]
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   2bb1c:	f01c 0f01 	tst.w	ip, #1
{
   2bb20:	460f      	mov	r7, r1
   2bb22:	4616      	mov	r6, r2
   2bb24:	461d      	mov	r5, r3
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   2bb26:	d009      	beq.n	2bb3c <lll_adv_scan_req_check+0x2c>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   2bb28:	f1b8 0f00 	cmp.w	r8, #0
   2bb2c:	d016      	beq.n	2bb5c <lll_adv_scan_req_check+0x4c>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   2bb2e:	783b      	ldrb	r3, [r7, #0]
   2bb30:	ebb6 1fd3 	cmp.w	r6, r3, lsr #7
   2bb34:	d019      	beq.n	2bb6a <lll_adv_scan_req_check+0x5a>
{
   2bb36:	2000      	movs	r0, #0
}
   2bb38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2bb3c:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   2bb3e:	f811 0b02 	ldrb.w	r0, [r1], #2
   2bb42:	9a07      	ldr	r2, [sp, #28]
   2bb44:	f3c0 1080 	ubfx	r0, r0, #6, #1
   2bb48:	f7fe fe3c 	bl	2a7c4 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   2bb4c:	2800      	cmp	r0, #0
   2bb4e:	d1ee      	bne.n	2bb2e <lll_adv_scan_req_check+0x1e>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   2bb50:	7a63      	ldrb	r3, [r4, #9]
						rl_idx)) ||
   2bb52:	07db      	lsls	r3, r3, #31
   2bb54:	d5ef      	bpl.n	2bb36 <lll_adv_scan_req_check+0x26>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   2bb56:	f1b8 0f00 	cmp.w	r8, #0
   2bb5a:	d1e8      	bne.n	2bb2e <lll_adv_scan_req_check+0x1e>
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   2bb5c:	9b07      	ldr	r3, [sp, #28]
   2bb5e:	7818      	ldrb	r0, [r3, #0]
   2bb60:	f7fe fe00 	bl	2a764 <ull_filter_lll_irk_in_fal>
   2bb64:	2800      	cmp	r0, #0
   2bb66:	d1e2      	bne.n	2bb2e <lll_adv_scan_req_check+0x1e>
   2bb68:	e7e5      	b.n	2bb36 <lll_adv_scan_req_check+0x26>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   2bb6a:	2206      	movs	r2, #6
   2bb6c:	f107 0108 	add.w	r1, r7, #8
   2bb70:	4628      	mov	r0, r5
   2bb72:	f009 fcd0 	bl	35516 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   2bb76:	fab0 f080 	clz	r0, r0
   2bb7a:	0940      	lsrs	r0, r0, #5
}
   2bb7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002bb80 <lll_adv_connect_ind_check>:
{
   2bb80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2bb84:	461f      	mov	r7, r3
	if (tgt_addr) {
   2bb86:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
   2bb88:	f89d 9020 	ldrb.w	r9, [sp, #32]
   2bb8c:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   2bb90:	4605      	mov	r5, r0
   2bb92:	460c      	mov	r4, r1
   2bb94:	4690      	mov	r8, r2
	if (tgt_addr) {
   2bb96:	b96b      	cbnz	r3, 2bbb4 <lll_adv_connect_ind_check+0x34>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) &&
   2bb98:	7a41      	ldrb	r1, [r0, #9]
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   2bb9a:	f001 0103 	and.w	r1, r1, #3
   2bb9e:	2901      	cmp	r1, #1
   2bba0:	d92b      	bls.n	2bbfa <lll_adv_connect_ind_check+0x7a>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   2bba2:	2e00      	cmp	r6, #0
   2bba4:	d03a      	beq.n	2bc1c <lll_adv_connect_ind_check+0x9c>
	return (tx_addr == sr->rx_addr) &&
   2bba6:	7823      	ldrb	r3, [r4, #0]
   2bba8:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   2bbac:	d03d      	beq.n	2bc2a <lll_adv_connect_ind_check+0xaa>
{
   2bbae:	2000      	movs	r0, #0
}
   2bbb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						      ci->connect_ind.init_addr,
   2bbb4:	468a      	mov	sl, r1
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   2bbb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2bbb8:	f81a 0b02 	ldrb.w	r0, [sl], #2
   2bbbc:	f3c0 1080 	ubfx	r0, r0, #6, #1
   2bbc0:	4651      	mov	r1, sl
   2bbc2:	f7fe fdff 	bl	2a7c4 <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   2bbc6:	2800      	cmp	r0, #0
   2bbc8:	d0f1      	beq.n	2bbae <lll_adv_connect_ind_check+0x2e>
	return (tx_addr == sr->rx_addr) &&
   2bbca:	7823      	ldrb	r3, [r4, #0]
   2bbcc:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   2bbd0:	d1ed      	bne.n	2bbae <lll_adv_connect_ind_check+0x2e>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   2bbd2:	4638      	mov	r0, r7
   2bbd4:	2206      	movs	r2, #6
   2bbd6:	f104 0108 	add.w	r1, r4, #8
   2bbda:	f009 fc9c 	bl	35516 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   2bbde:	2800      	cmp	r0, #0
   2bbe0:	d1e5      	bne.n	2bbae <lll_adv_connect_ind_check+0x2e>
		       isr_rx_ci_tgta_check(lll, rx_addr, tgt_addr, ci,
   2bbe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2bbe4:	7818      	ldrb	r0, [r3, #0]
static inline bool isr_rx_ci_tgta_check(struct lll_adv *lll,
					uint8_t rx_addr, uint8_t *tgt_addr,
					struct pdu_adv *ci, uint8_t rl_idx)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   2bbe6:	28ff      	cmp	r0, #255	; 0xff
   2bbe8:	d029      	beq.n	2bc3e <lll_adv_connect_ind_check+0xbe>
   2bbea:	7aab      	ldrb	r3, [r5, #10]
   2bbec:	2bff      	cmp	r3, #255	; 0xff
   2bbee:	d026      	beq.n	2bc3e <lll_adv_connect_ind_check+0xbe>
		return rl_idx == lll->rl_idx;
   2bbf0:	1ac0      	subs	r0, r0, r3
   2bbf2:	fab0 f080 	clz	r0, r0
   2bbf6:	0940      	lsrs	r0, r0, #5
   2bbf8:	e7da      	b.n	2bbb0 <lll_adv_connect_ind_check+0x30>
						ci->connect_ind.init_addr,
   2bbfa:	4621      	mov	r1, r4
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   2bbfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2bbfe:	f811 0b02 	ldrb.w	r0, [r1], #2
   2bc02:	f3c0 1080 	ubfx	r0, r0, #6, #1
   2bc06:	f7fe fddd 	bl	2a7c4 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) &&
   2bc0a:	2800      	cmp	r0, #0
   2bc0c:	d1cb      	bne.n	2bba6 <lll_adv_connect_ind_check+0x26>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   2bc0e:	7a6b      	ldrb	r3, [r5, #9]
						rl_idx)) ||
   2bc10:	f003 0303 	and.w	r3, r3, #3
   2bc14:	2b01      	cmp	r3, #1
   2bc16:	d9ca      	bls.n	2bbae <lll_adv_connect_ind_check+0x2e>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   2bc18:	2e00      	cmp	r6, #0
   2bc1a:	d1c4      	bne.n	2bba6 <lll_adv_connect_ind_check+0x26>
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   2bc1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2bc1e:	7818      	ldrb	r0, [r3, #0]
   2bc20:	f7fe fda0 	bl	2a764 <ull_filter_lll_irk_in_fal>
   2bc24:	2800      	cmp	r0, #0
   2bc26:	d1be      	bne.n	2bba6 <lll_adv_connect_ind_check+0x26>
   2bc28:	e7c1      	b.n	2bbae <lll_adv_connect_ind_check+0x2e>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   2bc2a:	2206      	movs	r2, #6
   2bc2c:	f104 0108 	add.w	r1, r4, #8
   2bc30:	4638      	mov	r0, r7
   2bc32:	f009 fc70 	bl	35516 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   2bc36:	fab0 f080 	clz	r0, r0
   2bc3a:	0940      	lsrs	r0, r0, #5
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   2bc3c:	e7b8      	b.n	2bbb0 <lll_adv_connect_ind_check+0x30>
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	return (rx_addr == ci->tx_addr) &&
   2bc3e:	7823      	ldrb	r3, [r4, #0]
   2bc40:	f3c3 1380 	ubfx	r3, r3, #6, #1
   2bc44:	454b      	cmp	r3, r9
   2bc46:	d1b2      	bne.n	2bbae <lll_adv_connect_ind_check+0x2e>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   2bc48:	9809      	ldr	r0, [sp, #36]	; 0x24
   2bc4a:	2206      	movs	r2, #6
   2bc4c:	4651      	mov	r1, sl
   2bc4e:	f009 fc62 	bl	35516 <memcmp>
	return (rx_addr == ci->tx_addr) &&
   2bc52:	fab0 f080 	clz	r0, r0
   2bc56:	0940      	lsrs	r0, r0, #5
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   2bc58:	e7aa      	b.n	2bbb0 <lll_adv_connect_ind_check+0x30>
   2bc5a:	bf00      	nop

0002bc5c <isr_rx>:
{
   2bc5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2bc60:	b08b      	sub	sp, #44	; 0x2c
   2bc62:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   2bc64:	f001 f802 	bl	2cc6c <radio_is_done>
	if (trx_done) {
   2bc68:	b2c0      	uxtb	r0, r0
   2bc6a:	b950      	cbnz	r0, 2bc82 <isr_rx+0x26>
	lll_isr_status_reset();
   2bc6c:	f7ff f9ba 	bl	2afe4 <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   2bc70:	487a      	ldr	r0, [pc, #488]	; (2be5c <isr_rx+0x200>)
   2bc72:	4621      	mov	r1, r4
   2bc74:	f000 fef0 	bl	2ca58 <radio_isr_set>
}
   2bc78:	b00b      	add	sp, #44	; 0x2c
   2bc7a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	radio_disable();
   2bc7e:	f000 bfcb 	b.w	2cc18 <radio_disable>
		crc_ok = radio_crc_is_valid();
   2bc82:	f001 f813 	bl	2ccac <radio_crc_is_valid>
   2bc86:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   2bc88:	f001 f91c 	bl	2cec4 <radio_filter_has_match>
   2bc8c:	4681      	mov	r9, r0
		devmatch_id = radio_filter_match_get();
   2bc8e:	f001 f923 	bl	2ced8 <radio_filter_match_get>
			irkmatch_ok = radio_ar_has_match();
   2bc92:	f001 fb1d 	bl	2d2d0 <radio_ar_has_match>
   2bc96:	4606      	mov	r6, r0
			irkmatch_id = radio_ar_match_get();
   2bc98:	f001 fafe 	bl	2d298 <radio_ar_match_get>
	if (crc_ok) {
   2bc9c:	b2ed      	uxtb	r5, r5
			irkmatch_id = radio_ar_match_get();
   2bc9e:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   2bca0:	f001 f8d4 	bl	2ce4c <radio_rssi_is_ready>
	lll_isr_status_reset();
   2bca4:	f7ff f99e 	bl	2afe4 <lll_isr_status_reset>
	if (crc_ok) {
   2bca8:	2d00      	cmp	r5, #0
   2bcaa:	d0e1      	beq.n	2bc70 <isr_rx+0x14>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   2bcac:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   2bcb0:	d177      	bne.n	2bda2 <isr_rx+0x146>
   2bcb2:	23ff      	movs	r3, #255	; 0xff
	node_rx = ull_pdu_rx_alloc_peek(1);
   2bcb4:	2001      	movs	r0, #1
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   2bcb6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	node_rx = ull_pdu_rx_alloc_peek(1);
   2bcba:	f7f7 f8bf 	bl	22e3c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   2bcbe:	4605      	mov	r5, r0
   2bcc0:	2800      	cmp	r0, #0
   2bcc2:	f000 809f 	beq.w	2be04 <isr_rx+0x1a8>
   2bcc6:	7b23      	ldrb	r3, [r4, #12]
   2bcc8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	pdu_rx = (void *)node_rx->pdu;
   2bccc:	f105 011c 	add.w	r1, r5, #28
   2bcd0:	691f      	ldr	r7, [r3, #16]
	addr = pdu_adv->adv_ind.addr;
   2bcd2:	463b      	mov	r3, r7
		devmatch_ok = radio_filter_has_match();
   2bcd4:	fa5f f989 	uxtb.w	r9, r9
	tx_addr = pdu_adv->tx_addr;
   2bcd8:	f813 0b02 	ldrb.w	r0, [r3], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   2bcdc:	f000 0c0f 	and.w	ip, r0, #15
   2bce0:	f1bc 0f01 	cmp.w	ip, #1
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   2bce4:	bf08      	it	eq
   2bce6:	f107 0808 	addeq.w	r8, r7, #8
	tx_addr = pdu_adv->tx_addr;
   2bcea:	f3c0 1280 	ubfx	r2, r0, #6, #1
	rx_addr = pdu_adv->rx_addr;
   2bcee:	ea4f 17d0 	mov.w	r7, r0, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   2bcf2:	7f28      	ldrb	r0, [r5, #28]
   2bcf4:	f000 000f 	and.w	r0, r0, #15
		tgt_addr = NULL;
   2bcf8:	bf18      	it	ne
   2bcfa:	f04f 0800 	movne.w	r8, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   2bcfe:	2803      	cmp	r0, #3
   2bd00:	d057      	beq.n	2bdb2 <isr_rx+0x156>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   2bd02:	2805      	cmp	r0, #5
   2bd04:	d1b4      	bne.n	2bc70 <isr_rx+0x14>
   2bd06:	7f68      	ldrb	r0, [r5, #29]
   2bd08:	2822      	cmp	r0, #34	; 0x22
   2bd0a:	d1b1      	bne.n	2bc70 <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   2bd0c:	6860      	ldr	r0, [r4, #4]
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   2bd0e:	2800      	cmp	r0, #0
   2bd10:	d0ae      	beq.n	2bc70 <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   2bd12:	f890 0020 	ldrb.w	r0, [r0, #32]
   2bd16:	0780      	lsls	r0, r0, #30
   2bd18:	d4aa      	bmi.n	2bc70 <isr_rx+0x14>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   2bd1a:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   2bd1e:	9003      	str	r0, [sp, #12]
   2bd20:	e9cd 8901 	strd	r8, r9, [sp, #4]
   2bd24:	9700      	str	r7, [sp, #0]
   2bd26:	4620      	mov	r0, r4
   2bd28:	f7ff ff2a 	bl	2bb80 <lll_adv_connect_ind_check>
		   lll->conn && !lll->conn->periph.cancelled &&
   2bd2c:	2800      	cmp	r0, #0
   2bd2e:	d09f      	beq.n	2bc70 <isr_rx+0x14>
			rx = ull_pdu_rx_alloc_peek(4);
   2bd30:	2004      	movs	r0, #4
   2bd32:	f7f7 f883 	bl	22e3c <ull_pdu_rx_alloc_peek>
		if (!rx) {
   2bd36:	2800      	cmp	r0, #0
   2bd38:	d09a      	beq.n	2bc70 <isr_rx+0x14>
		radio_isr_set(isr_abort_all, lll);
   2bd3a:	4849      	ldr	r0, [pc, #292]	; (2be60 <isr_rx+0x204>)
   2bd3c:	4621      	mov	r1, r4
   2bd3e:	f000 fe8b 	bl	2ca58 <radio_isr_set>
		radio_disable();
   2bd42:	f000 ff69 	bl	2cc18 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   2bd46:	f000 ff87 	bl	2cc58 <radio_is_ready>
   2bd4a:	2800      	cmp	r0, #0
   2bd4c:	d14c      	bne.n	2bde8 <isr_rx+0x18c>
		lll->conn->periph.initiated = 1;
   2bd4e:	6862      	ldr	r2, [r4, #4]
   2bd50:	f892 3020 	ldrb.w	r3, [r2, #32]
   2bd54:	f043 0301 	orr.w	r3, r3, #1
   2bd58:	f882 3020 	strb.w	r3, [r2, #32]
		rx = ull_pdu_rx_alloc();
   2bd5c:	f7f7 f890 	bl	22e80 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   2bd60:	2217      	movs	r2, #23
		rx->hdr.handle = 0xffff;
   2bd62:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   2bd66:	7102      	strb	r2, [r0, #4]
		rx->hdr.handle = 0xffff;
   2bd68:	80c3      	strh	r3, [r0, #6]
		ftr->param = lll;
   2bd6a:	6084      	str	r4, [r0, #8]
		rx = ull_pdu_rx_alloc();
   2bd6c:	4605      	mov	r5, r0
		ftr->ticks_anchor = radio_tmr_start_get();
   2bd6e:	f001 f957 	bl	2d020 <radio_tmr_start_get>
   2bd72:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   2bd74:	f001 f9a8 	bl	2d0c8 <radio_tmr_end_get>
				    radio_rx_chain_delay_get(0, 0);
   2bd78:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   2bd7a:	4604      	mov	r4, r0
				    radio_rx_chain_delay_get(0, 0);
   2bd7c:	4608      	mov	r0, r1
   2bd7e:	f000 ff3f 	bl	2cc00 <radio_rx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   2bd82:	1a24      	subs	r4, r4, r0
   2bd84:	616c      	str	r4, [r5, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   2bd86:	b196      	cbz	r6, 2bdae <isr_rx+0x152>
   2bd88:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   2bd8c:	766b      	strb	r3, [r5, #25]
			ftr->extra = ull_pdu_rx_alloc();
   2bd8e:	f7f7 f877 	bl	22e80 <ull_pdu_rx_alloc>
		ull_rx_put_sched(rx->hdr.link, rx);
   2bd92:	4629      	mov	r1, r5
			ftr->extra = ull_pdu_rx_alloc();
   2bd94:	60e8      	str	r0, [r5, #12]
		ull_rx_put_sched(rx->hdr.link, rx);
   2bd96:	6828      	ldr	r0, [r5, #0]
   2bd98:	f7f7 f8a0 	bl	22edc <ull_rx_put_sched>
}
   2bd9c:	b00b      	add	sp, #44	; 0x2c
   2bd9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   2bda2:	fa5f f088 	uxtb.w	r0, r8
   2bda6:	f7fe fc8b 	bl	2a6c0 <ull_filter_lll_rl_irk_idx>
   2bdaa:	4603      	mov	r3, r0
   2bdac:	e782      	b.n	2bcb4 <isr_rx+0x58>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   2bdae:	23ff      	movs	r3, #255	; 0xff
   2bdb0:	e7ec      	b.n	2bd8c <isr_rx+0x130>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   2bdb2:	7f68      	ldrb	r0, [r5, #29]
   2bdb4:	280c      	cmp	r0, #12
   2bdb6:	f47f af5b 	bne.w	2bc70 <isr_rx+0x14>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   2bdba:	f1b8 0f00 	cmp.w	r8, #0
   2bdbe:	f47f af57 	bne.w	2bc70 <isr_rx+0x14>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   2bdc2:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   2bdc6:	9001      	str	r0, [sp, #4]
   2bdc8:	f8cd 9000 	str.w	r9, [sp]
   2bdcc:	4620      	mov	r0, r4
   2bdce:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2bdd2:	9105      	str	r1, [sp, #20]
   2bdd4:	f7ff fe9c 	bl	2bb10 <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   2bdd8:	bb10      	cbnz	r0, 2be20 <isr_rx+0x1c4>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   2bdda:	7f28      	ldrb	r0, [r5, #28]
   2bddc:	9b07      	ldr	r3, [sp, #28]
   2bdde:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
   2bde2:	f000 000f 	and.w	r0, r0, #15
   2bde6:	e78c      	b.n	2bd02 <isr_rx+0xa6>
		LL_ASSERT(!radio_is_ready());
   2bde8:	4a1e      	ldr	r2, [pc, #120]	; (2be64 <isr_rx+0x208>)
   2bdea:	491f      	ldr	r1, [pc, #124]	; (2be68 <isr_rx+0x20c>)
   2bdec:	481f      	ldr	r0, [pc, #124]	; (2be6c <isr_rx+0x210>)
   2bdee:	f240 633c 	movw	r3, #1596	; 0x63c
   2bdf2:	f007 fb11 	bl	33418 <assert_print>
   2bdf6:	4040      	eors	r0, r0
   2bdf8:	f380 8811 	msr	BASEPRI, r0
   2bdfc:	f04f 0003 	mov.w	r0, #3
   2be00:	df02      	svc	2
   2be02:	e7a4      	b.n	2bd4e <isr_rx+0xf2>
	LL_ASSERT(node_rx);
   2be04:	4a17      	ldr	r2, [pc, #92]	; (2be64 <isr_rx+0x208>)
   2be06:	491a      	ldr	r1, [pc, #104]	; (2be70 <isr_rx+0x214>)
   2be08:	4818      	ldr	r0, [pc, #96]	; (2be6c <isr_rx+0x210>)
   2be0a:	f240 53dc 	movw	r3, #1500	; 0x5dc
   2be0e:	f007 fb03 	bl	33418 <assert_print>
   2be12:	4040      	eors	r0, r0
   2be14:	f380 8811 	msr	BASEPRI, r0
   2be18:	f04f 0003 	mov.w	r0, #3
   2be1c:	df02      	svc	2
   2be1e:	e752      	b.n	2bcc6 <isr_rx+0x6a>
		radio_isr_set(isr_done, lll);
   2be20:	480e      	ldr	r0, [pc, #56]	; (2be5c <isr_rx+0x200>)
   2be22:	4621      	mov	r1, r4
   2be24:	f000 fe18 	bl	2ca58 <radio_isr_set>
		radio_switch_complete_and_disable();
   2be28:	f000 fffa 	bl	2ce20 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   2be2c:	7e23      	ldrb	r3, [r4, #24]
   2be2e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   2be32:	69d8      	ldr	r0, [r3, #28]
   2be34:	f000 feda 	bl	2cbec <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   2be38:	f000 ff0e 	bl	2cc58 <radio_is_ready>
   2be3c:	2800      	cmp	r0, #0
   2be3e:	d0ad      	beq.n	2bd9c <isr_rx+0x140>
   2be40:	4a08      	ldr	r2, [pc, #32]	; (2be64 <isr_rx+0x208>)
   2be42:	4909      	ldr	r1, [pc, #36]	; (2be68 <isr_rx+0x20c>)
   2be44:	4809      	ldr	r0, [pc, #36]	; (2be6c <isr_rx+0x210>)
   2be46:	f240 53f5 	movw	r3, #1525	; 0x5f5
   2be4a:	f007 fae5 	bl	33418 <assert_print>
   2be4e:	4040      	eors	r0, r0
   2be50:	f380 8811 	msr	BASEPRI, r0
   2be54:	f04f 0003 	mov.w	r0, #3
   2be58:	df02      	svc	2
		if (!err) {
   2be5a:	e79f      	b.n	2bd9c <isr_rx+0x140>
   2be5c:	0002b901 	.word	0x0002b901
   2be60:	0002b511 	.word	0x0002b511
   2be64:	0003afbc 	.word	0x0003afbc
   2be68:	0003b010 	.word	0x0003b010
   2be6c:	00039f74 	.word	0x00039f74
   2be70:	0003b008 	.word	0x0003b008

0002be74 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   2be74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2be76:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   2be78:	f7ff f8b4 	bl	2afe4 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   2be7c:	f7f7 f90a 	bl	23094 <ull_event_done_extra_get>
	LL_ASSERT(e);
   2be80:	4604      	mov	r4, r0
   2be82:	2800      	cmp	r0, #0
   2be84:	d036      	beq.n	2bef4 <isr_done+0x80>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
	e->crc_valid = crc_valid;
   2be86:	4922      	ldr	r1, [pc, #136]	; (2bf10 <isr_done+0x9c>)
   2be88:	7a22      	ldrb	r2, [r4, #8]
   2be8a:	7808      	ldrb	r0, [r1, #0]
	e->trx_cnt = trx_cnt;
   2be8c:	4b21      	ldr	r3, [pc, #132]	; (2bf14 <isr_done+0xa0>)
	e->crc_valid = crc_valid;
   2be8e:	f360 0200 	bfi	r2, r0, #0, #1
   2be92:	7222      	strb	r2, [r4, #8]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   2be94:	4a20      	ldr	r2, [pc, #128]	; (2bf18 <isr_done+0xa4>)
	e->trx_cnt = trx_cnt;
   2be96:	881b      	ldrh	r3, [r3, #0]
	e->mic_state = mic_state;
   2be98:	7812      	ldrb	r2, [r2, #0]
	e->trx_cnt = trx_cnt;
   2be9a:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   2be9c:	2101      	movs	r1, #1
   2be9e:	7021      	strb	r1, [r4, #0]
	e->mic_state = mic_state;
   2bea0:	7262      	strb	r2, [r4, #9]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   2bea2:	b11b      	cbz	r3, 2beac <isr_done+0x38>
		struct lll_conn *lll = param;

		if (lll->role) {
   2bea4:	f995 301d 	ldrsb.w	r3, [r5, #29]
   2bea8:	2b00      	cmp	r3, #0
   2beaa:	db04      	blt.n	2beb6 <isr_done+0x42>
			lll->periph.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   2beac:	4628      	mov	r0, r5
}
   2beae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   2beb2:	f7ff b8a5 	b.w	2b000 <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   2beb6:	f895 305b 	ldrb.w	r3, [r5, #91]	; 0x5b
   2beba:	f003 0307 	and.w	r3, r3, #7
 */
#define HCTO_START_DELAY_US 1U

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   2bebe:	2b02      	cmp	r3, #2
   2bec0:	d016      	beq.n	2bef0 <isr_done+0x7c>
	default:
	case BIT(0):
		return 40;
   2bec2:	2b04      	cmp	r3, #4
   2bec4:	bf0c      	ite	eq
   2bec6:	f44f 77bc 	moveq.w	r7, #376	; 0x178
   2beca:	2728      	movne	r7, #40	; 0x28
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   2becc:	f001 f8e8 	bl	2d0a0 <radio_tmr_aa_restore>
   2bed0:	4606      	mov	r6, r0
   2bed2:	f001 f8eb 	bl	2d0ac <radio_tmr_ready_get>
   2bed6:	1a36      	subs	r6, r6, r0
			e->drift.start_to_address_actual_us =
   2bed8:	60e6      	str	r6, [r4, #12]
				lll->periph.window_widening_event_us;
   2beda:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   2bedc:	e9c4 2704 	strd	r2, r7, [r4, #16]
			lll->periph.window_widening_event_us = 0;
   2bee0:	2300      	movs	r3, #0
   2bee2:	632b      	str	r3, [r5, #48]	; 0x30
			lll->periph.window_size_event_us = 0;
   2bee4:	63ab      	str	r3, [r5, #56]	; 0x38
	lll_isr_cleanup(param);
   2bee6:	4628      	mov	r0, r5
}
   2bee8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   2beec:	f7ff b888 	b.w	2b000 <lll_isr_cleanup>
	switch (phy) {
   2bef0:	2718      	movs	r7, #24
   2bef2:	e7eb      	b.n	2becc <isr_done+0x58>
	LL_ASSERT(e);
   2bef4:	4a09      	ldr	r2, [pc, #36]	; (2bf1c <isr_done+0xa8>)
   2bef6:	490a      	ldr	r1, [pc, #40]	; (2bf20 <isr_done+0xac>)
   2bef8:	480a      	ldr	r0, [pc, #40]	; (2bf24 <isr_done+0xb0>)
   2befa:	f44f 7354 	mov.w	r3, #848	; 0x350
   2befe:	f007 fa8b 	bl	33418 <assert_print>
   2bf02:	4040      	eors	r0, r0
   2bf04:	f380 8811 	msr	BASEPRI, r0
   2bf08:	f04f 0003 	mov.w	r0, #3
   2bf0c:	df02      	svc	2
   2bf0e:	e7ba      	b.n	2be86 <isr_done+0x12>
   2bf10:	200033f5 	.word	0x200033f5
   2bf14:	2000329a 	.word	0x2000329a
   2bf18:	200033f4 	.word	0x200033f4
   2bf1c:	0003b054 	.word	0x0003b054
   2bf20:	0003a53c 	.word	0x0003a53c
   2bf24:	00039f74 	.word	0x00039f74

0002bf28 <lll_conn_init>:
{
   2bf28:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   2bf2a:	f000 fec9 	bl	2ccc0 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   2bf2e:	7802      	ldrb	r2, [r0, #0]
	p = (void *)radio_pkt_empty_get();
   2bf30:	4603      	mov	r3, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   2bf32:	2101      	movs	r1, #1
   2bf34:	f361 0201 	bfi	r2, r1, #0, #2
   2bf38:	701a      	strb	r2, [r3, #0]
}
   2bf3a:	2000      	movs	r0, #0
   2bf3c:	bd08      	pop	{r3, pc}
   2bf3e:	bf00      	nop

0002bf40 <lll_conn_reset>:
}
   2bf40:	2000      	movs	r0, #0
   2bf42:	4770      	bx	lr

0002bf44 <lll_conn_flush>:
}
   2bf44:	4770      	bx	lr
   2bf46:	bf00      	nop

0002bf48 <lll_conn_prepare_reset>:
{
   2bf48:	b410      	push	{r4}
	crc_valid = 0U;
   2bf4a:	4805      	ldr	r0, [pc, #20]	; (2bf60 <lll_conn_prepare_reset+0x18>)
	trx_cnt = 0U;
   2bf4c:	4c05      	ldr	r4, [pc, #20]	; (2bf64 <lll_conn_prepare_reset+0x1c>)
	crc_expire = 0U;
   2bf4e:	4906      	ldr	r1, [pc, #24]	; (2bf68 <lll_conn_prepare_reset+0x20>)
	mic_state = LLL_CONN_MIC_NONE;
   2bf50:	4a06      	ldr	r2, [pc, #24]	; (2bf6c <lll_conn_prepare_reset+0x24>)
	trx_cnt = 0U;
   2bf52:	2300      	movs	r3, #0
   2bf54:	8023      	strh	r3, [r4, #0]
	crc_valid = 0U;
   2bf56:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   2bf58:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   2bf5a:	7013      	strb	r3, [r2, #0]
}
   2bf5c:	bc10      	pop	{r4}
   2bf5e:	4770      	bx	lr
   2bf60:	200033f5 	.word	0x200033f5
   2bf64:	2000329a 	.word	0x2000329a
   2bf68:	200033f6 	.word	0x200033f6
   2bf6c:	200033f4 	.word	0x200033f4

0002bf70 <lll_conn_abort_cb>:
{
   2bf70:	b538      	push	{r3, r4, r5, lr}
	if (!prepare_param) {
   2bf72:	b348      	cbz	r0, 2bfc8 <lll_conn_abort_cb+0x58>
	err = lll_hfclock_off();
   2bf74:	460d      	mov	r5, r1
   2bf76:	4604      	mov	r4, r0
   2bf78:	f7ff f9f4 	bl	2b364 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   2bf7c:	2800      	cmp	r0, #0
   2bf7e:	db16      	blt.n	2bfae <lll_conn_abort_cb+0x3e>
	lll = prepare_param->param;
   2bf80:	68e2      	ldr	r2, [r4, #12]
	lll->latency_prepare += (prepare_param->lazy + 1);
   2bf82:	8923      	ldrh	r3, [r4, #8]
   2bf84:	8a51      	ldrh	r1, [r2, #18]
   2bf86:	3301      	adds	r3, #1
   2bf88:	440b      	add	r3, r1
   2bf8a:	8253      	strh	r3, [r2, #18]
	e = ull_event_done_extra_get();
   2bf8c:	f7f7 f882 	bl	23094 <ull_event_done_extra_get>
	LL_ASSERT(e);
   2bf90:	4604      	mov	r4, r0
   2bf92:	b300      	cbz	r0, 2bfd6 <lll_conn_abort_cb+0x66>
	e->crc_valid = 0U;
   2bf94:	8923      	ldrh	r3, [r4, #8]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   2bf96:	2101      	movs	r1, #1
	e->crc_valid = 0U;
   2bf98:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	e->trx_cnt = 0U;
   2bf9c:	2200      	movs	r2, #0
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   2bf9e:	7021      	strb	r1, [r4, #0]
	e->trx_cnt = 0U;
   2bfa0:	80a2      	strh	r2, [r4, #4]
	e->crc_valid = 0U;
   2bfa2:	8123      	strh	r3, [r4, #8]
	lll_done(param);
   2bfa4:	4628      	mov	r0, r5
}
   2bfa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(param);
   2bfaa:	f7fe bf61 	b.w	2ae70 <lll_done>
	LL_ASSERT(err >= 0);
   2bfae:	4a10      	ldr	r2, [pc, #64]	; (2bff0 <lll_conn_abort_cb+0x80>)
   2bfb0:	4910      	ldr	r1, [pc, #64]	; (2bff4 <lll_conn_abort_cb+0x84>)
   2bfb2:	4811      	ldr	r0, [pc, #68]	; (2bff8 <lll_conn_abort_cb+0x88>)
   2bfb4:	23aa      	movs	r3, #170	; 0xaa
   2bfb6:	f007 fa2f 	bl	33418 <assert_print>
   2bfba:	4040      	eors	r0, r0
   2bfbc:	f380 8811 	msr	BASEPRI, r0
   2bfc0:	f04f 0003 	mov.w	r0, #3
   2bfc4:	df02      	svc	2
   2bfc6:	e7db      	b.n	2bf80 <lll_conn_abort_cb+0x10>
		radio_isr_set(isr_done, param);
   2bfc8:	480c      	ldr	r0, [pc, #48]	; (2bffc <lll_conn_abort_cb+0x8c>)
   2bfca:	f000 fd45 	bl	2ca58 <radio_isr_set>
}
   2bfce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_disable();
   2bfd2:	f000 be21 	b.w	2cc18 <radio_disable>
	LL_ASSERT(e);
   2bfd6:	4a06      	ldr	r2, [pc, #24]	; (2bff0 <lll_conn_abort_cb+0x80>)
   2bfd8:	4909      	ldr	r1, [pc, #36]	; (2c000 <lll_conn_abort_cb+0x90>)
   2bfda:	4807      	ldr	r0, [pc, #28]	; (2bff8 <lll_conn_abort_cb+0x88>)
   2bfdc:	23b2      	movs	r3, #178	; 0xb2
   2bfde:	f007 fa1b 	bl	33418 <assert_print>
   2bfe2:	4040      	eors	r0, r0
   2bfe4:	f380 8811 	msr	BASEPRI, r0
   2bfe8:	f04f 0003 	mov.w	r0, #3
   2bfec:	df02      	svc	2
   2bfee:	e7d1      	b.n	2bf94 <lll_conn_abort_cb+0x24>
   2bff0:	0003b054 	.word	0x0003b054
   2bff4:	0003af2c 	.word	0x0003af2c
   2bff8:	00039f74 	.word	0x00039f74
   2bffc:	0002be75 	.word	0x0002be75
   2c000:	0003a53c 	.word	0x0003a53c

0002c004 <lll_conn_rx_pkt_set>:
{
   2c004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c006:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   2c008:	2001      	movs	r0, #1
   2c00a:	f7f6 ff17 	bl	22e3c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   2c00e:	4604      	mov	r4, r0
   2c010:	b350      	cbz	r0, 2c068 <lll_conn_rx_pkt_set+0x64>
	phy = lll->phy_rx;
   2c012:	f895 605b 	ldrb.w	r6, [r5, #91]	; 0x5b
	max_rx_octets = lll->dle.eff.max_rx_octets;
   2c016:	f8b5 704e 	ldrh.w	r7, [r5, #78]	; 0x4e
	phy = lll->phy_rx;
   2c01a:	f006 0607 	and.w	r6, r6, #7
	radio_phy_set(phy, 0);
   2c01e:	2100      	movs	r1, #0
   2c020:	4630      	mov	r0, r6
   2c022:	f000 fd73 	bl	2cb0c <radio_phy_set>
	} else if (lll->enc_rx) {
   2c026:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
				    RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   2c02a:	0072      	lsls	r2, r6, #1
	} else if (lll->enc_rx) {
   2c02c:	071b      	lsls	r3, r3, #28
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   2c02e:	b2f9      	uxtb	r1, r7
   2c030:	f042 0201 	orr.w	r2, r2, #1
						      node_rx->pdu));
   2c034:	f104 041c 	add.w	r4, r4, #28
	} else if (lll->enc_rx) {
   2c038:	d50e      	bpl.n	2c058 <lll_conn_rx_pkt_set+0x54>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   2c03a:	3104      	adds	r1, #4
   2c03c:	b2c9      	uxtb	r1, r1
   2c03e:	2008      	movs	r0, #8
   2c040:	f000 fda8 	bl	2cb94 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   2c044:	4622      	mov	r2, r4
   2c046:	4631      	mov	r1, r6
   2c048:	f105 0073 	add.w	r0, r5, #115	; 0x73
   2c04c:	f001 f848 	bl	2d0e0 <radio_ccm_rx_pkt_set>
}
   2c050:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   2c054:	f000 bdc4 	b.w	2cbe0 <radio_pkt_rx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_rx_octets,
   2c058:	2008      	movs	r0, #8
   2c05a:	f000 fd9b 	bl	2cb94 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   2c05e:	4620      	mov	r0, r4
}
   2c060:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   2c064:	f000 bdbc 	b.w	2cbe0 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   2c068:	4a06      	ldr	r2, [pc, #24]	; (2c084 <lll_conn_rx_pkt_set+0x80>)
   2c06a:	4907      	ldr	r1, [pc, #28]	; (2c088 <lll_conn_rx_pkt_set+0x84>)
   2c06c:	4807      	ldr	r0, [pc, #28]	; (2c08c <lll_conn_rx_pkt_set+0x88>)
   2c06e:	f240 2387 	movw	r3, #647	; 0x287
   2c072:	f007 f9d1 	bl	33418 <assert_print>
   2c076:	4040      	eors	r0, r0
   2c078:	f380 8811 	msr	BASEPRI, r0
   2c07c:	f04f 0003 	mov.w	r0, #3
   2c080:	df02      	svc	2
   2c082:	e7c6      	b.n	2c012 <lll_conn_rx_pkt_set+0xe>
   2c084:	0003b054 	.word	0x0003b054
   2c088:	0003b008 	.word	0x0003b008
   2c08c:	00039f74 	.word	0x00039f74

0002c090 <lll_conn_isr_tx>:
{
   2c090:	b538      	push	{r3, r4, r5, lr}
   2c092:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   2c094:	f7fe ff94 	bl	2afc0 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   2c098:	2096      	movs	r0, #150	; 0x96
   2c09a:	f000 ff33 	bl	2cf04 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   2c09e:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
   2c0a2:	f894 005b 	ldrb.w	r0, [r4, #91]	; 0x5b
   2c0a6:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   2c0aa:	f000 0007 	and.w	r0, r0, #7
   2c0ae:	f002 0207 	and.w	r2, r2, #7
   2c0b2:	2100      	movs	r1, #0
   2c0b4:	f000 fe54 	bl	2cd60 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   2c0b8:	4620      	mov	r0, r4
   2c0ba:	f7ff ffa3 	bl	2c004 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   2c0be:	f000 fdcb 	bl	2cc58 <radio_is_ready>
   2c0c2:	bb58      	cbnz	r0, 2c11c <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + (EVENT_CLOCK_JITTER_US << 1) +
   2c0c4:	f001 f806 	bl	2d0d4 <radio_tmr_tifs_base_get>
   2c0c8:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   2c0ca:	f894 005b 	ldrb.w	r0, [r4, #91]	; 0x5b
   2c0ce:	2101      	movs	r1, #1
   2c0d0:	f000 0007 	and.w	r0, r0, #7
   2c0d4:	f000 fd94 	bl	2cc00 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   2c0d8:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
   2c0dc:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   2c0e0:	4405      	add	r5, r0
   2c0e2:	2b02      	cmp	r3, #2
   2c0e4:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   2c0e8:	d016      	beq.n	2c118 <lll_conn_isr_tx+0x88>
		return 40;
   2c0ea:	2b04      	cmp	r3, #4
   2c0ec:	bf0c      	ite	eq
   2c0ee:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   2c0f2:	2328      	movne	r3, #40	; 0x28
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   2c0f4:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
   2c0f8:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   2c0fc:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   2c100:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   2c102:	f000 fd79 	bl	2cbf8 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   2c106:	1a28      	subs	r0, r5, r0
   2c108:	f000 ff9c 	bl	2d044 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   2c10c:	4621      	mov	r1, r4
   2c10e:	480a      	ldr	r0, [pc, #40]	; (2c138 <lll_conn_isr_tx+0xa8>)
}
   2c110:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   2c114:	f000 bca0 	b.w	2ca58 <radio_isr_set>
	switch (phy) {
   2c118:	2318      	movs	r3, #24
   2c11a:	e7eb      	b.n	2c0f4 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   2c11c:	4a07      	ldr	r2, [pc, #28]	; (2c13c <lll_conn_isr_tx+0xac>)
   2c11e:	4908      	ldr	r1, [pc, #32]	; (2c140 <lll_conn_isr_tx+0xb0>)
   2c120:	4808      	ldr	r0, [pc, #32]	; (2c144 <lll_conn_isr_tx+0xb4>)
   2c122:	f44f 730f 	mov.w	r3, #572	; 0x23c
   2c126:	f007 f977 	bl	33418 <assert_print>
   2c12a:	4040      	eors	r0, r0
   2c12c:	f380 8811 	msr	BASEPRI, r0
   2c130:	f04f 0003 	mov.w	r0, #3
   2c134:	df02      	svc	2
   2c136:	e7c5      	b.n	2c0c4 <lll_conn_isr_tx+0x34>
   2c138:	0002c25d 	.word	0x0002c25d
   2c13c:	0003b054 	.word	0x0003b054
   2c140:	0003b010 	.word	0x0003b010
   2c144:	00039f74 	.word	0x00039f74

0002c148 <lll_conn_tx_pkt_set>:
{
   2c148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c14a:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   2c14c:	f890 105a 	ldrb.w	r1, [r0, #90]	; 0x5a
	max_tx_octets = lll->dle.eff.max_tx_octets;
   2c150:	f8b0 604c 	ldrh.w	r6, [r0, #76]	; 0x4c
	phy = lll->phy_tx;
   2c154:	f001 0407 	and.w	r4, r1, #7
{
   2c158:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   2c15a:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   2c15e:	4620      	mov	r0, r4
   2c160:	f000 fcd4 	bl	2cb0c <radio_phy_set>
	} else if (lll->enc_tx) {
   2c164:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   2c168:	0062      	lsls	r2, r4, #1
	} else if (lll->enc_tx) {
   2c16a:	06db      	lsls	r3, r3, #27
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   2c16c:	f042 0201 	orr.w	r2, r2, #1
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   2c170:	b2f1      	uxtb	r1, r6
	} else if (lll->enc_tx) {
   2c172:	d50d      	bpl.n	2c190 <lll_conn_tx_pkt_set+0x48>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   2c174:	3104      	adds	r1, #4
   2c176:	b2c9      	uxtb	r1, r1
   2c178:	2008      	movs	r0, #8
   2c17a:	f000 fd0b 	bl	2cb94 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   2c17e:	4639      	mov	r1, r7
   2c180:	f105 0094 	add.w	r0, r5, #148	; 0x94
   2c184:	f000 fff4 	bl	2d170 <radio_ccm_tx_pkt_set>
}
   2c188:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   2c18c:	f000 bd2e 	b.w	2cbec <radio_pkt_tx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_tx_octets, pkt_flags);
   2c190:	2008      	movs	r0, #8
   2c192:	f000 fcff 	bl	2cb94 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   2c196:	4638      	mov	r0, r7
}
   2c198:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   2c19c:	f000 bd26 	b.w	2cbec <radio_pkt_tx_set>

0002c1a0 <lll_conn_pdu_tx_prep>:
{
   2c1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c1a2:	4605      	mov	r5, r0
   2c1a4:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   2c1a6:	aa01      	add	r2, sp, #4
   2c1a8:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
{
   2c1aa:	460f      	mov	r7, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   2c1ac:	6e29      	ldr	r1, [r5, #96]	; 0x60
   2c1ae:	f7f3 f955 	bl	1f45c <memq_peek>
	if (lll->empty || !link) {
   2c1b2:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
   2c1b6:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   2c1b8:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   2c1ba:	d438      	bmi.n	2c22e <lll_conn_pdu_tx_prep+0x8e>
   2c1bc:	b348      	cbz	r0, 2c212 <lll_conn_pdu_tx_prep+0x72>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   2c1be:	9c01      	ldr	r4, [sp, #4]
   2c1c0:	f895 3071 	ldrb.w	r3, [r5, #113]	; 0x71
		if (!lll->packet_tx_head_len) {
   2c1c4:	f895 2070 	ldrb.w	r2, [r5, #112]	; 0x70
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   2c1c8:	3404      	adds	r4, #4
   2c1ca:	441c      	add	r4, r3
		if (!lll->packet_tx_head_len) {
   2c1cc:	b912      	cbnz	r2, 2c1d4 <lll_conn_pdu_tx_prep+0x34>
			lll->packet_tx_head_len = p->len;
   2c1ce:	7862      	ldrb	r2, [r4, #1]
   2c1d0:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
		if (lll->packet_tx_head_offset) {
   2c1d4:	b133      	cbz	r3, 2c1e4 <lll_conn_pdu_tx_prep+0x44>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   2c1d6:	7823      	ldrb	r3, [r4, #0]
   2c1d8:	2201      	movs	r2, #1
   2c1da:	f362 0301 	bfi	r3, r2, #0, #2
   2c1de:	7023      	strb	r3, [r4, #0]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   2c1e0:	f895 3071 	ldrb.w	r3, [r5, #113]	; 0x71
   2c1e4:	f895 2070 	ldrb.w	r2, [r5, #112]	; 0x70
   2c1e8:	1ad3      	subs	r3, r2, r3
   2c1ea:	7063      	strb	r3, [r4, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   2c1ec:	4628      	mov	r0, r5
   2c1ee:	f7f8 ffa3 	bl	25138 <ull_conn_lll_max_tx_octets_get>
		if (((PDU_DC_CTRL_TX_SIZE_MAX <= PDU_DC_PAYLOAD_SIZE_MIN) ||
   2c1f2:	7863      	ldrb	r3, [r4, #1]
   2c1f4:	4283      	cmp	r3, r0
   2c1f6:	d92a      	bls.n	2c24e <lll_conn_pdu_tx_prep+0xae>
			p->len = max_tx_octets;
   2c1f8:	7060      	strb	r0, [r4, #1]
{
   2c1fa:	2101      	movs	r1, #1
			p->md = 1U;
   2c1fc:	7823      	ldrb	r3, [r4, #0]
   2c1fe:	f003 030f 	and.w	r3, r3, #15
		p->resv = 0U;
   2c202:	2200      	movs	r2, #0
			p->md = 1U;
   2c204:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
   2c208:	7023      	strb	r3, [r4, #0]
		p->resv = 0U;
   2c20a:	70a2      	strb	r2, [r4, #2]
	*pdu_data_tx = p;
   2c20c:	603c      	str	r4, [r7, #0]
}
   2c20e:	b003      	add	sp, #12
   2c210:	bdf0      	pop	{r4, r5, r6, r7, pc}
		lll->empty = 1U;
   2c212:	f043 0304 	orr.w	r3, r3, #4
   2c216:	f885 3072 	strb.w	r3, [r5, #114]	; 0x72
		p = (void *)radio_pkt_empty_get();
   2c21a:	f000 fd51 	bl	2ccc0 <radio_pkt_empty_get>
   2c21e:	4604      	mov	r4, r0
			p->md = 0U;
   2c220:	7823      	ldrb	r3, [r4, #0]
   2c222:	f36f 1304 	bfc	r3, #4, #1
   2c226:	7023      	strb	r3, [r4, #0]
	*pdu_data_tx = p;
   2c228:	603c      	str	r4, [r7, #0]
}
   2c22a:	b003      	add	sp, #12
   2c22c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		lll->empty = 1U;
   2c22e:	f043 0304 	orr.w	r3, r3, #4
   2c232:	f885 3072 	strb.w	r3, [r5, #114]	; 0x72
		p = (void *)radio_pkt_empty_get();
   2c236:	f000 fd43 	bl	2ccc0 <radio_pkt_empty_get>
   2c23a:	4604      	mov	r4, r0
		if (link || FORCE_MD_CNT_GET()) {
   2c23c:	2e00      	cmp	r6, #0
   2c23e:	d0ef      	beq.n	2c220 <lll_conn_pdu_tx_prep+0x80>
			p->md = 1U;
   2c240:	7803      	ldrb	r3, [r0, #0]
   2c242:	f043 0310 	orr.w	r3, r3, #16
   2c246:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   2c248:	603c      	str	r4, [r7, #0]
}
   2c24a:	b003      	add	sp, #12
   2c24c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   2c24e:	6832      	ldr	r2, [r6, #0]
   2c250:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   2c252:	429a      	cmp	r2, r3
   2c254:	d1d1      	bne.n	2c1fa <lll_conn_pdu_tx_prep+0x5a>
   2c256:	2100      	movs	r1, #0
   2c258:	e7d0      	b.n	2c1fc <lll_conn_pdu_tx_prep+0x5c>
   2c25a:	bf00      	nop

0002c25c <lll_conn_isr_rx>:
{
   2c25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c260:	b082      	sub	sp, #8
   2c262:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   2c264:	f000 fd02 	bl	2cc6c <radio_is_done>
	if (trx_done) {
   2c268:	b2c0      	uxtb	r0, r0
   2c26a:	b950      	cbnz	r0, 2c282 <lll_conn_isr_rx+0x26>
	lll_isr_rx_status_reset();
   2c26c:	f7fe feb0 	bl	2afd0 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   2c270:	48b8      	ldr	r0, [pc, #736]	; (2c554 <lll_conn_isr_rx+0x2f8>)
   2c272:	4621      	mov	r1, r4
   2c274:	f000 fbf0 	bl	2ca58 <radio_isr_set>
}
   2c278:	b002      	add	sp, #8
   2c27a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		radio_disable();
   2c27e:	f000 bccb 	b.w	2cc18 <radio_disable>
		crc_ok = radio_crc_is_valid();
   2c282:	f000 fd13 	bl	2ccac <radio_crc_is_valid>
   2c286:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   2c288:	f000 fde0 	bl	2ce4c <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   2c28c:	f7fe fea0 	bl	2afd0 <lll_isr_rx_status_reset>
	trx_cnt++;
   2c290:	4ab1      	ldr	r2, [pc, #708]	; (2c558 <lll_conn_isr_rx+0x2fc>)
   2c292:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   2c294:	2001      	movs	r0, #1
	trx_cnt++;
   2c296:	4403      	add	r3, r0
   2c298:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   2c29a:	f7f6 fdcf 	bl	22e3c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   2c29e:	4680      	mov	r8, r0
   2c2a0:	2800      	cmp	r0, #0
   2c2a2:	f000 80dd 	beq.w	2c460 <lll_conn_isr_rx+0x204>
	if (crc_ok) {
   2c2a6:	2d00      	cmp	r5, #0
   2c2a8:	d149      	bne.n	2c33e <lll_conn_isr_rx+0xe2>
		if (crc_expire == 0U) {
   2c2aa:	4bac      	ldr	r3, [pc, #688]	; (2c55c <lll_conn_isr_rx+0x300>)
   2c2ac:	781e      	ldrb	r6, [r3, #0]
   2c2ae:	2e00      	cmp	r6, #0
   2c2b0:	f040 80a4 	bne.w	2c3fc <lll_conn_isr_rx+0x1a0>
		crc_expire--;
   2c2b4:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   2c2b6:	a901      	add	r1, sp, #4
   2c2b8:	4620      	mov	r0, r4
		crc_expire--;
   2c2ba:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   2c2bc:	f7ff ff70 	bl	2c1a0 <lll_conn_pdu_tx_prep>
	pdu_data_tx->sn = lll->sn;
   2c2c0:	2600      	movs	r6, #0
   2c2c2:	9f01      	ldr	r7, [sp, #4]
   2c2c4:	4635      	mov	r5, r6
		radio_tmr_tifs_set(EVENT_IFS_US);
   2c2c6:	2096      	movs	r0, #150	; 0x96
   2c2c8:	f000 fe1c 	bl	2cf04 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   2c2cc:	f894 005b 	ldrb.w	r0, [r4, #91]	; 0x5b
   2c2d0:	f000 0007 	and.w	r0, r0, #7
   2c2d4:	f000 fcfc 	bl	2ccd0 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   2c2d8:	48a1      	ldr	r0, [pc, #644]	; (2c560 <lll_conn_isr_rx+0x304>)
   2c2da:	4621      	mov	r1, r4
   2c2dc:	f000 fbbc 	bl	2ca58 <radio_isr_set>
		radio_tmr_end_capture();
   2c2e0:	f000 feea 	bl	2d0b8 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   2c2e4:	f894 2072 	ldrb.w	r2, [r4, #114]	; 0x72
   2c2e8:	783b      	ldrb	r3, [r7, #0]
   2c2ea:	f362 03c3 	bfi	r3, r2, #3, #1
   2c2ee:	703b      	strb	r3, [r7, #0]
	pdu_data_tx->nesn = lll->nesn;
   2c2f0:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   2c2f4:	783a      	ldrb	r2, [r7, #0]
   2c2f6:	f3c3 0340 	ubfx	r3, r3, #1, #1
   2c2fa:	f363 0282 	bfi	r2, r3, #2, #1
   2c2fe:	703a      	strb	r2, [r7, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   2c300:	4639      	mov	r1, r7
   2c302:	4620      	mov	r0, r4
   2c304:	f7ff ff20 	bl	2c148 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   2c308:	f000 fca6 	bl	2cc58 <radio_is_ready>
   2c30c:	2800      	cmp	r0, #0
   2c30e:	f040 8099 	bne.w	2c444 <lll_conn_isr_rx+0x1e8>
	if (!radio_tmr_aa_restore()) {
   2c312:	f000 fec5 	bl	2d0a0 <radio_tmr_aa_restore>
   2c316:	2800      	cmp	r0, #0
   2c318:	d066      	beq.n	2c3e8 <lll_conn_isr_rx+0x18c>
	if (tx_release) {
   2c31a:	2d00      	cmp	r5, #0
   2c31c:	d06a      	beq.n	2c3f4 <lll_conn_isr_rx+0x198>
		LL_ASSERT(lll->handle != 0xFFFF);
   2c31e:	89a0      	ldrh	r0, [r4, #12]
   2c320:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2c324:	4298      	cmp	r0, r3
   2c326:	f000 80cc 	beq.w	2c4c2 <lll_conn_isr_rx+0x266>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   2c32a:	4629      	mov	r1, r5
   2c32c:	f7f8 fe6a 	bl	25004 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   2c330:	2e00      	cmp	r6, #0
   2c332:	d175      	bne.n	2c420 <lll_conn_isr_rx+0x1c4>
}
   2c334:	b002      	add	sp, #8
   2c336:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		ull_rx_sched();
   2c33a:	f7f6 bdc7 	b.w	22ecc <ull_rx_sched>
	if (pdu_data_rx->nesn != lll->sn) {
   2c33e:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   2c342:	f898 201c 	ldrb.w	r2, [r8, #28]
   2c346:	f003 0101 	and.w	r1, r3, #1
   2c34a:	f3c2 0080 	ubfx	r0, r2, #2, #1
   2c34e:	4288      	cmp	r0, r1
   2c350:	f000 8096 	beq.w	2c480 <lll_conn_isr_rx+0x224>
		if (lll->role) {
   2c354:	f994 201d 	ldrsb.w	r2, [r4, #29]
		lll->sn++;
   2c358:	f081 0101 	eor.w	r1, r1, #1
   2c35c:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   2c360:	2a00      	cmp	r2, #0
		lll->sn++;
   2c362:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
		if (lll->role) {
   2c366:	da05      	bge.n	2c374 <lll_conn_isr_rx+0x118>
			lll->periph.latency_enabled = 1;
   2c368:	f894 3020 	ldrb.w	r3, [r4, #32]
   2c36c:	f043 0304 	orr.w	r3, r3, #4
   2c370:	f884 3020 	strb.w	r3, [r4, #32]
		if (!lll->empty) {
   2c374:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   2c378:	075d      	lsls	r5, r3, #29
   2c37a:	f100 80b3 	bmi.w	2c4e4 <lll_conn_isr_rx+0x288>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   2c37e:	e9d4 0117 	ldrd	r0, r1, [r4, #92]	; 0x5c
   2c382:	aa01      	add	r2, sp, #4
   2c384:	f7f3 f86a 	bl	1f45c <memq_peek>
		if (link) {
   2c388:	4605      	mov	r5, r0
   2c38a:	2800      	cmp	r0, #0
   2c38c:	f000 80b0 	beq.w	2c4f0 <lll_conn_isr_rx+0x294>
					       lll->packet_tx_head_offset);
   2c390:	f894 2071 	ldrb.w	r2, [r4, #113]	; 0x71
			pdu_data_tx_len = pdu_data_tx->len;
   2c394:	9b01      	ldr	r3, [sp, #4]
   2c396:	4413      	add	r3, r2
   2c398:	7959      	ldrb	r1, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   2c39a:	b171      	cbz	r1, 2c3ba <lll_conn_isr_rx+0x15e>
				if (lll->enc_tx) {
   2c39c:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   2c3a0:	06d8      	lsls	r0, r3, #27
   2c3a2:	d50a      	bpl.n	2c3ba <lll_conn_isr_rx+0x15e>
					lll->ccm_tx.counter++;
   2c3a4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   2c3a8:	3301      	adds	r3, #1
   2c3aa:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
   2c3ae:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   2c3b2:	f143 0300 	adc.w	r3, r3, #0
   2c3b6:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
			if (offset < lll->packet_tx_head_len) {
   2c3ba:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   2c3be:	440a      	add	r2, r1
   2c3c0:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   2c3c2:	429a      	cmp	r2, r3
   2c3c4:	f0c0 809a 	bcc.w	2c4fc <lll_conn_isr_rx+0x2a0>
			} else if (offset == lll->packet_tx_head_len) {
   2c3c8:	f000 80b0 	beq.w	2c52c <lll_conn_isr_rx+0x2d0>
				LL_ASSERT(0);
   2c3cc:	4a65      	ldr	r2, [pc, #404]	; (2c564 <lll_conn_isr_rx+0x308>)
   2c3ce:	4966      	ldr	r1, [pc, #408]	; (2c568 <lll_conn_isr_rx+0x30c>)
   2c3d0:	4866      	ldr	r0, [pc, #408]	; (2c56c <lll_conn_isr_rx+0x310>)
   2c3d2:	f44f 7377 	mov.w	r3, #988	; 0x3dc
   2c3d6:	f007 f81f 	bl	33418 <assert_print>
   2c3da:	4040      	eors	r0, r0
   2c3dc:	f380 8811 	msr	BASEPRI, r0
   2c3e0:	f04f 0003 	mov.w	r0, #3
   2c3e4:	df02      	svc	2
   2c3e6:	e083      	b.n	2c4f0 <lll_conn_isr_rx+0x294>
		radio_tmr_aa_save(radio_tmr_aa_get());
   2c3e8:	f000 fe4e 	bl	2d088 <radio_tmr_aa_get>
   2c3ec:	f000 fe52 	bl	2d094 <radio_tmr_aa_save>
	if (tx_release) {
   2c3f0:	2d00      	cmp	r5, #0
   2c3f2:	d194      	bne.n	2c31e <lll_conn_isr_rx+0xc2>
	if (is_rx_enqueue) {
   2c3f4:	b9a6      	cbnz	r6, 2c420 <lll_conn_isr_rx+0x1c4>
}
   2c3f6:	b002      	add	sp, #8
   2c3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		crc_expire--;
   2c3fc:	3e01      	subs	r6, #1
   2c3fe:	b2f6      	uxtb	r6, r6
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   2c400:	a901      	add	r1, sp, #4
   2c402:	4620      	mov	r0, r4
		crc_expire--;
   2c404:	701e      	strb	r6, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   2c406:	f7ff fecb 	bl	2c1a0 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   2c40a:	2e00      	cmp	r6, #0
   2c40c:	f47f af58 	bne.w	2c2c0 <lll_conn_isr_rx+0x64>
	pdu_data_tx->sn = lll->sn;
   2c410:	9f01      	ldr	r7, [sp, #4]
		radio_isr_set(isr_done, param);
   2c412:	4850      	ldr	r0, [pc, #320]	; (2c554 <lll_conn_isr_rx+0x2f8>)
   2c414:	4621      	mov	r1, r4
   2c416:	f000 fb1f 	bl	2ca58 <radio_isr_set>
			radio_switch_complete_and_disable();
   2c41a:	f000 fd01 	bl	2ce20 <radio_switch_complete_and_disable>
   2c41e:	e761      	b.n	2c2e4 <lll_conn_isr_rx+0x88>
		ull_pdu_rx_alloc();
   2c420:	f7f6 fd2e 	bl	22e80 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   2c424:	2303      	movs	r3, #3
   2c426:	f888 3004 	strb.w	r3, [r8, #4]
		node_rx->hdr.handle = lll->handle;
   2c42a:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   2c42c:	f8d8 0000 	ldr.w	r0, [r8]
		node_rx->hdr.handle = lll->handle;
   2c430:	f8a8 3006 	strh.w	r3, [r8, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   2c434:	4641      	mov	r1, r8
   2c436:	f7f6 fd39 	bl	22eac <ull_rx_put>
}
   2c43a:	b002      	add	sp, #8
   2c43c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		ull_rx_sched();
   2c440:	f7f6 bd44 	b.w	22ecc <ull_rx_sched>
	LL_ASSERT(!radio_is_ready());
   2c444:	4a47      	ldr	r2, [pc, #284]	; (2c564 <lll_conn_isr_rx+0x308>)
   2c446:	494a      	ldr	r1, [pc, #296]	; (2c570 <lll_conn_isr_rx+0x314>)
   2c448:	4848      	ldr	r0, [pc, #288]	; (2c56c <lll_conn_isr_rx+0x310>)
   2c44a:	f240 138b 	movw	r3, #395	; 0x18b
   2c44e:	f006 ffe3 	bl	33418 <assert_print>
   2c452:	4040      	eors	r0, r0
   2c454:	f380 8811 	msr	BASEPRI, r0
   2c458:	f04f 0003 	mov.w	r0, #3
   2c45c:	df02      	svc	2
   2c45e:	e758      	b.n	2c312 <lll_conn_isr_rx+0xb6>
	LL_ASSERT(node_rx);
   2c460:	4a40      	ldr	r2, [pc, #256]	; (2c564 <lll_conn_isr_rx+0x308>)
   2c462:	4944      	ldr	r1, [pc, #272]	; (2c574 <lll_conn_isr_rx+0x318>)
   2c464:	4841      	ldr	r0, [pc, #260]	; (2c56c <lll_conn_isr_rx+0x310>)
   2c466:	23fd      	movs	r3, #253	; 0xfd
   2c468:	f006 ffd6 	bl	33418 <assert_print>
   2c46c:	4040      	eors	r0, r0
   2c46e:	f380 8811 	msr	BASEPRI, r0
   2c472:	f04f 0003 	mov.w	r0, #3
   2c476:	df02      	svc	2
	if (crc_ok) {
   2c478:	2d00      	cmp	r5, #0
   2c47a:	f43f af16 	beq.w	2c2aa <lll_conn_isr_rx+0x4e>
   2c47e:	e75e      	b.n	2c33e <lll_conn_isr_rx+0xe2>
	tx_release = NULL;
   2c480:	2500      	movs	r5, #0
	if ((pdu_data_rx->sn == lll->nesn) &&
   2c482:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   2c486:	f3c3 0340 	ubfx	r3, r3, #1, #1
   2c48a:	429a      	cmp	r2, r3
   2c48c:	d039      	beq.n	2c502 <lll_conn_isr_rx+0x2a6>
	is_rx_enqueue = 0U;
   2c48e:	2600      	movs	r6, #0
		crc_expire = 0U;
   2c490:	4a32      	ldr	r2, [pc, #200]	; (2c55c <lll_conn_isr_rx+0x300>)
		crc_valid = 1U;
   2c492:	4b39      	ldr	r3, [pc, #228]	; (2c578 <lll_conn_isr_rx+0x31c>)
		crc_expire = 0U;
   2c494:	2100      	movs	r1, #0
   2c496:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   2c498:	4620      	mov	r0, r4
		crc_valid = 1U;
   2c49a:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   2c49c:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   2c49e:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   2c4a0:	f7ff fe7e 	bl	2c1a0 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   2c4a4:	f898 301c 	ldrb.w	r3, [r8, #28]
   2c4a8:	06da      	lsls	r2, r3, #27
   2c4aa:	d419      	bmi.n	2c4e0 <lll_conn_isr_rx+0x284>
			      (pdu_data_tx->md == 0) &&
   2c4ac:	9f01      	ldr	r7, [sp, #4]
   2c4ae:	783b      	ldrb	r3, [r7, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   2c4b0:	06db      	lsls	r3, r3, #27
   2c4b2:	f53f af08 	bmi.w	2c2c6 <lll_conn_isr_rx+0x6a>
			      (pdu_data_tx->md == 0) &&
   2c4b6:	787b      	ldrb	r3, [r7, #1]
   2c4b8:	2b00      	cmp	r3, #0
   2c4ba:	f47f af04 	bne.w	2c2c6 <lll_conn_isr_rx+0x6a>
   2c4be:	e7a8      	b.n	2c412 <lll_conn_isr_rx+0x1b6>
	pdu_data_tx->sn = lll->sn;
   2c4c0:	2600      	movs	r6, #0
		LL_ASSERT(lll->handle != 0xFFFF);
   2c4c2:	4a28      	ldr	r2, [pc, #160]	; (2c564 <lll_conn_isr_rx+0x308>)
   2c4c4:	492d      	ldr	r1, [pc, #180]	; (2c57c <lll_conn_isr_rx+0x320>)
   2c4c6:	4829      	ldr	r0, [pc, #164]	; (2c56c <lll_conn_isr_rx+0x310>)
   2c4c8:	f240 13a1 	movw	r3, #417	; 0x1a1
   2c4cc:	f006 ffa4 	bl	33418 <assert_print>
   2c4d0:	4040      	eors	r0, r0
   2c4d2:	f380 8811 	msr	BASEPRI, r0
   2c4d6:	f04f 0003 	mov.w	r0, #3
   2c4da:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   2c4dc:	89a0      	ldrh	r0, [r4, #12]
   2c4de:	e724      	b.n	2c32a <lll_conn_isr_rx+0xce>
			      (pdu_data_tx->md == 0) &&
   2c4e0:	9f01      	ldr	r7, [sp, #4]
   2c4e2:	e6f0      	b.n	2c2c6 <lll_conn_isr_rx+0x6a>
			lll->empty = 0;
   2c4e4:	f36f 0382 	bfc	r3, #2, #1
   2c4e8:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
			pdu_data_tx = (void *)radio_pkt_empty_get();
   2c4ec:	f000 fbe8 	bl	2ccc0 <radio_pkt_empty_get>
		if (link) {
   2c4f0:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   2c4f4:	f898 201c 	ldrb.w	r2, [r8, #28]
	tx_release = NULL;
   2c4f8:	2500      	movs	r5, #0
   2c4fa:	e7c2      	b.n	2c482 <lll_conn_isr_rx+0x226>
				lll->packet_tx_head_offset = offset;
   2c4fc:	f884 2071 	strb.w	r2, [r4, #113]	; 0x71
   2c500:	e7f6      	b.n	2c4f0 <lll_conn_isr_rx+0x294>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   2c502:	2003      	movs	r0, #3
   2c504:	f7f6 fc9a 	bl	22e3c <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   2c508:	2800      	cmp	r0, #0
   2c50a:	d0c0      	beq.n	2c48e <lll_conn_isr_rx+0x232>
		lll->nesn++;
   2c50c:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   2c510:	f083 0302 	eor.w	r3, r3, #2
   2c514:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
		if (pdu_data_rx->len != 0) {
   2c518:	f898 301d 	ldrb.w	r3, [r8, #29]
   2c51c:	2b00      	cmp	r3, #0
   2c51e:	d0b6      	beq.n	2c48e <lll_conn_isr_rx+0x232>
			if (lll->enc_rx) {
   2c520:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   2c524:	0719      	lsls	r1, r3, #28
   2c526:	d42b      	bmi.n	2c580 <lll_conn_isr_rx+0x324>
			*is_rx_enqueue = 1U;
   2c528:	2601      	movs	r6, #1
   2c52a:	e7b1      	b.n	2c490 <lll_conn_isr_rx+0x234>
				lll->packet_tx_head_len = 0;
   2c52c:	2200      	movs	r2, #0
   2c52e:	f8a4 2070 	strh.w	r2, [r4, #112]	; 0x70
				memq_dequeue(lll->memq_tx.tail,
   2c532:	6e20      	ldr	r0, [r4, #96]	; 0x60
   2c534:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   2c538:	f7f2 ff98 	bl	1f46c <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   2c53c:	9b01      	ldr	r3, [sp, #4]
   2c53e:	681b      	ldr	r3, [r3, #0]
   2c540:	602b      	str	r3, [r5, #0]
				tx->next = link;
   2c542:	9b01      	ldr	r3, [sp, #4]
   2c544:	601d      	str	r5, [r3, #0]
				*tx_release = tx;
   2c546:	9d01      	ldr	r5, [sp, #4]
				FORCE_MD_CNT_SET();
   2c548:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   2c54c:	f898 201c 	ldrb.w	r2, [r8, #28]
   2c550:	e797      	b.n	2c482 <lll_conn_isr_rx+0x226>
   2c552:	bf00      	nop
   2c554:	0002be75 	.word	0x0002be75
   2c558:	2000329a 	.word	0x2000329a
   2c55c:	200033f6 	.word	0x200033f6
   2c560:	0002c091 	.word	0x0002c091
   2c564:	0003b054 	.word	0x0003b054
   2c568:	0003a004 	.word	0x0003a004
   2c56c:	00039f74 	.word	0x00039f74
   2c570:	0003b010 	.word	0x0003b010
   2c574:	0003b008 	.word	0x0003b008
   2c578:	200033f5 	.word	0x200033f5
   2c57c:	0003b0a8 	.word	0x0003b0a8
				done = radio_ccm_is_done();
   2c580:	f000 fe2a 	bl	2d1d8 <radio_ccm_is_done>
				LL_ASSERT(done);
   2c584:	2800      	cmp	r0, #0
   2c586:	d067      	beq.n	2c658 <lll_conn_isr_rx+0x3fc>
				bool mic_failure = !radio_ccm_mic_is_valid();
   2c588:	f000 fe48 	bl	2d21c <radio_ccm_mic_is_valid>
				if (mic_failure &&
   2c58c:	2800      	cmp	r0, #0
   2c58e:	d153      	bne.n	2c638 <lll_conn_isr_rx+0x3dc>
				    lll->ccm_rx.counter == 0 &&
   2c590:	f8d4 3083 	ldr.w	r3, [r4, #131]	; 0x83
   2c594:	f8d4 2087 	ldr.w	r2, [r4, #135]	; 0x87
				if (mic_failure &&
   2c598:	4313      	orrs	r3, r2
   2c59a:	d105      	bne.n	2c5a8 <lll_conn_isr_rx+0x34c>
				    (pdu_data_rx->ll_id ==
   2c59c:	f898 301c 	ldrb.w	r3, [r8, #28]
				    lll->ccm_rx.counter == 0 &&
   2c5a0:	f003 0303 	and.w	r3, r3, #3
   2c5a4:	2b03      	cmp	r3, #3
   2c5a6:	d030      	beq.n	2c60a <lll_conn_isr_rx+0x3ae>
					mic_state = LLL_CONN_MIC_FAIL;
   2c5a8:	4b32      	ldr	r3, [pc, #200]	; (2c674 <lll_conn_isr_rx+0x418>)
			radio_isr_set(isr_done, param);
   2c5aa:	4833      	ldr	r0, [pc, #204]	; (2c678 <lll_conn_isr_rx+0x41c>)
					mic_state = LLL_CONN_MIC_FAIL;
   2c5ac:	2202      	movs	r2, #2
			radio_isr_set(isr_done, param);
   2c5ae:	4621      	mov	r1, r4
					mic_state = LLL_CONN_MIC_FAIL;
   2c5b0:	701a      	strb	r2, [r3, #0]
			radio_isr_set(isr_done, param);
   2c5b2:	f000 fa51 	bl	2ca58 <radio_isr_set>
			radio_disable();
   2c5b6:	f000 fb2f 	bl	2cc18 <radio_disable>
			LL_ASSERT(!radio_is_ready());
   2c5ba:	f000 fb4d 	bl	2cc58 <radio_is_ready>
   2c5be:	b978      	cbnz	r0, 2c5e0 <lll_conn_isr_rx+0x384>
	if (!radio_tmr_aa_restore()) {
   2c5c0:	f000 fd6e 	bl	2d0a0 <radio_tmr_aa_restore>
   2c5c4:	b1d0      	cbz	r0, 2c5fc <lll_conn_isr_rx+0x3a0>
	if (tx_release) {
   2c5c6:	2d00      	cmp	r5, #0
   2c5c8:	f43f af15 	beq.w	2c3f6 <lll_conn_isr_rx+0x19a>
		LL_ASSERT(lll->handle != 0xFFFF);
   2c5cc:	89a0      	ldrh	r0, [r4, #12]
   2c5ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2c5d2:	4298      	cmp	r0, r3
   2c5d4:	f43f af74 	beq.w	2c4c0 <lll_conn_isr_rx+0x264>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   2c5d8:	4629      	mov	r1, r5
   2c5da:	f7f8 fd13 	bl	25004 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   2c5de:	e6a9      	b.n	2c334 <lll_conn_isr_rx+0xd8>
			LL_ASSERT(!radio_is_ready());
   2c5e0:	4a26      	ldr	r2, [pc, #152]	; (2c67c <lll_conn_isr_rx+0x420>)
   2c5e2:	4927      	ldr	r1, [pc, #156]	; (2c680 <lll_conn_isr_rx+0x424>)
   2c5e4:	4827      	ldr	r0, [pc, #156]	; (2c684 <lll_conn_isr_rx+0x428>)
   2c5e6:	f44f 7387 	mov.w	r3, #270	; 0x10e
   2c5ea:	f006 ff15 	bl	33418 <assert_print>
   2c5ee:	4040      	eors	r0, r0
   2c5f0:	f380 8811 	msr	BASEPRI, r0
   2c5f4:	f04f 0003 	mov.w	r0, #3
   2c5f8:	df02      	svc	2
   2c5fa:	e7e1      	b.n	2c5c0 <lll_conn_isr_rx+0x364>
		radio_tmr_aa_save(radio_tmr_aa_get());
   2c5fc:	f000 fd44 	bl	2d088 <radio_tmr_aa_get>
   2c600:	f000 fd48 	bl	2d094 <radio_tmr_aa_save>
	if (tx_release) {
   2c604:	2d00      	cmp	r5, #0
   2c606:	d1e1      	bne.n	2c5cc <lll_conn_isr_rx+0x370>
   2c608:	e6f5      	b.n	2c3f6 <lll_conn_isr_rx+0x19a>
						radio_pkt_scratch_get();
   2c60a:	f000 fb5d 	bl	2ccc8 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   2c60e:	7843      	ldrb	r3, [r0, #1]
   2c610:	2b27      	cmp	r3, #39	; 0x27
						radio_pkt_scratch_get();
   2c612:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   2c614:	d8c8      	bhi.n	2c5a8 <lll_conn_isr_rx+0x34c>
						memcpy(pdu_data_rx,
   2c616:	3303      	adds	r3, #3
   2c618:	b2da      	uxtb	r2, r3
   2c61a:	f108 001c 	add.w	r0, r8, #28
   2c61e:	f008 ff8a 	bl	35536 <memcpy>
						lll->ccm_rx.counter--;
   2c622:	f8d4 3083 	ldr.w	r3, [r4, #131]	; 0x83
   2c626:	f8d4 2087 	ldr.w	r2, [r4, #135]	; 0x87
   2c62a:	3b01      	subs	r3, #1
   2c62c:	f8c4 3083 	str.w	r3, [r4, #131]	; 0x83
   2c630:	f142 33ff 	adc.w	r3, r2, #4294967295	; 0xffffffff
   2c634:	f8c4 3087 	str.w	r3, [r4, #135]	; 0x87
				lll->ccm_rx.counter++;
   2c638:	f8d4 3083 	ldr.w	r3, [r4, #131]	; 0x83
				mic_state = LLL_CONN_MIC_PASS;
   2c63c:	4a0d      	ldr	r2, [pc, #52]	; (2c674 <lll_conn_isr_rx+0x418>)
				lll->ccm_rx.counter++;
   2c63e:	3301      	adds	r3, #1
   2c640:	f8c4 3083 	str.w	r3, [r4, #131]	; 0x83
   2c644:	f8d4 3087 	ldr.w	r3, [r4, #135]	; 0x87
						lll->ccm_rx.counter--;
   2c648:	f104 0183 	add.w	r1, r4, #131	; 0x83
				lll->ccm_rx.counter++;
   2c64c:	f143 0300 	adc.w	r3, r3, #0
   2c650:	604b      	str	r3, [r1, #4]
				mic_state = LLL_CONN_MIC_PASS;
   2c652:	2301      	movs	r3, #1
   2c654:	7013      	strb	r3, [r2, #0]
		if (err) {
   2c656:	e767      	b.n	2c528 <lll_conn_isr_rx+0x2cc>
				LL_ASSERT(done);
   2c658:	4a08      	ldr	r2, [pc, #32]	; (2c67c <lll_conn_isr_rx+0x420>)
   2c65a:	490b      	ldr	r1, [pc, #44]	; (2c688 <lll_conn_isr_rx+0x42c>)
   2c65c:	4809      	ldr	r0, [pc, #36]	; (2c684 <lll_conn_isr_rx+0x428>)
   2c65e:	f240 33f7 	movw	r3, #1015	; 0x3f7
   2c662:	f006 fed9 	bl	33418 <assert_print>
   2c666:	4040      	eors	r0, r0
   2c668:	f380 8811 	msr	BASEPRI, r0
   2c66c:	f04f 0003 	mov.w	r0, #3
   2c670:	df02      	svc	2
   2c672:	e789      	b.n	2c588 <lll_conn_isr_rx+0x32c>
   2c674:	200033f4 	.word	0x200033f4
   2c678:	0002be75 	.word	0x0002be75
   2c67c:	0003b054 	.word	0x0003b054
   2c680:	0003b010 	.word	0x0003b010
   2c684:	00039f74 	.word	0x00039f74
   2c688:	0003b0a0 	.word	0x0003b0a0

0002c68c <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   2c68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   2c690:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   2c692:	89a2      	ldrh	r2, [r4, #12]
   2c694:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2c698:	429a      	cmp	r2, r3
{
   2c69a:	b082      	sub	sp, #8
	if (unlikely(lll->handle == 0xFFFF)) {
   2c69c:	f000 80d2 	beq.w	2c844 <prepare_cb+0x1b8>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   2c6a0:	4605      	mov	r5, r0
   2c6a2:	f7ff fc51 	bl	2bf48 <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   2c6a6:	892b      	ldrh	r3, [r5, #8]
   2c6a8:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   2c6aa:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   2c6ac:	441a      	add	r2, r3
   2c6ae:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   2c6b0:	4410      	add	r0, r2
	lll->event_counter = (event_counter + 1);

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   2c6b2:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare + p->lazy;
   2c6b4:	82a2      	strh	r2, [r4, #20]
	event_counter = lll->event_counter + lll->latency_event;
   2c6b6:	b280      	uxth	r0, r0
	lll->event_counter = (event_counter + 1);
   2c6b8:	1c41      	adds	r1, r0, #1
   2c6ba:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
   2c6bc:	065e      	lsls	r6, r3, #25
	lll->latency_prepare = 0;
   2c6be:	f04f 0100 	mov.w	r1, #0
   2c6c2:	8261      	strh	r1, [r4, #18]
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   2c6c4:	f104 0118 	add.w	r1, r4, #24
	if (lll->data_chan_sel) {
   2c6c8:	f100 808e 	bmi.w	2c7e8 <prepare_cb+0x15c>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   2c6cc:	f003 003f 	and.w	r0, r3, #63	; 0x3f
   2c6d0:	460b      	mov	r3, r1
   2c6d2:	7fa1      	ldrb	r1, [r4, #30]
   2c6d4:	9000      	str	r0, [sp, #0]
   2c6d6:	f104 001f 	add.w	r0, r4, #31
   2c6da:	f7fd f81f 	bl	2971c <lll_chan_sel_1>
   2c6de:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->periph.window_widening_event_us +=
   2c6e0:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
   2c6e4:	4413      	add	r3, r2
		lll->periph.window_widening_event_us =
			lll->periph.window_widening_max_us;
	}

	/* current window size */
	lll->periph.window_size_event_us +=
   2c6e6:	e9d4 020d 	ldrd	r0, r2, [r4, #52]	; 0x34
	lll->periph.window_widening_prepare_us = 0;
   2c6ea:	2100      	movs	r1, #0
	lll->periph.window_size_event_us +=
   2c6ec:	4402      	add	r2, r0
	lll->periph.window_widening_prepare_us = 0;
   2c6ee:	62e1      	str	r1, [r4, #44]	; 0x2c
		lll->periph.window_size_prepare_us;
	lll->periph.window_size_prepare_us = 0;
   2c6f0:	6361      	str	r1, [r4, #52]	; 0x34
   2c6f2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	lll->periph.window_size_event_us +=
   2c6f4:	63a2      	str	r2, [r4, #56]	; 0x38
	/* Ensure that empty flag reflects the state of the Tx queue, as a
	 * peripheral if this is the first connection event and as no prior PDU
	 * is transmitted, an incorrect acknowledgment by peer should not
	 * dequeue a PDU that has not been transmitted on air.
	 */
	if (!lll->empty) {
   2c6f6:	f894 2072 	ldrb.w	r2, [r4, #114]	; 0x72
   2c6fa:	428b      	cmp	r3, r1
   2c6fc:	bf28      	it	cs
   2c6fe:	460b      	movcs	r3, r1
   2c700:	f012 0204 	ands.w	r2, r2, #4
   2c704:	6323      	str	r3, [r4, #48]	; 0x30
   2c706:	f000 808f 	beq.w	2c828 <prepare_cb+0x19c>
			lll->empty = 1U;
		}
	}

	/* Start setting up Radio h/w */
	radio_reset();
   2c70a:	f000 f9e7 	bl	2cadc <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   2c70e:	2000      	movs	r0, #0
   2c710:	f000 fa0a 	bl	2cb28 <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	radio_aa_set(lll->access_addr);
   2c714:	1d20      	adds	r0, r4, #4
   2c716:	f000 fa25 	bl	2cb64 <radio_aa_set>
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
   2c71a:	8923      	ldrh	r3, [r4, #8]
   2c71c:	7aa1      	ldrb	r1, [r4, #10]
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   2c71e:	f240 605b 	movw	r0, #1627	; 0x65b
   2c722:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   2c726:	f000 fab5 	bl	2cc94 <radio_crc_configure>
				sys_get_le24(lll->crc_init));

	lll_chan_set(data_chan_use);
   2c72a:	4630      	mov	r0, r6
   2c72c:	f7fe fc04 	bl	2af38 <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   2c730:	4621      	mov	r1, r4
   2c732:	4849      	ldr	r0, [pc, #292]	; (2c858 <prepare_cb+0x1cc>)
   2c734:	f000 f990 	bl	2ca58 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   2c738:	2096      	movs	r0, #150	; 0x96
   2c73a:	f000 fbe3 	bl	2cf04 <radio_tmr_tifs_set>
	 * - CTE RX is not enabled,
	 * - SOC does not require compensation for PHYEND event delay.
	 */
	if (!IS_ENABLED(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)) {
#if defined(CONFIG_BT_CTLR_PHY)
		radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   2c73e:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
   2c742:	f894 005b 	ldrb.w	r0, [r4, #91]	; 0x5b
   2c746:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   2c74a:	2100      	movs	r1, #0
   2c74c:	f002 0207 	and.w	r2, r2, #7
   2c750:	f000 0007 	and.w	r0, r0, #7
   2c754:	f000 fb04 	bl	2cd60 <radio_switch_complete_and_tx>
	}

	/* The call can use Radio interface that alternates NRF_RADIO->SHORTS. The register is
	 * set by radio_switch_complete_XXX functions, hence any changes done before are cleared.
	 */
	lll_conn_rx_pkt_set(lll);
   2c758:	4620      	mov	r0, r4
   2c75a:	f7ff fc53 	bl	2c004 <lll_conn_rx_pkt_set>

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   2c75e:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   2c760:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   2c762:	4638      	mov	r0, r7
   2c764:	f7fe fbda 	bl	2af1c <lll_event_offset_get>
   2c768:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   2c76a:	686a      	ldr	r2, [r5, #4]
   2c76c:	f106 0109 	add.w	r1, r6, #9
   2c770:	2000      	movs	r0, #0
   2c772:	f000 fbd3 	bl	2cf1c <radio_tmr_start>
   2c776:	4680      	mov	r8, r0

	radio_tmr_aa_capture();
   2c778:	f000 fc72 	bl	2d060 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   2c77c:	2000      	movs	r0, #0
   2c77e:	f000 fc89 	bl	2d094 <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   2c782:	6b23      	ldr	r3, [r4, #48]	; 0x30
		 lll->periph.window_widening_event_us) << 1) +
	       lll->periph.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   2c784:	f894 005b 	ldrb.w	r0, [r4, #91]	; 0x5b
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   2c788:	f103 0230 	add.w	r2, r3, #48	; 0x30
	hcto = remainder_us +
   2c78c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   2c78e:	f000 0007 	and.w	r0, r0, #7
   2c792:	2101      	movs	r1, #1
	hcto = remainder_us +
   2c794:	eb03 0542 	add.w	r5, r3, r2, lsl #1
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   2c798:	f000 fa30 	bl	2cbfc <radio_rx_ready_delay_get>
	hcto = remainder_us +
   2c79c:	4445      	add	r5, r8
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   2c79e:	4405      	add	r5, r0
	hcto += addr_us_get(lll->phy_rx);
   2c7a0:	f894 005b 	ldrb.w	r0, [r4, #91]	; 0x5b
   2c7a4:	f000 0007 	and.w	r0, r0, #7
   2c7a8:	2802      	cmp	r0, #2
   2c7aa:	d03b      	beq.n	2c824 <prepare_cb+0x198>
		return 40;
   2c7ac:	2804      	cmp	r0, #4
   2c7ae:	bf0c      	ite	eq
   2c7b0:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   2c7b4:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   2c7b6:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   2c7b8:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   2c7ba:	f000 fa21 	bl	2cc00 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   2c7be:	4428      	add	r0, r5
   2c7c0:	f000 fc40 	bl	2d044 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   2c7c4:	89a1      	ldrh	r1, [r4, #12]
   2c7c6:	3103      	adds	r1, #3
   2c7c8:	4632      	mov	r2, r6
   2c7ca:	b2c9      	uxtb	r1, r1
   2c7cc:	4638      	mov	r0, r7
   2c7ce:	f7e4 ff5f 	bl	11690 <lll_preempt_calc>
   2c7d2:	b188      	cbz	r0, 2c7f8 <prepare_cb+0x16c>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   2c7d4:	4821      	ldr	r0, [pc, #132]	; (2c85c <prepare_cb+0x1d0>)
   2c7d6:	4621      	mov	r1, r4
   2c7d8:	f000 f93e 	bl	2ca58 <radio_isr_set>
		radio_disable();
   2c7dc:	f000 fa1c 	bl	2cc18 <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   2c7e0:	2000      	movs	r0, #0
   2c7e2:	b002      	add	sp, #8
   2c7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   2c7e8:	460a      	mov	r2, r1
   2c7ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2c7ee:	8be1      	ldrh	r1, [r4, #30]
   2c7f0:	f7fc ffe0 	bl	297b4 <lll_chan_sel_2>
   2c7f4:	4606      	mov	r6, r0
   2c7f6:	e773      	b.n	2c6e0 <prepare_cb+0x54>
		ret = lll_prepare_done(lll);
   2c7f8:	4620      	mov	r0, r4
   2c7fa:	f7fe fb37 	bl	2ae6c <lll_prepare_done>
		LL_ASSERT(!ret);
   2c7fe:	2800      	cmp	r0, #0
   2c800:	d0ee      	beq.n	2c7e0 <prepare_cb+0x154>
   2c802:	4a17      	ldr	r2, [pc, #92]	; (2c860 <prepare_cb+0x1d4>)
   2c804:	4917      	ldr	r1, [pc, #92]	; (2c864 <prepare_cb+0x1d8>)
   2c806:	4818      	ldr	r0, [pc, #96]	; (2c868 <prepare_cb+0x1dc>)
   2c808:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   2c80c:	f006 fe04 	bl	33418 <assert_print>
   2c810:	4040      	eors	r0, r0
   2c812:	f380 8811 	msr	BASEPRI, r0
   2c816:	f04f 0003 	mov.w	r0, #3
   2c81a:	df02      	svc	2
}
   2c81c:	2000      	movs	r0, #0
   2c81e:	b002      	add	sp, #8
   2c820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (phy) {
   2c824:	2318      	movs	r3, #24
   2c826:	e7c6      	b.n	2c7b6 <prepare_cb+0x12a>
		link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL);
   2c828:	e9d4 0117 	ldrd	r0, r1, [r4, #92]	; 0x5c
   2c82c:	f7f2 fe16 	bl	1f45c <memq_peek>
		if (!link) {
   2c830:	2800      	cmp	r0, #0
   2c832:	f47f af6a 	bne.w	2c70a <prepare_cb+0x7e>
			lll->empty = 1U;
   2c836:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   2c83a:	f043 0304 	orr.w	r3, r3, #4
   2c83e:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
   2c842:	e762      	b.n	2c70a <prepare_cb+0x7e>
		radio_isr_set(lll_isr_early_abort, lll);
   2c844:	4809      	ldr	r0, [pc, #36]	; (2c86c <prepare_cb+0x1e0>)
   2c846:	4621      	mov	r1, r4
   2c848:	f000 f906 	bl	2ca58 <radio_isr_set>
		radio_disable();
   2c84c:	f000 f9e4 	bl	2cc18 <radio_disable>
}
   2c850:	2000      	movs	r0, #0
   2c852:	b002      	add	sp, #8
   2c854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c858:	0002c25d 	.word	0x0002c25d
   2c85c:	0002b075 	.word	0x0002b075
   2c860:	0003b0c0 	.word	0x0003b0c0
   2c864:	0003a43c 	.word	0x0003a43c
   2c868:	00039f74 	.word	0x00039f74
   2c86c:	0002b099 	.word	0x0002b099

0002c870 <lll_periph_prepare>:
{
   2c870:	b510      	push	{r4, lr}
   2c872:	b082      	sub	sp, #8
   2c874:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   2c876:	f7fe fd5d 	bl	2b334 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   2c87a:	2800      	cmp	r0, #0
   2c87c:	db25      	blt.n	2c8ca <lll_periph_prepare+0x5a>
	lll = p->param;
   2c87e:	68e1      	ldr	r1, [r4, #12]
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   2c880:	8920      	ldrh	r0, [r4, #8]
   2c882:	6a4b      	ldr	r3, [r1, #36]	; 0x24
	lll->periph.window_widening_prepare_us +=
   2c884:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   2c886:	fb00 3303 	mla	r3, r0, r3, r3
   2c88a:	6a88      	ldr	r0, [r1, #40]	; 0x28
	lll->periph.window_widening_prepare_us +=
   2c88c:	4413      	add	r3, r2
   2c88e:	4283      	cmp	r3, r0
   2c890:	bf28      	it	cs
   2c892:	4603      	movcs	r3, r0
   2c894:	62cb      	str	r3, [r1, #44]	; 0x2c
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   2c896:	4a13      	ldr	r2, [pc, #76]	; (2c8e4 <lll_periph_prepare+0x74>)
   2c898:	4913      	ldr	r1, [pc, #76]	; (2c8e8 <lll_periph_prepare+0x78>)
   2c89a:	4814      	ldr	r0, [pc, #80]	; (2c8ec <lll_periph_prepare+0x7c>)
   2c89c:	9400      	str	r4, [sp, #0]
   2c89e:	2300      	movs	r3, #0
   2c8a0:	f7f6 fe2a 	bl	234f8 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   2c8a4:	b108      	cbz	r0, 2c8aa <lll_periph_prepare+0x3a>
   2c8a6:	3077      	adds	r0, #119	; 0x77
   2c8a8:	d101      	bne.n	2c8ae <lll_periph_prepare+0x3e>
}
   2c8aa:	b002      	add	sp, #8
   2c8ac:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   2c8ae:	4a10      	ldr	r2, [pc, #64]	; (2c8f0 <lll_periph_prepare+0x80>)
   2c8b0:	4910      	ldr	r1, [pc, #64]	; (2c8f4 <lll_periph_prepare+0x84>)
   2c8b2:	4811      	ldr	r0, [pc, #68]	; (2c8f8 <lll_periph_prepare+0x88>)
   2c8b4:	235b      	movs	r3, #91	; 0x5b
   2c8b6:	f006 fdaf 	bl	33418 <assert_print>
   2c8ba:	4040      	eors	r0, r0
   2c8bc:	f380 8811 	msr	BASEPRI, r0
   2c8c0:	f04f 0003 	mov.w	r0, #3
   2c8c4:	df02      	svc	2
}
   2c8c6:	b002      	add	sp, #8
   2c8c8:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   2c8ca:	4a09      	ldr	r2, [pc, #36]	; (2c8f0 <lll_periph_prepare+0x80>)
   2c8cc:	490b      	ldr	r1, [pc, #44]	; (2c8fc <lll_periph_prepare+0x8c>)
   2c8ce:	480a      	ldr	r0, [pc, #40]	; (2c8f8 <lll_periph_prepare+0x88>)
   2c8d0:	234a      	movs	r3, #74	; 0x4a
   2c8d2:	f006 fda1 	bl	33418 <assert_print>
   2c8d6:	4040      	eors	r0, r0
   2c8d8:	f380 8811 	msr	BASEPRI, r0
   2c8dc:	f04f 0003 	mov.w	r0, #3
   2c8e0:	df02      	svc	2
   2c8e2:	e7cc      	b.n	2c87e <lll_periph_prepare+0xe>
   2c8e4:	0002c68d 	.word	0x0002c68d
   2c8e8:	0002bf71 	.word	0x0002bf71
   2c8ec:	0002af15 	.word	0x0002af15
   2c8f0:	0003b0c0 	.word	0x0003b0c0
   2c8f4:	0003b040 	.word	0x0003b040
   2c8f8:	00039f74 	.word	0x00039f74
   2c8fc:	0003af2c 	.word	0x0003af2c

0002c900 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   2c900:	4b05      	ldr	r3, [pc, #20]	; (2c918 <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   2c902:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2c906:	2100      	movs	r1, #0
   2c908:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2c90c:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   2c910:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   2c914:	4770      	bx	lr
   2c916:	bf00      	nop
   2c918:	4000b000 	.word	0x4000b000

0002c91c <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   2c91c:	4b05      	ldr	r3, [pc, #20]	; (2c934 <cntr_start+0x18>)
   2c91e:	7818      	ldrb	r0, [r3, #0]
   2c920:	1c42      	adds	r2, r0, #1
   2c922:	701a      	strb	r2, [r3, #0]
   2c924:	b918      	cbnz	r0, 2c92e <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   2c926:	4b04      	ldr	r3, [pc, #16]	; (2c938 <cntr_start+0x1c>)
   2c928:	2201      	movs	r2, #1
   2c92a:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   2c92c:	4770      	bx	lr
		return 1;
   2c92e:	2001      	movs	r0, #1
}
   2c930:	4770      	bx	lr
   2c932:	bf00      	nop
   2c934:	200033f7 	.word	0x200033f7
   2c938:	4000b000 	.word	0x4000b000

0002c93c <cntr_stop>:

uint32_t cntr_stop(void)
{
   2c93c:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   2c93e:	4c0d      	ldr	r4, [pc, #52]	; (2c974 <cntr_stop+0x38>)
   2c940:	7820      	ldrb	r0, [r4, #0]
   2c942:	b148      	cbz	r0, 2c958 <cntr_stop+0x1c>

	if (--_refcount) {
   2c944:	3801      	subs	r0, #1
   2c946:	b2c0      	uxtb	r0, r0
   2c948:	7020      	strb	r0, [r4, #0]
   2c94a:	b918      	cbnz	r0, 2c954 <cntr_stop+0x18>
   2c94c:	4b0a      	ldr	r3, [pc, #40]	; (2c978 <cntr_stop+0x3c>)
   2c94e:	2201      	movs	r2, #1
   2c950:	605a      	str	r2, [r3, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   2c952:	bd10      	pop	{r4, pc}
		return 1;
   2c954:	2001      	movs	r0, #1
}
   2c956:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   2c958:	4a08      	ldr	r2, [pc, #32]	; (2c97c <cntr_stop+0x40>)
   2c95a:	4909      	ldr	r1, [pc, #36]	; (2c980 <cntr_stop+0x44>)
   2c95c:	4809      	ldr	r0, [pc, #36]	; (2c984 <cntr_stop+0x48>)
   2c95e:	232a      	movs	r3, #42	; 0x2a
   2c960:	f006 fd5a 	bl	33418 <assert_print>
   2c964:	4040      	eors	r0, r0
   2c966:	f380 8811 	msr	BASEPRI, r0
   2c96a:	f04f 0003 	mov.w	r0, #3
   2c96e:	df02      	svc	2
	if (--_refcount) {
   2c970:	7820      	ldrb	r0, [r4, #0]
   2c972:	e7e7      	b.n	2c944 <cntr_stop+0x8>
   2c974:	200033f7 	.word	0x200033f7
   2c978:	4000b000 	.word	0x4000b000
   2c97c:	0003b114 	.word	0x0003b114
   2c980:	0003b160 	.word	0x0003b160
   2c984:	00039f74 	.word	0x00039f74

0002c988 <cntr_cnt_get>:
     return p_reg->COUNTER;
   2c988:	4b01      	ldr	r3, [pc, #4]	; (2c990 <cntr_cnt_get+0x8>)
   2c98a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   2c98e:	4770      	bx	lr
   2c990:	4000b000 	.word	0x4000b000

0002c994 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   2c994:	4b02      	ldr	r3, [pc, #8]	; (2c9a0 <cntr_cmp_set+0xc>)
   2c996:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   2c99a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   2c99e:	4770      	bx	lr
   2c9a0:	4000b000 	.word	0x4000b000

0002c9a4 <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2c9a4:	4b12      	ldr	r3, [pc, #72]	; (2c9f0 <do_ecb+0x4c>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   2c9a6:	b430      	push	{r4, r5}
   2c9a8:	2101      	movs	r1, #1
   2c9aa:	4604      	mov	r4, r0
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   2c9ac:	2000      	movs	r0, #0
   2c9ae:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   2c9b0:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   2c9b4:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   2c9b8:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   2c9bc:	6019      	str	r1, [r3, #0]
}
   2c9be:	e005      	b.n	2c9cc <do_ecb+0x28>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   2c9c0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   2c9c4:	b932      	cbnz	r2, 2c9d4 <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   2c9c6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   2c9ca:	b11a      	cbz	r2, 2c9d4 <do_ecb+0x30>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   2c9cc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   2c9d0:	2a00      	cmp	r2, #0
   2c9d2:	d0f5      	beq.n	2c9c0 <do_ecb+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2c9d4:	6059      	str	r1, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   2c9d6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   2c9da:	2a00      	cmp	r2, #0
   2c9dc:	d1e7      	bne.n	2c9ae <do_ecb+0xa>
   2c9de:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   2c9e2:	2d00      	cmp	r5, #0
   2c9e4:	d0e3      	beq.n	2c9ae <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
   2c9e6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   2c9ea:	bc30      	pop	{r4, r5}
   2c9ec:	4770      	bx	lr
   2c9ee:	bf00      	nop
   2c9f0:	4000e000 	.word	0x4000e000

0002c9f4 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   2c9f4:	b570      	push	{r4, r5, r6, lr}
   2c9f6:	b08c      	sub	sp, #48	; 0x30
   2c9f8:	460e      	mov	r6, r1
   2c9fa:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   2c9fc:	4601      	mov	r1, r0
   2c9fe:	2210      	movs	r2, #16
   2ca00:	4668      	mov	r0, sp
{
   2ca02:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   2ca04:	f7f2 fcf8 	bl	1f3f8 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   2ca08:	2210      	movs	r2, #16
   2ca0a:	eb0d 0002 	add.w	r0, sp, r2
   2ca0e:	4631      	mov	r1, r6
   2ca10:	f7f2 fcf2 	bl	1f3f8 <mem_rcopy>

	do_ecb(&ecb);
   2ca14:	4668      	mov	r0, sp
   2ca16:	f7ff ffc5 	bl	2c9a4 <do_ecb>

	if (cipher_text_le) {
   2ca1a:	b125      	cbz	r5, 2ca26 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   2ca1c:	2210      	movs	r2, #16
   2ca1e:	a908      	add	r1, sp, #32
   2ca20:	4628      	mov	r0, r5
   2ca22:	f7f2 fce9 	bl	1f3f8 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   2ca26:	b124      	cbz	r4, 2ca32 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   2ca28:	2210      	movs	r2, #16
   2ca2a:	a908      	add	r1, sp, #32
   2ca2c:	4620      	mov	r0, r4
   2ca2e:	f008 fd82 	bl	35536 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   2ca32:	b00c      	add	sp, #48	; 0x30
   2ca34:	bd70      	pop	{r4, r5, r6, pc}
   2ca36:	bf00      	nop

0002ca38 <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   2ca38:	4b04      	ldr	r3, [pc, #16]	; (2ca4c <isr_radio+0x14>)
   2ca3a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   2ca3e:	b123      	cbz	r3, 2ca4a <isr_radio+0x12>
		isr_cb(isr_cb_param);
   2ca40:	4a03      	ldr	r2, [pc, #12]	; (2ca50 <isr_radio+0x18>)
   2ca42:	4b04      	ldr	r3, [pc, #16]	; (2ca54 <isr_radio+0x1c>)
   2ca44:	6810      	ldr	r0, [r2, #0]
   2ca46:	681b      	ldr	r3, [r3, #0]
   2ca48:	4718      	bx	r3
}
   2ca4a:	4770      	bx	lr
   2ca4c:	40001000 	.word	0x40001000
   2ca50:	20002fc0 	.word	0x20002fc0
   2ca54:	20002fc4 	.word	0x20002fc4

0002ca58 <radio_isr_set>:
{
   2ca58:	b538      	push	{r3, r4, r5, lr}
   2ca5a:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   2ca5c:	2001      	movs	r0, #1
{
   2ca5e:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   2ca60:	f7e7 ff54 	bl	1490c <arch_irq_disable>
	isr_cb = cb;
   2ca64:	4b08      	ldr	r3, [pc, #32]	; (2ca88 <radio_isr_set+0x30>)
	isr_cb_param = param;
   2ca66:	4a09      	ldr	r2, [pc, #36]	; (2ca8c <radio_isr_set+0x34>)
	isr_cb = cb;
   2ca68:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   2ca6a:	4909      	ldr	r1, [pc, #36]	; (2ca90 <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2ca6c:	4b09      	ldr	r3, [pc, #36]	; (2ca94 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   2ca6e:	6015      	str	r5, [r2, #0]
   2ca70:	2010      	movs	r0, #16
   2ca72:	2202      	movs	r2, #2
   2ca74:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
   2ca78:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   2ca7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   2ca80:	2001      	movs	r0, #1
   2ca82:	f7e7 bf35 	b.w	148f0 <arch_irq_enable>
   2ca86:	bf00      	nop
   2ca88:	20002fc4 	.word	0x20002fc4
   2ca8c:	20002fc0 	.word	0x20002fc0
   2ca90:	40001000 	.word	0x40001000
   2ca94:	e000e100 	.word	0xe000e100

0002ca98 <radio_setup>:
			uint32_t volatile PDM;
			uint32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   2ca98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2ca9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   2caa0:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   2caa2:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   2caa6:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   2caaa:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   2caae:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   2cab2:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   2cab6:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   2caba:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   2cabe:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   2cac2:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   2cac6:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   2caca:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   2cace:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   2cad2:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   2cad6:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   2cada:	4770      	bx	lr

0002cadc <radio_reset>:
{
   2cadc:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   2cade:	2001      	movs	r0, #1
   2cae0:	f7e7 ff14 	bl	1490c <arch_irq_disable>
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   2cae4:	4b06      	ldr	r3, [pc, #24]	; (2cb00 <radio_reset+0x24>)
	NRF_RADIO->PCNF1 = HAL_RADIO_RESET_VALUE_PCNF1;
   2cae6:	4807      	ldr	r0, [pc, #28]	; (2cb04 <radio_reset+0x28>)
   2cae8:	2400      	movs	r4, #0
   2caea:	f44f 5190 	mov.w	r1, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PHYEND_DELAY_COMPENSATION_PPI(0)) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   2caee:	f44f 5210 	mov.w	r2, #9216	; 0x2400
   2caf2:	f8c0 4518 	str.w	r4, [r0, #1304]	; 0x518
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   2caf6:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   2cafa:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
   2cafe:	bd10      	pop	{r4, pc}
   2cb00:	4001f000 	.word	0x4001f000
   2cb04:	40001000 	.word	0x40001000

0002cb08 <radio_stop>:
}
   2cb08:	4770      	bx	lr
   2cb0a:	bf00      	nop

0002cb0c <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   2cb0c:	4b05      	ldr	r3, [pc, #20]	; (2cb24 <radio_phy_set+0x18>)
	uint32_t mode;

	switch (phy) {
	case BIT(0):
	default:
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   2cb0e:	2802      	cmp	r0, #2
   2cb10:	bf0c      	ite	eq
   2cb12:	2104      	moveq	r1, #4
   2cb14:	2103      	movne	r1, #3
	NRF_RADIO->MODECNF0 = ((RADIO_MODECNF0_DTX_Center <<
   2cb16:	f240 2201 	movw	r2, #513	; 0x201
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   2cb1a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 = ((RADIO_MODECNF0_DTX_Center <<
   2cb1e:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   2cb22:	4770      	bx	lr
   2cb24:	40001000 	.word	0x40001000

0002cb28 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   2cb28:	4b01      	ldr	r3, [pc, #4]	; (2cb30 <radio_tx_power_set+0x8>)
   2cb2a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   2cb2e:	4770      	bx	lr
   2cb30:	40001000 	.word	0x40001000

0002cb34 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   2cb34:	4b01      	ldr	r3, [pc, #4]	; (2cb3c <radio_freq_chan_set+0x8>)
   2cb36:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   2cb3a:	4770      	bx	lr
   2cb3c:	40001000 	.word	0x40001000

0002cb40 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   2cb40:	4b07      	ldr	r3, [pc, #28]	; (2cb60 <radio_whiten_iv_set+0x20>)
   2cb42:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   2cb46:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   2cb4a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   2cb4e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   2cb52:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   2cb56:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   2cb5a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   2cb5e:	4770      	bx	lr
   2cb60:	40001000 	.word	0x40001000

0002cb64 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   2cb64:	4a0a      	ldr	r2, [pc, #40]	; (2cb90 <radio_aa_set+0x2c>)
   2cb66:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   2cb68:	2301      	movs	r3, #1
	NRF_RADIO->TXADDRESS =
   2cb6a:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   2cb6e:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   2cb72:	78c3      	ldrb	r3, [r0, #3]
   2cb74:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   2cb78:	7843      	ldrb	r3, [r0, #1]
   2cb7a:	f890 c002 	ldrb.w	ip, [r0, #2]
   2cb7e:	7801      	ldrb	r1, [r0, #0]
   2cb80:	041b      	lsls	r3, r3, #16
   2cb82:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   2cb86:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   2cb8a:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   2cb8e:	4770      	bx	lr
   2cb90:	40001000 	.word	0x40001000

0002cb94 <radio_pkt_configure>:
	switch (phy) {
   2cb94:	f3c2 0342 	ubfx	r3, r2, #1, #3
   2cb98:	f1a3 0302 	sub.w	r3, r3, #2
   2cb9c:	fab3 f383 	clz	r3, r3
   2cba0:	095b      	lsrs	r3, r3, #5
   2cba2:	061b      	lsls	r3, r3, #24
	if (pdu_type == RADIO_PKT_CONF_PDU_TYPE_DC) {
   2cba4:	07d2      	lsls	r2, r2, #31
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   2cba6:	bf48      	it	mi
   2cba8:	f443 1380 	orrmi.w	r3, r3, #1048576	; 0x100000
		((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) & RADIO_PCNF0_LFLEN_Msk) |
   2cbac:	f000 000f 	and.w	r0, r0, #15
	NRF_RADIO->PCNF0 =
   2cbb0:	4a09      	ldr	r2, [pc, #36]	; (2cbd8 <radio_pkt_configure+0x44>)
		((((uint32_t)bits_s1) << RADIO_PCNF0_S1LEN_Pos) & RADIO_PCNF0_S1LEN_Msk) | extra;
   2cbb2:	4318      	orrs	r0, r3
   2cbb4:	f440 7080 	orr.w	r0, r0, #256	; 0x100
	NRF_RADIO->PCNF0 =
   2cbb8:	f8c2 0514 	str.w	r0, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   2cbbc:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   2cbc0:	4b06      	ldr	r3, [pc, #24]	; (2cbdc <radio_pkt_configure+0x48>)
   2cbc2:	4003      	ands	r3, r0
   2cbc4:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |=
   2cbc8:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   2cbcc:	4319      	orrs	r1, r3
   2cbce:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   2cbd2:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   2cbd6:	4770      	bx	lr
   2cbd8:	40001000 	.word	0x40001000
   2cbdc:	fef80000 	.word	0xfef80000

0002cbe0 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   2cbe0:	4b01      	ldr	r3, [pc, #4]	; (2cbe8 <radio_pkt_rx_set+0x8>)
   2cbe2:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   2cbe6:	4770      	bx	lr
   2cbe8:	40001000 	.word	0x40001000

0002cbec <radio_pkt_tx_set>:
void radio_pkt_tx_set(void *tx_packet)
   2cbec:	4b01      	ldr	r3, [pc, #4]	; (2cbf4 <radio_pkt_tx_set+0x8>)
   2cbee:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   2cbf2:	4770      	bx	lr
   2cbf4:	40001000 	.word	0x40001000

0002cbf8 <radio_tx_chain_delay_get>:
}
   2cbf8:	2001      	movs	r0, #1
   2cbfa:	4770      	bx	lr

0002cbfc <radio_rx_ready_delay_get>:
}
   2cbfc:	2029      	movs	r0, #41	; 0x29
   2cbfe:	4770      	bx	lr

0002cc00 <radio_rx_chain_delay_get>:
static inline uint32_t hal_radio_rx_chain_delay_us_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
   2cc00:	2802      	cmp	r0, #2
}
   2cc02:	bf0c      	ite	eq
   2cc04:	2005      	moveq	r0, #5
   2cc06:	200a      	movne	r0, #10
   2cc08:	4770      	bx	lr
   2cc0a:	bf00      	nop

0002cc0c <radio_tx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2cc0c:	4b01      	ldr	r3, [pc, #4]	; (2cc14 <radio_tx_enable+0x8>)
   2cc0e:	2201      	movs	r2, #1
   2cc10:	601a      	str	r2, [r3, #0]
}
   2cc12:	4770      	bx	lr
   2cc14:	40001000 	.word	0x40001000

0002cc18 <radio_disable>:
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   2cc18:	4a07      	ldr	r2, [pc, #28]	; (2cc38 <radio_disable+0x20>)
	NRF_RADIO->SHORTS = 0;
   2cc1a:	4908      	ldr	r1, [pc, #32]	; (2cc3c <radio_disable+0x24>)
{
   2cc1c:	b410      	push	{r4}
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   2cc1e:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   2cc20:	f44f 6410 	mov.w	r4, #2304	; 0x900
	NRF_RADIO->SHORTS = 0;
   2cc24:	2000      	movs	r0, #0
   2cc26:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   2cc2a:	6053      	str	r3, [r2, #4]
   2cc2c:	60d3      	str	r3, [r2, #12]
   2cc2e:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   2cc32:	610b      	str	r3, [r1, #16]
}
   2cc34:	bc10      	pop	{r4}
   2cc36:	4770      	bx	lr
   2cc38:	4001f000 	.word	0x4001f000
   2cc3c:	40001000 	.word	0x40001000

0002cc40 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   2cc40:	4b04      	ldr	r3, [pc, #16]	; (2cc54 <radio_status_reset+0x14>)
   2cc42:	2200      	movs	r2, #0
   2cc44:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   2cc48:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   2cc4c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   2cc50:	4770      	bx	lr
   2cc52:	bf00      	nop
   2cc54:	40001000 	.word	0x40001000

0002cc58 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   2cc58:	4b03      	ldr	r3, [pc, #12]	; (2cc68 <radio_is_ready+0x10>)
   2cc5a:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   2cc5e:	3800      	subs	r0, #0
   2cc60:	bf18      	it	ne
   2cc62:	2001      	movne	r0, #1
   2cc64:	4770      	bx	lr
   2cc66:	bf00      	nop
   2cc68:	40001000 	.word	0x40001000

0002cc6c <radio_is_done>:
	return (NRF_RADIO->NRF_RADIO_TXRX_END_EVENT != 0);
   2cc6c:	4b03      	ldr	r3, [pc, #12]	; (2cc7c <radio_is_done+0x10>)
   2cc6e:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   2cc72:	3800      	subs	r0, #0
   2cc74:	bf18      	it	ne
   2cc76:	2001      	movne	r0, #1
   2cc78:	4770      	bx	lr
   2cc7a:	bf00      	nop
   2cc7c:	40001000 	.word	0x40001000

0002cc80 <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   2cc80:	4b03      	ldr	r3, [pc, #12]	; (2cc90 <radio_is_idle+0x10>)
   2cc82:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   2cc86:	fab0 f080 	clz	r0, r0
   2cc8a:	0940      	lsrs	r0, r0, #5
   2cc8c:	4770      	bx	lr
   2cc8e:	bf00      	nop
   2cc90:	40001000 	.word	0x40001000

0002cc94 <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   2cc94:	4b04      	ldr	r3, [pc, #16]	; (2cca8 <radio_crc_configure+0x14>)
   2cc96:	f240 1203 	movw	r2, #259	; 0x103
   2cc9a:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   2cc9e:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   2cca2:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   2cca6:	4770      	bx	lr
   2cca8:	40001000 	.word	0x40001000

0002ccac <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   2ccac:	4b03      	ldr	r3, [pc, #12]	; (2ccbc <radio_crc_is_valid+0x10>)
   2ccae:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   2ccb2:	3800      	subs	r0, #0
   2ccb4:	bf18      	it	ne
   2ccb6:	2001      	movne	r0, #1
   2ccb8:	4770      	bx	lr
   2ccba:	bf00      	nop
   2ccbc:	40001000 	.word	0x40001000

0002ccc0 <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   2ccc0:	4800      	ldr	r0, [pc, #0]	; (2ccc4 <radio_pkt_empty_get+0x4>)
   2ccc2:	4770      	bx	lr
   2ccc4:	20002fbc 	.word	0x20002fbc

0002ccc8 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   2ccc8:	4800      	ldr	r0, [pc, #0]	; (2cccc <radio_pkt_scratch_get+0x4>)
   2ccca:	4770      	bx	lr
   2cccc:	20002eb8 	.word	0x20002eb8

0002ccd0 <radio_switch_complete_and_rx>:
	sw_tifs_toggle &= 1U;
}
#endif /* CONFIG_BT_CTLR_TIFS_HW */

void radio_switch_complete_and_rx(uint8_t phy_rx)
{
   2ccd0:	b4f0      	push	{r4, r5, r6, r7}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   2ccd2:	4b1d      	ldr	r3, [pc, #116]	; (2cd48 <radio_switch_complete_and_rx+0x78>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   2ccd4:	4d1d      	ldr	r5, [pc, #116]	; (2cd4c <radio_switch_complete_and_rx+0x7c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   2ccd6:	4e1e      	ldr	r6, [pc, #120]	; (2cd50 <radio_switch_complete_and_rx+0x80>)
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   2ccd8:	4c1e      	ldr	r4, [pc, #120]	; (2cd54 <radio_switch_complete_and_rx+0x84>)
   2ccda:	4f1f      	ldr	r7, [pc, #124]	; (2cd58 <radio_switch_complete_and_rx+0x88>)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   2ccdc:	2203      	movs	r2, #3
   2ccde:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   2cce2:	782a      	ldrb	r2, [r5, #0]
   2cce4:	f8c6 7568 	str.w	r7, [r6, #1384]	; 0x568
   2cce8:	f102 030c 	add.w	r3, r2, #12
   2ccec:	b2db      	uxtb	r3, r3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   2ccee:	00d0      	lsls	r0, r2, #3
   2ccf0:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   2ccf2:	0091      	lsls	r1, r2, #2
   2ccf4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   2ccf8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   2ccfc:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   2cd00:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   2cd04:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   2cd08:	f8c6 056c 	str.w	r0, [r6, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   2cd0c:	f501 4110 	add.w	r1, r1, #36864	; 0x9000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   2cd10:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   2cd14:	4811      	ldr	r0, [pc, #68]	; (2cd5c <radio_switch_complete_and_rx+0x8c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   2cd16:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   2cd1a:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   2cd1e:	f8d1 3540 	ldr.w	r3, [r1, #1344]	; 0x540
   2cd22:	2b2d      	cmp	r3, #45	; 0x2d
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   2cd24:	bf8a      	itet	hi
   2cd26:	f8d1 3540 	ldrhi.w	r3, [r1, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   2cd2a:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   2cd2c:	3b2d      	subhi	r3, #45	; 0x2d
   2cd2e:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   2cd32:	3201      	adds	r2, #1
    p_reg->CHENSET = mask;
   2cd34:	4b06      	ldr	r3, [pc, #24]	; (2cd50 <radio_switch_complete_and_rx+0x80>)
   2cd36:	f44f 6110 	mov.w	r1, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   2cd3a:	f002 0201 	and.w	r2, r2, #1
   2cd3e:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
   2cd42:	702a      	strb	r2, [r5, #0]
	 *       calculations.
	 */
	sw_switch(SW_SWITCH_TX, SW_SWITCH_RX, SW_SWITCH_PHY_1M, SW_SWITCH_FLAGS_DONTCARE, phy_rx,
		  SW_SWITCH_FLAGS_DONTCARE, END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   2cd44:	bcf0      	pop	{r4, r5, r6, r7}
   2cd46:	4770      	bx	lr
   2cd48:	40001000 	.word	0x40001000
   2cd4c:	200033f8 	.word	0x200033f8
   2cd50:	4001f000 	.word	0x4001f000
   2cd54:	40009140 	.word	0x40009140
   2cd58:	4000110c 	.word	0x4000110c
   2cd5c:	40001004 	.word	0x40001004

0002cd60 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
   2cd60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   2cd64:	4e28      	ldr	r6, [pc, #160]	; (2ce08 <radio_switch_complete_and_tx+0xa8>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   2cd66:	4c29      	ldr	r4, [pc, #164]	; (2ce0c <radio_switch_complete_and_tx+0xac>)
   2cd68:	4f29      	ldr	r7, [pc, #164]	; (2ce10 <radio_switch_complete_and_tx+0xb0>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   2cd6a:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 2ce14 <radio_switch_complete_and_tx+0xb4>
   2cd6e:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 2ce18 <radio_switch_complete_and_tx+0xb8>
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   2cd72:	2303      	movs	r3, #3
   2cd74:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   2cd78:	7821      	ldrb	r1, [r4, #0]
   2cd7a:	f8ce 8568 	str.w	r8, [lr, #1384]	; 0x568
   2cd7e:	f101 030c 	add.w	r3, r1, #12
   2cd82:	b2db      	uxtb	r3, r3
   2cd84:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   2cd86:	00cd      	lsls	r5, r1, #3
   2cd88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2cd8c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   2cd90:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   2cd94:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   2cd98:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   2cd9c:	f8ce 556c 	str.w	r5, [lr, #1388]	; 0x56c
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   2cda0:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    p_reg->CH[(uint32_t) channel].EEP = eep;
   2cda4:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   2cda8:	f649 6534 	movw	r5, #40500	; 0x9e34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   2cdac:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
   2cdb0:	f24a 13b8 	movw	r3, #41400	; 0xa1b8
   2cdb4:	2a02      	cmp	r2, #2
   2cdb6:	bf18      	it	ne
   2cdb8:	461d      	movne	r5, r3
	}
}

static inline uint32_t hal_radio_rx_chain_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   2cdba:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
   2cdbe:	f242 42b8 	movw	r2, #9400	; 0x24b8
   2cdc2:	f241 3388 	movw	r3, #5000	; 0x1388
   2cdc6:	2802      	cmp	r0, #2
   2cdc8:	bf18      	it	ne
   2cdca:	4613      	movne	r3, r2
   2cdcc:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
			delay = HAL_RADIO_NS2US_ROUND(
   2cdd0:	4a12      	ldr	r2, [pc, #72]	; (2ce1c <radio_switch_complete_and_tx+0xbc>)
   2cdd2:	442b      	add	r3, r5
   2cdd4:	fba2 2303 	umull	r2, r3, r2, r3
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   2cdd8:	f8dc 2540 	ldr.w	r2, [ip, #1344]	; 0x540
   2cddc:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
   2cde0:	bf85      	ittet	hi
   2cde2:	0998      	lsrhi	r0, r3, #6
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   2cde4:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540
   2cde8:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   2cdea:	1a1b      	subhi	r3, r3, r0
   2cdec:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   2cdf0:	3101      	adds	r1, #1
    p_reg->CHENSET = mask;
   2cdf2:	4b08      	ldr	r3, [pc, #32]	; (2ce14 <radio_switch_complete_and_tx+0xb4>)
   2cdf4:	f44f 6210 	mov.w	r2, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   2cdf8:	f001 0101 	and.w	r1, r1, #1
   2cdfc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   2ce00:	7021      	strb	r1, [r4, #0]

	sw_switch(SW_SWITCH_RX, SW_SWITCH_TX, phy_rx, flags_rx, phy_tx, flags_tx,
		  END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   2ce02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ce06:	bf00      	nop
   2ce08:	40001000 	.word	0x40001000
   2ce0c:	200033f8 	.word	0x200033f8
   2ce10:	40009140 	.word	0x40009140
   2ce14:	4001f000 	.word	0x4001f000
   2ce18:	4000110c 	.word	0x4000110c
   2ce1c:	10624dd3 	.word	0x10624dd3

0002ce20 <radio_switch_complete_and_disable>:
void radio_switch_complete_and_disable(void)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);
#else /* CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE);
   2ce20:	4904      	ldr	r1, [pc, #16]	; (2ce34 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   2ce22:	4b05      	ldr	r3, [pc, #20]	; (2ce38 <radio_switch_complete_and_disable+0x18>)
   2ce24:	2003      	movs	r0, #3
   2ce26:	f44f 6210 	mov.w	r2, #2304	; 0x900
   2ce2a:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   2ce2e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   2ce32:	4770      	bx	lr
   2ce34:	40001000 	.word	0x40001000
   2ce38:	4001f000 	.word	0x4001f000

0002ce3c <radio_rssi_status_reset>:
	return NRF_RADIO->RSSISAMPLE;
}

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   2ce3c:	4b02      	ldr	r3, [pc, #8]	; (2ce48 <radio_rssi_status_reset+0xc>)
   2ce3e:	2200      	movs	r2, #0
   2ce40:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   2ce44:	4770      	bx	lr
   2ce46:	bf00      	nop
   2ce48:	40001000 	.word	0x40001000

0002ce4c <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   2ce4c:	4b03      	ldr	r3, [pc, #12]	; (2ce5c <radio_rssi_is_ready+0x10>)
   2ce4e:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   2ce52:	3800      	subs	r0, #0
   2ce54:	bf18      	it	ne
   2ce56:	2001      	movne	r0, #1
   2ce58:	4770      	bx	lr
   2ce5a:	bf00      	nop
   2ce5c:	40001000 	.word	0x40001000

0002ce60 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   2ce60:	b410      	push	{r4}
   2ce62:	f04f 0c00 	mov.w	ip, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   2ce66:	ea4f 038c 	mov.w	r3, ip, lsl #2
   2ce6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2ce6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   2ce72:	6814      	ldr	r4, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   2ce74:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
	for (index = 0U; index < 8; index++) {
   2ce78:	f10c 0c01 	add.w	ip, ip, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   2ce7c:	8894      	ldrh	r4, [r2, #4]
   2ce7e:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   2ce82:	f1bc 0f08 	cmp.w	ip, #8
		bdaddr += 6;
   2ce86:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   2ce8a:	d1ec      	bne.n	2ce66 <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   2ce8c:	4b03      	ldr	r3, [pc, #12]	; (2ce9c <radio_filter_configure+0x3c>)
   2ce8e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   2ce92:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   2ce96:	bc10      	pop	{r4}
   2ce98:	4770      	bx	lr
   2ce9a:	bf00      	nop
   2ce9c:	40001000 	.word	0x40001000

0002cea0 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   2cea0:	4a03      	ldr	r2, [pc, #12]	; (2ceb0 <radio_filter_disable+0x10>)
   2cea2:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   2cea6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2ceaa:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   2ceae:	4770      	bx	lr
   2ceb0:	40001000 	.word	0x40001000

0002ceb4 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   2ceb4:	4b02      	ldr	r3, [pc, #8]	; (2cec0 <radio_filter_status_reset+0xc>)
   2ceb6:	2200      	movs	r2, #0
   2ceb8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   2cebc:	4770      	bx	lr
   2cebe:	bf00      	nop
   2cec0:	40001000 	.word	0x40001000

0002cec4 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   2cec4:	4b03      	ldr	r3, [pc, #12]	; (2ced4 <radio_filter_has_match+0x10>)
   2cec6:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   2ceca:	3800      	subs	r0, #0
   2cecc:	bf18      	it	ne
   2cece:	2001      	movne	r0, #1
   2ced0:	4770      	bx	lr
   2ced2:	bf00      	nop
   2ced4:	40001000 	.word	0x40001000

0002ced8 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   2ced8:	4b01      	ldr	r3, [pc, #4]	; (2cee0 <radio_filter_match_get+0x8>)
   2ceda:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   2cede:	4770      	bx	lr
   2cee0:	40001000 	.word	0x40001000

0002cee4 <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   2cee4:	4904      	ldr	r1, [pc, #16]	; (2cef8 <radio_tmr_status_reset+0x14>)
   2cee6:	4b05      	ldr	r3, [pc, #20]	; (2cefc <radio_tmr_status_reset+0x18>)
   2cee8:	4a05      	ldr	r2, [pc, #20]	; (2cf00 <radio_tmr_status_reset+0x1c>)
   2ceea:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   2ceee:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   2cef2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
#if defined(CONFIG_BT_CTLR_DF_CONN_CTE_RX)
			BIT(HAL_TRIGGER_CRYPT_DELAY_PPI) |
#endif /* CONFIG_BT_CTLR_DF_CONN_CTE_RX */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   2cef6:	4770      	bx	lr
   2cef8:	4000b000 	.word	0x4000b000
   2cefc:	4001f000 	.word	0x4001f000
   2cf00:	0e7000c0 	.word	0x0e7000c0

0002cf04 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   2cf04:	4b03      	ldr	r3, [pc, #12]	; (2cf14 <radio_tmr_tifs_set+0x10>)
   2cf06:	4a04      	ldr	r2, [pc, #16]	; (2cf18 <radio_tmr_tifs_set+0x14>)
   2cf08:	781b      	ldrb	r3, [r3, #0]
   2cf0a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   2cf0e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   2cf12:	4770      	bx	lr
   2cf14:	200033f8 	.word	0x200033f8
   2cf18:	40009000 	.word	0x40009000

0002cf1c <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   2cf1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
/* Remove ticks and return positive remainder value in microseconds */
static inline void hal_ticker_remove_jitter(uint32_t *ticks,
					    uint32_t *remainder)
{
	/* Is remainder less than 1 us */
	if ((*remainder & BIT(31)) || !(*remainder / 1000000UL)) {
   2cf20:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   2cf24:	4d31      	ldr	r5, [pc, #196]	; (2cfec <radio_tmr_start+0xd0>)
   2cf26:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   2cf2a:	42ab      	cmp	r3, r5
   2cf2c:	4604      	mov	r4, r0
   2cf2e:	d906      	bls.n	2cf3e <radio_tmr_start+0x22>
		*ticks -= 1U;
		*remainder += HAL_TICKER_CNTR_CLK_UNIT_FS / 1000UL;
   2cf30:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   2cf34:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
		*ticks -= 1U;
   2cf38:	3901      	subs	r1, #1
		*remainder += HAL_TICKER_CNTR_CLK_UNIT_FS / 1000UL;
   2cf3a:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2cf3e:	4b2c      	ldr	r3, [pc, #176]	; (2cff0 <radio_tmr_start+0xd4>)
	}

	/* pico seconds to micro seconds unit */
	*remainder /= 1000000UL;
   2cf40:	482c      	ldr	r0, [pc, #176]	; (2cff4 <radio_tmr_start+0xd8>)
    p_reg->CC[ch] = cc_val;
   2cf42:	4d2d      	ldr	r5, [pc, #180]	; (2cff8 <radio_tmr_start+0xdc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   2cf44:	4e2d      	ldr	r6, [pc, #180]	; (2cffc <radio_tmr_start+0xe0>)
   2cf46:	2701      	movs	r7, #1
   2cf48:	60df      	str	r7, [r3, #12]
	hal_ticker_remove_jitter(&ticks_start, &remainder);

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   2cf4a:	2700      	movs	r7, #0
   2cf4c:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
   2cf50:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   2cf54:	2704      	movs	r7, #4
   2cf56:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
   2cf5a:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   2cf5c:	2702      	movs	r7, #2
   2cf5e:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
   2cf62:	4a27      	ldr	r2, [pc, #156]	; (2d000 <radio_tmr_start+0xe4>)
    p_reg->CC[cc_channel] = cc_value;
   2cf64:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   2cf68:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   2cf6c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   2cf70:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
    p_reg->CHENSET = mask;
   2cf74:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   2cf76:	f8c2 6540 	str.w	r6, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   2cf7a:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   2cf7e:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   2cf82:	b364      	cbz	r4, 2cfde <radio_tmr_start+0xc2>
    p_reg->CHENCLR = mask;
   2cf84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   2cf88:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   2cf8c:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   2cf90:	4b1b      	ldr	r3, [pc, #108]	; (2d000 <radio_tmr_start+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2cf92:	4a1c      	ldr	r2, [pc, #112]	; (2d004 <radio_tmr_start+0xe8>)
   2cf94:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   2cf98:	2101      	movs	r1, #1
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   2cf9a:	2400      	movs	r4, #0
    p_reg->CH[(uint32_t) channel].EEP = eep;
   2cf9c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 2d008 <radio_tmr_start+0xec>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   2cfa0:	f8df e068 	ldr.w	lr, [pc, #104]	; 2d00c <radio_tmr_start+0xf0>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   2cfa4:	f8df c068 	ldr.w	ip, [pc, #104]	; 2d010 <radio_tmr_start+0xf4>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   2cfa8:	4f1a      	ldr	r7, [pc, #104]	; (2d014 <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   2cfaa:	4e1b      	ldr	r6, [pc, #108]	; (2d018 <radio_tmr_start+0xfc>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   2cfac:	4d1b      	ldr	r5, [pc, #108]	; (2d01c <radio_tmr_start+0x100>)
   2cfae:	60d1      	str	r1, [r2, #12]
	SW_SWITCH_TIMER->PRESCALER = 4;
   2cfb0:	f04f 0904 	mov.w	r9, #4
	SW_SWITCH_TIMER->MODE = 0;
   2cfb4:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   2cfb8:	f8c2 9510 	str.w	r9, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   2cfbc:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   2cfc0:	6011      	str	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   2cfc2:	f8c3 8550 	str.w	r8, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   2cfc6:	f8c3 e554 	str.w	lr, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   2cfca:	f8c3 c558 	str.w	ip, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   2cfce:	f8c3 755c 	str.w	r7, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   2cfd2:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   2cfd6:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   2cfda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->CHENCLR = mask;
   2cfde:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   2cfe2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   2cfe6:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
   2cfea:	e7d1      	b.n	2cf90 <radio_tmr_start+0x74>
   2cfec:	7ff0bdbf 	.word	0x7ff0bdbf
   2cff0:	40008000 	.word	0x40008000
   2cff4:	431bde83 	.word	0x431bde83
   2cff8:	4000b000 	.word	0x4000b000
   2cffc:	4000b148 	.word	0x4000b148
   2d000:	4001f000 	.word	0x4001f000
   2d004:	40009000 	.word	0x40009000
   2d008:	4000110c 	.word	0x4000110c
   2d00c:	4000900c 	.word	0x4000900c
   2d010:	40009140 	.word	0x40009140
   2d014:	4001f004 	.word	0x4001f004
   2d018:	40009144 	.word	0x40009144
   2d01c:	4001f00c 	.word	0x4001f00c

0002d020 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   2d020:	4b01      	ldr	r3, [pc, #4]	; (2d028 <radio_tmr_start_get+0x8>)
   2d022:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   2d026:	4770      	bx	lr
   2d028:	4000b000 	.word	0x4000b000

0002d02c <radio_tmr_stop>:
   2d02c:	4903      	ldr	r1, [pc, #12]	; (2d03c <radio_tmr_stop+0x10>)
   2d02e:	4a04      	ldr	r2, [pc, #16]	; (2d040 <radio_tmr_stop+0x14>)
   2d030:	2301      	movs	r3, #1
   2d032:	604b      	str	r3, [r1, #4]
   2d034:	610b      	str	r3, [r1, #16]
   2d036:	6053      	str	r3, [r2, #4]
   2d038:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   2d03a:	4770      	bx	lr
   2d03c:	40008000 	.word	0x40008000
   2d040:	40009000 	.word	0x40009000

0002d044 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   2d044:	4904      	ldr	r1, [pc, #16]	; (2d058 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   2d046:	4b05      	ldr	r3, [pc, #20]	; (2d05c <radio_tmr_hcto_configure+0x18>)
   2d048:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   2d04c:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   2d050:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   2d054:	4770      	bx	lr
   2d056:	bf00      	nop
   2d058:	40008000 	.word	0x40008000
   2d05c:	4001f000 	.word	0x4001f000

0002d060 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   2d060:	4b05      	ldr	r3, [pc, #20]	; (2d078 <radio_tmr_aa_capture+0x18>)
   2d062:	4806      	ldr	r0, [pc, #24]	; (2d07c <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   2d064:	4906      	ldr	r1, [pc, #24]	; (2d080 <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   2d066:	4a07      	ldr	r2, [pc, #28]	; (2d084 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   2d068:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   2d06c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   2d070:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   2d074:	4770      	bx	lr
   2d076:	bf00      	nop
   2d078:	4001f000 	.word	0x4001f000
   2d07c:	40001100 	.word	0x40001100
   2d080:	40008040 	.word	0x40008040
   2d084:	04000080 	.word	0x04000080

0002d088 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   2d088:	4b01      	ldr	r3, [pc, #4]	; (2d090 <radio_tmr_aa_get+0x8>)
   2d08a:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   2d08e:	4770      	bx	lr
   2d090:	40008000 	.word	0x40008000

0002d094 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   2d094:	4b01      	ldr	r3, [pc, #4]	; (2d09c <radio_tmr_aa_save+0x8>)
   2d096:	6018      	str	r0, [r3, #0]
}
   2d098:	4770      	bx	lr
   2d09a:	bf00      	nop
   2d09c:	20002eb4 	.word	0x20002eb4

0002d0a0 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   2d0a0:	4b01      	ldr	r3, [pc, #4]	; (2d0a8 <radio_tmr_aa_restore+0x8>)
}
   2d0a2:	6818      	ldr	r0, [r3, #0]
   2d0a4:	4770      	bx	lr
   2d0a6:	bf00      	nop
   2d0a8:	20002eb4 	.word	0x20002eb4

0002d0ac <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   2d0ac:	4b01      	ldr	r3, [pc, #4]	; (2d0b4 <radio_tmr_ready_get+0x8>)
   2d0ae:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   2d0b2:	4770      	bx	lr
   2d0b4:	40008000 	.word	0x40008000

0002d0b8 <radio_tmr_end_capture>:
   2d0b8:	4b02      	ldr	r3, [pc, #8]	; (2d0c4 <radio_tmr_end_capture+0xc>)
   2d0ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   2d0be:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X ||
	* (CONFIG_SOC_SERIES_NRF53X && !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	*/
}
   2d0c2:	4770      	bx	lr
   2d0c4:	4001f000 	.word	0x4001f000

0002d0c8 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   2d0c8:	4b01      	ldr	r3, [pc, #4]	; (2d0d0 <radio_tmr_end_get+0x8>)
   2d0ca:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   2d0ce:	4770      	bx	lr
   2d0d0:	40008000 	.word	0x40008000

0002d0d4 <radio_tmr_tifs_base_get>:

uint32_t radio_tmr_tifs_base_get(void)
   2d0d4:	4b01      	ldr	r3, [pc, #4]	; (2d0dc <radio_tmr_tifs_base_get+0x8>)
   2d0d6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   2d0da:	4770      	bx	lr
   2d0dc:	40008000 	.word	0x40008000

0002d0e0 <radio_ccm_rx_pkt_set>:

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   2d0e0:	4b1c      	ldr	r3, [pc, #112]	; (2d154 <radio_ccm_rx_pkt_set+0x74>)
{
   2d0e2:	b430      	push	{r4, r5}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   2d0e4:	2400      	movs	r4, #0
   2d0e6:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   2d0ea:	2402      	movs	r4, #2
	/* Enable CCM support for 8-bit length field PDUs. */
	mode |= (CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
		CCM_MODE_LENGTH_Msk;

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
   2d0ec:	42a1      	cmp	r1, r4
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   2d0ee:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
{
   2d0f2:	4605      	mov	r5, r0
	switch (phy) {
   2d0f4:	d027      	beq.n	2d146 <radio_ccm_rx_pkt_set+0x66>
   2d0f6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   2d0fa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	default:
	case PHY_1M:
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   2d0fe:	4c16      	ldr	r4, [pc, #88]	; (2d158 <radio_ccm_rx_pkt_set+0x78>)
   2d100:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504

#if !defined(CONFIG_SOC_SERIES_NRF51X) && \
	!defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4U)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   2d104:	4915      	ldr	r1, [pc, #84]	; (2d15c <radio_ccm_rx_pkt_set+0x7c>)
			RADIO_PCNF1_MAXLEN_Pos;

	/* MAXPACKETSIZE value 0x001B (27) - 0x00FB (251) bytes */
	NRF_CCM->MAXPACKETSIZE = max_len - 4U;
   2d106:	4b13      	ldr	r3, [pc, #76]	; (2d154 <radio_ccm_rx_pkt_set+0x74>)
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   2d108:	f8d1 1518 	ldr.w	r1, [r1, #1304]	; 0x518
#endif

	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   2d10c:	4814      	ldr	r0, [pc, #80]	; (2d160 <radio_ccm_rx_pkt_set+0x80>)
	NRF_CCM->MAXPACKETSIZE = max_len - 4U;
   2d10e:	b2c9      	uxtb	r1, r1
   2d110:	3904      	subs	r1, #4
   2d112:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
	NRF_CCM->MODE = mode;
   2d116:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
	NRF_CCM->SHORTS = 0;
   2d11a:	2100      	movs	r1, #0
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   2d11c:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   2d120:	4c10      	ldr	r4, [pc, #64]	; (2d164 <radio_ccm_rx_pkt_set+0x84>)
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   2d122:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   2d126:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d12a:	2201      	movs	r2, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   2d12c:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
   2d130:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDKSGEN = 0;
   2d134:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   2d138:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   2d13c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   2d140:	601a      	str	r2, [r3, #0]

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   2d142:	bc30      	pop	{r4, r5}
   2d144:	4770      	bx	lr
   2d146:	4b08      	ldr	r3, [pc, #32]	; (2d168 <radio_ccm_rx_pkt_set+0x88>)
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   2d148:	4c08      	ldr	r4, [pc, #32]	; (2d16c <radio_ccm_rx_pkt_set+0x8c>)
   2d14a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   2d14e:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
}
   2d152:	e7d7      	b.n	2d104 <radio_ccm_rx_pkt_set+0x24>
   2d154:	4000f000 	.word	0x4000f000
   2d158:	01000001 	.word	0x01000001
   2d15c:	40001000 	.word	0x40001000
   2d160:	20002eb8 	.word	0x20002eb8
   2d164:	20002da8 	.word	0x20002da8
   2d168:	4001f000 	.word	0x4001f000
   2d16c:	01010001 	.word	0x01010001

0002d170 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   2d170:	b430      	push	{r4, r5}
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   2d172:	4b14      	ldr	r3, [pc, #80]	; (2d1c4 <radio_ccm_tx_pkt_set+0x54>)
   2d174:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   2d176:	2202      	movs	r2, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   2d178:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   2d17c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

#if !defined(CONFIG_SOC_SERIES_NRF51X) && \
	!defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   2d180:	4a11      	ldr	r2, [pc, #68]	; (2d1c8 <radio_ccm_tx_pkt_set+0x58>)
   2d182:	f8d2 2518 	ldr.w	r2, [r2, #1304]	; 0x518
			RADIO_PCNF1_MAXLEN_Pos;

	/* MAXPACKETSIZE value 0x001B (27) - 0x00FB (251) bytes */
	NRF_CCM->MAXPACKETSIZE = max_len - 4U;
   2d186:	b2d2      	uxtb	r2, r2
   2d188:	3a04      	subs	r2, #4
   2d18a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
{
   2d18e:	4605      	mov	r5, r0
#endif

	NRF_CCM->MODE = mode;
   2d190:	4a0e      	ldr	r2, [pc, #56]	; (2d1cc <radio_ccm_tx_pkt_set+0x5c>)
   2d192:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   2d196:	480e      	ldr	r0, [pc, #56]	; (2d1d0 <radio_ccm_tx_pkt_set+0x60>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   2d198:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   2d19c:	2201      	movs	r2, #1
	NRF_CCM->INPTR = (uint32_t)pkt;
   2d19e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   2d1a2:	490c      	ldr	r1, [pc, #48]	; (2d1d4 <radio_ccm_tx_pkt_set+0x64>)
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   2d1a4:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   2d1a8:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   2d1ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDKSGEN = 0;
   2d1b0:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   2d1b4:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   2d1b8:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   2d1bc:	601a      	str	r2, [r3, #0]

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   2d1be:	bc30      	pop	{r4, r5}
   2d1c0:	4770      	bx	lr
   2d1c2:	bf00      	nop
   2d1c4:	4000f000 	.word	0x4000f000
   2d1c8:	40001000 	.word	0x40001000
   2d1cc:	01010000 	.word	0x01010000
   2d1d0:	20002eb8 	.word	0x20002eb8
   2d1d4:	20002da8 	.word	0x20002da8

0002d1d8 <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   2d1d8:	4a0e      	ldr	r2, [pc, #56]	; (2d214 <radio_ccm_is_done+0x3c>)
   2d1da:	2302      	movs	r3, #2
   2d1dc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   2d1e0:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   2d1e4:	b933      	cbnz	r3, 2d1f4 <radio_ccm_is_done+0x1c>
		__WFE();
   2d1e6:	bf20      	wfe
		__SEV();
   2d1e8:	bf40      	sev
		__WFE();
   2d1ea:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   2d1ec:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   2d1f0:	2b00      	cmp	r3, #0
   2d1f2:	d0f8      	beq.n	2d1e6 <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   2d1f4:	4b07      	ldr	r3, [pc, #28]	; (2d214 <radio_ccm_is_done+0x3c>)
   2d1f6:	4a08      	ldr	r2, [pc, #32]	; (2d218 <radio_ccm_is_done+0x40>)
   2d1f8:	2002      	movs	r0, #2
   2d1fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2d1fe:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   2d202:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   2d206:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   2d20a:	fab0 f080 	clz	r0, r0
   2d20e:	0940      	lsrs	r0, r0, #5
   2d210:	4770      	bx	lr
   2d212:	bf00      	nop
   2d214:	4000f000 	.word	0x4000f000
   2d218:	e000e100 	.word	0xe000e100

0002d21c <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   2d21c:	4b03      	ldr	r3, [pc, #12]	; (2d22c <radio_ccm_mic_is_valid+0x10>)
   2d21e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   2d222:	3800      	subs	r0, #0
   2d224:	bf18      	it	ne
   2d226:	2001      	movne	r0, #1
   2d228:	4770      	bx	lr
   2d22a:	bf00      	nop
   2d22c:	4000f000 	.word	0x4000f000

0002d230 <radio_ar_configure>:

#if defined(CONFIG_BT_CTLR_PRIVACY)
static uint8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(uint32_t nirk, void *irk, uint8_t flags)
{
   2d230:	b4f0      	push	{r4, r5, r6, r7}
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   2d232:	4a15      	ldr	r2, [pc, #84]	; (2d288 <radio_ar_configure+0x58>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   2d234:	4b15      	ldr	r3, [pc, #84]	; (2d28c <radio_ar_configure+0x5c>)
		addrptr = NRF_RADIO->PACKETPTR - 1;
   2d236:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   2d23a:	4e15      	ldr	r6, [pc, #84]	; (2d290 <radio_ar_configure+0x60>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   2d23c:	2703      	movs	r7, #3
   2d23e:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500

	NRF_AAR->EVENTS_END = 0;
   2d242:	2400      	movs	r4, #0
	NRF_AAR->NIRK = nirk;
   2d244:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		addrptr = NRF_RADIO->PACKETPTR - 1;
   2d248:	3d01      	subs	r5, #1
	NRF_AAR->IRKPTR = (uint32_t)irk;
   2d24a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	NRF_RADIO->BCC = n;
   2d24e:	2140      	movs	r1, #64	; 0x40
	NRF_AAR->ADDRPTR = addrptr;
   2d250:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   2d254:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   2d258:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   2d25c:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   2d260:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	NRF_RADIO->BCC = n;
   2d264:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   2d268:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   2d26c:	4909      	ldr	r1, [pc, #36]	; (2d294 <radio_ar_configure+0x64>)
   2d26e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2d272:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   2d276:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   2d27a:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
   2d27e:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   2d282:	bcf0      	pop	{r4, r5, r6, r7}
   2d284:	4770      	bx	lr
   2d286:	bf00      	nop
   2d288:	40001000 	.word	0x40001000
   2d28c:	4000f000 	.word	0x4000f000
   2d290:	20002da4 	.word	0x20002da4
   2d294:	4001f000 	.word	0x4001f000

0002d298 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   2d298:	4b01      	ldr	r3, [pc, #4]	; (2d2a0 <radio_ar_match_get+0x8>)
   2d29a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   2d29e:	4770      	bx	lr
   2d2a0:	4000f000 	.word	0x4000f000

0002d2a4 <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   2d2a4:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   2d2a6:	4807      	ldr	r0, [pc, #28]	; (2d2c4 <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   2d2a8:	4c07      	ldr	r4, [pc, #28]	; (2d2c8 <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   2d2aa:	4a08      	ldr	r2, [pc, #32]	; (2d2cc <radio_ar_status_reset+0x28>)
   2d2ac:	2300      	movs	r3, #0
   2d2ae:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   2d2b2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   2d2b6:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
   2d2ba:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   2d2be:	bc10      	pop	{r4}
   2d2c0:	4770      	bx	lr
   2d2c2:	bf00      	nop
   2d2c4:	4000f000 	.word	0x4000f000
   2d2c8:	40001000 	.word	0x40001000
   2d2cc:	4001f000 	.word	0x4001f000

0002d2d0 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   2d2d0:	4b12      	ldr	r3, [pc, #72]	; (2d31c <radio_ar_has_match+0x4c>)
   2d2d2:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	if (!radio_bc_has_match()) {
   2d2d6:	b1fb      	cbz	r3, 2d318 <radio_ar_has_match+0x48>
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)aar_event);
}

NRF_STATIC_INLINE void nrf_aar_int_enable(NRF_AAR_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   2d2d8:	4a11      	ldr	r2, [pc, #68]	; (2d320 <radio_ar_has_match+0x50>)
   2d2da:	2301      	movs	r3, #1
   2d2dc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
		return 0U;
	}

	nrf_aar_int_enable(NRF_AAR, AAR_INTENSET_END_Msk);

	while (NRF_AAR->EVENTS_END == 0U) {
   2d2e0:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   2d2e4:	b933      	cbnz	r3, 2d2f4 <radio_ar_has_match+0x24>
		__WFE();
   2d2e6:	bf20      	wfe
		__SEV();
   2d2e8:	bf40      	sev
		__WFE();
   2d2ea:	bf20      	wfe
	while (NRF_AAR->EVENTS_END == 0U) {
   2d2ec:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   2d2f0:	2b00      	cmp	r3, #0
   2d2f2:	d0f8      	beq.n	2d2e6 <radio_ar_has_match+0x16>
    return p_reg->INTENSET & mask;
}

NRF_STATIC_INLINE void nrf_aar_int_disable(NRF_AAR_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   2d2f4:	4b0a      	ldr	r3, [pc, #40]	; (2d320 <radio_ar_has_match+0x50>)
   2d2f6:	4a0b      	ldr	r2, [pc, #44]	; (2d324 <radio_ar_has_match+0x54>)
   2d2f8:	2001      	movs	r0, #1
   2d2fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2d2fe:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   2d302:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180

	nrf_aar_int_disable(NRF_AAR, AAR_INTENCLR_END_Msk);

	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_AAR));

	if (NRF_AAR->EVENTS_RESOLVED && !NRF_AAR->EVENTS_NOTRESOLVED) {
   2d306:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   2d30a:	b12a      	cbz	r2, 2d318 <radio_ar_has_match+0x48>
   2d30c:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
   2d310:	fab0 f080 	clz	r0, r0
   2d314:	0940      	lsrs	r0, r0, #5
		return 1U;
	}

	return 0U;
}
   2d316:	4770      	bx	lr
		return 0U;
   2d318:	2000      	movs	r0, #0
   2d31a:	4770      	bx	lr
   2d31c:	40001000 	.word	0x40001000
   2d320:	4000f000 	.word	0x4000f000
   2d324:	e000e100 	.word	0xe000e100

0002d328 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	switch (callee_id) {
   2d328:	3901      	subs	r1, #1
   2d32a:	2901      	cmp	r1, #1
   2d32c:	d805      	bhi.n	2d33a <mayfly_enable_cb+0x12>
	case MAYFLY_CALL_ID_WORKER:
		if (enable) {
			irq_enable(HAL_SWI_WORKER_IRQ);
   2d32e:	200b      	movs	r0, #11
		if (enable) {
   2d330:	b10a      	cbz	r2, 2d336 <mayfly_enable_cb+0xe>
			irq_enable(HAL_SWI_WORKER_IRQ);
   2d332:	f7e7 badd 	b.w	148f0 <arch_irq_enable>
		} else {
			irq_disable(HAL_SWI_WORKER_IRQ);
   2d336:	f7e7 bae9 	b.w	1490c <arch_irq_disable>
{
   2d33a:	b508      	push	{r3, lr}
			irq_disable(HAL_SWI_JOB_IRQ);
		}
		break;

	default:
		LL_ASSERT(0);
   2d33c:	4a06      	ldr	r2, [pc, #24]	; (2d358 <mayfly_enable_cb+0x30>)
   2d33e:	4907      	ldr	r1, [pc, #28]	; (2d35c <mayfly_enable_cb+0x34>)
   2d340:	4807      	ldr	r0, [pc, #28]	; (2d360 <mayfly_enable_cb+0x38>)
   2d342:	232d      	movs	r3, #45	; 0x2d
   2d344:	f006 f868 	bl	33418 <assert_print>
   2d348:	4040      	eors	r0, r0
   2d34a:	f380 8811 	msr	BASEPRI, r0
   2d34e:	f04f 0003 	mov.w	r0, #3
   2d352:	df02      	svc	2
		break;
	}
}
   2d354:	bd08      	pop	{r3, pc}
   2d356:	bf00      	nop
   2d358:	0003b16c 	.word	0x0003b16c
   2d35c:	0003a004 	.word	0x0003a004
   2d360:	00039f74 	.word	0x00039f74

0002d364 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   2d364:	b129      	cbz	r1, 2d372 <mayfly_is_enabled+0xe>
   2d366:	3901      	subs	r1, #1
   2d368:	2901      	cmp	r1, #1
   2d36a:	d805      	bhi.n	2d378 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   2d36c:	200b      	movs	r0, #11
   2d36e:	f7e7 bae1 	b.w	14934 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   2d372:	2018      	movs	r0, #24
   2d374:	f7e7 bade 	b.w	14934 <arch_irq_is_enabled>
{
   2d378:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   2d37a:	4a07      	ldr	r2, [pc, #28]	; (2d398 <mayfly_is_enabled+0x34>)
   2d37c:	4907      	ldr	r1, [pc, #28]	; (2d39c <mayfly_is_enabled+0x38>)
   2d37e:	4808      	ldr	r0, [pc, #32]	; (2d3a0 <mayfly_is_enabled+0x3c>)
   2d380:	2341      	movs	r3, #65	; 0x41
   2d382:	f006 f849 	bl	33418 <assert_print>
   2d386:	4040      	eors	r0, r0
   2d388:	f380 8811 	msr	BASEPRI, r0
   2d38c:	f04f 0003 	mov.w	r0, #3
   2d390:	df02      	svc	2
		break;
	}

	return 0;
}
   2d392:	2000      	movs	r0, #0
   2d394:	bd08      	pop	{r3, pc}
   2d396:	bf00      	nop
   2d398:	0003b16c 	.word	0x0003b16c
   2d39c:	0003a004 	.word	0x0003a004
   2d3a0:	00039f74 	.word	0x00039f74

0002d3a4 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   2d3a4:	4288      	cmp	r0, r1
   2d3a6:	d00f      	beq.n	2d3c8 <mayfly_prio_is_equal+0x24>
	return (caller_id == callee_id) ||
   2d3a8:	2801      	cmp	r0, #1
   2d3aa:	d007      	beq.n	2d3bc <mayfly_prio_is_equal+0x18>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   2d3ac:	2802      	cmp	r0, #2
   2d3ae:	d10d      	bne.n	2d3cc <mayfly_prio_is_equal+0x28>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   2d3b0:	f1a1 0001 	sub.w	r0, r1, #1
   2d3b4:	fab0 f080 	clz	r0, r0
   2d3b8:	0940      	lsrs	r0, r0, #5
   2d3ba:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   2d3bc:	f1a1 0002 	sub.w	r0, r1, #2
   2d3c0:	fab0 f080 	clz	r0, r0
   2d3c4:	0940      	lsrs	r0, r0, #5
   2d3c6:	4770      	bx	lr
   2d3c8:	2001      	movs	r0, #1
   2d3ca:	4770      	bx	lr
   2d3cc:	2000      	movs	r0, #0
#endif
	       0;
}
   2d3ce:	4770      	bx	lr

0002d3d0 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   2d3d0:	2901      	cmp	r1, #1
{
   2d3d2:	b508      	push	{r3, lr}
	switch (callee_id) {
   2d3d4:	d00f      	beq.n	2d3f6 <mayfly_pend+0x26>
   2d3d6:	2902      	cmp	r1, #2
   2d3d8:	d00d      	beq.n	2d3f6 <mayfly_pend+0x26>
   2d3da:	b191      	cbz	r1, 2d402 <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   2d3dc:	4a0c      	ldr	r2, [pc, #48]	; (2d410 <mayfly_pend+0x40>)
   2d3de:	490d      	ldr	r1, [pc, #52]	; (2d414 <mayfly_pend+0x44>)
   2d3e0:	480d      	ldr	r0, [pc, #52]	; (2d418 <mayfly_pend+0x48>)
   2d3e2:	2372      	movs	r3, #114	; 0x72
   2d3e4:	f006 f818 	bl	33418 <assert_print>
   2d3e8:	4040      	eors	r0, r0
   2d3ea:	f380 8811 	msr	BASEPRI, r0
   2d3ee:	f04f 0003 	mov.w	r0, #3
   2d3f2:	df02      	svc	2
		break;
	}
}
   2d3f4:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2d3f6:	4b09      	ldr	r3, [pc, #36]	; (2d41c <mayfly_pend+0x4c>)
   2d3f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2d3fc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   2d400:	bd08      	pop	{r3, pc}
   2d402:	4b06      	ldr	r3, [pc, #24]	; (2d41c <mayfly_pend+0x4c>)
   2d404:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   2d408:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   2d40c:	bd08      	pop	{r3, pc}
   2d40e:	bf00      	nop
   2d410:	0003b16c 	.word	0x0003b16c
   2d414:	0003a004 	.word	0x0003a004
   2d418:	00039f74 	.word	0x00039f74
   2d41c:	e000e100 	.word	0xe000e100

0002d420 <mayfly_is_running>:

uint32_t mayfly_is_running(void)
{
   2d420:	b508      	push	{r3, lr}
	return k_is_in_isr();
   2d422:	f00b f974 	bl	3870e <k_is_in_isr>
}
   2d426:	bd08      	pop	{r3, pc}

0002d428 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   2d428:	2803      	cmp	r0, #3
{
   2d42a:	b510      	push	{r4, lr}
   2d42c:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   2d42e:	d804      	bhi.n	2d43a <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   2d430:	4b11      	ldr	r3, [pc, #68]	; (2d478 <hal_ticker_instance0_caller_id_get+0x50>)
   2d432:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   2d434:	b18c      	cbz	r4, 2d45a <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   2d436:	4620      	mov	r0, r4
   2d438:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   2d43a:	4a10      	ldr	r2, [pc, #64]	; (2d47c <hal_ticker_instance0_caller_id_get+0x54>)
   2d43c:	4910      	ldr	r1, [pc, #64]	; (2d480 <hal_ticker_instance0_caller_id_get+0x58>)
   2d43e:	4811      	ldr	r0, [pc, #68]	; (2d484 <hal_ticker_instance0_caller_id_get+0x5c>)
   2d440:	2328      	movs	r3, #40	; 0x28
   2d442:	f005 ffe9 	bl	33418 <assert_print>
   2d446:	4040      	eors	r0, r0
   2d448:	f380 8811 	msr	BASEPRI, r0
   2d44c:	f04f 0003 	mov.w	r0, #3
   2d450:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   2d452:	4b09      	ldr	r3, [pc, #36]	; (2d478 <hal_ticker_instance0_caller_id_get+0x50>)
   2d454:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   2d456:	2c00      	cmp	r4, #0
   2d458:	d1ed      	bne.n	2d436 <hal_ticker_instance0_caller_id_get+0xe>
   2d45a:	4a08      	ldr	r2, [pc, #32]	; (2d47c <hal_ticker_instance0_caller_id_get+0x54>)
   2d45c:	490a      	ldr	r1, [pc, #40]	; (2d488 <hal_ticker_instance0_caller_id_get+0x60>)
   2d45e:	4809      	ldr	r0, [pc, #36]	; (2d484 <hal_ticker_instance0_caller_id_get+0x5c>)
   2d460:	232b      	movs	r3, #43	; 0x2b
   2d462:	f005 ffd9 	bl	33418 <assert_print>
   2d466:	4040      	eors	r0, r0
   2d468:	f380 8811 	msr	BASEPRI, r0
   2d46c:	f04f 0003 	mov.w	r0, #3
   2d470:	df02      	svc	2
}
   2d472:	4620      	mov	r0, r4
   2d474:	bd10      	pop	{r4, pc}
   2d476:	bf00      	nop
   2d478:	0003b23c 	.word	0x0003b23c
   2d47c:	0003b1bc 	.word	0x0003b1bc
   2d480:	0003b20c 	.word	0x0003b20c
   2d484:	00039f74 	.word	0x00039f74
   2d488:	0003b22c 	.word	0x0003b22c

0002d48c <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   2d48c:	3801      	subs	r0, #1
{
   2d48e:	b510      	push	{r4, lr}
   2d490:	461c      	mov	r4, r3
	switch (caller_id) {
   2d492:	2804      	cmp	r0, #4
   2d494:	f200 8082 	bhi.w	2d59c <hal_ticker_instance0_sched+0x110>
   2d498:	e8df f000 	tbb	[pc, r0]
   2d49c:	3f302112 	.word	0x3f302112
   2d4a0:	03          	.byte	0x03
   2d4a1:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   2d4a2:	2904      	cmp	r1, #4
   2d4a4:	d04a      	beq.n	2d53c <hal_ticker_instance0_sched+0xb0>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   2d4a6:	4a44      	ldr	r2, [pc, #272]	; (2d5b8 <hal_ticker_instance0_sched+0x12c>)
   2d4a8:	4944      	ldr	r1, [pc, #272]	; (2d5bc <hal_ticker_instance0_sched+0x130>)
   2d4aa:	4845      	ldr	r0, [pc, #276]	; (2d5c0 <hal_ticker_instance0_sched+0x134>)
   2d4ac:	23b7      	movs	r3, #183	; 0xb7
   2d4ae:	f005 ffb3 	bl	33418 <assert_print>
   2d4b2:	4040      	eors	r0, r0
   2d4b4:	f380 8811 	msr	BASEPRI, r0
   2d4b8:	f04f 0003 	mov.w	r0, #3
   2d4bc:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   2d4be:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   2d4c0:	2904      	cmp	r1, #4
   2d4c2:	d043      	beq.n	2d54c <hal_ticker_instance0_sched+0xc0>
			LL_ASSERT(0);
   2d4c4:	4a3c      	ldr	r2, [pc, #240]	; (2d5b8 <hal_ticker_instance0_sched+0x12c>)
   2d4c6:	493d      	ldr	r1, [pc, #244]	; (2d5bc <hal_ticker_instance0_sched+0x130>)
   2d4c8:	483d      	ldr	r0, [pc, #244]	; (2d5c0 <hal_ticker_instance0_sched+0x134>)
   2d4ca:	234b      	movs	r3, #75	; 0x4b
   2d4cc:	f005 ffa4 	bl	33418 <assert_print>
   2d4d0:	4040      	eors	r0, r0
   2d4d2:	f380 8811 	msr	BASEPRI, r0
   2d4d6:	f04f 0003 	mov.w	r0, #3
   2d4da:	df02      	svc	2
}
   2d4dc:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   2d4de:	2903      	cmp	r1, #3
   2d4e0:	d03c      	beq.n	2d55c <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   2d4e2:	4a35      	ldr	r2, [pc, #212]	; (2d5b8 <hal_ticker_instance0_sched+0x12c>)
   2d4e4:	4935      	ldr	r1, [pc, #212]	; (2d5bc <hal_ticker_instance0_sched+0x130>)
   2d4e6:	4836      	ldr	r0, [pc, #216]	; (2d5c0 <hal_ticker_instance0_sched+0x134>)
   2d4e8:	2362      	movs	r3, #98	; 0x62
   2d4ea:	f005 ff95 	bl	33418 <assert_print>
   2d4ee:	4040      	eors	r0, r0
   2d4f0:	f380 8811 	msr	BASEPRI, r0
   2d4f4:	f04f 0003 	mov.w	r0, #3
   2d4f8:	df02      	svc	2
}
   2d4fa:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   2d4fc:	2904      	cmp	r1, #4
   2d4fe:	d035      	beq.n	2d56c <hal_ticker_instance0_sched+0xe0>
			LL_ASSERT(0);
   2d500:	4a2d      	ldr	r2, [pc, #180]	; (2d5b8 <hal_ticker_instance0_sched+0x12c>)
   2d502:	492e      	ldr	r1, [pc, #184]	; (2d5bc <hal_ticker_instance0_sched+0x130>)
   2d504:	482e      	ldr	r0, [pc, #184]	; (2d5c0 <hal_ticker_instance0_sched+0x134>)
   2d506:	2379      	movs	r3, #121	; 0x79
   2d508:	f005 ff86 	bl	33418 <assert_print>
   2d50c:	4040      	eors	r0, r0
   2d50e:	f380 8811 	msr	BASEPRI, r0
   2d512:	f04f 0003 	mov.w	r0, #3
   2d516:	df02      	svc	2
}
   2d518:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   2d51a:	2903      	cmp	r1, #3
   2d51c:	d036      	beq.n	2d58c <hal_ticker_instance0_sched+0x100>
   2d51e:	2904      	cmp	r1, #4
   2d520:	d02c      	beq.n	2d57c <hal_ticker_instance0_sched+0xf0>
			LL_ASSERT(0);
   2d522:	4a25      	ldr	r2, [pc, #148]	; (2d5b8 <hal_ticker_instance0_sched+0x12c>)
   2d524:	4925      	ldr	r1, [pc, #148]	; (2d5bc <hal_ticker_instance0_sched+0x130>)
   2d526:	4826      	ldr	r0, [pc, #152]	; (2d5c0 <hal_ticker_instance0_sched+0x134>)
   2d528:	239f      	movs	r3, #159	; 0x9f
   2d52a:	f005 ff75 	bl	33418 <assert_print>
   2d52e:	4040      	eors	r0, r0
   2d530:	f380 8811 	msr	BASEPRI, r0
   2d534:	f04f 0003 	mov.w	r0, #3
   2d538:	df02      	svc	2
}
   2d53a:	bd10      	pop	{r4, pc}
			m.param = instance;
   2d53c:	4b21      	ldr	r3, [pc, #132]	; (2d5c4 <hal_ticker_instance0_sched+0x138>)
   2d53e:	609c      	str	r4, [r3, #8]
}
   2d540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   2d544:	2102      	movs	r1, #2
   2d546:	2003      	movs	r0, #3
   2d548:	f7f1 bff4 	b.w	1f534 <mayfly_enqueue>
			m.param = instance;
   2d54c:	4b1e      	ldr	r3, [pc, #120]	; (2d5c8 <hal_ticker_instance0_sched+0x13c>)
   2d54e:	609c      	str	r4, [r3, #8]
}
   2d550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   2d554:	2102      	movs	r1, #2
   2d556:	2000      	movs	r0, #0
   2d558:	f7f1 bfec 	b.w	1f534 <mayfly_enqueue>
			m.param = instance;
   2d55c:	4b1b      	ldr	r3, [pc, #108]	; (2d5cc <hal_ticker_instance0_sched+0x140>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   2d55e:	2101      	movs	r1, #1
			m.param = instance;
   2d560:	609c      	str	r4, [r3, #8]
}
   2d562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   2d566:	4608      	mov	r0, r1
   2d568:	f7f1 bfe4 	b.w	1f534 <mayfly_enqueue>
			m.param = instance;
   2d56c:	4b18      	ldr	r3, [pc, #96]	; (2d5d0 <hal_ticker_instance0_sched+0x144>)
   2d56e:	609c      	str	r4, [r3, #8]
}
   2d570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   2d574:	2102      	movs	r1, #2
   2d576:	2001      	movs	r0, #1
   2d578:	f7f1 bfdc 	b.w	1f534 <mayfly_enqueue>
			m.param = instance;
   2d57c:	4b15      	ldr	r3, [pc, #84]	; (2d5d4 <hal_ticker_instance0_sched+0x148>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   2d57e:	2102      	movs	r1, #2
			m.param = instance;
   2d580:	609c      	str	r4, [r3, #8]
}
   2d582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   2d586:	4608      	mov	r0, r1
   2d588:	f7f1 bfd4 	b.w	1f534 <mayfly_enqueue>
			m.param = instance;
   2d58c:	4b12      	ldr	r3, [pc, #72]	; (2d5d8 <hal_ticker_instance0_sched+0x14c>)
   2d58e:	609c      	str	r4, [r3, #8]
}
   2d590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   2d594:	2101      	movs	r1, #1
   2d596:	2002      	movs	r0, #2
   2d598:	f7f1 bfcc 	b.w	1f534 <mayfly_enqueue>
		LL_ASSERT(0);
   2d59c:	4a06      	ldr	r2, [pc, #24]	; (2d5b8 <hal_ticker_instance0_sched+0x12c>)
   2d59e:	4907      	ldr	r1, [pc, #28]	; (2d5bc <hal_ticker_instance0_sched+0x130>)
   2d5a0:	4807      	ldr	r0, [pc, #28]	; (2d5c0 <hal_ticker_instance0_sched+0x134>)
   2d5a2:	23bd      	movs	r3, #189	; 0xbd
   2d5a4:	f005 ff38 	bl	33418 <assert_print>
   2d5a8:	4040      	eors	r0, r0
   2d5aa:	f380 8811 	msr	BASEPRI, r0
   2d5ae:	f04f 0003 	mov.w	r0, #3
   2d5b2:	df02      	svc	2
}
   2d5b4:	bd10      	pop	{r4, pc}
   2d5b6:	bf00      	nop
   2d5b8:	0003b1bc 	.word	0x0003b1bc
   2d5bc:	0003a004 	.word	0x0003a004
   2d5c0:	00039f74 	.word	0x00039f74
   2d5c4:	2000076c 	.word	0x2000076c
   2d5c8:	200007bc 	.word	0x200007bc
   2d5cc:	200007ac 	.word	0x200007ac
   2d5d0:	2000079c 	.word	0x2000079c
   2d5d4:	2000077c 	.word	0x2000077c
   2d5d8:	2000078c 	.word	0x2000078c

0002d5dc <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   2d5dc:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   2d5de:	2000      	movs	r0, #0
   2d5e0:	f7ff b9d8 	b.w	2c994 <cntr_cmp_set>

0002d5e4 <hci_vendor_read_static_addr>:

#include <soc.h>

uint8_t hci_vendor_read_static_addr(struct bt_hci_vs_static_addr addrs[],
				 uint8_t size)
{
   2d5e4:	b508      	push	{r3, lr}
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   2d5e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
   2d5ea:	4684      	mov	ip, r0
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   2d5ec:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   2d5f0:	3201      	adds	r2, #1
   2d5f2:	d03e      	beq.n	2d672 <hci_vendor_read_static_addr+0x8e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   2d5f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2d5f8:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   2d5fc:	f010 0001 	ands.w	r0, r0, #1
   2d600:	d100      	bne.n	2d604 <hci_vendor_read_static_addr+0x20>

		return 1;
	}

	return 0;
}
   2d602:	bd08      	pop	{r3, pc}
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   2d604:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
   2d608:	f8cc 3000 	str.w	r3, [ip]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   2d60c:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
   2d610:	f88c 3004 	strb.w	r3, [ip, #4]
	dst[1] = val >> 8;
   2d614:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   2d618:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2d61c:	f88c 3005 	strb.w	r3, [ip, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   2d620:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   2d624:	3301      	adds	r3, #1
   2d626:	d01c      	beq.n	2d662 <hci_vendor_read_static_addr+0x7e>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   2d628:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   2d62c:	3301      	adds	r3, #1
   2d62e:	d018      	beq.n	2d662 <hci_vendor_read_static_addr+0x7e>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   2d630:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   2d634:	3301      	adds	r3, #1
   2d636:	d014      	beq.n	2d662 <hci_vendor_read_static_addr+0x7e>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   2d638:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   2d63c:	3301      	adds	r3, #1
   2d63e:	d010      	beq.n	2d662 <hci_vendor_read_static_addr+0x7e>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   2d640:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   2d644:	f8cc 3006 	str.w	r3, [ip, #6]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   2d648:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   2d64c:	f8cc 300a 	str.w	r3, [ip, #10]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   2d650:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   2d654:	f8cc 300e 	str.w	r3, [ip, #14]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   2d658:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   2d65c:	f8cc 3012 	str.w	r3, [ip, #18]
}
   2d660:	e005      	b.n	2d66e <hci_vendor_read_static_addr+0x8a>
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   2d662:	2210      	movs	r2, #16
   2d664:	2100      	movs	r1, #0
   2d666:	f10c 0006 	add.w	r0, ip, #6
   2d66a:	f007 ff6f 	bl	3554c <memset>
		return 1;
   2d66e:	2001      	movs	r0, #1
}
   2d670:	bd08      	pop	{r3, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   2d672:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   2d676:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2d67a:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   2d67c:	4293      	cmp	r3, r2
   2d67e:	d1b9      	bne.n	2d5f4 <hci_vendor_read_static_addr+0x10>
	return 0;
   2d680:	2000      	movs	r0, #0
}
   2d682:	bd08      	pop	{r3, pc}

0002d684 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   2d684:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   2d686:	2210      	movs	r2, #16
{
   2d688:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   2d68a:	2100      	movs	r1, #0
   2d68c:	f007 ff5e 	bl	3554c <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   2d690:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2d694:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   2d698:	3201      	adds	r2, #1
   2d69a:	d018      	beq.n	2d6ce <hci_vendor_read_key_hierarchy_roots+0x4a>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   2d69c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   2d6a0:	3201      	adds	r2, #1
   2d6a2:	d014      	beq.n	2d6ce <hci_vendor_read_key_hierarchy_roots+0x4a>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   2d6a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   2d6a8:	3201      	adds	r2, #1
   2d6aa:	d010      	beq.n	2d6ce <hci_vendor_read_key_hierarchy_roots+0x4a>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   2d6ac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   2d6b0:	3201      	adds	r2, #1
   2d6b2:	d00c      	beq.n	2d6ce <hci_vendor_read_key_hierarchy_roots+0x4a>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   2d6b4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   2d6b8:	6022      	str	r2, [r4, #0]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   2d6ba:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   2d6be:	6062      	str	r2, [r4, #4]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   2d6c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   2d6c4:	60a2      	str	r2, [r4, #8]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   2d6c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   2d6ca:	60e3      	str	r3, [r4, #12]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   2d6cc:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   2d6ce:	4620      	mov	r0, r4
   2d6d0:	2210      	movs	r2, #16
}
   2d6d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   2d6d6:	2100      	movs	r1, #0
   2d6d8:	f007 bf38 	b.w	3554c <memset>

0002d6dc <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   2d6dc:	4b02      	ldr	r3, [pc, #8]	; (2d6e8 <net_buf_pool_get+0xc>)
   2d6de:	222c      	movs	r2, #44	; 0x2c
   2d6e0:	fb02 3000 	mla	r0, r2, r0, r3
   2d6e4:	4770      	bx	lr
   2d6e6:	bf00      	nop
   2d6e8:	20000b28 	.word	0x20000b28

0002d6ec <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2d6ec:	7a82      	ldrb	r2, [r0, #10]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   2d6ee:	4b06      	ldr	r3, [pc, #24]	; (2d708 <net_buf_id+0x1c>)
   2d6f0:	212c      	movs	r1, #44	; 0x2c
   2d6f2:	fb01 3302 	mla	r3, r1, r2, r3
   2d6f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2d6f8:	7f1b      	ldrb	r3, [r3, #28]
   2d6fa:	331b      	adds	r3, #27
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   2d6fc:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2d6fe:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   2d702:	fbb0 f0f3 	udiv	r0, r0, r3
   2d706:	4770      	bx	lr
   2d708:	20000b28 	.word	0x20000b28

0002d70c <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   2d70c:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2d70e:	4b0a      	ldr	r3, [pc, #40]	; (2d738 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2d710:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2d712:	242c      	movs	r4, #44	; 0x2c
   2d714:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   2d718:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2d71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2d71c:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   2d71e:	681a      	ldr	r2, [r3, #0]
   2d720:	4294      	cmp	r4, r2
   2d722:	bf94      	ite	ls
   2d724:	600c      	strls	r4, [r1, #0]
   2d726:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   2d728:	e9d3 5400 	ldrd	r5, r4, [r3]
   2d72c:	f7ff ffde 	bl	2d6ec <net_buf_id>
}
   2d730:	fb05 4000 	mla	r0, r5, r0, r4
   2d734:	bd38      	pop	{r3, r4, r5, pc}
   2d736:	bf00      	nop
   2d738:	20000b28 	.word	0x20000b28

0002d73c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   2d73c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d740:	4605      	mov	r5, r0
   2d742:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   2d744:	4610      	mov	r0, r2
   2d746:	4619      	mov	r1, r3
{
   2d748:	4691      	mov	r9, r2
   2d74a:	4698      	mov	r8, r3
   2d74c:	4617      	mov	r7, r2
   2d74e:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   2d750:	f00b fb31 	bl	38db6 <sys_clock_timeout_end_calc>
   2d754:	4682      	mov	sl, r0
   2d756:	468b      	mov	fp, r1
	__asm__ volatile(
   2d758:	f04f 0320 	mov.w	r3, #32
   2d75c:	f3ef 8111 	mrs	r1, BASEPRI
   2d760:	f383 8812 	msr	BASEPRI_MAX, r3
   2d764:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   2d768:	8b6b      	ldrh	r3, [r5, #26]
   2d76a:	2b00      	cmp	r3, #0
   2d76c:	d058      	beq.n	2d820 <net_buf_alloc_len+0xe4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   2d76e:	8b2a      	ldrh	r2, [r5, #24]
   2d770:	429a      	cmp	r2, r3
   2d772:	d93c      	bls.n	2d7ee <net_buf_alloc_len+0xb2>
   2d774:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   2d776:	2200      	movs	r2, #0
   2d778:	2300      	movs	r3, #0
   2d77a:	4628      	mov	r0, r5
   2d77c:	f004 f976 	bl	31a6c <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   2d780:	9900      	ldr	r1, [sp, #0]
   2d782:	4604      	mov	r4, r0
   2d784:	2800      	cmp	r0, #0
   2d786:	d032      	beq.n	2d7ee <net_buf_alloc_len+0xb2>
	__asm__ volatile(
   2d788:	f381 8811 	msr	BASEPRI, r1
   2d78c:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   2d790:	9b01      	ldr	r3, [sp, #4]
   2d792:	2b00      	cmp	r3, #0
   2d794:	d055      	beq.n	2d842 <net_buf_alloc_len+0x106>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   2d796:	ea58 0309 	orrs.w	r3, r8, r9
   2d79a:	d00f      	beq.n	2d7bc <net_buf_alloc_len+0x80>
   2d79c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   2d7a0:	bf08      	it	eq
   2d7a2:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   2d7a6:	d009      	beq.n	2d7bc <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   2d7a8:	f005 f86e 	bl	32888 <sys_clock_tick_get>
   2d7ac:	ebba 0700 	subs.w	r7, sl, r0
   2d7b0:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
   2d7b4:	2e00      	cmp	r6, #0
   2d7b6:	bfbc      	itt	lt
   2d7b8:	2700      	movlt	r7, #0
   2d7ba:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2d7bc:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   2d7be:	4d26      	ldr	r5, [pc, #152]	; (2d858 <net_buf_alloc_len+0x11c>)
   2d7c0:	f04f 082c 	mov.w	r8, #44	; 0x2c
   2d7c4:	fb08 5303 	mla	r3, r8, r3, r5
   2d7c8:	463a      	mov	r2, r7
   2d7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2d7cc:	681b      	ldr	r3, [r3, #0]
   2d7ce:	a901      	add	r1, sp, #4
   2d7d0:	f8d3 9000 	ldr.w	r9, [r3]
   2d7d4:	4620      	mov	r0, r4
   2d7d6:	4633      	mov	r3, r6
   2d7d8:	47c8      	blx	r9
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   2d7da:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   2d7dc:	2800      	cmp	r0, #0
   2d7de:	d131      	bne.n	2d844 <net_buf_alloc_len+0x108>
	k_lifo_put(&pool->free, buf);
   2d7e0:	7aa0      	ldrb	r0, [r4, #10]
   2d7e2:	4621      	mov	r1, r4
   2d7e4:	fb00 5008 	mla	r0, r0, r8, r5
   2d7e8:	f00b f85d 	bl	388a6 <k_queue_prepend>
}
   2d7ec:	e024      	b.n	2d838 <net_buf_alloc_len+0xfc>
		uninit_count = pool->uninit_count--;
   2d7ee:	8b68      	ldrh	r0, [r5, #26]
   2d7f0:	1e43      	subs	r3, r0, #1
   2d7f2:	836b      	strh	r3, [r5, #26]
   2d7f4:	f381 8811 	msr	BASEPRI, r1
   2d7f8:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2d7fc:	7f2b      	ldrb	r3, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   2d7fe:	8b2a      	ldrh	r2, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   2d800:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2d802:	331b      	adds	r3, #27
   2d804:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   2d808:	1a12      	subs	r2, r2, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   2d80a:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   2d80e:	4b12      	ldr	r3, [pc, #72]	; (2d858 <net_buf_alloc_len+0x11c>)
   2d810:	4a12      	ldr	r2, [pc, #72]	; (2d85c <net_buf_alloc_len+0x120>)
   2d812:	1aeb      	subs	r3, r5, r3
   2d814:	109b      	asrs	r3, r3, #2
   2d816:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   2d818:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   2d81a:	7f2b      	ldrb	r3, [r5, #28]
   2d81c:	72e3      	strb	r3, [r4, #11]
		goto success;
   2d81e:	e7b7      	b.n	2d790 <net_buf_alloc_len+0x54>
   2d820:	f381 8811 	msr	BASEPRI, r1
   2d824:	f3bf 8f6f 	isb	sy
   2d828:	464a      	mov	r2, r9
   2d82a:	4643      	mov	r3, r8
   2d82c:	4628      	mov	r0, r5
   2d82e:	f004 f91d 	bl	31a6c <z_impl_k_queue_get>
	if (!buf) {
   2d832:	4604      	mov	r4, r0
   2d834:	2800      	cmp	r0, #0
   2d836:	d1ab      	bne.n	2d790 <net_buf_alloc_len+0x54>
		return NULL;
   2d838:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   2d83a:	4620      	mov	r0, r4
   2d83c:	b003      	add	sp, #12
   2d83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   2d842:	6163      	str	r3, [r4, #20]
	buf->frags = NULL;
   2d844:	2300      	movs	r3, #0
	buf->ref   = 1U;
   2d846:	2201      	movs	r2, #1
	buf->frags = NULL;
   2d848:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   2d84a:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   2d84c:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   2d84e:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   2d850:	6963      	ldr	r3, [r4, #20]
   2d852:	8262      	strh	r2, [r4, #18]
   2d854:	60e3      	str	r3, [r4, #12]
	return buf;
   2d856:	e7f0      	b.n	2d83a <net_buf_alloc_len+0xfe>
   2d858:	20000b28 	.word	0x20000b28
   2d85c:	ba2e8ba3 	.word	0xba2e8ba3

0002d860 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   2d860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d864:	4d16      	ldr	r5, [pc, #88]	; (2d8c0 <net_buf_unref+0x60>)
   2d866:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   2d868:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   2d86a:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   2d86c:	b90c      	cbnz	r4, 2d872 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   2d86e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   2d872:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   2d874:	f8d4 8004 	ldr.w	r8, [r4, #4]
		if (--buf->ref > 0) {
   2d878:	3b01      	subs	r3, #1
   2d87a:	b2db      	uxtb	r3, r3
   2d87c:	7223      	strb	r3, [r4, #8]
   2d87e:	2b00      	cmp	r3, #0
   2d880:	d1f5      	bne.n	2d86e <net_buf_unref+0xe>
		if (buf->__buf) {
   2d882:	6961      	ldr	r1, [r4, #20]
   2d884:	b159      	cbz	r1, 2d89e <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   2d886:	7a63      	ldrb	r3, [r4, #9]
   2d888:	07db      	lsls	r3, r3, #31
   2d88a:	d407      	bmi.n	2d89c <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2d88c:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   2d88e:	fb07 5303 	mla	r3, r7, r3, r5
   2d892:	4620      	mov	r0, r4
   2d894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2d896:	681b      	ldr	r3, [r3, #0]
   2d898:	689b      	ldr	r3, [r3, #8]
   2d89a:	4798      	blx	r3
			buf->__buf = NULL;
   2d89c:	6166      	str	r6, [r4, #20]
		pool = net_buf_pool_get(buf->pool_id);
   2d89e:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   2d8a0:	60e6      	str	r6, [r4, #12]
		if (pool->destroy) {
   2d8a2:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   2d8a6:	6066      	str	r6, [r4, #4]
		if (pool->destroy) {
   2d8a8:	6a1b      	ldr	r3, [r3, #32]
   2d8aa:	b11b      	cbz	r3, 2d8b4 <net_buf_unref+0x54>
			pool->destroy(buf);
   2d8ac:	4620      	mov	r0, r4
   2d8ae:	4798      	blx	r3
{
   2d8b0:	4644      	mov	r4, r8
   2d8b2:	e7db      	b.n	2d86c <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   2d8b4:	4621      	mov	r1, r4
   2d8b6:	fb00 5007 	mla	r0, r0, r7, r5
   2d8ba:	f00a fff4 	bl	388a6 <k_queue_prepend>
}
   2d8be:	e7f7      	b.n	2d8b0 <net_buf_unref+0x50>
   2d8c0:	20000b28 	.word	0x20000b28

0002d8c4 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   2d8c4:	b508      	push	{r3, lr}
   2d8c6:	4804      	ldr	r0, [pc, #16]	; (2d8d8 <xoshiro128_initialize+0x14>)
   2d8c8:	f00a fe58 	bl	3857c <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   2d8cc:	2800      	cmp	r0, #0
}
   2d8ce:	bf0c      	ite	eq
   2d8d0:	f06f 0012 	mvneq.w	r0, #18
   2d8d4:	2000      	movne	r0, #0
   2d8d6:	bd08      	pop	{r3, pc}
   2d8d8:	00039210 	.word	0x00039210

0002d8dc <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   2d8dc:	4b08      	ldr	r3, [pc, #32]	; (2d900 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   2d8de:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   2d8e0:	1ac3      	subs	r3, r0, r3
{
   2d8e2:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   2d8e4:	4907      	ldr	r1, [pc, #28]	; (2d904 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   2d8e6:	109b      	asrs	r3, r3, #2
{
   2d8e8:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   2d8ea:	4359      	muls	r1, r3
   2d8ec:	4806      	ldr	r0, [pc, #24]	; (2d908 <onoff_stop+0x2c>)
   2d8ee:	2240      	movs	r2, #64	; 0x40
   2d8f0:	f00a f91d 	bl	37b2e <stop>
	notify(mgr, res);
   2d8f4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   2d8f6:	4601      	mov	r1, r0
	notify(mgr, res);
   2d8f8:	4620      	mov	r0, r4
}
   2d8fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   2d8fe:	4718      	bx	r3
   2d900:	2000300c 	.word	0x2000300c
   2d904:	b6db6db7 	.word	0xb6db6db7
   2d908:	000391c8 	.word	0x000391c8

0002d90c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   2d90c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   2d90e:	4c0c      	ldr	r4, [pc, #48]	; (2d940 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   2d910:	4a0c      	ldr	r2, [pc, #48]	; (2d944 <onoff_start+0x38>)
   2d912:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   2d914:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   2d916:	9300      	str	r3, [sp, #0]
{
   2d918:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   2d91a:	460b      	mov	r3, r1
   2d91c:	490a      	ldr	r1, [pc, #40]	; (2d948 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   2d91e:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   2d920:	4361      	muls	r1, r4
{
   2d922:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   2d924:	4809      	ldr	r0, [pc, #36]	; (2d94c <onoff_start+0x40>)
   2d926:	f00a f92e 	bl	37b86 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   2d92a:	1e01      	subs	r1, r0, #0
   2d92c:	da05      	bge.n	2d93a <onoff_start+0x2e>
		notify(mgr, err);
   2d92e:	4630      	mov	r0, r6
   2d930:	462b      	mov	r3, r5
	}
}
   2d932:	b002      	add	sp, #8
   2d934:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   2d938:	4718      	bx	r3
}
   2d93a:	b002      	add	sp, #8
   2d93c:	bd70      	pop	{r4, r5, r6, pc}
   2d93e:	bf00      	nop
   2d940:	2000300c 	.word	0x2000300c
   2d944:	00037bf1 	.word	0x00037bf1
   2d948:	b6db6db7 	.word	0xb6db6db7
   2d94c:	000391c8 	.word	0x000391c8

0002d950 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2d950:	2200      	movs	r2, #0
{
   2d952:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2d954:	2101      	movs	r1, #1
{
   2d956:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2d958:	4610      	mov	r0, r2
   2d95a:	f7e6 fff9 	bl	14950 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   2d95e:	480f      	ldr	r0, [pc, #60]	; (2d99c <clk_init+0x4c>)
   2d960:	f002 fbf0 	bl	30144 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   2d964:	4b0e      	ldr	r3, [pc, #56]	; (2d9a0 <clk_init+0x50>)
   2d966:	4298      	cmp	r0, r3
   2d968:	d115      	bne.n	2d996 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   2d96a:	f00a fce0 	bl	3832e <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   2d96e:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   2d970:	490c      	ldr	r1, [pc, #48]	; (2d9a4 <clk_init+0x54>)
   2d972:	4630      	mov	r0, r6
   2d974:	f005 fc36 	bl	331e4 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   2d978:	2800      	cmp	r0, #0
   2d97a:	db0b      	blt.n	2d994 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   2d97c:	2501      	movs	r5, #1
   2d97e:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
   2d980:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   2d982:	4908      	ldr	r1, [pc, #32]	; (2d9a4 <clk_init+0x54>)
   2d984:	f104 001c 	add.w	r0, r4, #28
   2d988:	f005 fc2c 	bl	331e4 <onoff_manager_init>
		if (err < 0) {
   2d98c:	2800      	cmp	r0, #0
   2d98e:	db01      	blt.n	2d994 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   2d990:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   2d992:	2000      	movs	r0, #0
}
   2d994:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   2d996:	f06f 0004 	mvn.w	r0, #4
   2d99a:	e7fb      	b.n	2d994 <clk_init+0x44>
   2d99c:	0002d9dd 	.word	0x0002d9dd
   2d9a0:	0bad0000 	.word	0x0bad0000
   2d9a4:	0003b24c 	.word	0x0003b24c

0002d9a8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   2d9a8:	b570      	push	{r4, r5, r6, lr}
   2d9aa:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   2d9ac:	230c      	movs	r3, #12
   2d9ae:	4809      	ldr	r0, [pc, #36]	; (2d9d4 <clkstarted_handle.constprop.0+0x2c>)
   2d9b0:	434b      	muls	r3, r1
   2d9b2:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   2d9b4:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   2d9b8:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   2d9ba:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   2d9bc:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   2d9be:	4418      	add	r0, r3
   2d9c0:	f00a f8a2 	bl	37b08 <set_on_state>
	if (callback) {
   2d9c4:	b12d      	cbz	r5, 2d9d2 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   2d9c6:	4632      	mov	r2, r6
   2d9c8:	462b      	mov	r3, r5
   2d9ca:	4803      	ldr	r0, [pc, #12]	; (2d9d8 <clkstarted_handle.constprop.0+0x30>)
}
   2d9cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   2d9d0:	4718      	bx	r3
}
   2d9d2:	bd70      	pop	{r4, r5, r6, pc}
   2d9d4:	2000300c 	.word	0x2000300c
   2d9d8:	000391c8 	.word	0x000391c8

0002d9dc <clock_event_handler>:
	switch (event) {
   2d9dc:	b110      	cbz	r0, 2d9e4 <clock_event_handler+0x8>
   2d9de:	2801      	cmp	r0, #1
   2d9e0:	d004      	beq.n	2d9ec <clock_event_handler+0x10>
   2d9e2:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   2d9e4:	4b03      	ldr	r3, [pc, #12]	; (2d9f4 <clock_event_handler+0x18>)
   2d9e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2d9e8:	075b      	lsls	r3, r3, #29
   2d9ea:	d101      	bne.n	2d9f0 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   2d9ec:	f7ff bfdc 	b.w	2d9a8 <clkstarted_handle.constprop.0>
}
   2d9f0:	4770      	bx	lr
   2d9f2:	bf00      	nop
   2d9f4:	2000300c 	.word	0x2000300c

0002d9f8 <generic_hfclk_start>:
{
   2d9f8:	b508      	push	{r3, lr}
	__asm__ volatile(
   2d9fa:	f04f 0320 	mov.w	r3, #32
   2d9fe:	f3ef 8111 	mrs	r1, BASEPRI
   2da02:	f383 8812 	msr	BASEPRI_MAX, r3
   2da06:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   2da0a:	4a12      	ldr	r2, [pc, #72]	; (2da54 <generic_hfclk_start+0x5c>)
   2da0c:	6813      	ldr	r3, [r2, #0]
   2da0e:	f043 0002 	orr.w	r0, r3, #2
   2da12:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   2da14:	07da      	lsls	r2, r3, #31
   2da16:	d408      	bmi.n	2da2a <generic_hfclk_start+0x32>
	__asm__ volatile(
   2da18:	f381 8811 	msr	BASEPRI, r1
   2da1c:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   2da20:	2001      	movs	r0, #1
}
   2da22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2da26:	f00a bc8f 	b.w	38348 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   2da2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2da2e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   2da32:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   2da36:	07d3      	lsls	r3, r2, #31
   2da38:	d5ee      	bpl.n	2da18 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   2da3a:	4807      	ldr	r0, [pc, #28]	; (2da58 <generic_hfclk_start+0x60>)
   2da3c:	f00a f864 	bl	37b08 <set_on_state>
   2da40:	f381 8811 	msr	BASEPRI, r1
   2da44:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   2da48:	2000      	movs	r0, #0
}
   2da4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   2da4e:	f7ff bfab 	b.w	2d9a8 <clkstarted_handle.constprop.0>
   2da52:	bf00      	nop
   2da54:	2000305c 	.word	0x2000305c
   2da58:	2000304c 	.word	0x2000304c

0002da5c <api_blocking_start>:
{
   2da5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   2da5e:	2200      	movs	r2, #0
   2da60:	2301      	movs	r3, #1
   2da62:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2da66:	ab04      	add	r3, sp, #16
   2da68:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   2da6c:	4a09      	ldr	r2, [pc, #36]	; (2da94 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   2da6e:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   2da72:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   2da74:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   2da78:	f00a f8b3 	bl	37be2 <api_start>
	if (err < 0) {
   2da7c:	2800      	cmp	r0, #0
   2da7e:	db05      	blt.n	2da8c <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   2da80:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   2da84:	2300      	movs	r3, #0
   2da86:	4668      	mov	r0, sp
   2da88:	f004 f84a 	bl	31b20 <z_impl_k_sem_take>
}
   2da8c:	b007      	add	sp, #28
   2da8e:	f85d fb04 	ldr.w	pc, [sp], #4
   2da92:	bf00      	nop
   2da94:	00037c0f 	.word	0x00037c0f

0002da98 <generic_hfclk_stop>:
{
   2da98:	b510      	push	{r4, lr}
	__asm__ volatile(
   2da9a:	f04f 0320 	mov.w	r3, #32
   2da9e:	f3ef 8411 	mrs	r4, BASEPRI
   2daa2:	f383 8812 	msr	BASEPRI_MAX, r3
   2daa6:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   2daaa:	4a07      	ldr	r2, [pc, #28]	; (2dac8 <generic_hfclk_stop+0x30>)
   2daac:	6813      	ldr	r3, [r2, #0]
   2daae:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   2dab2:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   2dab4:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   2dab6:	d402      	bmi.n	2dabe <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   2dab8:	2001      	movs	r0, #1
   2daba:	f00a fc81 	bl	383c0 <nrfx_clock_stop>
	__asm__ volatile(
   2dabe:	f384 8811 	msr	BASEPRI, r4
   2dac2:	f3bf 8f6f 	isb	sy
}
   2dac6:	bd10      	pop	{r4, pc}
   2dac8:	2000305c 	.word	0x2000305c

0002dacc <z_nrf_clock_control_get_onoff>:
}
   2dacc:	4a02      	ldr	r2, [pc, #8]	; (2dad8 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   2dace:	b2c3      	uxtb	r3, r0
}
   2dad0:	201c      	movs	r0, #28
   2dad2:	fb03 2000 	mla	r0, r3, r0, r2
   2dad6:	4770      	bx	lr
   2dad8:	2000300c 	.word	0x2000300c

0002dadc <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2dadc:	4b09      	ldr	r3, [pc, #36]	; (2db04 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
   2dade:	f3bf 8f5b 	dmb	ish
   2dae2:	e853 2f00 	ldrex	r2, [r3]
   2dae6:	f042 0101 	orr.w	r1, r2, #1
   2daea:	e843 1000 	strex	r0, r1, [r3]
   2daee:	2800      	cmp	r0, #0
   2daf0:	d1f7      	bne.n	2dae2 <z_nrf_clock_bt_ctlr_hf_request+0x6>
   2daf2:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
   2daf6:	0793      	lsls	r3, r2, #30
   2daf8:	d402      	bmi.n	2db00 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   2dafa:	2001      	movs	r0, #1
   2dafc:	f00a bc24 	b.w	38348 <nrfx_clock_start>
}
   2db00:	4770      	bx	lr
   2db02:	bf00      	nop
   2db04:	2000305c 	.word	0x2000305c

0002db08 <z_nrf_clock_bt_ctlr_hf_release>:
{
   2db08:	b510      	push	{r4, lr}
	__asm__ volatile(
   2db0a:	f04f 0320 	mov.w	r3, #32
   2db0e:	f3ef 8411 	mrs	r4, BASEPRI
   2db12:	f383 8812 	msr	BASEPRI_MAX, r3
   2db16:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_BT;
   2db1a:	4a07      	ldr	r2, [pc, #28]	; (2db38 <z_nrf_clock_bt_ctlr_hf_release+0x30>)
   2db1c:	6813      	ldr	r3, [r2, #0]
   2db1e:	f023 0101 	bic.w	r1, r3, #1
	if (!(hfclk_users & HF_USER_GENERIC)) {
   2db22:	079b      	lsls	r3, r3, #30
	hfclk_users &= ~HF_USER_BT;
   2db24:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_GENERIC)) {
   2db26:	d402      	bmi.n	2db2e <z_nrf_clock_bt_ctlr_hf_release+0x26>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   2db28:	2001      	movs	r0, #1
   2db2a:	f00a fc49 	bl	383c0 <nrfx_clock_stop>
	__asm__ volatile(
   2db2e:	f384 8811 	msr	BASEPRI, r4
   2db32:	f3bf 8f6f 	isb	sy
}
   2db36:	bd10      	pop	{r4, pc}
   2db38:	2000305c 	.word	0x2000305c

0002db3c <z_nrf_clock_control_lf_on>:
{
   2db3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2db40:	4938      	ldr	r1, [pc, #224]	; (2dc24 <z_nrf_clock_control_lf_on+0xe8>)
   2db42:	f3bf 8f5b 	dmb	ish
   2db46:	4607      	mov	r7, r0
   2db48:	2201      	movs	r2, #1
   2db4a:	e851 3f00 	ldrex	r3, [r1]
   2db4e:	e841 2000 	strex	r0, r2, [r1]
   2db52:	2800      	cmp	r0, #0
   2db54:	d1f9      	bne.n	2db4a <z_nrf_clock_control_lf_on+0xe>
   2db56:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   2db5a:	b933      	cbnz	r3, 2db6a <z_nrf_clock_control_lf_on+0x2e>
   2db5c:	4932      	ldr	r1, [pc, #200]	; (2dc28 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
   2db5e:	4833      	ldr	r0, [pc, #204]	; (2dc2c <z_nrf_clock_control_lf_on+0xf0>)
   2db60:	604b      	str	r3, [r1, #4]
   2db62:	60cb      	str	r3, [r1, #12]
   2db64:	608a      	str	r2, [r1, #8]
   2db66:	f005 fb50 	bl	3320a <onoff_request>
	switch (start_mode) {
   2db6a:	1e7b      	subs	r3, r7, #1
   2db6c:	2b01      	cmp	r3, #1
   2db6e:	d82b      	bhi.n	2dbc8 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   2db70:	2f01      	cmp	r7, #1
   2db72:	d107      	bne.n	2db84 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   2db74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2db78:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   2db7c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   2db80:	2b01      	cmp	r3, #1
   2db82:	d021      	beq.n	2dbc8 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   2db84:	f00a fdc3 	bl	3870e <k_is_in_isr>
   2db88:	4605      	mov	r5, r0
   2db8a:	b9f8      	cbnz	r0, 2dbcc <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
   2db8c:	4b28      	ldr	r3, [pc, #160]	; (2dc30 <z_nrf_clock_control_lf_on+0xf4>)
   2db8e:	781b      	ldrb	r3, [r3, #0]
   2db90:	b1e3      	cbz	r3, 2dbcc <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
   2db92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2db96:	2202      	movs	r2, #2
   2db98:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   2db9c:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2db9e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 2dc34 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2dba2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   2dba6:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2dbaa:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   2dbae:	03d2      	lsls	r2, r2, #15
   2dbb0:	d516      	bpl.n	2dbe0 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   2dbb2:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   2dbb6:	2b01      	cmp	r3, #1
   2dbb8:	d001      	beq.n	2dbbe <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   2dbba:	2f01      	cmp	r7, #1
   2dbbc:	d110      	bne.n	2dbe0 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
   2dbbe:	b35d      	cbz	r5, 2dc18 <z_nrf_clock_control_lf_on+0xdc>
   2dbc0:	f386 8811 	msr	BASEPRI, r6
   2dbc4:	f3bf 8f6f 	isb	sy
}
   2dbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   2dbcc:	f04f 0320 	mov.w	r3, #32
   2dbd0:	f3ef 8611 	mrs	r6, BASEPRI
   2dbd4:	f383 8812 	msr	BASEPRI_MAX, r3
   2dbd8:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   2dbdc:	2501      	movs	r5, #1
   2dbde:	e7de      	b.n	2db9e <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   2dbe0:	b1ad      	cbz	r5, 2dc0e <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   2dbe2:	4630      	mov	r0, r6
   2dbe4:	f7e6 fe0c 	bl	14800 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   2dbe8:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   2dbec:	2b00      	cmp	r3, #0
   2dbee:	d1da      	bne.n	2dba6 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2dbf0:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   2dbf4:	2a00      	cmp	r2, #0
   2dbf6:	d0d6      	beq.n	2dba6 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2dbf8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   2dbfc:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   2dc00:	2301      	movs	r3, #1
   2dc02:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
   2dc06:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2dc0a:	60a3      	str	r3, [r4, #8]
}
   2dc0c:	e7cb      	b.n	2dba6 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
   2dc0e:	2100      	movs	r1, #0
   2dc10:	2021      	movs	r0, #33	; 0x21
   2dc12:	f004 fc67 	bl	324e4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   2dc16:	e7e7      	b.n	2dbe8 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
   2dc18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2dc1c:	2202      	movs	r2, #2
   2dc1e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2dc22:	e7d1      	b.n	2dbc8 <z_nrf_clock_control_lf_on+0x8c>
   2dc24:	20003008 	.word	0x20003008
   2dc28:	20002ff8 	.word	0x20002ff8
   2dc2c:	20003028 	.word	0x20003028
   2dc30:	20003422 	.word	0x20003422
   2dc34:	e000e100 	.word	0xe000e100

0002dc38 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   2dc38:	b508      	push	{r3, lr}
   2dc3a:	4807      	ldr	r0, [pc, #28]	; (2dc58 <uart_console_init+0x20>)
   2dc3c:	f00a fc9e 	bl	3857c <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   2dc40:	b138      	cbz	r0, 2dc52 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   2dc42:	4806      	ldr	r0, [pc, #24]	; (2dc5c <uart_console_init+0x24>)
   2dc44:	f7e7 fc38 	bl	154b8 <__stdout_hook_install>
	__printk_hook_install(console_out);
   2dc48:	4804      	ldr	r0, [pc, #16]	; (2dc5c <uart_console_init+0x24>)
   2dc4a:	f7e4 fb09 	bl	12260 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   2dc4e:	2000      	movs	r0, #0
}
   2dc50:	bd08      	pop	{r3, pc}
		return -ENODEV;
   2dc52:	f06f 0012 	mvn.w	r0, #18
   2dc56:	e7fb      	b.n	2dc50 <uart_console_init+0x18>
   2dc58:	00039240 	.word	0x00039240
   2dc5c:	0002dc61 	.word	0x0002dc61

0002dc60 <console_out>:
	if ('\n' == c) {
   2dc60:	280a      	cmp	r0, #10
{
   2dc62:	b538      	push	{r3, r4, r5, lr}
   2dc64:	4d07      	ldr	r5, [pc, #28]	; (2dc84 <console_out+0x24>)
   2dc66:	4604      	mov	r4, r0
	if ('\n' == c) {
   2dc68:	d104      	bne.n	2dc74 <console_out+0x14>
   2dc6a:	68ab      	ldr	r3, [r5, #8]
   2dc6c:	210d      	movs	r1, #13
   2dc6e:	685b      	ldr	r3, [r3, #4]
   2dc70:	4628      	mov	r0, r5
   2dc72:	4798      	blx	r3
   2dc74:	68ab      	ldr	r3, [r5, #8]
   2dc76:	4803      	ldr	r0, [pc, #12]	; (2dc84 <console_out+0x24>)
   2dc78:	685b      	ldr	r3, [r3, #4]
   2dc7a:	b2e1      	uxtb	r1, r4
   2dc7c:	4798      	blx	r3
}
   2dc7e:	4620      	mov	r0, r4
   2dc80:	bd38      	pop	{r3, r4, r5, pc}
   2dc82:	bf00      	nop
   2dc84:	00039240 	.word	0x00039240

0002dc88 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   2dc88:	b530      	push	{r4, r5, lr}
	return port->config;
   2dc8a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   2dc8c:	7b05      	ldrb	r5, [r0, #12]
   2dc8e:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   2dc92:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   2dc96:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   2dc98:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   2dc9c:	d105      	bne.n	2dcaa <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   2dc9e:	4620      	mov	r0, r4
   2dca0:	f002 fcd2 	bl	30648 <nrfx_gpiote_trigger_disable>

		return 0;
   2dca4:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   2dca6:	b005      	add	sp, #20
   2dca8:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   2dcaa:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   2dcac:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   2dcb0:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   2dcb4:	d114      	bne.n	2dce0 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   2dcb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   2dcba:	bf0c      	ite	eq
   2dcbc:	2304      	moveq	r3, #4
   2dcbe:	2305      	movne	r3, #5
   2dcc0:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   2dcc4:	2300      	movs	r3, #0
   2dcc6:	4619      	mov	r1, r3
   2dcc8:	aa02      	add	r2, sp, #8
   2dcca:	4620      	mov	r0, r4
   2dccc:	f002 fafa 	bl	302c4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   2dcd0:	4b1f      	ldr	r3, [pc, #124]	; (2dd50 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   2dcd2:	4298      	cmp	r0, r3
   2dcd4:	d139      	bne.n	2dd4a <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   2dcd6:	2101      	movs	r1, #1
   2dcd8:	4620      	mov	r0, r4
   2dcda:	f002 fc6d 	bl	305b8 <nrfx_gpiote_trigger_enable>
	return 0;
   2dcde:	e7e1      	b.n	2dca4 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   2dce0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   2dce4:	d026      	beq.n	2dd34 <gpio_nrfx_pin_interrupt_configure+0xac>
   2dce6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   2dcea:	bf14      	ite	ne
   2dcec:	2301      	movne	r3, #1
   2dcee:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   2dcf0:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   2dcf4:	6883      	ldr	r3, [r0, #8]
   2dcf6:	40cb      	lsrs	r3, r1
   2dcf8:	07d9      	lsls	r1, r3, #31
   2dcfa:	d4e3      	bmi.n	2dcc4 <gpio_nrfx_pin_interrupt_configure+0x3c>
   2dcfc:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   2dd00:	d1e0      	bne.n	2dcc4 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   2dd02:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
   2dd04:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   2dd06:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
   2dd0a:	4a12      	ldr	r2, [pc, #72]	; (2dd54 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   2dd0c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   2dd10:	bf18      	it	ne
   2dd12:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   2dd16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   2dd1a:	07db      	lsls	r3, r3, #31
   2dd1c:	d4d2      	bmi.n	2dcc4 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   2dd1e:	f10d 0507 	add.w	r5, sp, #7
   2dd22:	4629      	mov	r1, r5
   2dd24:	4620      	mov	r0, r4
   2dd26:	f002 fbf3 	bl	30510 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   2dd2a:	4b0b      	ldr	r3, [pc, #44]	; (2dd58 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   2dd2c:	4298      	cmp	r0, r3
   2dd2e:	d003      	beq.n	2dd38 <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
   2dd30:	9503      	str	r5, [sp, #12]
   2dd32:	e7c7      	b.n	2dcc4 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   2dd34:	2303      	movs	r3, #3
   2dd36:	e7db      	b.n	2dcf0 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   2dd38:	4628      	mov	r0, r5
   2dd3a:	f002 fc37 	bl	305ac <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   2dd3e:	4b04      	ldr	r3, [pc, #16]	; (2dd50 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   2dd40:	4298      	cmp	r0, r3
   2dd42:	d0f5      	beq.n	2dd30 <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
   2dd44:	f06f 000b 	mvn.w	r0, #11
   2dd48:	e7ad      	b.n	2dca6 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   2dd4a:	f06f 0015 	mvn.w	r0, #21
   2dd4e:	e7aa      	b.n	2dca6 <gpio_nrfx_pin_interrupt_configure+0x1e>
   2dd50:	0bad0000 	.word	0x0bad0000
   2dd54:	50000300 	.word	0x50000300
   2dd58:	0bad0004 	.word	0x0bad0004

0002dd5c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   2dd5c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   2dd5e:	f002 fc15 	bl	3058c <nrfx_gpiote_is_init>
   2dd62:	4604      	mov	r4, r0
   2dd64:	b968      	cbnz	r0, 2dd82 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   2dd66:	f002 fbe9 	bl	3053c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   2dd6a:	4b08      	ldr	r3, [pc, #32]	; (2dd8c <gpio_nrfx_init+0x30>)
   2dd6c:	4298      	cmp	r0, r3
   2dd6e:	d10a      	bne.n	2dd86 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   2dd70:	4807      	ldr	r0, [pc, #28]	; (2dd90 <gpio_nrfx_init+0x34>)
   2dd72:	4621      	mov	r1, r4
   2dd74:	f002 fbc6 	bl	30504 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   2dd78:	4622      	mov	r2, r4
   2dd7a:	2105      	movs	r1, #5
   2dd7c:	2006      	movs	r0, #6
   2dd7e:	f7e6 fde7 	bl	14950 <z_arm_irq_priority_set>
		return 0;
   2dd82:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   2dd84:	bd10      	pop	{r4, pc}
		return -EIO;
   2dd86:	f06f 0004 	mvn.w	r0, #4
   2dd8a:	e7fb      	b.n	2dd84 <gpio_nrfx_init+0x28>
   2dd8c:	0bad0000 	.word	0x0bad0000
   2dd90:	0002dd95 	.word	0x0002dd95

0002dd94 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   2dd94:	0942      	lsrs	r2, r0, #5
{
   2dd96:	b570      	push	{r4, r5, r6, lr}
   2dd98:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   2dd9a:	d002      	beq.n	2dda2 <nrfx_gpio_handler+0xe>
   2dd9c:	2a01      	cmp	r2, #1
   2dd9e:	d017      	beq.n	2ddd0 <nrfx_gpio_handler+0x3c>
}
   2dda0:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   2dda2:	4e0d      	ldr	r6, [pc, #52]	; (2ddd8 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
   2dda4:	6932      	ldr	r2, [r6, #16]
   2dda6:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2dda8:	2900      	cmp	r1, #0
   2ddaa:	d0f9      	beq.n	2dda0 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   2ddac:	f003 031f 	and.w	r3, r3, #31
   2ddb0:	2501      	movs	r5, #1
	return node->next;
   2ddb2:	680c      	ldr	r4, [r1, #0]
   2ddb4:	409d      	lsls	r5, r3
   2ddb6:	2900      	cmp	r1, #0
   2ddb8:	d0f2      	beq.n	2dda0 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   2ddba:	688a      	ldr	r2, [r1, #8]
   2ddbc:	402a      	ands	r2, r5
   2ddbe:	d002      	beq.n	2ddc6 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   2ddc0:	684b      	ldr	r3, [r1, #4]
   2ddc2:	4630      	mov	r0, r6
   2ddc4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2ddc6:	b12c      	cbz	r4, 2ddd4 <nrfx_gpio_handler+0x40>
   2ddc8:	6823      	ldr	r3, [r4, #0]
   2ddca:	4621      	mov	r1, r4
   2ddcc:	461c      	mov	r4, r3
   2ddce:	e7f2      	b.n	2ddb6 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   2ddd0:	4e02      	ldr	r6, [pc, #8]	; (2dddc <nrfx_gpio_handler+0x48>)
   2ddd2:	e7e7      	b.n	2dda4 <nrfx_gpio_handler+0x10>
   2ddd4:	4623      	mov	r3, r4
   2ddd6:	e7f8      	b.n	2ddca <nrfx_gpio_handler+0x36>
   2ddd8:	000391f8 	.word	0x000391f8
   2dddc:	000391e0 	.word	0x000391e0

0002dde0 <gpio_nrfx_pin_configure>:
{
   2dde0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   2dde4:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2dde6:	7b3b      	ldrb	r3, [r7, #12]
   2dde8:	f001 051f 	and.w	r5, r1, #31
   2ddec:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   2ddf0:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   2ddf2:	4628      	mov	r0, r5
   2ddf4:	f10d 0103 	add.w	r1, sp, #3
{
   2ddf8:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   2ddfa:	f002 fb89 	bl	30510 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   2ddfe:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   2de02:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   2de04:	d10b      	bne.n	2de1e <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   2de06:	4628      	mov	r0, r5
   2de08:	f002 fc46 	bl	30698 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   2de0c:	4b3d      	ldr	r3, [pc, #244]	; (2df04 <gpio_nrfx_pin_configure+0x124>)
   2de0e:	4598      	cmp	r8, r3
   2de10:	d103      	bne.n	2de1a <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   2de12:	f89d 0003 	ldrb.w	r0, [sp, #3]
   2de16:	f002 fbc3 	bl	305a0 <nrfx_gpiote_channel_free>
		return 0;
   2de1a:	2000      	movs	r0, #0
   2de1c:	e00c      	b.n	2de38 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   2de1e:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   2de20:	4619      	mov	r1, r3
   2de22:	aa02      	add	r2, sp, #8
   2de24:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
   2de26:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   2de2a:	f002 fa4b 	bl	302c4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   2de2e:	4b35      	ldr	r3, [pc, #212]	; (2df04 <gpio_nrfx_pin_configure+0x124>)
   2de30:	4298      	cmp	r0, r3
   2de32:	d004      	beq.n	2de3e <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   2de34:	f06f 0015 	mvn.w	r0, #21
}
   2de38:	b004      	add	sp, #16
   2de3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   2de3e:	4580      	cmp	r8, r0
   2de40:	d103      	bne.n	2de4a <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   2de42:	f89d 0003 	ldrb.w	r0, [sp, #3]
   2de46:	f002 fbab 	bl	305a0 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   2de4a:	03a3      	lsls	r3, r4, #14
   2de4c:	d54b      	bpl.n	2dee6 <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2de4e:	f240 3306 	movw	r3, #774	; 0x306
   2de52:	4023      	ands	r3, r4
   2de54:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   2de58:	d019      	beq.n	2de8e <gpio_nrfx_pin_configure+0xae>
   2de5a:	d80c      	bhi.n	2de76 <gpio_nrfx_pin_configure+0x96>
   2de5c:	2b06      	cmp	r3, #6
   2de5e:	d017      	beq.n	2de90 <gpio_nrfx_pin_configure+0xb0>
   2de60:	d804      	bhi.n	2de6c <gpio_nrfx_pin_configure+0x8c>
   2de62:	b1ab      	cbz	r3, 2de90 <gpio_nrfx_pin_configure+0xb0>
   2de64:	2b02      	cmp	r3, #2
   2de66:	d1e5      	bne.n	2de34 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   2de68:	2304      	movs	r3, #4
   2de6a:	e011      	b.n	2de90 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2de6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   2de70:	d1e0      	bne.n	2de34 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   2de72:	2301      	movs	r3, #1
   2de74:	e00c      	b.n	2de90 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2de76:	f240 2202 	movw	r2, #514	; 0x202
   2de7a:	4293      	cmp	r3, r2
   2de7c:	d027      	beq.n	2dece <gpio_nrfx_pin_configure+0xee>
   2de7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   2de82:	d026      	beq.n	2ded2 <gpio_nrfx_pin_configure+0xf2>
   2de84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2de88:	d1d4      	bne.n	2de34 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   2de8a:	2302      	movs	r3, #2
   2de8c:	e000      	b.n	2de90 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   2de8e:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   2de90:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   2de94:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   2de98:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   2de9c:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   2de9e:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   2dea2:	bf54      	ite	pl
   2dea4:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   2dea8:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   2deaa:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   2deac:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   2deb0:	d511      	bpl.n	2ded6 <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   2deb2:	687a      	ldr	r2, [r7, #4]
   2deb4:	2301      	movs	r3, #1
   2deb6:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   2deb8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   2debc:	2200      	movs	r2, #0
   2debe:	a901      	add	r1, sp, #4
   2dec0:	4628      	mov	r0, r5
   2dec2:	f002 faad 	bl	30420 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   2dec6:	4b0f      	ldr	r3, [pc, #60]	; (2df04 <gpio_nrfx_pin_configure+0x124>)
   2dec8:	4298      	cmp	r0, r3
   2deca:	d0a6      	beq.n	2de1a <gpio_nrfx_pin_configure+0x3a>
   2decc:	e7b2      	b.n	2de34 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   2dece:	2305      	movs	r3, #5
   2ded0:	e7de      	b.n	2de90 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2ded2:	2303      	movs	r3, #3
   2ded4:	e7dc      	b.n	2de90 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   2ded6:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   2ded8:	bf41      	itttt	mi
   2deda:	2301      	movmi	r3, #1
   2dedc:	687a      	ldrmi	r2, [r7, #4]
   2dede:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   2dee0:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   2dee4:	e7ea      	b.n	2debc <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
   2dee6:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   2dee8:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   2deec:	bf54      	ite	pl
   2deee:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   2def2:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   2def4:	461a      	mov	r2, r3
   2def6:	a901      	add	r1, sp, #4
   2def8:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   2defa:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   2defe:	f002 f9e1 	bl	302c4 <nrfx_gpiote_input_configure>
   2df02:	e7e0      	b.n	2dec6 <gpio_nrfx_pin_configure+0xe6>
   2df04:	0bad0000 	.word	0x0bad0000

0002df08 <i2c_nrfx_twim_init>:
	return ret;
}
#endif /* CONFIG_PM_DEVICE */

static int i2c_nrfx_twim_init(const struct device *dev)
{
   2df08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   2df0a:	6844      	ldr	r4, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   2df0c:	6906      	ldr	r6, [r0, #16]

	dev_config->irq_connect();
   2df0e:	69e3      	ldr	r3, [r4, #28]
{
   2df10:	af00      	add	r7, sp, #0
   2df12:	4605      	mov	r5, r0
	dev_config->irq_connect();
   2df14:	4798      	blx	r3

#ifdef CONFIG_PINCTRL
	int err = pinctrl_apply_state(dev_config->pcfg,
   2df16:	6a20      	ldr	r0, [r4, #32]
   2df18:	f009 fedb 	bl	37cd2 <pinctrl_apply_state.constprop.0>
				      COND_CODE_1(CONFIG_PM_DEVICE_RUNTIME,
						  (PINCTRL_STATE_SLEEP),
						  (PINCTRL_STATE_DEFAULT)));
	if (err < 0) {
   2df1c:	2800      	cmp	r0, #0
   2df1e:	db21      	blt.n	2df64 <i2c_nrfx_twim_init+0x5c>
		return err;
	}
#endif

	if (nrfx_twim_init(&dev_config->twim, &dev_config->twim_config,
   2df20:	4633      	mov	r3, r6
   2df22:	4a14      	ldr	r2, [pc, #80]	; (2df74 <i2c_nrfx_twim_init+0x6c>)
   2df24:	f104 0108 	add.w	r1, r4, #8
   2df28:	4620      	mov	r0, r4
   2df2a:	f002 ff89 	bl	30e40 <nrfx_twim_init>
   2df2e:	4b12      	ldr	r3, [pc, #72]	; (2df78 <i2c_nrfx_twim_init+0x70>)
   2df30:	4298      	cmp	r0, r3
   2df32:	d019      	beq.n	2df68 <i2c_nrfx_twim_init+0x60>
			   event_handler, dev_data) != NRFX_SUCCESS) {
		LOG_ERR("Failed to initialize device: %s", dev->name);
   2df34:	466c      	mov	r4, sp
   2df36:	b08a      	sub	sp, #40	; 0x28
   2df38:	682b      	ldr	r3, [r5, #0]
   2df3a:	466a      	mov	r2, sp
   2df3c:	490f      	ldr	r1, [pc, #60]	; (2df7c <i2c_nrfx_twim_init+0x74>)
   2df3e:	6151      	str	r1, [r2, #20]
   2df40:	490f      	ldr	r1, [pc, #60]	; (2df80 <i2c_nrfx_twim_init+0x78>)
   2df42:	e9c2 1306 	strd	r1, r3, [r2, #24]
   2df46:	f240 3301 	movw	r3, #769	; 0x301
   2df4a:	8413      	strh	r3, [r2, #32]
   2df4c:	4b0d      	ldr	r3, [pc, #52]	; (2df84 <i2c_nrfx_twim_init+0x7c>)
   2df4e:	f842 3f10 	str.w	r3, [r2, #16]!
   2df52:	480d      	ldr	r0, [pc, #52]	; (2df88 <i2c_nrfx_twim_init+0x80>)
   2df54:	2300      	movs	r3, #0
   2df56:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   2df5a:	f7e5 f90b 	bl	13174 <z_impl_z_log_msg_static_create>
		return -EIO;
   2df5e:	f06f 0004 	mvn.w	r0, #4
   2df62:	46a5      	mov	sp, r4
#else
	nrfx_twim_enable(&dev_config->twim);
#endif

	return 0;
}
   2df64:	46bd      	mov	sp, r7
   2df66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	nrfx_twim_enable(&dev_config->twim);
   2df68:	4620      	mov	r0, r4
   2df6a:	f002 ffcb 	bl	30f04 <nrfx_twim_enable>
	return 0;
   2df6e:	2000      	movs	r0, #0
   2df70:	e7f8      	b.n	2df64 <i2c_nrfx_twim_init+0x5c>
   2df72:	bf00      	nop
   2df74:	0002dfc9 	.word	0x0002dfc9
   2df78:	0bad0000 	.word	0x0bad0000
   2df7c:	0003e907 	.word	0x0003e907
   2df80:	0003ea96 	.word	0x0003ea96
   2df84:	01000004 	.word	0x01000004
   2df88:	00039628 	.word	0x00039628

0002df8c <i2c_nrfx_twim_recover_bus>:
{
   2df8c:	b570      	push	{r4, r5, r6, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   2df8e:	6844      	ldr	r4, [r0, #4]
	scl_pin = nrf_twim_scl_pin_get(dev_config->twim.p_twim);
   2df90:	6823      	ldr	r3, [r4, #0]
    p_reg->PSEL.SDA = sda_pin;
}

NRF_STATIC_INLINE uint32_t nrf_twim_scl_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SCL;
   2df92:	f8d3 5508 	ldr.w	r5, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE uint32_t nrf_twim_sda_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SDA;
   2df96:	f8d3 650c 	ldr.w	r6, [r3, #1292]	; 0x50c
		nrfx_twim_disable(&dev_config->twim);
   2df9a:	4620      	mov	r0, r4
   2df9c:	f002 ffc2 	bl	30f24 <nrfx_twim_disable>
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   2dfa0:	4631      	mov	r1, r6
   2dfa2:	4628      	mov	r0, r5
   2dfa4:	f003 f986 	bl	312b4 <nrfx_twi_twim_bus_recover>
   2dfa8:	4605      	mov	r5, r0
		(void)pinctrl_apply_state(dev_config->pcfg,
   2dfaa:	6a20      	ldr	r0, [r4, #32]
   2dfac:	f009 fe91 	bl	37cd2 <pinctrl_apply_state.constprop.0>
		nrfx_twim_enable(&dev_config->twim);
   2dfb0:	4620      	mov	r0, r4
   2dfb2:	f002 ffa7 	bl	30f04 <nrfx_twim_enable>
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   2dfb6:	4b03      	ldr	r3, [pc, #12]	; (2dfc4 <i2c_nrfx_twim_recover_bus+0x38>)
   2dfb8:	429d      	cmp	r5, r3
}
   2dfba:	bf14      	ite	ne
   2dfbc:	f06f 000f 	mvnne.w	r0, #15
   2dfc0:	2000      	moveq	r0, #0
   2dfc2:	bd70      	pop	{r4, r5, r6, pc}
   2dfc4:	0bad0000 	.word	0x0bad0000

0002dfc8 <event_handler>:
	switch (p_event->type) {
   2dfc8:	7803      	ldrb	r3, [r0, #0]
   2dfca:	2b01      	cmp	r3, #1
   2dfcc:	d008      	beq.n	2dfe0 <event_handler+0x18>
   2dfce:	2b02      	cmp	r3, #2
   2dfd0:	d008      	beq.n	2dfe4 <event_handler+0x1c>
   2dfd2:	b94b      	cbnz	r3, 2dfe8 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   2dfd4:	4b05      	ldr	r3, [pc, #20]	; (2dfec <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   2dfd6:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
   2dfd8:	f101 0018 	add.w	r0, r1, #24
   2dfdc:	f003 bd7a 	b.w	31ad4 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   2dfe0:	4b03      	ldr	r3, [pc, #12]	; (2dff0 <event_handler+0x28>)
   2dfe2:	e7f8      	b.n	2dfd6 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   2dfe4:	4b03      	ldr	r3, [pc, #12]	; (2dff4 <event_handler+0x2c>)
   2dfe6:	e7f6      	b.n	2dfd6 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   2dfe8:	4b03      	ldr	r3, [pc, #12]	; (2dff8 <event_handler+0x30>)
   2dfea:	e7f4      	b.n	2dfd6 <event_handler+0xe>
   2dfec:	0bad0000 	.word	0x0bad0000
   2dff0:	0bae0001 	.word	0x0bae0001
   2dff4:	0bae0002 	.word	0x0bae0002
   2dff8:	0bad0001 	.word	0x0bad0001

0002dffc <i2c_nrfx_twim_configure>:
{
   2dffc:	b598      	push	{r3, r4, r7, lr}
	if (I2C_ADDR_10_BITS & i2c_config) {
   2dffe:	f011 0301 	ands.w	r3, r1, #1
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   2e002:	6842      	ldr	r2, [r0, #4]
{
   2e004:	af00      	add	r7, sp, #0
	if (I2C_ADDR_10_BITS & i2c_config) {
   2e006:	d115      	bne.n	2e034 <i2c_nrfx_twim_configure+0x38>
	switch (I2C_SPEED_GET(i2c_config)) {
   2e008:	f3c1 0142 	ubfx	r1, r1, #1, #3
   2e00c:	2901      	cmp	r1, #1
   2e00e:	d014      	beq.n	2e03a <i2c_nrfx_twim_configure+0x3e>
   2e010:	2902      	cmp	r1, #2
   2e012:	d01a      	beq.n	2e04a <i2c_nrfx_twim_configure+0x4e>
		LOG_ERR("unsupported speed");
   2e014:	466c      	mov	r4, sp
   2e016:	b088      	sub	sp, #32
   2e018:	466a      	mov	r2, sp
   2e01a:	490e      	ldr	r1, [pc, #56]	; (2e054 <i2c_nrfx_twim_configure+0x58>)
   2e01c:	6151      	str	r1, [r2, #20]
   2e01e:	490e      	ldr	r1, [pc, #56]	; (2e058 <i2c_nrfx_twim_configure+0x5c>)
   2e020:	6191      	str	r1, [r2, #24]
   2e022:	2103      	movs	r1, #3
   2e024:	f842 1f10 	str.w	r1, [r2, #16]!
   2e028:	480c      	ldr	r0, [pc, #48]	; (2e05c <i2c_nrfx_twim_configure+0x60>)
   2e02a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2e02e:	f7e5 f8a1 	bl	13174 <z_impl_z_log_msg_static_create>
   2e032:	46a5      	mov	sp, r4
		return -EINVAL;
   2e034:	f06f 0015 	mvn.w	r0, #21
   2e038:	e005      	b.n	2e046 <i2c_nrfx_twim_configure+0x4a>
		nrf_twim_frequency_set(dev_config->twim.p_twim,
   2e03a:	6813      	ldr	r3, [r2, #0]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   2e03c:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   2e040:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
   2e044:	2000      	movs	r0, #0
}
   2e046:	46bd      	mov	sp, r7
   2e048:	bd98      	pop	{r3, r4, r7, pc}
		nrf_twim_frequency_set(dev_config->twim.p_twim,
   2e04a:	6813      	ldr	r3, [r2, #0]
   2e04c:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
   2e050:	e7f6      	b.n	2e040 <i2c_nrfx_twim_configure+0x44>
   2e052:	bf00      	nop
   2e054:	0003e92b 	.word	0x0003e92b
   2e058:	0003eaa9 	.word	0x0003eaa9
   2e05c:	00039628 	.word	0x00039628

0002e060 <i2c_nrfx_twim_transfer>:
{
   2e060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e064:	b08d      	sub	sp, #52	; 0x34
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   2e066:	f8d0 b004 	ldr.w	fp, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   2e06a:	f8d0 9010 	ldr.w	r9, [r0, #16]
{
   2e06e:	af00      	add	r7, sp, #0
   2e070:	461d      	mov	r5, r3
   2e072:	613a      	str	r2, [r7, #16]
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   2e074:	f8bb 3018 	ldrh.w	r3, [fp, #24]
	uint8_t *msg_buf = dev_data->msg_buf;
   2e078:	f8d9 a034 	ldr.w	sl, [r9, #52]	; 0x34
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   2e07c:	617b      	str	r3, [r7, #20]
{
   2e07e:	4606      	mov	r6, r0
   2e080:	460c      	mov	r4, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
   2e082:	2214      	movs	r2, #20
   2e084:	2100      	movs	r1, #0
   2e086:	f107 001c 	add.w	r0, r7, #28
   2e08a:	f007 fa5f 	bl	3554c <memset>
   2e08e:	777d      	strb	r5, [r7, #29]
	return z_impl_k_sem_take(sem, timeout);
   2e090:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2e094:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2e098:	4648      	mov	r0, r9
   2e09a:	f003 fd41 	bl	31b20 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
   2e09e:	f109 0318 	add.w	r3, r9, #24
   2e0a2:	60fb      	str	r3, [r7, #12]
   2e0a4:	2200      	movs	r2, #0
   2e0a6:	2300      	movs	r3, #0
   2e0a8:	f109 0018 	add.w	r0, r9, #24
   2e0ac:	f003 fd38 	bl	31b20 <z_impl_k_sem_take>
	for (size_t i = 0; i < num_msgs; i++) {
   2e0b0:	f04f 0800 	mov.w	r8, #0
	uint16_t msg_buf_used = 0;
   2e0b4:	4645      	mov	r5, r8
	for (size_t i = 0; i < num_msgs; i++) {
   2e0b6:	693b      	ldr	r3, [r7, #16]
   2e0b8:	4598      	cmp	r8, r3
   2e0ba:	d301      	bcc.n	2e0c0 <i2c_nrfx_twim_transfer+0x60>
   2e0bc:	2400      	movs	r4, #0
   2e0be:	e03a      	b.n	2e136 <i2c_nrfx_twim_transfer+0xd6>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   2e0c0:	7a20      	ldrb	r0, [r4, #8]
   2e0c2:	0702      	lsls	r2, r0, #28
   2e0c4:	f100 80f3 	bmi.w	2e2ae <i2c_nrfx_twim_transfer+0x24e>
				&& ((msgs[i].flags & I2C_MSG_READ)
   2e0c8:	693a      	ldr	r2, [r7, #16]
		bool concat_next = ((i + 1) < num_msgs)
   2e0ca:	f108 0301 	add.w	r3, r8, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
   2e0ce:	4293      	cmp	r3, r2
		bool concat_next = ((i + 1) < num_msgs)
   2e0d0:	60bb      	str	r3, [r7, #8]
				&& ((msgs[i].flags & I2C_MSG_READ)
   2e0d2:	d20a      	bcs.n	2e0ea <i2c_nrfx_twim_transfer+0x8a>
				&& !(msgs[i].flags & I2C_MSG_STOP)
   2e0d4:	0783      	lsls	r3, r0, #30
   2e0d6:	d408      	bmi.n	2e0ea <i2c_nrfx_twim_transfer+0x8a>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   2e0d8:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
   2e0da:	ea80 0203 	eor.w	r2, r0, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
   2e0de:	f002 0201 	and.w	r2, r2, #1
   2e0e2:	f003 0304 	and.w	r3, r3, #4
   2e0e6:	431a      	orrs	r2, r3
   2e0e8:	d02d      	beq.n	2e146 <i2c_nrfx_twim_transfer+0xe6>
		if (concat_next || (msg_buf_used != 0)) {
   2e0ea:	2d00      	cmp	r5, #0
   2e0ec:	d041      	beq.n	2e172 <i2c_nrfx_twim_transfer+0x112>
		bool concat_next = ((i + 1) < num_msgs)
   2e0ee:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
   2e0f0:	6862      	ldr	r2, [r4, #4]
   2e0f2:	f8d7 c014 	ldr.w	ip, [r7, #20]
   2e0f6:	18a9      	adds	r1, r5, r2
   2e0f8:	4561      	cmp	r1, ip
   2e0fa:	d926      	bls.n	2e14a <i2c_nrfx_twim_transfer+0xea>
				LOG_ERR("Need to use concatenation buffer and "
   2e0fc:	466c      	mov	r4, sp
   2e0fe:	b08c      	sub	sp, #48	; 0x30
   2e100:	6831      	ldr	r1, [r6, #0]
   2e102:	466b      	mov	r3, sp
   2e104:	621a      	str	r2, [r3, #32]
   2e106:	697a      	ldr	r2, [r7, #20]
   2e108:	486a      	ldr	r0, [pc, #424]	; (2e2b4 <i2c_nrfx_twim_transfer+0x254>)
   2e10a:	6158      	str	r0, [r3, #20]
   2e10c:	e9c3 2109 	strd	r2, r1, [r3, #36]	; 0x24
   2e110:	4869      	ldr	r0, [pc, #420]	; (2e2b8 <i2c_nrfx_twim_transfer+0x258>)
   2e112:	f240 6204 	movw	r2, #1540	; 0x604
   2e116:	859a      	strh	r2, [r3, #44]	; 0x2c
   2e118:	461a      	mov	r2, r3
   2e11a:	e9c3 0506 	strd	r0, r5, [r3, #24]
   2e11e:	4b67      	ldr	r3, [pc, #412]	; (2e2bc <i2c_nrfx_twim_transfer+0x25c>)
   2e120:	f842 3f10 	str.w	r3, [r2, #16]!
   2e124:	4866      	ldr	r0, [pc, #408]	; (2e2c0 <i2c_nrfx_twim_transfer+0x260>)
   2e126:	2300      	movs	r3, #0
   2e128:	f44f 5171 	mov.w	r1, #15424	; 0x3c40
   2e12c:	f7e5 f822 	bl	13174 <z_impl_z_log_msg_static_create>
   2e130:	46a5      	mov	sp, r4
				ret = -ENOSPC;
   2e132:	f06f 041b 	mvn.w	r4, #27
	z_impl_k_sem_give(sem);
   2e136:	4648      	mov	r0, r9
   2e138:	f003 fccc 	bl	31ad4 <z_impl_k_sem_give>
}
   2e13c:	4620      	mov	r0, r4
   2e13e:	3734      	adds	r7, #52	; 0x34
   2e140:	46bd      	mov	sp, r7
   2e142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bool concat_next = ((i + 1) < num_msgs)
   2e146:	2301      	movs	r3, #1
   2e148:	e7d2      	b.n	2e0f0 <i2c_nrfx_twim_transfer+0x90>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   2e14a:	07c1      	lsls	r1, r0, #31
   2e14c:	d406      	bmi.n	2e15c <i2c_nrfx_twim_transfer+0xfc>
				memcpy(msg_buf + msg_buf_used,
   2e14e:	6821      	ldr	r1, [r4, #0]
   2e150:	607b      	str	r3, [r7, #4]
   2e152:	eb0a 0005 	add.w	r0, sl, r5
   2e156:	f007 f9ee 	bl	35536 <memcpy>
   2e15a:	687b      	ldr	r3, [r7, #4]
			msg_buf_used += msgs[i].len;
   2e15c:	6862      	ldr	r2, [r4, #4]
   2e15e:	442a      	add	r2, r5
   2e160:	b295      	uxth	r5, r2
		if (concat_next) {
   2e162:	2b00      	cmp	r3, #0
   2e164:	f040 808b 	bne.w	2e27e <i2c_nrfx_twim_transfer+0x21e>
		if (msg_buf_used == 0) {
   2e168:	b13d      	cbz	r5, 2e17a <i2c_nrfx_twim_transfer+0x11a>
			cur_xfer.p_primary_buf = msg_buf;
   2e16a:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
			cur_xfer.primary_length = msg_buf_used;
   2e16e:	462b      	mov	r3, r5
   2e170:	e007      	b.n	2e182 <i2c_nrfx_twim_transfer+0x122>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   2e172:	07c0      	lsls	r0, r0, #31
			   !nrfx_is_in_ram(msgs[i].buf)) {
   2e174:	e9d4 1200 	ldrd	r1, r2, [r4]
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   2e178:	d51b      	bpl.n	2e1b2 <i2c_nrfx_twim_transfer+0x152>
			cur_xfer.p_primary_buf = msgs[i].buf;
   2e17a:	6823      	ldr	r3, [r4, #0]
   2e17c:	62bb      	str	r3, [r7, #40]	; 0x28
			cur_xfer.primary_length = msgs[i].len;
   2e17e:	6863      	ldr	r3, [r4, #4]
   2e180:	2500      	movs	r5, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   2e182:	7a22      	ldrb	r2, [r4, #8]
			cur_xfer.primary_length = msgs[i].len;
   2e184:	623b      	str	r3, [r7, #32]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   2e186:	f002 0301 	and.w	r3, r2, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   2e18a:	f082 0202 	eor.w	r2, r2, #2
   2e18e:	f3c2 0240 	ubfx	r2, r2, #1, #1
   2e192:	0152      	lsls	r2, r2, #5
   2e194:	f107 011c 	add.w	r1, r7, #28
   2e198:	4658      	mov	r0, fp
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   2e19a:	773b      	strb	r3, [r7, #28]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   2e19c:	f002 fee0 	bl	30f60 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   2e1a0:	4b48      	ldr	r3, [pc, #288]	; (2e2c4 <i2c_nrfx_twim_transfer+0x264>)
   2e1a2:	4298      	cmp	r0, r3
   2e1a4:	d02e      	beq.n	2e204 <i2c_nrfx_twim_transfer+0x1a4>
			if (res == NRFX_ERROR_BUSY) {
   2e1a6:	330b      	adds	r3, #11
   2e1a8:	4298      	cmp	r0, r3
   2e1aa:	d148      	bne.n	2e23e <i2c_nrfx_twim_transfer+0x1de>
				ret = -EBUSY;
   2e1ac:	f06f 040f 	mvn.w	r4, #15
   2e1b0:	e7c1      	b.n	2e136 <i2c_nrfx_twim_transfer+0xd6>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   2e1b2:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   2e1b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   2e1ba:	d0de      	beq.n	2e17a <i2c_nrfx_twim_transfer+0x11a>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
   2e1bc:	f8bb 301a 	ldrh.w	r3, [fp, #26]
   2e1c0:	4293      	cmp	r3, r2
   2e1c2:	d21a      	bcs.n	2e1fa <i2c_nrfx_twim_transfer+0x19a>
				LOG_ERR("Cannot copy flash buffer of size: %u. "
   2e1c4:	466c      	mov	r4, sp
   2e1c6:	b08a      	sub	sp, #40	; 0x28
   2e1c8:	6831      	ldr	r1, [r6, #0]
   2e1ca:	466b      	mov	r3, sp
   2e1cc:	483e      	ldr	r0, [pc, #248]	; (2e2c8 <i2c_nrfx_twim_transfer+0x268>)
   2e1ce:	6158      	str	r0, [r3, #20]
   2e1d0:	4839      	ldr	r0, [pc, #228]	; (2e2b8 <i2c_nrfx_twim_transfer+0x258>)
   2e1d2:	6219      	str	r1, [r3, #32]
   2e1d4:	e9c3 0206 	strd	r0, r2, [r3, #24]
   2e1d8:	f240 4202 	movw	r2, #1026	; 0x402
   2e1dc:	849a      	strh	r2, [r3, #36]	; 0x24
   2e1de:	461a      	mov	r2, r3
   2e1e0:	4b3a      	ldr	r3, [pc, #232]	; (2e2cc <i2c_nrfx_twim_transfer+0x26c>)
   2e1e2:	f842 3f10 	str.w	r3, [r2, #16]!
   2e1e6:	4836      	ldr	r0, [pc, #216]	; (2e2c0 <i2c_nrfx_twim_transfer+0x260>)
   2e1e8:	462b      	mov	r3, r5
   2e1ea:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   2e1ee:	f7e4 ffc1 	bl	13174 <z_impl_z_log_msg_static_create>
   2e1f2:	46a5      	mov	sp, r4
				ret = -EINVAL;
   2e1f4:	f06f 0415 	mvn.w	r4, #21
				break;
   2e1f8:	e79d      	b.n	2e136 <i2c_nrfx_twim_transfer+0xd6>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
   2e1fa:	4650      	mov	r0, sl
   2e1fc:	f007 f99b 	bl	35536 <memcpy>
			msg_buf_used = msgs[i].len;
   2e200:	88a5      	ldrh	r5, [r4, #4]
		if (concat_next) {
   2e202:	e7b1      	b.n	2e168 <i2c_nrfx_twim_transfer+0x108>
	return z_impl_k_sem_take(sem, timeout);
   2e204:	2300      	movs	r3, #0
   2e206:	68f8      	ldr	r0, [r7, #12]
   2e208:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   2e20c:	f003 fc88 	bl	31b20 <z_impl_k_sem_take>
		if (ret != 0) {
   2e210:	4603      	mov	r3, r0
   2e212:	b1b8      	cbz	r0, 2e244 <i2c_nrfx_twim_transfer+0x1e4>
			LOG_ERR("Error on I2C line occurred for message %d", i);
   2e214:	466c      	mov	r4, sp
   2e216:	b088      	sub	sp, #32
   2e218:	466a      	mov	r2, sp
   2e21a:	4b2d      	ldr	r3, [pc, #180]	; (2e2d0 <i2c_nrfx_twim_transfer+0x270>)
   2e21c:	6153      	str	r3, [r2, #20]
   2e21e:	4b26      	ldr	r3, [pc, #152]	; (2e2b8 <i2c_nrfx_twim_transfer+0x258>)
   2e220:	e9c2 3806 	strd	r3, r8, [r2, #24]
   2e224:	2304      	movs	r3, #4
   2e226:	f842 3f10 	str.w	r3, [r2, #16]!
   2e22a:	4825      	ldr	r0, [pc, #148]	; (2e2c0 <i2c_nrfx_twim_transfer+0x260>)
   2e22c:	2300      	movs	r3, #0
   2e22e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   2e232:	f7e4 ff9f 	bl	13174 <z_impl_z_log_msg_static_create>
			(void)i2c_nrfx_twim_recover_bus(dev);
   2e236:	4630      	mov	r0, r6
   2e238:	46a5      	mov	sp, r4
   2e23a:	f7ff fea7 	bl	2df8c <i2c_nrfx_twim_recover_bus>
				ret = -EIO;
   2e23e:	f06f 0404 	mvn.w	r4, #4
   2e242:	e778      	b.n	2e136 <i2c_nrfx_twim_transfer+0xd6>
		res = dev_data->res;
   2e244:	f8d9 1030 	ldr.w	r1, [r9, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   2e248:	4a1e      	ldr	r2, [pc, #120]	; (2e2c4 <i2c_nrfx_twim_transfer+0x264>)
   2e24a:	4291      	cmp	r1, r2
   2e24c:	d013      	beq.n	2e276 <i2c_nrfx_twim_transfer+0x216>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
   2e24e:	466c      	mov	r4, sp
   2e250:	b08a      	sub	sp, #40	; 0x28
   2e252:	466a      	mov	r2, sp
   2e254:	481f      	ldr	r0, [pc, #124]	; (2e2d4 <i2c_nrfx_twim_transfer+0x274>)
   2e256:	6150      	str	r0, [r2, #20]
   2e258:	4817      	ldr	r0, [pc, #92]	; (2e2b8 <i2c_nrfx_twim_transfer+0x258>)
   2e25a:	f8c2 8020 	str.w	r8, [r2, #32]
   2e25e:	e9c2 0106 	strd	r0, r1, [r2, #24]
   2e262:	2105      	movs	r1, #5
   2e264:	f842 1f10 	str.w	r1, [r2, #16]!
   2e268:	4815      	ldr	r0, [pc, #84]	; (2e2c0 <i2c_nrfx_twim_transfer+0x260>)
   2e26a:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   2e26e:	f7e4 ff81 	bl	13174 <z_impl_z_log_msg_static_create>
   2e272:	46a5      	mov	sp, r4
			break;
   2e274:	e7e3      	b.n	2e23e <i2c_nrfx_twim_transfer+0x1de>
		if ((msgs[i].flags & I2C_MSG_READ)
   2e276:	7a23      	ldrb	r3, [r4, #8]
   2e278:	07db      	lsls	r3, r3, #31
   2e27a:	d404      	bmi.n	2e286 <i2c_nrfx_twim_transfer+0x226>
		msg_buf_used = 0;
   2e27c:	2500      	movs	r5, #0
   2e27e:	f8d7 8008 	ldr.w	r8, [r7, #8]
   2e282:	340c      	adds	r4, #12
   2e284:	e717      	b.n	2e0b6 <i2c_nrfx_twim_transfer+0x56>
		    && cur_xfer.p_primary_buf == msg_buf) {
   2e286:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e288:	459a      	cmp	sl, r3
   2e28a:	d1f7      	bne.n	2e27c <i2c_nrfx_twim_transfer+0x21c>
   2e28c:	46a0      	mov	r8, r4
   2e28e:	e007      	b.n	2e2a0 <i2c_nrfx_twim_transfer+0x240>
				msg_buf_used -= msgs[j].len;
   2e290:	1aa9      	subs	r1, r5, r2
   2e292:	b28d      	uxth	r5, r1
				memcpy(msgs[j].buf,
   2e294:	f8d8 000c 	ldr.w	r0, [r8, #12]
   2e298:	fa1a f181 	uxtah	r1, sl, r1
   2e29c:	f007 f94b 	bl	35536 <memcpy>
			while (msg_buf_used >= msgs[j].len) {
   2e2a0:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2e2a4:	4295      	cmp	r5, r2
   2e2a6:	f1a8 080c 	sub.w	r8, r8, #12
   2e2aa:	d2f1      	bcs.n	2e290 <i2c_nrfx_twim_transfer+0x230>
   2e2ac:	e7e6      	b.n	2e27c <i2c_nrfx_twim_transfer+0x21c>
			ret = -ENOTSUP;
   2e2ae:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2e2b2:	e740      	b.n	2e136 <i2c_nrfx_twim_transfer+0xd6>
   2e2b4:	0003e941 	.word	0x0003e941
   2e2b8:	0003eac1 	.word	0x0003eac1
   2e2bc:	01000007 	.word	0x01000007
   2e2c0:	00039628 	.word	0x00039628
   2e2c4:	0bad0000 	.word	0x0bad0000
   2e2c8:	0003e9d5 	.word	0x0003e9d5
   2e2cc:	01000005 	.word	0x01000005
   2e2d0:	0003ea3f 	.word	0x0003ea3f
   2e2d4:	0003ea6d 	.word	0x0003ea6d

0002e2d8 <bme280_channel_get>:
}

static int bme280_channel_get(const struct device *dev,
			      enum sensor_channel chan,
			      struct sensor_value *val)
{
   2e2d8:	b510      	push	{r4, lr}
	struct bme280_data *data = dev->data;

	switch (chan) {
   2e2da:	290e      	cmp	r1, #14
	struct bme280_data *data = dev->data;
   2e2dc:	6903      	ldr	r3, [r0, #16]
	switch (chan) {
   2e2de:	d013      	beq.n	2e308 <bme280_channel_get+0x30>
   2e2e0:	2910      	cmp	r1, #16
   2e2e2:	d024      	beq.n	2e32e <bme280_channel_get+0x56>
   2e2e4:	290d      	cmp	r1, #13
   2e2e6:	d12c      	bne.n	2e342 <bme280_channel_get+0x6a>
	case SENSOR_CHAN_AMBIENT_TEMP:
		/*
		 * data->comp_temp has a resolution of 0.01 degC.  So
		 * 5123 equals 51.23 degC.
		 */
		val->val1 = data->comp_temp / 100;
   2e2e8:	2164      	movs	r1, #100	; 0x64
   2e2ea:	6a58      	ldr	r0, [r3, #36]	; 0x24
   2e2ec:	fb90 f0f1 	sdiv	r0, r0, r1
   2e2f0:	6010      	str	r0, [r2, #0]
		val->val2 = data->comp_temp % 100 * 10000;
   2e2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2e2f4:	fb93 f0f1 	sdiv	r0, r3, r1
   2e2f8:	fb01 3310 	mls	r3, r1, r0, r3
   2e2fc:	f242 7110 	movw	r1, #10000	; 0x2710
   2e300:	434b      	muls	r3, r1
   2e302:	6053      	str	r3, [r2, #4]
		break;
	default:
		return -EINVAL;
	}

	return 0;
   2e304:	2000      	movs	r0, #0
}
   2e306:	bd10      	pop	{r4, pc}
		val->val1 = (data->comp_press >> 8) / 1000U;
   2e308:	6a99      	ldr	r1, [r3, #40]	; 0x28
   2e30a:	0a08      	lsrs	r0, r1, #8
   2e30c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2e310:	fbb0 f0f1 	udiv	r0, r0, r1
   2e314:	6010      	str	r0, [r2, #0]
		val->val2 = (data->comp_press >> 8) % 1000 * 1000U +
   2e316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2e318:	0a18      	lsrs	r0, r3, #8
			(((data->comp_press & 0xff) * 1000U) >> 8);
   2e31a:	b2db      	uxtb	r3, r3
   2e31c:	434b      	muls	r3, r1
   2e31e:	0a1b      	lsrs	r3, r3, #8
		val->val2 = (data->comp_press >> 8) % 1000 * 1000U +
   2e320:	fbb0 f4f1 	udiv	r4, r0, r1
   2e324:	fb01 0014 	mls	r0, r1, r4, r0
   2e328:	fb01 3300 	mla	r3, r1, r0, r3
		break;
   2e32c:	e7e9      	b.n	2e302 <bme280_channel_get+0x2a>
		val->val1 = (data->comp_humidity >> 10);
   2e32e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   2e330:	0a89      	lsrs	r1, r1, #10
   2e332:	6011      	str	r1, [r2, #0]
		val->val2 = (((data->comp_humidity & 0x3ff) * 1000U * 1000U) >> 10);
   2e334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2e336:	4904      	ldr	r1, [pc, #16]	; (2e348 <bme280_channel_get+0x70>)
   2e338:	f3c3 0309 	ubfx	r3, r3, #0, #10
   2e33c:	434b      	muls	r3, r1
   2e33e:	0a9b      	lsrs	r3, r3, #10
		break;
   2e340:	e7df      	b.n	2e302 <bme280_channel_get+0x2a>
	switch (chan) {
   2e342:	f06f 0015 	mvn.w	r0, #21
   2e346:	e7de      	b.n	2e306 <bme280_channel_get+0x2e>
   2e348:	000f4240 	.word	0x000f4240

0002e34c <bme280_chip_init>:

	return 0;
}

static int bme280_chip_init(const struct device *dev)
{
   2e34c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2e350:	b089      	sub	sp, #36	; 0x24
	struct bme280_data *data = dev->data;
   2e352:	f8d0 9010 	ldr.w	r9, [r0, #16]
	int err;

	err = bme280_bus_check(dev);
   2e356:	f8df 8228 	ldr.w	r8, [pc, #552]	; 2e580 <bme280_chip_init+0x234>
{
   2e35a:	4606      	mov	r6, r0
   2e35c:	6840      	ldr	r0, [r0, #4]
	return cfg->bus_io->check(&cfg->bus);
   2e35e:	6883      	ldr	r3, [r0, #8]
{
   2e360:	af00      	add	r7, sp, #0
	return cfg->bus_io->check(&cfg->bus);
   2e362:	681b      	ldr	r3, [r3, #0]
   2e364:	4798      	blx	r3
	if (err < 0) {
   2e366:	1e04      	subs	r4, r0, #0
   2e368:	da06      	bge.n	2e378 <bme280_chip_init+0x2c>
		LOG_DBG("bus check failed: %d", err);
   2e36a:	466d      	mov	r5, sp
   2e36c:	b088      	sub	sp, #32
   2e36e:	466a      	mov	r2, sp
   2e370:	4b84      	ldr	r3, [pc, #528]	; (2e584 <bme280_chip_init+0x238>)
	}

	err = bme280_reg_write(dev, BME280_REG_CONFIG,
			       BME280_CONFIG_VAL);
	if (err < 0) {
		LOG_DBG("CONFIG write failed: %d", err);
   2e372:	e9c2 3805 	strd	r3, r8, [r2, #20]
   2e376:	e04d      	b.n	2e414 <bme280_chip_init+0xc8>
	err = bme280_reg_read(dev, BME280_REG_ID, &data->chip_id, 1);
   2e378:	6870      	ldr	r0, [r6, #4]
   2e37a:	2301      	movs	r3, #1
   2e37c:	f109 0234 	add.w	r2, r9, #52	; 0x34
   2e380:	21d0      	movs	r1, #208	; 0xd0
   2e382:	f009 fcbc 	bl	37cfe <bme280_reg_read.isra.0>
	if (err < 0) {
   2e386:	1e04      	subs	r4, r0, #0
   2e388:	da04      	bge.n	2e394 <bme280_chip_init+0x48>
		LOG_DBG("ID read failed: %d", err);
   2e38a:	466d      	mov	r5, sp
   2e38c:	b088      	sub	sp, #32
   2e38e:	466a      	mov	r2, sp
   2e390:	4b7d      	ldr	r3, [pc, #500]	; (2e588 <bme280_chip_init+0x23c>)
   2e392:	e7ee      	b.n	2e372 <bme280_chip_init+0x26>
	if (data->chip_id == BME280_CHIP_ID) {
   2e394:	f899 3034 	ldrb.w	r3, [r9, #52]	; 0x34
   2e398:	2b60      	cmp	r3, #96	; 0x60
		LOG_DBG("ID OK");
   2e39a:	466c      	mov	r4, sp
	if (data->chip_id == BME280_CHIP_ID) {
   2e39c:	d145      	bne.n	2e42a <bme280_chip_init+0xde>
		LOG_DBG("ID OK");
   2e39e:	b088      	sub	sp, #32
   2e3a0:	466a      	mov	r2, sp
   2e3a2:	4b7a      	ldr	r3, [pc, #488]	; (2e58c <bme280_chip_init+0x240>)
		LOG_DBG("ID OK (BMP280)");
   2e3a4:	487a      	ldr	r0, [pc, #488]	; (2e590 <bme280_chip_init+0x244>)
   2e3a6:	e9c2 3805 	strd	r3, r8, [r2, #20]
   2e3aa:	2303      	movs	r3, #3
   2e3ac:	f842 3f10 	str.w	r3, [r2, #16]!
   2e3b0:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
   2e3b4:	f009 fc9d 	bl	37cf2 <z_log_msg_static_create.constprop.0>
	err = bme280_reg_write(dev, BME280_REG_RESET, BME280_CMD_SOFT_RESET);
   2e3b8:	22b6      	movs	r2, #182	; 0xb6
   2e3ba:	6870      	ldr	r0, [r6, #4]
   2e3bc:	46a5      	mov	sp, r4
   2e3be:	21e0      	movs	r1, #224	; 0xe0
   2e3c0:	f009 fc9a 	bl	37cf8 <bme280_reg_write.isra.0>
	if (err < 0) {
   2e3c4:	2800      	cmp	r0, #0
   2e3c6:	da0f      	bge.n	2e3e8 <bme280_chip_init+0x9c>
		LOG_DBG("Soft-reset failed: %d", err);
   2e3c8:	466c      	mov	r4, sp
   2e3ca:	b088      	sub	sp, #32
   2e3cc:	466a      	mov	r2, sp
   2e3ce:	4b71      	ldr	r3, [pc, #452]	; (2e594 <bme280_chip_init+0x248>)
   2e3d0:	61d0      	str	r0, [r2, #28]
   2e3d2:	e9c2 3805 	strd	r3, r8, [r2, #20]
   2e3d6:	2304      	movs	r3, #4
   2e3d8:	f842 3f10 	str.w	r3, [r2, #16]!
   2e3dc:	486c      	ldr	r0, [pc, #432]	; (2e590 <bme280_chip_init+0x244>)
   2e3de:	f44f 5104 	mov.w	r1, #8448	; 0x2100
   2e3e2:	f009 fc86 	bl	37cf2 <z_log_msg_static_create.constprop.0>
   2e3e6:	46a5      	mov	sp, r4
	err = bme280_wait_until_ready(dev);
   2e3e8:	4630      	mov	r0, r6
   2e3ea:	f009 fc8e 	bl	37d0a <bme280_wait_until_ready>
	if (err < 0) {
   2e3ee:	1e04      	subs	r4, r0, #0
   2e3f0:	db34      	blt.n	2e45c <bme280_chip_init+0x110>
	err = bme280_reg_read(dev, BME280_REG_COMP_START,
   2e3f2:	6870      	ldr	r0, [r6, #4]
	struct bme280_data *data = dev->data;
   2e3f4:	6935      	ldr	r5, [r6, #16]
	err = bme280_reg_read(dev, BME280_REG_COMP_START,
   2e3f6:	2318      	movs	r3, #24
   2e3f8:	f107 0208 	add.w	r2, r7, #8
   2e3fc:	2188      	movs	r1, #136	; 0x88
   2e3fe:	f009 fc7e 	bl	37cfe <bme280_reg_read.isra.0>
	if (err < 0) {
   2e402:	1e04      	subs	r4, r0, #0
   2e404:	da2f      	bge.n	2e466 <bme280_chip_init+0x11a>
		LOG_DBG("COMP_START read failed: %d", err);
   2e406:	466d      	mov	r5, sp
   2e408:	b088      	sub	sp, #32
   2e40a:	466a      	mov	r2, sp
   2e40c:	4b62      	ldr	r3, [pc, #392]	; (2e598 <bme280_chip_init+0x24c>)
			LOG_DBG("HUM_COMP_PART2 read failed: %d", err);
   2e40e:	6153      	str	r3, [r2, #20]
   2e410:	4b62      	ldr	r3, [pc, #392]	; (2e59c <bme280_chip_init+0x250>)
   2e412:	6193      	str	r3, [r2, #24]
		LOG_DBG("CONFIG write failed: %d", err);
   2e414:	2304      	movs	r3, #4
   2e416:	61d4      	str	r4, [r2, #28]
   2e418:	485d      	ldr	r0, [pc, #372]	; (2e590 <bme280_chip_init+0x244>)
   2e41a:	f842 3f10 	str.w	r3, [r2, #16]!
   2e41e:	f44f 5104 	mov.w	r1, #8448	; 0x2100
   2e422:	f009 fc66 	bl	37cf2 <z_log_msg_static_create.constprop.0>
   2e426:	46ad      	mov	sp, r5
		return err;
   2e428:	e018      	b.n	2e45c <bme280_chip_init+0x110>
	} else if (data->chip_id == BMP280_CHIP_ID_MP ||
   2e42a:	2b58      	cmp	r3, #88	; 0x58
   2e42c:	d001      	beq.n	2e432 <bme280_chip_init+0xe6>
   2e42e:	2b56      	cmp	r3, #86	; 0x56
   2e430:	d103      	bne.n	2e43a <bme280_chip_init+0xee>
		LOG_DBG("ID OK (BMP280)");
   2e432:	b088      	sub	sp, #32
   2e434:	466a      	mov	r2, sp
   2e436:	4b5a      	ldr	r3, [pc, #360]	; (2e5a0 <bme280_chip_init+0x254>)
   2e438:	e7b4      	b.n	2e3a4 <bme280_chip_init+0x58>
		LOG_DBG("bad chip id 0x%x", data->chip_id);
   2e43a:	b088      	sub	sp, #32
   2e43c:	466a      	mov	r2, sp
   2e43e:	4959      	ldr	r1, [pc, #356]	; (2e5a4 <bme280_chip_init+0x258>)
   2e440:	61d3      	str	r3, [r2, #28]
   2e442:	2304      	movs	r3, #4
   2e444:	e9c2 1805 	strd	r1, r8, [r2, #20]
   2e448:	4851      	ldr	r0, [pc, #324]	; (2e590 <bme280_chip_init+0x244>)
   2e44a:	f842 3f10 	str.w	r3, [r2, #16]!
   2e44e:	f44f 5104 	mov.w	r1, #8448	; 0x2100
   2e452:	f009 fc4e 	bl	37cf2 <z_log_msg_static_create.constprop.0>
   2e456:	46a5      	mov	sp, r4
		return -ENOTSUP;
   2e458:	f06f 0485 	mvn.w	r4, #133	; 0x85
	/* Wait for the sensor to be ready */
	k_sleep(K_MSEC(1));

	LOG_DBG("\"%s\" OK", dev->name);
	return 0;
}
   2e45c:	4620      	mov	r0, r4
   2e45e:	3724      	adds	r7, #36	; 0x24
   2e460:	46bd      	mov	sp, r7
   2e462:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->dig_t1 = sys_le16_to_cpu(buf[0]);
   2e466:	893b      	ldrh	r3, [r7, #8]
   2e468:	802b      	strh	r3, [r5, #0]
	data->dig_t2 = sys_le16_to_cpu(buf[1]);
   2e46a:	897b      	ldrh	r3, [r7, #10]
   2e46c:	806b      	strh	r3, [r5, #2]
	data->dig_t3 = sys_le16_to_cpu(buf[2]);
   2e46e:	89bb      	ldrh	r3, [r7, #12]
   2e470:	80ab      	strh	r3, [r5, #4]
	data->dig_p1 = sys_le16_to_cpu(buf[3]);
   2e472:	89fb      	ldrh	r3, [r7, #14]
   2e474:	80eb      	strh	r3, [r5, #6]
	data->dig_p2 = sys_le16_to_cpu(buf[4]);
   2e476:	8a3b      	ldrh	r3, [r7, #16]
   2e478:	812b      	strh	r3, [r5, #8]
	data->dig_p3 = sys_le16_to_cpu(buf[5]);
   2e47a:	8a7b      	ldrh	r3, [r7, #18]
   2e47c:	816b      	strh	r3, [r5, #10]
	data->dig_p4 = sys_le16_to_cpu(buf[6]);
   2e47e:	8abb      	ldrh	r3, [r7, #20]
   2e480:	81ab      	strh	r3, [r5, #12]
	data->dig_p5 = sys_le16_to_cpu(buf[7]);
   2e482:	8afb      	ldrh	r3, [r7, #22]
   2e484:	81eb      	strh	r3, [r5, #14]
	data->dig_p6 = sys_le16_to_cpu(buf[8]);
   2e486:	8b3b      	ldrh	r3, [r7, #24]
   2e488:	822b      	strh	r3, [r5, #16]
	data->dig_p7 = sys_le16_to_cpu(buf[9]);
   2e48a:	8b7b      	ldrh	r3, [r7, #26]
   2e48c:	826b      	strh	r3, [r5, #18]
	data->dig_p8 = sys_le16_to_cpu(buf[10]);
   2e48e:	8bbb      	ldrh	r3, [r7, #28]
   2e490:	82ab      	strh	r3, [r5, #20]
	data->dig_p9 = sys_le16_to_cpu(buf[11]);
   2e492:	8bfb      	ldrh	r3, [r7, #30]
   2e494:	82eb      	strh	r3, [r5, #22]
	if (data->chip_id == BME280_CHIP_ID) {
   2e496:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   2e49a:	2b60      	cmp	r3, #96	; 0x60
   2e49c:	d12d      	bne.n	2e4fa <bme280_chip_init+0x1ae>
		err = bme280_reg_read(dev, BME280_REG_HUM_COMP_PART1,
   2e49e:	6870      	ldr	r0, [r6, #4]
   2e4a0:	2301      	movs	r3, #1
   2e4a2:	f105 0218 	add.w	r2, r5, #24
   2e4a6:	21a1      	movs	r1, #161	; 0xa1
   2e4a8:	f009 fc29 	bl	37cfe <bme280_reg_read.isra.0>
		if (err < 0) {
   2e4ac:	1e04      	subs	r4, r0, #0
   2e4ae:	da04      	bge.n	2e4ba <bme280_chip_init+0x16e>
			LOG_DBG("HUM_COMP_PART1 read failed: %d", err);
   2e4b0:	466d      	mov	r5, sp
   2e4b2:	b088      	sub	sp, #32
   2e4b4:	466a      	mov	r2, sp
   2e4b6:	4b3c      	ldr	r3, [pc, #240]	; (2e5a8 <bme280_chip_init+0x25c>)
   2e4b8:	e7a9      	b.n	2e40e <bme280_chip_init+0xc2>
		err = bme280_reg_read(dev, BME280_REG_HUM_COMP_PART2, hbuf, 7);
   2e4ba:	6870      	ldr	r0, [r6, #4]
   2e4bc:	2307      	movs	r3, #7
   2e4be:	463a      	mov	r2, r7
   2e4c0:	21e1      	movs	r1, #225	; 0xe1
   2e4c2:	f009 fc1c 	bl	37cfe <bme280_reg_read.isra.0>
		if (err < 0) {
   2e4c6:	1e04      	subs	r4, r0, #0
   2e4c8:	da04      	bge.n	2e4d4 <bme280_chip_init+0x188>
			LOG_DBG("HUM_COMP_PART2 read failed: %d", err);
   2e4ca:	466d      	mov	r5, sp
   2e4cc:	b088      	sub	sp, #32
   2e4ce:	466a      	mov	r2, sp
   2e4d0:	4b36      	ldr	r3, [pc, #216]	; (2e5ac <bme280_chip_init+0x260>)
   2e4d2:	e79c      	b.n	2e40e <bme280_chip_init+0xc2>
		data->dig_h2 = (hbuf[1] << 8) | hbuf[0];
   2e4d4:	883b      	ldrh	r3, [r7, #0]
   2e4d6:	836b      	strh	r3, [r5, #26]
		data->dig_h3 = hbuf[2];
   2e4d8:	78bb      	ldrb	r3, [r7, #2]
   2e4da:	772b      	strb	r3, [r5, #28]
		data->dig_h4 = (hbuf[3] << 4) | (hbuf[4] & 0x0F);
   2e4dc:	793b      	ldrb	r3, [r7, #4]
   2e4de:	78f9      	ldrb	r1, [r7, #3]
   2e4e0:	f003 020f 	and.w	r2, r3, #15
   2e4e4:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
   2e4e8:	83ea      	strh	r2, [r5, #30]
		data->dig_h5 = ((hbuf[4] >> 4) & 0x0F) | (hbuf[5] << 4);
   2e4ea:	797a      	ldrb	r2, [r7, #5]
   2e4ec:	091b      	lsrs	r3, r3, #4
   2e4ee:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   2e4f2:	842b      	strh	r3, [r5, #32]
		data->dig_h6 = hbuf[6];
   2e4f4:	79bb      	ldrb	r3, [r7, #6]
   2e4f6:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
	if (data->chip_id == BME280_CHIP_ID) {
   2e4fa:	f899 3034 	ldrb.w	r3, [r9, #52]	; 0x34
   2e4fe:	6870      	ldr	r0, [r6, #4]
   2e500:	2b60      	cmp	r3, #96	; 0x60
   2e502:	d10a      	bne.n	2e51a <bme280_chip_init+0x1ce>
		err = bme280_reg_write(dev, BME280_REG_CTRL_HUM,
   2e504:	2205      	movs	r2, #5
   2e506:	21f2      	movs	r1, #242	; 0xf2
   2e508:	f009 fbf6 	bl	37cf8 <bme280_reg_write.isra.0>
		if (err < 0) {
   2e50c:	1e04      	subs	r4, r0, #0
   2e50e:	da04      	bge.n	2e51a <bme280_chip_init+0x1ce>
			LOG_DBG("CTRL_HUM write failed: %d", err);
   2e510:	466d      	mov	r5, sp
   2e512:	b088      	sub	sp, #32
   2e514:	466a      	mov	r2, sp
   2e516:	4b26      	ldr	r3, [pc, #152]	; (2e5b0 <bme280_chip_init+0x264>)
   2e518:	e72b      	b.n	2e372 <bme280_chip_init+0x26>
	err = bme280_reg_write(dev, BME280_REG_CTRL_MEAS,
   2e51a:	6870      	ldr	r0, [r6, #4]
   2e51c:	2257      	movs	r2, #87	; 0x57
   2e51e:	21f4      	movs	r1, #244	; 0xf4
   2e520:	f009 fbea 	bl	37cf8 <bme280_reg_write.isra.0>
	if (err < 0) {
   2e524:	1e04      	subs	r4, r0, #0
   2e526:	da04      	bge.n	2e532 <bme280_chip_init+0x1e6>
		LOG_DBG("CTRL_MEAS write failed: %d", err);
   2e528:	466d      	mov	r5, sp
   2e52a:	b088      	sub	sp, #32
   2e52c:	466a      	mov	r2, sp
   2e52e:	4b21      	ldr	r3, [pc, #132]	; (2e5b4 <bme280_chip_init+0x268>)
   2e530:	e71f      	b.n	2e372 <bme280_chip_init+0x26>
	err = bme280_reg_write(dev, BME280_REG_CONFIG,
   2e532:	6870      	ldr	r0, [r6, #4]
   2e534:	22a8      	movs	r2, #168	; 0xa8
   2e536:	21f5      	movs	r1, #245	; 0xf5
   2e538:	f009 fbde 	bl	37cf8 <bme280_reg_write.isra.0>
	if (err < 0) {
   2e53c:	1e04      	subs	r4, r0, #0
   2e53e:	da04      	bge.n	2e54a <bme280_chip_init+0x1fe>
		LOG_DBG("CONFIG write failed: %d", err);
   2e540:	466d      	mov	r5, sp
   2e542:	b088      	sub	sp, #32
   2e544:	466a      	mov	r2, sp
   2e546:	4b1c      	ldr	r3, [pc, #112]	; (2e5b8 <bme280_chip_init+0x26c>)
   2e548:	e713      	b.n	2e372 <bme280_chip_init+0x26>
	return z_impl_k_sleep(timeout);
   2e54a:	2100      	movs	r1, #0
   2e54c:	2021      	movs	r0, #33	; 0x21
   2e54e:	f003 ffc9 	bl	324e4 <z_impl_k_sleep>
	LOG_DBG("\"%s\" OK", dev->name);
   2e552:	466c      	mov	r4, sp
   2e554:	b08a      	sub	sp, #40	; 0x28
   2e556:	6833      	ldr	r3, [r6, #0]
   2e558:	466a      	mov	r2, sp
   2e55a:	4918      	ldr	r1, [pc, #96]	; (2e5bc <bme280_chip_init+0x270>)
   2e55c:	61d3      	str	r3, [r2, #28]
   2e55e:	f240 3301 	movw	r3, #769	; 0x301
   2e562:	8413      	strh	r3, [r2, #32]
   2e564:	4b16      	ldr	r3, [pc, #88]	; (2e5c0 <bme280_chip_init+0x274>)
   2e566:	480a      	ldr	r0, [pc, #40]	; (2e590 <bme280_chip_init+0x244>)
   2e568:	e9c2 1805 	strd	r1, r8, [r2, #20]
   2e56c:	f842 3f10 	str.w	r3, [r2, #16]!
   2e570:	f44f 5114 	mov.w	r1, #9472	; 0x2500
   2e574:	f009 fbbd 	bl	37cf2 <z_log_msg_static_create.constprop.0>
   2e578:	46a5      	mov	sp, r4
	return 0;
   2e57a:	2400      	movs	r4, #0
   2e57c:	e76e      	b.n	2e45c <bme280_chip_init+0x110>
   2e57e:	bf00      	nop
   2e580:	0003ec5f 	.word	0x0003ec5f
   2e584:	0003eb00 	.word	0x0003eb00
   2e588:	0003eb19 	.word	0x0003eb19
   2e58c:	0003eb30 	.word	0x0003eb30
   2e590:	00039538 	.word	0x00039538
   2e594:	0003eb62 	.word	0x0003eb62
   2e598:	0003eb7c 	.word	0x0003eb7c
   2e59c:	0003ec46 	.word	0x0003ec46
   2e5a0:	0003eb3a 	.word	0x0003eb3a
   2e5a4:	0003eb4d 	.word	0x0003eb4d
   2e5a8:	0003eb9b 	.word	0x0003eb9b
   2e5ac:	0003ebbe 	.word	0x0003ebbe
   2e5b0:	0003ebe1 	.word	0x0003ebe1
   2e5b4:	0003ebff 	.word	0x0003ebff
   2e5b8:	0003ec1e 	.word	0x0003ec1e
   2e5bc:	0003ec3a 	.word	0x0003ec3a
   2e5c0:	01000004 	.word	0x01000004

0002e5c4 <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
   2e5c4:	4b01      	ldr	r3, [pc, #4]	; (2e5cc <hfclk_on_callback+0x8>)
   2e5c6:	2201      	movs	r2, #1
   2e5c8:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
   2e5ca:	4770      	bx	lr
   2e5cc:	4000c000 	.word	0x4000c000

0002e5d0 <temp_nrf5_isr>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_temp_event_clear(NRF_TEMP_Type * p_reg, nrf_temp_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2e5d0:	4b04      	ldr	r3, [pc, #16]	; (2e5e4 <temp_nrf5_isr+0x14>)
}

static void temp_nrf5_isr(void *arg)
{
	const struct device *dev = (const struct device *)arg;
	struct temp_nrf5_data *data = dev->data;
   2e5d2:	6900      	ldr	r0, [r0, #16]
   2e5d4:	2200      	movs	r2, #0
   2e5d6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   2e5da:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	z_impl_k_sem_give(sem);
   2e5de:	f003 ba79 	b.w	31ad4 <z_impl_k_sem_give>
   2e5e2:	bf00      	nop
   2e5e4:	4000c000 	.word	0x4000c000

0002e5e8 <temp_nrf5_sample_fetch>:
{
   2e5e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e5ec:	b084      	sub	sp, #16
	struct temp_nrf5_data *data = dev->data;
   2e5ee:	6905      	ldr	r5, [r0, #16]
	if (data->clk_mgr == NULL) {
   2e5f0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
{
   2e5f2:	af00      	add	r7, sp, #0
	if (data->clk_mgr == NULL) {
   2e5f4:	2b00      	cmp	r3, #0
   2e5f6:	d042      	beq.n	2e67e <temp_nrf5_sample_fetch+0x96>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
   2e5f8:	2939      	cmp	r1, #57	; 0x39
   2e5fa:	d001      	beq.n	2e600 <temp_nrf5_sample_fetch+0x18>
   2e5fc:	290c      	cmp	r1, #12
   2e5fe:	d141      	bne.n	2e684 <temp_nrf5_sample_fetch+0x9c>
	k_mutex_lock(&data->mutex, K_FOREVER);
   2e600:	f105 0618 	add.w	r6, r5, #24
	return z_impl_k_mutex_lock(mutex, timeout);
   2e604:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2e608:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2e60c:	4630      	mov	r0, r6
   2e60e:	f003 f977 	bl	31900 <z_impl_k_mutex_lock>
	*notify = (struct sys_notify){
   2e612:	4b1e      	ldr	r3, [pc, #120]	; (2e68c <temp_nrf5_sample_fetch+0xa4>)
   2e614:	607b      	str	r3, [r7, #4]
   2e616:	2400      	movs	r4, #0
   2e618:	2303      	movs	r3, #3
	r = onoff_request(data->clk_mgr, &cli);
   2e61a:	6b28      	ldr	r0, [r5, #48]	; 0x30
   2e61c:	60fc      	str	r4, [r7, #12]
   2e61e:	60bb      	str	r3, [r7, #8]
   2e620:	4639      	mov	r1, r7
   2e622:	f004 fdf2 	bl	3320a <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
   2e626:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2e62a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
   2e62e:	f8df 8060 	ldr.w	r8, [pc, #96]	; 2e690 <temp_nrf5_sample_fetch+0xa8>
   2e632:	4628      	mov	r0, r5
   2e634:	f003 fa74 	bl	31b20 <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
   2e638:	6b28      	ldr	r0, [r5, #48]	; 0x30
   2e63a:	f004 fe3e 	bl	332ba <onoff_release>
   2e63e:	f8d8 3508 	ldr.w	r3, [r8, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
   2e642:	62eb      	str	r3, [r5, #44]	; 0x2c
	LOG_DBG("sample: %d", data->sample);
   2e644:	466d      	mov	r5, sp
   2e646:	b088      	sub	sp, #32
   2e648:	466a      	mov	r2, sp
   2e64a:	4912      	ldr	r1, [pc, #72]	; (2e694 <temp_nrf5_sample_fetch+0xac>)
   2e64c:	6151      	str	r1, [r2, #20]
   2e64e:	4912      	ldr	r1, [pc, #72]	; (2e698 <temp_nrf5_sample_fetch+0xb0>)
   2e650:	e9c2 1306 	strd	r1, r3, [r2, #24]
   2e654:	2304      	movs	r3, #4
   2e656:	f842 3f10 	str.w	r3, [r2, #16]!
   2e65a:	4810      	ldr	r0, [pc, #64]	; (2e69c <temp_nrf5_sample_fetch+0xb4>)
   2e65c:	4623      	mov	r3, r4
   2e65e:	f44f 5104 	mov.w	r1, #8448	; 0x2100
   2e662:	f7e4 fd87 	bl	13174 <z_impl_z_log_msg_static_create>
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
   2e666:	2301      	movs	r3, #1
   2e668:	46ad      	mov	sp, r5
   2e66a:	f8c8 3004 	str.w	r3, [r8, #4]
	return z_impl_k_mutex_unlock(mutex);
   2e66e:	4630      	mov	r0, r6
   2e670:	f003 f9c0 	bl	319f4 <z_impl_k_mutex_unlock>
	return 0;
   2e674:	4620      	mov	r0, r4
}
   2e676:	3710      	adds	r7, #16
   2e678:	46bd      	mov	sp, r7
   2e67a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EAGAIN;
   2e67e:	f06f 000a 	mvn.w	r0, #10
   2e682:	e7f8      	b.n	2e676 <temp_nrf5_sample_fetch+0x8e>
		return -ENOTSUP;
   2e684:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2e688:	e7f5      	b.n	2e676 <temp_nrf5_sample_fetch+0x8e>
   2e68a:	bf00      	nop
   2e68c:	0002e5c5 	.word	0x0002e5c5
   2e690:	4000c000 	.word	0x4000c000
   2e694:	0003ec81 	.word	0x0003ec81
   2e698:	0003eca6 	.word	0x0003eca6
   2e69c:	00039688 	.word	0x00039688

0002e6a0 <temp_nrf5_init>:
	.sample_fetch = temp_nrf5_sample_fetch,
	.channel_get = temp_nrf5_channel_get,
};

static int temp_nrf5_init(const struct device *dev)
{
   2e6a0:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
   2e6a2:	6904      	ldr	r4, [r0, #16]

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
   2e6a4:	2000      	movs	r0, #0
   2e6a6:	f7ff fa11 	bl	2dacc <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
   2e6aa:	6320      	str	r0, [r4, #48]	; 0x30
	return z_impl_k_sem_init(sem, initial_count, limit);
   2e6ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2e6b0:	2100      	movs	r1, #0
   2e6b2:	4620      	mov	r0, r4
   2e6b4:	f00a f905 	bl	388c2 <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
   2e6b8:	f104 0018 	add.w	r0, r4, #24
   2e6bc:	f00a f843 	bl	38746 <z_impl_k_mutex_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&data->mutex);

	IRQ_CONNECT(
   2e6c0:	2200      	movs	r2, #0
   2e6c2:	2101      	movs	r1, #1
   2e6c4:	200c      	movs	r0, #12
   2e6c6:	f7e6 f943 	bl	14950 <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_DT_INST_GET(0),
		0);
	irq_enable(DT_INST_IRQN(0));
   2e6ca:	200c      	movs	r0, #12
   2e6cc:	f7e6 f910 	bl	148f0 <arch_irq_enable>
    p_reg->INTENSET = mask;
   2e6d0:	4b02      	ldr	r3, [pc, #8]	; (2e6dc <temp_nrf5_init+0x3c>)
   2e6d2:	2201      	movs	r2, #1
   2e6d4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
   2e6d8:	2000      	movs	r0, #0
   2e6da:	bd10      	pop	{r4, pc}
   2e6dc:	4000c000 	.word	0x4000c000

0002e6e0 <temp_nrf5_channel_get>:
{
   2e6e0:	b598      	push	{r3, r4, r7, lr}
	if (chan != SENSOR_CHAN_DIE_TEMP) {
   2e6e2:	290c      	cmp	r1, #12
	struct temp_nrf5_data *data = dev->data;
   2e6e4:	6903      	ldr	r3, [r0, #16]
{
   2e6e6:	af00      	add	r7, sp, #0
	if (chan != SENSOR_CHAN_DIE_TEMP) {
   2e6e8:	d11f      	bne.n	2e72a <temp_nrf5_channel_get+0x4a>
	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
   2e6ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2e6ec:	4910      	ldr	r1, [pc, #64]	; (2e730 <temp_nrf5_channel_get+0x50>)
	val->val1 = uval / 1000000;
   2e6ee:	4811      	ldr	r0, [pc, #68]	; (2e734 <temp_nrf5_channel_get+0x54>)
	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
   2e6f0:	434b      	muls	r3, r1
	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);
   2e6f2:	466c      	mov	r4, sp
	val->val1 = uval / 1000000;
   2e6f4:	fb93 f1f0 	sdiv	r1, r3, r0
	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);
   2e6f8:	b08a      	sub	sp, #40	; 0x28
	val->val2 = uval % 1000000;
   2e6fa:	fb00 3311 	mls	r3, r0, r1, r3
	val->val1 = uval / 1000000;
   2e6fe:	6011      	str	r1, [r2, #0]
	val->val2 = uval % 1000000;
   2e700:	6053      	str	r3, [r2, #4]
	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);
   2e702:	466a      	mov	r2, sp
   2e704:	480c      	ldr	r0, [pc, #48]	; (2e738 <temp_nrf5_channel_get+0x58>)
   2e706:	6150      	str	r0, [r2, #20]
   2e708:	480c      	ldr	r0, [pc, #48]	; (2e73c <temp_nrf5_channel_get+0x5c>)
   2e70a:	6213      	str	r3, [r2, #32]
   2e70c:	2305      	movs	r3, #5
   2e70e:	e9c2 0106 	strd	r0, r1, [r2, #24]
   2e712:	f842 3f10 	str.w	r3, [r2, #16]!
   2e716:	480a      	ldr	r0, [pc, #40]	; (2e740 <temp_nrf5_channel_get+0x60>)
   2e718:	2300      	movs	r3, #0
   2e71a:	f44f 5124 	mov.w	r1, #10496	; 0x2900
   2e71e:	f7e4 fd29 	bl	13174 <z_impl_z_log_msg_static_create>
	return 0;
   2e722:	2000      	movs	r0, #0
   2e724:	46a5      	mov	sp, r4
}
   2e726:	46bd      	mov	sp, r7
   2e728:	bd98      	pop	{r3, r4, r7, pc}
		return -ENOTSUP;
   2e72a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2e72e:	e7fa      	b.n	2e726 <temp_nrf5_channel_get+0x46>
   2e730:	0003d090 	.word	0x0003d090
   2e734:	000f4240 	.word	0x000f4240
   2e738:	0003ec90 	.word	0x0003ec90
   2e73c:	0003ecbd 	.word	0x0003ecbd
   2e740:	00039688 	.word	0x00039688

0002e744 <spi_nrfx_init>:
}
#endif /* CONFIG_PM_DEVICE */


static int spi_nrfx_init(const struct device *dev)
{
   2e744:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2e748:	b083      	sub	sp, #12
	const struct spi_nrfx_config *dev_config = dev->config;
   2e74a:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   2e74c:	6905      	ldr	r5, [r0, #16]
	int err;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   2e74e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
{
   2e750:	af00      	add	r7, sp, #0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   2e752:	1d3a      	adds	r2, r7, #4
   2e754:	2100      	movs	r1, #0
   2e756:	4630      	mov	r0, r6
   2e758:	f009 fdd3 	bl	38302 <pinctrl_lookup_state>
	if (ret < 0) {
   2e75c:	2800      	cmp	r0, #0
   2e75e:	db34      	blt.n	2e7ca <spi_nrfx_init+0x86>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   2e760:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   2e762:	6832      	ldr	r2, [r6, #0]
   2e764:	7919      	ldrb	r1, [r3, #4]
   2e766:	6818      	ldr	r0, [r3, #0]
   2e768:	f001 faaa 	bl	2fcc0 <pinctrl_configure_pins>
	if (err < 0) {
   2e76c:	2800      	cmp	r0, #0
   2e76e:	db2c      	blt.n	2e7ca <spi_nrfx_init+0x86>
		return err;
	}
#endif

	dev_config->irq_connect();
   2e770:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2e772:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   2e774:	68ac      	ldr	r4, [r5, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2e776:	2601      	movs	r6, #1
   2e778:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   2e77c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2e780:	429c      	cmp	r4, r3
   2e782:	d304      	bcc.n	2e78e <spi_nrfx_init+0x4a>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   2e784:	4628      	mov	r0, r5
   2e786:	f009 fc80 	bl	3808a <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
   2e78a:	2000      	movs	r0, #0

#ifdef CONFIG_SOC_NRF52832_ALLOW_SPIM_DESPITE_PAN_58
	return anomaly_58_workaround_init(dev);
#else
	return 0;
   2e78c:	e01d      	b.n	2e7ca <spi_nrfx_init+0x86>
		if (!device_is_ready(cs_gpio->port)) {
   2e78e:	6820      	ldr	r0, [r4, #0]
   2e790:	f009 fef4 	bl	3857c <z_device_is_ready>
   2e794:	b9e8      	cbnz	r0, 2e7d2 <spi_nrfx_init+0x8e>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   2e796:	6823      	ldr	r3, [r4, #0]
   2e798:	6819      	ldr	r1, [r3, #0]
   2e79a:	7923      	ldrb	r3, [r4, #4]
   2e79c:	466c      	mov	r4, sp
   2e79e:	b08a      	sub	sp, #40	; 0x28
   2e7a0:	466a      	mov	r2, sp
   2e7a2:	481d      	ldr	r0, [pc, #116]	; (2e818 <spi_nrfx_init+0xd4>)
   2e7a4:	6150      	str	r0, [r2, #20]
   2e7a6:	6213      	str	r3, [r2, #32]
   2e7a8:	481c      	ldr	r0, [pc, #112]	; (2e81c <spi_nrfx_init+0xd8>)
   2e7aa:	f240 3301 	movw	r3, #769	; 0x301
   2e7ae:	8493      	strh	r3, [r2, #36]	; 0x24
   2e7b0:	4b1b      	ldr	r3, [pc, #108]	; (2e820 <spi_nrfx_init+0xdc>)
   2e7b2:	e9c2 0106 	strd	r0, r1, [r2, #24]
   2e7b6:	481b      	ldr	r0, [pc, #108]	; (2e824 <spi_nrfx_init+0xe0>)
   2e7b8:	f842 3f10 	str.w	r3, [r2, #16]!
   2e7bc:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   2e7c0:	f009 fc2a 	bl	38018 <z_log_msg_static_create.constprop.0>
			return -ENODEV;
   2e7c4:	f06f 0012 	mvn.w	r0, #18
   2e7c8:	46a5      	mov	sp, r4
#endif
}
   2e7ca:	370c      	adds	r7, #12
   2e7cc:	46bd      	mov	sp, r7
   2e7ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return gpio_pin_configure(spec->port,
   2e7d2:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   2e7d4:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
   2e7d6:	88e3      	ldrh	r3, [r4, #6]
	struct gpio_driver_data *data =
   2e7d8:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
   2e7dc:	f8d0 9008 	ldr.w	r9, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2e7e0:	f8de c000 	ldr.w	ip, [lr]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   2e7e4:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
   2e7e6:	bf54      	ite	pl
   2e7e8:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   2e7ec:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   2e7f0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2e7f4:	fa06 f801 	lsl.w	r8, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   2e7f8:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2e7fa:	bf4c      	ite	mi
   2e7fc:	ea4c 0308 	orrmi.w	r3, ip, r8
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2e800:	ea2c 0308 	bicpl.w	r3, ip, r8
   2e804:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
   2e808:	f8d9 3000 	ldr.w	r3, [r9]
   2e80c:	4798      	blx	r3
		if (ret < 0) {
   2e80e:	2800      	cmp	r0, #0
   2e810:	dbdb      	blt.n	2e7ca <spi_nrfx_init+0x86>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   2e812:	3408      	adds	r4, #8
   2e814:	e7b0      	b.n	2e778 <spi_nrfx_init+0x34>
   2e816:	bf00      	nop
   2e818:	0003eceb 	.word	0x0003eceb
   2e81c:	0003ee59 	.word	0x0003ee59
   2e820:	01000005 	.word	0x01000005
   2e824:	00039680 	.word	0x00039680

0002e828 <transfer_next_chunk>:
{
   2e828:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   2e82a:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   2e82c:	6846      	ldr	r6, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   2e82e:	6da5      	ldr	r5, [r4, #88]	; 0x58
		return ctx->rx_len;
   2e830:	6e23      	ldr	r3, [r4, #96]	; 0x60
	if (!ctx->tx_len) {
   2e832:	b98d      	cbnz	r5, 2e858 <transfer_next_chunk+0x30>
	if (chunk_len > 0) {
   2e834:	2b00      	cmp	r3, #0
   2e836:	d137      	bne.n	2e8a8 <transfer_next_chunk+0x80>
	int error = 0;
   2e838:	461d      	mov	r5, r3
	_spi_context_cs_control(ctx, on, false);
   2e83a:	2200      	movs	r2, #0
   2e83c:	4611      	mov	r1, r2
   2e83e:	4620      	mov	r0, r4
   2e840:	f009 fc01 	bl	38046 <_spi_context_cs_control>
	ctx->sync_status = status;
   2e844:	6425      	str	r5, [r4, #64]	; 0x40
	z_impl_k_sem_give(sem);
   2e846:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2e84a:	f003 f943 	bl	31ad4 <z_impl_k_sem_give>
	dev_data->busy = false;
   2e84e:	2300      	movs	r3, #0
   2e850:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   2e854:	b004      	add	sp, #16
   2e856:	bd70      	pop	{r4, r5, r6, pc}
		const uint8_t *tx_buf = ctx->tx_buf;
   2e858:	6d61      	ldr	r1, [r4, #84]	; 0x54
	} else if (!ctx->rx_len) {
   2e85a:	bb0b      	cbnz	r3, 2e8a0 <transfer_next_chunk+0x78>
	return !!(ctx->tx_buf && ctx->tx_len);
   2e85c:	bb39      	cbnz	r1, 2e8ae <transfer_next_chunk+0x86>
		if (chunk_len > MAX_CHUNK_LEN) {
   2e85e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2e862:	42aa      	cmp	r2, r5
   2e864:	6d63      	ldr	r3, [r4, #84]	; 0x54
		xfer.p_tx_buffer = tx_buf;
   2e866:	9100      	str	r1, [sp, #0]
		if (chunk_len > MAX_CHUNK_LEN) {
   2e868:	bf28      	it	cs
   2e86a:	462a      	movcs	r2, r5
		dev_data->chunk_len = chunk_len;
   2e86c:	66a2      	str	r2, [r4, #104]	; 0x68
   2e86e:	b11b      	cbz	r3, 2e878 <transfer_next_chunk+0x50>
   2e870:	6da3      	ldr	r3, [r4, #88]	; 0x58
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   2e872:	2b00      	cmp	r3, #0
   2e874:	bf18      	it	ne
   2e876:	4613      	movne	r3, r2
   2e878:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   2e87a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2e87c:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   2e87e:	b11b      	cbz	r3, 2e888 <transfer_next_chunk+0x60>
   2e880:	6e23      	ldr	r3, [r4, #96]	; 0x60
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   2e882:	2b00      	cmp	r3, #0
   2e884:	bf18      	it	ne
   2e886:	4613      	movne	r3, r2
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   2e888:	2200      	movs	r2, #0
   2e88a:	4669      	mov	r1, sp
   2e88c:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   2e88e:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   2e890:	f002 f982 	bl	30b98 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   2e894:	4b0d      	ldr	r3, [pc, #52]	; (2e8cc <transfer_next_chunk+0xa4>)
   2e896:	4298      	cmp	r0, r3
   2e898:	d0dc      	beq.n	2e854 <transfer_next_chunk+0x2c>
			error = -EIO;
   2e89a:	f06f 0504 	mvn.w	r5, #4
   2e89e:	e7cc      	b.n	2e83a <transfer_next_chunk+0x12>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   2e8a0:	429d      	cmp	r5, r3
   2e8a2:	bf28      	it	cs
   2e8a4:	461d      	movcs	r5, r3
   2e8a6:	e7d9      	b.n	2e85c <transfer_next_chunk+0x34>
		const uint8_t *tx_buf = ctx->tx_buf;
   2e8a8:	6d61      	ldr	r1, [r4, #84]	; 0x54
   2e8aa:	461d      	mov	r5, r3
   2e8ac:	e7d7      	b.n	2e85e <transfer_next_chunk+0x36>
   2e8ae:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   2e8b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   2e8b6:	d0d2      	beq.n	2e85e <transfer_next_chunk+0x36>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
   2e8b8:	2d08      	cmp	r5, #8
   2e8ba:	bf28      	it	cs
   2e8bc:	2508      	movcs	r5, #8
			memcpy(dev_data->buffer, tx_buf, chunk_len);
   2e8be:	6f20      	ldr	r0, [r4, #112]	; 0x70
   2e8c0:	462a      	mov	r2, r5
   2e8c2:	f006 fe38 	bl	35536 <memcpy>
			tx_buf = dev_data->buffer;
   2e8c6:	6f21      	ldr	r1, [r4, #112]	; 0x70
   2e8c8:	e7c9      	b.n	2e85e <transfer_next_chunk+0x36>
   2e8ca:	bf00      	nop
   2e8cc:	0bad0000 	.word	0x0bad0000

0002e8d0 <event_handler>:
{
   2e8d0:	b5b0      	push	{r4, r5, r7, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   2e8d2:	7803      	ldrb	r3, [r0, #0]
{
   2e8d4:	af00      	add	r7, sp, #0
   2e8d6:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   2e8d8:	bb63      	cbnz	r3, 2e934 <event_handler+0x64>
	if (!ctx->tx_len) {
   2e8da:	6d8b      	ldr	r3, [r1, #88]	; 0x58
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   2e8dc:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   2e8de:	b18b      	cbz	r3, 2e904 <event_handler+0x34>
	if (len > ctx->tx_len) {
   2e8e0:	429a      	cmp	r2, r3
   2e8e2:	d929      	bls.n	2e938 <event_handler+0x68>
		LOG_ERR("Update exceeds current buffer");
   2e8e4:	466d      	mov	r5, sp
   2e8e6:	b088      	sub	sp, #32
   2e8e8:	466a      	mov	r2, sp
   2e8ea:	4b2c      	ldr	r3, [pc, #176]	; (2e99c <event_handler+0xcc>)
   2e8ec:	6153      	str	r3, [r2, #20]
   2e8ee:	4b2c      	ldr	r3, [pc, #176]	; (2e9a0 <event_handler+0xd0>)
   2e8f0:	6193      	str	r3, [r2, #24]
   2e8f2:	2303      	movs	r3, #3
   2e8f4:	f842 3f10 	str.w	r3, [r2, #16]!
   2e8f8:	482a      	ldr	r0, [pc, #168]	; (2e9a4 <event_handler+0xd4>)
   2e8fa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2e8fe:	f009 fb8b 	bl	38018 <z_log_msg_static_create.constprop.0>
   2e902:	46ad      	mov	sp, r5
	if (!ctx->rx_len) {
   2e904:	6e23      	ldr	r3, [r4, #96]	; 0x60
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   2e906:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   2e908:	b18b      	cbz	r3, 2e92e <event_handler+0x5e>
	if (len > ctx->rx_len) {
   2e90a:	429a      	cmp	r2, r3
   2e90c:	d92c      	bls.n	2e968 <event_handler+0x98>
		LOG_ERR("Update exceeds current buffer");
   2e90e:	466d      	mov	r5, sp
   2e910:	b088      	sub	sp, #32
   2e912:	466a      	mov	r2, sp
   2e914:	4b21      	ldr	r3, [pc, #132]	; (2e99c <event_handler+0xcc>)
   2e916:	6153      	str	r3, [r2, #20]
   2e918:	4b23      	ldr	r3, [pc, #140]	; (2e9a8 <event_handler+0xd8>)
   2e91a:	6193      	str	r3, [r2, #24]
   2e91c:	2303      	movs	r3, #3
   2e91e:	f842 3f10 	str.w	r3, [r2, #16]!
   2e922:	4820      	ldr	r0, [pc, #128]	; (2e9a4 <event_handler+0xd4>)
   2e924:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2e928:	f009 fb76 	bl	38018 <z_log_msg_static_create.constprop.0>
   2e92c:	46ad      	mov	sp, r5
		transfer_next_chunk(dev_data->dev);
   2e92e:	6e60      	ldr	r0, [r4, #100]	; 0x64
   2e930:	f7ff ff7a 	bl	2e828 <transfer_next_chunk>
}
   2e934:	46bd      	mov	sp, r7
   2e936:	bdb0      	pop	{r4, r5, r7, pc}
	ctx->tx_len -= len;
   2e938:	1a9b      	subs	r3, r3, r2
   2e93a:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
   2e93c:	b973      	cbnz	r3, 2e95c <event_handler+0x8c>
		++ctx->current_tx;
   2e93e:	6c4b      	ldr	r3, [r1, #68]	; 0x44
   2e940:	3308      	adds	r3, #8
   2e942:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
   2e944:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   2e946:	3b01      	subs	r3, #1
   2e948:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   2e94a:	f101 0258 	add.w	r2, r1, #88	; 0x58
   2e94e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   2e952:	3148      	adds	r1, #72	; 0x48
   2e954:	f009 fb4d 	bl	37ff2 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   2e958:	6560      	str	r0, [r4, #84]	; 0x54
   2e95a:	e7d3      	b.n	2e904 <event_handler+0x34>
	} else if (ctx->tx_buf) {
   2e95c:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   2e95e:	2b00      	cmp	r3, #0
   2e960:	d0d0      	beq.n	2e904 <event_handler+0x34>
		ctx->tx_buf += dfs * len;
   2e962:	4413      	add	r3, r2
   2e964:	654b      	str	r3, [r1, #84]	; 0x54
   2e966:	e7cd      	b.n	2e904 <event_handler+0x34>
	ctx->rx_len -= len;
   2e968:	1a9b      	subs	r3, r3, r2
   2e96a:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   2e96c:	b97b      	cbnz	r3, 2e98e <event_handler+0xbe>
		++ctx->current_rx;
   2e96e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   2e970:	3308      	adds	r3, #8
   2e972:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   2e974:	6d23      	ldr	r3, [r4, #80]	; 0x50
   2e976:	3b01      	subs	r3, #1
   2e978:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   2e97a:	f104 0260 	add.w	r2, r4, #96	; 0x60
   2e97e:	f104 0150 	add.w	r1, r4, #80	; 0x50
   2e982:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   2e986:	f009 fb34 	bl	37ff2 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   2e98a:	65e0      	str	r0, [r4, #92]	; 0x5c
   2e98c:	e7cf      	b.n	2e92e <event_handler+0x5e>
	} else if (ctx->rx_buf) {
   2e98e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2e990:	2b00      	cmp	r3, #0
   2e992:	d0cc      	beq.n	2e92e <event_handler+0x5e>
		ctx->rx_buf += dfs * len;
   2e994:	4413      	add	r3, r2
   2e996:	65e3      	str	r3, [r4, #92]	; 0x5c
   2e998:	e7c9      	b.n	2e92e <event_handler+0x5e>
   2e99a:	bf00      	nop
   2e99c:	0003ed13 	.word	0x0003ed13
   2e9a0:	0003eeac 	.word	0x0003eeac
   2e9a4:	00039680 	.word	0x00039680
   2e9a8:	0003ee96 	.word	0x0003ee96

0002e9ac <spi_nrfx_transceive>:
{
   2e9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e9b0:	b08b      	sub	sp, #44	; 0x2c
   2e9b2:	469a      	mov	sl, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   2e9b4:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   2e9b6:	6904      	ldr	r4, [r0, #16]
{
   2e9b8:	af00      	add	r7, sp, #0
   2e9ba:	049b      	lsls	r3, r3, #18
   2e9bc:	4680      	mov	r8, r0
   2e9be:	460e      	mov	r6, r1
   2e9c0:	60ba      	str	r2, [r7, #8]
   2e9c2:	d43e      	bmi.n	2ea42 <spi_nrfx_transceive+0x96>
	return z_impl_k_sem_take(sem, timeout);
   2e9c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2e9c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2e9cc:	f104 0010 	add.w	r0, r4, #16
   2e9d0:	f003 f8a6 	bl	31b20 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   2e9d4:	6066      	str	r6, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
   2e9d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   2e9da:	f8d8 9010 	ldr.w	r9, [r8, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   2e9de:	60fb      	str	r3, [r7, #12]
	uint32_t max_freq = dev_config->max_freq;
   2e9e0:	689b      	ldr	r3, [r3, #8]
   2e9e2:	603b      	str	r3, [r7, #0]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   2e9e4:	f899 306d 	ldrb.w	r3, [r9, #109]	; 0x6d
   2e9e8:	607b      	str	r3, [r7, #4]
   2e9ea:	b123      	cbz	r3, 2e9f6 <spi_nrfx_transceive+0x4a>
   2e9ec:	f8d9 3000 	ldr.w	r3, [r9]
   2e9f0:	429e      	cmp	r6, r3
   2e9f2:	f000 80ec 	beq.w	2ebce <spi_nrfx_transceive+0x222>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   2e9f6:	f8b6 c004 	ldrh.w	ip, [r6, #4]
   2e9fa:	f41c 6f00 	tst.w	ip, #2048	; 0x800
   2e9fe:	d027      	beq.n	2ea50 <spi_nrfx_transceive+0xa4>
		LOG_ERR("Half-duplex not supported");
   2ea00:	466d      	mov	r5, sp
   2ea02:	b088      	sub	sp, #32
   2ea04:	466a      	mov	r2, sp
   2ea06:	4bab      	ldr	r3, [pc, #684]	; (2ecb4 <spi_nrfx_transceive+0x308>)
   2ea08:	6153      	str	r3, [r2, #20]
   2ea0a:	4bab      	ldr	r3, [pc, #684]	; (2ecb8 <spi_nrfx_transceive+0x30c>)
   2ea0c:	6193      	str	r3, [r2, #24]
   2ea0e:	2303      	movs	r3, #3
   2ea10:	f842 3f10 	str.w	r3, [r2, #16]!
   2ea14:	48a9      	ldr	r0, [pc, #676]	; (2ecbc <spi_nrfx_transceive+0x310>)
   2ea16:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2ea1a:	f009 fafd 	bl	38018 <z_log_msg_static_create.constprop.0>
   2ea1e:	46ad      	mov	sp, r5
		return -ENOTSUP;
   2ea20:	f06f 0585 	mvn.w	r5, #133	; 0x85
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   2ea24:	6823      	ldr	r3, [r4, #0]
   2ea26:	889b      	ldrh	r3, [r3, #4]
   2ea28:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
   2ea2c:	d104      	bne.n	2ea38 <spi_nrfx_transceive+0x8c>
		ctx->owner = NULL;
   2ea2e:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   2ea30:	f104 0010 	add.w	r0, r4, #16
   2ea34:	f003 f84e 	bl	31ad4 <z_impl_k_sem_give>
}
   2ea38:	4628      	mov	r0, r5
   2ea3a:	372c      	adds	r7, #44	; 0x2c
   2ea3c:	46bd      	mov	sp, r7
   2ea3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   2ea42:	69a3      	ldr	r3, [r4, #24]
   2ea44:	2b00      	cmp	r3, #0
   2ea46:	d1bd      	bne.n	2e9c4 <spi_nrfx_transceive+0x18>
		(k_sem_count_get(&ctx->lock) == 0) &&
   2ea48:	6863      	ldr	r3, [r4, #4]
   2ea4a:	4299      	cmp	r1, r3
   2ea4c:	d1ba      	bne.n	2e9c4 <spi_nrfx_transceive+0x18>
   2ea4e:	e7c2      	b.n	2e9d6 <spi_nrfx_transceive+0x2a>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   2ea50:	f01c 0f01 	tst.w	ip, #1
   2ea54:	d018      	beq.n	2ea88 <spi_nrfx_transceive+0xdc>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   2ea56:	466d      	mov	r5, sp
   2ea58:	b08a      	sub	sp, #40	; 0x28
   2ea5a:	f8d8 3000 	ldr.w	r3, [r8]
   2ea5e:	466a      	mov	r2, sp
   2ea60:	4997      	ldr	r1, [pc, #604]	; (2ecc0 <spi_nrfx_transceive+0x314>)
   2ea62:	6151      	str	r1, [r2, #20]
   2ea64:	4994      	ldr	r1, [pc, #592]	; (2ecb8 <spi_nrfx_transceive+0x30c>)
   2ea66:	e9c2 1306 	strd	r1, r3, [r2, #24]
   2ea6a:	f240 3301 	movw	r3, #769	; 0x301
   2ea6e:	8413      	strh	r3, [r2, #32]
   2ea70:	4b94      	ldr	r3, [pc, #592]	; (2ecc4 <spi_nrfx_transceive+0x318>)
   2ea72:	f842 3f10 	str.w	r3, [r2, #16]!
   2ea76:	f44f 5111 	mov.w	r1, #9280	; 0x2440
		LOG_ERR("Word sizes other than 8 bits are not supported");
   2ea7a:	4890      	ldr	r0, [pc, #576]	; (2ecbc <spi_nrfx_transceive+0x310>)
   2ea7c:	f009 facc 	bl	38018 <z_log_msg_static_create.constprop.0>
   2ea80:	46ad      	mov	sp, r5
		return -EINVAL;
   2ea82:	f06f 0515 	mvn.w	r5, #21
   2ea86:	e7cd      	b.n	2ea24 <spi_nrfx_transceive+0x78>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   2ea88:	f01c 0f08 	tst.w	ip, #8
   2ea8c:	d00c      	beq.n	2eaa8 <spi_nrfx_transceive+0xfc>
		LOG_ERR("Loopback mode is not supported");
   2ea8e:	466d      	mov	r5, sp
   2ea90:	b088      	sub	sp, #32
   2ea92:	466a      	mov	r2, sp
   2ea94:	4b8c      	ldr	r3, [pc, #560]	; (2ecc8 <spi_nrfx_transceive+0x31c>)
		LOG_ERR("Word sizes other than 8 bits are not supported");
   2ea96:	6153      	str	r3, [r2, #20]
   2ea98:	4b87      	ldr	r3, [pc, #540]	; (2ecb8 <spi_nrfx_transceive+0x30c>)
   2ea9a:	6193      	str	r3, [r2, #24]
   2ea9c:	2303      	movs	r3, #3
   2ea9e:	f842 3f10 	str.w	r3, [r2, #16]!
   2eaa2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2eaa6:	e7e8      	b.n	2ea7a <spi_nrfx_transceive+0xce>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   2eaa8:	f3cc 1345 	ubfx	r3, ip, #5, #6
   2eaac:	2b08      	cmp	r3, #8
   2eaae:	d004      	beq.n	2eaba <spi_nrfx_transceive+0x10e>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   2eab0:	466d      	mov	r5, sp
   2eab2:	b088      	sub	sp, #32
   2eab4:	466a      	mov	r2, sp
   2eab6:	4b85      	ldr	r3, [pc, #532]	; (2eccc <spi_nrfx_transceive+0x320>)
   2eab8:	e7ed      	b.n	2ea96 <spi_nrfx_transceive+0xea>
	if (spi_cfg->frequency < 125000) {
   2eaba:	6835      	ldr	r5, [r6, #0]
   2eabc:	4b84      	ldr	r3, [pc, #528]	; (2ecd0 <spi_nrfx_transceive+0x324>)
   2eabe:	429d      	cmp	r5, r3
   2eac0:	d804      	bhi.n	2eacc <spi_nrfx_transceive+0x120>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   2eac2:	466d      	mov	r5, sp
   2eac4:	b088      	sub	sp, #32
   2eac6:	466a      	mov	r2, sp
   2eac8:	4b82      	ldr	r3, [pc, #520]	; (2ecd4 <spi_nrfx_transceive+0x328>)
   2eaca:	e7e4      	b.n	2ea96 <spi_nrfx_transceive+0xea>
	config = dev_config->def_config;
   2eacc:	68fb      	ldr	r3, [r7, #12]
   2eace:	f103 0b0c 	add.w	fp, r3, #12
   2ead2:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
   2ead6:	f107 0e10 	add.w	lr, r7, #16
   2eada:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   2eade:	683b      	ldr	r3, [r7, #0]
   2eae0:	42ab      	cmp	r3, r5
   2eae2:	bf28      	it	cs
   2eae4:	462b      	movcs	r3, r5
   2eae6:	461d      	mov	r5, r3
	config = dev_config->def_config;
   2eae8:	e89b 0003 	ldmia.w	fp, {r0, r1}
	if (frequency < 250000) {
   2eaec:	4b7a      	ldr	r3, [pc, #488]	; (2ecd8 <spi_nrfx_transceive+0x32c>)
   2eaee:	429d      	cmp	r5, r3
	config = dev_config->def_config;
   2eaf0:	e88e 0003 	stmia.w	lr, {r0, r1}
	if (frequency < 250000) {
   2eaf4:	d94d      	bls.n	2eb92 <spi_nrfx_transceive+0x1e6>
	} else if (frequency < 500000) {
   2eaf6:	4b79      	ldr	r3, [pc, #484]	; (2ecdc <spi_nrfx_transceive+0x330>)
   2eaf8:	429d      	cmp	r5, r3
   2eafa:	d94d      	bls.n	2eb98 <spi_nrfx_transceive+0x1ec>
	} else if (frequency < 1000000) {
   2eafc:	4b78      	ldr	r3, [pc, #480]	; (2ece0 <spi_nrfx_transceive+0x334>)
   2eafe:	429d      	cmp	r5, r3
   2eb00:	d94d      	bls.n	2eb9e <spi_nrfx_transceive+0x1f2>
	} else if (frequency < 2000000) {
   2eb02:	4b78      	ldr	r3, [pc, #480]	; (2ece4 <spi_nrfx_transceive+0x338>)
   2eb04:	429d      	cmp	r5, r3
   2eb06:	d94d      	bls.n	2eba4 <spi_nrfx_transceive+0x1f8>
	} else if (frequency < 4000000) {
   2eb08:	4b77      	ldr	r3, [pc, #476]	; (2ece8 <spi_nrfx_transceive+0x33c>)
   2eb0a:	429d      	cmp	r5, r3
   2eb0c:	d94d      	bls.n	2ebaa <spi_nrfx_transceive+0x1fe>
	} else if (frequency < 8000000) {
   2eb0e:	4b77      	ldr	r3, [pc, #476]	; (2ecec <spi_nrfx_transceive+0x340>)
   2eb10:	429d      	cmp	r5, r3
   2eb12:	d34d      	bcc.n	2ebb0 <spi_nrfx_transceive+0x204>
	} else if (frequency < 16000000) {
   2eb14:	4b76      	ldr	r3, [pc, #472]	; (2ecf0 <spi_nrfx_transceive+0x344>)
   2eb16:	429d      	cmp	r5, r3
   2eb18:	d34d      	bcc.n	2ebb6 <spi_nrfx_transceive+0x20a>
		return NRF_SPIM_FREQ_16M;
   2eb1a:	4b76      	ldr	r3, [pc, #472]	; (2ecf4 <spi_nrfx_transceive+0x348>)
   2eb1c:	429d      	cmp	r5, r3
   2eb1e:	bf2c      	ite	cs
   2eb20:	f04f 55a0 	movcs.w	r5, #335544320	; 0x14000000
   2eb24:	f04f 6520 	movcc.w	r5, #167772160	; 0xa000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   2eb28:	f01c 0f02 	tst.w	ip, #2
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   2eb2c:	61bd      	str	r5, [r7, #24]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   2eb2e:	f00c 0304 	and.w	r3, ip, #4
   2eb32:	d043      	beq.n	2ebbc <spi_nrfx_transceive+0x210>
			return NRF_SPIM_MODE_2;
   2eb34:	2b00      	cmp	r3, #0
   2eb36:	bf14      	ite	ne
   2eb38:	2303      	movne	r3, #3
   2eb3a:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   2eb3c:	773b      	strb	r3, [r7, #28]
	if (dev_data->initialized) {
   2eb3e:	687b      	ldr	r3, [r7, #4]
	if (operation & SPI_TRANSFER_LSB) {
   2eb40:	f3cc 1c00 	ubfx	ip, ip, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   2eb44:	f887 c01d 	strb.w	ip, [r7, #29]
	if (dev_data->initialized) {
   2eb48:	b12b      	cbz	r3, 2eb56 <spi_nrfx_transceive+0x1aa>
		nrfx_spim_uninit(&dev_config->spim);
   2eb4a:	68f8      	ldr	r0, [r7, #12]
   2eb4c:	f001 ffdc 	bl	30b08 <nrfx_spim_uninit>
		dev_data->initialized = false;
   2eb50:	2300      	movs	r3, #0
   2eb52:	f889 306d 	strb.w	r3, [r9, #109]	; 0x6d
	result = nrfx_spim_init(&dev_config->spim, &config,
   2eb56:	464b      	mov	r3, r9
   2eb58:	4a67      	ldr	r2, [pc, #412]	; (2ecf8 <spi_nrfx_transceive+0x34c>)
   2eb5a:	68f8      	ldr	r0, [r7, #12]
   2eb5c:	f107 0110 	add.w	r1, r7, #16
   2eb60:	f001 fee4 	bl	3092c <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   2eb64:	4b65      	ldr	r3, [pc, #404]	; (2ecfc <spi_nrfx_transceive+0x350>)
   2eb66:	4298      	cmp	r0, r3
   2eb68:	d02c      	beq.n	2ebc4 <spi_nrfx_transceive+0x218>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   2eb6a:	466d      	mov	r5, sp
   2eb6c:	b088      	sub	sp, #32
   2eb6e:	466a      	mov	r2, sp
   2eb70:	4b63      	ldr	r3, [pc, #396]	; (2ed00 <spi_nrfx_transceive+0x354>)
   2eb72:	6153      	str	r3, [r2, #20]
   2eb74:	4b50      	ldr	r3, [pc, #320]	; (2ecb8 <spi_nrfx_transceive+0x30c>)
   2eb76:	e9c2 3006 	strd	r3, r0, [r2, #24]
   2eb7a:	2304      	movs	r3, #4
   2eb7c:	f842 3f10 	str.w	r3, [r2, #16]!
   2eb80:	484e      	ldr	r0, [pc, #312]	; (2ecbc <spi_nrfx_transceive+0x310>)
   2eb82:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   2eb86:	f009 fa47 	bl	38018 <z_log_msg_static_create.constprop.0>
   2eb8a:	46ad      	mov	sp, r5
		return -EIO;
   2eb8c:	f06f 0504 	mvn.w	r5, #4
   2eb90:	e748      	b.n	2ea24 <spi_nrfx_transceive+0x78>
		return NRF_SPIM_FREQ_125K;
   2eb92:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
   2eb96:	e7c7      	b.n	2eb28 <spi_nrfx_transceive+0x17c>
		return NRF_SPIM_FREQ_250K;
   2eb98:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
   2eb9c:	e7c4      	b.n	2eb28 <spi_nrfx_transceive+0x17c>
		return NRF_SPIM_FREQ_500K;
   2eb9e:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   2eba2:	e7c1      	b.n	2eb28 <spi_nrfx_transceive+0x17c>
		return NRF_SPIM_FREQ_1M;
   2eba4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   2eba8:	e7be      	b.n	2eb28 <spi_nrfx_transceive+0x17c>
		return NRF_SPIM_FREQ_2M;
   2ebaa:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   2ebae:	e7bb      	b.n	2eb28 <spi_nrfx_transceive+0x17c>
		return NRF_SPIM_FREQ_4M;
   2ebb0:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   2ebb4:	e7b8      	b.n	2eb28 <spi_nrfx_transceive+0x17c>
		return NRF_SPIM_FREQ_8M;
   2ebb6:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   2ebba:	e7b5      	b.n	2eb28 <spi_nrfx_transceive+0x17c>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   2ebbc:	3b00      	subs	r3, #0
   2ebbe:	bf18      	it	ne
   2ebc0:	2301      	movne	r3, #1
   2ebc2:	e7bb      	b.n	2eb3c <spi_nrfx_transceive+0x190>
	dev_data->initialized = true;
   2ebc4:	2301      	movs	r3, #1
   2ebc6:	f889 306d 	strb.w	r3, [r9, #109]	; 0x6d
	ctx->config = spi_cfg;
   2ebca:	f8c9 6000 	str.w	r6, [r9]
		dev_data->busy = true;
   2ebce:	2301      	movs	r3, #1
   2ebd0:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   2ebd4:	68bb      	ldr	r3, [r7, #8]
   2ebd6:	2b00      	cmp	r3, #0
   2ebd8:	d159      	bne.n	2ec8e <spi_nrfx_transceive+0x2e2>
   2ebda:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   2ebdc:	2300      	movs	r3, #0
   2ebde:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   2ebe0:	f104 0258 	add.w	r2, r4, #88	; 0x58
   2ebe4:	f104 0148 	add.w	r1, r4, #72	; 0x48
   2ebe8:	f104 0044 	add.w	r0, r4, #68	; 0x44
   2ebec:	f009 fa01 	bl	37ff2 <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
   2ebf0:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   2ebf2:	f1ba 0f00 	cmp.w	sl, #0
   2ebf6:	d152      	bne.n	2ec9e <spi_nrfx_transceive+0x2f2>
   2ebf8:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   2ebfc:	2300      	movs	r3, #0
   2ebfe:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   2ec00:	f104 0260 	add.w	r2, r4, #96	; 0x60
   2ec04:	f104 0150 	add.w	r1, r4, #80	; 0x50
   2ec08:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   2ec0c:	f009 f9f1 	bl	37ff2 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
   2ec10:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
   2ec12:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
   2ec14:	65e0      	str	r0, [r4, #92]	; 0x5c
	_spi_context_cs_control(ctx, on, false);
   2ec16:	2101      	movs	r1, #1
   2ec18:	4620      	mov	r0, r4
	ctx->sync_status = 0;
   2ec1a:	6426      	str	r6, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
   2ec1c:	f009 fa13 	bl	38046 <_spi_context_cs_control>
		transfer_next_chunk(dev);
   2ec20:	4640      	mov	r0, r8
   2ec22:	f7ff fe01 	bl	2e828 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   2ec26:	6e25      	ldr	r5, [r4, #96]	; 0x60
   2ec28:	6da3      	ldr	r3, [r4, #88]	; 0x58
			     ctx->config->frequency;
   2ec2a:	46a0      	mov	r8, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   2ec2c:	429d      	cmp	r5, r3
   2ec2e:	bf38      	it	cc
   2ec30:	461d      	movcc	r5, r3
   2ec32:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   2ec36:	435d      	muls	r5, r3
			     ctx->config->frequency;
   2ec38:	f858 3b28 	ldr.w	r3, [r8], #40
   2ec3c:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   2ec40:	681b      	ldr	r3, [r3, #0]
   2ec42:	fbb5 f5f3 	udiv	r5, r5, r3
   2ec46:	4631      	mov	r1, r6
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   2ec48:	35c8      	adds	r5, #200	; 0xc8
   2ec4a:	f240 30e7 	movw	r0, #999	; 0x3e7
   2ec4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2ec52:	2300      	movs	r3, #0
   2ec54:	fbe5 010c 	umlal	r0, r1, r5, ip
   2ec58:	f7e1 faa2 	bl	101a0 <__aeabi_uldivmod>
   2ec5c:	4602      	mov	r2, r0
   2ec5e:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   2ec60:	4640      	mov	r0, r8
   2ec62:	f002 ff5d 	bl	31b20 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   2ec66:	b310      	cbz	r0, 2ecae <spi_nrfx_transceive+0x302>
		LOG_ERR("Timeout waiting for transfer complete");
   2ec68:	466d      	mov	r5, sp
   2ec6a:	b088      	sub	sp, #32
   2ec6c:	466a      	mov	r2, sp
   2ec6e:	4b25      	ldr	r3, [pc, #148]	; (2ed04 <spi_nrfx_transceive+0x358>)
   2ec70:	6153      	str	r3, [r2, #20]
   2ec72:	4b25      	ldr	r3, [pc, #148]	; (2ed08 <spi_nrfx_transceive+0x35c>)
   2ec74:	6193      	str	r3, [r2, #24]
   2ec76:	2303      	movs	r3, #3
   2ec78:	f842 3f10 	str.w	r3, [r2, #16]!
   2ec7c:	480f      	ldr	r0, [pc, #60]	; (2ecbc <spi_nrfx_transceive+0x310>)
   2ec7e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2ec82:	f009 f9c9 	bl	38018 <z_log_msg_static_create.constprop.0>
   2ec86:	46ad      	mov	sp, r5
		return -ETIMEDOUT;
   2ec88:	f06f 0573 	mvn.w	r5, #115	; 0x73
   2ec8c:	e6ca      	b.n	2ea24 <spi_nrfx_transceive+0x78>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   2ec8e:	68bb      	ldr	r3, [r7, #8]
   2ec90:	681b      	ldr	r3, [r3, #0]
   2ec92:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   2ec94:	2b00      	cmp	r3, #0
   2ec96:	d0a1      	beq.n	2ebdc <spi_nrfx_transceive+0x230>
   2ec98:	68bb      	ldr	r3, [r7, #8]
   2ec9a:	685b      	ldr	r3, [r3, #4]
   2ec9c:	e79f      	b.n	2ebde <spi_nrfx_transceive+0x232>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   2ec9e:	f8da 3000 	ldr.w	r3, [sl]
   2eca2:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   2eca4:	2b00      	cmp	r3, #0
   2eca6:	d0a9      	beq.n	2ebfc <spi_nrfx_transceive+0x250>
   2eca8:	f8da 3004 	ldr.w	r3, [sl, #4]
   2ecac:	e7a7      	b.n	2ebfe <spi_nrfx_transceive+0x252>
	status = ctx->sync_status;
   2ecae:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return status;
   2ecb0:	e6b8      	b.n	2ea24 <spi_nrfx_transceive+0x78>
   2ecb2:	bf00      	nop
   2ecb4:	0003ed35 	.word	0x0003ed35
   2ecb8:	0003eec2 	.word	0x0003eec2
   2ecbc:	00039680 	.word	0x00039680
   2ecc0:	0003ed53 	.word	0x0003ed53
   2ecc4:	01000004 	.word	0x01000004
   2ecc8:	0003ed79 	.word	0x0003ed79
   2eccc:	0003ed9c 	.word	0x0003ed9c
   2ecd0:	0001e847 	.word	0x0001e847
   2ecd4:	0003edcf 	.word	0x0003edcf
   2ecd8:	0003d08f 	.word	0x0003d08f
   2ecdc:	0007a11f 	.word	0x0007a11f
   2ece0:	000f423f 	.word	0x000f423f
   2ece4:	001e847f 	.word	0x001e847f
   2ece8:	003d08ff 	.word	0x003d08ff
   2ecec:	007a1200 	.word	0x007a1200
   2ecf0:	00f42400 	.word	0x00f42400
   2ecf4:	01e84800 	.word	0x01e84800
   2ecf8:	0002e8d1 	.word	0x0002e8d1
   2ecfc:	0bad0000 	.word	0x0bad0000
   2ed00:	0003ee04 	.word	0x0003ee04
   2ed04:	0003ee2f 	.word	0x0003ee2f
   2ed08:	0003ee76 	.word	0x0003ee76

0002ed0c <regulator_fixed_init>:
	.enable = regulator_fixed_enable,
	.disable = regulator_fixed_disable,
};

static int regulator_fixed_init(const struct device *dev)
{
   2ed0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct regulator_fixed_config *cfg = dev->config;
   2ed10:	6844      	ldr	r4, [r0, #4]
{
   2ed12:	af00      	add	r7, sp, #0
   2ed14:	4605      	mov	r5, r0
	int ret;

	regulator_common_data_init(dev);
   2ed16:	f009 f9da 	bl	380ce <regulator_common_data_init>

	if (!device_is_ready(cfg->enable.port)) {
   2ed1a:	6a20      	ldr	r0, [r4, #32]
   2ed1c:	f009 fc2e 	bl	3857c <z_device_is_ready>
   2ed20:	4603      	mov	r3, r0
   2ed22:	b9d0      	cbnz	r0, 2ed5a <regulator_fixed_init+0x4e>
		LOG_ERR("GPIO port: %s not ready", cfg->enable.port->name);
   2ed24:	6a22      	ldr	r2, [r4, #32]
   2ed26:	466c      	mov	r4, sp
   2ed28:	b08a      	sub	sp, #40	; 0x28
   2ed2a:	6811      	ldr	r1, [r2, #0]
   2ed2c:	466a      	mov	r2, sp
   2ed2e:	4824      	ldr	r0, [pc, #144]	; (2edc0 <regulator_fixed_init+0xb4>)
   2ed30:	6150      	str	r0, [r2, #20]
   2ed32:	4824      	ldr	r0, [pc, #144]	; (2edc4 <regulator_fixed_init+0xb8>)
   2ed34:	e9c2 0106 	strd	r0, r1, [r2, #24]
   2ed38:	f240 3101 	movw	r1, #769	; 0x301
   2ed3c:	8411      	strh	r1, [r2, #32]
   2ed3e:	4922      	ldr	r1, [pc, #136]	; (2edc8 <regulator_fixed_init+0xbc>)
   2ed40:	f842 1f10 	str.w	r1, [r2, #16]!
   2ed44:	4821      	ldr	r0, [pc, #132]	; (2edcc <regulator_fixed_init+0xc0>)
   2ed46:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   2ed4a:	f7e4 fa13 	bl	13174 <z_impl_z_log_msg_static_create>
		return -ENODEV;
   2ed4e:	f06f 0012 	mvn.w	r0, #18
   2ed52:	46a5      	mov	sp, r4
	if (regulator_is_enabled(dev)) {
		k_busy_wait(cfg->startup_delay_us);
	}

	return 0;
}
   2ed54:	46bd      	mov	sp, r7
   2ed56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return gpio_pin_configure(spec->port,
   2ed5a:	6a20      	ldr	r0, [r4, #32]
				  spec->pin,
   2ed5c:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
				  spec->dt_flags | extra_flags);
   2ed60:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
	struct gpio_driver_data *data =
   2ed62:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
   2ed66:	f8d0 8008 	ldr.w	r8, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2ed6a:	f8de 6000 	ldr.w	r6, [lr]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   2ed6e:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
   2ed70:	bf54      	ite	pl
   2ed72:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   2ed76:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2ed7a:	f04f 0c01 	mov.w	ip, #1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   2ed7e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2ed82:	fa0c fc01 	lsl.w	ip, ip, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   2ed86:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2ed88:	bf4c      	ite	mi
   2ed8a:	ea46 060c 	orrmi.w	r6, r6, ip
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2ed8e:	ea26 060c 	bicpl.w	r6, r6, ip
   2ed92:	f8ce 6000 	str.w	r6, [lr]
	return api->pin_configure(port, pin, flags);
   2ed96:	f8d8 3000 	ldr.w	r3, [r8]
   2ed9a:	4798      	blx	r3
	if (ret < 0) {
   2ed9c:	2800      	cmp	r0, #0
   2ed9e:	dbd9      	blt.n	2ed54 <regulator_fixed_init+0x48>
	ret = regulator_common_init_enable(dev);
   2eda0:	4628      	mov	r0, r5
   2eda2:	f009 f9d2 	bl	3814a <regulator_common_init_enable>
	if (ret < 0) {
   2eda6:	2800      	cmp	r0, #0
   2eda8:	dbd4      	blt.n	2ed54 <regulator_fixed_init+0x48>
	if (regulator_is_enabled(dev)) {
   2edaa:	4628      	mov	r0, r5
   2edac:	f009 f997 	bl	380de <regulator_is_enabled>
   2edb0:	b908      	cbnz	r0, 2edb6 <regulator_fixed_init+0xaa>
	return 0;
   2edb2:	2000      	movs	r0, #0
   2edb4:	e7ce      	b.n	2ed54 <regulator_fixed_init+0x48>
		k_busy_wait(cfg->startup_delay_us);
   2edb6:	69a0      	ldr	r0, [r4, #24]
	z_impl_k_busy_wait(usec_to_wait);
   2edb8:	f009 fff9 	bl	38dae <z_impl_k_busy_wait>
}
   2edbc:	e7f9      	b.n	2edb2 <regulator_fixed_init+0xa6>
   2edbe:	bf00      	nop
   2edc0:	0003eee7 	.word	0x0003eee7
   2edc4:	0003ef03 	.word	0x0003ef03
   2edc8:	01000004 	.word	0x01000004
   2edcc:	00039668 	.word	0x00039668

0002edd0 <regulator_fixed_enable>:
{
   2edd0:	b538      	push	{r3, r4, r5, lr}
	const struct regulator_fixed_config *cfg = dev->config;
   2edd2:	6844      	ldr	r4, [r0, #4]
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
   2edd4:	2201      	movs	r2, #1
   2edd6:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
   2edda:	6a20      	ldr	r0, [r4, #32]
   2eddc:	f009 f9d0 	bl	38180 <gpio_pin_set>
	if (ret < 0) {
   2ede0:	2800      	cmp	r0, #0
   2ede2:	db02      	blt.n	2edea <regulator_fixed_enable+0x1a>
	if (cfg->off_on_delay_us > 0U) {
   2ede4:	69e4      	ldr	r4, [r4, #28]
   2ede6:	b90c      	cbnz	r4, 2edec <regulator_fixed_enable+0x1c>
	return 0;
   2ede8:	2000      	movs	r0, #0
}
   2edea:	bd38      	pop	{r3, r4, r5, pc}
   2edec:	4806      	ldr	r0, [pc, #24]	; (2ee08 <regulator_fixed_enable+0x38>)
   2edee:	4a07      	ldr	r2, [pc, #28]	; (2ee0c <regulator_fixed_enable+0x3c>)
   2edf0:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   2edf4:	2100      	movs	r1, #0
   2edf6:	2300      	movs	r3, #0
   2edf8:	fbe4 0105 	umlal	r0, r1, r4, r5
   2edfc:	f7e1 f9d0 	bl	101a0 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   2ee00:	f003 fb70 	bl	324e4 <z_impl_k_sleep>
   2ee04:	e7f0      	b.n	2ede8 <regulator_fixed_enable+0x18>
   2ee06:	bf00      	nop
   2ee08:	000f423f 	.word	0x000f423f
   2ee0c:	000f4240 	.word	0x000f4240

0002ee10 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   2ee10:	4b02      	ldr	r3, [pc, #8]	; (2ee1c <flash_nrf_pages_layout+0xc>)
   2ee12:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   2ee14:	2301      	movs	r3, #1
   2ee16:	6013      	str	r3, [r2, #0]
}
   2ee18:	4770      	bx	lr
   2ee1a:	bf00      	nop
   2ee1c:	200030fc 	.word	0x200030fc

0002ee20 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   2ee20:	4800      	ldr	r0, [pc, #0]	; (2ee24 <flash_nrf_get_parameters+0x4>)
   2ee22:	4770      	bx	lr
   2ee24:	0003b46c 	.word	0x0003b46c

0002ee28 <flash_nrf_read.part.0>:
static int flash_nrf_read(const struct device *dev, off_t addr,
   2ee28:	b580      	push	{r7, lr}
   2ee2a:	af00      	add	r7, sp, #0
		LOG_ERR("invalid address: 0x%08lx:%zu",
   2ee2c:	b08a      	sub	sp, #40	; 0x28
   2ee2e:	466a      	mov	r2, sp
   2ee30:	4b09      	ldr	r3, [pc, #36]	; (2ee58 <flash_nrf_read.part.0+0x30>)
   2ee32:	6153      	str	r3, [r2, #20]
   2ee34:	4b09      	ldr	r3, [pc, #36]	; (2ee5c <flash_nrf_read.part.0+0x34>)
   2ee36:	6211      	str	r1, [r2, #32]
   2ee38:	e9c2 3006 	strd	r3, r0, [r2, #24]
   2ee3c:	2305      	movs	r3, #5
   2ee3e:	f842 3f10 	str.w	r3, [r2, #16]!
   2ee42:	4807      	ldr	r0, [pc, #28]	; (2ee60 <flash_nrf_read.part.0+0x38>)
   2ee44:	2300      	movs	r3, #0
   2ee46:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   2ee4a:	f7e4 f993 	bl	13174 <z_impl_z_log_msg_static_create>
}
   2ee4e:	f06f 0015 	mvn.w	r0, #21
   2ee52:	46bd      	mov	sp, r7
   2ee54:	bd80      	pop	{r7, pc}
   2ee56:	bf00      	nop
   2ee58:	0003ef30 	.word	0x0003ef30
   2ee5c:	0003ef96 	.word	0x0003ef96
   2ee60:	00039610 	.word	0x00039610

0002ee64 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   2ee64:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   2ee66:	2201      	movs	r2, #1
   2ee68:	4611      	mov	r1, r2
   2ee6a:	4807      	ldr	r0, [pc, #28]	; (2ee88 <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   2ee6c:	4c07      	ldr	r4, [pc, #28]	; (2ee8c <nrf_flash_init+0x28>)
   2ee6e:	f009 fd28 	bl	388c2 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   2ee72:	f000 fa33 	bl	2f2dc <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   2ee76:	f009 fb07 	bl	38488 <nrfx_nvmc_flash_page_count_get>
   2ee7a:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   2ee7c:	f009 fb00 	bl	38480 <nrfx_nvmc_flash_page_size_get>
   2ee80:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   2ee82:	2000      	movs	r0, #0
   2ee84:	bd10      	pop	{r4, pc}
   2ee86:	bf00      	nop
   2ee88:	20003104 	.word	0x20003104
   2ee8c:	200030fc 	.word	0x200030fc

0002ee90 <restore_pofwarn.part.0>:
}

NRF_STATIC_INLINE nrf_power_pof_thr_t nrf_power_pofcon_get(NRF_POWER_Type const * p_reg,
                                                           bool *                 p_enabled)
{
    uint32_t pofcon = p_reg->POFCON;
   2ee90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   2ee94:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
   2ee98:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   2ee9c:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   2eea0:	f023 031f 	bic.w	r3, r3, #31
   2eea4:	430b      	orrs	r3, r1
    pofcon |=
   2eea6:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   2eeaa:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
   2eeae:	4b02      	ldr	r3, [pc, #8]	; (2eeb8 <restore_pofwarn.part.0+0x28>)
   2eeb0:	2200      	movs	r2, #0
   2eeb2:	701a      	strb	r2, [r3, #0]
	}
}
   2eeb4:	4770      	bx	lr
   2eeb6:	bf00      	nop
   2eeb8:	20003421 	.word	0x20003421

0002eebc <suspend_pofwarn>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2eebc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   2eec0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   2eec4:	2b08      	cmp	r3, #8
   2eec6:	d120      	bne.n	2ef0a <suspend_pofwarn+0x4e>
    uint32_t pofcon = p_reg->POFCON;
   2eec8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   2eecc:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
	if (enabled) {
   2eed0:	07cb      	lsls	r3, r1, #31
   2eed2:	d51a      	bpl.n	2ef0a <suspend_pofwarn+0x4e>
    uint32_t pofcon = p_reg->POFCON;
   2eed4:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   2eed8:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   2eedc:	f023 031f 	bic.w	r3, r3, #31
    pofcon |=
   2eee0:	430b      	orrs	r3, r1
    p_reg->POFCON = pofcon;
   2eee2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2eee6:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   2eeea:	b15b      	cbz	r3, 2ef04 <suspend_pofwarn+0x48>
    uint32_t pofcon = p_reg->POFCON;
   2eeec:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   2eef0:	f023 031f 	bic.w	r3, r3, #31
   2eef4:	430b      	orrs	r3, r1
    pofcon |=
   2eef6:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   2eefa:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			return -ECANCELED;
   2eefe:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   2ef02:	4770      	bx	lr
		pofcon_enabled = enabled;
   2ef04:	4b02      	ldr	r3, [pc, #8]	; (2ef10 <suspend_pofwarn+0x54>)
   2ef06:	2201      	movs	r2, #1
   2ef08:	701a      	strb	r2, [r3, #0]
		return 0;
   2ef0a:	2000      	movs	r0, #0
}
   2ef0c:	4770      	bx	lr
   2ef0e:	bf00      	nop
   2ef10:	20003421 	.word	0x20003421

0002ef14 <erase_op>:
{
   2ef14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ef16:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2ef18:	f009 fab2 	bl	38480 <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   2ef1c:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2ef1e:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   2ef20:	b10b      	cbz	r3, 2ef26 <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   2ef22:	f000 f9ed 	bl	2f300 <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   2ef26:	4f13      	ldr	r7, [pc, #76]	; (2ef74 <erase_op+0x60>)
{
   2ef28:	2600      	movs	r6, #0
		if (SUSPEND_POFWARN()) {
   2ef2a:	f7ff ffc7 	bl	2eebc <suspend_pofwarn>
   2ef2e:	b9e8      	cbnz	r0, 2ef6c <erase_op+0x58>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   2ef30:	6860      	ldr	r0, [r4, #4]
   2ef32:	f001 fcbf 	bl	308b4 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   2ef36:	68a3      	ldr	r3, [r4, #8]
   2ef38:	1b5b      	subs	r3, r3, r5
   2ef3a:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   2ef3c:	6863      	ldr	r3, [r4, #4]
   2ef3e:	442b      	add	r3, r5
   2ef40:	6063      	str	r3, [r4, #4]
	if (pofcon_enabled) {
   2ef42:	783b      	ldrb	r3, [r7, #0]
   2ef44:	b10b      	cbz	r3, 2ef4a <erase_op+0x36>
   2ef46:	f7ff ffa3 	bl	2ee90 <restore_pofwarn.part.0>
		if (e_ctx->enable_time_limit) {
   2ef4a:	7b23      	ldrb	r3, [r4, #12]
		i++;
   2ef4c:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   2ef4e:	b93b      	cbnz	r3, 2ef60 <erase_op+0x4c>
	} while (e_ctx->len > 0);
   2ef50:	68a3      	ldr	r3, [r4, #8]
   2ef52:	2b00      	cmp	r3, #0
   2ef54:	d1e9      	bne.n	2ef2a <erase_op+0x16>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   2ef56:	68a0      	ldr	r0, [r4, #8]
   2ef58:	3800      	subs	r0, #0
   2ef5a:	bf18      	it	ne
   2ef5c:	2001      	movne	r0, #1
}
   2ef5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   2ef60:	4630      	mov	r0, r6
   2ef62:	f7e2 fc51 	bl	11808 <nrf_flash_sync_check_time_limit>
   2ef66:	2800      	cmp	r0, #0
   2ef68:	d0f2      	beq.n	2ef50 <erase_op+0x3c>
   2ef6a:	e7f4      	b.n	2ef56 <erase_op+0x42>
			return -ECANCELED;
   2ef6c:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   2ef70:	e7f5      	b.n	2ef5e <erase_op+0x4a>
   2ef72:	bf00      	nop
   2ef74:	20003421 	.word	0x20003421

0002ef78 <write_op>:
{
   2ef78:	b570      	push	{r4, r5, r6, lr}
	if (w_ctx->enable_time_limit) {
   2ef7a:	7b03      	ldrb	r3, [r0, #12]
{
   2ef7c:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   2ef7e:	b10b      	cbz	r3, 2ef84 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   2ef80:	f000 f9be 	bl	2f300 <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   2ef84:	4e19      	ldr	r6, [pc, #100]	; (2efec <write_op+0x74>)
{
   2ef86:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   2ef88:	68a3      	ldr	r3, [r4, #8]
   2ef8a:	2b03      	cmp	r3, #3
   2ef8c:	d806      	bhi.n	2ef9c <write_op+0x24>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   2ef8e:	4a18      	ldr	r2, [pc, #96]	; (2eff0 <write_op+0x78>)
   2ef90:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   2ef94:	07db      	lsls	r3, r3, #31
   2ef96:	d5fb      	bpl.n	2ef90 <write_op+0x18>
	return FLASH_OP_DONE;
   2ef98:	2000      	movs	r0, #0
}
   2ef9a:	bd70      	pop	{r4, r5, r6, pc}
		if (SUSPEND_POFWARN()) {
   2ef9c:	f7ff ff8e 	bl	2eebc <suspend_pofwarn>
   2efa0:	bb08      	cbnz	r0, 2efe6 <write_op+0x6e>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   2efa2:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   2efa4:	6860      	ldr	r0, [r4, #4]
   2efa6:	6819      	ldr	r1, [r3, #0]
   2efa8:	f001 fca4 	bl	308f4 <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   2efac:	7833      	ldrb	r3, [r6, #0]
   2efae:	b10b      	cbz	r3, 2efb4 <write_op+0x3c>
   2efb0:	f7ff ff6e 	bl	2ee90 <restore_pofwarn.part.0>
	w_ctx->flash_addr += shift;
   2efb4:	6863      	ldr	r3, [r4, #4]
   2efb6:	3304      	adds	r3, #4
   2efb8:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   2efba:	6823      	ldr	r3, [r4, #0]
   2efbc:	3304      	adds	r3, #4
   2efbe:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   2efc0:	68a3      	ldr	r3, [r4, #8]
   2efc2:	3b04      	subs	r3, #4
   2efc4:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   2efc6:	7b23      	ldrb	r3, [r4, #12]
		i++;
   2efc8:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   2efca:	2b00      	cmp	r3, #0
   2efcc:	d0dc      	beq.n	2ef88 <write_op+0x10>
			if (nrf_flash_sync_check_time_limit(i)) {
   2efce:	4628      	mov	r0, r5
   2efd0:	f7e2 fc1a 	bl	11808 <nrf_flash_sync_check_time_limit>
   2efd4:	2800      	cmp	r0, #0
   2efd6:	d0d7      	beq.n	2ef88 <write_op+0x10>
   2efd8:	4a05      	ldr	r2, [pc, #20]	; (2eff0 <write_op+0x78>)
   2efda:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   2efde:	07d9      	lsls	r1, r3, #31
   2efe0:	d5fb      	bpl.n	2efda <write_op+0x62>
				return FLASH_OP_ONGOING;
   2efe2:	2001      	movs	r0, #1
   2efe4:	e7d9      	b.n	2ef9a <write_op+0x22>
			return -ECANCELED;
   2efe6:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   2efea:	e7d6      	b.n	2ef9a <write_op+0x22>
   2efec:	20003421 	.word	0x20003421
   2eff0:	4001e000 	.word	0x4001e000

0002eff4 <flash_nrf_erase>:
{
   2eff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2eff8:	b086      	sub	sp, #24
   2effa:	af00      	add	r7, sp, #0
   2effc:	460e      	mov	r6, r1
   2effe:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2f000:	f009 fa3e 	bl	38480 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   2f004:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2f006:	4680      	mov	r8, r0
	if (is_regular_addr_valid(addr, size)) {
   2f008:	4630      	mov	r0, r6
   2f00a:	f009 f8d0 	bl	381ae <is_regular_addr_valid>
   2f00e:	4603      	mov	r3, r0
   2f010:	2800      	cmp	r0, #0
   2f012:	d03b      	beq.n	2f08c <flash_nrf_erase+0x98>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   2f014:	fbb6 f3f8 	udiv	r3, r6, r8
   2f018:	fb08 6313 	mls	r3, r8, r3, r6
   2f01c:	b923      	cbnz	r3, 2f028 <flash_nrf_erase+0x34>
   2f01e:	fbb5 f4f8 	udiv	r4, r5, r8
   2f022:	fb08 5414 	mls	r4, r8, r4, r5
   2f026:	b1cc      	cbz	r4, 2f05c <flash_nrf_erase+0x68>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   2f028:	466c      	mov	r4, sp
   2f02a:	b08a      	sub	sp, #40	; 0x28
   2f02c:	466a      	mov	r2, sp
   2f02e:	4b29      	ldr	r3, [pc, #164]	; (2f0d4 <flash_nrf_erase+0xe0>)
   2f030:	6153      	str	r3, [r2, #20]
   2f032:	4b29      	ldr	r3, [pc, #164]	; (2f0d8 <flash_nrf_erase+0xe4>)
   2f034:	6215      	str	r5, [r2, #32]
   2f036:	e9c2 3606 	strd	r3, r6, [r2, #24]
   2f03a:	2305      	movs	r3, #5
   2f03c:	f842 3f10 	str.w	r3, [r2, #16]!
   2f040:	2300      	movs	r3, #0
   2f042:	4826      	ldr	r0, [pc, #152]	; (2f0dc <flash_nrf_erase+0xe8>)
   2f044:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   2f048:	f7e4 f894 	bl	13174 <z_impl_z_log_msg_static_create>
   2f04c:	46a5      	mov	sp, r4
			return -EINVAL;
   2f04e:	f06f 0415 	mvn.w	r4, #21
}
   2f052:	4620      	mov	r0, r4
   2f054:	3718      	adds	r7, #24
   2f056:	46bd      	mov	sp, r7
   2f058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!n_pages) {
   2f05c:	45a8      	cmp	r8, r5
   2f05e:	d8f8      	bhi.n	2f052 <flash_nrf_erase+0x5e>
	return z_impl_k_sem_take(sem, timeout);
   2f060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2f064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2f068:	481d      	ldr	r0, [pc, #116]	; (2f0e0 <flash_nrf_erase+0xec>)
   2f06a:	f002 fd59 	bl	31b20 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   2f06e:	f009 f8c6 	bl	381fe <nrf_flash_sync_is_required>
   2f072:	f107 0308 	add.w	r3, r7, #8
   2f076:	4601      	mov	r1, r0
   2f078:	b9a8      	cbnz	r0, 2f0a6 <flash_nrf_erase+0xb2>
	struct flash_context context = {
   2f07a:	2210      	movs	r2, #16
   2f07c:	4618      	mov	r0, r3
   2f07e:	f006 fa65 	bl	3554c <memset>
   2f082:	e9c7 6503 	strd	r6, r5, [r7, #12]
	return	erase_op(&context);
   2f086:	f7ff ff45 	bl	2ef14 <erase_op>
   2f08a:	e01e      	b.n	2f0ca <flash_nrf_erase+0xd6>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   2f08c:	466c      	mov	r4, sp
   2f08e:	b08a      	sub	sp, #40	; 0x28
   2f090:	466a      	mov	r2, sp
   2f092:	4914      	ldr	r1, [pc, #80]	; (2f0e4 <flash_nrf_erase+0xf0>)
   2f094:	6151      	str	r1, [r2, #20]
   2f096:	4910      	ldr	r1, [pc, #64]	; (2f0d8 <flash_nrf_erase+0xe4>)
   2f098:	6215      	str	r5, [r2, #32]
   2f09a:	e9c2 1606 	strd	r1, r6, [r2, #24]
   2f09e:	2105      	movs	r1, #5
   2f0a0:	f842 1f10 	str.w	r1, [r2, #16]!
	compiler_barrier();
   2f0a4:	e7cd      	b.n	2f042 <flash_nrf_erase+0x4e>
	struct flash_context context = {
   2f0a6:	2210      	movs	r2, #16
   2f0a8:	4621      	mov	r1, r4
   2f0aa:	4618      	mov	r0, r3
   2f0ac:	f006 fa4e 	bl	3554c <memset>
   2f0b0:	2201      	movs	r2, #1
   2f0b2:	753a      	strb	r2, [r7, #20]
	struct flash_op_desc flash_op_desc = {
   2f0b4:	4a0c      	ldr	r2, [pc, #48]	; (2f0e8 <flash_nrf_erase+0xf4>)
	struct flash_context context = {
   2f0b6:	e9c7 6503 	strd	r6, r5, [r7, #12]
	struct flash_op_desc flash_op_desc = {
   2f0ba:	e9c7 2000 	strd	r2, r0, [r7]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   2f0be:	480b      	ldr	r0, [pc, #44]	; (2f0ec <flash_nrf_erase+0xf8>)
   2f0c0:	f000 f916 	bl	2f2f0 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   2f0c4:	4638      	mov	r0, r7
   2f0c6:	f7e2 fb23 	bl	11710 <nrf_flash_sync_exe>
	return	erase_op(&context);
   2f0ca:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   2f0cc:	4804      	ldr	r0, [pc, #16]	; (2f0e0 <flash_nrf_erase+0xec>)
   2f0ce:	f002 fd01 	bl	31ad4 <z_impl_k_sem_give>
}
   2f0d2:	e7be      	b.n	2f052 <flash_nrf_erase+0x5e>
   2f0d4:	0003ef51 	.word	0x0003ef51
   2f0d8:	0003efb5 	.word	0x0003efb5
   2f0dc:	00039610 	.word	0x00039610
   2f0e0:	20003104 	.word	0x20003104
   2f0e4:	0003ef30 	.word	0x0003ef30
   2f0e8:	0002ef15 	.word	0x0002ef15
   2f0ec:	00015e64 	.word	0x00015e64

0002f0f0 <flash_nrf_write>:
{
   2f0f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f0f2:	460d      	mov	r5, r1
   2f0f4:	b087      	sub	sp, #28
	if (is_regular_addr_valid(addr, len)) {
   2f0f6:	4619      	mov	r1, r3
{
   2f0f8:	af00      	add	r7, sp, #0
	if (is_regular_addr_valid(addr, len)) {
   2f0fa:	4628      	mov	r0, r5
{
   2f0fc:	461c      	mov	r4, r3
   2f0fe:	4616      	mov	r6, r2
	if (is_regular_addr_valid(addr, len)) {
   2f100:	f009 f855 	bl	381ae <is_regular_addr_valid>
   2f104:	4603      	mov	r3, r0
   2f106:	b9b8      	cbnz	r0, 2f138 <flash_nrf_write+0x48>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   2f108:	466e      	mov	r6, sp
   2f10a:	b08a      	sub	sp, #40	; 0x28
   2f10c:	466a      	mov	r2, sp
   2f10e:	4927      	ldr	r1, [pc, #156]	; (2f1ac <flash_nrf_write+0xbc>)
   2f110:	6151      	str	r1, [r2, #20]
   2f112:	4927      	ldr	r1, [pc, #156]	; (2f1b0 <flash_nrf_write+0xc0>)
   2f114:	6214      	str	r4, [r2, #32]
   2f116:	e9c2 1506 	strd	r1, r5, [r2, #24]
   2f11a:	2105      	movs	r1, #5
   2f11c:	f842 1f10 	str.w	r1, [r2, #16]!
	z_impl_z_log_msg_static_create(source, desc, package, data);
   2f120:	4824      	ldr	r0, [pc, #144]	; (2f1b4 <flash_nrf_write+0xc4>)
   2f122:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   2f126:	f7e4 f825 	bl	13174 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   2f12a:	f06f 0415 	mvn.w	r4, #21
   2f12e:	46b5      	mov	sp, r6
}
   2f130:	4620      	mov	r0, r4
   2f132:	371c      	adds	r7, #28
   2f134:	46bd      	mov	sp, r7
   2f136:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   2f138:	ea45 0304 	orr.w	r3, r5, r4
   2f13c:	079b      	lsls	r3, r3, #30
   2f13e:	d00d      	beq.n	2f15c <flash_nrf_write+0x6c>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   2f140:	466e      	mov	r6, sp
   2f142:	b08a      	sub	sp, #40	; 0x28
   2f144:	466a      	mov	r2, sp
   2f146:	4b1c      	ldr	r3, [pc, #112]	; (2f1b8 <flash_nrf_write+0xc8>)
   2f148:	6153      	str	r3, [r2, #20]
   2f14a:	4b19      	ldr	r3, [pc, #100]	; (2f1b0 <flash_nrf_write+0xc0>)
   2f14c:	6214      	str	r4, [r2, #32]
   2f14e:	e9c2 3506 	strd	r3, r5, [r2, #24]
   2f152:	2305      	movs	r3, #5
   2f154:	f842 3f10 	str.w	r3, [r2, #16]!
   2f158:	2300      	movs	r3, #0
   2f15a:	e7e1      	b.n	2f120 <flash_nrf_write+0x30>
	if (!len) {
   2f15c:	2c00      	cmp	r4, #0
   2f15e:	d0e7      	beq.n	2f130 <flash_nrf_write+0x40>
	return z_impl_k_sem_take(sem, timeout);
   2f160:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2f164:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2f168:	4814      	ldr	r0, [pc, #80]	; (2f1bc <flash_nrf_write+0xcc>)
   2f16a:	f002 fcd9 	bl	31b20 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   2f16e:	f009 f846 	bl	381fe <nrf_flash_sync_is_required>
   2f172:	4603      	mov	r3, r0
	struct flash_context context = {
   2f174:	e9c7 6502 	strd	r6, r5, [r7, #8]
   2f178:	f107 0008 	add.w	r0, r7, #8
   2f17c:	613c      	str	r4, [r7, #16]
	if (nrf_flash_sync_is_required()) {
   2f17e:	b183      	cbz	r3, 2f1a2 <flash_nrf_write+0xb2>
	struct flash_context context = {
   2f180:	2301      	movs	r3, #1
   2f182:	753b      	strb	r3, [r7, #20]
	struct flash_op_desc flash_op_desc = {
   2f184:	4b0e      	ldr	r3, [pc, #56]	; (2f1c0 <flash_nrf_write+0xd0>)
   2f186:	e9c7 3000 	strd	r3, r0, [r7]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   2f18a:	f641 504c 	movw	r0, #7500	; 0x1d4c
   2f18e:	f000 f8af 	bl	2f2f0 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   2f192:	4638      	mov	r0, r7
   2f194:	f7e2 fabc 	bl	11710 <nrf_flash_sync_exe>
	return write_op(&context);
   2f198:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   2f19a:	4808      	ldr	r0, [pc, #32]	; (2f1bc <flash_nrf_write+0xcc>)
   2f19c:	f002 fc9a 	bl	31ad4 <z_impl_k_sem_give>
}
   2f1a0:	e7c6      	b.n	2f130 <flash_nrf_write+0x40>
	struct flash_context context = {
   2f1a2:	753b      	strb	r3, [r7, #20]
	return write_op(&context);
   2f1a4:	f7ff fee8 	bl	2ef78 <write_op>
   2f1a8:	e7f6      	b.n	2f198 <flash_nrf_write+0xa8>
   2f1aa:	bf00      	nop
   2f1ac:	0003ef30 	.word	0x0003ef30
   2f1b0:	0003efa5 	.word	0x0003efa5
   2f1b4:	00039610 	.word	0x00039610
   2f1b8:	0003ef74 	.word	0x0003ef74
   2f1bc:	20003104 	.word	0x20003104
   2f1c0:	0002ef79 	.word	0x0002ef79

0002f1c4 <time_slot_callback_work>:
{
   2f1c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2f1c6:	9b07      	ldr	r3, [sp, #28]
	rc = op_desc->handler(op_desc->context);
   2f1c8:	e9d3 2000 	ldrd	r2, r0, [r3]
   2f1cc:	4790      	blx	r2
	if (rc != FLASH_OP_ONGOING) {
   2f1ce:	2801      	cmp	r0, #1
	rc = op_desc->handler(op_desc->context);
   2f1d0:	4604      	mov	r4, r0
	if (rc != FLASH_OP_ONGOING) {
   2f1d2:	d011      	beq.n	2f1f8 <time_slot_callback_work+0x34>
		ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   2f1d4:	f10d 010f 	add.w	r1, sp, #15
   2f1d8:	f10d 000e 	add.w	r0, sp, #14
   2f1dc:	f7f3 fd24 	bl	22c28 <ll_timeslice_ticker_id_get>
		ret = ticker_stop(instance_index, 1U, ticker_id,
   2f1e0:	2300      	movs	r3, #0
   2f1e2:	9300      	str	r3, [sp, #0]
   2f1e4:	f89d 200f 	ldrb.w	r2, [sp, #15]
   2f1e8:	4b04      	ldr	r3, [pc, #16]	; (2f1fc <time_slot_callback_work+0x38>)
   2f1ea:	f89d 000e 	ldrb.w	r0, [sp, #14]
   2f1ee:	2101      	movs	r1, #1
   2f1f0:	f7f1 fa7a 	bl	206e8 <ticker_stop>
		_ticker_sync_context.result = (rc == FLASH_OP_DONE) ? 0 : rc;
   2f1f4:	4b02      	ldr	r3, [pc, #8]	; (2f200 <time_slot_callback_work+0x3c>)
   2f1f6:	60dc      	str	r4, [r3, #12]
}
   2f1f8:	b004      	add	sp, #16
   2f1fa:	bd10      	pop	{r4, pc}
   2f1fc:	0002f205 	.word	0x0002f205
   2f200:	20003134 	.word	0x20003134

0002f204 <ticker_stop_prepare_cb>:
{
   2f204:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   2f206:	f10d 010f 	add.w	r1, sp, #15
   2f20a:	f10d 000e 	add.w	r0, sp, #14
   2f20e:	f7f3 fd0b 	bl	22c28 <ll_timeslice_ticker_id_get>
	ret = ticker_stop(instance_index, 2U, (ticker_id + 1U),
   2f212:	f89d 200f 	ldrb.w	r2, [sp, #15]
   2f216:	f89d 000e 	ldrb.w	r0, [sp, #14]
   2f21a:	2300      	movs	r3, #0
   2f21c:	3201      	adds	r2, #1
   2f21e:	9300      	str	r3, [sp, #0]
   2f220:	b2d2      	uxtb	r2, r2
   2f222:	4b03      	ldr	r3, [pc, #12]	; (2f230 <ticker_stop_prepare_cb+0x2c>)
   2f224:	2102      	movs	r1, #2
   2f226:	f7f1 fa5f 	bl	206e8 <ticker_stop>
}
   2f22a:	b005      	add	sp, #20
   2f22c:	f85d fb04 	ldr.w	pc, [sp], #4
   2f230:	0002f2d1 	.word	0x0002f2d1

0002f234 <time_slot_delay>:
{
   2f234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2f238:	b08d      	sub	sp, #52	; 0x34
   2f23a:	4606      	mov	r6, r0
   2f23c:	460f      	mov	r7, r1
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   2f23e:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   2f242:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
{
   2f246:	4690      	mov	r8, r2
   2f248:	4699      	mov	r9, r3
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   2f24a:	f7f3 fced 	bl	22c28 <ll_timeslice_ticker_id_get>
	ret = ticker_start(instance_index, /* Radio instance ticker */
   2f24e:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   2f252:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   2f256:	9700      	str	r7, [sp, #0]
   2f258:	2400      	movs	r4, #0
   2f25a:	3501      	adds	r5, #1
   2f25c:	e9cd 4407 	strd	r4, r4, [sp, #28]
   2f260:	e9cd 8905 	strd	r8, r9, [sp, #20]
   2f264:	e9cd 4403 	strd	r4, r4, [sp, #12]
   2f268:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2f26c:	4633      	mov	r3, r6
   2f26e:	b2ea      	uxtb	r2, r5
   2f270:	2101      	movs	r1, #1
   2f272:	f7f1 f9af 	bl	205d4 <ticker_start>
	if (ret != TICKER_STATUS_SUCCESS && ret != TICKER_STATUS_BUSY) {
   2f276:	f010 0ffd 	tst.w	r0, #253	; 0xfd
   2f27a:	d00a      	beq.n	2f292 <time_slot_delay+0x5e>
		_ticker_sync_context.result = 0;
   2f27c:	4b06      	ldr	r3, [pc, #24]	; (2f298 <time_slot_delay+0x64>)
		ret = ticker_stop(instance_index, 1U, ticker_id,
   2f27e:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
		_ticker_sync_context.result = 0;
   2f282:	60dc      	str	r4, [r3, #12]
		ret = ticker_stop(instance_index, 1U, ticker_id,
   2f284:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   2f288:	4b04      	ldr	r3, [pc, #16]	; (2f29c <time_slot_delay+0x68>)
   2f28a:	9400      	str	r4, [sp, #0]
   2f28c:	2101      	movs	r1, #1
   2f28e:	f7f1 fa2b 	bl	206e8 <ticker_stop>
}
   2f292:	b00d      	add	sp, #52	; 0x34
   2f294:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2f298:	20003134 	.word	0x20003134
   2f29c:	0002f205 	.word	0x0002f205

0002f2a0 <time_slot_callback_prepare>:
	time_slot_delay(ticks_at_expire,
   2f2a0:	9b01      	ldr	r3, [sp, #4]
   2f2a2:	4a02      	ldr	r2, [pc, #8]	; (2f2ac <time_slot_callback_prepare+0xc>)
   2f2a4:	2131      	movs	r1, #49	; 0x31
   2f2a6:	f7ff bfc5 	b.w	2f234 <time_slot_delay>
   2f2aa:	bf00      	nop
   2f2ac:	0002f2b1 	.word	0x0002f2b1

0002f2b0 <time_slot_callback_abort>:
{
   2f2b0:	b570      	push	{r4, r5, r6, lr}
   2f2b2:	9d05      	ldr	r5, [sp, #20]
   2f2b4:	4604      	mov	r4, r0
	ll_radio_state_abort();
   2f2b6:	f7f3 fcbd 	bl	22c34 <ll_radio_state_abort>
	time_slot_delay(ticks_at_expire,
   2f2ba:	462b      	mov	r3, r5
   2f2bc:	4620      	mov	r0, r4
   2f2be:	4a03      	ldr	r2, [pc, #12]	; (2f2cc <time_slot_callback_abort+0x1c>)
}
   2f2c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	time_slot_delay(ticks_at_expire,
   2f2c4:	2106      	movs	r1, #6
   2f2c6:	f7ff bfb5 	b.w	2f234 <time_slot_delay>
   2f2ca:	bf00      	nop
   2f2cc:	0002f1c5 	.word	0x0002f1c5

0002f2d0 <ticker_stop_work_cb>:
	z_impl_k_sem_give(sem);
   2f2d0:	4801      	ldr	r0, [pc, #4]	; (2f2d8 <ticker_stop_work_cb+0x8>)
   2f2d2:	f002 bbff 	b.w	31ad4 <z_impl_k_sem_give>
   2f2d6:	bf00      	nop
   2f2d8:	2000311c 	.word	0x2000311c

0002f2dc <nrf_flash_sync_init>:
{
   2f2dc:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   2f2de:	2201      	movs	r2, #1
   2f2e0:	2100      	movs	r1, #0
   2f2e2:	4802      	ldr	r0, [pc, #8]	; (2f2ec <nrf_flash_sync_init+0x10>)
   2f2e4:	f009 faed 	bl	388c2 <z_impl_k_sem_init>
}
   2f2e8:	2000      	movs	r0, #0
   2f2ea:	bd08      	pop	{r3, pc}
   2f2ec:	2000311c 	.word	0x2000311c

0002f2f0 <nrf_flash_sync_set_context>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
   2f2f0:	4b02      	ldr	r3, [pc, #8]	; (2f2fc <nrf_flash_sync_set_context+0xc>)
   2f2f2:	f2a0 62a4 	subw	r2, r0, #1700	; 0x6a4
	_ticker_sync_context.slot = duration;
   2f2f6:	e9c3 2000 	strd	r2, r0, [r3]
}
   2f2fa:	4770      	bx	lr
   2f2fc:	20003134 	.word	0x20003134

0002f300 <nrf_flash_sync_get_timestamp_begin>:
{
   2f300:	b508      	push	{r3, lr}
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
   2f302:	f7f1 fa77 	bl	207f4 <ticker_ticks_now_get>
   2f306:	4b01      	ldr	r3, [pc, #4]	; (2f30c <nrf_flash_sync_get_timestamp_begin+0xc>)
   2f308:	6098      	str	r0, [r3, #8]
}
   2f30a:	bd08      	pop	{r3, pc}
   2f30c:	20003134 	.word	0x20003134

0002f310 <uart_nrfx_poll_in>:
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f310:	4b07      	ldr	r3, [pc, #28]	; (2f330 <uart_nrfx_poll_in+0x20>)
   2f312:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(const struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
   2f316:	b142      	cbz	r2, 2f32a <uart_nrfx_poll_in+0x1a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f318:	2000      	movs	r0, #0
   2f31a:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
   2f31e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    nrf_uart_hwfc_pins_set(p_reg, NRF_UART_PSEL_DISCONNECTED, NRF_UART_PSEL_DISCONNECTED);
}

NRF_STATIC_INLINE uint8_t nrf_uart_rxd_get(NRF_UART_Type const * p_reg)
{
    return p_reg->RXD;
   2f322:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   2f326:	700b      	strb	r3, [r1, #0]
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);

	return 0;
   2f328:	4770      	bx	lr
		return -1;
   2f32a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2f32e:	4770      	bx	lr
   2f330:	40002000 	.word	0x40002000

0002f334 <uart_nrfx_err_check>:
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2f334:	4b02      	ldr	r3, [pc, #8]	; (2f340 <uart_nrfx_err_check+0xc>)
   2f336:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2f33a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(const struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
   2f33e:	4770      	bx	lr
   2f340:	40002000 	.word	0x40002000

0002f344 <uart_nrfx_configure>:

static int uart_nrfx_configure(const struct device *dev,
			       const struct uart_config *cfg)
{
   2f344:	b530      	push	{r4, r5, lr}
	struct uart_nrfx_data *data = dev->data;
	nrf_uart_config_t uart_cfg;

#if defined(UART_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   2f346:	794b      	ldrb	r3, [r1, #5]
   2f348:	2b01      	cmp	r3, #1
   2f34a:	d022      	beq.n	2f392 <uart_nrfx_configure+0x4e>
   2f34c:	2b03      	cmp	r3, #3
   2f34e:	d11d      	bne.n	2f38c <uart_nrfx_configure+0x48>
	case UART_CFG_STOP_BITS_1:
		uart_cfg.stop = NRF_UART_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uart_cfg.stop = NRF_UART_STOP_TWO;
   2f350:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   2f352:	798b      	ldrb	r3, [r1, #6]
   2f354:	2b03      	cmp	r3, #3
   2f356:	d119      	bne.n	2f38c <uart_nrfx_configure+0x48>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   2f358:	79cb      	ldrb	r3, [r1, #7]
   2f35a:	b9bb      	cbnz	r3, 2f38c <uart_nrfx_configure+0x48>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   2f35c:	790a      	ldrb	r2, [r1, #4]
   2f35e:	b112      	cbz	r2, 2f366 <uart_nrfx_configure+0x22>
   2f360:	2a02      	cmp	r2, #2
   2f362:	d113      	bne.n	2f38c <uart_nrfx_configure+0x48>
	case UART_CFG_PARITY_NONE:
		uart_cfg.parity = NRF_UART_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
   2f364:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   2f366:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
   2f368:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   2f36c:	d061      	beq.n	2f432 <uart_nrfx_configure+0xee>
   2f36e:	d82d      	bhi.n	2f3cc <uart_nrfx_configure+0x88>
   2f370:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   2f374:	d05f      	beq.n	2f436 <uart_nrfx_configure+0xf2>
   2f376:	d816      	bhi.n	2f3a6 <uart_nrfx_configure+0x62>
   2f378:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   2f37c:	d05d      	beq.n	2f43a <uart_nrfx_configure+0xf6>
   2f37e:	d80a      	bhi.n	2f396 <uart_nrfx_configure+0x52>
   2f380:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   2f384:	d05c      	beq.n	2f440 <uart_nrfx_configure+0xfc>
   2f386:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   2f38a:	d05c      	beq.n	2f446 <uart_nrfx_configure+0x102>
		return -ENOTSUP;
   2f38c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2f390:	e04e      	b.n	2f430 <uart_nrfx_configure+0xec>
	switch (cfg->stop_bits) {
   2f392:	2500      	movs	r5, #0
   2f394:	e7dd      	b.n	2f352 <uart_nrfx_configure+0xe>
	switch (baudrate) {
   2f396:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   2f39a:	d057      	beq.n	2f44c <uart_nrfx_configure+0x108>
   2f39c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   2f3a0:	d1f4      	bne.n	2f38c <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
   2f3a2:	4b34      	ldr	r3, [pc, #208]	; (2f474 <uart_nrfx_configure+0x130>)
   2f3a4:	e039      	b.n	2f41a <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   2f3a6:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   2f3aa:	d052      	beq.n	2f452 <uart_nrfx_configure+0x10e>
   2f3ac:	d807      	bhi.n	2f3be <uart_nrfx_configure+0x7a>
   2f3ae:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   2f3b2:	d050      	beq.n	2f456 <uart_nrfx_configure+0x112>
   2f3b4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   2f3b8:	d1e8      	bne.n	2f38c <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
   2f3ba:	4b2f      	ldr	r3, [pc, #188]	; (2f478 <uart_nrfx_configure+0x134>)
   2f3bc:	e02d      	b.n	2f41a <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   2f3be:	f647 2412 	movw	r4, #31250	; 0x7a12
   2f3c2:	42a3      	cmp	r3, r4
   2f3c4:	d1e2      	bne.n	2f38c <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
   2f3c6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   2f3ca:	e026      	b.n	2f41a <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   2f3cc:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   2f3d0:	d044      	beq.n	2f45c <uart_nrfx_configure+0x118>
   2f3d2:	d811      	bhi.n	2f3f8 <uart_nrfx_configure+0xb4>
   2f3d4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   2f3d8:	d042      	beq.n	2f460 <uart_nrfx_configure+0x11c>
   2f3da:	d808      	bhi.n	2f3ee <uart_nrfx_configure+0xaa>
   2f3dc:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   2f3e0:	42a3      	cmp	r3, r4
   2f3e2:	d03f      	beq.n	2f464 <uart_nrfx_configure+0x120>
   2f3e4:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   2f3e8:	d1d0      	bne.n	2f38c <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
   2f3ea:	4b24      	ldr	r3, [pc, #144]	; (2f47c <uart_nrfx_configure+0x138>)
   2f3ec:	e015      	b.n	2f41a <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   2f3ee:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   2f3f2:	d1cb      	bne.n	2f38c <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
   2f3f4:	4b22      	ldr	r3, [pc, #136]	; (2f480 <uart_nrfx_configure+0x13c>)
   2f3f6:	e010      	b.n	2f41a <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   2f3f8:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   2f3fc:	d035      	beq.n	2f46a <uart_nrfx_configure+0x126>
   2f3fe:	d807      	bhi.n	2f410 <uart_nrfx_configure+0xcc>
   2f400:	4c20      	ldr	r4, [pc, #128]	; (2f484 <uart_nrfx_configure+0x140>)
   2f402:	42a3      	cmp	r3, r4
   2f404:	d033      	beq.n	2f46e <uart_nrfx_configure+0x12a>
   2f406:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   2f40a:	d1bf      	bne.n	2f38c <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
   2f40c:	4b1e      	ldr	r3, [pc, #120]	; (2f488 <uart_nrfx_configure+0x144>)
   2f40e:	e004      	b.n	2f41a <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   2f410:	4c1e      	ldr	r4, [pc, #120]	; (2f48c <uart_nrfx_configure+0x148>)
   2f412:	42a3      	cmp	r3, r4
   2f414:	d1ba      	bne.n	2f38c <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
   2f416:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uart_nrfx_data *data = dev->data;
   2f41a:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   2f41c:	481c      	ldr	r0, [pc, #112]	; (2f490 <uart_nrfx_configure+0x14c>)
                    | (uint32_t)p_cfg->hwfc;
   2f41e:	432a      	orrs	r2, r5
    p_reg->BAUDRATE = baudrate;
   2f420:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2f424:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	data->uart_config = *cfg;
   2f428:	c903      	ldmia	r1, {r0, r1}
   2f42a:	e884 0003 	stmia.w	r4, {r0, r1}

	return 0;
   2f42e:	2000      	movs	r0, #0
}
   2f430:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
   2f432:	4b18      	ldr	r3, [pc, #96]	; (2f494 <uart_nrfx_configure+0x150>)
   2f434:	e7f1      	b.n	2f41a <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
   2f436:	4b18      	ldr	r3, [pc, #96]	; (2f498 <uart_nrfx_configure+0x154>)
   2f438:	e7ef      	b.n	2f41a <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
   2f43a:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   2f43e:	e7ec      	b.n	2f41a <uart_nrfx_configure+0xd6>
		nrf_baudrate = 0x00014000;
   2f440:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   2f444:	e7e9      	b.n	2f41a <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   2f446:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   2f44a:	e7e6      	b.n	2f41a <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
   2f44c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   2f450:	e7e3      	b.n	2f41a <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
   2f452:	4b12      	ldr	r3, [pc, #72]	; (2f49c <uart_nrfx_configure+0x158>)
   2f454:	e7e1      	b.n	2f41a <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
   2f456:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
   2f45a:	e7de      	b.n	2f41a <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
   2f45c:	4b10      	ldr	r3, [pc, #64]	; (2f4a0 <uart_nrfx_configure+0x15c>)
   2f45e:	e7dc      	b.n	2f41a <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
   2f460:	4b10      	ldr	r3, [pc, #64]	; (2f4a4 <uart_nrfx_configure+0x160>)
   2f462:	e7da      	b.n	2f41a <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
   2f464:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   2f468:	e7d7      	b.n	2f41a <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
   2f46a:	4b0f      	ldr	r3, [pc, #60]	; (2f4a8 <uart_nrfx_configure+0x164>)
   2f46c:	e7d5      	b.n	2f41a <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
   2f46e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   2f472:	e7d2      	b.n	2f41a <uart_nrfx_configure+0xd6>
   2f474:	0013b000 	.word	0x0013b000
   2f478:	004ea000 	.word	0x004ea000
   2f47c:	00ebf000 	.word	0x00ebf000
   2f480:	01d7e000 	.word	0x01d7e000
   2f484:	0003d090 	.word	0x0003d090
   2f488:	075f7000 	.word	0x075f7000
   2f48c:	000f4240 	.word	0x000f4240
   2f490:	40002000 	.word	0x40002000
   2f494:	009d5000 	.word	0x009d5000
   2f498:	00275000 	.word	0x00275000
   2f49c:	0075f000 	.word	0x0075f000
   2f4a0:	03afb000 	.word	0x03afb000
   2f4a4:	013a9000 	.word	0x013a9000
   2f4a8:	0ebed000 	.word	0x0ebed000

0002f4ac <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(const struct device *dev)
{
   2f4ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
   2f4ae:	4c13      	ldr	r4, [pc, #76]	; (2f4fc <uart_nrfx_init+0x50>)
	struct uart_nrfx_data *data = dev->data;
	int err;
#ifdef CONFIG_PINCTRL
	const struct uart_nrfx_config *config = dev->config;
   2f4b0:	6843      	ldr	r3, [r0, #4]
	struct uart_nrfx_data *data = dev->data;
   2f4b2:	6907      	ldr	r7, [r0, #16]
   2f4b4:	2100      	movs	r1, #0
   2f4b6:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
#endif /* CONFIG_PINCTRL */

	nrf_uart_disable(uart0_addr);

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
   2f4ba:	681e      	ldr	r6, [r3, #0]
{
   2f4bc:	4605      	mov	r5, r0
	ret = pinctrl_lookup_state(config, id, &state);
   2f4be:	aa01      	add	r2, sp, #4
   2f4c0:	4630      	mov	r0, r6
   2f4c2:	f008 ff1e 	bl	38302 <pinctrl_lookup_state>
	if (ret < 0) {
   2f4c6:	2800      	cmp	r0, #0
   2f4c8:	db15      	blt.n	2f4f6 <uart_nrfx_init+0x4a>
	return pinctrl_apply_state_direct(config, state);
   2f4ca:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   2f4cc:	6832      	ldr	r2, [r6, #0]
   2f4ce:	7919      	ldrb	r1, [r3, #4]
   2f4d0:	6818      	ldr	r0, [r3, #0]
   2f4d2:	f000 fbf5 	bl	2fcc0 <pinctrl_configure_pins>
	if (err < 0) {
   2f4d6:	2800      	cmp	r0, #0
   2f4d8:	db0d      	blt.n	2f4f6 <uart_nrfx_init+0x4a>
#else
	uart_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &data->uart_config);
   2f4da:	4639      	mov	r1, r7
   2f4dc:	4628      	mov	r0, r5
   2f4de:	f7ff ff31 	bl	2f344 <uart_nrfx_configure>
	if (err) {
   2f4e2:	b940      	cbnz	r0, 2f4f6 <uart_nrfx_init+0x4a>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   2f4e4:	2304      	movs	r3, #4
   2f4e6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f4ea:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
   2f4ee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f4f2:	2301      	movs	r3, #1
   2f4f4:	6023      	str	r3, [r4, #0]
#if HW_FLOW_CONTROL_AVAILABLE
	k_timer_init(&uart0_cb.tx_timeout_timer, tx_timeout, NULL);
#endif
#endif
	return 0;
}
   2f4f6:	b003      	add	sp, #12
   2f4f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f4fa:	bf00      	nop
   2f4fc:	40002000 	.word	0x40002000

0002f500 <uart_nrfx_poll_out>:
{
   2f500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f502:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
   2f504:	f009 f903 	bl	3870e <k_is_in_isr>
   2f508:	4d1a      	ldr	r5, [pc, #104]	; (2f574 <uart_nrfx_poll_out+0x74>)
   2f50a:	bb78      	cbnz	r0, 2f56c <uart_nrfx_poll_out+0x6c>
   2f50c:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2f50e:	2701      	movs	r7, #1
   2f510:	f3bf 8f5b 	dmb	ish
   2f514:	e855 3f00 	ldrex	r3, [r5]
   2f518:	2b00      	cmp	r3, #0
   2f51a:	d103      	bne.n	2f524 <uart_nrfx_poll_out+0x24>
   2f51c:	e845 7200 	strex	r2, r7, [r5]
   2f520:	2a00      	cmp	r2, #0
   2f522:	d1f7      	bne.n	2f514 <uart_nrfx_poll_out+0x14>
   2f524:	f3bf 8f5b 	dmb	ish
				  (atomic_val_t) 1) == false) {
   2f528:	d007      	beq.n	2f53a <uart_nrfx_poll_out+0x3a>
	return z_impl_k_sleep(timeout);
   2f52a:	2021      	movs	r0, #33	; 0x21
   2f52c:	2100      	movs	r1, #0
			if (--safety_cnt == 0) {
   2f52e:	3c01      	subs	r4, #1
   2f530:	f002 ffd8 	bl	324e4 <z_impl_k_sleep>
   2f534:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   2f538:	d1ea      	bne.n	2f510 <uart_nrfx_poll_out+0x10>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f53a:	4c0f      	ldr	r4, [pc, #60]	; (2f578 <uart_nrfx_poll_out+0x78>)
   2f53c:	2300      	movs	r3, #0
   2f53e:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   2f542:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f546:	2301      	movs	r3, #1
   2f548:	60a3      	str	r3, [r4, #8]
    p_reg->TXD = txd;
   2f54a:	f8c4 651c 	str.w	r6, [r4, #1308]	; 0x51c
   2f54e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f552:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
   2f556:	b923      	cbnz	r3, 2f562 <uart_nrfx_poll_out+0x62>
   2f558:	2001      	movs	r0, #1
   2f55a:	f008 fee6 	bl	3832a <nrfx_busy_wait>
   2f55e:	3e01      	subs	r6, #1
   2f560:	d1f7      	bne.n	2f552 <uart_nrfx_poll_out+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f562:	2301      	movs	r3, #1
   2f564:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   2f566:	2300      	movs	r3, #0
   2f568:	602b      	str	r3, [r5, #0]
}
   2f56a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*lock = 1;
   2f56c:	2301      	movs	r3, #1
   2f56e:	602b      	str	r3, [r5, #0]
   2f570:	e7e3      	b.n	2f53a <uart_nrfx_poll_out+0x3a>
   2f572:	bf00      	nop
   2f574:	20003144 	.word	0x20003144
   2f578:	40002000 	.word	0x40002000

0002f57c <random_byte_get>:
   2f57c:	f04f 0320 	mov.w	r3, #32
   2f580:	f3ef 8211 	mrs	r2, BASEPRI
   2f584:	f383 8812 	msr	BASEPRI_MAX, r3
   2f588:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   2f58c:	4b09      	ldr	r3, [pc, #36]	; (2f5b4 <random_byte_get+0x38>)
   2f58e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   2f592:	b161      	cbz	r1, 2f5ae <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   2f594:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   2f596:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   2f59a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   2f59e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   2f5a2:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   2f5a4:	f382 8811 	msr	BASEPRI, r2
   2f5a8:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   2f5ac:	4770      	bx	lr
	int retval = -EAGAIN;
   2f5ae:	f06f 000a 	mvn.w	r0, #10
   2f5b2:	e7f7      	b.n	2f5a4 <random_byte_get+0x28>
   2f5b4:	4000d000 	.word	0x4000d000

0002f5b8 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   2f5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f5ba:	4603      	mov	r3, r0
   2f5bc:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
   2f5be:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
   2f5c0:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
   2f5c4:	f04f 0520 	mov.w	r5, #32
   2f5c8:	f3ef 8211 	mrs	r2, BASEPRI
   2f5cc:	f385 8812 	msr	BASEPRI_MAX, r5
   2f5d0:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   2f5d4:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   2f5d6:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   2f5da:	1be4      	subs	r4, r4, r7
   2f5dc:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
   2f5e0:	42a0      	cmp	r0, r4
		len = available;
   2f5e2:	bf88      	it	hi
   2f5e4:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   2f5e6:	183e      	adds	r6, r7, r0
   2f5e8:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
   2f5ec:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
   2f5ee:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
   2f5f0:	f382 8811 	msr	BASEPRI, r2
   2f5f4:	f3bf 8f6f 	isb	sy
   2f5f8:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
   2f5fa:	428a      	cmp	r2, r1
   2f5fc:	d117      	bne.n	2f62e <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   2f5fe:	4577      	cmp	r7, lr
   2f600:	d10d      	bne.n	2f61e <rng_pool_get+0x66>
	__asm__ volatile(
   2f602:	f04f 0120 	mov.w	r1, #32
   2f606:	f3ef 8211 	mrs	r2, BASEPRI
   2f60a:	f381 8812 	msr	BASEPRI_MAX, r1
   2f60e:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   2f612:	7819      	ldrb	r1, [r3, #0]
   2f614:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
   2f616:	f382 8811 	msr	BASEPRI, r2
   2f61a:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
   2f61e:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
   2f620:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
   2f622:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   2f624:	bf22      	ittt	cs
   2f626:	4b06      	ldrcs	r3, [pc, #24]	; (2f640 <rng_pool_get+0x88>)
   2f628:	2201      	movcs	r2, #1
   2f62a:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   2f62c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   2f62e:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
   2f630:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   2f632:	7976      	ldrb	r6, [r6, #5]
   2f634:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
   2f638:	ea05 050c 	and.w	r5, r5, ip
   2f63c:	e7dd      	b.n	2f5fa <rng_pool_get+0x42>
   2f63e:	bf00      	nop
   2f640:	4000d000 	.word	0x4000d000

0002f644 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   2f644:	43db      	mvns	r3, r3
{
   2f646:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   2f64a:	f013 0501 	ands.w	r5, r3, #1
{
   2f64e:	460e      	mov	r6, r1
   2f650:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   2f652:	d004      	beq.n	2f65e <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   2f654:	4821      	ldr	r0, [pc, #132]	; (2f6dc <entropy_nrf5_get_entropy_isr+0x98>)
   2f656:	f7ff ffaf 	bl	2f5b8 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   2f65a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   2f65e:	b3a2      	cbz	r2, 2f6ca <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   2f660:	f04f 0320 	mov.w	r3, #32
   2f664:	f3ef 8811 	mrs	r8, BASEPRI
   2f668:	f383 8812 	msr	BASEPRI_MAX, r3
   2f66c:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   2f670:	200d      	movs	r0, #13
   2f672:	f7e5 f95f 	bl	14934 <arch_irq_is_enabled>
   2f676:	4607      	mov	r7, r0
		irq_disable(IRQN);
   2f678:	200d      	movs	r0, #13
   2f67a:	f7e5 f947 	bl	1490c <arch_irq_disable>
	__asm__ volatile(
   2f67e:	f388 8811 	msr	BASEPRI, r8
   2f682:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   2f686:	f8df 8058 	ldr.w	r8, [pc, #88]	; 2f6e0 <entropy_nrf5_get_entropy_isr+0x9c>
   2f68a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 2f6e4 <entropy_nrf5_get_entropy_isr+0xa0>
   2f68e:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   2f692:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   2f696:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   2f69a:	2301      	movs	r3, #1
   2f69c:	f8c8 3000 	str.w	r3, [r8]
   2f6a0:	4625      	mov	r5, r4
   2f6a2:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   2f6a6:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   2f6aa:	b183      	cbz	r3, 2f6ce <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   2f6ac:	f7ff ff66 	bl	2f57c <random_byte_get>
			if (byte < 0) {
   2f6b0:	1e03      	subs	r3, r0, #0
   2f6b2:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   2f6b6:	dbf6      	blt.n	2f6a6 <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   2f6b8:	3d01      	subs	r5, #1
   2f6ba:	b2ad      	uxth	r5, r5
   2f6bc:	5573      	strb	r3, [r6, r5]
		} while (len);
   2f6be:	2d00      	cmp	r5, #0
   2f6c0:	d1f1      	bne.n	2f6a6 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   2f6c2:	b117      	cbz	r7, 2f6ca <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   2f6c4:	200d      	movs	r0, #13
   2f6c6:	f7e5 f913 	bl	148f0 <arch_irq_enable>
	return cnt;
   2f6ca:	4620      	mov	r0, r4
   2f6cc:	e7c5      	b.n	2f65a <entropy_nrf5_get_entropy_isr+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
   2f6ce:	f3bf 8f4f 	dsb	sy
				__WFE();
   2f6d2:	bf20      	wfe
				__SEV();
   2f6d4:	bf40      	sev
				__WFE();
   2f6d6:	bf20      	wfe
   2f6d8:	e7e5      	b.n	2f6a6 <entropy_nrf5_get_entropy_isr+0x62>
   2f6da:	bf00      	nop
   2f6dc:	20003178 	.word	0x20003178
   2f6e0:	4000d000 	.word	0x4000d000
   2f6e4:	e000e100 	.word	0xe000e100

0002f6e8 <entropy_nrf5_get_entropy>:
{
   2f6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   2f6ec:	4f12      	ldr	r7, [pc, #72]	; (2f738 <entropy_nrf5_get_entropy+0x50>)
   2f6ee:	460d      	mov	r5, r1
   2f6f0:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   2f6f2:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
   2f6f6:	b914      	cbnz	r4, 2f6fe <entropy_nrf5_get_entropy+0x16>
}
   2f6f8:	4620      	mov	r0, r4
   2f6fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2f6fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2f702:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2f706:	4638      	mov	r0, r7
   2f708:	f002 fa0a 	bl	31b20 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   2f70c:	4622      	mov	r2, r4
   2f70e:	4629      	mov	r1, r5
   2f710:	4640      	mov	r0, r8
   2f712:	f7ff ff51 	bl	2f5b8 <rng_pool_get>
   2f716:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   2f718:	4638      	mov	r0, r7
   2f71a:	f002 f9db 	bl	31ad4 <z_impl_k_sem_give>
		if (bytes == 0U) {
   2f71e:	b93e      	cbnz	r6, 2f730 <entropy_nrf5_get_entropy+0x48>
	return z_impl_k_sem_take(sem, timeout);
   2f720:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2f724:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2f728:	4804      	ldr	r0, [pc, #16]	; (2f73c <entropy_nrf5_get_entropy+0x54>)
   2f72a:	f002 f9f9 	bl	31b20 <z_impl_k_sem_take>
	while (len) {
   2f72e:	e7e6      	b.n	2f6fe <entropy_nrf5_get_entropy+0x16>
		len -= bytes;
   2f730:	1ba4      	subs	r4, r4, r6
   2f732:	b2a4      	uxth	r4, r4
		buf += bytes;
   2f734:	4435      	add	r5, r6
   2f736:	e7de      	b.n	2f6f6 <entropy_nrf5_get_entropy+0xe>
   2f738:	20003148 	.word	0x20003148
   2f73c:	20003160 	.word	0x20003160

0002f740 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   2f740:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   2f742:	4c19      	ldr	r4, [pc, #100]	; (2f7a8 <entropy_nrf5_init+0x68>)
   2f744:	2201      	movs	r2, #1
   2f746:	4611      	mov	r1, r2
   2f748:	4620      	mov	r0, r4
   2f74a:	f009 f8ba 	bl	388c2 <z_impl_k_sem_init>
   2f74e:	2201      	movs	r2, #1
   2f750:	2100      	movs	r1, #0
   2f752:	f104 0018 	add.w	r0, r4, #24
   2f756:	f009 f8b4 	bl	388c2 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   2f75a:	f240 4307 	movw	r3, #1031	; 0x407
   2f75e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   2f762:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   2f766:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   2f768:	230c      	movs	r3, #12
   2f76a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   2f76e:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   2f770:	4b0e      	ldr	r3, [pc, #56]	; (2f7ac <entropy_nrf5_init+0x6c>)
   2f772:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   2f776:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   2f77a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   2f77e:	f042 0201 	orr.w	r2, r2, #1
   2f782:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   2f786:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   2f788:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   2f78c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   2f790:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   2f794:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   2f796:	6019      	str	r1, [r3, #0]
   2f798:	200d      	movs	r0, #13
   2f79a:	f7e5 f8d9 	bl	14950 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   2f79e:	200d      	movs	r0, #13
   2f7a0:	f7e5 f8a6 	bl	148f0 <arch_irq_enable>

	return 0;
}
   2f7a4:	4628      	mov	r0, r5
   2f7a6:	bd38      	pop	{r3, r4, r5, pc}
   2f7a8:	20003148 	.word	0x20003148
   2f7ac:	4000d000 	.word	0x4000d000

0002f7b0 <isr>:
{
   2f7b0:	b510      	push	{r4, lr}
	byte = random_byte_get();
   2f7b2:	f7ff fee3 	bl	2f57c <random_byte_get>
	if (byte < 0) {
   2f7b6:	2800      	cmp	r0, #0
   2f7b8:	db20      	blt.n	2f7fc <isr+0x4c>
	uint8_t last  = rngp->last;
   2f7ba:	4b17      	ldr	r3, [pc, #92]	; (2f818 <isr+0x68>)
   2f7bc:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   2f7c0:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   2f7c4:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   2f7c8:	1b14      	subs	r4, r2, r4
   2f7ca:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   2f7ce:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   2f7d0:	d10d      	bne.n	2f7ee <isr+0x3e>
	uint8_t last  = rngp->last;
   2f7d2:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   2f7d6:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   2f7da:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   2f7de:	1b14      	subs	r4, r2, r4
   2f7e0:	ea31 0404 	bics.w	r4, r1, r4
   2f7e4:	d10b      	bne.n	2f7fe <isr+0x4e>
   2f7e6:	4b0d      	ldr	r3, [pc, #52]	; (2f81c <isr+0x6c>)
   2f7e8:	2201      	movs	r2, #1
   2f7ea:	605a      	str	r2, [r3, #4]
}
   2f7ec:	e00e      	b.n	2f80c <isr+0x5c>
	rngp->buffer[last] = byte;
   2f7ee:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   2f7f0:	3201      	adds	r2, #1
   2f7f2:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   2f7f4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   2f7f8:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
   2f7fc:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   2f7fe:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   2f800:	3201      	adds	r2, #1
   2f802:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   2f804:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   2f808:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   2f80c:	4804      	ldr	r0, [pc, #16]	; (2f820 <isr+0x70>)
}
   2f80e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2f812:	f002 b95f 	b.w	31ad4 <z_impl_k_sem_give>
   2f816:	bf00      	nop
   2f818:	20003148 	.word	0x20003148
   2f81c:	4000d000 	.word	0x4000d000
   2f820:	20003160 	.word	0x20003160

0002f824 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   2f824:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   2f826:	2301      	movs	r3, #1
   2f828:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2f82a:	4a0e      	ldr	r2, [pc, #56]	; (2f864 <compare_int_lock+0x40>)
   2f82c:	f3bf 8f5b 	dmb	ish
   2f830:	43dc      	mvns	r4, r3
   2f832:	e852 1f00 	ldrex	r1, [r2]
   2f836:	ea01 0504 	and.w	r5, r1, r4
   2f83a:	e842 5600 	strex	r6, r5, [r2]
   2f83e:	2e00      	cmp	r6, #0
   2f840:	d1f7      	bne.n	2f832 <compare_int_lock+0xe>
   2f842:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2f846:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2f84a:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   2f84c:	4806      	ldr	r0, [pc, #24]	; (2f868 <compare_int_lock+0x44>)
   2f84e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   2f852:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2f856:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   2f85a:	420b      	tst	r3, r1
}
   2f85c:	bf14      	ite	ne
   2f85e:	2001      	movne	r0, #1
   2f860:	2000      	moveq	r0, #0
   2f862:	bd70      	pop	{r4, r5, r6, pc}
   2f864:	200031a0 	.word	0x200031a0
   2f868:	40011000 	.word	0x40011000

0002f86c <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   2f86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   2f86e:	491b      	ldr	r1, [pc, #108]	; (2f8dc <sys_clock_timeout_handler+0x70>)
{
   2f870:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   2f872:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   2f876:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   2f878:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   2f87c:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   2f880:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   2f882:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   2f886:	d30f      	bcc.n	2f8a8 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   2f888:	f002 ffa4 	bl	327d4 <sys_clock_announce>
    return p_reg->CC[ch];
   2f88c:	00a3      	lsls	r3, r4, #2
   2f88e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2f892:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   2f896:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   2f89a:	4295      	cmp	r5, r2
   2f89c:	d11d      	bne.n	2f8da <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
   2f89e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   2f8a2:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
   2f8a6:	e012      	b.n	2f8ce <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   2f8a8:	4b0d      	ldr	r3, [pc, #52]	; (2f8e0 <sys_clock_timeout_handler+0x74>)
   2f8aa:	681b      	ldr	r3, [r3, #0]
   2f8ac:	0a1a      	lsrs	r2, r3, #8
   2f8ae:	061b      	lsls	r3, r3, #24
   2f8b0:	195e      	adds	r6, r3, r5
   2f8b2:	4b0c      	ldr	r3, [pc, #48]	; (2f8e4 <sys_clock_timeout_handler+0x78>)
   2f8b4:	f142 0700 	adc.w	r7, r2, #0
   2f8b8:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   2f8bc:	f002 ff8a 	bl	327d4 <sys_clock_announce>
    return p_reg->CC[ch];
   2f8c0:	4a09      	ldr	r2, [pc, #36]	; (2f8e8 <sys_clock_timeout_handler+0x7c>)
   2f8c2:	f504 73a8 	add.w	r3, r4, #336	; 0x150
   2f8c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
   2f8ca:	429d      	cmp	r5, r3
   2f8cc:	d105      	bne.n	2f8da <sys_clock_timeout_handler+0x6e>
    p_reg->EVTENSET = mask;
   2f8ce:	4a06      	ldr	r2, [pc, #24]	; (2f8e8 <sys_clock_timeout_handler+0x7c>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2f8d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2f8d4:	40a3      	lsls	r3, r4
   2f8d6:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   2f8da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2f8dc:	200018a0 	.word	0x200018a0
   2f8e0:	200031a4 	.word	0x200031a4
   2f8e4:	200018a8 	.word	0x200018a8
   2f8e8:	40011000 	.word	0x40011000

0002f8ec <compare_int_unlock>:
	if (key) {
   2f8ec:	b311      	cbz	r1, 2f934 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2f8ee:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   2f8f2:	2301      	movs	r3, #1
   2f8f4:	4a10      	ldr	r2, [pc, #64]	; (2f938 <compare_int_unlock+0x4c>)
   2f8f6:	4083      	lsls	r3, r0
   2f8f8:	e852 cf00 	ldrex	ip, [r2]
   2f8fc:	ea4c 0c03 	orr.w	ip, ip, r3
   2f900:	e842 c100 	strex	r1, ip, [r2]
   2f904:	2900      	cmp	r1, #0
   2f906:	d1f7      	bne.n	2f8f8 <compare_int_unlock+0xc>
   2f908:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   2f90c:	4a0b      	ldr	r2, [pc, #44]	; (2f93c <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2f90e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2f912:	4083      	lsls	r3, r0
   2f914:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2f918:	4b09      	ldr	r3, [pc, #36]	; (2f940 <compare_int_unlock+0x54>)
   2f91a:	f3bf 8f5b 	dmb	ish
   2f91e:	681b      	ldr	r3, [r3, #0]
   2f920:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   2f924:	40c3      	lsrs	r3, r0
   2f926:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2f928:	bf42      	ittt	mi
   2f92a:	4b06      	ldrmi	r3, [pc, #24]	; (2f944 <compare_int_unlock+0x58>)
   2f92c:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   2f930:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   2f934:	4770      	bx	lr
   2f936:	bf00      	nop
   2f938:	200031a0 	.word	0x200031a0
   2f93c:	40011000 	.word	0x40011000
   2f940:	2000319c 	.word	0x2000319c
   2f944:	e000e100 	.word	0xe000e100

0002f948 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   2f948:	4b0d      	ldr	r3, [pc, #52]	; (2f980 <z_nrf_rtc_timer_read+0x38>)
   2f94a:	6818      	ldr	r0, [r3, #0]
   2f94c:	0a01      	lsrs	r1, r0, #8
   2f94e:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   2f950:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   2f954:	4b0b      	ldr	r3, [pc, #44]	; (2f984 <z_nrf_rtc_timer_read+0x3c>)
   2f956:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   2f95a:	1818      	adds	r0, r3, r0
   2f95c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   2f960:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   2f964:	d20a      	bcs.n	2f97c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   2f966:	4b08      	ldr	r3, [pc, #32]	; (2f988 <z_nrf_rtc_timer_read+0x40>)
   2f968:	e9d3 2300 	ldrd	r2, r3, [r3]
   2f96c:	4290      	cmp	r0, r2
   2f96e:	eb71 0303 	sbcs.w	r3, r1, r3
   2f972:	d203      	bcs.n	2f97c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   2f974:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   2f978:	f141 0100 	adc.w	r1, r1, #0
}
   2f97c:	4770      	bx	lr
   2f97e:	bf00      	nop
   2f980:	200031a4 	.word	0x200031a4
   2f984:	40011000 	.word	0x40011000
   2f988:	200018a8 	.word	0x200018a8

0002f98c <compare_set>:
{
   2f98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f990:	b085      	sub	sp, #20
   2f992:	4614      	mov	r4, r2
   2f994:	461d      	mov	r5, r3
   2f996:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
   2f998:	f7ff ff44 	bl	2f824 <compare_int_lock>
   2f99c:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   2f99e:	f7ff ffd3 	bl	2f948 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   2f9a2:	42a0      	cmp	r0, r4
   2f9a4:	eb71 0305 	sbcs.w	r3, r1, r5
   2f9a8:	f080 8081 	bcs.w	2faae <compare_set+0x122>
		if (target_time - curr_time > COUNTER_SPAN) {
   2f9ac:	4b49      	ldr	r3, [pc, #292]	; (2fad4 <compare_set+0x148>)
   2f9ae:	1a20      	subs	r0, r4, r0
   2f9b0:	eb65 0101 	sbc.w	r1, r5, r1
   2f9b4:	4298      	cmp	r0, r3
   2f9b6:	f171 0100 	sbcs.w	r1, r1, #0
   2f9ba:	f080 8087 	bcs.w	2facc <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
   2f9be:	4b46      	ldr	r3, [pc, #280]	; (2fad8 <compare_set+0x14c>)
   2f9c0:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   2f9c4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   2f9c8:	429d      	cmp	r5, r3
   2f9ca:	bf08      	it	eq
   2f9cc:	4294      	cmpeq	r4, r2
   2f9ce:	d059      	beq.n	2fa84 <compare_set+0xf8>
   2f9d0:	ea4f 0987 	mov.w	r9, r7, lsl #2
   2f9d4:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2f9d8:	f107 0850 	add.w	r8, r7, #80	; 0x50
   2f9dc:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   2f9e0:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2f9e4:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2f9e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2f9ec:	40bb      	lsls	r3, r7
	return absolute_time & COUNTER_MAX;
   2f9ee:	f024 4b7f 	bic.w	fp, r4, #4278190080	; 0xff000000
   2f9f2:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
    return p_reg->CC[ch];
   2f9f6:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   2f9fa:	4a38      	ldr	r2, [pc, #224]	; (2fadc <compare_set+0x150>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2f9fc:	9302      	str	r3, [sp, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2f9fe:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   2fa02:	465e      	mov	r6, fp
	uint32_t tick_inc = 2;
   2fa04:	2302      	movs	r3, #2
     return p_reg->COUNTER;
   2fa06:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   2fa0a:	eba0 000a 	sub.w	r0, r0, sl
   2fa0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   2fa12:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   2fa16:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   2fa18:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
   2fa1c:	d105      	bne.n	2fa2a <compare_set+0x9e>
   2fa1e:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
   2fa20:	2013      	movs	r0, #19
   2fa22:	f009 f9c4 	bl	38dae <z_impl_k_busy_wait>
   2fa26:	4a2d      	ldr	r2, [pc, #180]	; (2fadc <compare_set+0x150>)
   2fa28:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
   2fa2a:	9902      	ldr	r1, [sp, #8]
	return (a - b) & COUNTER_MAX;
   2fa2c:	eba6 000a 	sub.w	r0, r6, sl
   2fa30:	3802      	subs	r0, #2
   2fa32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   2fa36:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2fa3a:	f04f 0000 	mov.w	r0, #0
   2fa3e:	f8c8 0000 	str.w	r0, [r8]
			cc_val = now + tick_inc;
   2fa42:	bf88      	it	hi
   2fa44:	eb0a 0603 	addhi.w	r6, sl, r3
   2fa48:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
   2fa4c:	f8c2 1344 	str.w	r1, [r2, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   2fa50:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   2fa54:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   2fa58:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
			tick_inc++;
   2fa5c:	bf88      	it	hi
   2fa5e:	3301      	addhi	r3, #1
	} while ((now2 != now) &&
   2fa60:	4582      	cmp	sl, r0
   2fa62:	d006      	beq.n	2fa72 <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
   2fa64:	1a30      	subs	r0, r6, r0
   2fa66:	3802      	subs	r0, #2
   2fa68:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   2fa6c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2fa70:	d81b      	bhi.n	2faaa <compare_set+0x11e>
	return (a - b) & COUNTER_MAX;
   2fa72:	eba6 060b 	sub.w	r6, r6, fp
   2fa76:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   2fa7a:	1936      	adds	r6, r6, r4
   2fa7c:	f145 0300 	adc.w	r3, r5, #0
   2fa80:	4634      	mov	r4, r6
   2fa82:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
   2fa84:	4914      	ldr	r1, [pc, #80]	; (2fad8 <compare_set+0x14c>)
	cc_data[chan].callback = handler;
   2fa86:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   2fa88:	013b      	lsls	r3, r7, #4
   2fa8a:	eb01 1207 	add.w	r2, r1, r7, lsl #4
	cc_data[chan].callback = handler;
   2fa8e:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   2fa90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2fa92:	6053      	str	r3, [r2, #4]
	cc_data[chan].target_time = target_time;
   2fa94:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
   2fa98:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   2fa9a:	4638      	mov	r0, r7
   2fa9c:	9901      	ldr	r1, [sp, #4]
   2fa9e:	f7ff ff25 	bl	2f8ec <compare_int_unlock>
}
   2faa2:	4620      	mov	r0, r4
   2faa4:	b005      	add	sp, #20
   2faa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2faaa:	4630      	mov	r0, r6
   2faac:	e7ab      	b.n	2fa06 <compare_set+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
   2faae:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2fab0:	4a0b      	ldr	r2, [pc, #44]	; (2fae0 <compare_set+0x154>)
   2fab2:	f3bf 8f5b 	dmb	ish
   2fab6:	40bb      	lsls	r3, r7
   2fab8:	e852 0f00 	ldrex	r0, [r2]
   2fabc:	4318      	orrs	r0, r3
   2fabe:	e842 0100 	strex	r1, r0, [r2]
   2fac2:	2900      	cmp	r1, #0
   2fac4:	d1f8      	bne.n	2fab8 <compare_set+0x12c>
   2fac6:	f3bf 8f5b 	dmb	ish
   2faca:	e7db      	b.n	2fa84 <compare_set+0xf8>
			return -EINVAL;
   2facc:	f06f 0415 	mvn.w	r4, #21
   2fad0:	e7e3      	b.n	2fa9a <compare_set+0x10e>
   2fad2:	bf00      	nop
   2fad4:	01000001 	.word	0x01000001
   2fad8:	20001890 	.word	0x20001890
   2fadc:	40011000 	.word	0x40011000
   2fae0:	2000319c 	.word	0x2000319c

0002fae4 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   2fae4:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   2fae6:	4b19      	ldr	r3, [pc, #100]	; (2fb4c <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   2fae8:	4d19      	ldr	r5, [pc, #100]	; (2fb50 <sys_clock_driver_init+0x6c>)
   2faea:	2400      	movs	r4, #0
   2faec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2faf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2faf4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   2faf8:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   2fafc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2fb00:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2fb04:	4b13      	ldr	r3, [pc, #76]	; (2fb54 <sys_clock_driver_init+0x70>)
   2fb06:	2602      	movs	r6, #2
   2fb08:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   2fb0c:	2101      	movs	r1, #1
   2fb0e:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   2fb12:	2011      	movs	r0, #17
   2fb14:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   2fb18:	4622      	mov	r2, r4
   2fb1a:	f7e4 ff19 	bl	14950 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   2fb1e:	2011      	movs	r0, #17
   2fb20:	f7e4 fee6 	bl	148f0 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   2fb24:	4a0c      	ldr	r2, [pc, #48]	; (2fb58 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   2fb26:	2301      	movs	r3, #1
   2fb28:	60ab      	str	r3, [r5, #8]
   2fb2a:	602b      	str	r3, [r5, #0]
   2fb2c:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_TICKS : (counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   2fb2e:	4b0b      	ldr	r3, [pc, #44]	; (2fb5c <sys_clock_driver_init+0x78>)
   2fb30:	4a0b      	ldr	r2, [pc, #44]	; (2fb60 <sys_clock_driver_init+0x7c>)
   2fb32:	9300      	str	r3, [sp, #0]
   2fb34:	9401      	str	r4, [sp, #4]
   2fb36:	2300      	movs	r3, #0
   2fb38:	4620      	mov	r0, r4
   2fb3a:	f7ff ff27 	bl	2f98c <compare_set>

	z_nrf_clock_control_lf_on(mode);
   2fb3e:	4630      	mov	r0, r6
   2fb40:	f7fd fffc 	bl	2db3c <z_nrf_clock_control_lf_on>

	return 0;
}
   2fb44:	4620      	mov	r0, r4
   2fb46:	b002      	add	sp, #8
   2fb48:	bd70      	pop	{r4, r5, r6, pc}
   2fb4a:	bf00      	nop
   2fb4c:	20001890 	.word	0x20001890
   2fb50:	40011000 	.word	0x40011000
   2fb54:	e000e100 	.word	0xe000e100
   2fb58:	200031a0 	.word	0x200031a0
   2fb5c:	0002f86d 	.word	0x0002f86d
   2fb60:	007fffff 	.word	0x007fffff

0002fb64 <rtc_nrf_isr>:
{
   2fb64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   2fb68:	4c33      	ldr	r4, [pc, #204]	; (2fc38 <rtc_nrf_isr+0xd4>)
   2fb6a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   2fb6e:	079a      	lsls	r2, r3, #30
   2fb70:	d50b      	bpl.n	2fb8a <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2fb72:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   2fb76:	b143      	cbz	r3, 2fb8a <rtc_nrf_isr+0x26>
		overflow_cnt++;
   2fb78:	4a30      	ldr	r2, [pc, #192]	; (2fc3c <rtc_nrf_isr+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2fb7a:	2300      	movs	r3, #0
   2fb7c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   2fb80:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   2fb84:	6813      	ldr	r3, [r2, #0]
   2fb86:	3301      	adds	r3, #1
   2fb88:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   2fb8a:	f04f 0320 	mov.w	r3, #32
   2fb8e:	f3ef 8211 	mrs	r2, BASEPRI
   2fb92:	f383 8812 	msr	BASEPRI_MAX, r3
   2fb96:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   2fb9a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   2fb9e:	03db      	lsls	r3, r3, #15
   2fba0:	d529      	bpl.n	2fbf6 <rtc_nrf_isr+0x92>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2fba2:	f3bf 8f5b 	dmb	ish
   2fba6:	4b26      	ldr	r3, [pc, #152]	; (2fc40 <rtc_nrf_isr+0xdc>)
   2fba8:	e853 1f00 	ldrex	r1, [r3]
   2fbac:	f021 0001 	bic.w	r0, r1, #1
   2fbb0:	e843 0500 	strex	r5, r0, [r3]
   2fbb4:	2d00      	cmp	r5, #0
   2fbb6:	d1f7      	bne.n	2fba8 <rtc_nrf_isr+0x44>
   2fbb8:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   2fbbc:	b911      	cbnz	r1, 2fbc4 <rtc_nrf_isr+0x60>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2fbbe:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   2fbc2:	b1c3      	cbz	r3, 2fbf6 <rtc_nrf_isr+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2fbc4:	2500      	movs	r5, #0
   2fbc6:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   2fbca:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
	__asm__ volatile(
   2fbce:	f382 8811 	msr	BASEPRI, r2
   2fbd2:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
   2fbd6:	f7ff feb7 	bl	2f948 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   2fbda:	f04f 0320 	mov.w	r3, #32
   2fbde:	f3ef 8211 	mrs	r2, BASEPRI
   2fbe2:	f383 8812 	msr	BASEPRI_MAX, r3
   2fbe6:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   2fbea:	4b16      	ldr	r3, [pc, #88]	; (2fc44 <rtc_nrf_isr+0xe0>)
   2fbec:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   2fbf0:	42b0      	cmp	r0, r6
   2fbf2:	41b9      	sbcs	r1, r7
   2fbf4:	d206      	bcs.n	2fc04 <rtc_nrf_isr+0xa0>
	__asm__ volatile(
   2fbf6:	f382 8811 	msr	BASEPRI, r2
   2fbfa:	f3bf 8f6f 	isb	sy
}
   2fbfe:	b003      	add	sp, #12
   2fc00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   2fc04:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   2fc08:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
   2fc0c:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   2fc10:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
   2fc14:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
   2fc16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2fc1a:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
   2fc1e:	f382 8811 	msr	BASEPRI, r2
   2fc22:	f3bf 8f6f 	isb	sy
		if (handler) {
   2fc26:	2900      	cmp	r1, #0
   2fc28:	d0e9      	beq.n	2fbfe <rtc_nrf_isr+0x9a>
			handler(chan, expire_time, user_context);
   2fc2a:	9000      	str	r0, [sp, #0]
   2fc2c:	4632      	mov	r2, r6
   2fc2e:	463b      	mov	r3, r7
   2fc30:	4628      	mov	r0, r5
   2fc32:	4788      	blx	r1
}
   2fc34:	e7e3      	b.n	2fbfe <rtc_nrf_isr+0x9a>
   2fc36:	bf00      	nop
   2fc38:	40011000 	.word	0x40011000
   2fc3c:	200031a4 	.word	0x200031a4
   2fc40:	2000319c 	.word	0x2000319c
   2fc44:	20001890 	.word	0x20001890

0002fc48 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   2fc48:	1c43      	adds	r3, r0, #1
{
   2fc4a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   2fc4c:	d021      	beq.n	2fc92 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   2fc4e:	2801      	cmp	r0, #1
   2fc50:	dd21      	ble.n	2fc96 <sys_clock_set_timeout+0x4e>
   2fc52:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2fc56:	da20      	bge.n	2fc9a <sys_clock_set_timeout+0x52>
   2fc58:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   2fc5a:	f7ff fe75 	bl	2f948 <z_nrf_rtc_timer_read>
   2fc5e:	4b10      	ldr	r3, [pc, #64]	; (2fca0 <sys_clock_set_timeout+0x58>)
   2fc60:	e9d3 1300 	ldrd	r1, r3, [r3]
   2fc64:	1a42      	subs	r2, r0, r1
		ticks = 0;
   2fc66:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
	if (cyc > MAX_CYCLES) {
   2fc6a:	480e      	ldr	r0, [pc, #56]	; (2fca4 <sys_clock_set_timeout+0x5c>)
		ticks = 0;
   2fc6c:	bf28      	it	cs
   2fc6e:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   2fc70:	3201      	adds	r2, #1
   2fc72:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
   2fc74:	4282      	cmp	r2, r0
   2fc76:	bf28      	it	cs
   2fc78:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
   2fc7a:	1852      	adds	r2, r2, r1
   2fc7c:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   2fc80:	4909      	ldr	r1, [pc, #36]	; (2fca8 <sys_clock_set_timeout+0x60>)
   2fc82:	9001      	str	r0, [sp, #4]
   2fc84:	9100      	str	r1, [sp, #0]
   2fc86:	f143 0300 	adc.w	r3, r3, #0
   2fc8a:	f7ff fe7f 	bl	2f98c <compare_set>
}
   2fc8e:	b002      	add	sp, #8
   2fc90:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   2fc92:	4804      	ldr	r0, [pc, #16]	; (2fca4 <sys_clock_set_timeout+0x5c>)
   2fc94:	e7e0      	b.n	2fc58 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   2fc96:	2400      	movs	r4, #0
   2fc98:	e7df      	b.n	2fc5a <sys_clock_set_timeout+0x12>
   2fc9a:	4c02      	ldr	r4, [pc, #8]	; (2fca4 <sys_clock_set_timeout+0x5c>)
   2fc9c:	e7dd      	b.n	2fc5a <sys_clock_set_timeout+0x12>
   2fc9e:	bf00      	nop
   2fca0:	200018a0 	.word	0x200018a0
   2fca4:	007fffff 	.word	0x007fffff
   2fca8:	0002f86d 	.word	0x0002f86d

0002fcac <sys_clock_elapsed>:
{
   2fcac:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   2fcae:	f7ff fe4b 	bl	2f948 <z_nrf_rtc_timer_read>
   2fcb2:	4b02      	ldr	r3, [pc, #8]	; (2fcbc <sys_clock_elapsed+0x10>)
   2fcb4:	681b      	ldr	r3, [r3, #0]
}
   2fcb6:	1ac0      	subs	r0, r0, r3
   2fcb8:	bd08      	pop	{r3, pc}
   2fcba:	bf00      	nop
   2fcbc:	200018a0 	.word	0x200018a0

0002fcc0 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   2fcc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        case 1: return NRF_P1;
   2fcc4:	4e4d      	ldr	r6, [pc, #308]	; (2fdfc <pinctrl_configure_pins+0x13c>)
   2fcc6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2fcca:	2701      	movs	r7, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2fccc:	4281      	cmp	r1, r0
   2fcce:	d102      	bne.n	2fcd6 <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   2fcd0:	2000      	movs	r0, #0
}
   2fcd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2fcd6:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   2fcd8:	f005 037f 	and.w	r3, r5, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2fcdc:	f3c5 2443 	ubfx	r4, r5, #9, #4
			pin = 0xFFFFFFFFU;
   2fce0:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   2fce2:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
   2fce6:	bf08      	it	eq
   2fce8:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
   2fcec:	2d19      	cmp	r5, #25
   2fcee:	f200 8081 	bhi.w	2fdf4 <pinctrl_configure_pins+0x134>
   2fcf2:	e8df f005 	tbb	[pc, r5]
   2fcf6:	1f0d      	.short	0x1f0d
   2fcf8:	3e2a2724 	.word	0x3e2a2724
   2fcfc:	7f7f7f27 	.word	0x7f7f7f27
   2fd00:	7f6b427f 	.word	0x7f6b427f
   2fd04:	7f7f7f7f 	.word	0x7f7f7f7f
   2fd08:	7f7f7f7f 	.word	0x7f7f7f7f
   2fd0c:	7c79766e 	.word	0x7c79766e
			NRF_PSEL_UART(reg, TXD) = pin;
   2fd10:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
   2fd14:	ea4f 1c53 	mov.w	ip, r3, lsr #5
        case 1: return NRF_P1;
   2fd18:	f1bc 0f01 	cmp.w	ip, #1
    *p_pin = pin_number & 0x1F;
   2fd1c:	f003 051f 	and.w	r5, r3, #31
        case 1: return NRF_P1;
   2fd20:	bf14      	ite	ne
   2fd22:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
   2fd26:	46b4      	moveq	ip, r6
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2fd28:	fa07 f505 	lsl.w	r5, r7, r5
    p_reg->OUTSET = set_mask;
   2fd2c:	f8cc 5508 	str.w	r5, [ip, #1288]	; 0x508
   2fd30:	2501      	movs	r5, #1
   2fd32:	e002      	b.n	2fd3a <pinctrl_configure_pins+0x7a>
			NRF_PSEL_UART(reg, RXD) = pin;
   2fd34:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2fd38:	2500      	movs	r5, #0
   2fd3a:	46ae      	mov	lr, r5
   2fd3c:	e024      	b.n	2fd88 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_UART(reg, RTS) = pin;
   2fd3e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
   2fd42:	e7e7      	b.n	2fd14 <pinctrl_configure_pins+0x54>
			NRF_PSEL_UART(reg, CTS) = pin;
   2fd44:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
   2fd48:	e7f6      	b.n	2fd38 <pinctrl_configure_pins+0x78>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   2fd4a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2fd4e:	2500      	movs	r5, #0
    return pin_number >> 5;
   2fd50:	ea4f 1e53 	mov.w	lr, r3, lsr #5
        case 1: return NRF_P1;
   2fd54:	f1be 0f01 	cmp.w	lr, #1
   2fd58:	bf14      	ite	ne
   2fd5a:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
   2fd5e:	46b6      	moveq	lr, r6
    *p_pin = pin_number & 0x1F;
   2fd60:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2fd64:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
   2fd68:	f8ce c50c 	str.w	ip, [lr, #1292]	; 0x50c
   2fd6c:	f04f 0e01 	mov.w	lr, #1
   2fd70:	e00a      	b.n	2fd88 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   2fd72:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   2fd76:	2501      	movs	r5, #1
   2fd78:	e7ea      	b.n	2fd50 <pinctrl_configure_pins+0x90>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   2fd7a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   2fd7e:	2c00      	cmp	r4, #0
   2fd80:	d1da      	bne.n	2fd38 <pinctrl_configure_pins+0x78>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2fd82:	2500      	movs	r5, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2fd84:	46ae      	mov	lr, r5
				drive = NRF_DRIVE_S0D1;
   2fd86:	2406      	movs	r4, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   2fd88:	f850 cb04 	ldr.w	ip, [r0], #4
   2fd8c:	f40c 5800 	and.w	r8, ip, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2fd90:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   2fd94:	ea4f 2404 	mov.w	r4, r4, lsl #8
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   2fd98:	f3cc 18c1 	ubfx	r8, ip, #7, #2
    *p_pin = pin_number & 0x1F;
   2fd9c:	f003 0c1f 	and.w	ip, r3, #31
    return pin_number >> 5;
   2fda0:	ea4f 1353 	mov.w	r3, r3, lsr #5
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2fda4:	bf1c      	itt	ne
   2fda6:	2501      	movne	r5, #1
   2fda8:	f04f 0e00 	movne.w	lr, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2fdac:	ea44 0488 	orr.w	r4, r4, r8, lsl #2
        case 0: return NRF_P0;
   2fdb0:	2b01      	cmp	r3, #1
   2fdb2:	bf0c      	ite	eq
   2fdb4:	4633      	moveq	r3, r6
   2fdb6:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2fdba:	ea44 040e 	orr.w	r4, r4, lr
    reg->PIN_CNF[pin_number] = cnf;
   2fdbe:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2fdc2:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   2fdc6:	f843 402c 	str.w	r4, [r3, ip, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2fdca:	e77f      	b.n	2fccc <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   2fdcc:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   2fdd0:	e7d5      	b.n	2fd7e <pinctrl_configure_pins+0xbe>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   2fdd2:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   2fdd6:	6805      	ldr	r5, [r0, #0]
   2fdd8:	f3c5 3580 	ubfx	r5, r5, #14, #1
    if (value == 0)
   2fddc:	2d00      	cmp	r5, #0
   2fdde:	d0ca      	beq.n	2fd76 <pinctrl_configure_pins+0xb6>
   2fde0:	e798      	b.n	2fd14 <pinctrl_configure_pins+0x54>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   2fde2:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   2fde6:	e7f6      	b.n	2fdd6 <pinctrl_configure_pins+0x116>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   2fde8:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   2fdec:	e7f3      	b.n	2fdd6 <pinctrl_configure_pins+0x116>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   2fdee:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
   2fdf2:	e7f0      	b.n	2fdd6 <pinctrl_configure_pins+0x116>
		switch (NRF_GET_FUN(pins[i])) {
   2fdf4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2fdf8:	e76b      	b.n	2fcd2 <pinctrl_configure_pins+0x12>
   2fdfa:	bf00      	nop
   2fdfc:	50000300 	.word	0x50000300

0002fe00 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2fe00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2fe04:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   2fe08:	2a08      	cmp	r2, #8
   2fe0a:	d106      	bne.n	2fe1a <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2fe0c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   2fe10:	2b05      	cmp	r3, #5
   2fe12:	d802      	bhi.n	2fe1a <nrf52_errata_103+0x1a>
   2fe14:	4a02      	ldr	r2, [pc, #8]	; (2fe20 <nrf52_errata_103+0x20>)
   2fe16:	5cd0      	ldrb	r0, [r2, r3]
   2fe18:	4770      	bx	lr
                        return false;
   2fe1a:	2000      	movs	r0, #0
}
   2fe1c:	4770      	bx	lr
   2fe1e:	bf00      	nop
   2fe20:	0003f01c 	.word	0x0003f01c

0002fe24 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   2fe24:	4a02      	ldr	r2, [pc, #8]	; (2fe30 <nvmc_wait+0xc>)
   2fe26:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   2fe2a:	2b00      	cmp	r3, #0
   2fe2c:	d0fb      	beq.n	2fe26 <nvmc_wait+0x2>
}
   2fe2e:	4770      	bx	lr
   2fe30:	4001e000 	.word	0x4001e000

0002fe34 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   2fe34:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2fe36:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2fe3a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   2fe3e:	2a08      	cmp	r2, #8
   2fe40:	d14e      	bne.n	2fee0 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
   2fe42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   2fe46:	2100      	movs	r1, #0
   2fe48:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   2fe4c:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   2fe50:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   2fe54:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
   2fe58:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
   2fe5c:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   2fe60:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
   2fe64:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   2fe68:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
   2fe6c:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   2fe70:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   2fe74:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   2fe78:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
   2fe7c:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   2fe80:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   2fe84:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   2fe88:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
   2fe8c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   2fe90:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
   2fe94:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   2fe98:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
   2fe9c:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   2fea0:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
   2fea4:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   2fea8:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
   2feac:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   2feb0:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
   2feb4:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   2feb8:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
   2febc:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   2fec0:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
   2fec4:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   2fec8:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
   2fecc:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   2fed0:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
   2fed4:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   2fed8:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
   2fedc:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   2fee0:	f7ff ff8e 	bl	2fe00 <nrf52_errata_103>
   2fee4:	b118      	cbz	r0, 2feee <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   2fee6:	4b3b      	ldr	r3, [pc, #236]	; (2ffd4 <SystemInit+0x1a0>)
   2fee8:	4a3b      	ldr	r2, [pc, #236]	; (2ffd8 <SystemInit+0x1a4>)
   2feea:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   2feee:	f7ff ff87 	bl	2fe00 <nrf52_errata_103>
   2fef2:	b118      	cbz	r0, 2fefc <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   2fef4:	4b39      	ldr	r3, [pc, #228]	; (2ffdc <SystemInit+0x1a8>)
   2fef6:	22fb      	movs	r2, #251	; 0xfb
   2fef8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   2fefc:	f7ff ff80 	bl	2fe00 <nrf52_errata_103>
   2ff00:	b170      	cbz	r0, 2ff20 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   2ff02:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   2ff06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2ff0a:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   2ff0e:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   2ff12:	f022 020f 	bic.w	r2, r2, #15
   2ff16:	f003 030f 	and.w	r3, r3, #15
   2ff1a:	4313      	orrs	r3, r2
   2ff1c:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   2ff20:	f7ff ff6e 	bl	2fe00 <nrf52_errata_103>
   2ff24:	b120      	cbz	r0, 2ff30 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   2ff26:	4b2e      	ldr	r3, [pc, #184]	; (2ffe0 <SystemInit+0x1ac>)
   2ff28:	f44f 7200 	mov.w	r2, #512	; 0x200
   2ff2c:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2ff30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2ff34:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   2ff38:	2b08      	cmp	r3, #8
   2ff3a:	d11a      	bne.n	2ff72 <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   2ff3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2ff40:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   2ff44:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   2ff46:	bf44      	itt	mi
   2ff48:	f06f 0201 	mvnmi.w	r2, #1
   2ff4c:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2ff50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2ff54:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
   2ff58:	2b05      	cmp	r3, #5
   2ff5a:	d802      	bhi.n	2ff62 <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   2ff5c:	4a21      	ldr	r2, [pc, #132]	; (2ffe4 <SystemInit+0x1b0>)
   2ff5e:	5cd3      	ldrb	r3, [r2, r3]
   2ff60:	b13b      	cbz	r3, 2ff72 <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   2ff62:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   2ff66:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   2ff6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2ff6e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   2ff72:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   2ff76:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   2ff7a:	2a00      	cmp	r2, #0
   2ff7c:	db03      	blt.n	2ff86 <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   2ff7e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   2ff82:	2b00      	cmp	r3, #0
   2ff84:	da22      	bge.n	2ffcc <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   2ff86:	4918      	ldr	r1, [pc, #96]	; (2ffe8 <SystemInit+0x1b4>)
   2ff88:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   2ff8a:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   2ff8e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   2ff92:	2412      	movs	r4, #18
    nvmc_wait();
   2ff94:	f7ff ff46 	bl	2fe24 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   2ff98:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   2ff9c:	f7ff ff42 	bl	2fe24 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   2ffa0:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   2ffa4:	f7ff ff3e 	bl	2fe24 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   2ffa8:	2300      	movs	r3, #0
   2ffaa:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   2ffae:	f7ff ff39 	bl	2fe24 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   2ffb2:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   2ffb6:	490d      	ldr	r1, [pc, #52]	; (2ffec <SystemInit+0x1b8>)
   2ffb8:	4b0d      	ldr	r3, [pc, #52]	; (2fff0 <SystemInit+0x1bc>)
   2ffba:	68ca      	ldr	r2, [r1, #12]
   2ffbc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2ffc0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   2ffc2:	60cb      	str	r3, [r1, #12]
   2ffc4:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   2ffc8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   2ffca:	e7fd      	b.n	2ffc8 <SystemInit+0x194>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   2ffcc:	4b09      	ldr	r3, [pc, #36]	; (2fff4 <SystemInit+0x1c0>)
   2ffce:	4a0a      	ldr	r2, [pc, #40]	; (2fff8 <SystemInit+0x1c4>)
   2ffd0:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   2ffd2:	bd10      	pop	{r4, pc}
   2ffd4:	40005000 	.word	0x40005000
   2ffd8:	00038148 	.word	0x00038148
   2ffdc:	4000f000 	.word	0x4000f000
   2ffe0:	40029000 	.word	0x40029000
   2ffe4:	0003f016 	.word	0x0003f016
   2ffe8:	4001e000 	.word	0x4001e000
   2ffec:	e000ed00 	.word	0xe000ed00
   2fff0:	05fa0004 	.word	0x05fa0004
   2fff4:	200008b8 	.word	0x200008b8
   2fff8:	03d09000 	.word	0x03d09000

0002fffc <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   2fffc:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   2fffe:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   30000:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   30002:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   30006:	fab2 f382 	clz	r3, r2
   3000a:	f1c3 031f 	rsb	r3, r3, #31
   3000e:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   30010:	fa05 f403 	lsl.w	r4, r5, r3
   30014:	ea22 0404 	bic.w	r4, r2, r4
   30018:	e850 6f00 	ldrex	r6, [r0]
   3001c:	4296      	cmp	r6, r2
   3001e:	d104      	bne.n	3002a <nrfx_flag32_alloc+0x2e>
   30020:	e840 4c00 	strex	ip, r4, [r0]
   30024:	f1bc 0f00 	cmp.w	ip, #0
   30028:	d1f6      	bne.n	30018 <nrfx_flag32_alloc+0x1c>
   3002a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   3002e:	d1e7      	bne.n	30000 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   30030:	4801      	ldr	r0, [pc, #4]	; (30038 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   30032:	700b      	strb	r3, [r1, #0]
}
   30034:	bd70      	pop	{r4, r5, r6, pc}
   30036:	bf00      	nop
   30038:	0bad0000 	.word	0x0bad0000

0003003c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   3003c:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   3003e:	6803      	ldr	r3, [r0, #0]
   30040:	40cb      	lsrs	r3, r1
   30042:	07db      	lsls	r3, r3, #31
   30044:	d414      	bmi.n	30070 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   30046:	2301      	movs	r3, #1
   30048:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   3004a:	6802      	ldr	r2, [r0, #0]
   3004c:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   30050:	ea43 0102 	orr.w	r1, r3, r2
   30054:	e850 4f00 	ldrex	r4, [r0]
   30058:	4294      	cmp	r4, r2
   3005a:	d104      	bne.n	30066 <nrfx_flag32_free+0x2a>
   3005c:	e840 1c00 	strex	ip, r1, [r0]
   30060:	f1bc 0f00 	cmp.w	ip, #0
   30064:	d1f6      	bne.n	30054 <nrfx_flag32_free+0x18>
   30066:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   3006a:	d1ee      	bne.n	3004a <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   3006c:	4801      	ldr	r0, [pc, #4]	; (30074 <nrfx_flag32_free+0x38>)
}
   3006e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   30070:	4801      	ldr	r0, [pc, #4]	; (30078 <nrfx_flag32_free+0x3c>)
   30072:	e7fc      	b.n	3006e <nrfx_flag32_free+0x32>
   30074:	0bad0000 	.word	0x0bad0000
   30078:	0bad0004 	.word	0x0bad0004

0003007c <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   3007c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
   3007e:	4604      	mov	r4, r0
   30080:	b118      	cbz	r0, 3008a <clock_stop+0xe>
   30082:	2801      	cmp	r0, #1
   30084:	d022      	beq.n	300cc <clock_stop+0x50>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   30086:	b003      	add	sp, #12
   30088:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
   3008a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3008e:	2202      	movs	r2, #2
   30090:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   30094:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   30098:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3009c:	2201      	movs	r2, #1
   3009e:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   300a0:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   300a2:	2301      	movs	r3, #1
   300a4:	f88d 3007 	strb.w	r3, [sp, #7]
   300a8:	f242 7510 	movw	r5, #10000	; 0x2710
   300ac:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
   300b0:	b1cc      	cbz	r4, 300e6 <clock_stop+0x6a>
   300b2:	2c01      	cmp	r4, #1
   300b4:	d1e7      	bne.n	30086 <clock_stop+0xa>
            if (p_clk_src != NULL)
   300b6:	b3c7      	cbz	r7, 3012a <clock_stop+0xae>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   300b8:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   300bc:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   300c0:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   300c2:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   300c6:	03da      	lsls	r2, r3, #15
   300c8:	d521      	bpl.n	3010e <clock_stop+0x92>
   300ca:	e016      	b.n	300fa <clock_stop+0x7e>
    p_reg->INTENCLR = mask;
   300cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   300d0:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   300d2:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   300d6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   300da:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   300de:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   300e0:	f10d 0707 	add.w	r7, sp, #7
   300e4:	e7dd      	b.n	300a2 <clock_stop+0x26>
            if (p_clk_src != NULL)
   300e6:	b1b7      	cbz	r7, 30116 <clock_stop+0x9a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   300e8:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   300ec:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   300f0:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   300f2:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   300f6:	03d8      	lsls	r0, r3, #15
   300f8:	d5c5      	bpl.n	30086 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   300fa:	f89d 0007 	ldrb.w	r0, [sp, #7]
   300fe:	2801      	cmp	r0, #1
   30100:	d103      	bne.n	3010a <clock_stop+0x8e>
   30102:	f008 f912 	bl	3832a <nrfx_busy_wait>
   30106:	3d01      	subs	r5, #1
   30108:	d1d2      	bne.n	300b0 <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
   3010a:	2c01      	cmp	r4, #1
   3010c:	d1bb      	bne.n	30086 <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
   3010e:	4b0c      	ldr	r3, [pc, #48]	; (30140 <clock_stop+0xc4>)
   30110:	2200      	movs	r2, #0
   30112:	715a      	strb	r2, [r3, #5]
   30114:	e7b7      	b.n	30086 <clock_stop+0xa>
   30116:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   3011a:	03d9      	lsls	r1, r3, #15
   3011c:	d5b3      	bpl.n	30086 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   3011e:	2001      	movs	r0, #1
   30120:	f008 f903 	bl	3832a <nrfx_busy_wait>
   30124:	3d01      	subs	r5, #1
   30126:	d1f6      	bne.n	30116 <clock_stop+0x9a>
   30128:	e7ad      	b.n	30086 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   3012a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   3012e:	03db      	lsls	r3, r3, #15
   30130:	d5ed      	bpl.n	3010e <clock_stop+0x92>
   30132:	2001      	movs	r0, #1
   30134:	f008 f8f9 	bl	3832a <nrfx_busy_wait>
   30138:	3d01      	subs	r5, #1
   3013a:	d1f6      	bne.n	3012a <clock_stop+0xae>
   3013c:	e7e7      	b.n	3010e <clock_stop+0x92>
   3013e:	bf00      	nop
   30140:	200031a8 	.word	0x200031a8

00030144 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   30144:	4b04      	ldr	r3, [pc, #16]	; (30158 <nrfx_clock_init+0x14>)
   30146:	791a      	ldrb	r2, [r3, #4]
   30148:	b922      	cbnz	r2, 30154 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   3014a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   3014c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   3014e:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   30150:	4802      	ldr	r0, [pc, #8]	; (3015c <nrfx_clock_init+0x18>)
   30152:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   30154:	4802      	ldr	r0, [pc, #8]	; (30160 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   30156:	4770      	bx	lr
   30158:	200031a8 	.word	0x200031a8
   3015c:	0bad0000 	.word	0x0bad0000
   30160:	0bad000c 	.word	0x0bad000c

00030164 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   30164:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   30166:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3016a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   3016e:	b16a      	cbz	r2, 3018c <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   30170:	2200      	movs	r2, #0
   30172:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   30176:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   3017a:	2201      	movs	r2, #1
   3017c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   30180:	4b11      	ldr	r3, [pc, #68]	; (301c8 <nrfx_power_clock_irq_handler+0x64>)
   30182:	7958      	ldrb	r0, [r3, #5]
   30184:	b910      	cbnz	r0, 3018c <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   30186:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   30188:	681b      	ldr	r3, [r3, #0]
   3018a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   3018c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   30190:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   30194:	b172      	cbz	r2, 301b4 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   30196:	2200      	movs	r2, #0
   30198:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   3019c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   301a0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   301a4:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   301a8:	0792      	lsls	r2, r2, #30
   301aa:	d104      	bne.n	301b6 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   301ac:	2201      	movs	r2, #1
   301ae:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   301b2:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   301b4:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   301b6:	2202      	movs	r2, #2
   301b8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   301bc:	4b02      	ldr	r3, [pc, #8]	; (301c8 <nrfx_power_clock_irq_handler+0x64>)
}
   301be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   301c2:	681b      	ldr	r3, [r3, #0]
   301c4:	2001      	movs	r0, #1
   301c6:	4718      	bx	r3
   301c8:	200031a8 	.word	0x200031a8

000301cc <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   301cc:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   301ce:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   301d2:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
   301d4:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   301d6:	6002      	str	r2, [r0, #0]
}
   301d8:	4802      	ldr	r0, [pc, #8]	; (301e4 <nrf_gpio_pin_port_decode+0x18>)
   301da:	bf18      	it	ne
   301dc:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   301e0:	4770      	bx	lr
   301e2:	bf00      	nop
   301e4:	50000300 	.word	0x50000300

000301e8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   301e8:	4b03      	ldr	r3, [pc, #12]	; (301f8 <pin_in_use_by_te+0x10>)
   301ea:	3008      	adds	r0, #8
   301ec:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   301f0:	f3c0 1040 	ubfx	r0, r0, #5, #1
   301f4:	4770      	bx	lr
   301f6:	bf00      	nop
   301f8:	200008bc 	.word	0x200008bc

000301fc <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   301fc:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   301fe:	f100 0308 	add.w	r3, r0, #8
   30202:	4c0c      	ldr	r4, [pc, #48]	; (30234 <call_handler+0x38>)
   30204:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   30208:	05da      	lsls	r2, r3, #23
{
   3020a:	4605      	mov	r5, r0
   3020c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   3020e:	d507      	bpl.n	30220 <call_handler+0x24>
   30210:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   30214:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   30218:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   3021c:	6852      	ldr	r2, [r2, #4]
   3021e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   30220:	68a3      	ldr	r3, [r4, #8]
   30222:	b12b      	cbz	r3, 30230 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   30224:	68e2      	ldr	r2, [r4, #12]
   30226:	4631      	mov	r1, r6
   30228:	4628      	mov	r0, r5
    }
}
   3022a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   3022e:	4718      	bx	r3
}
   30230:	bd70      	pop	{r4, r5, r6, pc}
   30232:	bf00      	nop
   30234:	200008bc 	.word	0x200008bc

00030238 <release_handler>:
{
   30238:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   3023a:	4a12      	ldr	r2, [pc, #72]	; (30284 <release_handler+0x4c>)
   3023c:	3008      	adds	r0, #8
   3023e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   30242:	05d9      	lsls	r1, r3, #23
   30244:	d51b      	bpl.n	3027e <release_handler+0x46>
   30246:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   3024a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   3024e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   30252:	f102 040e 	add.w	r4, r2, #14
   30256:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   30258:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   3025c:	f413 7f80 	tst.w	r3, #256	; 0x100
   30260:	d003      	beq.n	3026a <release_handler+0x32>
   30262:	f3c3 2343 	ubfx	r3, r3, #9, #4
   30266:	4299      	cmp	r1, r3
   30268:	d009      	beq.n	3027e <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   3026a:	3001      	adds	r0, #1
   3026c:	2830      	cmp	r0, #48	; 0x30
   3026e:	d1f3      	bne.n	30258 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   30270:	2300      	movs	r3, #0
   30272:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   30276:	4804      	ldr	r0, [pc, #16]	; (30288 <release_handler+0x50>)
}
   30278:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   3027a:	f7ff bedf 	b.w	3003c <nrfx_flag32_free>
}
   3027e:	bc10      	pop	{r4}
   30280:	4770      	bx	lr
   30282:	bf00      	nop
   30284:	200008bc 	.word	0x200008bc
   30288:	20000930 	.word	0x20000930

0003028c <pin_handler_trigger_uninit>:
{
   3028c:	b538      	push	{r3, r4, r5, lr}
   3028e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   30290:	f7ff ffaa 	bl	301e8 <pin_in_use_by_te>
   30294:	4c09      	ldr	r4, [pc, #36]	; (302bc <pin_handler_trigger_uninit+0x30>)
   30296:	f102 0508 	add.w	r5, r2, #8
   3029a:	b140      	cbz	r0, 302ae <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   3029c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   302a0:	4907      	ldr	r1, [pc, #28]	; (302c0 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   302a2:	0b5b      	lsrs	r3, r3, #13
   302a4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   302a8:	2000      	movs	r0, #0
   302aa:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   302ae:	4610      	mov	r0, r2
   302b0:	f7ff ffc2 	bl	30238 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   302b4:	2300      	movs	r3, #0
   302b6:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   302ba:	bd38      	pop	{r3, r4, r5, pc}
   302bc:	200008bc 	.word	0x200008bc
   302c0:	40006000 	.word	0x40006000

000302c4 <nrfx_gpiote_input_configure>:
{
   302c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   302c8:	4604      	mov	r4, r0
   302ca:	4616      	mov	r6, r2
   302cc:	461d      	mov	r5, r3
    if (p_input_config)
   302ce:	b301      	cbz	r1, 30312 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   302d0:	4f4e      	ldr	r7, [pc, #312]	; (3040c <nrfx_gpiote_input_configure+0x148>)
   302d2:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   302d6:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   302da:	079b      	lsls	r3, r3, #30
   302dc:	d502      	bpl.n	302e4 <nrfx_gpiote_input_configure+0x20>
   302de:	f7ff ff83 	bl	301e8 <pin_in_use_by_te>
   302e2:	bb10      	cbnz	r0, 3032a <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   302e4:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   302e6:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   302ea:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   302ee:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   302f2:	f10d 020f 	add.w	r2, sp, #15
   302f6:	460b      	mov	r3, r1
   302f8:	4620      	mov	r0, r4
   302fa:	f10d 010e 	add.w	r1, sp, #14
   302fe:	f008 f861 	bl	383c4 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   30302:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   30306:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   3030a:	f043 0301 	orr.w	r3, r3, #1
   3030e:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
   30312:	b346      	cbz	r6, 30366 <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   30314:	4b3d      	ldr	r3, [pc, #244]	; (3040c <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   30316:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   3031a:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3031c:	f104 0708 	add.w	r7, r4, #8
   30320:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
   30324:	0788      	lsls	r0, r1, #30
   30326:	d502      	bpl.n	3032e <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
   30328:	b1aa      	cbz	r2, 30356 <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
   3032a:	4839      	ldr	r0, [pc, #228]	; (30410 <nrfx_gpiote_input_configure+0x14c>)
   3032c:	e01d      	b.n	3036a <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   3032e:	f021 0120 	bic.w	r1, r1, #32
   30332:	04c9      	lsls	r1, r1, #19
   30334:	0cc9      	lsrs	r1, r1, #19
   30336:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
   3033a:	b162      	cbz	r2, 30356 <nrfx_gpiote_input_configure+0x92>
                if (!edge)
   3033c:	f1bc 0f03 	cmp.w	ip, #3
   30340:	d8f3      	bhi.n	3032a <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
   30342:	6872      	ldr	r2, [r6, #4]
   30344:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   30346:	f1bc 0f00 	cmp.w	ip, #0
   3034a:	d111      	bne.n	30370 <nrfx_gpiote_input_configure+0xac>
   3034c:	4a31      	ldr	r2, [pc, #196]	; (30414 <nrfx_gpiote_input_configure+0x150>)
   3034e:	f506 76a2 	add.w	r6, r6, #324	; 0x144
   30352:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   30356:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
   3035a:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   3035e:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
   30362:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
   30366:	bb45      	cbnz	r5, 303ba <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
   30368:	482b      	ldr	r0, [pc, #172]	; (30418 <nrfx_gpiote_input_configure+0x154>)
}
   3036a:	b004      	add	sp, #16
   3036c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   30370:	00b2      	lsls	r2, r6, #2
   30372:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   30376:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   3037a:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
   3037e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   30382:	f020 0003 	bic.w	r0, r0, #3
   30386:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   3038a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   3038e:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   30392:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   30396:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3039a:	0220      	lsls	r0, r4, #8
   3039c:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   303a0:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
   303a4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   303a8:	ea40 000e 	orr.w	r0, r0, lr
   303ac:	f041 0120 	orr.w	r1, r1, #32
   303b0:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
   303b4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   303b8:	e7cd      	b.n	30356 <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   303ba:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   303be:	4620      	mov	r0, r4
   303c0:	f7ff ff3a 	bl	30238 <release_handler>
    if (!handler)
   303c4:	2e00      	cmp	r6, #0
   303c6:	d0cf      	beq.n	30368 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   303c8:	4d10      	ldr	r5, [pc, #64]	; (3040c <nrfx_gpiote_input_configure+0x148>)
   303ca:	e9d5 2300 	ldrd	r2, r3, [r5]
   303ce:	4296      	cmp	r6, r2
   303d0:	d101      	bne.n	303d6 <nrfx_gpiote_input_configure+0x112>
   303d2:	429f      	cmp	r7, r3
   303d4:	d018      	beq.n	30408 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   303d6:	4811      	ldr	r0, [pc, #68]	; (3041c <nrfx_gpiote_input_configure+0x158>)
   303d8:	f10d 010f 	add.w	r1, sp, #15
   303dc:	f7ff fe0e 	bl	2fffc <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   303e0:	4b0d      	ldr	r3, [pc, #52]	; (30418 <nrfx_gpiote_input_configure+0x154>)
   303e2:	4298      	cmp	r0, r3
   303e4:	d1c1      	bne.n	3036a <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   303e6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   303ea:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   303ee:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   303f2:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   303f4:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   303f6:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   303fa:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   303fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   30402:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   30406:	e7af      	b.n	30368 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   30408:	2200      	movs	r2, #0
   3040a:	e7ee      	b.n	303ea <nrfx_gpiote_input_configure+0x126>
   3040c:	200008bc 	.word	0x200008bc
   30410:	0bad0004 	.word	0x0bad0004
   30414:	40006000 	.word	0x40006000
   30418:	0bad0000 	.word	0x0bad0000
   3041c:	20000930 	.word	0x20000930

00030420 <nrfx_gpiote_output_configure>:
{
   30420:	b5f0      	push	{r4, r5, r6, r7, lr}
   30422:	4604      	mov	r4, r0
   30424:	b085      	sub	sp, #20
   30426:	4615      	mov	r5, r2
    if (p_config)
   30428:	b319      	cbz	r1, 30472 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3042a:	4e33      	ldr	r6, [pc, #204]	; (304f8 <nrfx_gpiote_output_configure+0xd8>)
   3042c:	f100 0708 	add.w	r7, r0, #8
   30430:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   30434:	0793      	lsls	r3, r2, #30
   30436:	d403      	bmi.n	30440 <nrfx_gpiote_output_configure+0x20>
   30438:	f7ff fed6 	bl	301e8 <pin_in_use_by_te>
   3043c:	2800      	cmp	r0, #0
   3043e:	d158      	bne.n	304f2 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   30440:	f012 0f1c 	tst.w	r2, #28
   30444:	d002      	beq.n	3044c <nrfx_gpiote_output_configure+0x2c>
   30446:	784b      	ldrb	r3, [r1, #1]
   30448:	2b01      	cmp	r3, #1
   3044a:	d052      	beq.n	304f2 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   3044c:	2301      	movs	r3, #1
   3044e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   30452:	2300      	movs	r3, #0
   30454:	e9cd 1300 	strd	r1, r3, [sp]
   30458:	1c4a      	adds	r2, r1, #1
   3045a:	1c8b      	adds	r3, r1, #2
   3045c:	4620      	mov	r0, r4
   3045e:	f10d 010f 	add.w	r1, sp, #15
   30462:	f007 ffaf 	bl	383c4 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   30466:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   3046a:	f043 0303 	orr.w	r3, r3, #3
   3046e:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   30472:	b915      	cbnz	r5, 3047a <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   30474:	4821      	ldr	r0, [pc, #132]	; (304fc <nrfx_gpiote_output_configure+0xdc>)
}
   30476:	b005      	add	sp, #20
   30478:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3047a:	4e1f      	ldr	r6, [pc, #124]	; (304f8 <nrfx_gpiote_output_configure+0xd8>)
   3047c:	f104 0708 	add.w	r7, r4, #8
   30480:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   30484:	0783      	lsls	r3, r0, #30
   30486:	d534      	bpl.n	304f2 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   30488:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   3048c:	4661      	mov	r1, ip
   3048e:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   30490:	f020 0020 	bic.w	r0, r0, #32
   30494:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   30498:	04c0      	lsls	r0, r0, #19
   3049a:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   3049e:	0cc0      	lsrs	r0, r0, #19
   304a0:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   304a4:	2300      	movs	r3, #0
   304a6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   304aa:	786a      	ldrb	r2, [r5, #1]
   304ac:	2a00      	cmp	r2, #0
   304ae:	d0e1      	beq.n	30474 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   304b0:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   304b4:	78ad      	ldrb	r5, [r5, #2]
   304b6:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   304ba:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   304be:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   304c2:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   304c6:	0223      	lsls	r3, r4, #8
   304c8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   304cc:	0412      	lsls	r2, r2, #16
   304ce:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   304d2:	ea43 030e 	orr.w	r3, r3, lr
   304d6:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   304d8:	052a      	lsls	r2, r5, #20
   304da:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   304de:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   304e2:	4313      	orrs	r3, r2
   304e4:	f040 0020 	orr.w	r0, r0, #32
   304e8:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   304ec:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   304f0:	e7c0      	b.n	30474 <nrfx_gpiote_output_configure+0x54>
{
   304f2:	4803      	ldr	r0, [pc, #12]	; (30500 <nrfx_gpiote_output_configure+0xe0>)
   304f4:	e7bf      	b.n	30476 <nrfx_gpiote_output_configure+0x56>
   304f6:	bf00      	nop
   304f8:	200008bc 	.word	0x200008bc
   304fc:	0bad0000 	.word	0x0bad0000
   30500:	0bad0004 	.word	0x0bad0004

00030504 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   30504:	4b01      	ldr	r3, [pc, #4]	; (3050c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   30506:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   3050a:	4770      	bx	lr
   3050c:	200008bc 	.word	0x200008bc

00030510 <nrfx_gpiote_channel_get>:
{
   30510:	b508      	push	{r3, lr}
   30512:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   30514:	f7ff fe68 	bl	301e8 <pin_in_use_by_te>
   30518:	b138      	cbz	r0, 3052a <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   3051a:	4b05      	ldr	r3, [pc, #20]	; (30530 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   3051c:	4805      	ldr	r0, [pc, #20]	; (30534 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   3051e:	3208      	adds	r2, #8
   30520:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   30524:	0b5b      	lsrs	r3, r3, #13
   30526:	700b      	strb	r3, [r1, #0]
}
   30528:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   3052a:	4803      	ldr	r0, [pc, #12]	; (30538 <nrfx_gpiote_channel_get+0x28>)
   3052c:	e7fc      	b.n	30528 <nrfx_gpiote_channel_get+0x18>
   3052e:	bf00      	nop
   30530:	200008bc 	.word	0x200008bc
   30534:	0bad0000 	.word	0x0bad0000
   30538:	0bad0004 	.word	0x0bad0004

0003053c <nrfx_gpiote_init>:
{
   3053c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   3053e:	4c0f      	ldr	r4, [pc, #60]	; (3057c <nrfx_gpiote_init+0x40>)
   30540:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   30544:	b9bd      	cbnz	r5, 30576 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   30546:	2260      	movs	r2, #96	; 0x60
   30548:	4629      	mov	r1, r5
   3054a:	f104 0010 	add.w	r0, r4, #16
   3054e:	f004 fffd 	bl	3554c <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   30552:	2006      	movs	r0, #6
   30554:	f7e4 f9cc 	bl	148f0 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   30558:	4b09      	ldr	r3, [pc, #36]	; (30580 <nrfx_gpiote_init+0x44>)
    return err_code;
   3055a:	480a      	ldr	r0, [pc, #40]	; (30584 <nrfx_gpiote_init+0x48>)
   3055c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   30560:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   30564:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   30568:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   3056c:	2301      	movs	r3, #1
   3056e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   30572:	6763      	str	r3, [r4, #116]	; 0x74
}
   30574:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   30576:	4804      	ldr	r0, [pc, #16]	; (30588 <nrfx_gpiote_init+0x4c>)
   30578:	e7fc      	b.n	30574 <nrfx_gpiote_init+0x38>
   3057a:	bf00      	nop
   3057c:	200008bc 	.word	0x200008bc
   30580:	40006000 	.word	0x40006000
   30584:	0bad0000 	.word	0x0bad0000
   30588:	0bad0005 	.word	0x0bad0005

0003058c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   3058c:	4b03      	ldr	r3, [pc, #12]	; (3059c <nrfx_gpiote_is_init+0x10>)
   3058e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   30592:	3800      	subs	r0, #0
   30594:	bf18      	it	ne
   30596:	2001      	movne	r0, #1
   30598:	4770      	bx	lr
   3059a:	bf00      	nop
   3059c:	200008bc 	.word	0x200008bc

000305a0 <nrfx_gpiote_channel_free>:
{
   305a0:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   305a2:	4801      	ldr	r0, [pc, #4]	; (305a8 <nrfx_gpiote_channel_free+0x8>)
   305a4:	f7ff bd4a 	b.w	3003c <nrfx_flag32_free>
   305a8:	2000092c 	.word	0x2000092c

000305ac <nrfx_gpiote_channel_alloc>:
{
   305ac:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   305ae:	4801      	ldr	r0, [pc, #4]	; (305b4 <nrfx_gpiote_channel_alloc+0x8>)
   305b0:	f7ff bd24 	b.w	2fffc <nrfx_flag32_alloc>
   305b4:	2000092c 	.word	0x2000092c

000305b8 <nrfx_gpiote_trigger_enable>:
{
   305b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   305ba:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   305bc:	f7ff fe14 	bl	301e8 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   305c0:	f104 0208 	add.w	r2, r4, #8
   305c4:	4b1e      	ldr	r3, [pc, #120]	; (30640 <nrfx_gpiote_trigger_enable+0x88>)
   305c6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   305ca:	b1e8      	cbz	r0, 30608 <nrfx_gpiote_trigger_enable+0x50>
   305cc:	f013 0502 	ands.w	r5, r3, #2
   305d0:	d11a      	bne.n	30608 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   305d2:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   305d4:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   305d6:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   305da:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   305de:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   305e2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   305e6:	6005      	str	r5, [r0, #0]
   305e8:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   305ea:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   305ee:	f040 0001 	orr.w	r0, r0, #1
   305f2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   305f6:	b129      	cbz	r1, 30604 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   305f8:	2201      	movs	r2, #1
   305fa:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   305fe:	4a11      	ldr	r2, [pc, #68]	; (30644 <nrfx_gpiote_trigger_enable+0x8c>)
   30600:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   30604:	b003      	add	sp, #12
   30606:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   30608:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   3060c:	2b04      	cmp	r3, #4
   3060e:	d012      	beq.n	30636 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   30610:	2b05      	cmp	r3, #5
   30612:	d012      	beq.n	3063a <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   30614:	a801      	add	r0, sp, #4
   30616:	9401      	str	r4, [sp, #4]
   30618:	f7ff fdd8 	bl	301cc <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   3061c:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   3061e:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   30622:	40d9      	lsrs	r1, r3
   30624:	f001 0101 	and.w	r1, r1, #1
   30628:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   3062a:	4620      	mov	r0, r4
}
   3062c:	b003      	add	sp, #12
   3062e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   30632:	f007 bf10 	b.w	38456 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   30636:	2103      	movs	r1, #3
   30638:	e7f7      	b.n	3062a <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   3063a:	2102      	movs	r1, #2
   3063c:	e7f5      	b.n	3062a <nrfx_gpiote_trigger_enable+0x72>
   3063e:	bf00      	nop
   30640:	200008bc 	.word	0x200008bc
   30644:	40006000 	.word	0x40006000

00030648 <nrfx_gpiote_trigger_disable>:
{
   30648:	b508      	push	{r3, lr}
   3064a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   3064c:	f7ff fdcc 	bl	301e8 <pin_in_use_by_te>
   30650:	b1c0      	cbz	r0, 30684 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   30652:	f102 0108 	add.w	r1, r2, #8
   30656:	4b0e      	ldr	r3, [pc, #56]	; (30690 <nrfx_gpiote_trigger_disable+0x48>)
   30658:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   3065c:	0799      	lsls	r1, r3, #30
   3065e:	d411      	bmi.n	30684 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   30660:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   30662:	2201      	movs	r2, #1
   30664:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   30666:	009b      	lsls	r3, r3, #2
   30668:	490a      	ldr	r1, [pc, #40]	; (30694 <nrfx_gpiote_trigger_disable+0x4c>)
   3066a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3066e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   30672:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   30676:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   3067a:	f022 0203 	bic.w	r2, r2, #3
   3067e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   30682:	bd08      	pop	{r3, pc}
   30684:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   30688:	2100      	movs	r1, #0
   3068a:	4610      	mov	r0, r2
   3068c:	f007 bee3 	b.w	38456 <nrf_gpio_cfg_sense_set>
   30690:	200008bc 	.word	0x200008bc
   30694:	40006000 	.word	0x40006000

00030698 <nrfx_gpiote_pin_uninit>:
{
   30698:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   3069a:	4b0e      	ldr	r3, [pc, #56]	; (306d4 <nrfx_gpiote_pin_uninit+0x3c>)
   3069c:	f100 0208 	add.w	r2, r0, #8
{
   306a0:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   306a2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   306a6:	07db      	lsls	r3, r3, #31
   306a8:	d511      	bpl.n	306ce <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   306aa:	f7ff ffcd 	bl	30648 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   306ae:	4620      	mov	r0, r4
   306b0:	f7ff fdec 	bl	3028c <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   306b4:	a801      	add	r0, sp, #4
   306b6:	9401      	str	r4, [sp, #4]
   306b8:	f7ff fd88 	bl	301cc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   306bc:	9b01      	ldr	r3, [sp, #4]
   306be:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   306c2:	2202      	movs	r2, #2
   306c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   306c8:	4803      	ldr	r0, [pc, #12]	; (306d8 <nrfx_gpiote_pin_uninit+0x40>)
}
   306ca:	b002      	add	sp, #8
   306cc:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   306ce:	4803      	ldr	r0, [pc, #12]	; (306dc <nrfx_gpiote_pin_uninit+0x44>)
   306d0:	e7fb      	b.n	306ca <nrfx_gpiote_pin_uninit+0x32>
   306d2:	bf00      	nop
   306d4:	200008bc 	.word	0x200008bc
   306d8:	0bad0000 	.word	0x0bad0000
   306dc:	0bad0004 	.word	0x0bad0004

000306e0 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   306e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   306e4:	4b68      	ldr	r3, [pc, #416]	; (30888 <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
   306e6:	4869      	ldr	r0, [pc, #420]	; (3088c <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   306e8:	4969      	ldr	r1, [pc, #420]	; (30890 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
   306ea:	2600      	movs	r6, #0
{
   306ec:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   306ee:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   306f0:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   306f2:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   306f4:	b135      	cbz	r5, 30704 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   306f6:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   306fa:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   306fc:	bf1e      	ittt	ne
   306fe:	601c      	strne	r4, [r3, #0]
   30700:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   30702:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   30704:	3304      	adds	r3, #4
   30706:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   30708:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   3070c:	d1f1      	bne.n	306f2 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3070e:	f8df 917c 	ldr.w	r9, [pc, #380]	; 3088c <nrfx_gpiote_irq_handler+0x1ac>
   30712:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   30716:	2b00      	cmp	r3, #0
   30718:	f000 8099 	beq.w	3084e <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
   3071c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   30720:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   30724:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   30726:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   3072a:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   3072e:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   30730:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   30734:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
   30738:	f10d 0a10 	add.w	sl, sp, #16
   3073c:	ea4f 1348 	mov.w	r3, r8, lsl #5
   30740:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   30742:	f04f 0b01 	mov.w	fp, #1
   30746:	e049      	b.n	307dc <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
   30748:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   3074a:	4a52      	ldr	r2, [pc, #328]	; (30894 <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   3074c:	fa94 f4a4 	rbit	r4, r4
   30750:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   30754:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   30756:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   30758:	f104 0308 	add.w	r3, r4, #8
   3075c:	9403      	str	r4, [sp, #12]
   3075e:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   30762:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
   30766:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   3076a:	fa0b f202 	lsl.w	r2, fp, r2
   3076e:	ea23 0302 	bic.w	r3, r3, r2
   30772:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   30776:	a803      	add	r0, sp, #12
   30778:	f7ff fd28 	bl	301cc <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   3077c:	9b03      	ldr	r3, [sp, #12]
   3077e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   30782:	08b9      	lsrs	r1, r7, #2
   30784:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   30788:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   3078c:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   3078e:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   30790:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   30794:	d52c      	bpl.n	307f0 <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
   30796:	4620      	mov	r0, r4
   30798:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   3079a:	b2dd      	uxtb	r5, r3
   3079c:	f7ff fd2e 	bl	301fc <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   307a0:	a803      	add	r0, sp, #12
   307a2:	9403      	str	r4, [sp, #12]
   307a4:	f7ff fd12 	bl	301cc <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   307a8:	9b03      	ldr	r3, [sp, #12]
   307aa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   307ae:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   307b2:	f3c3 4301 	ubfx	r3, r3, #16, #2
   307b6:	429d      	cmp	r5, r3
   307b8:	d107      	bne.n	307ca <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   307ba:	2100      	movs	r1, #0
   307bc:	4620      	mov	r0, r4
   307be:	f007 fe4a 	bl	38456 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   307c2:	4629      	mov	r1, r5
   307c4:	4620      	mov	r0, r4
   307c6:	f007 fe46 	bl	38456 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   307ca:	a803      	add	r0, sp, #12
   307cc:	9403      	str	r4, [sp, #12]
   307ce:	f7ff fcfd 	bl	301cc <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   307d2:	9b03      	ldr	r3, [sp, #12]
   307d4:	fa0b f303 	lsl.w	r3, fp, r3
   307d8:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   307dc:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
   307e0:	2c00      	cmp	r4, #0
   307e2:	d1b1      	bne.n	30748 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   307e4:	f1b8 0f00 	cmp.w	r8, #0
   307e8:	d11d      	bne.n	30826 <nrfx_gpiote_irq_handler+0x146>
   307ea:	f04f 0801 	mov.w	r8, #1
   307ee:	e7a5      	b.n	3073c <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   307f0:	2b02      	cmp	r3, #2
   307f2:	d10c      	bne.n	3080e <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   307f4:	2103      	movs	r1, #3
   307f6:	4620      	mov	r0, r4
   307f8:	f007 fe2d 	bl	38456 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   307fc:	f005 0305 	and.w	r3, r5, #5
   30800:	2b01      	cmp	r3, #1
   30802:	d1e2      	bne.n	307ca <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
   30804:	4639      	mov	r1, r7
   30806:	4620      	mov	r0, r4
   30808:	f7ff fcf8 	bl	301fc <call_handler>
   3080c:	e7dd      	b.n	307ca <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   3080e:	2102      	movs	r1, #2
   30810:	4620      	mov	r0, r4
   30812:	9301      	str	r3, [sp, #4]
   30814:	f007 fe1f 	bl	38456 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   30818:	2d03      	cmp	r5, #3
   3081a:	d0f3      	beq.n	30804 <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   3081c:	9b01      	ldr	r3, [sp, #4]
   3081e:	2b03      	cmp	r3, #3
   30820:	d1d3      	bne.n	307ca <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   30822:	2d02      	cmp	r5, #2
   30824:	e7ed      	b.n	30802 <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
   30826:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   3082a:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
   3082e:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
   30832:	4919      	ldr	r1, [pc, #100]	; (30898 <nrfx_gpiote_irq_handler+0x1b8>)
   30834:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   30838:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   3083a:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   3083e:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
   30842:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
   30844:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
   30846:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
   3084a:	f47f af73 	bne.w	30734 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   3084e:	2401      	movs	r4, #1
    while (mask)
   30850:	b916      	cbnz	r6, 30858 <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   30852:	b007      	add	sp, #28
   30854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   30858:	fa96 f3a6 	rbit	r3, r6
   3085c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   30860:	fa04 f203 	lsl.w	r2, r4, r3
   30864:	009b      	lsls	r3, r3, #2
   30866:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3086a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   3086e:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   30872:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   30876:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   3087a:	f3c0 2005 	ubfx	r0, r0, #8, #6
   3087e:	f3c1 4101 	ubfx	r1, r1, #16, #2
   30882:	f7ff fcbb 	bl	301fc <call_handler>
   30886:	e7e3      	b.n	30850 <nrfx_gpiote_irq_handler+0x170>
   30888:	40006100 	.word	0x40006100
   3088c:	40006000 	.word	0x40006000
   30890:	40006120 	.word	0x40006120
   30894:	200008bc 	.word	0x200008bc
   30898:	50000300 	.word	0x50000300

0003089c <nvmc_word_write>:
   3089c:	4a04      	ldr	r2, [pc, #16]	; (308b0 <nvmc_word_write+0x14>)
   3089e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   308a2:	07db      	lsls	r3, r3, #31
   308a4:	d5fb      	bpl.n	3089e <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   308a6:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   308a8:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   308ac:	4770      	bx	lr
   308ae:	bf00      	nop
   308b0:	4001e000 	.word	0x4001e000

000308b4 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   308b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   308b8:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   308ba:	fbb0 f3f2 	udiv	r3, r0, r2
   308be:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   308c2:	b973      	cbnz	r3, 308e2 <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   308c4:	4b08      	ldr	r3, [pc, #32]	; (308e8 <nrfx_nvmc_page_erase+0x34>)
   308c6:	2202      	movs	r2, #2
   308c8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   308cc:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   308d0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   308d4:	07d2      	lsls	r2, r2, #31
   308d6:	d5fb      	bpl.n	308d0 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   308d8:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   308da:	4804      	ldr	r0, [pc, #16]	; (308ec <nrfx_nvmc_page_erase+0x38>)
   308dc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   308e0:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   308e2:	4803      	ldr	r0, [pc, #12]	; (308f0 <nrfx_nvmc_page_erase+0x3c>)
}
   308e4:	4770      	bx	lr
   308e6:	bf00      	nop
   308e8:	4001e000 	.word	0x4001e000
   308ec:	0bad0000 	.word	0x0bad0000
   308f0:	0bad000a 	.word	0x0bad000a

000308f4 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   308f4:	b510      	push	{r4, lr}
   308f6:	4c05      	ldr	r4, [pc, #20]	; (3090c <nrfx_nvmc_word_write+0x18>)
   308f8:	2301      	movs	r3, #1
   308fa:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   308fe:	f7ff ffcd 	bl	3089c <nvmc_word_write>
   30902:	2300      	movs	r3, #0
   30904:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   30908:	bd10      	pop	{r4, pc}
   3090a:	bf00      	nop
   3090c:	4001e000 	.word	0x4001e000

00030910 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   30910:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   30912:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   30916:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
   30918:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   3091a:	6002      	str	r2, [r0, #0]
}
   3091c:	4802      	ldr	r0, [pc, #8]	; (30928 <nrf_gpio_pin_port_decode+0x18>)
   3091e:	bf18      	it	ne
   30920:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   30924:	4770      	bx	lr
   30926:	bf00      	nop
   30928:	50000300 	.word	0x50000300

0003092c <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
   3092c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_config);
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   30930:	4c71      	ldr	r4, [pc, #452]	; (30af8 <nrfx_spim_init+0x1cc>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   30932:	7905      	ldrb	r5, [r0, #4]
{
   30934:	4606      	mov	r6, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   30936:	eb04 1045 	add.w	r0, r4, r5, lsl #5
   3093a:	7f00      	ldrb	r0, [r0, #28]
   3093c:	2800      	cmp	r0, #0
   3093e:	f040 80d7 	bne.w	30af0 <nrfx_spim_init+0x1c4>
        return err_code;
    }

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Check if SPIM instance supports the extended features.
    if (
   30942:	2d00      	cmp	r5, #0
   30944:	f040 80d6 	bne.w	30af4 <nrfx_spim_init+0x1c8>
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   30948:	6888      	ldr	r0, [r1, #8]
   3094a:	f1b0 6f20 	cmp.w	r0, #167772160	; 0xa000000
   3094e:	f000 80d1 	beq.w	30af4 <nrfx_spim_init+0x1c8>
   30952:	f1b0 5fa0 	cmp.w	r0, #335544320	; 0x14000000
   30956:	f000 80cd 	beq.w	30af4 <nrfx_spim_init+0x1c8>
   3095a:	7c48      	ldrb	r0, [r1, #17]
   3095c:	2800      	cmp	r0, #0
   3095e:	f040 80c9 	bne.w	30af4 <nrfx_spim_init+0x1c8>
        ((p_config->use_hw_ss) &&
         !SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx)) ||
   30962:	7bc8      	ldrb	r0, [r1, #15]
   30964:	28ff      	cmp	r0, #255	; 0xff
   30966:	f040 80c5 	bne.w	30af4 <nrfx_spim_init+0x1c8>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   3096a:	6837      	ldr	r7, [r6, #0]
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;
   3096c:	e9c4 2300 	strd	r2, r3, [r4]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   30970:	7cca      	ldrb	r2, [r1, #19]
   30972:	7fa3      	ldrb	r3, [r4, #30]
   30974:	f362 0300 	bfi	r3, r2, #0, #1
   30978:	77a3      	strb	r3, [r4, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
   3097a:	790a      	ldrb	r2, [r1, #4]
   3097c:	b2db      	uxtb	r3, r3
   3097e:	f362 0341 	bfi	r3, r2, #1, #1
   30982:	77a3      	strb	r3, [r4, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
   30984:	7c4a      	ldrb	r2, [r1, #17]
   30986:	b2db      	uxtb	r3, r3
   30988:	f362 0382 	bfi	r3, r2, #2, #1
   3098c:	77a3      	strb	r3, [r4, #30]
#endif
    p_cb->ss_pin = p_config->ss_pin;
   3098e:	78cb      	ldrb	r3, [r1, #3]
   30990:	77e3      	strb	r3, [r4, #31]
    if (!p_config->skip_gpio_cfg)
   30992:	7ccb      	ldrb	r3, [r1, #19]
   30994:	f8d6 8000 	ldr.w	r8, [r6]
   30998:	2b00      	cmp	r3, #0
   3099a:	d15e      	bne.n	30a5a <nrfx_spim_init+0x12e>
                    : NRF_GPIO_PIN_S0S1;
   3099c:	688b      	ldr	r3, [r1, #8]
        nrf_gpio_pin_write(p_config->sck_pin,
   3099e:	7808      	ldrb	r0, [r1, #0]
                    : NRF_GPIO_PIN_S0S1;
   309a0:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
    if (value == 0)
   309a4:	7b0b      	ldrb	r3, [r1, #12]
   309a6:	bf08      	it	eq
   309a8:	2503      	moveq	r5, #3
   309aa:	2b01      	cmp	r3, #1
   309ac:	f200 8094 	bhi.w	30ad8 <nrfx_spim_init+0x1ac>
        nrf_gpio_pin_clear(pin_number);
   309b0:	f007 fd89 	bl	384c6 <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
   309b4:	780b      	ldrb	r3, [r1, #0]
   309b6:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   309b8:	a801      	add	r0, sp, #4
   309ba:	f7ff ffa9 	bl	30910 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   309be:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   309c0:	022d      	lsls	r5, r5, #8
    reg->PIN_CNF[pin_number] = cnf;
   309c2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   309c6:	f045 0201 	orr.w	r2, r5, #1
    reg->PIN_CNF[pin_number] = cnf;
   309ca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   309ce:	7848      	ldrb	r0, [r1, #1]
   309d0:	28ff      	cmp	r0, #255	; 0xff
   309d2:	d00d      	beq.n	309f0 <nrfx_spim_init+0xc4>
        nrf_gpio_pin_clear(pin_number);
   309d4:	f007 fd77 	bl	384c6 <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->mosi_pin,
   309d8:	784b      	ldrb	r3, [r1, #1]
   309da:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   309dc:	a801      	add	r0, sp, #4
   309de:	f7ff ff97 	bl	30910 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   309e2:	9b01      	ldr	r3, [sp, #4]
   309e4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   309e8:	f045 0203 	orr.w	r2, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
   309ec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   309f0:	788b      	ldrb	r3, [r1, #2]
   309f2:	2bff      	cmp	r3, #255	; 0xff
   309f4:	d00c      	beq.n	30a10 <nrfx_spim_init+0xe4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   309f6:	a801      	add	r0, sp, #4
                         p_config->miso_pull,
   309f8:	f891 900e 	ldrb.w	r9, [r1, #14]
            nrf_gpio_cfg(p_config->miso_pin,
   309fc:	9301      	str	r3, [sp, #4]
   309fe:	f7ff ff87 	bl	30910 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   30a02:	9b01      	ldr	r3, [sp, #4]
   30a04:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   30a08:	ea45 0289 	orr.w	r2, r5, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   30a0c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   30a10:	78c8      	ldrb	r0, [r1, #3]
   30a12:	28ff      	cmp	r0, #255	; 0xff
   30a14:	d010      	beq.n	30a38 <nrfx_spim_init+0x10c>
    if (value == 0)
   30a16:	790b      	ldrb	r3, [r1, #4]
   30a18:	2b00      	cmp	r3, #0
   30a1a:	d060      	beq.n	30ade <nrfx_spim_init+0x1b2>
        nrf_gpio_pin_clear(pin_number);
   30a1c:	f007 fd53 	bl	384c6 <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->ss_pin,
   30a20:	78cb      	ldrb	r3, [r1, #3]
   30a22:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   30a24:	a801      	add	r0, sp, #4
   30a26:	f7ff ff73 	bl	30910 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   30a2a:	9b01      	ldr	r3, [sp, #4]
   30a2c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   30a30:	f045 0203 	orr.w	r2, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
   30a34:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   30a38:	7bc8      	ldrb	r0, [r1, #15]
   30a3a:	28ff      	cmp	r0, #255	; 0xff
   30a3c:	d00d      	beq.n	30a5a <nrfx_spim_init+0x12e>
        nrf_gpio_pin_set(pin_number);
   30a3e:	f007 fd35 	bl	384ac <nrf_gpio_pin_set>
            nrf_gpio_cfg(p_config->dcx_pin,
   30a42:	7bcb      	ldrb	r3, [r1, #15]
   30a44:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   30a46:	a801      	add	r0, sp, #4
   30a48:	f7ff ff62 	bl	30910 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   30a4c:	9b01      	ldr	r3, [sp, #4]
   30a4e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   30a52:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
   30a56:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   30a5a:	7d0b      	ldrb	r3, [r1, #20]
   30a5c:	b993      	cbnz	r3, 30a84 <nrfx_spim_init+0x158>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   30a5e:	784b      	ldrb	r3, [r1, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   30a60:	7808      	ldrb	r0, [r1, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   30a62:	2bff      	cmp	r3, #255	; 0xff
   30a64:	bf18      	it	ne
   30a66:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   30a68:	788b      	ldrb	r3, [r1, #2]
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
   30a6a:	f8c8 0508 	str.w	r0, [r8, #1288]	; 0x508
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   30a6e:	bf08      	it	eq
   30a70:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   30a74:	2bff      	cmp	r3, #255	; 0xff
   30a76:	bf08      	it	eq
   30a78:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    p_reg->PSEL.MOSI = mosi_pin;
   30a7c:	f8c8 250c 	str.w	r2, [r8, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   30a80:	f8c8 3510 	str.w	r3, [r8, #1296]	; 0x510

    configure_pins(p_instance, p_config);

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
   30a84:	7c0b      	ldrb	r3, [r1, #16]

#if NRF_SPIM_RXDELAY_PRESENT
NRF_STATIC_INLINE void nrf_spim_iftiming_set(NRF_SPIM_Type * p_reg,
                                             uint32_t        rxdelay)
{
    p_reg->IFTIMING.RXDELAY = rxdelay;
   30a86:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   30a8a:	688b      	ldr	r3, [r1, #8]
   30a8c:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   30a90:	7b4b      	ldrb	r3, [r1, #13]
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   30a92:	7b0a      	ldrb	r2, [r1, #12]
   30a94:	3b00      	subs	r3, #0
   30a96:	bf18      	it	ne
   30a98:	2301      	movne	r3, #1
    switch (spi_mode)
   30a9a:	2a02      	cmp	r2, #2
   30a9c:	d022      	beq.n	30ae4 <nrfx_spim_init+0x1b8>
   30a9e:	2a03      	cmp	r2, #3
   30aa0:	d023      	beq.n	30aea <nrfx_spim_init+0x1be>
   30aa2:	2a01      	cmp	r2, #1
   30aa4:	d101      	bne.n	30aaa <nrfx_spim_init+0x17e>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   30aa6:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   30aaa:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   30aae:	798b      	ldrb	r3, [r1, #6]
   30ab0:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   30ab4:	2307      	movs	r3, #7
   30ab6:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
   30aba:	6823      	ldr	r3, [r4, #0]
   30abc:	b123      	cbz	r3, 30ac8 <nrfx_spim_init+0x19c>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   30abe:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   30ac0:	f340 3007 	sbfx	r0, r0, #12, #8
   30ac4:	f7e3 ff14 	bl	148f0 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   30ac8:	2300      	movs	r3, #0
   30aca:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   30acc:	480b      	ldr	r0, [pc, #44]	; (30afc <nrfx_spim_init+0x1d0>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   30ace:	2301      	movs	r3, #1
   30ad0:	7723      	strb	r3, [r4, #28]
}
   30ad2:	b003      	add	sp, #12
   30ad4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        nrf_gpio_pin_set(pin_number);
   30ad8:	f007 fce8 	bl	384ac <nrf_gpio_pin_set>
   30adc:	e76a      	b.n	309b4 <nrfx_spim_init+0x88>
   30ade:	f007 fce5 	bl	384ac <nrf_gpio_pin_set>
   30ae2:	e79d      	b.n	30a20 <nrfx_spim_init+0xf4>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   30ae4:	f043 0304 	orr.w	r3, r3, #4
        break;
   30ae8:	e7df      	b.n	30aaa <nrfx_spim_init+0x17e>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   30aea:	f043 0306 	orr.w	r3, r3, #6
        break;
   30aee:	e7dc      	b.n	30aaa <nrfx_spim_init+0x17e>
        return err_code;
   30af0:	4803      	ldr	r0, [pc, #12]	; (30b00 <nrfx_spim_init+0x1d4>)
   30af2:	e7ee      	b.n	30ad2 <nrfx_spim_init+0x1a6>
        return err_code;
   30af4:	4803      	ldr	r0, [pc, #12]	; (30b04 <nrfx_spim_init+0x1d8>)
   30af6:	e7ec      	b.n	30ad2 <nrfx_spim_init+0x1a6>
   30af8:	200031b0 	.word	0x200031b0
   30afc:	0bad0000 	.word	0x0bad0000
   30b00:	0bad0005 	.word	0x0bad0005
   30b04:	0bad0003 	.word	0x0bad0003

00030b08 <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
   30b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   30b0a:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
   30b0c:	4c20      	ldr	r4, [pc, #128]	; (30b90 <nrfx_spim_uninit+0x88>)
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   30b0e:	6805      	ldr	r5, [r0, #0]
    if (p_cb->handler)
   30b10:	015e      	lsls	r6, r3, #5
   30b12:	eb04 1743 	add.w	r7, r4, r3, lsl #5
   30b16:	59a3      	ldr	r3, [r4, r6]
   30b18:	b1b3      	cbz	r3, 30b48 <nrfx_spim_uninit+0x40>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   30b1a:	f345 3007 	sbfx	r0, r5, #12, #8
   30b1e:	f7e3 fef5 	bl	1490c <arch_irq_disable>
    p_reg->INTENCLR = mask;
   30b22:	4b1c      	ldr	r3, [pc, #112]	; (30b94 <nrfx_spim_uninit+0x8c>)
   30b24:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
   30b28:	7f7b      	ldrb	r3, [r7, #29]
   30b2a:	b16b      	cbz	r3, 30b48 <nrfx_spim_uninit+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   30b2c:	2301      	movs	r3, #1
   30b2e:	616b      	str	r3, [r5, #20]
   30b30:	2764      	movs	r7, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   30b32:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   30b36:	b923      	cbnz	r3, 30b42 <nrfx_spim_uninit+0x3a>
   30b38:	2001      	movs	r0, #1
   30b3a:	f007 fbf6 	bl	3832a <nrfx_busy_wait>
   30b3e:	3f01      	subs	r7, #1
   30b40:	d1f7      	bne.n	30b32 <nrfx_spim_uninit+0x2a>
    p_cb->transfer_in_progress = false;
   30b42:	19a3      	adds	r3, r4, r6
   30b44:	2200      	movs	r2, #0
   30b46:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   30b48:	2300      	movs	r3, #0
   30b4a:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
   30b4e:	19a3      	adds	r3, r4, r6
   30b50:	7f9b      	ldrb	r3, [r3, #30]
   30b52:	07d8      	lsls	r0, r3, #31
   30b54:	d417      	bmi.n	30b86 <nrfx_spim_uninit+0x7e>
    return p_reg->PSEL.SCK;
   30b56:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   30b5a:	1c41      	adds	r1, r0, #1
   30b5c:	d001      	beq.n	30b62 <nrfx_spim_uninit+0x5a>
    nrf_gpio_cfg_default(pin);
   30b5e:	f007 fc97 	bl	38490 <nrf_gpio_cfg_default>
    return p_reg->PSEL.MISO;
   30b62:	f8d5 0510 	ldr.w	r0, [r5, #1296]	; 0x510
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   30b66:	1c42      	adds	r2, r0, #1
   30b68:	d001      	beq.n	30b6e <nrfx_spim_uninit+0x66>
    nrf_gpio_cfg_default(pin);
   30b6a:	f007 fc91 	bl	38490 <nrf_gpio_cfg_default>
    return p_reg->PSEL.MOSI;
   30b6e:	f8d5 050c 	ldr.w	r0, [r5, #1292]	; 0x50c
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   30b72:	1c43      	adds	r3, r0, #1
   30b74:	d001      	beq.n	30b7a <nrfx_spim_uninit+0x72>
    nrf_gpio_cfg_default(pin);
   30b76:	f007 fc8b 	bl	38490 <nrf_gpio_cfg_default>
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   30b7a:	19a3      	adds	r3, r4, r6
   30b7c:	7fd8      	ldrb	r0, [r3, #31]
   30b7e:	28ff      	cmp	r0, #255	; 0xff
   30b80:	d001      	beq.n	30b86 <nrfx_spim_uninit+0x7e>
        {
            nrf_gpio_cfg_default(p_cb->ss_pin);
   30b82:	f007 fc85 	bl	38490 <nrf_gpio_cfg_default>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   30b86:	4434      	add	r4, r6
   30b88:	2300      	movs	r3, #0
   30b8a:	7723      	strb	r3, [r4, #28]
}
   30b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30b8e:	bf00      	nop
   30b90:	200031b0 	.word	0x200031b0
   30b94:	00080152 	.word	0x00080152

00030b98 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   30b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   30b9c:	4f38      	ldr	r7, [pc, #224]	; (30c80 <nrfx_spim_xfer+0xe8>)
   30b9e:	7903      	ldrb	r3, [r0, #4]
   30ba0:	eb07 1843 	add.w	r8, r7, r3, lsl #5
{
   30ba4:	4615      	mov	r5, r2
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   30ba6:	f898 201d 	ldrb.w	r2, [r8, #29]
{
   30baa:	4681      	mov	r9, r0
   30bac:	460c      	mov	r4, r1
    if (p_cb->transfer_in_progress)
   30bae:	015e      	lsls	r6, r3, #5
   30bb0:	2a00      	cmp	r2, #0
   30bb2:	d163      	bne.n	30c7c <nrfx_spim_xfer+0xe4>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   30bb4:	59ba      	ldr	r2, [r7, r6]
   30bb6:	b12a      	cbz	r2, 30bc4 <nrfx_spim_xfer+0x2c>
   30bb8:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   30bbc:	bf04      	itt	eq
   30bbe:	2201      	moveq	r2, #1
   30bc0:	f888 201d 	strbeq.w	r2, [r8, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   30bc4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   30bc8:	eb07 0c06 	add.w	ip, r7, r6
   30bcc:	f10c 0c0c 	add.w	ip, ip, #12
   30bd0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
   30bd4:	2101      	movs	r1, #1
   30bd6:	4640      	mov	r0, r8
   30bd8:	f007 fc82 	bl	384e0 <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   30bdc:	6821      	ldr	r1, [r4, #0]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   30bde:	f8d9 3000 	ldr.w	r3, [r9]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   30be2:	b121      	cbz	r1, 30bee <nrfx_spim_xfer+0x56>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   30be4:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
   30be8:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   30bec:	d106      	bne.n	30bfc <nrfx_spim_xfer+0x64>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   30bee:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   30bf0:	b152      	cbz	r2, 30c08 <nrfx_spim_xfer+0x70>
   30bf2:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   30bf6:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   30bfa:	d005      	beq.n	30c08 <nrfx_spim_xfer+0x70>
        p_cb->transfer_in_progress = false;
   30bfc:	443e      	add	r6, r7
   30bfe:	2300      	movs	r3, #0
        return err_code;
   30c00:	4820      	ldr	r0, [pc, #128]	; (30c84 <nrfx_spim_xfer+0xec>)
        p_cb->transfer_in_progress = false;
   30c02:	7773      	strb	r3, [r6, #29]
}
   30c04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   30c08:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   30c0a:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   30c0e:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   30c12:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   30c16:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   30c1a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   30c1e:	2200      	movs	r2, #0
   30c20:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   30c24:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   30c28:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   30c2c:	bf18      	it	ne
   30c2e:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   30c30:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   30c34:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   30c38:	bf18      	it	ne
   30c3a:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   30c3c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   30c40:	072a      	lsls	r2, r5, #28
   30c42:	d507      	bpl.n	30c54 <nrfx_spim_xfer+0xbc>
    if (!p_cb->handler)
   30c44:	59ba      	ldr	r2, [r7, r6]
   30c46:	b972      	cbnz	r2, 30c66 <nrfx_spim_xfer+0xce>
        set_ss_pin_state(p_cb, false);
   30c48:	2100      	movs	r1, #0
   30c4a:	4640      	mov	r0, r8
   30c4c:	f007 fc48 	bl	384e0 <set_ss_pin_state>
    return err_code;
   30c50:	480d      	ldr	r0, [pc, #52]	; (30c88 <nrfx_spim_xfer+0xf0>)
   30c52:	e7d7      	b.n	30c04 <nrfx_spim_xfer+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   30c54:	2201      	movs	r2, #1
   30c56:	611a      	str	r2, [r3, #16]
    if (!p_cb->handler)
   30c58:	59ba      	ldr	r2, [r7, r6]
   30c5a:	b922      	cbnz	r2, 30c66 <nrfx_spim_xfer+0xce>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   30c5c:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   30c60:	2a00      	cmp	r2, #0
   30c62:	d0fb      	beq.n	30c5c <nrfx_spim_xfer+0xc4>
   30c64:	e7f0      	b.n	30c48 <nrfx_spim_xfer+0xb0>
    if (!enable)
   30c66:	f015 0f04 	tst.w	r5, #4
   30c6a:	f04f 0240 	mov.w	r2, #64	; 0x40
   30c6e:	d002      	beq.n	30c76 <nrfx_spim_xfer+0xde>
    p_reg->INTENCLR = mask;
   30c70:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   30c74:	e7ec      	b.n	30c50 <nrfx_spim_xfer+0xb8>
    p_reg->INTENSET = mask;
   30c76:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   30c7a:	e7e9      	b.n	30c50 <nrfx_spim_xfer+0xb8>
        return err_code;
   30c7c:	4803      	ldr	r0, [pc, #12]	; (30c8c <nrfx_spim_xfer+0xf4>)
   30c7e:	e7c1      	b.n	30c04 <nrfx_spim_xfer+0x6c>
   30c80:	200031b0 	.word	0x200031b0
   30c84:	0bad000a 	.word	0x0bad000a
   30c88:	0bad0000 	.word	0x0bad0000
   30c8c:	0bad000b 	.word	0x0bad000b

00030c90 <nrfx_spim_2_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM2_ENABLED)
void nrfx_spim_2_irq_handler(void)
{
   30c90:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   30c92:	4b0c      	ldr	r3, [pc, #48]	; (30cc4 <nrfx_spim_2_irq_handler+0x34>)
   30c94:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   30c98:	b192      	cbz	r2, 30cc0 <nrfx_spim_2_irq_handler+0x30>
    set_ss_pin_state(p_cb, false);
   30c9a:	4c0b      	ldr	r4, [pc, #44]	; (30cc8 <nrfx_spim_2_irq_handler+0x38>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   30c9c:	2500      	movs	r5, #0
   30c9e:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
   30ca2:	4629      	mov	r1, r5
   30ca4:	4620      	mov	r0, r4
   30ca6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   30caa:	f007 fc19 	bl	384e0 <set_ss_pin_state>
    p_cb->transfer_in_progress = false;
   30cae:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   30cb0:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   30cb2:	e9d4 3100 	ldrd	r3, r1, [r4]
   30cb6:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM2, &m_cb[NRFX_SPIM2_INST_IDX]);
}
   30cba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   30cbe:	4718      	bx	r3
}
   30cc0:	bd70      	pop	{r4, r5, r6, pc}
   30cc2:	bf00      	nop
   30cc4:	40023000 	.word	0x40023000
   30cc8:	200031b0 	.word	0x200031b0

00030ccc <twim_irq_handler>:
{
    return nrf_twim_event_address_get(p_instance->p_twim, NRF_TWIM_EVENT_STOPPED);
}

static void twim_irq_handler(NRF_TWIM_Type * p_twim, twim_control_block_t * p_cb)
{
   30ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   30cce:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
   30cd2:	b087      	sub	sp, #28
   30cd4:	4604      	mov	r4, r0
   30cd6:	460d      	mov	r5, r1
    }
#endif

    NRFX_ASSERT(p_cb->handler);

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   30cd8:	b1f3      	cbz	r3, 30d18 <twim_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   30cda:	2300      	movs	r3, #0
   30cdc:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   30ce0:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   30ce4:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    {
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_ERROR));
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   30ce8:	b9b3      	cbnz	r3, 30d18 <twim_irq_handler+0x4c>
        {
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   30cea:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENCLR = mask;
   30cec:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   30cf0:	2302      	movs	r3, #2
   30cf2:	608b      	str	r3, [r1, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   30cf4:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENSET = mask;
   30cf6:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   30cfa:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160

            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   30cfe:	b11b      	cbz	r3, 30d08 <twim_irq_handler+0x3c>
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE uint32_t nrf_twim_shorts_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->SHORTS;
   30d00:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   30d04:	059f      	lsls	r7, r3, #22
   30d06:	d402      	bmi.n	30d0e <twim_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   30d08:	2301      	movs	r3, #1
   30d0a:	6223      	str	r3, [r4, #32]
   30d0c:	6163      	str	r3, [r4, #20]
            {
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STOP);
            }

            p_cb->error = true;
   30d0e:	2301      	movs	r3, #1
   30d10:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e

    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    {
        p_cb->handler(&event, p_cb->p_context);
    }
}
   30d14:	b007      	add	sp, #28
   30d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   30d18:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   30d1c:	2b00      	cmp	r3, #0
   30d1e:	d041      	beq.n	30da4 <twim_irq_handler+0xd8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   30d20:	2300      	movs	r3, #0
   30d22:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   30d26:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   30d2a:	6a2b      	ldr	r3, [r5, #32]
   30d2c:	065e      	lsls	r6, r3, #25
   30d2e:	d40a      	bmi.n	30d46 <twim_irq_handler+0x7a>
   30d30:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   30d34:	b93b      	cbnz	r3, 30d46 <twim_irq_handler+0x7a>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   30d36:	4629      	mov	r1, r5
   30d38:	4620      	mov	r0, r4
   30d3a:	f007 fbe1 	bl	38500 <xfer_completeness_check>
   30d3e:	f080 0001 	eor.w	r0, r0, #1
   30d42:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   30d46:	6a2b      	ldr	r3, [r5, #32]
   30d48:	f013 0c04 	ands.w	ip, r3, #4
   30d4c:	d13b      	bne.n	30dc6 <twim_irq_handler+0xfa>
            event.xfer_desc = p_cb->xfer_desc;
   30d4e:	f105 070c 	add.w	r7, r5, #12
   30d52:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   30d54:	ae01      	add	r6, sp, #4
   30d56:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   30d58:	683b      	ldr	r3, [r7, #0]
   30d5a:	f8c4 c160 	str.w	ip, [r4, #352]	; 0x160
   30d5e:	6033      	str	r3, [r6, #0]
   30d60:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   30d64:	f8c4 c15c 	str.w	ip, [r4, #348]	; 0x15c
   30d68:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   30d6c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   30d70:	b113      	cbz	r3, 30d78 <twim_irq_handler+0xac>
   30d72:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   30d76:	b333      	cbz	r3, 30dc6 <twim_irq_handler+0xfa>
    p_reg->SHORTS = mask;
   30d78:	2300      	movs	r3, #0
   30d7a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                p_cb->int_mask = 0;
   30d7e:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
   30d80:	4b2d      	ldr	r3, [pc, #180]	; (30e38 <twim_irq_handler+0x16c>)
   30d82:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   30d86:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
   30d8a:	2b00      	cmp	r3, #0
   30d8c:	db1b      	blt.n	30dc6 <twim_irq_handler+0xfa>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   30d8e:	095a      	lsrs	r2, r3, #5
   30d90:	2101      	movs	r1, #1
   30d92:	f003 031f 	and.w	r3, r3, #31
   30d96:	4099      	lsls	r1, r3
   30d98:	f102 0360 	add.w	r3, r2, #96	; 0x60
   30d9c:	4a27      	ldr	r2, [pc, #156]	; (30e3c <twim_irq_handler+0x170>)
   30d9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   30da2:	e010      	b.n	30dc6 <twim_irq_handler+0xfa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   30da4:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   30da8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   30dac:	7b2b      	ldrb	r3, [r5, #12]
   30dae:	bb5b      	cbnz	r3, 30e08 <twim_irq_handler+0x13c>
            event.xfer_desc = p_cb->xfer_desc;
   30db0:	f105 070c 	add.w	r7, r5, #12
   30db4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   30db6:	ae01      	add	r6, sp, #4
   30db8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   30dba:	683b      	ldr	r3, [r7, #0]
   30dbc:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   30dbe:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   30dc2:	2b00      	cmp	r3, #0
   30dc4:	d0d9      	beq.n	30d7a <twim_irq_handler+0xae>
    uint32_t error_source = p_reg->ERRORSRC;
   30dc6:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   30dca:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   30dce:	0798      	lsls	r0, r3, #30
   30dd0:	d42c      	bmi.n	30e2c <twim_irq_handler+0x160>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   30dd2:	0759      	lsls	r1, r3, #29
   30dd4:	d42c      	bmi.n	30e30 <twim_irq_handler+0x164>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   30dd6:	07da      	lsls	r2, r3, #31
   30dd8:	d42c      	bmi.n	30e34 <twim_irq_handler+0x168>
    else if (p_cb->error)
   30dda:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   30dde:	009b      	lsls	r3, r3, #2
   30de0:	b2db      	uxtb	r3, r3
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   30de2:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   30de6:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   30dea:	b90b      	cbnz	r3, 30df0 <twim_irq_handler+0x124>
        p_cb->busy = false;
   30dec:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   30df0:	6a2b      	ldr	r3, [r5, #32]
   30df2:	075b      	lsls	r3, r3, #29
   30df4:	d503      	bpl.n	30dfe <twim_irq_handler+0x132>
   30df6:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   30dfa:	2b00      	cmp	r3, #0
   30dfc:	d08a      	beq.n	30d14 <twim_irq_handler+0x48>
        p_cb->handler(&event, p_cb->p_context);
   30dfe:	e9d5 3100 	ldrd	r3, r1, [r5]
   30e02:	4668      	mov	r0, sp
   30e04:	4798      	blx	r3
   30e06:	e785      	b.n	30d14 <twim_irq_handler+0x48>
    p_reg->SHORTS = mask;
   30e08:	f44f 7300 	mov.w	r3, #512	; 0x200
   30e0c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   30e10:	f240 2302 	movw	r3, #514	; 0x202
   30e14:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
   30e16:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   30e1a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   30e1e:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
   30e20:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   30e24:	2301      	movs	r3, #1
   30e26:	60a3      	str	r3, [r4, #8]
   30e28:	6223      	str	r3, [r4, #32]
            return;
   30e2a:	e773      	b.n	30d14 <twim_irq_handler+0x48>
   30e2c:	2301      	movs	r3, #1
   30e2e:	e7d8      	b.n	30de2 <twim_irq_handler+0x116>
   30e30:	2302      	movs	r3, #2
   30e32:	e7d6      	b.n	30de2 <twim_irq_handler+0x116>
   30e34:	2303      	movs	r3, #3
   30e36:	e7d4      	b.n	30de2 <twim_irq_handler+0x116>
   30e38:	019c0202 	.word	0x019c0202
   30e3c:	e000e100 	.word	0xe000e100

00030e40 <nrfx_twim_init>:
{
   30e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   30e44:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   30e46:	4d2b      	ldr	r5, [pc, #172]	; (30ef4 <nrfx_twim_init+0xb4>)
   30e48:	f04f 0e34 	mov.w	lr, #52	; 0x34
   30e4c:	fb0e fe06 	mul.w	lr, lr, r6
   30e50:	eb05 040e 	add.w	r4, r5, lr
   30e54:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
   30e58:	2f00      	cmp	r7, #0
   30e5a:	d148      	bne.n	30eee <nrfx_twim_init+0xae>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   30e5c:	f8d0 c000 	ldr.w	ip, [r0]
    p_cb->handler         = event_handler;
   30e60:	f845 200e 	str.w	r2, [r5, lr]
    p_cb->int_mask        = 0;
   30e64:	60a7      	str	r7, [r4, #8]
    p_cb->p_context       = p_context;
   30e66:	6063      	str	r3, [r4, #4]
    p_cb->repeated        = false;
   30e68:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
   30e6c:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   30e70:	7b4b      	ldrb	r3, [r1, #13]
   30e72:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   30e76:	7b8b      	ldrb	r3, [r1, #14]
   30e78:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   30e7c:	b1cb      	cbz	r3, 30eb2 <nrfx_twim_init+0x72>
   30e7e:	7bcb      	ldrb	r3, [r1, #15]
   30e80:	b92b      	cbnz	r3, 30e8e <nrfx_twim_init+0x4e>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   30e82:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
   30e86:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   30e8a:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
   30e8e:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
   30e90:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
    if (p_cb->handler)
   30e94:	b122      	cbz	r2, 30ea0 <nrfx_twim_init+0x60>
   30e96:	6800      	ldr	r0, [r0, #0]
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   30e98:	f340 3007 	sbfx	r0, r0, #12, #8
   30e9c:	f7e3 fd28 	bl	148f0 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   30ea0:	2334      	movs	r3, #52	; 0x34
   30ea2:	fb03 5506 	mla	r5, r3, r6, r5
    return err_code;
   30ea6:	4814      	ldr	r0, [pc, #80]	; (30ef8 <nrfx_twim_init+0xb8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   30ea8:	2301      	movs	r3, #1
   30eaa:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   30eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        TWIM_PIN_INIT(p_config->scl, drive);
   30eb2:	680c      	ldr	r4, [r1, #0]
        case 0: return NRF_P0;
   30eb4:	4b11      	ldr	r3, [pc, #68]	; (30efc <nrfx_twim_init+0xbc>)
    *p_pin = pin_number & 0x1F;
   30eb6:	f004 071f 	and.w	r7, r4, #31
    return pin_number >> 5;
   30eba:	0964      	lsrs	r4, r4, #5
        case 0: return NRF_P0;
   30ebc:	2c01      	cmp	r4, #1
   30ebe:	bf08      	it	eq
   30ec0:	4698      	moveq	r8, r3
    reg->PIN_CNF[pin_number] = cnf;
   30ec2:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
        case 0: return NRF_P0;
   30ec6:	bf18      	it	ne
   30ec8:	f04f 48a0 	movne.w	r8, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   30ecc:	f240 6e0c 	movw	lr, #1548	; 0x60c
   30ed0:	f848 e024 	str.w	lr, [r8, r4, lsl #2]
        TWIM_PIN_INIT(p_config->sda, drive);
   30ed4:	684c      	ldr	r4, [r1, #4]
    *p_pin = pin_number & 0x1F;
   30ed6:	f004 071f 	and.w	r7, r4, #31
    return pin_number >> 5;
   30eda:	0964      	lsrs	r4, r4, #5
        case 0: return NRF_P0;
   30edc:	2c01      	cmp	r4, #1
   30ede:	bf18      	it	ne
   30ee0:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   30ee4:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
   30ee8:	f843 e024 	str.w	lr, [r3, r4, lsl #2]
    if (!p_config->skip_psel_cfg)
   30eec:	e7c7      	b.n	30e7e <nrfx_twim_init+0x3e>
        return err_code;
   30eee:	4804      	ldr	r0, [pc, #16]	; (30f00 <nrfx_twim_init+0xc0>)
   30ef0:	e7dd      	b.n	30eae <nrfx_twim_init+0x6e>
   30ef2:	bf00      	nop
   30ef4:	200031d0 	.word	0x200031d0
   30ef8:	0bad0000 	.word	0x0bad0000
   30efc:	50000300 	.word	0x50000300
   30f00:	0bad0005 	.word	0x0bad0005

00030f04 <nrfx_twim_enable>:
    nrf_twim_enable(p_instance->p_twim);
   30f04:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   30f06:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   30f08:	2106      	movs	r1, #6
   30f0a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   30f0e:	4b04      	ldr	r3, [pc, #16]	; (30f20 <nrfx_twim_enable+0x1c>)
   30f10:	2134      	movs	r1, #52	; 0x34
   30f12:	fb01 3302 	mla	r3, r1, r2, r3
   30f16:	2202      	movs	r2, #2
   30f18:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
   30f1c:	4770      	bx	lr
   30f1e:	bf00      	nop
   30f20:	200031d0 	.word	0x200031d0

00030f24 <nrfx_twim_disable>:
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   30f24:	7901      	ldrb	r1, [r0, #4]
    p_cb->int_mask = 0;
   30f26:	4b0c      	ldr	r3, [pc, #48]	; (30f58 <nrfx_twim_disable+0x34>)
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   30f28:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
   30f2a:	2034      	movs	r0, #52	; 0x34
   30f2c:	fb00 3301 	mla	r3, r0, r1, r3
   30f30:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
   30f32:	480a      	ldr	r0, [pc, #40]	; (30f5c <nrfx_twim_disable+0x38>)
   30f34:	6099      	str	r1, [r3, #8]
   30f36:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   30f3a:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   30f3e:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
   30f42:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   30f46:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   30f4a:	2201      	movs	r2, #1
   30f4c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
   30f50:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
}
   30f54:	4770      	bx	lr
   30f56:	bf00      	nop
   30f58:	200031d0 	.word	0x200031d0
   30f5c:	019c0202 	.word	0x019c0202

00030f60 <nrfx_twim_xfer>:
{
   30f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
   30f64:	f8df c2ec 	ldr.w	ip, [pc, #748]	; 31254 <nrfx_twim_xfer+0x2f4>
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   30f68:	f890 e004 	ldrb.w	lr, [r0, #4]
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   30f6c:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
   30f6e:	2334      	movs	r3, #52	; 0x34
   30f70:	fb03 c30e 	mla	r3, r3, lr, ip
{
   30f74:	4617      	mov	r7, r2
    p_cb->error = false;
   30f76:	2200      	movs	r2, #0
   30f78:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   30f7c:	684b      	ldr	r3, [r1, #4]
{
   30f7e:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   30f80:	b14b      	cbz	r3, 30f96 <nrfx_twim_xfer+0x36>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   30f82:	68cb      	ldr	r3, [r1, #12]
   30f84:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   30f88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   30f8c:	d003      	beq.n	30f96 <nrfx_twim_xfer+0x36>
        return err_code;
   30f8e:	4eb2      	ldr	r6, [pc, #712]	; (31258 <nrfx_twim_xfer+0x2f8>)
}
   30f90:	4630      	mov	r0, r6
   30f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
   30f96:	2634      	movs	r6, #52	; 0x34
    p_reg->INTENCLR = mask;
   30f98:	4bb0      	ldr	r3, [pc, #704]	; (3125c <nrfx_twim_xfer+0x2fc>)
   30f9a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   30f9e:	fb06 c60e 	mla	r6, r6, lr, ip
   30fa2:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   30fa6:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   30faa:	b123      	cbz	r3, 30fb6 <nrfx_twim_xfer+0x56>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   30fac:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
   30fae:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
   30fb2:	4eab      	ldr	r6, [pc, #684]	; (31260 <nrfx_twim_xfer+0x300>)
   30fb4:	e7ec      	b.n	30f90 <nrfx_twim_xfer+0x30>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   30fb6:	f017 0f14 	tst.w	r7, #20
   30fba:	bf0c      	ite	eq
   30fbc:	2301      	moveq	r3, #1
   30fbe:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   30fc0:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   30fc4:	46a9      	mov	r9, r5
   30fc6:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   30fca:	f106 080c 	add.w	r8, r6, #12
   30fce:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
   30fd2:	f8d9 3000 	ldr.w	r3, [r9]
   30fd6:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   30fda:	f3c7 1300 	ubfx	r3, r7, #4, #1
   30fde:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags = flags;
   30fe2:	6237      	str	r7, [r6, #32]
    p_reg->ADDRESS = address;
   30fe4:	786b      	ldrb	r3, [r5, #1]
   30fe6:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   30fea:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   30fee:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   30ff2:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   30ff6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   30ffa:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   30ffe:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   31002:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
   31006:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   3100a:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   3100e:	bf18      	it	ne
   31010:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   31012:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   31016:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   3101a:	bf18      	it	ne
   3101c:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   3101e:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   31022:	782b      	ldrb	r3, [r5, #0]
   31024:	2b03      	cmp	r3, #3
   31026:	f200 80b9 	bhi.w	3119c <nrfx_twim_xfer+0x23c>
   3102a:	e8df f003 	tbb	[pc, r3]
   3102e:	a48b      	.short	0xa48b
   31030:	026d      	.short	0x026d
   31032:	692b      	ldr	r3, [r5, #16]
   31034:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   31038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   3103c:	d1a7      	bne.n	30f8e <nrfx_twim_xfer+0x2e>
    p_reg->SHORTS = mask;
   3103e:	f44f 7380 	mov.w	r3, #256	; 0x100
   31042:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   31046:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   31048:	68ea      	ldr	r2, [r5, #12]
   3104a:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   3104e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   31052:	2300      	movs	r3, #0
   31054:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   31058:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3105c:	2201      	movs	r2, #1
   3105e:	6222      	str	r2, [r4, #32]
   31060:	60a2      	str	r2, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   31062:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   31066:	2a00      	cmp	r2, #0
   31068:	d0fb      	beq.n	31062 <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3106a:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   3106e:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   31072:	692a      	ldr	r2, [r5, #16]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   31074:	68ab      	ldr	r3, [r5, #8]
   31076:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   3107a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   3107e:	2334      	movs	r3, #52	; 0x34
   31080:	fb03 c30e 	mla	r3, r3, lr, ip
   31084:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   31088:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   3108a:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   3108c:	4e75      	ldr	r6, [pc, #468]	; (31264 <nrfx_twim_xfer+0x304>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   3108e:	0738      	lsls	r0, r7, #28
   31090:	d407      	bmi.n	310a2 <nrfx_twim_xfer+0x142>
   31092:	782a      	ldrb	r2, [r5, #0]
   31094:	2a03      	cmp	r2, #3
   31096:	d004      	beq.n	310a2 <nrfx_twim_xfer+0x142>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   31098:	2201      	movs	r2, #1
   3109a:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
   3109c:	686b      	ldr	r3, [r5, #4]
   3109e:	b903      	cbnz	r3, 310a2 <nrfx_twim_xfer+0x142>
   310a0:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
   310a2:	2334      	movs	r3, #52	; 0x34
   310a4:	fb03 f30e 	mul.w	r3, r3, lr
   310a8:	eb0c 0203 	add.w	r2, ip, r3
   310ac:	f85c 1003 	ldr.w	r1, [ip, r3]
   310b0:	2900      	cmp	r1, #0
   310b2:	d176      	bne.n	311a2 <nrfx_twim_xfer+0x242>
   310b4:	2001      	movs	r0, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   310b6:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   310ba:	2b00      	cmp	r3, #0
   310bc:	f000 8089 	beq.w	311d2 <nrfx_twim_xfer+0x272>
   310c0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   310c4:	2b00      	cmp	r3, #0
   310c6:	f040 8087 	bne.w	311d8 <nrfx_twim_xfer+0x278>
   310ca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   310ce:	2b00      	cmp	r3, #0
   310d0:	f000 8095 	beq.w	311fe <nrfx_twim_xfer+0x29e>
                transmission_finished = true;
   310d4:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   310d6:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
   310da:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   310de:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   310e2:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   310e6:	2d00      	cmp	r5, #0
   310e8:	f000 8081 	beq.w	311ee <nrfx_twim_xfer+0x28e>
   310ec:	f412 7f00 	tst.w	r2, #512	; 0x200
   310f0:	f402 7280 	and.w	r2, r2, #256	; 0x100
   310f4:	d17e      	bne.n	311f4 <nrfx_twim_xfer+0x294>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   310f6:	6220      	str	r0, [r4, #32]
   310f8:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   310fa:	2a00      	cmp	r2, #0
   310fc:	d0db      	beq.n	310b6 <nrfx_twim_xfer+0x156>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   310fe:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
   31102:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
                    transmission_finished = false;
   31106:	e7d6      	b.n	310b6 <nrfx_twim_xfer+0x156>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   31108:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   3110a:	68ea      	ldr	r2, [r5, #12]
   3110c:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   31110:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   31114:	692b      	ldr	r3, [r5, #16]
   31116:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   3111a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   3111e:	f47f af36 	bne.w	30f8e <nrfx_twim_xfer+0x2e>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   31122:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   31124:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   31128:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   3112c:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   31130:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   31134:	2334      	movs	r3, #52	; 0x34
   31136:	fb03 c30e 	mla	r3, r3, lr, ip
   3113a:	2202      	movs	r2, #2
   3113c:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3113e:	2301      	movs	r3, #1
   31140:	6223      	str	r3, [r4, #32]
   31142:	e7a2      	b.n	3108a <nrfx_twim_xfer+0x12a>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   31144:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   31146:	68ea      	ldr	r2, [r5, #12]
   31148:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   3114c:	f017 0f20 	tst.w	r7, #32
    p_reg->TXD.MAXCNT = length;
   31150:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   31154:	f04f 0334 	mov.w	r3, #52	; 0x34
   31158:	d008      	beq.n	3116c <nrfx_twim_xfer+0x20c>
    p_reg->SHORTS = mask;
   3115a:	f44f 7280 	mov.w	r2, #256	; 0x100
   3115e:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   31162:	fb03 c30e 	mla	r3, r3, lr, ip
   31166:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   3116a:	e7e7      	b.n	3113c <nrfx_twim_xfer+0x1dc>
   3116c:	f44f 7200 	mov.w	r2, #512	; 0x200
   31170:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   31174:	e7df      	b.n	31136 <nrfx_twim_xfer+0x1d6>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   31176:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   31178:	68ea      	ldr	r2, [r5, #12]
   3117a:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   3117e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   31182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   31186:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   3118a:	2334      	movs	r3, #52	; 0x34
   3118c:	fb03 c30e 	mla	r3, r3, lr, ip
   31190:	2202      	movs	r2, #2
   31192:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   31194:	2301      	movs	r3, #1
   31196:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   31198:	2300      	movs	r3, #0
   3119a:	e777      	b.n	3108c <nrfx_twim_xfer+0x12c>
    switch (p_xfer_desc->type)
   3119c:	4e32      	ldr	r6, [pc, #200]	; (31268 <nrfx_twim_xfer+0x308>)
   3119e:	2308      	movs	r3, #8
   311a0:	e775      	b.n	3108e <nrfx_twim_xfer+0x12e>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   311a2:	0779      	lsls	r1, r7, #29
            p_cb->int_mask = 0;
   311a4:	bf44      	itt	mi
   311a6:	2300      	movmi	r3, #0
   311a8:	6093      	strmi	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   311aa:	067a      	lsls	r2, r7, #25
   311ac:	d406      	bmi.n	311bc <nrfx_twim_xfer+0x25c>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   311ae:	2334      	movs	r3, #52	; 0x34
   311b0:	fb03 c30e 	mla	r3, r3, lr, ip
   311b4:	689a      	ldr	r2, [r3, #8]
   311b6:	f042 0202 	orr.w	r2, r2, #2
   311ba:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   311bc:	2334      	movs	r3, #52	; 0x34
   311be:	fb03 c30e 	mla	r3, r3, lr, ip
   311c2:	689a      	ldr	r2, [r3, #8]
   311c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   311c8:	609a      	str	r2, [r3, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   311ca:	689b      	ldr	r3, [r3, #8]
    p_reg->INTENSET = mask;
   311cc:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   311d0:	e6de      	b.n	30f90 <nrfx_twim_xfer+0x30>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   311d2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   311d6:	b123      	cbz	r3, 311e2 <nrfx_twim_xfer+0x282>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   311d8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   311dc:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   311e0:	e773      	b.n	310ca <nrfx_twim_xfer+0x16a>
   311e2:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   311e6:	2a00      	cmp	r2, #0
   311e8:	f43f af65 	beq.w	310b6 <nrfx_twim_xfer+0x156>
   311ec:	e773      	b.n	310d6 <nrfx_twim_xfer+0x176>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   311ee:	6220      	str	r0, [r4, #32]
   311f0:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   311f2:	e760      	b.n	310b6 <nrfx_twim_xfer+0x156>
   311f4:	2a00      	cmp	r2, #0
   311f6:	d182      	bne.n	310fe <nrfx_twim_xfer+0x19e>
        } while (!transmission_finished);
   311f8:	2b00      	cmp	r3, #0
   311fa:	f43f af5c 	beq.w	310b6 <nrfx_twim_xfer+0x156>
        p_cb->busy = false;
   311fe:	2134      	movs	r1, #52	; 0x34
    uint32_t error_source = p_reg->ERRORSRC;
   31200:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   31204:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   31208:	fb01 c20e 	mla	r2, r1, lr, ip
   3120c:	2000      	movs	r0, #0
   3120e:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   31212:	b18b      	cbz	r3, 31238 <nrfx_twim_xfer+0x2d8>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   31214:	4a15      	ldr	r2, [pc, #84]	; (3126c <nrfx_twim_xfer+0x30c>)
   31216:	4e16      	ldr	r6, [pc, #88]	; (31270 <nrfx_twim_xfer+0x310>)
   31218:	f013 0f01 	tst.w	r3, #1
   3121c:	bf18      	it	ne
   3121e:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   31220:	f013 0f02 	tst.w	r3, #2
   31224:	f102 0201 	add.w	r2, r2, #1
   31228:	bf18      	it	ne
   3122a:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   3122c:	f013 0f04 	tst.w	r3, #4
   31230:	4b10      	ldr	r3, [pc, #64]	; (31274 <nrfx_twim_xfer+0x314>)
   31232:	bf18      	it	ne
   31234:	461e      	movne	r6, r3
   31236:	e6ab      	b.n	30f90 <nrfx_twim_xfer+0x30>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   31238:	067b      	lsls	r3, r7, #25
   3123a:	f53f aea9 	bmi.w	30f90 <nrfx_twim_xfer+0x30>
                !xfer_completeness_check(p_twim, p_cb))
   3123e:	fb0e c101 	mla	r1, lr, r1, ip
   31242:	4620      	mov	r0, r4
   31244:	f007 f95c 	bl	38500 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   31248:	4b09      	ldr	r3, [pc, #36]	; (31270 <nrfx_twim_xfer+0x310>)
   3124a:	2800      	cmp	r0, #0
   3124c:	bf08      	it	eq
   3124e:	461e      	moveq	r6, r3
   31250:	e69e      	b.n	30f90 <nrfx_twim_xfer+0x30>
   31252:	bf00      	nop
   31254:	200031d0 	.word	0x200031d0
   31258:	0bad000a 	.word	0x0bad000a
   3125c:	019c0202 	.word	0x019c0202
   31260:	0bad000b 	.word	0x0bad000b
   31264:	0bad0000 	.word	0x0bad0000
   31268:	0bad0004 	.word	0x0bad0004
   3126c:	0bae0000 	.word	0x0bae0000
   31270:	0bad0001 	.word	0x0bad0001
   31274:	0bae0002 	.word	0x0bae0002

00031278 <nrfx_twim_0_irq_handler>:

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
   31278:	4901      	ldr	r1, [pc, #4]	; (31280 <nrfx_twim_0_irq_handler+0x8>)
   3127a:	4802      	ldr	r0, [pc, #8]	; (31284 <nrfx_twim_0_irq_handler+0xc>)
   3127c:	f7ff bd26 	b.w	30ccc <twim_irq_handler>
   31280:	200031d0 	.word	0x200031d0
   31284:	40003000 	.word	0x40003000

00031288 <nrfx_twim_1_irq_handler>:
#endif

#if NRFX_CHECK(NRFX_TWIM1_ENABLED)
void nrfx_twim_1_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM1, &m_cb[NRFX_TWIM1_INST_IDX]);
   31288:	4902      	ldr	r1, [pc, #8]	; (31294 <nrfx_twim_1_irq_handler+0xc>)
   3128a:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   3128e:	f7ff bd1d 	b.w	30ccc <twim_irq_handler>
   31292:	bf00      	nop
   31294:	20003204 	.word	0x20003204

00031298 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   31298:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   3129a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   3129e:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
   312a0:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   312a2:	6002      	str	r2, [r0, #0]
}
   312a4:	4802      	ldr	r0, [pc, #8]	; (312b0 <nrf_gpio_pin_port_decode+0x18>)
   312a6:	bf18      	it	ne
   312a8:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   312ac:	4770      	bx	lr
   312ae:	bf00      	nop
   312b0:	50000300 	.word	0x50000300

000312b4 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   312b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   312b6:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
   312b8:	f007 f952 	bl	38560 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
   312bc:	4608      	mov	r0, r1
   312be:	f007 f94f 	bl	38560 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   312c2:	a801      	add	r0, sp, #4
   312c4:	9601      	str	r6, [sp, #4]
   312c6:	f7ff ffe7 	bl	31298 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   312ca:	9b01      	ldr	r3, [sp, #4]
   312cc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
{
   312d0:	460c      	mov	r4, r1
   312d2:	f240 610d 	movw	r1, #1549	; 0x60d
   312d6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   312da:	a801      	add	r0, sp, #4
   312dc:	9401      	str	r4, [sp, #4]
   312de:	f7ff ffdb 	bl	31298 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   312e2:	9b01      	ldr	r3, [sp, #4]
   312e4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   312e8:	2509      	movs	r5, #9
   312ea:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
   312ee:	2004      	movs	r0, #4
   312f0:	f007 f81b 	bl	3832a <nrfx_busy_wait>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   312f4:	2701      	movs	r7, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   312f6:	a801      	add	r0, sp, #4
   312f8:	9401      	str	r4, [sp, #4]
   312fa:	f7ff ffcd 	bl	31298 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   312fe:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   31300:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   31304:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   31306:	07db      	lsls	r3, r3, #31
   31308:	d415      	bmi.n	31336 <nrfx_twi_twim_bus_recover+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3130a:	a801      	add	r0, sp, #4
   3130c:	9601      	str	r6, [sp, #4]
   3130e:	f7ff ffc3 	bl	31298 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   31312:	9b01      	ldr	r3, [sp, #4]
   31314:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
   31318:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   3131c:	2004      	movs	r0, #4
   3131e:	f007 f804 	bl	3832a <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
   31322:	4630      	mov	r0, r6
   31324:	f007 f91c 	bl	38560 <nrf_gpio_pin_set>
    for (uint8_t i = 0; i < 9; i++)
   31328:	3d01      	subs	r5, #1
            NRFX_DELAY_US(4);
   3132a:	2004      	movs	r0, #4
   3132c:	f006 fffd 	bl	3832a <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   31330:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   31334:	d1df      	bne.n	312f6 <nrfx_twi_twim_bus_recover+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   31336:	a801      	add	r0, sp, #4
   31338:	9401      	str	r4, [sp, #4]
   3133a:	f7ff ffad 	bl	31298 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   3133e:	9a01      	ldr	r2, [sp, #4]
   31340:	2301      	movs	r3, #1
   31342:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   31344:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   31348:	2004      	movs	r0, #4
   3134a:	f006 ffee 	bl	3832a <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
   3134e:	4620      	mov	r0, r4
   31350:	f007 f906 	bl	38560 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
   31354:	2004      	movs	r0, #4
   31356:	f006 ffe8 	bl	3832a <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3135a:	a801      	add	r0, sp, #4
   3135c:	9401      	str	r4, [sp, #4]
   3135e:	f7ff ff9b 	bl	31298 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   31362:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   31364:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   31368:	4803      	ldr	r0, [pc, #12]	; (31378 <nrfx_twi_twim_bus_recover+0xc4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   3136a:	40d3      	lsrs	r3, r2
   3136c:	f003 0301 	and.w	r3, r3, #1
   31370:	1ac0      	subs	r0, r0, r3
   31372:	b003      	add	sp, #12
   31374:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31376:	bf00      	nop
   31378:	0bad0001 	.word	0x0bad0001

0003137c <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   3137c:	4b01      	ldr	r3, [pc, #4]	; (31384 <z_impl_z_errno+0x8>)
   3137e:	6898      	ldr	r0, [r3, #8]
}
   31380:	3064      	adds	r0, #100	; 0x64
   31382:	4770      	bx	lr
   31384:	20003238 	.word	0x20003238

00031388 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   31388:	b5b0      	push	{r4, r5, r7, lr}
   3138a:	4604      	mov	r4, r0
   3138c:	af00      	add	r7, sp, #0
	z_impl_log_panic();
   3138e:	f7e1 fe11 	bl	12fb4 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   31392:	466d      	mov	r5, sp
   31394:	b088      	sub	sp, #32
   31396:	466a      	mov	r2, sp
   31398:	4b08      	ldr	r3, [pc, #32]	; (313bc <k_sys_fatal_error_handler+0x34>)
   3139a:	6153      	str	r3, [r2, #20]
   3139c:	4b08      	ldr	r3, [pc, #32]	; (313c0 <k_sys_fatal_error_handler+0x38>)
   3139e:	6193      	str	r3, [r2, #24]
   313a0:	2303      	movs	r3, #3
   313a2:	f842 3f10 	str.w	r3, [r2, #16]!
   313a6:	4807      	ldr	r0, [pc, #28]	; (313c4 <k_sys_fatal_error_handler+0x3c>)
   313a8:	2300      	movs	r3, #0
   313aa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   313ae:	f7e1 fee1 	bl	13174 <z_impl_z_log_msg_static_create>
	arch_system_halt(reason);
   313b2:	4620      	mov	r0, r4
   313b4:	46ad      	mov	sp, r5
   313b6:	f007 f8ec 	bl	38592 <arch_system_halt>
   313ba:	bf00      	nop
   313bc:	0003f04d 	.word	0x0003f04d
   313c0:	0003f133 	.word	0x0003f133
   313c4:	00039658 	.word	0x00039658

000313c8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   313c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   313cc:	4605      	mov	r5, r0
   313ce:	af00      	add	r7, sp, #0
   313d0:	460e      	mov	r6, r1
	__asm__ volatile(
   313d2:	f04f 0320 	mov.w	r3, #32
   313d6:	f3ef 8a11 	mrs	sl, BASEPRI
   313da:	f383 8812 	msr	BASEPRI_MAX, r3
   313de:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   313e2:	f001 f899 	bl	32518 <z_impl_z_current_get>
   313e6:	2d04      	cmp	r5, #4
   313e8:	bf96      	itet	ls
   313ea:	4b2f      	ldrls	r3, [pc, #188]	; (314a8 <z_fatal_error+0xe0>)
   313ec:	4b2f      	ldrhi	r3, [pc, #188]	; (314ac <z_fatal_error+0xe4>)
   313ee:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   313f2:	46e9      	mov	r9, sp
   313f4:	b08c      	sub	sp, #48	; 0x30
   313f6:	4604      	mov	r4, r0
   313f8:	466a      	mov	r2, sp
   313fa:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 314b0 <z_fatal_error+0xe8>
   313fe:	6213      	str	r3, [r2, #32]
   31400:	f240 4302 	movw	r3, #1026	; 0x402
   31404:	8513      	strh	r3, [r2, #40]	; 0x28
   31406:	492b      	ldr	r1, [pc, #172]	; (314b4 <z_fatal_error+0xec>)
   31408:	4b2b      	ldr	r3, [pc, #172]	; (314b8 <z_fatal_error+0xf0>)
   3140a:	6151      	str	r1, [r2, #20]
   3140c:	f04f 0b00 	mov.w	fp, #0
   31410:	e9c2 8506 	strd	r8, r5, [r2, #24]
   31414:	f8c2 b024 	str.w	fp, [r2, #36]	; 0x24
   31418:	f842 3f10 	str.w	r3, [r2, #16]!
   3141c:	4827      	ldr	r0, [pc, #156]	; (314bc <z_fatal_error+0xf4>)
   3141e:	465b      	mov	r3, fp
   31420:	f44f 5151 	mov.w	r1, #13376	; 0x3440
   31424:	f7e1 fea6 	bl	13174 <z_impl_z_log_msg_static_create>
   31428:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   3142a:	b196      	cbz	r6, 31452 <z_fatal_error+0x8a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   3142c:	69f3      	ldr	r3, [r6, #28]
   3142e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   31432:	b173      	cbz	r3, 31452 <z_fatal_error+0x8a>
		LOG_ERR("Fault during interrupt handling\n");
   31434:	b088      	sub	sp, #32
   31436:	466a      	mov	r2, sp
   31438:	4b21      	ldr	r3, [pc, #132]	; (314c0 <z_fatal_error+0xf8>)
   3143a:	e9c2 3805 	strd	r3, r8, [r2, #20]
   3143e:	2303      	movs	r3, #3
   31440:	f842 3f10 	str.w	r3, [r2, #16]!
   31444:	481d      	ldr	r0, [pc, #116]	; (314bc <z_fatal_error+0xf4>)
   31446:	465b      	mov	r3, fp
   31448:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   3144c:	f7e1 fe92 	bl	13174 <z_impl_z_log_msg_static_create>
   31450:	46cd      	mov	sp, r9
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   31452:	b12c      	cbz	r4, 31460 <z_fatal_error+0x98>
   31454:	4620      	mov	r0, r4
   31456:	f007 f963 	bl	38720 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   3145a:	b108      	cbz	r0, 31460 <z_fatal_error+0x98>
   3145c:	7803      	ldrb	r3, [r0, #0]
   3145e:	b903      	cbnz	r3, 31462 <z_fatal_error+0x9a>
		thread_name = "unknown";
   31460:	4818      	ldr	r0, [pc, #96]	; (314c4 <z_fatal_error+0xfc>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   31462:	46e9      	mov	r9, sp
   31464:	b08a      	sub	sp, #40	; 0x28
   31466:	466a      	mov	r2, sp
   31468:	4b17      	ldr	r3, [pc, #92]	; (314c8 <z_fatal_error+0x100>)
   3146a:	e9c2 3805 	strd	r3, r8, [r2, #20]
   3146e:	f240 4302 	movw	r3, #1026	; 0x402
   31472:	8493      	strh	r3, [r2, #36]	; 0x24
   31474:	4b15      	ldr	r3, [pc, #84]	; (314cc <z_fatal_error+0x104>)
   31476:	e9c2 4007 	strd	r4, r0, [r2, #28]
   3147a:	f842 3f10 	str.w	r3, [r2, #16]!
   3147e:	2300      	movs	r3, #0
   31480:	480e      	ldr	r0, [pc, #56]	; (314bc <z_fatal_error+0xf4>)
   31482:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   31486:	f7e1 fe75 	bl	13174 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   3148a:	4631      	mov	r1, r6
   3148c:	46cd      	mov	sp, r9
   3148e:	4628      	mov	r0, r5
   31490:	f7ff ff7a 	bl	31388 <k_sys_fatal_error_handler>
	__asm__ volatile(
   31494:	f38a 8811 	msr	BASEPRI, sl
   31498:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   3149c:	4620      	mov	r0, r4
   3149e:	f7e3 ff03 	bl	152a8 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   314a2:	46bd      	mov	sp, r7
   314a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   314a8:	0003b4bc 	.word	0x0003b4bc
   314ac:	0003f060 	.word	0x0003f060
   314b0:	0003f125 	.word	0x0003f125
   314b4:	0003f06e 	.word	0x0003f06e
   314b8:	01000006 	.word	0x01000006
   314bc:	00039658 	.word	0x00039658
   314c0:	0003f09a 	.word	0x0003f09a
   314c4:	0003c3ab 	.word	0x0003c3ab
   314c8:	0003f0bf 	.word	0x0003f0bf
   314cc:	01000005 	.word	0x01000005

000314d0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   314d0:	4b0f      	ldr	r3, [pc, #60]	; (31510 <z_sys_init_run_level+0x40>)
{
   314d2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   314d4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   314d8:	3001      	adds	r0, #1
   314da:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   314de:	42a6      	cmp	r6, r4
   314e0:	d800      	bhi.n	314e4 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   314e2:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   314e4:	e9d4 3500 	ldrd	r3, r5, [r4]
   314e8:	4628      	mov	r0, r5
   314ea:	4798      	blx	r3
		if (dev != NULL) {
   314ec:	b16d      	cbz	r5, 3150a <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   314ee:	b138      	cbz	r0, 31500 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   314f0:	2800      	cmp	r0, #0
   314f2:	bfb8      	it	lt
   314f4:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   314f6:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
   314f8:	28ff      	cmp	r0, #255	; 0xff
   314fa:	bfa8      	it	ge
   314fc:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   314fe:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   31500:	68ea      	ldr	r2, [r5, #12]
   31502:	7853      	ldrb	r3, [r2, #1]
   31504:	f043 0301 	orr.w	r3, r3, #1
   31508:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   3150a:	3408      	adds	r4, #8
   3150c:	e7e7      	b.n	314de <z_sys_init_run_level+0xe>
   3150e:	bf00      	nop
   31510:	0003b4d0 	.word	0x0003b4d0

00031514 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   31514:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   31516:	4b0a      	ldr	r3, [pc, #40]	; (31540 <bg_thread_main+0x2c>)
   31518:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   3151a:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   3151c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   3151e:	f7ff ffd7 	bl	314d0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   31522:	f001 fb25 	bl	32b70 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   31526:	2004      	movs	r0, #4
   31528:	f7ff ffd2 	bl	314d0 <z_sys_init_run_level>

	z_init_static_threads();
   3152c:	f000 f970 	bl	31810 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
   31530:	f7e0 fa04 	bl	1193c <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   31534:	4a03      	ldr	r2, [pc, #12]	; (31544 <bg_thread_main+0x30>)
   31536:	7b13      	ldrb	r3, [r2, #12]
   31538:	f023 0301 	bic.w	r3, r3, #1
   3153c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   3153e:	bd08      	pop	{r3, pc}
   31540:	20003422 	.word	0x20003422
   31544:	20001930 	.word	0x20001930

00031548 <z_bss_zero>:
{
   31548:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   3154a:	4803      	ldr	r0, [pc, #12]	; (31558 <z_bss_zero+0x10>)
   3154c:	4a03      	ldr	r2, [pc, #12]	; (3155c <z_bss_zero+0x14>)
   3154e:	2100      	movs	r1, #0
   31550:	1a12      	subs	r2, r2, r0
   31552:	f007 f827 	bl	385a4 <z_early_memset>
}
   31556:	bd08      	pop	{r3, pc}
   31558:	20000c60 	.word	0x20000c60
   3155c:	20003424 	.word	0x20003424

00031560 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   31560:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   31562:	2300      	movs	r3, #0
{
   31564:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   31566:	2201      	movs	r2, #1
   31568:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   3156c:	4e13      	ldr	r6, [pc, #76]	; (315bc <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   3156e:	4d14      	ldr	r5, [pc, #80]	; (315c0 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   31570:	9301      	str	r3, [sp, #4]
   31572:	220f      	movs	r2, #15
   31574:	e9cd 3202 	strd	r3, r2, [sp, #8]
   31578:	4912      	ldr	r1, [pc, #72]	; (315c4 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   3157a:	2318      	movs	r3, #24
   3157c:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   31580:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   31584:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   31586:	f44f 70c0 	mov.w	r0, #384	; 0x180
   3158a:	fb00 1104 	mla	r1, r0, r4, r1
   3158e:	4b0e      	ldr	r3, [pc, #56]	; (315c8 <z_init_cpu+0x68>)
   31590:	9500      	str	r5, [sp, #0]
   31592:	f44f 72a0 	mov.w	r2, #320	; 0x140
   31596:	4630      	mov	r0, r6
   31598:	f000 f8dc 	bl	31754 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3159c:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   3159e:	4a0b      	ldr	r2, [pc, #44]	; (315cc <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   315a0:	60ee      	str	r6, [r5, #12]
   315a2:	f023 0304 	bic.w	r3, r3, #4
   315a6:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   315a8:	f44f 6304 	mov.w	r3, #2112	; 0x840
   315ac:	fb04 3303 	mla	r3, r4, r3, r3
   315b0:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
   315b2:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
   315b4:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   315b6:	b006      	add	sp, #24
   315b8:	bd70      	pop	{r4, r5, r6, pc}
   315ba:	bf00      	nop
   315bc:	200018b0 	.word	0x200018b0
   315c0:	20003238 	.word	0x20003238
   315c4:	20005380 	.word	0x20005380
   315c8:	000318c9 	.word	0x000318c9
   315cc:	20004b40 	.word	0x20004b40

000315d0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   315d0:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   315d2:	2000      	movs	r0, #0
{
   315d4:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   315d6:	f7ff ff7b 	bl	314d0 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   315da:	4b2e      	ldr	r3, [pc, #184]	; (31694 <z_cstart+0xc4>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   315dc:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   315e0:	4d2d      	ldr	r5, [pc, #180]	; (31698 <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   315e2:	4e2e      	ldr	r6, [pc, #184]	; (3169c <z_cstart+0xcc>)
   315e4:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   315e6:	4f2e      	ldr	r7, [pc, #184]	; (316a0 <z_cstart+0xd0>)
   315e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   315ec:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   315ee:	2400      	movs	r4, #0
   315f0:	23e0      	movs	r3, #224	; 0xe0
   315f2:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   315f6:	77ec      	strb	r4, [r5, #31]
   315f8:	762c      	strb	r4, [r5, #24]
   315fa:	766c      	strb	r4, [r5, #25]
   315fc:	76ac      	strb	r4, [r5, #26]
   315fe:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   31602:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   31604:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   31608:	626b      	str	r3, [r5, #36]	; 0x24
   3160a:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   3160e:	f7e3 fe15 	bl	1523c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   31612:	f7e3 f8e1 	bl	147d8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   31616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3161a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   3161c:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   3161e:	f7e3 ff1b 	bl	15458 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   31622:	f7e3 fe57 	bl	152d4 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   31626:	f7e1 fc31 	bl	12e8c <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   3162a:	f240 1301 	movw	r3, #257	; 0x101
   3162e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   31632:	ab06      	add	r3, sp, #24
   31634:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   31636:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   3163a:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   3163c:	f006 ff9d 	bl	3857a <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   31640:	2001      	movs	r0, #1
   31642:	f7ff ff45 	bl	314d0 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   31646:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   31648:	4d16      	ldr	r5, [pc, #88]	; (316a4 <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   3164a:	f7ff ff41 	bl	314d0 <z_sys_init_run_level>
	z_sched_init();
   3164e:	f000 febb 	bl	323c8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   31652:	4b15      	ldr	r3, [pc, #84]	; (316a8 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
   31654:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   31656:	9305      	str	r3, [sp, #20]
   31658:	2301      	movs	r3, #1
   3165a:	4914      	ldr	r1, [pc, #80]	; (316ac <z_cstart+0xdc>)
   3165c:	9400      	str	r4, [sp, #0]
   3165e:	e9cd 4303 	strd	r4, r3, [sp, #12]
   31662:	f44f 6280 	mov.w	r2, #1024	; 0x400
   31666:	463b      	mov	r3, r7
   31668:	e9cd 4401 	strd	r4, r4, [sp, #4]
   3166c:	4628      	mov	r0, r5
   3166e:	f000 f871 	bl	31754 <z_setup_new_thread>
   31672:	7b6a      	ldrb	r2, [r5, #13]
   31674:	4606      	mov	r6, r0
   31676:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   3167a:	4628      	mov	r0, r5
   3167c:	736a      	strb	r2, [r5, #13]
   3167e:	f007 fa9e 	bl	38bbe <z_ready_thread>
	z_init_cpu(0);
   31682:	4620      	mov	r0, r4
   31684:	f7ff ff6c 	bl	31560 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   31688:	463a      	mov	r2, r7
   3168a:	4631      	mov	r1, r6
   3168c:	4628      	mov	r0, r5
   3168e:	f7e3 fa33 	bl	14af8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   31692:	bf00      	nop
   31694:	20005380 	.word	0x20005380
   31698:	e000ed00 	.word	0xe000ed00
   3169c:	20003238 	.word	0x20003238
   316a0:	00031515 	.word	0x00031515
   316a4:	20001930 	.word	0x20001930
   316a8:	0003f14d 	.word	0x0003f14d
   316ac:	20005500 	.word	0x20005500

000316b0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   316b0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   316b2:	4c06      	ldr	r4, [pc, #24]	; (316cc <statics_init+0x1c>)
   316b4:	4d06      	ldr	r5, [pc, #24]	; (316d0 <statics_init+0x20>)
   316b6:	42ac      	cmp	r4, r5
   316b8:	d301      	bcc.n	316be <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   316ba:	2000      	movs	r0, #0
   316bc:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   316be:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   316c2:	4620      	mov	r0, r4
   316c4:	f006 ff72 	bl	385ac <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   316c8:	3414      	adds	r4, #20
   316ca:	e7f4      	b.n	316b6 <statics_init+0x6>
   316cc:	20000ab4 	.word	0x20000ab4
   316d0:	20000ab4 	.word	0x20000ab4

000316d4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   316d4:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   316d6:	4c06      	ldr	r4, [pc, #24]	; (316f0 <init_mem_slab_module+0x1c>)
   316d8:	4d06      	ldr	r5, [pc, #24]	; (316f4 <init_mem_slab_module+0x20>)
	int rc = 0;
   316da:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   316dc:	42ac      	cmp	r4, r5
   316de:	d300      	bcc.n	316e2 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   316e0:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   316e2:	4620      	mov	r0, r4
   316e4:	f006 ffd4 	bl	38690 <create_free_list>
		if (rc < 0) {
   316e8:	2800      	cmp	r0, #0
   316ea:	dbf9      	blt.n	316e0 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   316ec:	341c      	adds	r4, #28
   316ee:	e7f5      	b.n	316dc <init_mem_slab_module+0x8>
   316f0:	20000a60 	.word	0x20000a60
   316f4:	20000ab4 	.word	0x20000ab4

000316f8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   316f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   316fa:	460c      	mov	r4, r1
	__asm__ volatile(
   316fc:	f04f 0520 	mov.w	r5, #32
   31700:	f3ef 8111 	mrs	r1, BASEPRI
   31704:	f385 8812 	msr	BASEPRI_MAX, r5
   31708:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   3170c:	6945      	ldr	r5, [r0, #20]
   3170e:	b15d      	cbz	r5, 31728 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   31710:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   31712:	682b      	ldr	r3, [r5, #0]
   31714:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   31716:	6983      	ldr	r3, [r0, #24]
   31718:	3301      	adds	r3, #1
   3171a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   3171c:	2000      	movs	r0, #0
	__asm__ volatile(
   3171e:	f381 8811 	msr	BASEPRI, r1
   31722:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   31726:	e011      	b.n	3174c <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   31728:	ea52 0603 	orrs.w	r6, r2, r3
   3172c:	d103      	bne.n	31736 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   3172e:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   31730:	f06f 000b 	mvn.w	r0, #11
   31734:	e7f3      	b.n	3171e <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   31736:	e9cd 2300 	strd	r2, r3, [sp]
   3173a:	4602      	mov	r2, r0
   3173c:	3008      	adds	r0, #8
   3173e:	f000 fd4d 	bl	321dc <z_pend_curr>
		if (result == 0) {
   31742:	b918      	cbnz	r0, 3174c <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   31744:	4b02      	ldr	r3, [pc, #8]	; (31750 <k_mem_slab_alloc+0x58>)
   31746:	689b      	ldr	r3, [r3, #8]
   31748:	695b      	ldr	r3, [r3, #20]
   3174a:	6023      	str	r3, [r4, #0]
}
   3174c:	b002      	add	sp, #8
   3174e:	bd70      	pop	{r4, r5, r6, pc}
   31750:	20003238 	.word	0x20003238

00031754 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   31754:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   31758:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   3175a:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   3175c:	2604      	movs	r6, #4
   3175e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   31760:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   31762:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   31764:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   31768:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   3176a:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   3176c:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   31770:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   31772:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   31774:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   31778:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   3177a:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   3177e:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   31782:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   31784:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   31786:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   31788:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   3178c:	9202      	str	r2, [sp, #8]
   3178e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   31790:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   31792:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   31794:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   31796:	9200      	str	r2, [sp, #0]
   31798:	4642      	mov	r2, r8
{
   3179a:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   3179c:	f7e3 f97a 	bl	14a94 <arch_new_thread>
	if (!_current) {
   317a0:	4b04      	ldr	r3, [pc, #16]	; (317b4 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   317a2:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   317a4:	689b      	ldr	r3, [r3, #8]
   317a6:	b103      	cbz	r3, 317aa <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   317a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   317aa:	6763      	str	r3, [r4, #116]	; 0x74
}
   317ac:	4640      	mov	r0, r8
   317ae:	b004      	add	sp, #16
   317b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   317b4:	20003238 	.word	0x20003238

000317b8 <z_impl_k_thread_create>:
{
   317b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   317ba:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   317bc:	2500      	movs	r5, #0
   317be:	9505      	str	r5, [sp, #20]
   317c0:	9d10      	ldr	r5, [sp, #64]	; 0x40
   317c2:	9504      	str	r5, [sp, #16]
   317c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   317c6:	9503      	str	r5, [sp, #12]
   317c8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   317ca:	9502      	str	r5, [sp, #8]
{
   317cc:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   317d0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   317d2:	9501      	str	r5, [sp, #4]
   317d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   317d6:	9500      	str	r5, [sp, #0]
{
   317d8:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   317da:	f7ff ffbb 	bl	31754 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   317de:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   317e2:	bf08      	it	eq
   317e4:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
   317e8:	d005      	beq.n	317f6 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   317ea:	ea56 0307 	orrs.w	r3, r6, r7
   317ee:	d105      	bne.n	317fc <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   317f0:	4620      	mov	r0, r4
   317f2:	f000 fd69 	bl	322c8 <z_sched_start>
}
   317f6:	4620      	mov	r0, r4
   317f8:	b007      	add	sp, #28
   317fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   317fc:	4903      	ldr	r1, [pc, #12]	; (3180c <z_impl_k_thread_create+0x54>)
   317fe:	463a      	mov	r2, r7
   31800:	4633      	mov	r3, r6
   31802:	f104 0018 	add.w	r0, r4, #24
   31806:	f000 ff67 	bl	326d8 <z_add_timeout>
   3180a:	e7f4      	b.n	317f6 <z_impl_k_thread_create+0x3e>
   3180c:	00038b2b 	.word	0x00038b2b

00031810 <z_init_static_threads>:
{
   31810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   31814:	4c29      	ldr	r4, [pc, #164]	; (318bc <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   31816:	4d2a      	ldr	r5, [pc, #168]	; (318c0 <z_init_static_threads+0xb0>)
{
   31818:	b087      	sub	sp, #28
   3181a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   3181c:	42ae      	cmp	r6, r5
   3181e:	f104 0430 	add.w	r4, r4, #48	; 0x30
   31822:	d30f      	bcc.n	31844 <z_init_static_threads+0x34>
	k_sched_lock();
   31824:	f000 fda0 	bl	32368 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   31828:	4c24      	ldr	r4, [pc, #144]	; (318bc <z_init_static_threads+0xac>)
   3182a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 318c4 <z_init_static_threads+0xb4>
   3182e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   31832:	f240 37e7 	movw	r7, #999	; 0x3e7
   31836:	42ac      	cmp	r4, r5
   31838:	d320      	bcc.n	3187c <z_init_static_threads+0x6c>
}
   3183a:	b007      	add	sp, #28
   3183c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   31840:	f000 bda6 	b.w	32390 <k_sched_unlock>
		z_setup_new_thread(
   31844:	f854 3c04 	ldr.w	r3, [r4, #-4]
   31848:	9305      	str	r3, [sp, #20]
   3184a:	f854 3c10 	ldr.w	r3, [r4, #-16]
   3184e:	9304      	str	r3, [sp, #16]
   31850:	f854 3c14 	ldr.w	r3, [r4, #-20]
   31854:	9303      	str	r3, [sp, #12]
   31856:	f854 3c18 	ldr.w	r3, [r4, #-24]
   3185a:	9302      	str	r3, [sp, #8]
   3185c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   31860:	9301      	str	r3, [sp, #4]
   31862:	f854 3c20 	ldr.w	r3, [r4, #-32]
   31866:	9300      	str	r3, [sp, #0]
   31868:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   3186c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   31870:	f7ff ff70 	bl	31754 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   31874:	f854 3c30 	ldr.w	r3, [r4, #-48]
   31878:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   3187a:	e7ce      	b.n	3181a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   3187c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3187e:	1c5a      	adds	r2, r3, #1
   31880:	d00d      	beq.n	3189e <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   31882:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   31886:	2100      	movs	r1, #0
   31888:	4638      	mov	r0, r7
   3188a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   3188e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   31892:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   31896:	d104      	bne.n	318a2 <z_init_static_threads+0x92>
	z_sched_start(thread);
   31898:	4640      	mov	r0, r8
   3189a:	f000 fd15 	bl	322c8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   3189e:	3430      	adds	r4, #48	; 0x30
   318a0:	e7c9      	b.n	31836 <z_init_static_threads+0x26>
   318a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   318a6:	2300      	movs	r3, #0
   318a8:	f7de fc7a 	bl	101a0 <__aeabi_uldivmod>
   318ac:	4602      	mov	r2, r0
   318ae:	460b      	mov	r3, r1
   318b0:	f108 0018 	add.w	r0, r8, #24
   318b4:	4649      	mov	r1, r9
   318b6:	f000 ff0f 	bl	326d8 <z_add_timeout>
   318ba:	e7f0      	b.n	3189e <z_init_static_threads+0x8e>
   318bc:	00039480 	.word	0x00039480
   318c0:	00039480 	.word	0x00039480
   318c4:	00038b2b 	.word	0x00038b2b

000318c8 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   318c8:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   318ca:	4c0b      	ldr	r4, [pc, #44]	; (318f8 <idle+0x30>)
	return !z_sys_post_kernel;
   318cc:	4d0b      	ldr	r5, [pc, #44]	; (318fc <idle+0x34>)
	__asm__ volatile(
   318ce:	f04f 0220 	mov.w	r2, #32
   318d2:	f3ef 8311 	mrs	r3, BASEPRI
   318d6:	f382 8812 	msr	BASEPRI_MAX, r2
   318da:	f3bf 8f6f 	isb	sy
   318de:	f007 fa34 	bl	38d4a <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   318e2:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   318e4:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   318e6:	b913      	cbnz	r3, 318ee <idle+0x26>
	arch_cpu_idle();
   318e8:	f7e2 ff7c 	bl	147e4 <arch_cpu_idle>
}
   318ec:	e7ef      	b.n	318ce <idle+0x6>
   318ee:	f7e2 fd7f 	bl	143f0 <pm_system_suspend>
   318f2:	2800      	cmp	r0, #0
   318f4:	d1eb      	bne.n	318ce <idle+0x6>
   318f6:	e7f7      	b.n	318e8 <idle+0x20>
   318f8:	20003238 	.word	0x20003238
   318fc:	20003422 	.word	0x20003422

00031900 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   31900:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   31904:	4604      	mov	r4, r0
   31906:	4617      	mov	r7, r2
   31908:	461e      	mov	r6, r3
   3190a:	f04f 0320 	mov.w	r3, #32
   3190e:	f3ef 8811 	mrs	r8, BASEPRI
   31912:	f383 8812 	msr	BASEPRI_MAX, r3
   31916:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   3191a:	68c3      	ldr	r3, [r0, #12]
   3191c:	4a33      	ldr	r2, [pc, #204]	; (319ec <z_impl_k_mutex_lock+0xec>)
   3191e:	b17b      	cbz	r3, 31940 <z_impl_k_mutex_lock+0x40>
   31920:	6880      	ldr	r0, [r0, #8]
   31922:	6891      	ldr	r1, [r2, #8]
   31924:	4288      	cmp	r0, r1
   31926:	d019      	beq.n	3195c <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   31928:	ea57 0306 	orrs.w	r3, r7, r6
   3192c:	d118      	bne.n	31960 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   3192e:	f388 8811 	msr	BASEPRI, r8
   31932:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   31936:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   3193a:	b002      	add	sp, #8
   3193c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   31940:	6891      	ldr	r1, [r2, #8]
   31942:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   31946:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   31948:	3301      	adds	r3, #1
   3194a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   3194c:	6893      	ldr	r3, [r2, #8]
   3194e:	60a3      	str	r3, [r4, #8]
   31950:	f388 8811 	msr	BASEPRI, r8
   31954:	f3bf 8f6f 	isb	sy
		return 0;
   31958:	2000      	movs	r0, #0
   3195a:	e7ee      	b.n	3193a <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   3195c:	6921      	ldr	r1, [r4, #16]
   3195e:	e7f2      	b.n	31946 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   31960:	f991 100e 	ldrsb.w	r1, [r1, #14]
   31964:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   31968:	4299      	cmp	r1, r3
   3196a:	bfa8      	it	ge
   3196c:	4619      	movge	r1, r3
   3196e:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   31972:	4291      	cmp	r1, r2
   31974:	bfb8      	it	lt
   31976:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   31978:	428b      	cmp	r3, r1
   3197a:	dd2e      	ble.n	319da <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   3197c:	f006 fedb 	bl	38736 <adjust_owner_prio.isra.0>
   31980:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   31982:	e9cd 7600 	strd	r7, r6, [sp]
   31986:	481a      	ldr	r0, [pc, #104]	; (319f0 <z_impl_k_mutex_lock+0xf0>)
   31988:	4622      	mov	r2, r4
   3198a:	4641      	mov	r1, r8
   3198c:	f000 fc26 	bl	321dc <z_pend_curr>
	if (got_mutex == 0) {
   31990:	2800      	cmp	r0, #0
   31992:	d0e1      	beq.n	31958 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   31994:	f04f 0320 	mov.w	r3, #32
   31998:	f3ef 8611 	mrs	r6, BASEPRI
   3199c:	f383 8812 	msr	BASEPRI_MAX, r3
   319a0:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   319a4:	68a0      	ldr	r0, [r4, #8]
   319a6:	b1d0      	cbz	r0, 319de <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   319a8:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   319aa:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   319ac:	429c      	cmp	r4, r3
   319ae:	d00a      	beq.n	319c6 <z_impl_k_mutex_lock+0xc6>
   319b0:	b14b      	cbz	r3, 319c6 <z_impl_k_mutex_lock+0xc6>
   319b2:	f993 300e 	ldrsb.w	r3, [r3, #14]
   319b6:	4299      	cmp	r1, r3
   319b8:	bfa8      	it	ge
   319ba:	4619      	movge	r1, r3
   319bc:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   319c0:	4299      	cmp	r1, r3
   319c2:	bfb8      	it	lt
   319c4:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   319c6:	f006 feb6 	bl	38736 <adjust_owner_prio.isra.0>
   319ca:	b140      	cbz	r0, 319de <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   319cc:	4808      	ldr	r0, [pc, #32]	; (319f0 <z_impl_k_mutex_lock+0xf0>)
   319ce:	4631      	mov	r1, r6
   319d0:	f000 fc68 	bl	322a4 <z_reschedule>
	return -EAGAIN;
   319d4:	f06f 000a 	mvn.w	r0, #10
   319d8:	e7af      	b.n	3193a <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   319da:	2500      	movs	r5, #0
   319dc:	e7d1      	b.n	31982 <z_impl_k_mutex_lock+0x82>
	if (resched) {
   319de:	2d00      	cmp	r5, #0
   319e0:	d1f4      	bne.n	319cc <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   319e2:	f386 8811 	msr	BASEPRI, r6
   319e6:	f3bf 8f6f 	isb	sy
   319ea:	e7f3      	b.n	319d4 <z_impl_k_mutex_lock+0xd4>
   319ec:	20003238 	.word	0x20003238
   319f0:	20003423 	.word	0x20003423

000319f4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   319f4:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   319f6:	6883      	ldr	r3, [r0, #8]
{
   319f8:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   319fa:	b36b      	cbz	r3, 31a58 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   319fc:	4a19      	ldr	r2, [pc, #100]	; (31a64 <z_impl_k_mutex_unlock+0x70>)
   319fe:	6892      	ldr	r2, [r2, #8]
   31a00:	4293      	cmp	r3, r2
   31a02:	d12c      	bne.n	31a5e <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   31a04:	68c3      	ldr	r3, [r0, #12]
   31a06:	2b01      	cmp	r3, #1
   31a08:	d903      	bls.n	31a12 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   31a0a:	3b01      	subs	r3, #1
   31a0c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   31a0e:	2000      	movs	r0, #0
}
   31a10:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   31a12:	f04f 0320 	mov.w	r3, #32
   31a16:	f3ef 8511 	mrs	r5, BASEPRI
   31a1a:	f383 8812 	msr	BASEPRI_MAX, r3
   31a1e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   31a22:	6901      	ldr	r1, [r0, #16]
   31a24:	6880      	ldr	r0, [r0, #8]
   31a26:	f006 fe86 	bl	38736 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   31a2a:	4620      	mov	r0, r4
   31a2c:	f007 f8fe 	bl	38c2c <z_unpend_first_thread>
	mutex->owner = new_owner;
   31a30:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   31a32:	b158      	cbz	r0, 31a4c <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   31a34:	f990 200e 	ldrsb.w	r2, [r0, #14]
   31a38:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   31a3a:	2200      	movs	r2, #0
   31a3c:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   31a3e:	f007 f8be 	bl	38bbe <z_ready_thread>
		z_reschedule(&lock, key);
   31a42:	4809      	ldr	r0, [pc, #36]	; (31a68 <z_impl_k_mutex_unlock+0x74>)
   31a44:	4629      	mov	r1, r5
   31a46:	f000 fc2d 	bl	322a4 <z_reschedule>
   31a4a:	e7e0      	b.n	31a0e <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   31a4c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   31a4e:	f385 8811 	msr	BASEPRI, r5
   31a52:	f3bf 8f6f 	isb	sy
   31a56:	e7da      	b.n	31a0e <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   31a58:	f06f 0015 	mvn.w	r0, #21
   31a5c:	e7d8      	b.n	31a10 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   31a5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   31a62:	e7d5      	b.n	31a10 <z_impl_k_mutex_unlock+0x1c>
   31a64:	20003238 	.word	0x20003238
   31a68:	20003423 	.word	0x20003423

00031a6c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   31a6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   31a6e:	4611      	mov	r1, r2
	__asm__ volatile(
   31a70:	f04f 0220 	mov.w	r2, #32
   31a74:	f3ef 8511 	mrs	r5, BASEPRI
   31a78:	f382 8812 	msr	BASEPRI_MAX, r2
   31a7c:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   31a80:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   31a82:	b19c      	cbz	r4, 31aac <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   31a84:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   31a86:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   31a88:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   31a8c:	4294      	cmp	r4, r2
	list->head = node;
   31a8e:	6003      	str	r3, [r0, #0]
	list->tail = node;
   31a90:	bf08      	it	eq
   31a92:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   31a94:	2101      	movs	r1, #1
   31a96:	4620      	mov	r0, r4
   31a98:	f006 fec2 	bl	38820 <z_queue_node_peek>
   31a9c:	4604      	mov	r4, r0
	__asm__ volatile(
   31a9e:	f385 8811 	msr	BASEPRI, r5
   31aa2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   31aa6:	4620      	mov	r0, r4
   31aa8:	b003      	add	sp, #12
   31aaa:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   31aac:	ea51 0203 	orrs.w	r2, r1, r3
   31ab0:	d0f5      	beq.n	31a9e <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   31ab2:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   31ab6:	e9cd 1300 	strd	r1, r3, [sp]
   31aba:	4610      	mov	r0, r2
   31abc:	4629      	mov	r1, r5
   31abe:	f000 fb8d 	bl	321dc <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   31ac2:	2800      	cmp	r0, #0
   31ac4:	d1ef      	bne.n	31aa6 <z_impl_k_queue_get+0x3a>
   31ac6:	4b02      	ldr	r3, [pc, #8]	; (31ad0 <z_impl_k_queue_get+0x64>)
   31ac8:	689b      	ldr	r3, [r3, #8]
   31aca:	695c      	ldr	r4, [r3, #20]
   31acc:	e7eb      	b.n	31aa6 <z_impl_k_queue_get+0x3a>
   31ace:	bf00      	nop
   31ad0:	20003238 	.word	0x20003238

00031ad4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   31ad4:	b538      	push	{r3, r4, r5, lr}
   31ad6:	4604      	mov	r4, r0
	__asm__ volatile(
   31ad8:	f04f 0320 	mov.w	r3, #32
   31adc:	f3ef 8511 	mrs	r5, BASEPRI
   31ae0:	f383 8812 	msr	BASEPRI_MAX, r3
   31ae4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   31ae8:	f007 f8a0 	bl	38c2c <z_unpend_first_thread>

	if (thread != NULL) {
   31aec:	b148      	cbz	r0, 31b02 <z_impl_k_sem_give+0x2e>
   31aee:	2200      	movs	r2, #0
   31af0:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   31af2:	f007 f864 	bl	38bbe <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   31af6:	4629      	mov	r1, r5
   31af8:	4808      	ldr	r0, [pc, #32]	; (31b1c <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   31afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   31afe:	f000 bbd1 	b.w	322a4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   31b02:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   31b06:	429a      	cmp	r2, r3
   31b08:	bf18      	it	ne
   31b0a:	3301      	addne	r3, #1
   31b0c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   31b0e:	2102      	movs	r1, #2
   31b10:	f104 0010 	add.w	r0, r4, #16
   31b14:	f007 fada 	bl	390cc <z_handle_obj_poll_events>
}
   31b18:	e7ed      	b.n	31af6 <z_impl_k_sem_give+0x22>
   31b1a:	bf00      	nop
   31b1c:	20003423 	.word	0x20003423

00031b20 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   31b20:	b513      	push	{r0, r1, r4, lr}
   31b22:	f04f 0420 	mov.w	r4, #32
   31b26:	f3ef 8111 	mrs	r1, BASEPRI
   31b2a:	f384 8812 	msr	BASEPRI_MAX, r4
   31b2e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   31b32:	6884      	ldr	r4, [r0, #8]
   31b34:	b144      	cbz	r4, 31b48 <z_impl_k_sem_take+0x28>
		sem->count--;
   31b36:	3c01      	subs	r4, #1
   31b38:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   31b3a:	f381 8811 	msr	BASEPRI, r1
   31b3e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   31b42:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   31b44:	b002      	add	sp, #8
   31b46:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   31b48:	ea52 0403 	orrs.w	r4, r2, r3
   31b4c:	d106      	bne.n	31b5c <z_impl_k_sem_take+0x3c>
   31b4e:	f381 8811 	msr	BASEPRI, r1
   31b52:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   31b56:	f06f 000f 	mvn.w	r0, #15
   31b5a:	e7f3      	b.n	31b44 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   31b5c:	e9cd 2300 	strd	r2, r3, [sp]
   31b60:	4602      	mov	r2, r0
   31b62:	4802      	ldr	r0, [pc, #8]	; (31b6c <z_impl_k_sem_take+0x4c>)
   31b64:	f000 fb3a 	bl	321dc <z_pend_curr>
	return ret;
   31b68:	e7ec      	b.n	31b44 <z_impl_k_sem_take+0x24>
   31b6a:	bf00      	nop
   31b6c:	20003423 	.word	0x20003423

00031b70 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   31b70:	b570      	push	{r4, r5, r6, lr}
   31b72:	4604      	mov	r4, r0
	__asm__ volatile(
   31b74:	f04f 0320 	mov.w	r3, #32
   31b78:	f3ef 8511 	mrs	r5, BASEPRI
   31b7c:	f383 8812 	msr	BASEPRI_MAX, r3
   31b80:	f3bf 8f6f 	isb	sy
   31b84:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   31b88:	4620      	mov	r0, r4
   31b8a:	f007 f84f 	bl	38c2c <z_unpend_first_thread>
		if (thread == NULL) {
   31b8e:	b118      	cbz	r0, 31b98 <z_impl_k_sem_reset+0x28>
   31b90:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   31b92:	f007 f814 	bl	38bbe <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   31b96:	e7f7      	b.n	31b88 <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
   31b98:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   31b9a:	2102      	movs	r1, #2
   31b9c:	f104 0010 	add.w	r0, r4, #16
   31ba0:	f007 fa94 	bl	390cc <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   31ba4:	4629      	mov	r1, r5
   31ba6:	4802      	ldr	r0, [pc, #8]	; (31bb0 <z_impl_k_sem_reset+0x40>)
}
   31ba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   31bac:	f000 bb7a 	b.w	322a4 <z_reschedule>
   31bb0:	20003423 	.word	0x20003423

00031bb4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   31bb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   31bb6:	4b09      	ldr	r3, [pc, #36]	; (31bdc <k_sys_work_q_init+0x28>)
   31bb8:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   31bba:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   31bbc:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   31bbe:	9300      	str	r3, [sp, #0]
   31bc0:	4907      	ldr	r1, [pc, #28]	; (31be0 <k_sys_work_q_init+0x2c>)
   31bc2:	4808      	ldr	r0, [pc, #32]	; (31be4 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   31bc4:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   31bc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   31bcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   31bd0:	f000 f924 	bl	31e1c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   31bd4:	4620      	mov	r0, r4
   31bd6:	b004      	add	sp, #16
   31bd8:	bd10      	pop	{r4, pc}
   31bda:	bf00      	nop
   31bdc:	0003f155 	.word	0x0003f155
   31be0:	20005940 	.word	0x20005940
   31be4:	200019b0 	.word	0x200019b0

00031be8 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   31be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   31bec:	4e4a      	ldr	r6, [pc, #296]	; (31d18 <work_queue_main+0x130>)
   31bee:	b085      	sub	sp, #20
   31bf0:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   31bf2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   31bf6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   31bfa:	f04f 0320 	mov.w	r3, #32
   31bfe:	f3ef 8711 	mrs	r7, BASEPRI
   31c02:	f383 8812 	msr	BASEPRI_MAX, r3
   31c06:	f3bf 8f6f 	isb	sy
   31c0a:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   31c0e:	b98d      	cbnz	r5, 31c34 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   31c10:	2102      	movs	r1, #2
   31c12:	f104 0098 	add.w	r0, r4, #152	; 0x98
   31c16:	f006 fe64 	bl	388e2 <flag_test_and_clear>
   31c1a:	2800      	cmp	r0, #0
   31c1c:	d143      	bne.n	31ca6 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   31c1e:	2300      	movs	r3, #0
   31c20:	e9cd 8900 	strd	r8, r9, [sp]
   31c24:	9302      	str	r3, [sp, #8]
   31c26:	f104 0288 	add.w	r2, r4, #136	; 0x88
   31c2a:	4639      	mov	r1, r7
   31c2c:	483b      	ldr	r0, [pc, #236]	; (31d1c <work_queue_main+0x134>)
   31c2e:	f000 fcd9 	bl	325e4 <z_sched_wait>
			continue;
   31c32:	e7e2      	b.n	31bfa <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   31c34:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   31c38:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   31c3a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   31c3e:	4295      	cmp	r5, r2
	list->tail = node;
   31c40:	bf08      	it	eq
   31c42:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   31c46:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   31c4a:	f043 0302 	orr.w	r3, r3, #2
   31c4e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   31c52:	68eb      	ldr	r3, [r5, #12]
   31c54:	f023 0304 	bic.w	r3, r3, #4
   31c58:	f043 0301 	orr.w	r3, r3, #1
   31c5c:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   31c5e:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   31c60:	f387 8811 	msr	BASEPRI, r7
   31c64:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   31c68:	4628      	mov	r0, r5
   31c6a:	4798      	blx	r3
	__asm__ volatile(
   31c6c:	f04f 0320 	mov.w	r3, #32
   31c70:	f3ef 8b11 	mrs	fp, BASEPRI
   31c74:	f383 8812 	msr	BASEPRI_MAX, r3
   31c78:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   31c7c:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   31c7e:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   31c80:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   31c84:	d419      	bmi.n	31cba <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   31c86:	60ea      	str	r2, [r5, #12]
   31c88:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   31c8c:	f023 0302 	bic.w	r3, r3, #2
   31c90:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   31c94:	f38b 8811 	msr	BASEPRI, fp
   31c98:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   31c9c:	05db      	lsls	r3, r3, #23
   31c9e:	d4ac      	bmi.n	31bfa <work_queue_main+0x12>
	z_impl_k_yield();
   31ca0:	f000 fb9e 	bl	323e0 <z_impl_k_yield>
}
   31ca4:	e7a9      	b.n	31bfa <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   31ca6:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   31caa:	2200      	movs	r2, #0
   31cac:	2101      	movs	r1, #1
   31cae:	4628      	mov	r0, r5
   31cb0:	f007 f812 	bl	38cd8 <z_sched_wake>
   31cb4:	2800      	cmp	r0, #0
   31cb6:	d1f8      	bne.n	31caa <work_queue_main+0xc2>
   31cb8:	e7b1      	b.n	31c1e <work_queue_main+0x36>
	return list->head;
   31cba:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   31cbc:	f023 0303 	bic.w	r3, r3, #3
   31cc0:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   31cc2:	2800      	cmp	r0, #0
   31cc4:	d0e0      	beq.n	31c88 <work_queue_main+0xa0>
	return node->next;
   31cc6:	2700      	movs	r7, #0
   31cc8:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   31ccc:	463b      	mov	r3, r7
   31cce:	2800      	cmp	r0, #0
   31cd0:	d0da      	beq.n	31c88 <work_queue_main+0xa0>
		if (wc->work == work) {
   31cd2:	6842      	ldr	r2, [r0, #4]
   31cd4:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   31cd6:	4601      	mov	r1, r0
		if (wc->work == work) {
   31cd8:	d10c      	bne.n	31cf4 <work_queue_main+0x10c>
	return node->next;
   31cda:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   31cdc:	b99f      	cbnz	r7, 31d06 <work_queue_main+0x11e>
   31cde:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   31ce0:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   31ce2:	4282      	cmp	r2, r0
   31ce4:	d100      	bne.n	31ce8 <work_queue_main+0x100>
	list->tail = node;
   31ce6:	6071      	str	r1, [r6, #4]
	parent->next = child;
   31ce8:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   31cec:	f7ff fef2 	bl	31ad4 <z_impl_k_sem_give>
}
   31cf0:	4639      	mov	r1, r7
   31cf2:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   31cf4:	f1ba 0f00 	cmp.w	sl, #0
   31cf8:	d00b      	beq.n	31d12 <work_queue_main+0x12a>
	return node->next;
   31cfa:	f8da 2000 	ldr.w	r2, [sl]
   31cfe:	4650      	mov	r0, sl
   31d00:	460f      	mov	r7, r1
   31d02:	4692      	mov	sl, r2
   31d04:	e7e3      	b.n	31cce <work_queue_main+0xe6>
	parent->next = child;
   31d06:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   31d08:	6872      	ldr	r2, [r6, #4]
   31d0a:	4282      	cmp	r2, r0
	list->tail = node;
   31d0c:	bf08      	it	eq
   31d0e:	6077      	streq	r7, [r6, #4]
}
   31d10:	e7ea      	b.n	31ce8 <work_queue_main+0x100>
   31d12:	4652      	mov	r2, sl
   31d14:	e7f3      	b.n	31cfe <work_queue_main+0x116>
   31d16:	bf00      	nop
   31d18:	20003260 	.word	0x20003260
   31d1c:	20003423 	.word	0x20003423

00031d20 <cancel_sync_locked>:
{
   31d20:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   31d22:	68c3      	ldr	r3, [r0, #12]
   31d24:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   31d28:	079b      	lsls	r3, r3, #30
{
   31d2a:	4605      	mov	r5, r0
   31d2c:	460c      	mov	r4, r1
	if (ret) {
   31d2e:	d50d      	bpl.n	31d4c <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   31d30:	2201      	movs	r2, #1
   31d32:	2100      	movs	r1, #0
   31d34:	f104 0008 	add.w	r0, r4, #8
   31d38:	f006 fdc3 	bl	388c2 <z_impl_k_sem_init>
	parent->next = child;
   31d3c:	2300      	movs	r3, #0
   31d3e:	6023      	str	r3, [r4, #0]
	return list->tail;
   31d40:	4b05      	ldr	r3, [pc, #20]	; (31d58 <cancel_sync_locked+0x38>)
	canceler->work = work;
   31d42:	6065      	str	r5, [r4, #4]
   31d44:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   31d46:	b91a      	cbnz	r2, 31d50 <cancel_sync_locked+0x30>
	list->head = node;
   31d48:	e9c3 4400 	strd	r4, r4, [r3]
}
   31d4c:	4630      	mov	r0, r6
   31d4e:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   31d50:	6014      	str	r4, [r2, #0]
	list->tail = node;
   31d52:	605c      	str	r4, [r3, #4]
}
   31d54:	e7fa      	b.n	31d4c <cancel_sync_locked+0x2c>
   31d56:	bf00      	nop
   31d58:	20003260 	.word	0x20003260

00031d5c <submit_to_queue_locked>:
{
   31d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   31d5e:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   31d60:	079a      	lsls	r2, r3, #30
{
   31d62:	4604      	mov	r4, r0
   31d64:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   31d66:	f3c3 0640 	ubfx	r6, r3, #1, #1
   31d6a:	d42c      	bmi.n	31dc6 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   31d6c:	075b      	lsls	r3, r3, #29
   31d6e:	d41a      	bmi.n	31da6 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   31d70:	680b      	ldr	r3, [r1, #0]
   31d72:	b90b      	cbnz	r3, 31d78 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   31d74:	6883      	ldr	r3, [r0, #8]
   31d76:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   31d78:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   31d7a:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   31d7c:	bf44      	itt	mi
   31d7e:	68a3      	ldrmi	r3, [r4, #8]
   31d80:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   31d82:	683d      	ldr	r5, [r7, #0]
			ret = 2;
   31d84:	bf4c      	ite	mi
   31d86:	2602      	movmi	r6, #2
		ret = 1;
   31d88:	2601      	movpl	r6, #1
	if (queue == NULL) {
   31d8a:	2d00      	cmp	r5, #0
   31d8c:	d03a      	beq.n	31e04 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   31d8e:	4b1f      	ldr	r3, [pc, #124]	; (31e0c <submit_to_queue_locked+0xb0>)
   31d90:	689b      	ldr	r3, [r3, #8]
   31d92:	42ab      	cmp	r3, r5
   31d94:	d00a      	beq.n	31dac <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   31d96:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   31d9a:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   31d9c:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   31da0:	d414      	bmi.n	31dcc <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   31da2:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   31da6:	2300      	movs	r3, #0
   31da8:	603b      	str	r3, [r7, #0]
	return ret;
   31daa:	e025      	b.n	31df8 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   31dac:	f006 fcaf 	bl	3870e <k_is_in_isr>
   31db0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   31db4:	2800      	cmp	r0, #0
   31db6:	d1f0      	bne.n	31d9a <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   31db8:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   31dba:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   31dbe:	d5f0      	bpl.n	31da2 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   31dc0:	b152      	cbz	r2, 31dd8 <submit_to_queue_locked+0x7c>
   31dc2:	075b      	lsls	r3, r3, #29
   31dc4:	d408      	bmi.n	31dd8 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   31dc6:	f06f 060f 	mvn.w	r6, #15
   31dca:	e7ec      	b.n	31da6 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   31dcc:	2a00      	cmp	r2, #0
   31dce:	d1fa      	bne.n	31dc6 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   31dd0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   31dd4:	2b00      	cmp	r3, #0
   31dd6:	d1f6      	bne.n	31dc6 <submit_to_queue_locked+0x6a>
	parent->next = child;
   31dd8:	2300      	movs	r3, #0
   31dda:	6023      	str	r3, [r4, #0]
	return list->tail;
   31ddc:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   31de0:	b963      	cbnz	r3, 31dfc <submit_to_queue_locked+0xa0>
	list->head = node;
   31de2:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
   31de6:	4628      	mov	r0, r5
   31de8:	f006 fd94 	bl	38914 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   31dec:	68e3      	ldr	r3, [r4, #12]
   31dee:	f043 0304 	orr.w	r3, r3, #4
   31df2:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   31df4:	683b      	ldr	r3, [r7, #0]
   31df6:	60a3      	str	r3, [r4, #8]
}
   31df8:	4630      	mov	r0, r6
   31dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   31dfc:	601c      	str	r4, [r3, #0]
	list->tail = node;
   31dfe:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
   31e02:	e7f0      	b.n	31de6 <submit_to_queue_locked+0x8a>
		return -EINVAL;
   31e04:	f06f 0615 	mvn.w	r6, #21
   31e08:	e7cd      	b.n	31da6 <submit_to_queue_locked+0x4a>
   31e0a:	bf00      	nop
   31e0c:	20003238 	.word	0x20003238

00031e10 <k_work_submit>:
{
   31e10:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   31e12:	4801      	ldr	r0, [pc, #4]	; (31e18 <k_work_submit+0x8>)
   31e14:	f006 be04 	b.w	38a20 <k_work_submit_to_queue>
   31e18:	200019b0 	.word	0x200019b0

00031e1c <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   31e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   31e1e:	b089      	sub	sp, #36	; 0x24
   31e20:	4604      	mov	r4, r0
	list->head = NULL;
   31e22:	2000      	movs	r0, #0
	list->tail = NULL;
   31e24:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   31e28:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   31e2a:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   31e2e:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   31e32:	f104 0090 	add.w	r0, r4, #144	; 0x90
   31e36:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   31e3a:	b31d      	cbz	r5, 31e84 <k_work_queue_start+0x68>
   31e3c:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   31e3e:	2800      	cmp	r0, #0
   31e40:	f240 1001 	movw	r0, #257	; 0x101
   31e44:	bf08      	it	eq
   31e46:	2001      	moveq	r0, #1
	*flagp = flags;
   31e48:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   31e4c:	2000      	movs	r0, #0
   31e4e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   31e52:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   31e56:	e9cd 3003 	strd	r3, r0, [sp, #12]
   31e5a:	e9cd 0001 	strd	r0, r0, [sp, #4]
   31e5e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   31e62:	4b09      	ldr	r3, [pc, #36]	; (31e88 <k_work_queue_start+0x6c>)
   31e64:	9400      	str	r4, [sp, #0]
   31e66:	4620      	mov	r0, r4
   31e68:	f7ff fca6 	bl	317b8 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   31e6c:	b125      	cbz	r5, 31e78 <k_work_queue_start+0x5c>
   31e6e:	6829      	ldr	r1, [r5, #0]
   31e70:	b111      	cbz	r1, 31e78 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   31e72:	4620      	mov	r0, r4
   31e74:	f006 fc51 	bl	3871a <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   31e78:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   31e7a:	b009      	add	sp, #36	; 0x24
   31e7c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   31e80:	f006 bc50 	b.w	38724 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   31e84:	2001      	movs	r0, #1
   31e86:	e7df      	b.n	31e48 <k_work_queue_start+0x2c>
   31e88:	00031be9 	.word	0x00031be9

00031e8c <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   31e8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   31e8e:	9001      	str	r0, [sp, #4]
   31e90:	4608      	mov	r0, r1
	__asm__ volatile(
   31e92:	f04f 0120 	mov.w	r1, #32
   31e96:	f3ef 8411 	mrs	r4, BASEPRI
   31e9a:	f381 8812 	msr	BASEPRI_MAX, r1
   31e9e:	f3bf 8f6f 	isb	sy
	return *flagp;
   31ea2:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   31ea4:	f011 0f0e 	tst.w	r1, #14
   31ea8:	d116      	bne.n	31ed8 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   31eaa:	ea53 0502 	orrs.w	r5, r3, r2
   31eae:	d108      	bne.n	31ec2 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   31eb0:	a901      	add	r1, sp, #4
   31eb2:	f7ff ff53 	bl	31d5c <submit_to_queue_locked>
	__asm__ volatile(
   31eb6:	f384 8811 	msr	BASEPRI, r4
   31eba:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   31ebe:	b003      	add	sp, #12
   31ec0:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   31ec2:	f041 0108 	orr.w	r1, r1, #8
   31ec6:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   31ec8:	9901      	ldr	r1, [sp, #4]
   31eca:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   31ecc:	3010      	adds	r0, #16
   31ece:	4903      	ldr	r1, [pc, #12]	; (31edc <k_work_schedule_for_queue+0x50>)
   31ed0:	f000 fc02 	bl	326d8 <z_add_timeout>
	return ret;
   31ed4:	2001      	movs	r0, #1
   31ed6:	e7ee      	b.n	31eb6 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   31ed8:	2000      	movs	r0, #0
   31eda:	e7ec      	b.n	31eb6 <k_work_schedule_for_queue+0x2a>
   31edc:	00038989 	.word	0x00038989

00031ee0 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   31ee0:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   31ee2:	4801      	ldr	r0, [pc, #4]	; (31ee8 <k_work_schedule+0x8>)
   31ee4:	f7ff bfd2 	b.w	31e8c <k_work_schedule_for_queue>
   31ee8:	200019b0 	.word	0x200019b0

00031eec <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   31eec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   31eee:	460c      	mov	r4, r1
   31ef0:	9001      	str	r0, [sp, #4]
   31ef2:	4616      	mov	r6, r2
   31ef4:	461d      	mov	r5, r3
	__asm__ volatile(
   31ef6:	f04f 0320 	mov.w	r3, #32
   31efa:	f3ef 8711 	mrs	r7, BASEPRI
   31efe:	f383 8812 	msr	BASEPRI_MAX, r3
   31f02:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   31f06:	4608      	mov	r0, r1
   31f08:	f006 fcf6 	bl	388f8 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   31f0c:	ea55 0306 	orrs.w	r3, r5, r6
   31f10:	d109      	bne.n	31f26 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   31f12:	a901      	add	r1, sp, #4
   31f14:	4620      	mov	r0, r4
   31f16:	f7ff ff21 	bl	31d5c <submit_to_queue_locked>
	__asm__ volatile(
   31f1a:	f387 8811 	msr	BASEPRI, r7
   31f1e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   31f22:	b003      	add	sp, #12
   31f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   31f26:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   31f28:	4906      	ldr	r1, [pc, #24]	; (31f44 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   31f2a:	f043 0308 	orr.w	r3, r3, #8
   31f2e:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   31f30:	9b01      	ldr	r3, [sp, #4]
   31f32:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   31f34:	f104 0010 	add.w	r0, r4, #16
   31f38:	4632      	mov	r2, r6
   31f3a:	462b      	mov	r3, r5
   31f3c:	f000 fbcc 	bl	326d8 <z_add_timeout>
	return ret;
   31f40:	2001      	movs	r0, #1
   31f42:	e7ea      	b.n	31f1a <k_work_reschedule_for_queue+0x2e>
   31f44:	00038989 	.word	0x00038989

00031f48 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   31f48:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   31f4a:	4801      	ldr	r0, [pc, #4]	; (31f50 <k_work_reschedule+0x8>)
   31f4c:	f7ff bfce 	b.w	31eec <k_work_reschedule_for_queue>
   31f50:	200019b0 	.word	0x200019b0

00031f54 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   31f54:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   31f56:	4d07      	ldr	r5, [pc, #28]	; (31f74 <z_reset_time_slice+0x20>)
   31f58:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   31f5a:	b154      	cbz	r4, 31f72 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   31f5c:	f7fd fea6 	bl	2fcac <sys_clock_elapsed>
   31f60:	4b05      	ldr	r3, [pc, #20]	; (31f78 <z_reset_time_slice+0x24>)
   31f62:	4404      	add	r4, r0
   31f64:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   31f66:	6828      	ldr	r0, [r5, #0]
   31f68:	2100      	movs	r1, #0
	}
}
   31f6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   31f6e:	f006 befc 	b.w	38d6a <z_set_timeout_expiry>
}
   31f72:	bd38      	pop	{r3, r4, r5, pc}
   31f74:	20003270 	.word	0x20003270
   31f78:	20003238 	.word	0x20003238

00031f7c <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   31f7c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   31f7e:	4d0d      	ldr	r5, [pc, #52]	; (31fb4 <update_cache+0x38>)
   31f80:	462b      	mov	r3, r5
   31f82:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   31f86:	429c      	cmp	r4, r3
   31f88:	d000      	beq.n	31f8c <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   31f8a:	b904      	cbnz	r4, 31f8e <update_cache+0x12>
   31f8c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   31f8e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   31f90:	b938      	cbnz	r0, 31fa2 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   31f92:	7b5a      	ldrb	r2, [r3, #13]
   31f94:	06d2      	lsls	r2, r2, #27
   31f96:	d104      	bne.n	31fa2 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   31f98:	69a2      	ldr	r2, [r4, #24]
   31f9a:	b912      	cbnz	r2, 31fa2 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   31f9c:	89da      	ldrh	r2, [r3, #14]
   31f9e:	2a7f      	cmp	r2, #127	; 0x7f
   31fa0:	d805      	bhi.n	31fae <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   31fa2:	429c      	cmp	r4, r3
   31fa4:	d002      	beq.n	31fac <update_cache+0x30>
			z_reset_time_slice(thread);
   31fa6:	4620      	mov	r0, r4
   31fa8:	f7ff ffd4 	bl	31f54 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   31fac:	4623      	mov	r3, r4
   31fae:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   31fb0:	bd38      	pop	{r3, r4, r5, pc}
   31fb2:	bf00      	nop
   31fb4:	20003238 	.word	0x20003238

00031fb8 <move_thread_to_end_of_prio_q>:
{
   31fb8:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   31fba:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   31fbe:	7b43      	ldrb	r3, [r0, #13]
   31fc0:	2a00      	cmp	r2, #0
{
   31fc2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   31fc4:	da04      	bge.n	31fd0 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   31fc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   31fca:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   31fcc:	f006 fd92 	bl	38af4 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   31fd0:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   31fd2:	4a15      	ldr	r2, [pc, #84]	; (32028 <move_thread_to_end_of_prio_q+0x70>)
   31fd4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   31fd8:	4610      	mov	r0, r2
   31fda:	734b      	strb	r3, [r1, #13]
   31fdc:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   31fe0:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   31fe2:	4283      	cmp	r3, r0
   31fe4:	bf08      	it	eq
   31fe6:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   31fe8:	b923      	cbnz	r3, 31ff4 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   31fea:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   31fee:	6021      	str	r1, [r4, #0]
	list->tail = node;
   31ff0:	6251      	str	r1, [r2, #36]	; 0x24
}
   31ff2:	e00c      	b.n	3200e <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   31ff4:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   31ff8:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   31ffc:	42b5      	cmp	r5, r6
   31ffe:	d00e      	beq.n	3201e <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   32000:	42ae      	cmp	r6, r5
   32002:	dd0c      	ble.n	3201e <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   32004:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   32006:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   3200a:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   3200c:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   3200e:	6890      	ldr	r0, [r2, #8]
   32010:	1a43      	subs	r3, r0, r1
   32012:	4258      	negs	r0, r3
}
   32014:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   32018:	4158      	adcs	r0, r3
   3201a:	f7ff bfaf 	b.w	31f7c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   3201e:	429c      	cmp	r4, r3
   32020:	d0e3      	beq.n	31fea <move_thread_to_end_of_prio_q+0x32>
   32022:	681b      	ldr	r3, [r3, #0]
   32024:	e7e0      	b.n	31fe8 <move_thread_to_end_of_prio_q+0x30>
   32026:	bf00      	nop
   32028:	20003238 	.word	0x20003238

0003202c <ready_thread>:
{
   3202c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   3202e:	f990 300d 	ldrsb.w	r3, [r0, #13]
   32032:	7b42      	ldrb	r2, [r0, #13]
   32034:	2b00      	cmp	r3, #0
   32036:	db29      	blt.n	3208c <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   32038:	06d3      	lsls	r3, r2, #27
   3203a:	d127      	bne.n	3208c <ready_thread+0x60>
	return node->next != NULL;
   3203c:	6983      	ldr	r3, [r0, #24]
   3203e:	bb2b      	cbnz	r3, 3208c <ready_thread+0x60>
	return list->head == list;
   32040:	4913      	ldr	r1, [pc, #76]	; (32090 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   32042:	f062 027f 	orn	r2, r2, #127	; 0x7f
   32046:	7342      	strb	r2, [r0, #13]
   32048:	460a      	mov	r2, r1
   3204a:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3204e:	4294      	cmp	r4, r2
   32050:	bf18      	it	ne
   32052:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   32054:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   32056:	b923      	cbnz	r3, 32062 <ready_thread+0x36>
	node->prev = tail;
   32058:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   3205c:	6020      	str	r0, [r4, #0]
	list->tail = node;
   3205e:	6248      	str	r0, [r1, #36]	; 0x24
}
   32060:	e00c      	b.n	3207c <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   32062:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   32066:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   3206a:	42b5      	cmp	r5, r6
   3206c:	d00a      	beq.n	32084 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   3206e:	42ae      	cmp	r6, r5
   32070:	dd08      	ble.n	32084 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   32072:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   32074:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   32078:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   3207a:	6058      	str	r0, [r3, #4]
}
   3207c:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   3207e:	2000      	movs	r0, #0
   32080:	f7ff bf7c 	b.w	31f7c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   32084:	42a3      	cmp	r3, r4
   32086:	d0e7      	beq.n	32058 <ready_thread+0x2c>
   32088:	681b      	ldr	r3, [r3, #0]
   3208a:	e7e4      	b.n	32056 <ready_thread+0x2a>
}
   3208c:	bc70      	pop	{r4, r5, r6}
   3208e:	4770      	bx	lr
   32090:	20003238 	.word	0x20003238

00032094 <unready_thread>:
{
   32094:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   32096:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   3209a:	7b43      	ldrb	r3, [r0, #13]
   3209c:	2a00      	cmp	r2, #0
{
   3209e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   320a0:	da04      	bge.n	320ac <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   320a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   320a6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   320a8:	f006 fd24 	bl	38af4 <sys_dlist_remove>
	update_cache(thread == _current);
   320ac:	4b04      	ldr	r3, [pc, #16]	; (320c0 <unready_thread+0x2c>)
   320ae:	6898      	ldr	r0, [r3, #8]
   320b0:	1a43      	subs	r3, r0, r1
   320b2:	4258      	negs	r0, r3
   320b4:	4158      	adcs	r0, r3
}
   320b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   320ba:	f7ff bf5f 	b.w	31f7c <update_cache>
   320be:	bf00      	nop
   320c0:	20003238 	.word	0x20003238

000320c4 <pend_locked>:
{
   320c4:	b570      	push	{r4, r5, r6, lr}
   320c6:	4615      	mov	r5, r2
   320c8:	461c      	mov	r4, r3
   320ca:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   320cc:	f006 fd4f 	bl	38b6e <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   320d0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   320d4:	bf08      	it	eq
   320d6:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   320da:	d008      	beq.n	320ee <pend_locked+0x2a>
   320dc:	462a      	mov	r2, r5
   320de:	4623      	mov	r3, r4
   320e0:	f106 0018 	add.w	r0, r6, #24
   320e4:	4902      	ldr	r1, [pc, #8]	; (320f0 <pend_locked+0x2c>)
}
   320e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   320ea:	f000 baf5 	b.w	326d8 <z_add_timeout>
   320ee:	bd70      	pop	{r4, r5, r6, pc}
   320f0:	00038b2b 	.word	0x00038b2b

000320f4 <k_sched_time_slice_set>:
{
   320f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   320f6:	4604      	mov	r4, r0
   320f8:	460d      	mov	r5, r1
	__asm__ volatile(
   320fa:	f04f 0320 	mov.w	r3, #32
   320fe:	f3ef 8711 	mrs	r7, BASEPRI
   32102:	f383 8812 	msr	BASEPRI_MAX, r3
   32106:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   3210a:	2600      	movs	r6, #0
   3210c:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   32110:	f240 30e7 	movw	r0, #999	; 0x3e7
   32114:	4631      	mov	r1, r6
   32116:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3211a:	2300      	movs	r3, #0
   3211c:	fbe4 010c 	umlal	r0, r1, r4, ip
   32120:	f7de f83e 	bl	101a0 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   32124:	42b4      	cmp	r4, r6
   32126:	dd02      	ble.n	3212e <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
   32128:	2802      	cmp	r0, #2
   3212a:	bfb8      	it	lt
   3212c:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   3212e:	4a07      	ldr	r2, [pc, #28]	; (3214c <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
   32130:	4b07      	ldr	r3, [pc, #28]	; (32150 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   32132:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   32134:	4a07      	ldr	r2, [pc, #28]	; (32154 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   32136:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   32138:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   3213a:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   3213c:	f7ff ff0a 	bl	31f54 <z_reset_time_slice>
	__asm__ volatile(
   32140:	f387 8811 	msr	BASEPRI, r7
   32144:	f3bf 8f6f 	isb	sy
}
   32148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3214a:	bf00      	nop
   3214c:	20003270 	.word	0x20003270
   32150:	20003238 	.word	0x20003238
   32154:	2000326c 	.word	0x2000326c

00032158 <z_time_slice>:
{
   32158:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   3215a:	f04f 0320 	mov.w	r3, #32
   3215e:	f3ef 8511 	mrs	r5, BASEPRI
   32162:	f383 8812 	msr	BASEPRI_MAX, r3
   32166:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   3216a:	4b17      	ldr	r3, [pc, #92]	; (321c8 <z_time_slice+0x70>)
   3216c:	4a17      	ldr	r2, [pc, #92]	; (321cc <z_time_slice+0x74>)
   3216e:	689c      	ldr	r4, [r3, #8]
   32170:	6811      	ldr	r1, [r2, #0]
   32172:	428c      	cmp	r4, r1
   32174:	d107      	bne.n	32186 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   32176:	4620      	mov	r0, r4
   32178:	f7ff feec 	bl	31f54 <z_reset_time_slice>
	__asm__ volatile(
   3217c:	f385 8811 	msr	BASEPRI, r5
   32180:	f3bf 8f6f 	isb	sy
}
   32184:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   32186:	2100      	movs	r1, #0
   32188:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   3218a:	4a11      	ldr	r2, [pc, #68]	; (321d0 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   3218c:	6812      	ldr	r2, [r2, #0]
   3218e:	b1c2      	cbz	r2, 321c2 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   32190:	89e2      	ldrh	r2, [r4, #14]
   32192:	2a7f      	cmp	r2, #127	; 0x7f
   32194:	d815      	bhi.n	321c2 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   32196:	7b62      	ldrb	r2, [r4, #13]
   32198:	06d2      	lsls	r2, r2, #27
   3219a:	d112      	bne.n	321c2 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   3219c:	4a0d      	ldr	r2, [pc, #52]	; (321d4 <z_time_slice+0x7c>)
   3219e:	f994 100e 	ldrsb.w	r1, [r4, #14]
   321a2:	6812      	ldr	r2, [r2, #0]
   321a4:	4291      	cmp	r1, r2
   321a6:	db0c      	blt.n	321c2 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   321a8:	4a0b      	ldr	r2, [pc, #44]	; (321d8 <z_time_slice+0x80>)
   321aa:	4294      	cmp	r4, r2
   321ac:	d009      	beq.n	321c2 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   321ae:	691a      	ldr	r2, [r3, #16]
   321b0:	4282      	cmp	r2, r0
   321b2:	dc03      	bgt.n	321bc <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   321b4:	4620      	mov	r0, r4
   321b6:	f7ff feff 	bl	31fb8 <move_thread_to_end_of_prio_q>
   321ba:	e7dc      	b.n	32176 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   321bc:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   321be:	611a      	str	r2, [r3, #16]
   321c0:	e7dc      	b.n	3217c <z_time_slice+0x24>
   321c2:	2200      	movs	r2, #0
   321c4:	e7fb      	b.n	321be <z_time_slice+0x66>
   321c6:	bf00      	nop
   321c8:	20003238 	.word	0x20003238
   321cc:	20003268 	.word	0x20003268
   321d0:	20003270 	.word	0x20003270
   321d4:	2000326c 	.word	0x2000326c
   321d8:	200018b0 	.word	0x200018b0

000321dc <z_pend_curr>:
{
   321dc:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   321de:	480c      	ldr	r0, [pc, #48]	; (32210 <z_pend_curr+0x34>)
   321e0:	4d0c      	ldr	r5, [pc, #48]	; (32214 <z_pend_curr+0x38>)
   321e2:	6886      	ldr	r6, [r0, #8]
   321e4:	602e      	str	r6, [r5, #0]
{
   321e6:	460c      	mov	r4, r1
   321e8:	4611      	mov	r1, r2
   321ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   321ee:	f04f 0620 	mov.w	r6, #32
   321f2:	f3ef 8511 	mrs	r5, BASEPRI
   321f6:	f386 8812 	msr	BASEPRI_MAX, r6
   321fa:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   321fe:	6880      	ldr	r0, [r0, #8]
   32200:	f7ff ff60 	bl	320c4 <pend_locked>
	ret = arch_swap(key);
   32204:	4620      	mov	r0, r4
}
   32206:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3220a:	f7e2 bbef 	b.w	149ec <arch_swap>
   3220e:	bf00      	nop
   32210:	20003238 	.word	0x20003238
   32214:	20003268 	.word	0x20003268

00032218 <z_set_prio>:
{
   32218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3221a:	4604      	mov	r4, r0
   3221c:	f04f 0320 	mov.w	r3, #32
   32220:	f3ef 8611 	mrs	r6, BASEPRI
   32224:	f383 8812 	msr	BASEPRI_MAX, r3
   32228:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   3222c:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   3222e:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   32230:	b249      	sxtb	r1, r1
   32232:	d119      	bne.n	32268 <z_set_prio+0x50>
	return node->next != NULL;
   32234:	6985      	ldr	r5, [r0, #24]
   32236:	b9bd      	cbnz	r5, 32268 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   32238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   3223c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   3223e:	f006 fc59 	bl	38af4 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   32242:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   32244:	4a16      	ldr	r2, [pc, #88]	; (322a0 <z_set_prio+0x88>)
				thread->base.prio = prio;
   32246:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   32248:	f063 037f 	orn	r3, r3, #127	; 0x7f
   3224c:	7343      	strb	r3, [r0, #13]
   3224e:	4613      	mov	r3, r2
   32250:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   32254:	4298      	cmp	r0, r3
   32256:	bf18      	it	ne
   32258:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   3225a:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3225c:	b95d      	cbnz	r5, 32276 <z_set_prio+0x5e>
	node->prev = tail;
   3225e:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   32262:	6004      	str	r4, [r0, #0]
	list->tail = node;
   32264:	6254      	str	r4, [r2, #36]	; 0x24
}
   32266:	e011      	b.n	3228c <z_set_prio+0x74>
			thread->base.prio = prio;
   32268:	73a1      	strb	r1, [r4, #14]
   3226a:	2000      	movs	r0, #0
	__asm__ volatile(
   3226c:	f386 8811 	msr	BASEPRI, r6
   32270:	f3bf 8f6f 	isb	sy
}
   32274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   32276:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   3227a:	42b9      	cmp	r1, r7
   3227c:	d00b      	beq.n	32296 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   3227e:	428f      	cmp	r7, r1
   32280:	dd09      	ble.n	32296 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   32282:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   32284:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   32288:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   3228a:	606c      	str	r4, [r5, #4]
			update_cache(1);
   3228c:	2001      	movs	r0, #1
   3228e:	f7ff fe75 	bl	31f7c <update_cache>
   32292:	2001      	movs	r0, #1
   32294:	e7ea      	b.n	3226c <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   32296:	42a8      	cmp	r0, r5
   32298:	d0e1      	beq.n	3225e <z_set_prio+0x46>
   3229a:	682d      	ldr	r5, [r5, #0]
   3229c:	e7de      	b.n	3225c <z_set_prio+0x44>
   3229e:	bf00      	nop
   322a0:	20003238 	.word	0x20003238

000322a4 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   322a4:	b949      	cbnz	r1, 322ba <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   322a6:	f3ef 8005 	mrs	r0, IPSR
   322aa:	b930      	cbnz	r0, 322ba <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   322ac:	4b05      	ldr	r3, [pc, #20]	; (322c4 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   322ae:	69da      	ldr	r2, [r3, #28]
   322b0:	689b      	ldr	r3, [r3, #8]
   322b2:	429a      	cmp	r2, r3
   322b4:	d001      	beq.n	322ba <z_reschedule+0x16>
   322b6:	f7e2 bb99 	b.w	149ec <arch_swap>
   322ba:	f381 8811 	msr	BASEPRI, r1
   322be:	f3bf 8f6f 	isb	sy
}
   322c2:	4770      	bx	lr
   322c4:	20003238 	.word	0x20003238

000322c8 <z_sched_start>:
{
   322c8:	b510      	push	{r4, lr}
	__asm__ volatile(
   322ca:	f04f 0220 	mov.w	r2, #32
   322ce:	f3ef 8411 	mrs	r4, BASEPRI
   322d2:	f382 8812 	msr	BASEPRI_MAX, r2
   322d6:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   322da:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   322dc:	0751      	lsls	r1, r2, #29
   322de:	d404      	bmi.n	322ea <z_sched_start+0x22>
	__asm__ volatile(
   322e0:	f384 8811 	msr	BASEPRI, r4
   322e4:	f3bf 8f6f 	isb	sy
}
   322e8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   322ea:	f022 0204 	bic.w	r2, r2, #4
   322ee:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   322f0:	f7ff fe9c 	bl	3202c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   322f4:	4621      	mov	r1, r4
   322f6:	4802      	ldr	r0, [pc, #8]	; (32300 <z_sched_start+0x38>)
}
   322f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   322fc:	f7ff bfd2 	b.w	322a4 <z_reschedule>
   32300:	20003423 	.word	0x20003423

00032304 <z_impl_k_thread_suspend>:
{
   32304:	b570      	push	{r4, r5, r6, lr}
   32306:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   32308:	3018      	adds	r0, #24
   3230a:	f006 fd08 	bl	38d1e <z_abort_timeout>
	__asm__ volatile(
   3230e:	f04f 0320 	mov.w	r3, #32
   32312:	f3ef 8611 	mrs	r6, BASEPRI
   32316:	f383 8812 	msr	BASEPRI_MAX, r3
   3231a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   3231e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   32322:	7b63      	ldrb	r3, [r4, #13]
   32324:	2a00      	cmp	r2, #0
   32326:	da05      	bge.n	32334 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   32328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   3232c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   3232e:	4620      	mov	r0, r4
   32330:	f006 fbe0 	bl	38af4 <sys_dlist_remove>
		update_cache(thread == _current);
   32334:	4d0b      	ldr	r5, [pc, #44]	; (32364 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   32336:	7b63      	ldrb	r3, [r4, #13]
   32338:	68a8      	ldr	r0, [r5, #8]
   3233a:	f043 0310 	orr.w	r3, r3, #16
   3233e:	7363      	strb	r3, [r4, #13]
   32340:	1b03      	subs	r3, r0, r4
   32342:	4258      	negs	r0, r3
   32344:	4158      	adcs	r0, r3
   32346:	f7ff fe19 	bl	31f7c <update_cache>
	__asm__ volatile(
   3234a:	f386 8811 	msr	BASEPRI, r6
   3234e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   32352:	68ab      	ldr	r3, [r5, #8]
   32354:	42a3      	cmp	r3, r4
   32356:	d103      	bne.n	32360 <z_impl_k_thread_suspend+0x5c>
}
   32358:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   3235c:	f006 bca2 	b.w	38ca4 <z_reschedule_unlocked>
}
   32360:	bd70      	pop	{r4, r5, r6, pc}
   32362:	bf00      	nop
   32364:	20003238 	.word	0x20003238

00032368 <k_sched_lock>:
	__asm__ volatile(
   32368:	f04f 0320 	mov.w	r3, #32
   3236c:	f3ef 8111 	mrs	r1, BASEPRI
   32370:	f383 8812 	msr	BASEPRI_MAX, r3
   32374:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   32378:	4b04      	ldr	r3, [pc, #16]	; (3238c <k_sched_lock+0x24>)
   3237a:	689a      	ldr	r2, [r3, #8]
   3237c:	7bd3      	ldrb	r3, [r2, #15]
   3237e:	3b01      	subs	r3, #1
   32380:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   32382:	f381 8811 	msr	BASEPRI, r1
   32386:	f3bf 8f6f 	isb	sy
}
   3238a:	4770      	bx	lr
   3238c:	20003238 	.word	0x20003238

00032390 <k_sched_unlock>:
{
   32390:	b510      	push	{r4, lr}
	__asm__ volatile(
   32392:	f04f 0320 	mov.w	r3, #32
   32396:	f3ef 8411 	mrs	r4, BASEPRI
   3239a:	f383 8812 	msr	BASEPRI_MAX, r3
   3239e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   323a2:	4b08      	ldr	r3, [pc, #32]	; (323c4 <k_sched_unlock+0x34>)
   323a4:	689a      	ldr	r2, [r3, #8]
   323a6:	7bd3      	ldrb	r3, [r2, #15]
   323a8:	3301      	adds	r3, #1
   323aa:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   323ac:	2000      	movs	r0, #0
   323ae:	f7ff fde5 	bl	31f7c <update_cache>
	__asm__ volatile(
   323b2:	f384 8811 	msr	BASEPRI, r4
   323b6:	f3bf 8f6f 	isb	sy
}
   323ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   323be:	f006 bc71 	b.w	38ca4 <z_reschedule_unlocked>
   323c2:	bf00      	nop
   323c4:	20003238 	.word	0x20003238

000323c8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   323c8:	4b04      	ldr	r3, [pc, #16]	; (323dc <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   323ca:	2100      	movs	r1, #0
   323cc:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   323d0:	e9c3 2208 	strd	r2, r2, [r3, #32]
   323d4:	4608      	mov	r0, r1
   323d6:	f7ff be8d 	b.w	320f4 <k_sched_time_slice_set>
   323da:	bf00      	nop
   323dc:	20003238 	.word	0x20003238

000323e0 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   323e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   323e2:	f04f 0320 	mov.w	r3, #32
   323e6:	f3ef 8511 	mrs	r5, BASEPRI
   323ea:	f383 8812 	msr	BASEPRI_MAX, r3
   323ee:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   323f2:	4919      	ldr	r1, [pc, #100]	; (32458 <z_impl_k_yield+0x78>)
   323f4:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   323f6:	7b43      	ldrb	r3, [r0, #13]
   323f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   323fc:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   323fe:	f006 fb79 	bl	38af4 <sys_dlist_remove>
	}
	queue_thread(_current);
   32402:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   32404:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   32406:	4608      	mov	r0, r1
   32408:	f062 027f 	orn	r2, r2, #127	; 0x7f
   3240c:	735a      	strb	r2, [r3, #13]
   3240e:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
   32412:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   32414:	4282      	cmp	r2, r0
   32416:	bf08      	it	eq
   32418:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3241a:	b922      	cbnz	r2, 32426 <z_impl_k_yield+0x46>
	node->prev = tail;
   3241c:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   32420:	6023      	str	r3, [r4, #0]
	list->tail = node;
   32422:	624b      	str	r3, [r1, #36]	; 0x24
}
   32424:	e00c      	b.n	32440 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   32426:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   3242a:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   3242e:	42be      	cmp	r6, r7
   32430:	d00e      	beq.n	32450 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   32432:	42b7      	cmp	r7, r6
   32434:	dd0c      	ble.n	32450 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   32436:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   32438:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   3243c:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   3243e:	6053      	str	r3, [r2, #4]
	update_cache(1);
   32440:	2001      	movs	r0, #1
   32442:	f7ff fd9b 	bl	31f7c <update_cache>
   32446:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   32448:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   3244c:	f7e2 bace 	b.w	149ec <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   32450:	42a2      	cmp	r2, r4
   32452:	d0e3      	beq.n	3241c <z_impl_k_yield+0x3c>
   32454:	6812      	ldr	r2, [r2, #0]
   32456:	e7e0      	b.n	3241a <z_impl_k_yield+0x3a>
   32458:	20003238 	.word	0x20003238

0003245c <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   3245c:	ea50 0301 	orrs.w	r3, r0, r1
{
   32460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32464:	4605      	mov	r5, r0
   32466:	460e      	mov	r6, r1
	if (ticks == 0) {
   32468:	d103      	bne.n	32472 <z_tick_sleep+0x16>
	z_impl_k_yield();
   3246a:	f7ff ffb9 	bl	323e0 <z_impl_k_yield>
		k_yield();
		return 0;
   3246e:	2000      	movs	r0, #0
   32470:	e02c      	b.n	324cc <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   32472:	1c83      	adds	r3, r0, #2
   32474:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   32478:	db2a      	blt.n	324d0 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   3247a:	f006 fc92 	bl	38da2 <sys_clock_tick_get_32>
   3247e:	182c      	adds	r4, r5, r0
   32480:	f04f 0320 	mov.w	r3, #32
   32484:	f3ef 8811 	mrs	r8, BASEPRI
   32488:	f383 8812 	msr	BASEPRI_MAX, r3
   3248c:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   32490:	4f11      	ldr	r7, [pc, #68]	; (324d8 <z_tick_sleep+0x7c>)
   32492:	4b12      	ldr	r3, [pc, #72]	; (324dc <z_tick_sleep+0x80>)
   32494:	68b8      	ldr	r0, [r7, #8]
   32496:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   32498:	f7ff fdfc 	bl	32094 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   3249c:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   3249e:	4910      	ldr	r1, [pc, #64]	; (324e0 <z_tick_sleep+0x84>)
   324a0:	462a      	mov	r2, r5
   324a2:	4633      	mov	r3, r6
   324a4:	3018      	adds	r0, #24
   324a6:	f000 f917 	bl	326d8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   324aa:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   324ac:	7b53      	ldrb	r3, [r2, #13]
   324ae:	f043 0310 	orr.w	r3, r3, #16
   324b2:	7353      	strb	r3, [r2, #13]
   324b4:	4640      	mov	r0, r8
   324b6:	f7e2 fa99 	bl	149ec <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   324ba:	f006 fc72 	bl	38da2 <sys_clock_tick_get_32>
   324be:	1a20      	subs	r0, r4, r0
   324c0:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   324c4:	2801      	cmp	r0, #1
   324c6:	f173 0300 	sbcs.w	r3, r3, #0
   324ca:	dbd0      	blt.n	3246e <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   324cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   324d0:	f06f 0401 	mvn.w	r4, #1
   324d4:	1a24      	subs	r4, r4, r0
   324d6:	e7d3      	b.n	32480 <z_tick_sleep+0x24>
   324d8:	20003238 	.word	0x20003238
   324dc:	20003268 	.word	0x20003268
   324e0:	00038b2b 	.word	0x00038b2b

000324e4 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   324e4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   324e8:	bf08      	it	eq
   324ea:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   324ee:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   324f0:	d106      	bne.n	32500 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   324f2:	4b08      	ldr	r3, [pc, #32]	; (32514 <z_impl_k_sleep+0x30>)
   324f4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   324f6:	f7ff ff05 	bl	32304 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   324fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   324fe:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   32500:	f7ff ffac 	bl	3245c <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   32504:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   32508:	fb80 0303 	smull	r0, r3, r0, r3
   3250c:	0bc0      	lsrs	r0, r0, #15
   3250e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   32512:	e7f4      	b.n	324fe <z_impl_k_sleep+0x1a>
   32514:	20003238 	.word	0x20003238

00032518 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   32518:	4b01      	ldr	r3, [pc, #4]	; (32520 <z_impl_z_current_get+0x8>)
   3251a:	6898      	ldr	r0, [r3, #8]
   3251c:	4770      	bx	lr
   3251e:	bf00      	nop
   32520:	20003238 	.word	0x20003238

00032524 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   32524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32528:	4604      	mov	r4, r0
   3252a:	f04f 0320 	mov.w	r3, #32
   3252e:	f3ef 8611 	mrs	r6, BASEPRI
   32532:	f383 8812 	msr	BASEPRI_MAX, r3
   32536:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   3253a:	7b03      	ldrb	r3, [r0, #12]
   3253c:	07d9      	lsls	r1, r3, #31
   3253e:	d50b      	bpl.n	32558 <z_thread_abort+0x34>
	__asm__ volatile(
   32540:	f386 8811 	msr	BASEPRI, r6
   32544:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   32548:	4040      	eors	r0, r0
   3254a:	f380 8811 	msr	BASEPRI, r0
   3254e:	f04f 0004 	mov.w	r0, #4
   32552:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   32554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   32558:	7b43      	ldrb	r3, [r0, #13]
   3255a:	071a      	lsls	r2, r3, #28
   3255c:	d504      	bpl.n	32568 <z_thread_abort+0x44>
   3255e:	f386 8811 	msr	BASEPRI, r6
   32562:	f3bf 8f6f 	isb	sy
   32566:	e7f5      	b.n	32554 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   32568:	f023 0220 	bic.w	r2, r3, #32
   3256c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   32570:	09d2      	lsrs	r2, r2, #7
   32572:	d120      	bne.n	325b6 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   32574:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   32576:	68a3      	ldr	r3, [r4, #8]
   32578:	b113      	cbz	r3, 32580 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   3257a:	4620      	mov	r0, r4
   3257c:	f006 fac2 	bl	38b04 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   32580:	f104 0018 	add.w	r0, r4, #24
   32584:	f006 fbcb 	bl	38d1e <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   32588:	f104 0758 	add.w	r7, r4, #88	; 0x58
   3258c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   32590:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   32592:	42bd      	cmp	r5, r7
   32594:	d000      	beq.n	32598 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   32596:	b9b5      	cbnz	r5, 325c6 <z_thread_abort+0xa2>
		update_cache(1);
   32598:	2001      	movs	r0, #1
   3259a:	f7ff fcef 	bl	31f7c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   3259e:	4b10      	ldr	r3, [pc, #64]	; (325e0 <z_thread_abort+0xbc>)
   325a0:	689b      	ldr	r3, [r3, #8]
   325a2:	42a3      	cmp	r3, r4
   325a4:	d1db      	bne.n	3255e <z_thread_abort+0x3a>
   325a6:	f3ef 8305 	mrs	r3, IPSR
   325aa:	2b00      	cmp	r3, #0
   325ac:	d1d7      	bne.n	3255e <z_thread_abort+0x3a>
   325ae:	4630      	mov	r0, r6
   325b0:	f7e2 fa1c 	bl	149ec <arch_swap>
	return ret;
   325b4:	e7d3      	b.n	3255e <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   325b6:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   325ba:	f043 0308 	orr.w	r3, r3, #8
   325be:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   325c0:	f006 fa98 	bl	38af4 <sys_dlist_remove>
}
   325c4:	e7d7      	b.n	32576 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   325c6:	4628      	mov	r0, r5
   325c8:	f006 fa9c 	bl	38b04 <unpend_thread_no_timeout>
   325cc:	f105 0018 	add.w	r0, r5, #24
   325d0:	f006 fba5 	bl	38d1e <z_abort_timeout>
   325d4:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   325d8:	4628      	mov	r0, r5
   325da:	f7ff fd27 	bl	3202c <ready_thread>
   325de:	e7d7      	b.n	32590 <z_thread_abort+0x6c>
   325e0:	20003238 	.word	0x20003238

000325e4 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   325e4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   325e6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   325ea:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   325ec:	e9cd 6700 	strd	r6, r7, [sp]
   325f0:	f7ff fdf4 	bl	321dc <z_pend_curr>

	if (data != NULL) {
   325f4:	b11c      	cbz	r4, 325fe <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   325f6:	4b03      	ldr	r3, [pc, #12]	; (32604 <z_sched_wait+0x20>)
   325f8:	689b      	ldr	r3, [r3, #8]
   325fa:	695b      	ldr	r3, [r3, #20]
   325fc:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   325fe:	b002      	add	sp, #8
   32600:	bdd0      	pop	{r4, r6, r7, pc}
   32602:	bf00      	nop
   32604:	20003238 	.word	0x20003238

00032608 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   32608:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   3260a:	4806      	ldr	r0, [pc, #24]	; (32624 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   3260c:	4a06      	ldr	r2, [pc, #24]	; (32628 <z_data_copy+0x20>)
   3260e:	4907      	ldr	r1, [pc, #28]	; (3262c <z_data_copy+0x24>)
   32610:	1a12      	subs	r2, r2, r0
   32612:	f005 ffc9 	bl	385a8 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   32616:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   3261a:	4a05      	ldr	r2, [pc, #20]	; (32630 <z_data_copy+0x28>)
   3261c:	4905      	ldr	r1, [pc, #20]	; (32634 <z_data_copy+0x2c>)
   3261e:	4806      	ldr	r0, [pc, #24]	; (32638 <z_data_copy+0x30>)
   32620:	f005 bfc2 	b.w	385a8 <z_early_memcpy>
   32624:	20000000 	.word	0x20000000
   32628:	20000c5c 	.word	0x20000c5c
   3262c:	0003f1a0 	.word	0x0003f1a0
   32630:	00000000 	.word	0x00000000
   32634:	0003f1a0 	.word	0x0003f1a0
   32638:	20000000 	.word	0x20000000

0003263c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   3263c:	4b03      	ldr	r3, [pc, #12]	; (3264c <elapsed+0x10>)
   3263e:	681b      	ldr	r3, [r3, #0]
   32640:	b90b      	cbnz	r3, 32646 <elapsed+0xa>
   32642:	f7fd bb33 	b.w	2fcac <sys_clock_elapsed>
}
   32646:	2000      	movs	r0, #0
   32648:	4770      	bx	lr
   3264a:	bf00      	nop
   3264c:	20003274 	.word	0x20003274

00032650 <next_timeout>:

static int32_t next_timeout(void)
{
   32650:	b510      	push	{r4, lr}
	return list->head == list;
   32652:	4b11      	ldr	r3, [pc, #68]	; (32698 <next_timeout+0x48>)
   32654:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   32656:	429c      	cmp	r4, r3
   32658:	d10a      	bne.n	32670 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   3265a:	f7ff ffef 	bl	3263c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   3265e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   32662:	4b0e      	ldr	r3, [pc, #56]	; (3269c <next_timeout+0x4c>)
   32664:	691b      	ldr	r3, [r3, #16]
   32666:	b113      	cbz	r3, 3266e <next_timeout+0x1e>
   32668:	4298      	cmp	r0, r3
   3266a:	bfa8      	it	ge
   3266c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   3266e:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   32670:	f7ff ffe4 	bl	3263c <elapsed>
	if ((to == NULL) ||
   32674:	2c00      	cmp	r4, #0
   32676:	d0f2      	beq.n	3265e <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   32678:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   3267c:	1a1b      	subs	r3, r3, r0
   3267e:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   32682:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   32686:	f172 0100 	sbcs.w	r1, r2, #0
   3268a:	dae8      	bge.n	3265e <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   3268c:	2a00      	cmp	r2, #0
   3268e:	bfac      	ite	ge
   32690:	4618      	movge	r0, r3
   32692:	2000      	movlt	r0, #0
   32694:	e7e5      	b.n	32662 <next_timeout+0x12>
   32696:	bf00      	nop
   32698:	20000938 	.word	0x20000938
   3269c:	20003238 	.word	0x20003238

000326a0 <remove_timeout>:
{
   326a0:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   326a2:	b170      	cbz	r0, 326c2 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   326a4:	4b0b      	ldr	r3, [pc, #44]	; (326d4 <remove_timeout+0x34>)
   326a6:	685b      	ldr	r3, [r3, #4]
   326a8:	4298      	cmp	r0, r3
   326aa:	d00a      	beq.n	326c2 <remove_timeout+0x22>
   326ac:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   326ae:	b143      	cbz	r3, 326c2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   326b0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   326b4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   326b8:	1912      	adds	r2, r2, r4
   326ba:	eb41 0105 	adc.w	r1, r1, r5
   326be:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   326c2:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   326c6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   326c8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   326ca:	2300      	movs	r3, #0
	node->prev = NULL;
   326cc:	e9c0 3300 	strd	r3, r3, [r0]
}
   326d0:	bd30      	pop	{r4, r5, pc}
   326d2:	bf00      	nop
   326d4:	20000938 	.word	0x20000938

000326d8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   326d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   326dc:	bf08      	it	eq
   326de:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   326e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   326e4:	4604      	mov	r4, r0
   326e6:	461d      	mov	r5, r3
   326e8:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   326ea:	d061      	beq.n	327b0 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   326ec:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   326ee:	f04f 0320 	mov.w	r3, #32
   326f2:	f3ef 8711 	mrs	r7, BASEPRI
   326f6:	f383 8812 	msr	BASEPRI_MAX, r3
   326fa:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   326fe:	3201      	adds	r2, #1
   32700:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
   32704:	da24      	bge.n	32750 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   32706:	4930      	ldr	r1, [pc, #192]	; (327c8 <z_add_timeout+0xf0>)
   32708:	e9d1 2000 	ldrd	r2, r0, [r1]
   3270c:	f06f 0301 	mvn.w	r3, #1
   32710:	1a9b      	subs	r3, r3, r2
   32712:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   32716:	eb62 0000 	sbc.w	r0, r2, r0
   3271a:	1b9e      	subs	r6, r3, r6
   3271c:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   32720:	2e01      	cmp	r6, #1
   32722:	f170 0300 	sbcs.w	r3, r0, #0
   32726:	da01      	bge.n	3272c <z_add_timeout+0x54>
   32728:	2601      	movs	r6, #1
   3272a:	2000      	movs	r0, #0
   3272c:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   32730:	4e26      	ldr	r6, [pc, #152]	; (327cc <z_add_timeout+0xf4>)
   32732:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   32736:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   32738:	45b4      	cmp	ip, r6
   3273a:	bf08      	it	eq
   3273c:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   32740:	f1bc 0f00 	cmp.w	ip, #0
   32744:	d10d      	bne.n	32762 <z_add_timeout+0x8a>
	node->prev = tail;
   32746:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   3274a:	602c      	str	r4, [r5, #0]
	list->tail = node;
   3274c:	6074      	str	r4, [r6, #4]
}
   3274e:	e01c      	b.n	3278a <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   32750:	f7ff ff74 	bl	3263c <elapsed>
   32754:	3601      	adds	r6, #1
   32756:	f145 0500 	adc.w	r5, r5, #0
   3275a:	1836      	adds	r6, r6, r0
   3275c:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   32760:	e7e4      	b.n	3272c <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   32762:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   32766:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   3276a:	4293      	cmp	r3, r2
   3276c:	eb71 0e00 	sbcs.w	lr, r1, r0
   32770:	da1f      	bge.n	327b2 <z_add_timeout+0xda>
				t->dticks -= to->dticks;
   32772:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   32774:	f8dc 3004 	ldr.w	r3, [ip, #4]
   32778:	eb60 0001 	sbc.w	r0, r0, r1
   3277c:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   32780:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   32784:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   32786:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   3278a:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3278c:	42b3      	cmp	r3, r6
   3278e:	d00b      	beq.n	327a8 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   32790:	429c      	cmp	r4, r3
   32792:	d109      	bne.n	327a8 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   32794:	f7ff ff5c 	bl	32650 <next_timeout>

			if (next_time == 0 ||
   32798:	b118      	cbz	r0, 327a2 <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
   3279a:	4b0d      	ldr	r3, [pc, #52]	; (327d0 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
   3279c:	691b      	ldr	r3, [r3, #16]
   3279e:	4283      	cmp	r3, r0
   327a0:	d002      	beq.n	327a8 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
   327a2:	2100      	movs	r1, #0
   327a4:	f7fd fa50 	bl	2fc48 <sys_clock_set_timeout>
	__asm__ volatile(
   327a8:	f387 8811 	msr	BASEPRI, r7
   327ac:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   327b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   327b2:	1a9b      	subs	r3, r3, r2
   327b4:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   327b8:	45ac      	cmp	ip, r5
   327ba:	e9c4 3104 	strd	r3, r1, [r4, #16]
   327be:	d0c2      	beq.n	32746 <z_add_timeout+0x6e>
   327c0:	f8dc c000 	ldr.w	ip, [ip]
   327c4:	e7bc      	b.n	32740 <z_add_timeout+0x68>
   327c6:	bf00      	nop
   327c8:	20001a50 	.word	0x20001a50
   327cc:	20000938 	.word	0x20000938
   327d0:	20003238 	.word	0x20003238

000327d4 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   327d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   327d8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   327da:	f7ff fcbd 	bl	32158 <z_time_slice>
	__asm__ volatile(
   327de:	f04f 0320 	mov.w	r3, #32
   327e2:	f3ef 8611 	mrs	r6, BASEPRI
   327e6:	f383 8812 	msr	BASEPRI_MAX, r3
   327ea:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   327ee:	4f23      	ldr	r7, [pc, #140]	; (3287c <sys_clock_announce+0xa8>)
	return list->head == list;
   327f0:	f8df 808c 	ldr.w	r8, [pc, #140]	; 32880 <sys_clock_announce+0xac>
   327f4:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   327f8:	4a22      	ldr	r2, [pc, #136]	; (32884 <sys_clock_announce+0xb0>)
	announce_remaining = ticks;
   327fa:	603c      	str	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   327fc:	4540      	cmp	r0, r8
		curr_tick += dt;
   327fe:	e9d2 3e00 	ldrd	r3, lr, [r2]
   32802:	ea4f 71e4 	mov.w	r1, r4, asr #31
   32806:	d00b      	beq.n	32820 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   32808:	b150      	cbz	r0, 32820 <sys_clock_announce+0x4c>
   3280a:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
   3280e:	42ac      	cmp	r4, r5
   32810:	eb71 090c 	sbcs.w	r9, r1, ip
   32814:	da16      	bge.n	32844 <sys_clock_announce+0x70>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   32816:	1b2d      	subs	r5, r5, r4
   32818:	eb6c 0c01 	sbc.w	ip, ip, r1
   3281c:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   32820:	18e3      	adds	r3, r4, r3
   32822:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
   32826:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   32828:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   3282c:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   3282e:	f7ff ff0f 	bl	32650 <next_timeout>
   32832:	4621      	mov	r1, r4
   32834:	f7fd fa08 	bl	2fc48 <sys_clock_set_timeout>
	__asm__ volatile(
   32838:	f386 8811 	msr	BASEPRI, r6
   3283c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   32840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   32844:	18eb      	adds	r3, r5, r3
   32846:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
   3284a:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   3284e:	2200      	movs	r2, #0
   32850:	2300      	movs	r3, #0
   32852:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
   32856:	f7ff ff23 	bl	326a0 <remove_timeout>
   3285a:	f386 8811 	msr	BASEPRI, r6
   3285e:	f3bf 8f6f 	isb	sy
		t->fn(t);
   32862:	6883      	ldr	r3, [r0, #8]
   32864:	4798      	blx	r3
	__asm__ volatile(
   32866:	f04f 0320 	mov.w	r3, #32
   3286a:	f3ef 8611 	mrs	r6, BASEPRI
   3286e:	f383 8812 	msr	BASEPRI_MAX, r3
   32872:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   32876:	683c      	ldr	r4, [r7, #0]
   32878:	1b64      	subs	r4, r4, r5
   3287a:	e7bb      	b.n	327f4 <sys_clock_announce+0x20>
   3287c:	20003274 	.word	0x20003274
   32880:	20000938 	.word	0x20000938
   32884:	20001a50 	.word	0x20001a50

00032888 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   32888:	b510      	push	{r4, lr}
   3288a:	f04f 0320 	mov.w	r3, #32
   3288e:	f3ef 8411 	mrs	r4, BASEPRI
   32892:	f383 8812 	msr	BASEPRI_MAX, r3
   32896:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   3289a:	f7ff fecf 	bl	3263c <elapsed>
   3289e:	4a06      	ldr	r2, [pc, #24]	; (328b8 <sys_clock_tick_get+0x30>)
   328a0:	4603      	mov	r3, r0
   328a2:	e9d2 0100 	ldrd	r0, r1, [r2]
   328a6:	1818      	adds	r0, r3, r0
   328a8:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   328ac:	f384 8811 	msr	BASEPRI, r4
   328b0:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   328b4:	bd10      	pop	{r4, pc}
   328b6:	bf00      	nop
   328b8:	20001a50 	.word	0x20001a50

000328bc <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   328bc:	b570      	push	{r4, r5, r6, lr}
   328be:	4604      	mov	r4, r0
	__asm__ volatile(
   328c0:	f04f 0320 	mov.w	r3, #32
   328c4:	f3ef 8511 	mrs	r5, BASEPRI
   328c8:	f383 8812 	msr	BASEPRI_MAX, r3
   328cc:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   328d0:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   328d4:	3301      	adds	r3, #1
   328d6:	f142 0200 	adc.w	r2, r2, #0
   328da:	2b02      	cmp	r3, #2
   328dc:	f172 0200 	sbcs.w	r2, r2, #0
   328e0:	d322      	bcc.n	32928 <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
   328e2:	f006 fa62 	bl	38daa <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   328e6:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   328ea:	3001      	adds	r0, #1
   328ec:	f141 0100 	adc.w	r1, r1, #0
   328f0:	18c0      	adds	r0, r0, r3
   328f2:	eb41 0102 	adc.w	r1, r1, r2
   328f6:	2801      	cmp	r0, #1
   328f8:	f171 0100 	sbcs.w	r1, r1, #0
   328fc:	db32      	blt.n	32964 <z_timer_expiration_handler+0xa8>
   328fe:	f006 fa54 	bl	38daa <z_impl_k_uptime_ticks>
   32902:	3001      	adds	r0, #1
   32904:	f141 0300 	adc.w	r3, r1, #0
   32908:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   3290c:	1880      	adds	r0, r0, r2
   3290e:	f06f 0201 	mvn.w	r2, #1
   32912:	eb43 0301 	adc.w	r3, r3, r1
   32916:	1a12      	subs	r2, r2, r0
   32918:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   3291c:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   32920:	491a      	ldr	r1, [pc, #104]	; (3298c <z_timer_expiration_handler+0xd0>)
   32922:	4620      	mov	r0, r4
   32924:	f7ff fed8 	bl	326d8 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   32928:	6b23      	ldr	r3, [r4, #48]	; 0x30
   3292a:	3301      	adds	r3, #1
   3292c:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   3292e:	6a23      	ldr	r3, [r4, #32]
   32930:	b173      	cbz	r3, 32950 <z_timer_expiration_handler+0x94>
	__asm__ volatile(
   32932:	f385 8811 	msr	BASEPRI, r5
   32936:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   3293a:	6a23      	ldr	r3, [r4, #32]
   3293c:	4620      	mov	r0, r4
   3293e:	4798      	blx	r3
	__asm__ volatile(
   32940:	f04f 0320 	mov.w	r3, #32
   32944:	f3ef 8511 	mrs	r5, BASEPRI
   32948:	f383 8812 	msr	BASEPRI_MAX, r3
   3294c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   32950:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   32954:	42a6      	cmp	r6, r4
   32956:	d000      	beq.n	3295a <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   32958:	b94e      	cbnz	r6, 3296e <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
   3295a:	f385 8811 	msr	BASEPRI, r5
   3295e:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   32962:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   32964:	f06f 0201 	mvn.w	r2, #1
   32968:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3296c:	e7d8      	b.n	32920 <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
   3296e:	4630      	mov	r0, r6
   32970:	f006 f935 	bl	38bde <z_unpend_thread_no_timeout>
   32974:	2300      	movs	r3, #0
   32976:	67f3      	str	r3, [r6, #124]	; 0x7c
   32978:	f385 8811 	msr	BASEPRI, r5
   3297c:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   32980:	4630      	mov	r0, r6
}
   32982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   32986:	f006 b91a 	b.w	38bbe <z_ready_thread>
   3298a:	bf00      	nop
   3298c:	000328bd 	.word	0x000328bd

00032990 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   32990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   32994:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   32998:	bf08      	it	eq
   3299a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   3299e:	4605      	mov	r5, r0
   329a0:	4614      	mov	r4, r2
   329a2:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   329a6:	4619      	mov	r1, r3
   329a8:	4691      	mov	r9, r2
   329aa:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   329ac:	d037      	beq.n	32a1e <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   329ae:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   329b2:	bf08      	it	eq
   329b4:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   329b8:	4637      	mov	r7, r6
   329ba:	4682      	mov	sl, r0
   329bc:	d011      	beq.n	329e2 <z_impl_k_timer_start+0x52>
   329be:	ea50 0306 	orrs.w	r3, r0, r6
   329c2:	d00e      	beq.n	329e2 <z_impl_k_timer_start+0x52>
   329c4:	1c72      	adds	r2, r6, #1
   329c6:	f170 33ff 	sbcs.w	r3, r0, #4294967295	; 0xffffffff
   329ca:	db0a      	blt.n	329e2 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   329cc:	2e02      	cmp	r6, #2
   329ce:	4684      	mov	ip, r0
   329d0:	f170 0000 	sbcs.w	r0, r0, #0
   329d4:	bfbc      	itt	lt
   329d6:	2702      	movlt	r7, #2
   329d8:	f04f 0c00 	movlt.w	ip, #0
   329dc:	3f01      	subs	r7, #1
   329de:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   329e2:	1c63      	adds	r3, r4, #1
   329e4:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   329e8:	db0a      	blt.n	32a00 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   329ea:	2c01      	cmp	r4, #1
   329ec:	f171 0300 	sbcs.w	r3, r1, #0
   329f0:	4622      	mov	r2, r4
   329f2:	bfbc      	itt	lt
   329f4:	2201      	movlt	r2, #1
   329f6:	2100      	movlt	r1, #0
   329f8:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
   329fc:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
   32a00:	4628      	mov	r0, r5
   32a02:	f006 f98c 	bl	38d1e <z_abort_timeout>
	timer->period = period;
   32a06:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   32a0a:	2300      	movs	r3, #0
   32a0c:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   32a0e:	464a      	mov	r2, r9
   32a10:	4643      	mov	r3, r8
   32a12:	4628      	mov	r0, r5
   32a14:	4903      	ldr	r1, [pc, #12]	; (32a24 <z_impl_k_timer_start+0x94>)
		     duration);
}
   32a16:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   32a1a:	f7ff be5d 	b.w	326d8 <z_add_timeout>
}
   32a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   32a22:	bf00      	nop
   32a24:	000328bd 	.word	0x000328bd

00032a28 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   32a28:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   32a2c:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   32a2e:	4b29      	ldr	r3, [pc, #164]	; (32ad4 <z_impl_k_poll+0xac>)
   32a30:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   32a32:	2301      	movs	r3, #1
   32a34:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   32a38:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   32a3c:	ea52 0305 	orrs.w	r3, r2, r5
{
   32a40:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   32a42:	bf0c      	ite	eq
   32a44:	2301      	moveq	r3, #1
   32a46:	2300      	movne	r3, #0
   32a48:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   32a4c:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   32a4e:	f006 fa2e 	bl	38eae <register_events>
   32a52:	4681      	mov	r9, r0
	__asm__ volatile(
   32a54:	f04f 0320 	mov.w	r3, #32
   32a58:	f3ef 8a11 	mrs	sl, BASEPRI
   32a5c:	f383 8812 	msr	BASEPRI_MAX, r3
   32a60:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   32a64:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   32a68:	b964      	cbnz	r4, 32a84 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   32a6a:	4601      	mov	r1, r0
   32a6c:	4652      	mov	r2, sl
   32a6e:	4640      	mov	r0, r8
   32a70:	f006 faee 	bl	39050 <clear_event_registrations>
	__asm__ volatile(
   32a74:	f38a 8811 	msr	BASEPRI, sl
   32a78:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   32a7c:	4620      	mov	r0, r4
   32a7e:	b002      	add	sp, #8
   32a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   32a84:	2300      	movs	r3, #0
   32a86:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   32a8a:	ea56 0305 	orrs.w	r3, r6, r5
   32a8e:	d106      	bne.n	32a9e <z_impl_k_poll+0x76>
   32a90:	f38a 8811 	msr	BASEPRI, sl
   32a94:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   32a98:	f06f 040a 	mvn.w	r4, #10
   32a9c:	e7ee      	b.n	32a7c <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   32a9e:	e9cd 6500 	strd	r6, r5, [sp]
   32aa2:	4a0d      	ldr	r2, [pc, #52]	; (32ad8 <z_impl_k_poll+0xb0>)
   32aa4:	480d      	ldr	r0, [pc, #52]	; (32adc <z_impl_k_poll+0xb4>)
   32aa6:	4651      	mov	r1, sl
   32aa8:	f7ff fb98 	bl	321dc <z_pend_curr>
   32aac:	4604      	mov	r4, r0
	__asm__ volatile(
   32aae:	f04f 0320 	mov.w	r3, #32
   32ab2:	f3ef 8511 	mrs	r5, BASEPRI
   32ab6:	f383 8812 	msr	BASEPRI_MAX, r3
   32aba:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   32abe:	462a      	mov	r2, r5
   32ac0:	4649      	mov	r1, r9
   32ac2:	4640      	mov	r0, r8
   32ac4:	f006 fac4 	bl	39050 <clear_event_registrations>
	__asm__ volatile(
   32ac8:	f385 8811 	msr	BASEPRI, r5
   32acc:	f3bf 8f6f 	isb	sy
	return swap_rc;
   32ad0:	e7d4      	b.n	32a7c <z_impl_k_poll+0x54>
   32ad2:	bf00      	nop
   32ad4:	20003238 	.word	0x20003238
   32ad8:	20000940 	.word	0x20000940
   32adc:	20003423 	.word	0x20003423

00032ae0 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   32ae0:	b538      	push	{r3, r4, r5, lr}
   32ae2:	4603      	mov	r3, r0
	__asm__ volatile(
   32ae4:	f04f 0220 	mov.w	r2, #32
   32ae8:	f3ef 8511 	mrs	r5, BASEPRI
   32aec:	f382 8812 	msr	BASEPRI_MAX, r2
   32af0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   32af4:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   32af6:	2101      	movs	r1, #1
   32af8:	6081      	str	r1, [r0, #8]
	return list->head == list;
   32afa:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   32afc:	4283      	cmp	r3, r0
   32afe:	d106      	bne.n	32b0e <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   32b00:	f385 8811 	msr	BASEPRI, r5
   32b04:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   32b08:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   32b0a:	4620      	mov	r0, r4
   32b0c:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   32b0e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   32b12:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   32b14:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   32b16:	2300      	movs	r3, #0
	node->prev = NULL;
   32b18:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   32b1c:	f006 fa3e 	bl	38f9c <signal_poll_event>
	z_reschedule(&lock, key);
   32b20:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   32b22:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   32b24:	4801      	ldr	r0, [pc, #4]	; (32b2c <z_impl_k_poll_signal_raise+0x4c>)
   32b26:	f7ff fbbd 	bl	322a4 <z_reschedule>
	return rc;
   32b2a:	e7ee      	b.n	32b0a <z_impl_k_poll_signal_raise+0x2a>
   32b2c:	20003423 	.word	0x20003423

00032b30 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   32b30:	b573      	push	{r0, r1, r4, r5, r6, lr}
   32b32:	4606      	mov	r6, r0
   32b34:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   32b36:	f005 fdea 	bl	3870e <k_is_in_isr>
   32b3a:	b978      	cbnz	r0, 32b5c <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   32b3c:	4b0b      	ldr	r3, [pc, #44]	; (32b6c <z_thread_aligned_alloc+0x3c>)
   32b3e:	689b      	ldr	r3, [r3, #8]
   32b40:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   32b42:	b17c      	cbz	r4, 32b64 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   32b44:	1d2a      	adds	r2, r5, #4
   32b46:	d209      	bcs.n	32b5c <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   32b48:	2000      	movs	r0, #0
   32b4a:	2100      	movs	r1, #0
   32b4c:	e9cd 0100 	strd	r0, r1, [sp]
   32b50:	f046 0104 	orr.w	r1, r6, #4
   32b54:	4620      	mov	r0, r4
   32b56:	f005 fd31 	bl	385bc <k_heap_aligned_alloc>
	if (mem == NULL) {
   32b5a:	b908      	cbnz	r0, 32b60 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   32b5c:	2400      	movs	r4, #0
	}

	return ret;
   32b5e:	e001      	b.n	32b64 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   32b60:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   32b62:	1d04      	adds	r4, r0, #4
}
   32b64:	4620      	mov	r0, r4
   32b66:	b002      	add	sp, #8
   32b68:	bd70      	pop	{r4, r5, r6, pc}
   32b6a:	bf00      	nop
   32b6c:	20003238 	.word	0x20003238

00032b70 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   32b70:	4801      	ldr	r0, [pc, #4]	; (32b78 <boot_banner+0x8>)
   32b72:	f000 b8fe 	b.w	32d72 <printk>
   32b76:	bf00      	nop
   32b78:	0003f15e 	.word	0x0003f15e

00032b7c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   32b7c:	4770      	bx	lr

00032b7e <cp_ccc_cfg_changed>:
}
   32b7e:	4770      	bx	lr

00032b80 <read_ct>:
{
   32b80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   32b82:	2402      	movs	r4, #2
   32b84:	9402      	str	r4, [sp, #8]
   32b86:	68cc      	ldr	r4, [r1, #12]
   32b88:	9401      	str	r4, [sp, #4]
   32b8a:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   32b8e:	9400      	str	r4, [sp, #0]
   32b90:	f004 f9af 	bl	36ef2 <bt_gatt_attr_read>
}
   32b94:	b004      	add	sp, #16
   32b96:	bd10      	pop	{r4, pc}

00032b98 <read_cp>:
static ssize_t read_cp(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   32b98:	b410      	push	{r4}
   32b9a:	f8bd 4004 	ldrh.w	r4, [sp, #4]
   32b9e:	9401      	str	r4, [sp, #4]
   32ba0:	bc10      	pop	{r4}
   32ba2:	f7ff bfed 	b.w	32b80 <read_ct>

00032ba6 <cbpprintf_external>:
{
   32ba6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   32baa:	4606      	mov	r6, r0
   32bac:	460d      	mov	r5, r1
   32bae:	4617      	mov	r7, r2
	if (buf == NULL) {
   32bb0:	4698      	mov	r8, r3
   32bb2:	b32b      	cbz	r3, 32c00 <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
   32bb4:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   32bb8:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   32bbc:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   32bbe:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   32bc0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   32bc4:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   32bc8:	441c      	add	r4, r3
   32bca:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   32bcc:	f04f 0a00 	mov.w	sl, #0
   32bd0:	45ca      	cmp	sl, r9
   32bd2:	d309      	bcc.n	32be8 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   32bd4:	f8d8 2004 	ldr.w	r2, [r8, #4]
   32bd8:	f108 0308 	add.w	r3, r8, #8
   32bdc:	4639      	mov	r1, r7
   32bde:	4630      	mov	r0, r6
   32be0:	46ac      	mov	ip, r5
}
   32be2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   32be6:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   32be8:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   32bec:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   32bf0:	4620      	mov	r0, r4
   32bf2:	f002 fc60 	bl	354b6 <strlen>
   32bf6:	3001      	adds	r0, #1
   32bf8:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   32bfa:	f10a 0a01 	add.w	sl, sl, #1
   32bfe:	e7e7      	b.n	32bd0 <cbpprintf_external+0x2a>
}
   32c00:	f06f 0015 	mvn.w	r0, #21
   32c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00032c08 <is_ptr>:
{
   32c08:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   32c0a:	2500      	movs	r5, #0
{
   32c0c:	4602      	mov	r2, r0
	bool mod = false;
   32c0e:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   32c10:	4614      	mov	r4, r2
   32c12:	f814 3b01 	ldrb.w	r3, [r4], #1
   32c16:	b90b      	cbnz	r3, 32c1c <is_ptr+0x14>
					return false;
   32c18:	4618      	mov	r0, r3
   32c1a:	e009      	b.n	32c30 <is_ptr+0x28>
		if (mod) {
   32c1c:	b198      	cbz	r0, 32c46 <is_ptr+0x3e>
			if (cnt == n) {
   32c1e:	428d      	cmp	r5, r1
   32c20:	d107      	bne.n	32c32 <is_ptr+0x2a>
				if (c == 'p') {
   32c22:	2b70      	cmp	r3, #112	; 0x70
   32c24:	d004      	beq.n	32c30 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   32c26:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   32c2a:	2a3a      	cmp	r2, #58	; 0x3a
   32c2c:	d80b      	bhi.n	32c46 <is_ptr+0x3e>
					return false;
   32c2e:	2000      	movs	r0, #0
}
   32c30:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   32c32:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   32c36:	2e3a      	cmp	r6, #58	; 0x3a
   32c38:	d805      	bhi.n	32c46 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   32c3a:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   32c3c:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   32c3e:	1c94      	adds	r4, r2, #2
   32c40:	2b00      	cmp	r3, #0
   32c42:	d0e9      	beq.n	32c18 <is_ptr+0x10>
   32c44:	2000      	movs	r0, #0
		if (c == '%') {
   32c46:	2b25      	cmp	r3, #37	; 0x25
			mod = !mod;
   32c48:	bf08      	it	eq
   32c4a:	f080 0001 	eoreq.w	r0, r0, #1
	while ((c = *fmt++) != '\0') {
   32c4e:	4622      	mov	r2, r4
   32c50:	e7de      	b.n	32c10 <is_ptr+0x8>

00032c52 <u8_to_dec>:
 */

#include <zephyr/sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   32c52:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   32c54:	2364      	movs	r3, #100	; 0x64
{
   32c56:	4605      	mov	r5, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   32c58:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   32c5a:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   32c5c:	270a      	movs	r7, #10
	while (buflen > 0 && divisor > 0) {
   32c5e:	b969      	cbnz	r1, 32c7c <u8_to_dec+0x2a>
	if (buflen) {
		*buf = '\0';
	}

	return num_digits;
}
   32c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   32c62:	429a      	cmp	r2, r3
   32c64:	fbb2 f4f3 	udiv	r4, r2, r3
   32c68:	d20c      	bcs.n	32c84 <u8_to_dec+0x32>
   32c6a:	2b01      	cmp	r3, #1
   32c6c:	d00a      	beq.n	32c84 <u8_to_dec+0x32>
   32c6e:	b948      	cbnz	r0, 32c84 <u8_to_dec+0x32>
		value -= digit * divisor;
   32c70:	fb03 2214 	mls	r2, r3, r4, r2
   32c74:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   32c76:	240a      	movs	r4, #10
   32c78:	fbb3 f3f4 	udiv	r3, r3, r4
	while (buflen > 0 && divisor > 0) {
   32c7c:	3e01      	subs	r6, #1
   32c7e:	d1f0      	bne.n	32c62 <u8_to_dec+0x10>
		*buf = '\0';
   32c80:	702e      	strb	r6, [r5, #0]
	return num_digits;
   32c82:	e7ed      	b.n	32c60 <u8_to_dec+0xe>
			*buf = (char)digit + '0';
   32c84:	3430      	adds	r4, #48	; 0x30
   32c86:	f805 4b01 	strb.w	r4, [r5], #1
			buflen--;
   32c8a:	fbb2 f4f3 	udiv	r4, r2, r3
   32c8e:	3901      	subs	r1, #1
   32c90:	fb03 2214 	mls	r2, r3, r4, r2
			num_digits++;
   32c94:	3001      	adds	r0, #1
		divisor /= 10;
   32c96:	fbb3 f3f7 	udiv	r3, r3, r7
			buflen--;
   32c9a:	b2c9      	uxtb	r1, r1
			num_digits++;
   32c9c:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   32c9e:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   32ca0:	b2db      	uxtb	r3, r3
   32ca2:	e7dc      	b.n	32c5e <u8_to_dec+0xc>

00032ca4 <char2hex>:
#include <errno.h>
#include <zephyr/sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   32ca4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   32ca8:	b2db      	uxtb	r3, r3
   32caa:	2b09      	cmp	r3, #9
   32cac:	d802      	bhi.n	32cb4 <char2hex+0x10>
		*x = c - '0';
   32cae:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   32cb0:	2000      	movs	r0, #0
   32cb2:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   32cb4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   32cb8:	2b05      	cmp	r3, #5
   32cba:	d802      	bhi.n	32cc2 <char2hex+0x1e>
		*x = c - 'a' + 10;
   32cbc:	3857      	subs	r0, #87	; 0x57
		*x = c - 'A' + 10;
   32cbe:	b2c3      	uxtb	r3, r0
   32cc0:	e7f5      	b.n	32cae <char2hex+0xa>
	} else if (c >= 'A' && c <= 'F') {
   32cc2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   32cc6:	2b05      	cmp	r3, #5
   32cc8:	d801      	bhi.n	32cce <char2hex+0x2a>
		*x = c - 'A' + 10;
   32cca:	3837      	subs	r0, #55	; 0x37
   32ccc:	e7f7      	b.n	32cbe <char2hex+0x1a>
		return -EINVAL;
   32cce:	f06f 0015 	mvn.w	r0, #21
}
   32cd2:	4770      	bx	lr

00032cd4 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   32cd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   32cd6:	4605      	mov	r5, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   32cd8:	f001 0001 	and.w	r0, r1, #1
   32cdc:	eb00 0651 	add.w	r6, r0, r1, lsr #1
   32ce0:	429e      	cmp	r6, r3
   32ce2:	ea4f 0751 	mov.w	r7, r1, lsr #1
   32ce6:	d903      	bls.n	32cf0 <hex2bin+0x1c>
		return 0;
   32ce8:	2600      	movs	r6, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   32cea:	4630      	mov	r0, r6
   32cec:	b003      	add	sp, #12
   32cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   32cf0:	b158      	cbz	r0, 32d0a <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   32cf2:	7828      	ldrb	r0, [r5, #0]
   32cf4:	f10d 0107 	add.w	r1, sp, #7
   32cf8:	f7ff ffd4 	bl	32ca4 <char2hex>
   32cfc:	2800      	cmp	r0, #0
   32cfe:	dbf3      	blt.n	32ce8 <hex2bin+0x14>
		buf[0] = dec;
   32d00:	f89d 3007 	ldrb.w	r3, [sp, #7]
   32d04:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   32d08:	3501      	adds	r5, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   32d0a:	3501      	adds	r5, #1
   32d0c:	4417      	add	r7, r2
   32d0e:	42ba      	cmp	r2, r7
   32d10:	d0eb      	beq.n	32cea <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   32d12:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   32d16:	f10d 0107 	add.w	r1, sp, #7
   32d1a:	f7ff ffc3 	bl	32ca4 <char2hex>
   32d1e:	2800      	cmp	r0, #0
   32d20:	dbe2      	blt.n	32ce8 <hex2bin+0x14>
		buf[i] = dec << 4;
   32d22:	f89d 4007 	ldrb.w	r4, [sp, #7]
   32d26:	0124      	lsls	r4, r4, #4
   32d28:	b2e4      	uxtb	r4, r4
   32d2a:	7014      	strb	r4, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   32d2c:	f815 0b02 	ldrb.w	r0, [r5], #2
   32d30:	f7ff ffb8 	bl	32ca4 <char2hex>
   32d34:	2800      	cmp	r0, #0
   32d36:	dbd7      	blt.n	32ce8 <hex2bin+0x14>
		buf[i] += dec;
   32d38:	f89d 3007 	ldrb.w	r3, [sp, #7]
   32d3c:	441c      	add	r4, r3
   32d3e:	f802 4b01 	strb.w	r4, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   32d42:	e7e4      	b.n	32d0e <hex2bin+0x3a>

00032d44 <arch_printk_char_out>:
}
   32d44:	2000      	movs	r0, #0
   32d46:	4770      	bx	lr

00032d48 <str_out>:
{
   32d48:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   32d4a:	688a      	ldr	r2, [r1, #8]
   32d4c:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   32d4e:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   32d50:	b114      	cbz	r4, 32d58 <str_out+0x10>
   32d52:	684b      	ldr	r3, [r1, #4]
   32d54:	4293      	cmp	r3, r2
   32d56:	dc01      	bgt.n	32d5c <str_out+0x14>
		ctx->count++;
   32d58:	608d      	str	r5, [r1, #8]
}
   32d5a:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   32d5c:	3b01      	subs	r3, #1
   32d5e:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   32d60:	bf08      	it	eq
   32d62:	2200      	moveq	r2, #0
   32d64:	608d      	str	r5, [r1, #8]
   32d66:	bf0c      	ite	eq
   32d68:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   32d6a:	54a0      	strbne	r0, [r4, r2]
   32d6c:	e7f5      	b.n	32d5a <str_out+0x12>

00032d6e <vprintk>:
		z_log_vprintk(fmt, ap);
   32d6e:	f000 bdd7 	b.w	33920 <z_log_vprintk>

00032d72 <printk>:
{
   32d72:	b40f      	push	{r0, r1, r2, r3}
   32d74:	b507      	push	{r0, r1, r2, lr}
   32d76:	a904      	add	r1, sp, #16
   32d78:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   32d7c:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   32d7e:	f000 fdcf 	bl	33920 <z_log_vprintk>
}
   32d82:	b003      	add	sp, #12
   32d84:	f85d eb04 	ldr.w	lr, [sp], #4
   32d88:	b004      	add	sp, #16
   32d8a:	4770      	bx	lr

00032d8c <snprintk>:
{
   32d8c:	b40c      	push	{r2, r3}
   32d8e:	b507      	push	{r0, r1, r2, lr}
   32d90:	ab04      	add	r3, sp, #16
   32d92:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   32d96:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   32d98:	f7df fa68 	bl	1226c <vsnprintk>
}
   32d9c:	b003      	add	sp, #12
   32d9e:	f85d eb04 	ldr.w	lr, [sp], #4
   32da2:	b002      	add	sp, #8
   32da4:	4770      	bx	lr

00032da6 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   32da6:	4604      	mov	r4, r0
   32da8:	b508      	push	{r3, lr}
   32daa:	4608      	mov	r0, r1
   32dac:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   32dae:	461a      	mov	r2, r3
   32db0:	47a0      	blx	r4
	return z_impl_z_current_get();
   32db2:	f7ff fbb1 	bl	32518 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   32db6:	f7e2 fa77 	bl	152a8 <z_impl_k_thread_abort>

00032dba <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   32dba:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   32dbe:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   32dc0:	0840      	lsrs	r0, r0, #1
   32dc2:	4770      	bx	lr

00032dc4 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   32dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32dc6:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   32dc8:	f7ff fff7 	bl	32dba <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   32dcc:	fab0 f080 	clz	r0, r0
   32dd0:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   32dd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   32dd8:	00ca      	lsls	r2, r1, #3
   32dda:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   32dde:	1d17      	adds	r7, r2, #4
{
   32de0:	460c      	mov	r4, r1
   32de2:	3206      	adds	r2, #6
   32de4:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   32de6:	b956      	cbnz	r6, 32dfe <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   32de8:	2101      	movs	r1, #1
   32dea:	fa01 f000 	lsl.w	r0, r1, r0
   32dee:	68d9      	ldr	r1, [r3, #12]
   32df0:	4301      	orrs	r1, r0
   32df2:	60d9      	str	r1, [r3, #12]
		b->next = c;
   32df4:	f8cc 4010 	str.w	r4, [ip, #16]
   32df8:	53dd      	strh	r5, [r3, r7]
   32dfa:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   32dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   32dfe:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   32e00:	3104      	adds	r1, #4
   32e02:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   32e04:	53d8      	strh	r0, [r3, r7]
   32e06:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   32e0a:	529e      	strh	r6, [r3, r2]
   32e0c:	80c5      	strh	r5, [r0, #6]
   32e0e:	525d      	strh	r5, [r3, r1]
   32e10:	e7f4      	b.n	32dfc <free_list_add+0x38>

00032e12 <free_list_remove_bidx>:
{
   32e12:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   32e14:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   32e18:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   32e1a:	4299      	cmp	r1, r3
   32e1c:	f102 0104 	add.w	r1, r2, #4
   32e20:	d10a      	bne.n	32e38 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   32e22:	2301      	movs	r3, #1
   32e24:	fa03 f202 	lsl.w	r2, r3, r2
   32e28:	68c3      	ldr	r3, [r0, #12]
   32e2a:	ea23 0302 	bic.w	r3, r3, r2
   32e2e:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   32e30:	2300      	movs	r3, #0
   32e32:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   32e36:	bd10      	pop	{r4, pc}
   32e38:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   32e3a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   32e3e:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   32e42:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   32e46:	80cb      	strh	r3, [r1, #6]
   32e48:	8082      	strh	r2, [r0, #4]
}
   32e4a:	e7f4      	b.n	32e36 <free_list_remove_bidx+0x24>

00032e4c <free_list_remove>:
{
   32e4c:	b508      	push	{r3, lr}
   32e4e:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   32e50:	f7ff ffb3 	bl	32dba <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   32e54:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   32e58:	f1c2 021f 	rsb	r2, r2, #31
   32e5c:	4618      	mov	r0, r3
}
   32e5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   32e62:	f7ff bfd6 	b.w	32e12 <free_list_remove_bidx>

00032e66 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   32e66:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   32e6a:	fab1 f581 	clz	r5, r1
   32e6e:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   32e72:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   32e76:	4603      	mov	r3, r0
	if (b->next) {
   32e78:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   32e7c:	460e      	mov	r6, r1
	if (b->next) {
   32e7e:	b1c2      	cbz	r2, 32eb2 <alloc_chunk+0x4c>
   32e80:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   32e82:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   32e86:	4618      	mov	r0, r3
   32e88:	4621      	mov	r1, r4
   32e8a:	f7ff ff96 	bl	32dba <chunk_size>
   32e8e:	42b0      	cmp	r0, r6
   32e90:	d306      	bcc.n	32ea0 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   32e92:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   32e94:	4618      	mov	r0, r3
   32e96:	f7ff ffbc 	bl	32e12 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   32e9a:	4620      	mov	r0, r4
   32e9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   32ea0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   32ea4:	3f01      	subs	r7, #1
   32ea6:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   32ea8:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   32eac:	d001      	beq.n	32eb2 <alloc_chunk+0x4c>
   32eae:	4282      	cmp	r2, r0
   32eb0:	d1e7      	bne.n	32e82 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   32eb2:	f1c5 0220 	rsb	r2, r5, #32
   32eb6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   32eba:	4094      	lsls	r4, r2
   32ebc:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   32ebe:	4014      	ands	r4, r2
   32ec0:	d0eb      	beq.n	32e9a <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   32ec2:	fa94 f2a4 	rbit	r2, r4
   32ec6:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   32eca:	1d11      	adds	r1, r2, #4
   32ecc:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   32ed0:	4621      	mov	r1, r4
   32ed2:	e7df      	b.n	32e94 <alloc_chunk+0x2e>

00032ed4 <merge_chunks>:
{
   32ed4:	b538      	push	{r3, r4, r5, lr}
   32ed6:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   32ed8:	f7ff ff6f 	bl	32dba <chunk_size>
{
   32edc:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   32ede:	4604      	mov	r4, r0
   32ee0:	4611      	mov	r1, r2
   32ee2:	4618      	mov	r0, r3
   32ee4:	f7ff ff69 	bl	32dba <chunk_size>
		((uint16_t *)cmem)[f] = val;
   32ee8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   32eec:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   32eee:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   32ef0:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   32ef2:	4618      	mov	r0, r3
   32ef4:	f7ff ff61 	bl	32dba <chunk_size>
	void *cmem = &buf[c];
   32ef8:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   32efa:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   32efe:	bd38      	pop	{r3, r4, r5, pc}

00032f00 <split_chunks>:
{
   32f00:	b538      	push	{r3, r4, r5, lr}
   32f02:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   32f04:	f7ff ff59 	bl	32dba <chunk_size>
{
   32f08:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   32f0a:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   32f0c:	1a51      	subs	r1, r2, r1
   32f0e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   32f12:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   32f14:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   32f16:	8060      	strh	r0, [r4, #2]
   32f18:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   32f1c:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   32f1e:	8044      	strh	r4, [r0, #2]
   32f20:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   32f24:	4618      	mov	r0, r3
   32f26:	4611      	mov	r1, r2
   32f28:	f7ff ff47 	bl	32dba <chunk_size>
	void *cmem = &buf[c];
   32f2c:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   32f2e:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   32f32:	bd38      	pop	{r3, r4, r5, pc}

00032f34 <free_chunk>:
{
   32f34:	b538      	push	{r3, r4, r5, lr}
   32f36:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   32f38:	f7ff ff3f 	bl	32dba <chunk_size>
   32f3c:	460c      	mov	r4, r1
   32f3e:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   32f40:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   32f44:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   32f46:	07da      	lsls	r2, r3, #31
   32f48:	d40a      	bmi.n	32f60 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   32f4a:	4628      	mov	r0, r5
   32f4c:	f7ff ff7e 	bl	32e4c <free_list_remove>
	return c + chunk_size(h, c);
   32f50:	4621      	mov	r1, r4
   32f52:	4628      	mov	r0, r5
   32f54:	f7ff ff31 	bl	32dba <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   32f58:	1822      	adds	r2, r4, r0
   32f5a:	4628      	mov	r0, r5
   32f5c:	f7ff ffba 	bl	32ed4 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   32f60:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   32f64:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   32f66:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   32f6a:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   32f6c:	07db      	lsls	r3, r3, #31
   32f6e:	d40c      	bmi.n	32f8a <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   32f70:	4628      	mov	r0, r5
   32f72:	f7ff ff6b 	bl	32e4c <free_list_remove>
		return ((uint16_t *)cmem)[f];
   32f76:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   32f7a:	4622      	mov	r2, r4
   32f7c:	1a61      	subs	r1, r4, r1
   32f7e:	4628      	mov	r0, r5
   32f80:	f7ff ffa8 	bl	32ed4 <merge_chunks>
   32f84:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   32f88:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   32f8a:	4621      	mov	r1, r4
   32f8c:	4628      	mov	r0, r5
}
   32f8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   32f92:	f7ff bf17 	b.w	32dc4 <free_list_add>

00032f96 <sys_heap_free>:
	if (mem == NULL) {
   32f96:	b161      	cbz	r1, 32fb2 <sys_heap_free+0x1c>
   32f98:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   32f9a:	3904      	subs	r1, #4
   32f9c:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   32f9e:	f021 0307 	bic.w	r3, r1, #7
   32fa2:	4403      	add	r3, r0
	free_chunk(h, c);
   32fa4:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   32fa6:	885a      	ldrh	r2, [r3, #2]
   32fa8:	f022 0201 	bic.w	r2, r2, #1
   32fac:	805a      	strh	r2, [r3, #2]
   32fae:	f7ff bfc1 	b.w	32f34 <free_chunk>
}
   32fb2:	4770      	bx	lr

00032fb4 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   32fb4:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   32fb6:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   32fb8:	b909      	cbnz	r1, 32fbe <sys_heap_alloc+0xa>
		return NULL;
   32fba:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   32fbc:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   32fbe:	68ab      	ldr	r3, [r5, #8]
   32fc0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   32fc4:	d9f9      	bls.n	32fba <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   32fc6:	310b      	adds	r1, #11
   32fc8:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   32fca:	4621      	mov	r1, r4
   32fcc:	4628      	mov	r0, r5
   32fce:	f7ff ff4a 	bl	32e66 <alloc_chunk>
	if (c == 0U) {
   32fd2:	4606      	mov	r6, r0
   32fd4:	2800      	cmp	r0, #0
   32fd6:	d0f0      	beq.n	32fba <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   32fd8:	4601      	mov	r1, r0
   32fda:	4628      	mov	r0, r5
   32fdc:	f7ff feed 	bl	32dba <chunk_size>
   32fe0:	42a0      	cmp	r0, r4
   32fe2:	d907      	bls.n	32ff4 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   32fe4:	1932      	adds	r2, r6, r4
   32fe6:	4628      	mov	r0, r5
   32fe8:	f7ff ff8a 	bl	32f00 <split_chunks>
		free_list_add(h, c + chunk_sz);
   32fec:	4611      	mov	r1, r2
   32fee:	4628      	mov	r0, r5
   32ff0:	f7ff fee8 	bl	32dc4 <free_list_add>
	void *cmem = &buf[c];
   32ff4:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   32ff8:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   32ffa:	8853      	ldrh	r3, [r2, #2]
   32ffc:	f043 0301 	orr.w	r3, r3, #1
   33000:	8053      	strh	r3, [r2, #2]
   33002:	3004      	adds	r0, #4
	return mem;
   33004:	e7da      	b.n	32fbc <sys_heap_alloc+0x8>

00033006 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   33006:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3300a:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   3300e:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
   33012:	6806      	ldr	r6, [r0, #0]
{
   33014:	460f      	mov	r7, r1
   33016:	4614      	mov	r4, r2
	if (align != rew) {
   33018:	d00c      	beq.n	33034 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   3301a:	424b      	negs	r3, r1
   3301c:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   3301e:	2b04      	cmp	r3, #4
   33020:	461a      	mov	r2, r3
   33022:	464f      	mov	r7, r9
   33024:	bf28      	it	cs
   33026:	2204      	movcs	r2, #4
	rew = align & -align;
   33028:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   3302a:	b964      	cbnz	r4, 33046 <sys_heap_aligned_alloc+0x40>
		return NULL;
   3302c:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   3302e:	4628      	mov	r0, r5
   33030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   33034:	2904      	cmp	r1, #4
   33036:	d804      	bhi.n	33042 <sys_heap_aligned_alloc+0x3c>
}
   33038:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   3303c:	4611      	mov	r1, r2
   3303e:	f7ff bfb9 	b.w	32fb4 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   33042:	2204      	movs	r2, #4
   33044:	e7f1      	b.n	3302a <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   33046:	68b3      	ldr	r3, [r6, #8]
   33048:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   3304c:	d9ee      	bls.n	3302c <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   3304e:	f104 010b 	add.w	r1, r4, #11
   33052:	4439      	add	r1, r7
   33054:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   33056:	08c9      	lsrs	r1, r1, #3
   33058:	4630      	mov	r0, r6
   3305a:	f7ff ff04 	bl	32e66 <alloc_chunk>
	if (c0 == 0) {
   3305e:	4680      	mov	r8, r0
   33060:	2800      	cmp	r0, #0
   33062:	d0e3      	beq.n	3302c <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   33064:	f109 0504 	add.w	r5, r9, #4
   33068:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   3306c:	1e7b      	subs	r3, r7, #1
   3306e:	4435      	add	r5, r6
   33070:	441d      	add	r5, r3
   33072:	427f      	negs	r7, r7
   33074:	403d      	ands	r5, r7
   33076:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   3307a:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   3307c:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   3307e:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   33080:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   33082:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   33086:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   33088:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   3308c:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   33090:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   33094:	d208      	bcs.n	330a8 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   33096:	4601      	mov	r1, r0
   33098:	463a      	mov	r2, r7
   3309a:	4630      	mov	r0, r6
   3309c:	f7ff ff30 	bl	32f00 <split_chunks>
		free_list_add(h, c0);
   330a0:	4641      	mov	r1, r8
   330a2:	4630      	mov	r0, r6
   330a4:	f7ff fe8e 	bl	32dc4 <free_list_add>
	return c + chunk_size(h, c);
   330a8:	4639      	mov	r1, r7
   330aa:	4630      	mov	r0, r6
   330ac:	f7ff fe85 	bl	32dba <chunk_size>
   330b0:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   330b2:	4284      	cmp	r4, r0
   330b4:	d207      	bcs.n	330c6 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   330b6:	4630      	mov	r0, r6
   330b8:	4622      	mov	r2, r4
   330ba:	f7ff ff21 	bl	32f00 <split_chunks>
		free_list_add(h, c_end);
   330be:	4621      	mov	r1, r4
   330c0:	4630      	mov	r0, r6
   330c2:	f7ff fe7f 	bl	32dc4 <free_list_add>
	void *cmem = &buf[c];
   330c6:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   330ca:	8873      	ldrh	r3, [r6, #2]
   330cc:	f043 0301 	orr.w	r3, r3, #1
   330d0:	8073      	strh	r3, [r6, #2]
   330d2:	e7ac      	b.n	3302e <sys_heap_aligned_alloc+0x28>

000330d4 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   330d4:	3a04      	subs	r2, #4
{
   330d6:	b4f0      	push	{r4, r5, r6, r7}
   330d8:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   330da:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   330dc:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   330de:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   330e2:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   330e6:	1a0e      	subs	r6, r1, r0
   330e8:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   330ea:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
   330ec:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   330f0:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   330f2:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
   330f6:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
   330f8:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   330fa:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
   330fc:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   33100:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   33102:	f1c2 0220 	rsb	r2, r2, #32
   33106:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   33108:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   3310c:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   33110:	4294      	cmp	r4, r2
   33112:	d1fb      	bne.n	3310c <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   33114:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   33116:	f042 0201 	orr.w	r2, r2, #1
   3311a:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   3311c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   33120:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   33122:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   33124:	8007      	strh	r7, [r0, #0]
   33126:	8065      	strh	r5, [r4, #2]
   33128:	1984      	adds	r4, r0, r6
   3312a:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   3312e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   33132:	8067      	strh	r7, [r4, #2]
   33134:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   33136:	885a      	ldrh	r2, [r3, #2]
   33138:	f042 0201 	orr.w	r2, r2, #1
   3313c:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   3313e:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   33140:	f7ff be40 	b.w	32dc4 <free_list_add>

00033144 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   33144:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   33146:	f013 0307 	ands.w	r3, r3, #7
   3314a:	d105      	bne.n	33158 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   3314c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   3314e:	2b00      	cmp	r3, #0
   33150:	bf0c      	ite	eq
   33152:	2000      	moveq	r0, #0
   33154:	2003      	movne	r0, #3
   33156:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   33158:	2b02      	cmp	r3, #2
   3315a:	d105      	bne.n	33168 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   3315c:	8b40      	ldrh	r0, [r0, #26]
   3315e:	fab0 f080 	clz	r0, r0
   33162:	0940      	lsrs	r0, r0, #5
   33164:	0080      	lsls	r0, r0, #2
   33166:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   33168:	2b01      	cmp	r3, #1
   3316a:	d105      	bne.n	33178 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   3316c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   3316e:	2b00      	cmp	r3, #0
   33170:	bf0c      	ite	eq
   33172:	2000      	moveq	r0, #0
   33174:	2005      	movne	r0, #5
   33176:	4770      	bx	lr
	int evt = EVT_NOP;
   33178:	2000      	movs	r0, #0
}
   3317a:	4770      	bx	lr

0003317c <validate_args>:
{
   3317c:	b510      	push	{r4, lr}
   3317e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   33180:	b100      	cbz	r0, 33184 <validate_args+0x8>
   33182:	b911      	cbnz	r1, 3318a <validate_args+0xe>
		return -EINVAL;
   33184:	f06f 0015 	mvn.w	r0, #21
}
   33188:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   3318a:	1d08      	adds	r0, r1, #4
   3318c:	f000 f8ba 	bl	33304 <sys_notify_validate>
	if ((rv == 0)
   33190:	2800      	cmp	r0, #0
   33192:	d1f9      	bne.n	33188 <validate_args+0xc>
	    && ((cli->notify.flags
   33194:	68a3      	ldr	r3, [r4, #8]
   33196:	2b03      	cmp	r3, #3
   33198:	d9f6      	bls.n	33188 <validate_args+0xc>
   3319a:	e7f3      	b.n	33184 <validate_args+0x8>

0003319c <notify_one>:
{
   3319c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   331a0:	460d      	mov	r5, r1
   331a2:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   331a4:	4619      	mov	r1, r3
   331a6:	1d28      	adds	r0, r5, #4
{
   331a8:	4690      	mov	r8, r2
   331aa:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   331ac:	f000 f8be 	bl	3332c <sys_notify_finalize>
	if (cb) {
   331b0:	4604      	mov	r4, r0
   331b2:	b138      	cbz	r0, 331c4 <notify_one+0x28>
		cb(mgr, cli, state, res);
   331b4:	4633      	mov	r3, r6
   331b6:	4642      	mov	r2, r8
   331b8:	4629      	mov	r1, r5
   331ba:	4638      	mov	r0, r7
   331bc:	46a4      	mov	ip, r4
}
   331be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   331c2:	4760      	bx	ip
}
   331c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000331c8 <transition_complete>:
{
   331c8:	b410      	push	{r4}
	__asm__ volatile(
   331ca:	f04f 0420 	mov.w	r4, #32
   331ce:	f3ef 8211 	mrs	r2, BASEPRI
   331d2:	f384 8812 	msr	BASEPRI_MAX, r4
   331d6:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   331da:	6141      	str	r1, [r0, #20]
}
   331dc:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   331de:	2101      	movs	r1, #1
   331e0:	f7df b85a 	b.w	12298 <process_event>

000331e4 <onoff_manager_init>:
{
   331e4:	b538      	push	{r3, r4, r5, lr}
   331e6:	460c      	mov	r4, r1
	if ((mgr == NULL)
   331e8:	4605      	mov	r5, r0
   331ea:	b158      	cbz	r0, 33204 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   331ec:	b151      	cbz	r1, 33204 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   331ee:	680b      	ldr	r3, [r1, #0]
   331f0:	b143      	cbz	r3, 33204 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   331f2:	684b      	ldr	r3, [r1, #4]
   331f4:	b133      	cbz	r3, 33204 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   331f6:	221c      	movs	r2, #28
   331f8:	2100      	movs	r1, #0
   331fa:	f002 f9a7 	bl	3554c <memset>
   331fe:	612c      	str	r4, [r5, #16]
	return 0;
   33200:	2000      	movs	r0, #0
}
   33202:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   33204:	f06f 0015 	mvn.w	r0, #21
   33208:	e7fb      	b.n	33202 <onoff_manager_init+0x1e>

0003320a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   3320a:	b570      	push	{r4, r5, r6, lr}
   3320c:	4605      	mov	r5, r0
   3320e:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   33210:	f7ff ffb4 	bl	3317c <validate_args>

	if (rv < 0) {
   33214:	1e04      	subs	r4, r0, #0
   33216:	db15      	blt.n	33244 <onoff_request+0x3a>
   33218:	f04f 0320 	mov.w	r3, #32
   3321c:	f3ef 8211 	mrs	r2, BASEPRI
   33220:	f383 8812 	msr	BASEPRI_MAX, r3
   33224:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   33228:	8b6b      	ldrh	r3, [r5, #26]
   3322a:	8b2c      	ldrh	r4, [r5, #24]
   3322c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   33230:	428b      	cmp	r3, r1
   33232:	f004 0407 	and.w	r4, r4, #7
   33236:	d107      	bne.n	33248 <onoff_request+0x3e>
	__asm__ volatile(
   33238:	f382 8811 	msr	BASEPRI, r2
   3323c:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   33240:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   33244:	4620      	mov	r0, r4
   33246:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   33248:	2c02      	cmp	r4, #2
   3324a:	d10c      	bne.n	33266 <onoff_request+0x5c>
		mgr->refs += 1U;
   3324c:	3301      	adds	r3, #1
   3324e:	836b      	strh	r3, [r5, #26]
   33250:	f382 8811 	msr	BASEPRI, r2
   33254:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   33258:	2300      	movs	r3, #0
   3325a:	4622      	mov	r2, r4
   3325c:	4631      	mov	r1, r6
   3325e:	4628      	mov	r0, r5
   33260:	f7ff ff9c 	bl	3319c <notify_one>
   33264:	e7ee      	b.n	33244 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   33266:	2c06      	cmp	r4, #6
   33268:	d814      	bhi.n	33294 <onoff_request+0x8a>
   3326a:	e8df f004 	tbb	[pc, r4]
   3326e:	1304      	.short	0x1304
   33270:	1a041313 	.word	0x1a041313
   33274:	04          	.byte	0x04
   33275:	00          	.byte	0x00
	parent->next = child;
   33276:	2300      	movs	r3, #0
   33278:	6033      	str	r3, [r6, #0]
	return list->tail;
   3327a:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   3327c:	b93b      	cbnz	r3, 3328e <onoff_request+0x84>
	list->head = node;
   3327e:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   33282:	b9ac      	cbnz	r4, 332b0 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   33284:	2102      	movs	r1, #2
   33286:	4628      	mov	r0, r5
   33288:	f7df f806 	bl	12298 <process_event>
   3328c:	e7da      	b.n	33244 <onoff_request+0x3a>
	parent->next = child;
   3328e:	601e      	str	r6, [r3, #0]
	list->tail = node;
   33290:	606e      	str	r6, [r5, #4]
}
   33292:	e7f6      	b.n	33282 <onoff_request+0x78>
   33294:	f382 8811 	msr	BASEPRI, r2
   33298:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   3329c:	f06f 0404 	mvn.w	r4, #4
   332a0:	e7d0      	b.n	33244 <onoff_request+0x3a>
   332a2:	f382 8811 	msr	BASEPRI, r2
   332a6:	f3bf 8f6f 	isb	sy
   332aa:	f06f 0485 	mvn.w	r4, #133	; 0x85
   332ae:	e7c9      	b.n	33244 <onoff_request+0x3a>
   332b0:	f382 8811 	msr	BASEPRI, r2
   332b4:	f3bf 8f6f 	isb	sy
		if (notify) {
   332b8:	e7c4      	b.n	33244 <onoff_request+0x3a>

000332ba <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   332ba:	b510      	push	{r4, lr}
	__asm__ volatile(
   332bc:	f04f 0320 	mov.w	r3, #32
   332c0:	f3ef 8211 	mrs	r2, BASEPRI
   332c4:	f383 8812 	msr	BASEPRI_MAX, r3
   332c8:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   332cc:	8b04      	ldrh	r4, [r0, #24]
   332ce:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   332d2:	2c02      	cmp	r4, #2
   332d4:	d00a      	beq.n	332ec <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   332d6:	2c01      	cmp	r4, #1
   332d8:	bf0c      	ite	eq
   332da:	f06f 0004 	mvneq.w	r0, #4
   332de:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   332e2:	f382 8811 	msr	BASEPRI, r2
   332e6:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   332ea:	e008      	b.n	332fe <onoff_release+0x44>
	mgr->refs -= 1U;
   332ec:	8b43      	ldrh	r3, [r0, #26]
   332ee:	3b01      	subs	r3, #1
   332f0:	b29b      	uxth	r3, r3
   332f2:	8343      	strh	r3, [r0, #26]
	if (stop) {
   332f4:	b923      	cbnz	r3, 33300 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   332f6:	4621      	mov	r1, r4
   332f8:	f7de ffce 	bl	12298 <process_event>
	int rv = state;
   332fc:	4620      	mov	r0, r4
}
   332fe:	bd10      	pop	{r4, pc}
	int rv = state;
   33300:	4620      	mov	r0, r4
   33302:	e7ee      	b.n	332e2 <onoff_release+0x28>

00033304 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   33304:	4603      	mov	r3, r0
   33306:	b140      	cbz	r0, 3331a <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   33308:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   3330a:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   3330e:	2a02      	cmp	r2, #2
   33310:	d006      	beq.n	33320 <sys_notify_validate+0x1c>
   33312:	2a03      	cmp	r2, #3
   33314:	d004      	beq.n	33320 <sys_notify_validate+0x1c>
   33316:	2a01      	cmp	r2, #1
   33318:	d005      	beq.n	33326 <sys_notify_validate+0x22>
   3331a:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   3331e:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   33320:	681a      	ldr	r2, [r3, #0]
   33322:	2a00      	cmp	r2, #0
   33324:	d0f9      	beq.n	3331a <sys_notify_validate+0x16>
		notify->result = 0;
   33326:	2000      	movs	r0, #0
   33328:	6098      	str	r0, [r3, #8]
   3332a:	4770      	bx	lr

0003332c <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   3332c:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   3332e:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   33330:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   33332:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   33336:	2a02      	cmp	r2, #2
{
   33338:	4603      	mov	r3, r0
	switch (method) {
   3333a:	f04f 0400 	mov.w	r4, #0
   3333e:	d007      	beq.n	33350 <sys_notify_finalize+0x24>
   33340:	2a03      	cmp	r2, #3
   33342:	d002      	beq.n	3334a <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   33344:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   33346:	2000      	movs	r0, #0
   33348:	e001      	b.n	3334e <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   3334a:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   3334c:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   3334e:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   33350:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   33352:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   33354:	2800      	cmp	r0, #0
   33356:	d0f6      	beq.n	33346 <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   33358:	f7ff fbc2 	bl	32ae0 <z_impl_k_poll_signal_raise>
   3335c:	e7f3      	b.n	33346 <sys_notify_finalize+0x1a>

0003335e <encode_uint>:
{
   3335e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33362:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   33364:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   33366:	2b6f      	cmp	r3, #111	; 0x6f
{
   33368:	4680      	mov	r8, r0
   3336a:	460f      	mov	r7, r1
   3336c:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   3336e:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   33372:	d029      	beq.n	333c8 <encode_uint+0x6a>
   33374:	d824      	bhi.n	333c0 <encode_uint+0x62>
		return 10;
   33376:	2b58      	cmp	r3, #88	; 0x58
   33378:	bf0c      	ite	eq
   3337a:	2610      	moveq	r6, #16
   3337c:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   3337e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   33382:	4632      	mov	r2, r6
   33384:	2300      	movs	r3, #0
   33386:	4640      	mov	r0, r8
   33388:	4639      	mov	r1, r7
   3338a:	f7dc ff09 	bl	101a0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   3338e:	2a09      	cmp	r2, #9
   33390:	b2d4      	uxtb	r4, r2
   33392:	d81e      	bhi.n	333d2 <encode_uint+0x74>
   33394:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   33396:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   33398:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   3339a:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   3339e:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   333a2:	d301      	bcc.n	333a8 <encode_uint+0x4a>
   333a4:	45d1      	cmp	r9, sl
   333a6:	d811      	bhi.n	333cc <encode_uint+0x6e>
	if (conv->flag_hash) {
   333a8:	782b      	ldrb	r3, [r5, #0]
   333aa:	069b      	lsls	r3, r3, #26
   333ac:	d505      	bpl.n	333ba <encode_uint+0x5c>
		if (radix == 8) {
   333ae:	2e08      	cmp	r6, #8
   333b0:	d115      	bne.n	333de <encode_uint+0x80>
			conv->altform_0 = true;
   333b2:	78ab      	ldrb	r3, [r5, #2]
   333b4:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   333b8:	70ab      	strb	r3, [r5, #2]
}
   333ba:	4648      	mov	r0, r9
   333bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   333c0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   333c4:	2b70      	cmp	r3, #112	; 0x70
   333c6:	e7d7      	b.n	33378 <encode_uint+0x1a>
	switch (specifier) {
   333c8:	2608      	movs	r6, #8
   333ca:	e7d8      	b.n	3337e <encode_uint+0x20>
		value /= radix;
   333cc:	4680      	mov	r8, r0
   333ce:	460f      	mov	r7, r1
   333d0:	e7d7      	b.n	33382 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   333d2:	f1bb 0f19 	cmp.w	fp, #25
   333d6:	bf94      	ite	ls
   333d8:	3437      	addls	r4, #55	; 0x37
   333da:	3457      	addhi	r4, #87	; 0x57
   333dc:	e7db      	b.n	33396 <encode_uint+0x38>
		} else if (radix == 16) {
   333de:	2e10      	cmp	r6, #16
   333e0:	d1eb      	bne.n	333ba <encode_uint+0x5c>
			conv->altform_0c = true;
   333e2:	78ab      	ldrb	r3, [r5, #2]
   333e4:	f043 0310 	orr.w	r3, r3, #16
   333e8:	e7e6      	b.n	333b8 <encode_uint+0x5a>

000333ea <outs>:
{
   333ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   333ee:	4607      	mov	r7, r0
   333f0:	4688      	mov	r8, r1
   333f2:	4615      	mov	r5, r2
   333f4:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   333f6:	4614      	mov	r4, r2
   333f8:	42b4      	cmp	r4, r6
   333fa:	d305      	bcc.n	33408 <outs+0x1e>
   333fc:	b10e      	cbz	r6, 33402 <outs+0x18>
	return (int)count;
   333fe:	1b60      	subs	r0, r4, r5
   33400:	e008      	b.n	33414 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   33402:	7823      	ldrb	r3, [r4, #0]
   33404:	2b00      	cmp	r3, #0
   33406:	d0fa      	beq.n	333fe <outs+0x14>
		int rc = out((int)*sp++, ctx);
   33408:	f814 0b01 	ldrb.w	r0, [r4], #1
   3340c:	4641      	mov	r1, r8
   3340e:	47b8      	blx	r7
		if (rc < 0) {
   33410:	2800      	cmp	r0, #0
   33412:	daf1      	bge.n	333f8 <outs+0xe>
}
   33414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00033418 <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   33418:	b40f      	push	{r0, r1, r2, r3}
   3341a:	b507      	push	{r0, r1, r2, lr}
   3341c:	a904      	add	r1, sp, #16
   3341e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   33422:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   33424:	f7ff fca3 	bl	32d6e <vprintk>

	va_end(ap);
}
   33428:	b003      	add	sp, #12
   3342a:	f85d eb04 	ldr.w	lr, [sp], #4
   3342e:	b004      	add	sp, #16
   33430:	4770      	bx	lr

00033432 <free_space>:
 * @retval true when space was calculated until end of buffer (and there might
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
   33432:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
   33434:	6903      	ldr	r3, [r0, #16]
{
   33436:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
   33438:	f013 0008 	ands.w	r0, r3, #8
   3343c:	d109      	bne.n	33452 <free_space+0x20>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   3343e:	6813      	ldr	r3, [r2, #0]
   33440:	68d4      	ldr	r4, [r2, #12]
   33442:	429c      	cmp	r4, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;
   33444:	bf97      	itett	ls
   33446:	6a12      	ldrls	r2, [r2, #32]
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   33448:	1ae3      	subhi	r3, r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
   3344a:	1ad3      	subls	r3, r2, r3

	return true;
   3344c:	2001      	movls	r0, #1
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   3344e:	600b      	str	r3, [r1, #0]
}
   33450:	bd10      	pop	{r4, pc}
   33452:	2300      	movs	r3, #0
		return false;
   33454:	4618      	mov	r0, r3
   33456:	e7fa      	b.n	3344e <free_space+0x1c>

00033458 <get_usage>:

	return false;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   33458:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
   3345a:	a901      	add	r1, sp, #4
{
   3345c:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   3345e:	f7ff ffe8 	bl	33432 <free_space>
   33462:	b120      	cbz	r0, 3346e <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   33464:	9b01      	ldr	r3, [sp, #4]
   33466:	68e2      	ldr	r2, [r4, #12]
   33468:	3b01      	subs	r3, #1
   3346a:	4413      	add	r3, r2
   3346c:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   3346e:	6a20      	ldr	r0, [r4, #32]
   33470:	9b01      	ldr	r3, [sp, #4]
   33472:	1ac0      	subs	r0, r0, r3
}
   33474:	3801      	subs	r0, #1
   33476:	b002      	add	sp, #8
   33478:	bd10      	pop	{r4, pc}

0003347a <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, int32_t val)
{
   3347a:	b510      	push	{r4, lr}
   3347c:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   3347e:	1850      	adds	r0, r2, r1

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   33480:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   33482:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   33484:	07d2      	lsls	r2, r2, #31
   33486:	d502      	bpl.n	3348e <idx_inc+0x14>
		return i & (buffer->size - 1);
   33488:	3b01      	subs	r3, #1
   3348a:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   3348c:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   3348e:	4298      	cmp	r0, r3
   33490:	bf28      	it	cs
   33492:	1ac0      	subcs	r0, r0, r3
   33494:	e7fa      	b.n	3348c <idx_inc+0x12>

00033496 <rd_idx_inc>:
		buffer->flags |= MPSC_PBUF_FULL;
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
   33496:	b510      	push	{r4, lr}
   33498:	4604      	mov	r4, r0
   3349a:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   3349c:	68c1      	ldr	r1, [r0, #12]
   3349e:	f7ff ffec 	bl	3347a <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
   334a2:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   334a4:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
   334a6:	f023 0308 	bic.w	r3, r3, #8
   334aa:	6123      	str	r3, [r4, #16]
}
   334ac:	bd10      	pop	{r4, pc}

000334ae <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   334ae:	b538      	push	{r3, r4, r5, lr}
   334b0:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   334b2:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
   334b4:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   334b6:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   334b8:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   334bc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
{
   334c0:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   334c2:	6801      	ldr	r1, [r0, #0]
   334c4:	462a      	mov	r2, r5
   334c6:	f7ff ffd8 	bl	3347a <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   334ca:	68e3      	ldr	r3, [r4, #12]
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   334cc:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   334ce:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   334d0:	4298      	cmp	r0, r3
		buffer->flags |= MPSC_PBUF_FULL;
   334d2:	bf02      	ittt	eq
   334d4:	6923      	ldreq	r3, [r4, #16]
   334d6:	f043 0308 	orreq.w	r3, r3, #8
   334da:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   334dc:	462a      	mov	r2, r5
   334de:	4620      	mov	r0, r4
   334e0:	f7ff ffcb 	bl	3347a <idx_inc>
   334e4:	6060      	str	r0, [r4, #4]
}
   334e6:	bd38      	pop	{r3, r4, r5, pc}

000334e8 <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
   334e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   334ec:	68c7      	ldr	r7, [r0, #12]
   334ee:	69c6      	ldr	r6, [r0, #28]
{
   334f0:	469b      	mov	fp, r3
	if (item->hdr.busy && !item->hdr.valid) {
   334f2:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
   334f6:	f003 0303 	and.w	r3, r3, #3
   334fa:	2b02      	cmp	r3, #2
{
   334fc:	4604      	mov	r4, r0
   334fe:	4688      	mov	r8, r1
   33500:	4691      	mov	r9, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   33502:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   33506:	f04f 0300 	mov.w	r3, #0
   3350a:	d009      	beq.n	33520 <drop_item_locked+0x38>
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
   3350c:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
   3350e:	f8cb 3000 	str.w	r3, [fp]
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
   33512:	6923      	ldr	r3, [r4, #16]
   33514:	0799      	lsls	r1, r3, #30
   33516:	d410      	bmi.n	3353a <drop_item_locked+0x52>
		return false;
   33518:	2000      	movs	r0, #0
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
			       item, rd_wlen);
	}

	return true;
}
   3351a:	b003      	add	sp, #12
   3351c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
   33520:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
   33524:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
   33526:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
   33528:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
   3352c:	d0f1      	beq.n	33512 <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
   3352e:	f7ff ffb2 	bl	33496 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   33532:	68e3      	ldr	r3, [r4, #12]
   33534:	60a3      	str	r3, [r4, #8]
		return true;
   33536:	2001      	movs	r0, #1
   33538:	e7ef      	b.n	3351a <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
   3353a:	69a3      	ldr	r3, [r4, #24]
   3353c:	4650      	mov	r0, sl
   3353e:	4798      	blx	r3
	return item->hdr.valid;
   33540:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	if (!is_valid(item)) {
   33544:	07da      	lsls	r2, r3, #31
	uint32_t rd_wlen = buffer->get_wlen(item);
   33546:	4605      	mov	r5, r0
	if (!is_valid(item)) {
   33548:	d5e6      	bpl.n	33518 <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
   3354a:	f013 0302 	ands.w	r3, r3, #2
   3354e:	d01d      	beq.n	3358c <drop_item_locked+0xa4>
		if (free_wlen) {
   33550:	f1b8 0f00 	cmp.w	r8, #0
   33554:	d003      	beq.n	3355e <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
   33556:	4641      	mov	r1, r8
   33558:	4620      	mov	r0, r4
   3355a:	f7ff ffa8 	bl	334ae <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   3355e:	6861      	ldr	r1, [r4, #4]
   33560:	462a      	mov	r2, r5
   33562:	4620      	mov	r0, r4
   33564:	f7ff ff89 	bl	3347a <idx_inc>
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   33568:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   3356c:	4299      	cmp	r1, r3
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   3356e:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   33570:	d104      	bne.n	3357c <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
   33572:	462a      	mov	r2, r5
   33574:	4620      	mov	r0, r4
   33576:	f7ff ff80 	bl	3347a <idx_inc>
   3357a:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
   3357c:	68a3      	ldr	r3, [r4, #8]
   3357e:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
   33580:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
   33582:	6923      	ldr	r3, [r4, #16]
   33584:	f043 0308 	orr.w	r3, r3, #8
   33588:	6123      	str	r3, [r4, #16]
   3358a:	e7d4      	b.n	33536 <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
   3358c:	4601      	mov	r1, r0
   3358e:	4620      	mov	r0, r4
   33590:	9301      	str	r3, [sp, #4]
   33592:	f7ff ff80 	bl	33496 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   33596:	68e2      	ldr	r2, [r4, #12]
   33598:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
   3359a:	f1b8 0f00 	cmp.w	r8, #0
   3359e:	d004      	beq.n	335aa <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
   335a0:	6821      	ldr	r1, [r4, #0]
   335a2:	69e2      	ldr	r2, [r4, #28]
   335a4:	9b01      	ldr	r3, [sp, #4]
   335a6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
   335aa:	eb05 0208 	add.w	r2, r5, r8
   335ae:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   335b2:	6821      	ldr	r1, [r4, #0]
   335b4:	4620      	mov	r0, r4
   335b6:	f7ff ff60 	bl	3347a <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
   335ba:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   335bc:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
   335be:	f043 0308 	orr.w	r3, r3, #8
   335c2:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
   335c4:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
   335c8:	f36f 0300 	bfc	r3, #0, #1
   335cc:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
   335d0:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
   335d4:	e7af      	b.n	33536 <drop_item_locked+0x4e>

000335d6 <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
   335d6:	b570      	push	{r4, r5, r6, lr}
   335d8:	4604      	mov	r4, r0
   335da:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
   335dc:	f7ff ff4d 	bl	3347a <idx_inc>

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
   335e0:	6823      	ldr	r3, [r4, #0]
   335e2:	4283      	cmp	r3, r0
   335e4:	d105      	bne.n	335f2 <post_drop_action+0x1c>
		/* Operation not interrupted by another alloc. */
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
		buffer->flags &= ~MPSC_PBUF_FULL;
   335e6:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
   335e8:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
   335ea:	f023 0308 	bic.w	r3, r3, #8
   335ee:	6123      	str	r3, [r4, #16]
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
	buffer->wr_idx = idx_inc(buffer,
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
   335f0:	bd70      	pop	{r4, r5, r6, pc}
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   335f2:	69e2      	ldr	r2, [r4, #28]
	union mpsc_pbuf_generic skip = {
   335f4:	00ab      	lsls	r3, r5, #2
   335f6:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   335fa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
   335fe:	4620      	mov	r0, r4
   33600:	6861      	ldr	r1, [r4, #4]
   33602:	462a      	mov	r2, r5
   33604:	f7ff ff39 	bl	3347a <idx_inc>
   33608:	6060      	str	r0, [r4, #4]
   3360a:	e7f1      	b.n	335f0 <post_drop_action+0x1a>

0003360c <max_utilization_update>:
{
   3360c:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   3360e:	6903      	ldr	r3, [r0, #16]
   33610:	075b      	lsls	r3, r3, #29
{
   33612:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   33614:	d506      	bpl.n	33624 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   33616:	6a45      	ldr	r5, [r0, #36]	; 0x24
   33618:	f7ff ff1e 	bl	33458 <get_usage>
   3361c:	4285      	cmp	r5, r0
   3361e:	bf2c      	ite	cs
   33620:	6265      	strcs	r5, [r4, #36]	; 0x24
   33622:	6260      	strcc	r0, [r4, #36]	; 0x24
}
   33624:	bd38      	pop	{r3, r4, r5, pc}

00033626 <mpsc_pbuf_init>:
{
   33626:	b538      	push	{r3, r4, r5, lr}
   33628:	460d      	mov	r5, r1
   3362a:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   3362c:	221c      	movs	r2, #28
   3362e:	2100      	movs	r1, #0
   33630:	f001 ff8c 	bl	3554c <memset>
	buffer->get_wlen = cfg->get_wlen;
   33634:	68eb      	ldr	r3, [r5, #12]
   33636:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   33638:	68ab      	ldr	r3, [r5, #8]
   3363a:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   3363c:	682b      	ldr	r3, [r5, #0]
   3363e:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   33640:	686b      	ldr	r3, [r5, #4]
   33642:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
   33644:	2200      	movs	r2, #0
   33646:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
   33648:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   3364a:	b123      	cbz	r3, 33656 <mpsc_pbuf_init+0x30>
   3364c:	1e59      	subs	r1, r3, #1
   3364e:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   33650:	bf08      	it	eq
   33652:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
   33656:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   33658:	2201      	movs	r2, #1
   3365a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   3365e:	2100      	movs	r1, #0
}
   33660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   33664:	f005 b92d 	b.w	388c2 <z_impl_k_sem_init>

00033668 <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   33668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3366c:	b087      	sub	sp, #28
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
   3366e:	2500      	movs	r5, #0
{
   33670:	9300      	str	r3, [sp, #0]
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
   33672:	6a03      	ldr	r3, [r0, #32]
	union mpsc_pbuf_generic *dropped_item = NULL;
   33674:	9503      	str	r5, [sp, #12]
	if (wlen > (buffer->size)) {
   33676:	428b      	cmp	r3, r1
{
   33678:	4604      	mov	r4, r0
   3367a:	460e      	mov	r6, r1
   3367c:	4692      	mov	sl, r2
	uint32_t tmp_wr_idx_shift = 0;
   3367e:	9505      	str	r5, [sp, #20]
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
   33680:	46a9      	mov	r9, r5
	if (wlen > (buffer->size)) {
   33682:	d33a      	bcc.n	336fa <mpsc_pbuf_alloc+0x92>
	__asm__ volatile(
   33684:	f04f 0320 	mov.w	r3, #32
   33688:	f3ef 8b11 	mrs	fp, BASEPRI
   3368c:	f383 8812 	msr	BASEPRI_MAX, r3
   33690:	f3bf 8f6f 	isb	sy
	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
   33694:	9a05      	ldr	r2, [sp, #20]
	k.key = arch_irq_lock();
   33696:	46d8      	mov	r8, fp
   33698:	b12a      	cbz	r2, 336a6 <mpsc_pbuf_alloc+0x3e>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
   3369a:	4629      	mov	r1, r5
   3369c:	4620      	mov	r0, r4
   3369e:	f7ff ff9a 	bl	335d6 <post_drop_action>
			tmp_wr_idx_shift = 0;
   336a2:	2300      	movs	r3, #0
   336a4:	9305      	str	r3, [sp, #20]
		}

		wrap = free_space(buffer, &free_wlen);
   336a6:	a904      	add	r1, sp, #16
   336a8:	4620      	mov	r0, r4
   336aa:	f7ff fec2 	bl	33432 <free_space>

		if (free_wlen >= wlen) {
   336ae:	9904      	ldr	r1, [sp, #16]
   336b0:	42b1      	cmp	r1, r6
		wrap = free_space(buffer, &free_wlen);
   336b2:	4607      	mov	r7, r0
		if (free_wlen >= wlen) {
   336b4:	d32a      	bcc.n	3370c <mpsc_pbuf_alloc+0xa4>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   336b6:	6822      	ldr	r2, [r4, #0]
			item =
   336b8:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
   336ba:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   336be:	f021 0103 	bic.w	r1, r1, #3
   336c2:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
   336c6:	eb03 0982 	add.w	r9, r3, r2, lsl #2
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   336ca:	6821      	ldr	r1, [r4, #0]
   336cc:	4632      	mov	r2, r6
   336ce:	4620      	mov	r0, r4
   336d0:	f7ff fed3 	bl	3347a <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   336d4:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   336d6:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   336d8:	4298      	cmp	r0, r3
   336da:	d012      	beq.n	33702 <mpsc_pbuf_alloc+0x9a>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
   336dc:	2700      	movs	r7, #0
	__asm__ volatile(
   336de:	f388 8811 	msr	BASEPRI, r8
   336e2:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
   336e6:	9903      	ldr	r1, [sp, #12]
   336e8:	b129      	cbz	r1, 336f6 <mpsc_pbuf_alloc+0x8e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   336ea:	6962      	ldr	r2, [r4, #20]
   336ec:	b10a      	cbz	r2, 336f2 <mpsc_pbuf_alloc+0x8a>
				buffer->notify_drop(buffer, dropped_item);
   336ee:	4620      	mov	r0, r4
   336f0:	4790      	blx	r2
			}
			dropped_item = NULL;
   336f2:	2300      	movs	r3, #0
   336f4:	9303      	str	r3, [sp, #12]
		}
	} while (cont);
   336f6:	2f00      	cmp	r7, #0
   336f8:	d1c4      	bne.n	33684 <mpsc_pbuf_alloc+0x1c>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   336fa:	4648      	mov	r0, r9
   336fc:	b007      	add	sp, #28
   336fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
   33702:	6923      	ldr	r3, [r4, #16]
   33704:	f043 0308 	orr.w	r3, r3, #8
   33708:	6123      	str	r3, [r4, #16]
   3370a:	e7e7      	b.n	336dc <mpsc_pbuf_alloc+0x74>
		} else if (wrap) {
   3370c:	b118      	cbz	r0, 33716 <mpsc_pbuf_alloc+0xae>
			add_skip_item(buffer, free_wlen);
   3370e:	4620      	mov	r0, r4
   33710:	f7ff fecd 	bl	334ae <add_skip_item>
			cont = true;
   33714:	e7e3      	b.n	336de <mpsc_pbuf_alloc+0x76>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   33716:	9b00      	ldr	r3, [sp, #0]
   33718:	ea5a 0303 	orrs.w	r3, sl, r3
   3371c:	d01a      	beq.n	33754 <mpsc_pbuf_alloc+0xec>
   3371e:	9101      	str	r1, [sp, #4]
   33720:	f004 fff5 	bl	3870e <k_is_in_isr>
   33724:	9901      	ldr	r1, [sp, #4]
   33726:	b9a8      	cbnz	r0, 33754 <mpsc_pbuf_alloc+0xec>
   33728:	f38b 8811 	msr	BASEPRI, fp
   3372c:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   33730:	9b00      	ldr	r3, [sp, #0]
   33732:	4652      	mov	r2, sl
   33734:	f104 0028 	add.w	r0, r4, #40	; 0x28
   33738:	f7fe f9f2 	bl	31b20 <z_impl_k_sem_take>
	__asm__ volatile(
   3373c:	f04f 0320 	mov.w	r3, #32
   33740:	f3ef 8811 	mrs	r8, BASEPRI
   33744:	f383 8812 	msr	BASEPRI_MAX, r3
   33748:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
   3374c:	fab0 f780 	clz	r7, r0
   33750:	097f      	lsrs	r7, r7, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   33752:	e7c4      	b.n	336de <mpsc_pbuf_alloc+0x76>
			cont = drop_item_locked(buffer, free_wlen,
   33754:	ab05      	add	r3, sp, #20
   33756:	aa03      	add	r2, sp, #12
   33758:	4620      	mov	r0, r4
			tmp_wr_idx_val = buffer->tmp_wr_idx;
   3375a:	6825      	ldr	r5, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
   3375c:	f7ff fec4 	bl	334e8 <drop_item_locked>
   33760:	4607      	mov	r7, r0
   33762:	e7bc      	b.n	336de <mpsc_pbuf_alloc+0x76>

00033764 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   33764:	b570      	push	{r4, r5, r6, lr}
   33766:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   33768:	6983      	ldr	r3, [r0, #24]
   3376a:	4608      	mov	r0, r1
{
   3376c:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   3376e:	4798      	blx	r3
   33770:	4602      	mov	r2, r0
   33772:	f04f 0320 	mov.w	r3, #32
   33776:	f3ef 8611 	mrs	r6, BASEPRI
   3377a:	f383 8812 	msr	BASEPRI_MAX, r3
   3377e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   33782:	782b      	ldrb	r3, [r5, #0]
   33784:	f043 0301 	orr.w	r3, r3, #1
   33788:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   3378a:	6861      	ldr	r1, [r4, #4]
   3378c:	4620      	mov	r0, r4
   3378e:	f7ff fe74 	bl	3347a <idx_inc>
   33792:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   33794:	4620      	mov	r0, r4
   33796:	f7ff ff39 	bl	3360c <max_utilization_update>
	__asm__ volatile(
   3379a:	f386 8811 	msr	BASEPRI, r6
   3379e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
   337a2:	bd70      	pop	{r4, r5, r6, pc}

000337a4 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   337a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   337a6:	4604      	mov	r4, r0
	__asm__ volatile(
   337a8:	f04f 0320 	mov.w	r3, #32
   337ac:	f3ef 8611 	mrs	r6, BASEPRI
   337b0:	f383 8812 	msr	BASEPRI_MAX, r3
   337b4:	f3bf 8f6f 	isb	sy
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   337b8:	6923      	ldr	r3, [r4, #16]
   337ba:	f013 0f08 	tst.w	r3, #8
   337be:	68a3      	ldr	r3, [r4, #8]
   337c0:	d102      	bne.n	337c8 <mpsc_pbuf_claim+0x24>
   337c2:	6862      	ldr	r2, [r4, #4]
   337c4:	4293      	cmp	r3, r2
   337c6:	d900      	bls.n	337ca <mpsc_pbuf_claim+0x26>
		*res = buffer->size - buffer->tmp_rd_idx;
   337c8:	6a22      	ldr	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
   337ca:	69e1      	ldr	r1, [r4, #28]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   337cc:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
   337ce:	b92a      	cbnz	r2, 337dc <mpsc_pbuf_claim+0x38>
	__asm__ volatile(
   337d0:	f386 8811 	msr	BASEPRI, r6
   337d4:	f3bf 8f6f 	isb	sy
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
   337d8:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
   337da:	e033      	b.n	33844 <mpsc_pbuf_claim+0xa0>
	return !item->hdr.valid && !item->hdr.busy;
   337dc:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		if (!a || is_invalid(item)) {
   337e0:	f012 0003 	ands.w	r0, r2, #3
		item = (union mpsc_pbuf_generic *)
   337e4:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
   337e8:	d0f2      	beq.n	337d0 <mpsc_pbuf_claim+0x2c>
	if (item->hdr.busy && !item->hdr.valid) {
   337ea:	2802      	cmp	r0, #2
   337ec:	d103      	bne.n	337f6 <mpsc_pbuf_claim+0x52>
		return item->skip.len;
   337ee:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
   337f2:	08ad      	lsrs	r5, r5, #2
   337f4:	d105      	bne.n	33802 <mpsc_pbuf_claim+0x5e>
   337f6:	07d0      	lsls	r0, r2, #31
   337f8:	d412      	bmi.n	33820 <mpsc_pbuf_claim+0x7c>
					skip ? skip : buffer->get_wlen(item);
   337fa:	69a3      	ldr	r3, [r4, #24]
   337fc:	4638      	mov	r0, r7
   337fe:	4798      	blx	r3
   33800:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   33802:	68a1      	ldr	r1, [r4, #8]
   33804:	462a      	mov	r2, r5
   33806:	4620      	mov	r0, r4
   33808:	f7ff fe37 	bl	3347a <idx_inc>
				rd_idx_inc(buffer, inc);
   3380c:	4629      	mov	r1, r5
				buffer->tmp_rd_idx =
   3380e:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
   33810:	4620      	mov	r0, r4
   33812:	f7ff fe40 	bl	33496 <rd_idx_inc>
   33816:	f386 8811 	msr	BASEPRI, r6
   3381a:	f3bf 8f6f 	isb	sy
	} while (cont);
   3381e:	e7c3      	b.n	337a8 <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
   33820:	f042 0202 	orr.w	r2, r2, #2
   33824:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
						buffer->get_wlen(item));
   33828:	4638      	mov	r0, r7
   3382a:	69a3      	ldr	r3, [r4, #24]
					idx_inc(buffer, buffer->tmp_rd_idx,
   3382c:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
   3382e:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
   33830:	4629      	mov	r1, r5
						buffer->get_wlen(item));
   33832:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
   33834:	4620      	mov	r0, r4
   33836:	f7ff fe20 	bl	3347a <idx_inc>
				buffer->tmp_rd_idx =
   3383a:	60a0      	str	r0, [r4, #8]
   3383c:	f386 8811 	msr	BASEPRI, r6
   33840:	f3bf 8f6f 	isb	sy
}
   33844:	4638      	mov	r0, r7
   33846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00033848 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   33848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3384a:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   3384c:	6983      	ldr	r3, [r0, #24]
   3384e:	4608      	mov	r0, r1
{
   33850:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   33852:	4798      	blx	r3
   33854:	4606      	mov	r6, r0
	__asm__ volatile(
   33856:	f04f 0320 	mov.w	r3, #32
   3385a:	f3ef 8711 	mrs	r7, BASEPRI
   3385e:	f383 8812 	msr	BASEPRI_MAX, r3
   33862:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   33866:	782b      	ldrb	r3, [r5, #0]
   33868:	f36f 0300 	bfc	r3, #0, #1
   3386c:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   3386e:	6923      	ldr	r3, [r4, #16]
   33870:	079b      	lsls	r3, r3, #30
   33872:	d505      	bpl.n	33880 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   33874:	68e2      	ldr	r2, [r4, #12]
   33876:	69e3      	ldr	r3, [r4, #28]
   33878:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   3387c:	429d      	cmp	r5, r3
   3387e:	d11a      	bne.n	338b6 <mpsc_pbuf_free+0x6e>
		witem->hdr.busy = 0;
   33880:	782b      	ldrb	r3, [r5, #0]
   33882:	f36f 0341 	bfc	r3, #1, #1
   33886:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   33888:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   3388c:	4299      	cmp	r1, r3
   3388e:	d104      	bne.n	3389a <mpsc_pbuf_free+0x52>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
   33890:	4632      	mov	r2, r6
   33892:	4620      	mov	r0, r4
   33894:	f7ff fdf1 	bl	3347a <idx_inc>
   33898:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
   3389a:	4631      	mov	r1, r6
   3389c:	4620      	mov	r0, r4
   3389e:	f7ff fdfa 	bl	33496 <rd_idx_inc>
	__asm__ volatile(
   338a2:	f387 8811 	msr	BASEPRI, r7
   338a6:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   338aa:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   338ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   338b2:	f7fe b90f 	b.w	31ad4 <z_impl_k_sem_give>
		witem->skip.len = wlen;
   338b6:	682b      	ldr	r3, [r5, #0]
   338b8:	f360 039f 	bfi	r3, r0, #2, #30
   338bc:	602b      	str	r3, [r5, #0]
   338be:	e7f0      	b.n	338a2 <mpsc_pbuf_free+0x5a>

000338c0 <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   338c0:	6902      	ldr	r2, [r0, #16]
   338c2:	6883      	ldr	r3, [r0, #8]
   338c4:	0712      	lsls	r2, r2, #28
   338c6:	d402      	bmi.n	338ce <mpsc_pbuf_is_pending+0xe>
   338c8:	6842      	ldr	r2, [r0, #4]
   338ca:	429a      	cmp	r2, r3
   338cc:	d200      	bcs.n	338d0 <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
   338ce:	6a02      	ldr	r2, [r0, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   338d0:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   338d2:	1e18      	subs	r0, r3, #0
   338d4:	bf18      	it	ne
   338d6:	2001      	movne	r0, #1
   338d8:	4770      	bx	lr

000338da <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BOOTLOADER_BOSSA, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BOOTLOADER_BOSSA_LEGACY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   338da:	4770      	bx	lr

000338dc <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   338dc:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   338de:	075b      	lsls	r3, r3, #29
   338e0:	d40b      	bmi.n	338fa <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   338e2:	6803      	ldr	r3, [r0, #0]
   338e4:	8842      	ldrh	r2, [r0, #2]
   338e6:	f3c3 2349 	ubfx	r3, r3, #9, #10
   338ea:	f3c2 02cb 	ubfx	r2, r2, #3, #12
   338ee:	1898      	adds	r0, r3, r2
   338f0:	3017      	adds	r0, #23
   338f2:	f020 0007 	bic.w	r0, r0, #7
   338f6:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   338f8:	4770      	bx	lr
	return 0;
   338fa:	2000      	movs	r0, #0
}
   338fc:	4770      	bx	lr

000338fe <dummy_timestamp>:
}
   338fe:	2000      	movs	r0, #0
   33900:	4770      	bx	lr

00033902 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   33902:	f004 bcfa 	b.w	382fa <sys_clock_cycle_get_32>

00033906 <atomic_inc>:
{
   33906:	4603      	mov	r3, r0
}
   33908:	f3bf 8f5b 	dmb	ish
   3390c:	e853 0f00 	ldrex	r0, [r3]
   33910:	1c42      	adds	r2, r0, #1
   33912:	e843 2100 	strex	r1, r2, [r3]
   33916:	2900      	cmp	r1, #0
   33918:	d1f8      	bne.n	3390c <atomic_inc+0x6>
   3391a:	f3bf 8f5b 	dmb	ish
   3391e:	4770      	bx	lr

00033920 <z_log_vprintk>:
{
   33920:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   33922:	2300      	movs	r3, #0
   33924:	e9cd 0102 	strd	r0, r1, [sp, #8]
   33928:	e9cd 3300 	strd	r3, r3, [sp]
   3392c:	461a      	mov	r2, r3
   3392e:	4619      	mov	r1, r3
   33930:	4618      	mov	r0, r3
   33932:	f7df fc73 	bl	1321c <z_impl_z_log_msg_runtime_vcreate>
}
   33936:	b005      	add	sp, #20
   33938:	f85d fb04 	ldr.w	pc, [sp], #4

0003393c <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   3393c:	2001      	movs	r0, #1
   3393e:	f7df ba55 	b.w	12dec <z_log_dropped>

00033942 <z_log_get_tag>:
}
   33942:	2000      	movs	r0, #0
   33944:	4770      	bx	lr

00033946 <z_cbprintf_cpy>:
{
   33946:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   33948:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   3394c:	1b9b      	subs	r3, r3, r6
   3394e:	428b      	cmp	r3, r1
{
   33950:	460c      	mov	r4, r1
   33952:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   33954:	d30a      	bcc.n	3396c <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   33956:	6813      	ldr	r3, [r2, #0]
   33958:	460a      	mov	r2, r1
   3395a:	4601      	mov	r1, r0
   3395c:	1998      	adds	r0, r3, r6
   3395e:	f001 fdea 	bl	35536 <memcpy>
	desc->off += len;
   33962:	68ab      	ldr	r3, [r5, #8]
   33964:	4423      	add	r3, r4
   33966:	60ab      	str	r3, [r5, #8]
	return len;
   33968:	4620      	mov	r0, r4
}
   3396a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   3396c:	f06f 001b 	mvn.w	r0, #27
   33970:	e7fb      	b.n	3396a <z_cbprintf_cpy+0x24>

00033972 <z_log_msg_finalize>:
{
   33972:	b570      	push	{r4, r5, r6, lr}
   33974:	460e      	mov	r6, r1
   33976:	4615      	mov	r5, r2
   33978:	4619      	mov	r1, r3
	if (!msg) {
   3397a:	4604      	mov	r4, r0
   3397c:	b918      	cbnz	r0, 33986 <z_log_msg_finalize+0x14>
}
   3397e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   33982:	f7df ba33 	b.w	12dec <z_log_dropped>
	if (data) {
   33986:	b13b      	cbz	r3, 33998 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   33988:	f3c2 2349 	ubfx	r3, r2, #9, #10
   3398c:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
   3398e:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   33992:	4418      	add	r0, r3
   33994:	f001 fdcf 	bl	35536 <memcpy>
	msg->hdr.source = source;
   33998:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   3399c:	4620      	mov	r0, r4
}
   3399e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   339a2:	f7df bbb3 	b.w	1310c <z_log_msg_commit>

000339a6 <buffer_write>:
{
   339a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   339a8:	4606      	mov	r6, r0
   339aa:	460d      	mov	r5, r1
   339ac:	4614      	mov	r4, r2
   339ae:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   339b0:	4621      	mov	r1, r4
   339b2:	4628      	mov	r0, r5
   339b4:	463a      	mov	r2, r7
   339b6:	47b0      	blx	r6
	} while (len != 0);
   339b8:	1a24      	subs	r4, r4, r0
		buf += processed;
   339ba:	4405      	add	r5, r0
	} while (len != 0);
   339bc:	d1f8      	bne.n	339b0 <buffer_write+0xa>
}
   339be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000339c0 <cbvprintf>:
{
   339c0:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   339c2:	2400      	movs	r4, #0
   339c4:	9400      	str	r4, [sp, #0]
   339c6:	f7de fd8b 	bl	124e0 <z_cbvprintf_impl>
}
   339ca:	b002      	add	sp, #8
   339cc:	bd10      	pop	{r4, pc}

000339ce <log_output_flush>:
{
   339ce:	b510      	push	{r4, lr}
		     output->control_block->offset,
   339d0:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   339d2:	6881      	ldr	r1, [r0, #8]
{
   339d4:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   339d6:	e9d2 2300 	ldrd	r2, r3, [r2]
   339da:	6800      	ldr	r0, [r0, #0]
   339dc:	f7ff ffe3 	bl	339a6 <buffer_write>
	output->control_block->offset = 0;
   339e0:	6863      	ldr	r3, [r4, #4]
   339e2:	2200      	movs	r2, #0
   339e4:	601a      	str	r2, [r3, #0]
}
   339e6:	bd10      	pop	{r4, pc}

000339e8 <out_func>:
{
   339e8:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   339ea:	684b      	ldr	r3, [r1, #4]
   339ec:	681a      	ldr	r2, [r3, #0]
   339ee:	68cb      	ldr	r3, [r1, #12]
   339f0:	429a      	cmp	r2, r3
{
   339f2:	4605      	mov	r5, r0
   339f4:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   339f6:	d102      	bne.n	339fe <out_func+0x16>
		log_output_flush(out_ctx);
   339f8:	4608      	mov	r0, r1
   339fa:	f7ff ffe8 	bl	339ce <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   339fe:	6863      	ldr	r3, [r4, #4]
   33a00:	f3bf 8f5b 	dmb	ish
   33a04:	e853 2f00 	ldrex	r2, [r3]
   33a08:	1c51      	adds	r1, r2, #1
   33a0a:	e843 1000 	strex	r0, r1, [r3]
   33a0e:	2800      	cmp	r0, #0
   33a10:	d1f8      	bne.n	33a04 <out_func+0x1c>
   33a12:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   33a16:	68a3      	ldr	r3, [r4, #8]
   33a18:	549d      	strb	r5, [r3, r2]
}
   33a1a:	2000      	movs	r0, #0
   33a1c:	bd38      	pop	{r3, r4, r5, pc}

00033a1e <cr_out_func>:
	if (c == '\n') {
   33a1e:	280a      	cmp	r0, #10
{
   33a20:	b538      	push	{r3, r4, r5, lr}
   33a22:	4604      	mov	r4, r0
   33a24:	460d      	mov	r5, r1
	if (c == '\n') {
   33a26:	d102      	bne.n	33a2e <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   33a28:	200d      	movs	r0, #13
   33a2a:	f7ff ffdd 	bl	339e8 <out_func>
	out_func(c, ctx);
   33a2e:	4629      	mov	r1, r5
   33a30:	4620      	mov	r0, r4
   33a32:	f7ff ffd9 	bl	339e8 <out_func>
}
   33a36:	2000      	movs	r0, #0
   33a38:	bd38      	pop	{r3, r4, r5, pc}

00033a3a <log_backend_uart_init>:
}
   33a3a:	4770      	bx	lr

00033a3c <read_str>:
{
   33a3c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   33a40:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   33a44:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   33a46:	4640      	mov	r0, r8
{
   33a48:	461f      	mov	r7, r3
   33a4a:	460c      	mov	r4, r1
   33a4c:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   33a4e:	f001 fd32 	bl	354b6 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   33a52:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   33a56:	9300      	str	r3, [sp, #0]
   33a58:	b280      	uxth	r0, r0
   33a5a:	e9cd 8001 	strd	r8, r0, [sp, #4]
   33a5e:	463b      	mov	r3, r7
   33a60:	4632      	mov	r2, r6
   33a62:	4621      	mov	r1, r4
   33a64:	4628      	mov	r0, r5
   33a66:	f003 fa44 	bl	36ef2 <bt_gatt_attr_read>
}
   33a6a:	b004      	add	sp, #16
   33a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00033a70 <nvs_flash_rd>:
{
   33a70:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   33a72:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   33a74:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   33a76:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   33a78:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   33a7a:	fa16 f181 	uxtah	r1, r6, r1
   33a7e:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   33a82:	6884      	ldr	r4, [r0, #8]
   33a84:	6824      	ldr	r4, [r4, #0]
   33a86:	46a4      	mov	ip, r4
}
   33a88:	bc70      	pop	{r4, r5, r6}
   33a8a:	4760      	bx	ip

00033a8c <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
   33a8c:	680b      	ldr	r3, [r1, #0]
   33a8e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   33a92:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   33a94:	89c0      	ldrh	r0, [r0, #14]
   33a96:	0c1a      	lsrs	r2, r3, #16
   33a98:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   33a9c:	bf04      	itt	eq
   33a9e:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   33aa2:	600b      	streq	r3, [r1, #0]
}
   33aa4:	4770      	bx	lr

00033aa6 <nvs_flash_block_cmp>:
{
   33aa6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   33aaa:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   33aac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   33aae:	681d      	ldr	r5, [r3, #0]
   33ab0:	426d      	negs	r5, r5
{
   33ab2:	b089      	sub	sp, #36	; 0x24
   33ab4:	4681      	mov	r9, r0
   33ab6:	460e      	mov	r6, r1
   33ab8:	4617      	mov	r7, r2
	block_size =
   33aba:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   33abe:	b91c      	cbnz	r4, 33ac8 <nvs_flash_block_cmp+0x22>
	return 0;
   33ac0:	4620      	mov	r0, r4
}
   33ac2:	b009      	add	sp, #36	; 0x24
   33ac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   33ac8:	42ac      	cmp	r4, r5
   33aca:	46a0      	mov	r8, r4
   33acc:	bf28      	it	cs
   33ace:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   33ad0:	4643      	mov	r3, r8
   33ad2:	466a      	mov	r2, sp
   33ad4:	4631      	mov	r1, r6
   33ad6:	4648      	mov	r0, r9
   33ad8:	f7ff ffca 	bl	33a70 <nvs_flash_rd>
		if (rc) {
   33adc:	2800      	cmp	r0, #0
   33ade:	d1f0      	bne.n	33ac2 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   33ae0:	4642      	mov	r2, r8
   33ae2:	4669      	mov	r1, sp
   33ae4:	4638      	mov	r0, r7
   33ae6:	f001 fd16 	bl	35516 <memcmp>
		if (rc) {
   33aea:	b920      	cbnz	r0, 33af6 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   33aec:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   33af0:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   33af2:	4447      	add	r7, r8
   33af4:	e7e3      	b.n	33abe <nvs_flash_block_cmp+0x18>
			return 1;
   33af6:	2001      	movs	r0, #1
   33af8:	e7e3      	b.n	33ac2 <nvs_flash_block_cmp+0x1c>

00033afa <nvs_flash_cmp_const>:
{
   33afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33afe:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   33b00:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   33b02:	681d      	ldr	r5, [r3, #0]
   33b04:	426d      	negs	r5, r5
{
   33b06:	b088      	sub	sp, #32
	block_size =
   33b08:	f005 0520 	and.w	r5, r5, #32
{
   33b0c:	4607      	mov	r7, r0
   33b0e:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   33b10:	4668      	mov	r0, sp
{
   33b12:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   33b14:	462a      	mov	r2, r5
   33b16:	f001 fd19 	bl	3554c <memset>
	while (len) {
   33b1a:	b91c      	cbnz	r4, 33b24 <nvs_flash_cmp_const+0x2a>
	return 0;
   33b1c:	4620      	mov	r0, r4
}
   33b1e:	b008      	add	sp, #32
   33b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   33b24:	42ac      	cmp	r4, r5
   33b26:	46a0      	mov	r8, r4
   33b28:	bf28      	it	cs
   33b2a:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   33b2c:	4643      	mov	r3, r8
   33b2e:	466a      	mov	r2, sp
   33b30:	4631      	mov	r1, r6
   33b32:	4638      	mov	r0, r7
   33b34:	f7ff ffb7 	bl	33aa6 <nvs_flash_block_cmp>
		if (rc) {
   33b38:	2800      	cmp	r0, #0
   33b3a:	d1f0      	bne.n	33b1e <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   33b3c:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   33b40:	4446      	add	r6, r8
   33b42:	e7ea      	b.n	33b1a <nvs_flash_cmp_const+0x20>

00033b44 <nvs_flash_erase_sector>:
{
   33b44:	b538      	push	{r3, r4, r5, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   33b46:	8982      	ldrh	r2, [r0, #12]
   33b48:	6803      	ldr	r3, [r0, #0]
	addr &= ADDR_SECT_MASK;
   33b4a:	0c0d      	lsrs	r5, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   33b4c:	0c09      	lsrs	r1, r1, #16
{
   33b4e:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
   33b50:	042d      	lsls	r5, r5, #16
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   33b52:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   33b54:	fb02 3101 	mla	r1, r2, r1, r3
	rc = api->erase(dev, offset, size);
   33b58:	6883      	ldr	r3, [r0, #8]
   33b5a:	689b      	ldr	r3, [r3, #8]
   33b5c:	4798      	blx	r3
	if (rc) {
   33b5e:	b950      	cbnz	r0, 33b76 <nvs_flash_erase_sector+0x32>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   33b60:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   33b62:	89a3      	ldrh	r3, [r4, #12]
   33b64:	7912      	ldrb	r2, [r2, #4]
   33b66:	4629      	mov	r1, r5
   33b68:	4620      	mov	r0, r4
   33b6a:	f7ff ffc6 	bl	33afa <nvs_flash_cmp_const>
		rc = -ENXIO;
   33b6e:	2800      	cmp	r0, #0
   33b70:	bf18      	it	ne
   33b72:	f06f 0005 	mvnne.w	r0, #5
}
   33b76:	bd38      	pop	{r3, r4, r5, pc}

00033b78 <nvs_ate_crc8_update>:
{
   33b78:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   33b7a:	4601      	mov	r1, r0
{
   33b7c:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   33b7e:	2207      	movs	r2, #7
   33b80:	20ff      	movs	r0, #255	; 0xff
   33b82:	f7de fc97 	bl	124b4 <crc8_ccitt>
	entry->crc8 = crc8;
   33b86:	71e0      	strb	r0, [r4, #7]
}
   33b88:	bd10      	pop	{r4, pc}

00033b8a <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
   33b8a:	2300      	movs	r3, #0
   33b8c:	f7df baf2 	b.w	13174 <z_impl_z_log_msg_static_create>

00033b90 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   33b90:	7803      	ldrb	r3, [r0, #0]
   33b92:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   33b94:	bf81      	itttt	hi
   33b96:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   33b9a:	18c9      	addhi	r1, r1, r3
   33b9c:	425b      	neghi	r3, r3
   33b9e:	4019      	andhi	r1, r3
}
   33ba0:	4608      	mov	r0, r1
   33ba2:	4770      	bx	lr

00033ba4 <nvs_ate_valid>:
{
   33ba4:	b570      	push	{r4, r5, r6, lr}
   33ba6:	460c      	mov	r4, r1
   33ba8:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   33baa:	2108      	movs	r1, #8
   33bac:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   33bae:	f7ff ffef 	bl	33b90 <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   33bb2:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   33bb4:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   33bb6:	4621      	mov	r1, r4
   33bb8:	20ff      	movs	r0, #255	; 0xff
   33bba:	f7de fc7b 	bl	124b4 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   33bbe:	79e3      	ldrb	r3, [r4, #7]
   33bc0:	4283      	cmp	r3, r0
   33bc2:	d107      	bne.n	33bd4 <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   33bc4:	89aa      	ldrh	r2, [r5, #12]
   33bc6:	8863      	ldrh	r3, [r4, #2]
   33bc8:	1b90      	subs	r0, r2, r6
	if ((nvs_ate_crc8_check(entry)) ||
   33bca:	4283      	cmp	r3, r0
   33bcc:	bf2c      	ite	cs
   33bce:	2000      	movcs	r0, #0
   33bd0:	2001      	movcc	r0, #1
}
   33bd2:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   33bd4:	2000      	movs	r0, #0
   33bd6:	e7fc      	b.n	33bd2 <nvs_ate_valid+0x2e>

00033bd8 <nvs_close_ate_valid>:
{
   33bd8:	b538      	push	{r3, r4, r5, lr}
   33bda:	4605      	mov	r5, r0
   33bdc:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   33bde:	f7ff ffe1 	bl	33ba4 <nvs_ate_valid>
   33be2:	b1a0      	cbz	r0, 33c0e <nvs_close_ate_valid+0x36>
   33be4:	88a0      	ldrh	r0, [r4, #4]
   33be6:	b998      	cbnz	r0, 33c10 <nvs_close_ate_valid+0x38>
   33be8:	8822      	ldrh	r2, [r4, #0]
   33bea:	f64f 73ff 	movw	r3, #65535	; 0xffff
   33bee:	429a      	cmp	r2, r3
   33bf0:	d10d      	bne.n	33c0e <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   33bf2:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   33bf4:	2108      	movs	r1, #8
   33bf6:	f7ff ffcb 	bl	33b90 <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   33bfa:	8862      	ldrh	r2, [r4, #2]
   33bfc:	89ab      	ldrh	r3, [r5, #12]
   33bfe:	1a9b      	subs	r3, r3, r2
   33c00:	fbb3 f2f0 	udiv	r2, r3, r0
   33c04:	fb02 3010 	mls	r0, r2, r0, r3
   33c08:	fab0 f080 	clz	r0, r0
   33c0c:	0940      	lsrs	r0, r0, #5
}
   33c0e:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   33c10:	2000      	movs	r0, #0
   33c12:	e7fc      	b.n	33c0e <nvs_close_ate_valid+0x36>

00033c14 <nvs_prev_ate>:
{
   33c14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   33c16:	4604      	mov	r4, r0
   33c18:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   33c1a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   33c1c:	2108      	movs	r1, #8
   33c1e:	f7ff ffb7 	bl	33b90 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   33c22:	6829      	ldr	r1, [r5, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   33c24:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   33c26:	2308      	movs	r3, #8
   33c28:	4620      	mov	r0, r4
   33c2a:	f7ff ff21 	bl	33a70 <nvs_flash_rd>
	if (rc) {
   33c2e:	4606      	mov	r6, r0
   33c30:	2800      	cmp	r0, #0
   33c32:	d136      	bne.n	33ca2 <nvs_prev_ate+0x8e>
	*addr += ate_size;
   33c34:	682b      	ldr	r3, [r5, #0]
   33c36:	443b      	add	r3, r7
   33c38:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   33c3a:	89a2      	ldrh	r2, [r4, #12]
   33c3c:	b299      	uxth	r1, r3
   33c3e:	1bd2      	subs	r2, r2, r7
   33c40:	4291      	cmp	r1, r2
   33c42:	d12e      	bne.n	33ca2 <nvs_prev_ate+0x8e>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   33c44:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   33c46:	bf03      	ittte	eq
   33c48:	89e2      	ldrheq	r2, [r4, #14]
   33c4a:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
   33c4e:	eb03 4102 	addeq.w	r1, r3, r2, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   33c52:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   33c56:	6029      	str	r1, [r5, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   33c58:	2308      	movs	r3, #8
   33c5a:	466a      	mov	r2, sp
   33c5c:	4620      	mov	r0, r4
   33c5e:	f7ff ff07 	bl	33a70 <nvs_flash_rd>
	if (rc) {
   33c62:	b9e8      	cbnz	r0, 33ca0 <nvs_prev_ate+0x8c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   33c64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   33c66:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   33c68:	466b      	mov	r3, sp
		if (data8[i] != value) {
   33c6a:	f813 1b01 	ldrb.w	r1, [r3], #1
   33c6e:	428a      	cmp	r2, r1
   33c70:	d10c      	bne.n	33c8c <nvs_prev_ate+0x78>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   33c72:	3001      	adds	r0, #1
   33c74:	2808      	cmp	r0, #8
   33c76:	d1f8      	bne.n	33c6a <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   33c78:	6863      	ldr	r3, [r4, #4]
   33c7a:	e005      	b.n	33c88 <nvs_prev_ate+0x74>
		(*addr) &= ADDR_SECT_MASK;
   33c7c:	682b      	ldr	r3, [r5, #0]
		(*addr) += close_ate.offset;
   33c7e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   33c82:	0c1b      	lsrs	r3, r3, #16
   33c84:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   33c86:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   33c88:	602b      	str	r3, [r5, #0]
		return 0;
   33c8a:	e00a      	b.n	33ca2 <nvs_prev_ate+0x8e>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   33c8c:	4669      	mov	r1, sp
   33c8e:	4620      	mov	r0, r4
   33c90:	f7ff ffa2 	bl	33bd8 <nvs_close_ate_valid>
   33c94:	2800      	cmp	r0, #0
   33c96:	d1f1      	bne.n	33c7c <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   33c98:	4629      	mov	r1, r5
   33c9a:	4620      	mov	r0, r4
   33c9c:	f7df fd3a 	bl	13714 <nvs_recover_last_ate>
   33ca0:	4606      	mov	r6, r0
}
   33ca2:	4630      	mov	r0, r6
   33ca4:	b003      	add	sp, #12
   33ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00033ca8 <nvs_flash_al_wrt>:
{
   33ca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   33cac:	4607      	mov	r7, r0
   33cae:	b089      	sub	sp, #36	; 0x24
   33cb0:	4690      	mov	r8, r2
	if (!len) {
   33cb2:	461e      	mov	r6, r3
   33cb4:	b91b      	cbnz	r3, 33cbe <nvs_flash_al_wrt+0x16>
		return 0;
   33cb6:	2000      	movs	r0, #0
}
   33cb8:	b009      	add	sp, #36	; 0x24
   33cba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	offset += addr & ADDR_OFFS_MASK;
   33cbe:	683c      	ldr	r4, [r7, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   33cc0:	8983      	ldrh	r3, [r0, #12]
   33cc2:	0c08      	lsrs	r0, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   33cc4:	fa14 f181 	uxtah	r1, r4, r1
   33cc8:	fb00 1403 	mla	r4, r0, r3, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   33ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   33cce:	681d      	ldr	r5, [r3, #0]
   33cd0:	426d      	negs	r5, r5
	if (blen > 0) {
   33cd2:	4035      	ands	r5, r6
   33cd4:	d00c      	beq.n	33cf0 <nvs_flash_al_wrt+0x48>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   33cd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   33cd8:	6883      	ldr	r3, [r0, #8]
   33cda:	4621      	mov	r1, r4
   33cdc:	f8d3 9004 	ldr.w	r9, [r3, #4]
   33ce0:	462b      	mov	r3, r5
   33ce2:	47c8      	blx	r9
		if (rc) {
   33ce4:	2800      	cmp	r0, #0
   33ce6:	d1e7      	bne.n	33cb8 <nvs_flash_al_wrt+0x10>
	if (len) {
   33ce8:	1b76      	subs	r6, r6, r5
   33cea:	d0e4      	beq.n	33cb6 <nvs_flash_al_wrt+0xe>
		offset += blen;
   33cec:	442c      	add	r4, r5
		data8 += blen;
   33cee:	44a8      	add	r8, r5
		memcpy(buf, data8, len);
   33cf0:	4632      	mov	r2, r6
   33cf2:	4641      	mov	r1, r8
   33cf4:	4668      	mov	r0, sp
   33cf6:	f001 fc1e 	bl	35536 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   33cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   33cfc:	681a      	ldr	r2, [r3, #0]
   33cfe:	7919      	ldrb	r1, [r3, #4]
   33d00:	1b92      	subs	r2, r2, r6
   33d02:	eb0d 0006 	add.w	r0, sp, r6
   33d06:	f001 fc21 	bl	3554c <memset>
				 fs->flash_parameters->write_block_size);
   33d0a:	e9d7 030a 	ldrd	r0, r3, [r7, #40]	; 0x28
   33d0e:	681b      	ldr	r3, [r3, #0]
   33d10:	6882      	ldr	r2, [r0, #8]
   33d12:	4621      	mov	r1, r4
   33d14:	6855      	ldr	r5, [r2, #4]
   33d16:	466a      	mov	r2, sp
   33d18:	47a8      	blx	r5
	return rc;
   33d1a:	e7cd      	b.n	33cb8 <nvs_flash_al_wrt+0x10>

00033d1c <nvs_flash_ate_wrt>:
{
   33d1c:	b510      	push	{r4, lr}
   33d1e:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   33d20:	2308      	movs	r3, #8
   33d22:	6841      	ldr	r1, [r0, #4]
{
   33d24:	4604      	mov	r4, r0
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   33d26:	f7ff ffbf 	bl	33ca8 <nvs_flash_al_wrt>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   33d2a:	2108      	movs	r1, #8
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   33d2c:	4602      	mov	r2, r0
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   33d2e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   33d30:	f7ff ff2e 	bl	33b90 <nvs_al_size.isra.0>
   33d34:	6863      	ldr	r3, [r4, #4]
   33d36:	1a1b      	subs	r3, r3, r0
   33d38:	6063      	str	r3, [r4, #4]
}
   33d3a:	4610      	mov	r0, r2
   33d3c:	bd10      	pop	{r4, pc}

00033d3e <nvs_add_gc_done_ate>:
{
   33d3e:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   33d40:	f64f 73ff 	movw	r3, #65535	; 0xffff
   33d44:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   33d48:	2300      	movs	r3, #0
{
   33d4a:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   33d4c:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   33d50:	6883      	ldr	r3, [r0, #8]
   33d52:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   33d56:	4668      	mov	r0, sp
   33d58:	f7ff ff0e 	bl	33b78 <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   33d5c:	4669      	mov	r1, sp
   33d5e:	4620      	mov	r0, r4
   33d60:	f7ff ffdc 	bl	33d1c <nvs_flash_ate_wrt>
}
   33d64:	b002      	add	sp, #8
   33d66:	bd10      	pop	{r4, pc}

00033d68 <nvs_gc>:
{
   33d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33d6c:	4604      	mov	r4, r0
   33d6e:	b095      	sub	sp, #84	; 0x54
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   33d70:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   33d72:	2108      	movs	r1, #8
   33d74:	f7ff ff0c 	bl	33b90 <nvs_al_size.isra.0>
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   33d78:	6863      	ldr	r3, [r4, #4]
   33d7a:	0c1b      	lsrs	r3, r3, #16
   33d7c:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   33d7e:	4605      	mov	r5, r0
	nvs_sector_advance(fs, &sec_addr);
   33d80:	a903      	add	r1, sp, #12
   33d82:	4620      	mov	r0, r4
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   33d84:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   33d86:	f7ff fe81 	bl	33a8c <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   33d8a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   33d8e:	89a6      	ldrh	r6, [r4, #12]
   33d90:	445e      	add	r6, fp
   33d92:	1b76      	subs	r6, r6, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   33d94:	aa06      	add	r2, sp, #24
   33d96:	2308      	movs	r3, #8
   33d98:	4631      	mov	r1, r6
   33d9a:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   33d9c:	9604      	str	r6, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   33d9e:	f7ff fe67 	bl	33a70 <nvs_flash_rd>
	if (rc < 0) {
   33da2:	1e02      	subs	r2, r0, #0
   33da4:	f2c0 80a9 	blt.w	33efa <nvs_gc+0x192>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   33da8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   33daa:	aa06      	add	r2, sp, #24
   33dac:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   33dae:	2300      	movs	r3, #0
		if (data8[i] != value) {
   33db0:	f812 0b01 	ldrb.w	r0, [r2], #1
   33db4:	4281      	cmp	r1, r0
   33db6:	f040 808f 	bne.w	33ed8 <nvs_gc+0x170>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   33dba:	3301      	adds	r3, #1
   33dbc:	2b08      	cmp	r3, #8
   33dbe:	d1f7      	bne.n	33db0 <nvs_gc+0x48>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   33dc0:	68a3      	ldr	r3, [r4, #8]
   33dc2:	6862      	ldr	r2, [r4, #4]
   33dc4:	442b      	add	r3, r5
   33dc6:	429a      	cmp	r2, r3
   33dc8:	d27e      	bcs.n	33ec8 <nvs_gc+0x160>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   33dca:	4659      	mov	r1, fp
   33dcc:	4620      	mov	r0, r4
   33dce:	f7ff feb9 	bl	33b44 <nvs_flash_erase_sector>
   33dd2:	4602      	mov	r2, r0
	if (rc) {
   33dd4:	e091      	b.n	33efa <nvs_gc+0x192>
		gc_addr += close_ate.offset;
   33dd6:	f8bd 301a 	ldrh.w	r3, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
   33dda:	0c36      	lsrs	r6, r6, #16
   33ddc:	0436      	lsls	r6, r6, #16
		gc_addr += close_ate.offset;
   33dde:	441e      	add	r6, r3
   33de0:	9604      	str	r6, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   33de2:	aa08      	add	r2, sp, #32
   33de4:	a904      	add	r1, sp, #16
   33de6:	4620      	mov	r0, r4
		gc_prev_addr = gc_addr;
   33de8:	f8dd a010 	ldr.w	sl, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   33dec:	f7ff ff12 	bl	33c14 <nvs_prev_ate>
		if (rc) {
   33df0:	4602      	mov	r2, r0
   33df2:	2800      	cmp	r0, #0
   33df4:	f040 8081 	bne.w	33efa <nvs_gc+0x192>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   33df8:	a908      	add	r1, sp, #32
   33dfa:	4620      	mov	r0, r4
   33dfc:	f7ff fed2 	bl	33ba4 <nvs_ate_valid>
   33e00:	b918      	cbnz	r0, 33e0a <nvs_gc+0xa2>
	} while (gc_prev_addr != stop_addr);
   33e02:	9b01      	ldr	r3, [sp, #4]
   33e04:	459a      	cmp	sl, r3
   33e06:	d1ec      	bne.n	33de2 <nvs_gc+0x7a>
   33e08:	e7da      	b.n	33dc0 <nvs_gc+0x58>
		wlk_addr = fs->ate_wra;
   33e0a:	6863      	ldr	r3, [r4, #4]
   33e0c:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   33e0e:	aa0a      	add	r2, sp, #40	; 0x28
   33e10:	a905      	add	r1, sp, #20
   33e12:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
   33e14:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   33e16:	f7ff fefd 	bl	33c14 <nvs_prev_ate>
			if (rc) {
   33e1a:	4602      	mov	r2, r0
   33e1c:	2800      	cmp	r0, #0
   33e1e:	d16c      	bne.n	33efa <nvs_gc+0x192>
			if ((wlk_ate.id == gc_ate.id) &&
   33e20:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   33e24:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   33e28:	429a      	cmp	r2, r3
   33e2a:	d027      	beq.n	33e7c <nvs_gc+0x114>
		} while (wlk_addr != fs->ate_wra);
   33e2c:	6862      	ldr	r2, [r4, #4]
   33e2e:	9b05      	ldr	r3, [sp, #20]
   33e30:	429a      	cmp	r2, r3
   33e32:	d1ec      	bne.n	33e0e <nvs_gc+0xa6>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   33e34:	4556      	cmp	r6, sl
   33e36:	d1e4      	bne.n	33e02 <nvs_gc+0x9a>
   33e38:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   33e3c:	2b00      	cmp	r3, #0
   33e3e:	d0e0      	beq.n	33e02 <nvs_gc+0x9a>
			data_addr += gc_ate.offset;
   33e40:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   33e44:	ea4f 431a 	mov.w	r3, sl, lsr #16
   33e48:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
   33e4a:	441f      	add	r7, r3
			nvs_ate_crc8_update(&gc_ate);
   33e4c:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   33e4e:	68a3      	ldr	r3, [r4, #8]
   33e50:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
   33e54:	f7ff fe90 	bl	33b78 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   33e58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   33e5a:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   33e5e:	681e      	ldr	r6, [r3, #0]
   33e60:	4276      	negs	r6, r6
	block_size =
   33e62:	f006 0620 	and.w	r6, r6, #32
	while (len) {
   33e66:	f1b9 0f00 	cmp.w	r9, #0
   33e6a:	d10e      	bne.n	33e8a <nvs_gc+0x122>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   33e6c:	a908      	add	r1, sp, #32
   33e6e:	4620      	mov	r0, r4
   33e70:	f7ff ff54 	bl	33d1c <nvs_flash_ate_wrt>
			if (rc) {
   33e74:	4602      	mov	r2, r0
   33e76:	2800      	cmp	r0, #0
   33e78:	d0c3      	beq.n	33e02 <nvs_gc+0x9a>
   33e7a:	e03e      	b.n	33efa <nvs_gc+0x192>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   33e7c:	a90a      	add	r1, sp, #40	; 0x28
   33e7e:	4620      	mov	r0, r4
   33e80:	f7ff fe90 	bl	33ba4 <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   33e84:	2800      	cmp	r0, #0
   33e86:	d0d1      	beq.n	33e2c <nvs_gc+0xc4>
   33e88:	e7d4      	b.n	33e34 <nvs_gc+0xcc>
		bytes_to_copy = MIN(block_size, len);
   33e8a:	454e      	cmp	r6, r9
   33e8c:	46b0      	mov	r8, r6
   33e8e:	bf28      	it	cs
   33e90:	46c8      	movcs	r8, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   33e92:	aa0c      	add	r2, sp, #48	; 0x30
   33e94:	4643      	mov	r3, r8
   33e96:	4639      	mov	r1, r7
   33e98:	4620      	mov	r0, r4
   33e9a:	f7ff fde9 	bl	33a70 <nvs_flash_rd>
		if (rc) {
   33e9e:	4602      	mov	r2, r0
   33ea0:	bb58      	cbnz	r0, 33efa <nvs_gc+0x192>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   33ea2:	4643      	mov	r3, r8
   33ea4:	68a1      	ldr	r1, [r4, #8]
   33ea6:	aa0c      	add	r2, sp, #48	; 0x30
   33ea8:	4620      	mov	r0, r4
   33eaa:	f7ff fefd 	bl	33ca8 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   33eae:	4641      	mov	r1, r8
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   33eb0:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   33eb2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   33eb4:	f7ff fe6c 	bl	33b90 <nvs_al_size.isra.0>
   33eb8:	68a3      	ldr	r3, [r4, #8]
   33eba:	4403      	add	r3, r0
   33ebc:	60a3      	str	r3, [r4, #8]
		if (rc) {
   33ebe:	b9e2      	cbnz	r2, 33efa <nvs_gc+0x192>
		len -= bytes_to_copy;
   33ec0:	eba9 0908 	sub.w	r9, r9, r8
		addr += bytes_to_copy;
   33ec4:	4447      	add	r7, r8
   33ec6:	e7ce      	b.n	33e66 <nvs_gc+0xfe>
		rc = nvs_add_gc_done_ate(fs);
   33ec8:	4620      	mov	r0, r4
   33eca:	f7ff ff38 	bl	33d3e <nvs_add_gc_done_ate>
		if (rc) {
   33ece:	4602      	mov	r2, r0
   33ed0:	2800      	cmp	r0, #0
   33ed2:	f43f af7a 	beq.w	33dca <nvs_gc+0x62>
   33ed6:	e010      	b.n	33efa <nvs_gc+0x192>
	stop_addr = gc_addr - ate_size;
   33ed8:	1b73      	subs	r3, r6, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   33eda:	a906      	add	r1, sp, #24
   33edc:	4620      	mov	r0, r4
	stop_addr = gc_addr - ate_size;
   33ede:	9301      	str	r3, [sp, #4]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   33ee0:	f7ff fe7a 	bl	33bd8 <nvs_close_ate_valid>
   33ee4:	2800      	cmp	r0, #0
   33ee6:	f47f af76 	bne.w	33dd6 <nvs_gc+0x6e>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   33eea:	a904      	add	r1, sp, #16
   33eec:	4620      	mov	r0, r4
   33eee:	f7df fc11 	bl	13714 <nvs_recover_last_ate>
		if (rc) {
   33ef2:	4602      	mov	r2, r0
   33ef4:	2800      	cmp	r0, #0
   33ef6:	f43f af74 	beq.w	33de2 <nvs_gc+0x7a>
}
   33efa:	4610      	mov	r0, r2
   33efc:	b015      	add	sp, #84	; 0x54
   33efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00033f02 <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   33f02:	2300      	movs	r3, #0
   33f04:	461a      	mov	r2, r3
   33f06:	f7df be37 	b.w	13b78 <nvs_write>

00033f0a <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   33f0a:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   33f0c:	2400      	movs	r4, #0
   33f0e:	9400      	str	r4, [sp, #0]
   33f10:	f7df ff1a 	bl	13d48 <nvs_read_hist>
	return rc;
}
   33f14:	b002      	add	sp, #8
   33f16:	bd10      	pop	{r4, pc}

00033f18 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   33f18:	4770      	bx	lr

00033f1a <get_sectors_cb>:
{
   33f1a:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   33f1c:	684c      	ldr	r4, [r1, #4]
   33f1e:	6803      	ldr	r3, [r0, #0]
   33f20:	42a3      	cmp	r3, r4
   33f22:	d201      	bcs.n	33f28 <get_sectors_cb+0xe>
		*bail_value = true;
   33f24:	2001      	movs	r0, #1
}
   33f26:	bd70      	pop	{r4, r5, r6, pc}
	} else if (info->start_offset >= data->area_off + data->area_len) {
   33f28:	688a      	ldr	r2, [r1, #8]
   33f2a:	4422      	add	r2, r4
   33f2c:	4293      	cmp	r3, r2
   33f2e:	d301      	bcc.n	33f34 <get_sectors_cb+0x1a>
		*bail_value = false;
   33f30:	2000      	movs	r0, #0
   33f32:	e7f8      	b.n	33f26 <get_sectors_cb+0xc>
	} else if (data->ret_idx >= data->ret_len) {
   33f34:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
   33f38:	694e      	ldr	r6, [r1, #20]
   33f3a:	42b5      	cmp	r5, r6
   33f3c:	d303      	bcc.n	33f46 <get_sectors_cb+0x2c>
		data->status = -ENOMEM;
   33f3e:	f06f 030b 	mvn.w	r3, #11
   33f42:	618b      	str	r3, [r1, #24]
		return true;
   33f44:	e7f4      	b.n	33f30 <get_sectors_cb+0x16>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   33f46:	1b1b      	subs	r3, r3, r4
   33f48:	f842 3035 	str.w	r3, [r2, r5, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   33f4c:	6843      	ldr	r3, [r0, #4]
   33f4e:	6908      	ldr	r0, [r1, #16]
   33f50:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   33f54:	6053      	str	r3, [r2, #4]
	data->ret_idx++;
   33f56:	690b      	ldr	r3, [r1, #16]
   33f58:	3301      	adds	r3, #1
   33f5a:	610b      	str	r3, [r1, #16]
	return true;
   33f5c:	e7e2      	b.n	33f24 <get_sectors_cb+0xa>

00033f5e <settings_load>:
	return settings_load_subtree(NULL);
   33f5e:	2000      	movs	r0, #0
   33f60:	f7df bffa 	b.w	13f58 <settings_load_subtree>

00033f64 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   33f64:	2200      	movs	r2, #0
   33f66:	4611      	mov	r1, r2
   33f68:	f7df bfbc 	b.w	13ee4 <settings_save_one>

00033f6c <settings_name_steq>:
{
   33f6c:	4603      	mov	r3, r0
   33f6e:	b510      	push	{r4, lr}
   33f70:	4608      	mov	r0, r1
	if (next) {
   33f72:	b10a      	cbz	r2, 33f78 <settings_name_steq+0xc>
		*next = NULL;
   33f74:	2100      	movs	r1, #0
   33f76:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   33f78:	b153      	cbz	r3, 33f90 <settings_name_steq+0x24>
   33f7a:	b1d0      	cbz	r0, 33fb2 <settings_name_steq+0x46>
   33f7c:	1e41      	subs	r1, r0, #1
	while ((*key != '\0') && (*key == *name) &&
   33f7e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   33f82:	b180      	cbz	r0, 33fa6 <settings_name_steq+0x3a>
	while ((*key != '\0') && (*key == *name) &&
   33f84:	f813 4b01 	ldrb.w	r4, [r3], #1
   33f88:	42a0      	cmp	r0, r4
   33f8a:	d101      	bne.n	33f90 <settings_name_steq+0x24>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   33f8c:	283d      	cmp	r0, #61	; 0x3d
   33f8e:	d1f6      	bne.n	33f7e <settings_name_steq+0x12>
		return 0;
   33f90:	2000      	movs	r0, #0
   33f92:	e00e      	b.n	33fb2 <settings_name_steq+0x46>
			*next = name + 1;
   33f94:	3301      	adds	r3, #1
   33f96:	6013      	str	r3, [r2, #0]
   33f98:	e00a      	b.n	33fb0 <settings_name_steq+0x44>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   33f9a:	283d      	cmp	r0, #61	; 0x3d
   33f9c:	d008      	beq.n	33fb0 <settings_name_steq+0x44>
   33f9e:	fab0 f080 	clz	r0, r0
   33fa2:	0940      	lsrs	r0, r0, #5
   33fa4:	e005      	b.n	33fb2 <settings_name_steq+0x46>
	if (*name == SETTINGS_NAME_SEPARATOR) {
   33fa6:	7818      	ldrb	r0, [r3, #0]
   33fa8:	282f      	cmp	r0, #47	; 0x2f
   33faa:	d1f6      	bne.n	33f9a <settings_name_steq+0x2e>
		if (next) {
   33fac:	2a00      	cmp	r2, #0
   33fae:	d1f1      	bne.n	33f94 <settings_name_steq+0x28>
		return 1;
   33fb0:	2001      	movs	r0, #1
}
   33fb2:	bd10      	pop	{r4, pc}

00033fb4 <settings_name_next>:
{
   33fb4:	b510      	push	{r4, lr}
	if (next) {
   33fb6:	b109      	cbz	r1, 33fbc <settings_name_next+0x8>
		*next = NULL;
   33fb8:	2300      	movs	r3, #0
   33fba:	600b      	str	r3, [r1, #0]
	if (!name) {
   33fbc:	b158      	cbz	r0, 33fd6 <settings_name_next+0x22>
   33fbe:	4603      	mov	r3, r0
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   33fc0:	781a      	ldrb	r2, [r3, #0]
   33fc2:	461c      	mov	r4, r3
   33fc4:	3301      	adds	r3, #1
   33fc6:	b12a      	cbz	r2, 33fd4 <settings_name_next+0x20>
   33fc8:	2a3d      	cmp	r2, #61	; 0x3d
   33fca:	d003      	beq.n	33fd4 <settings_name_next+0x20>
   33fcc:	2a2f      	cmp	r2, #47	; 0x2f
   33fce:	d1f7      	bne.n	33fc0 <settings_name_next+0xc>
		if (next) {
   33fd0:	b101      	cbz	r1, 33fd4 <settings_name_next+0x20>
			*next = name + 1;
   33fd2:	600b      	str	r3, [r1, #0]
   33fd4:	1a20      	subs	r0, r4, r0
}
   33fd6:	bd10      	pop	{r4, pc}

00033fd8 <settings_nvs_storage_get>:
static void *settings_nvs_storage_get(struct settings_store *cs)
{
	struct settings_nvs *cf = CONTAINER_OF(cs, struct settings_nvs, cf_store);

	return &cf->cf_nvs;
}
   33fd8:	3008      	adds	r0, #8
   33fda:	4770      	bx	lr

00033fdc <settings_nvs_read_fn>:
{
   33fdc:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   33fde:	4613      	mov	r3, r2
{
   33fe0:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   33fe2:	460a      	mov	r2, r1
   33fe4:	8881      	ldrh	r1, [r0, #4]
   33fe6:	6800      	ldr	r0, [r0, #0]
   33fe8:	f7ff ff8f 	bl	33f0a <nvs_read>
}
   33fec:	42a0      	cmp	r0, r4
   33fee:	bfa8      	it	ge
   33ff0:	4620      	movge	r0, r4
   33ff2:	bd10      	pop	{r4, pc}

00033ff4 <settings_nvs_save>:
{
   33ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33ff8:	b097      	sub	sp, #92	; 0x5c
   33ffa:	4604      	mov	r4, r0
   33ffc:	9201      	str	r2, [sp, #4]
   33ffe:	469a      	mov	sl, r3
	if (!name) {
   34000:	4689      	mov	r9, r1
   34002:	2900      	cmp	r1, #0
   34004:	d07e      	beq.n	34104 <settings_nvs_save+0x110>
	delete = ((value == NULL) || (val_len == 0));
   34006:	b1da      	cbz	r2, 34040 <settings_nvs_save+0x4c>
   34008:	faba f78a 	clz	r7, sl
   3400c:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   3400e:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   34010:	3501      	adds	r5, #1
   34012:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   34014:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   34016:	f104 0b08 	add.w	fp, r4, #8
		name_id--;
   3401a:	1e6e      	subs	r6, r5, #1
   3401c:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   3401e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   34022:	d029      	beq.n	34078 <settings_nvs_save+0x84>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   34024:	234a      	movs	r3, #74	; 0x4a
   34026:	aa03      	add	r2, sp, #12
   34028:	4631      	mov	r1, r6
   3402a:	4658      	mov	r0, fp
   3402c:	f7ff ff6d 	bl	33f0a <nvs_read>
		if (rc < 0) {
   34030:	2800      	cmp	r0, #0
   34032:	da07      	bge.n	34044 <settings_nvs_save+0x50>
		name_id--;
   34034:	f110 0f02 	cmn.w	r0, #2
   34038:	bf08      	it	eq
   3403a:	46b0      	moveq	r8, r6
   3403c:	4635      	mov	r5, r6
   3403e:	e7ec      	b.n	3401a <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   34040:	2701      	movs	r7, #1
   34042:	e7e4      	b.n	3400e <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   34044:	f100 0358 	add.w	r3, r0, #88	; 0x58
   34048:	eb0d 0003 	add.w	r0, sp, r3
   3404c:	2300      	movs	r3, #0
   3404e:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   34052:	a903      	add	r1, sp, #12
   34054:	4648      	mov	r0, r9
   34056:	f001 fa3e 	bl	354d6 <strcmp>
   3405a:	2800      	cmp	r0, #0
   3405c:	d1ee      	bne.n	3403c <settings_nvs_save+0x48>
		if (!delete) {
   3405e:	b32f      	cbz	r7, 340ac <settings_nvs_save+0xb8>
		if (name_id == cf->last_name_id) {
   34060:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   34062:	42b3      	cmp	r3, r6
   34064:	d00b      	beq.n	3407e <settings_nvs_save+0x8a>
		rc = nvs_delete(&cf->cf_nvs, name_id);
   34066:	4631      	mov	r1, r6
   34068:	4658      	mov	r0, fp
   3406a:	f7ff ff4a 	bl	33f02 <nvs_delete>
		if (rc >= 0) {
   3406e:	2800      	cmp	r0, #0
   34070:	da12      	bge.n	34098 <settings_nvs_save+0xa4>
}
   34072:	b017      	add	sp, #92	; 0x5c
   34074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   34078:	b3b7      	cbz	r7, 340e8 <settings_nvs_save+0xf4>
			return 0;
   3407a:	2000      	movs	r0, #0
   3407c:	e7f9      	b.n	34072 <settings_nvs_save+0x7e>
			cf->last_name_id--;
   3407e:	4622      	mov	r2, r4
   34080:	1e73      	subs	r3, r6, #1
   34082:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   34086:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   3408a:	2302      	movs	r3, #2
   3408c:	4658      	mov	r0, fp
   3408e:	f7df fd73 	bl	13b78 <nvs_write>
			if (rc < 0) {
   34092:	2800      	cmp	r0, #0
   34094:	dae7      	bge.n	34066 <settings_nvs_save+0x72>
   34096:	e7ec      	b.n	34072 <settings_nvs_save+0x7e>
			rc = nvs_delete(&cf->cf_nvs, name_id +
   34098:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   3409c:	313f      	adds	r1, #63	; 0x3f
   3409e:	b289      	uxth	r1, r1
   340a0:	4658      	mov	r0, fp
   340a2:	f7ff ff2e 	bl	33f02 <nvs_delete>
	if (rc < 0) {
   340a6:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   340aa:	e7e2      	b.n	34072 <settings_nvs_save+0x7e>
		name_id--;
   340ac:	46b0      	mov	r8, r6
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   340ae:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   340b2:	d02a      	beq.n	3410a <settings_nvs_save+0x116>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   340b4:	f104 0508 	add.w	r5, r4, #8
   340b8:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   340bc:	9a01      	ldr	r2, [sp, #4]
   340be:	4653      	mov	r3, sl
   340c0:	b289      	uxth	r1, r1
   340c2:	4628      	mov	r0, r5
   340c4:	f7df fd58 	bl	13b78 <nvs_write>
	if (rc < 0) {
   340c8:	2800      	cmp	r0, #0
   340ca:	dbd2      	blt.n	34072 <settings_nvs_save+0x7e>
	if (write_name) {
   340cc:	b977      	cbnz	r7, 340ec <settings_nvs_save+0xf8>
	if (write_name_id > cf->last_name_id) {
   340ce:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   340d0:	4543      	cmp	r3, r8
   340d2:	d2d2      	bcs.n	3407a <settings_nvs_save+0x86>
		cf->last_name_id = write_name_id;
   340d4:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   340d6:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   340d8:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   340dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   340e0:	4628      	mov	r0, r5
   340e2:	f7df fd49 	bl	13b78 <nvs_write>
   340e6:	e7de      	b.n	340a6 <settings_nvs_save+0xb2>
	write_name = true;
   340e8:	2701      	movs	r7, #1
   340ea:	e7e0      	b.n	340ae <settings_nvs_save+0xba>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   340ec:	4648      	mov	r0, r9
   340ee:	f001 f9e2 	bl	354b6 <strlen>
   340f2:	464a      	mov	r2, r9
   340f4:	4603      	mov	r3, r0
   340f6:	4641      	mov	r1, r8
   340f8:	4628      	mov	r0, r5
   340fa:	f7df fd3d 	bl	13b78 <nvs_write>
		if (rc < 0) {
   340fe:	2800      	cmp	r0, #0
   34100:	dae5      	bge.n	340ce <settings_nvs_save+0xda>
   34102:	e7b6      	b.n	34072 <settings_nvs_save+0x7e>
		return -EINVAL;
   34104:	f06f 0015 	mvn.w	r0, #21
   34108:	e7b3      	b.n	34072 <settings_nvs_save+0x7e>
		return -ENOMEM;
   3410a:	f06f 000b 	mvn.w	r0, #11
   3410e:	e7b0      	b.n	34072 <settings_nvs_save+0x7e>

00034110 <settings_nvs_backend_init>:
{
   34110:	b573      	push	{r0, r1, r4, r5, r6, lr}
	cf->cf_nvs.flash_device = cf->flash_dev;
   34112:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   34114:	6303      	str	r3, [r0, #48]	; 0x30
{
   34116:	4604      	mov	r4, r0
	if (cf->cf_nvs.flash_device == NULL) {
   34118:	b1c3      	cbz	r3, 3414c <settings_nvs_backend_init+0x3c>
	rc = nvs_mount(&cf->cf_nvs);
   3411a:	f100 0608 	add.w	r6, r0, #8
   3411e:	4630      	mov	r0, r6
   34120:	f7df fb2a 	bl	13778 <nvs_mount>
	if (rc) {
   34124:	4605      	mov	r5, r0
   34126:	b970      	cbnz	r0, 34146 <settings_nvs_backend_init+0x36>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   34128:	2302      	movs	r3, #2
   3412a:	f10d 0206 	add.w	r2, sp, #6
   3412e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   34132:	4630      	mov	r0, r6
   34134:	f7ff fee9 	bl	33f0a <nvs_read>
	if (rc < 0) {
   34138:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   3413a:	bfac      	ite	ge
   3413c:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
   34140:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
   34144:	8723      	strh	r3, [r4, #56]	; 0x38
}
   34146:	4628      	mov	r0, r5
   34148:	b002      	add	sp, #8
   3414a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   3414c:	f06f 0512 	mvn.w	r5, #18
   34150:	e7f9      	b.n	34146 <settings_nvs_backend_init+0x36>

00034152 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   34152:	b538      	push	{r3, r4, r5, lr}
   34154:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   34156:	42ab      	cmp	r3, r5
{
   34158:	4611      	mov	r1, r2
   3415a:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   3415c:	d804      	bhi.n	34168 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   3415e:	461a      	mov	r2, r3
   34160:	f001 f9e9 	bl	35536 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   34164:	4620      	mov	r0, r4
   34166:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   34168:	2400      	movs	r4, #0
   3416a:	e7fb      	b.n	34164 <_copy+0x12>

0003416c <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   3416c:	f001 b9ee 	b.w	3554c <memset>

00034170 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   34170:	09c3      	lsrs	r3, r0, #7
   34172:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   34176:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   3417a:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   3417e:	b2c0      	uxtb	r0, r0
   34180:	4770      	bx	lr

00034182 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   34182:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   34186:	4606      	mov	r6, r0
   34188:	b0a9      	sub	sp, #164	; 0xa4
   3418a:	4688      	mov	r8, r1
   3418c:	4614      	mov	r4, r2
   3418e:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   34190:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   34194:	f7e0 f9fa 	bl	1458c <uECC_get_rng>
		if (!rng_function ||
   34198:	4603      	mov	r3, r0
   3419a:	2800      	cmp	r0, #0
   3419c:	d03e      	beq.n	3421c <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   3419e:	2140      	movs	r1, #64	; 0x40
   341a0:	a808      	add	r0, sp, #32
   341a2:	4798      	blx	r3
		if (!rng_function ||
   341a4:	b3d0      	cbz	r0, 3421c <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   341a6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   341aa:	f112 031f 	adds.w	r3, r2, #31
   341ae:	bf48      	it	mi
   341b0:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   341b4:	466d      	mov	r5, sp
   341b6:	464a      	mov	r2, r9
   341b8:	a908      	add	r1, sp, #32
   341ba:	4628      	mov	r0, r5
   341bc:	f343 1347 	sbfx	r3, r3, #5, #8
   341c0:	f000 f9f6 	bl	345b0 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   341c4:	4622      	mov	r2, r4
   341c6:	4629      	mov	r1, r5
   341c8:	a818      	add	r0, sp, #96	; 0x60
   341ca:	f000 fe09 	bl	34de0 <EccPoint_compute_public_key>
   341ce:	b318      	cbz	r0, 34218 <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   341d0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   341d4:	1dd9      	adds	r1, r3, #7
   341d6:	bf48      	it	mi
   341d8:	f103 010e 	addmi.w	r1, r3, #14
   341dc:	462a      	mov	r2, r5
   341de:	4640      	mov	r0, r8
   341e0:	10c9      	asrs	r1, r1, #3
   341e2:	f000 fe25 	bl	34e30 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   341e6:	f994 1001 	ldrsb.w	r1, [r4, #1]
   341ea:	aa18      	add	r2, sp, #96	; 0x60
   341ec:	4630      	mov	r0, r6
   341ee:	f000 fe1f 	bl	34e30 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   341f2:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   341f6:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   341fa:	ab18      	add	r3, sp, #96	; 0x60
   341fc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   34200:	1870      	adds	r0, r6, r1
   34202:	f000 fe15 	bl	34e30 <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   34206:	2220      	movs	r2, #32
   34208:	2100      	movs	r1, #0
   3420a:	4628      	mov	r0, r5
   3420c:	f001 f99e 	bl	3554c <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   34210:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   34212:	b029      	add	sp, #164	; 0xa4
   34214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   34218:	3f01      	subs	r7, #1
   3421a:	d1bb      	bne.n	34194 <uECC_make_key+0x12>
        		return 0;
   3421c:	2000      	movs	r0, #0
   3421e:	e7f8      	b.n	34212 <uECC_make_key+0x90>

00034220 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   34220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   34224:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   34226:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   3422a:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   3422e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   34232:	b0a4      	sub	sp, #144	; 0x90
   34234:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   34236:	1dda      	adds	r2, r3, #7
   34238:	bf48      	it	mi
   3423a:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   3423e:	ad04      	add	r5, sp, #16
{
   34240:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   34242:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   34244:	4628      	mov	r0, r5
   34246:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   34248:	9502      	str	r5, [sp, #8]
   3424a:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   3424c:	f000 fe04 	bl	34e58 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   34250:	463a      	mov	r2, r7
   34252:	4649      	mov	r1, r9
   34254:	a814      	add	r0, sp, #80	; 0x50
   34256:	f000 fdff 	bl	34e58 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   3425a:	ab14      	add	r3, sp, #80	; 0x50
   3425c:	eb09 0107 	add.w	r1, r9, r7
   34260:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   34264:	463a      	mov	r2, r7
   34266:	f000 fdf7 	bl	34e58 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   3426a:	4623      	mov	r3, r4
   3426c:	4632      	mov	r2, r6
   3426e:	4629      	mov	r1, r5
   34270:	4628      	mov	r0, r5
   34272:	f000 fd89 	bl	34d88 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   34276:	fab0 f380 	clz	r3, r0
   3427a:	9401      	str	r4, [sp, #4]
   3427c:	aa24      	add	r2, sp, #144	; 0x90
   3427e:	095b      	lsrs	r3, r3, #5
   34280:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   34284:	8863      	ldrh	r3, [r4, #2]
   34286:	3301      	adds	r3, #1
   34288:	b21b      	sxth	r3, r3
   3428a:	9300      	str	r3, [sp, #0]
   3428c:	f851 2c88 	ldr.w	r2, [r1, #-136]
   34290:	a914      	add	r1, sp, #80	; 0x50
   34292:	2300      	movs	r3, #0
   34294:	4608      	mov	r0, r1
   34296:	f000 fcaf 	bl	34bf8 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   3429a:	aa14      	add	r2, sp, #80	; 0x50
   3429c:	4639      	mov	r1, r7
   3429e:	4640      	mov	r0, r8
   342a0:	f000 fdc6 	bl	34e30 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   342a4:	4621      	mov	r1, r4
   342a6:	a814      	add	r0, sp, #80	; 0x50
   342a8:	f000 fc1b 	bl	34ae2 <EccPoint_isZero>
   342ac:	af02      	add	r7, sp, #8
   342ae:	4604      	mov	r4, r0
   342b0:	2208      	movs	r2, #8
   342b2:	2100      	movs	r1, #0
   342b4:	4638      	mov	r0, r7
   342b6:	f001 f949 	bl	3554c <memset>
   342ba:	2220      	movs	r2, #32
   342bc:	2100      	movs	r1, #0
   342be:	4630      	mov	r0, r6
   342c0:	f001 f944 	bl	3554c <memset>
   342c4:	2220      	movs	r2, #32
   342c6:	2100      	movs	r1, #0
   342c8:	4628      	mov	r0, r5
   342ca:	f001 f93f 	bl	3554c <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   342ce:	fab4 f084 	clz	r0, r4
   342d2:	0940      	lsrs	r0, r0, #5
   342d4:	b024      	add	sp, #144	; 0x90
   342d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000342da <uECC_vli_add>:
{
   342da:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   342dc:	2400      	movs	r4, #0
{
   342de:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   342e0:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   342e2:	b265      	sxtb	r5, r4
   342e4:	42ab      	cmp	r3, r5
   342e6:	dc00      	bgt.n	342ea <uECC_vli_add+0x10>
}
   342e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   342ea:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   342ee:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   342f2:	443d      	add	r5, r7
   342f4:	4405      	add	r5, r0
	return (p_true*(cond)) | (p_false*(!cond));
   342f6:	42af      	cmp	r7, r5
   342f8:	f000 0001 	and.w	r0, r0, #1
   342fc:	bf18      	it	ne
   342fe:	2000      	movne	r0, #0
		result[i] = sum;
   34300:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   34304:	bf88      	it	hi
   34306:	f040 0001 	orrhi.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   3430a:	3401      	adds	r4, #1
   3430c:	e7e9      	b.n	342e2 <uECC_vli_add+0x8>

0003430e <uECC_vli_rshift1>:
	vli += num_words;
   3430e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   34312:	2300      	movs	r3, #0
	while (vli-- > end) {
   34314:	4288      	cmp	r0, r1
   34316:	d300      	bcc.n	3431a <uECC_vli_rshift1+0xc>
}
   34318:	4770      	bx	lr
		uECC_word_t temp = *vli;
   3431a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   3431e:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   34322:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   34324:	07d3      	lsls	r3, r2, #31
   34326:	e7f5      	b.n	34314 <uECC_vli_rshift1+0x6>

00034328 <vli_modInv_update>:
{
   34328:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   3432a:	6803      	ldr	r3, [r0, #0]
   3432c:	07db      	lsls	r3, r3, #31
{
   3432e:	4605      	mov	r5, r0
   34330:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   34332:	d404      	bmi.n	3433e <vli_modInv_update+0x16>
}
   34334:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	uECC_vli_rshift1(uv, num_words);
   34338:	4611      	mov	r1, r2
   3433a:	f7ff bfe8 	b.w	3430e <uECC_vli_rshift1>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   3433e:	4613      	mov	r3, r2
   34340:	460a      	mov	r2, r1
   34342:	4601      	mov	r1, r0
   34344:	f7ff ffc9 	bl	342da <uECC_vli_add>
	uECC_vli_rshift1(uv, num_words);
   34348:	4621      	mov	r1, r4
		carry = uECC_vli_add(uv, uv, mod, num_words);
   3434a:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   3434c:	4628      	mov	r0, r5
   3434e:	f7ff ffde 	bl	3430e <uECC_vli_rshift1>
	if (carry) {
   34352:	b146      	cbz	r6, 34366 <vli_modInv_update+0x3e>
		uv[num_words - 1] |= HIGH_BIT_SET;
   34354:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   34358:	3c01      	subs	r4, #1
   3435a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   3435e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   34362:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
}
   34366:	bd70      	pop	{r4, r5, r6, pc}

00034368 <uECC_vli_mult>:
	for (k = 0; k < num_words; ++k) {
   34368:	f04f 0c00 	mov.w	ip, #0
{
   3436c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uECC_word_t r1 = 0;
   34370:	4665      	mov	r5, ip
	uECC_word_t r0 = 0;
   34372:	4664      	mov	r4, ip
	for (k = 0; k < num_words; ++k) {
   34374:	fa4f f98c 	sxtb.w	r9, ip
   34378:	454b      	cmp	r3, r9
   3437a:	dc16      	bgt.n	343aa <uECC_vli_mult+0x42>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   3437c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   34380:	eb06 0643 	add.w	r6, r6, r3, lsl #1
   34384:	9601      	str	r6, [sp, #4]
   34386:	f04f 0800 	mov.w	r8, #0
   3438a:	9f01      	ldr	r7, [sp, #4]
   3438c:	fa53 fe88 	uxtab	lr, r3, r8
   34390:	fa4f fe8e 	sxtb.w	lr, lr
   34394:	45be      	cmp	lr, r7
   34396:	fa5f f688 	uxtb.w	r6, r8
   3439a:	db28      	blt.n	343ee <uECC_vli_mult+0x86>
	result[num_words * 2 - 1] = r0;
   3439c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   343a0:	f840 4c04 	str.w	r4, [r0, #-4]
}
   343a4:	b003      	add	sp, #12
   343a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < num_words; ++k) {
   343aa:	f04f 0e00 	mov.w	lr, #0
   343ae:	eb02 0a8c 	add.w	sl, r2, ip, lsl #2
   343b2:	46f0      	mov	r8, lr
	uECC_dword_t p = (uECC_dword_t)a * b;
   343b4:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   343b8:	f85a 6904 	ldr.w	r6, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   343bc:	fba6 6707 	umull	r6, r7, r6, r7
   343c0:	1936      	adds	r6, r6, r4
		for (i = 0; i <= k; ++i) {
   343c2:	f10e 0e01 	add.w	lr, lr, #1
   343c6:	416f      	adcs	r7, r5
	*r0 = (uECC_word_t)r01;
   343c8:	4634      	mov	r4, r6
		for (i = 0; i <= k; ++i) {
   343ca:	fa4f f68e 	sxtb.w	r6, lr
   343ce:	f04f 0b00 	mov.w	fp, #0
   343d2:	bf28      	it	cs
   343d4:	f04f 0b01 	movcs.w	fp, #1
   343d8:	454e      	cmp	r6, r9
	*r2 += (r01 < p);
   343da:	44d8      	add	r8, fp
	*r1 = r01 >> uECC_WORD_BITS;
   343dc:	463d      	mov	r5, r7
		for (i = 0; i <= k; ++i) {
   343de:	dde9      	ble.n	343b4 <uECC_vli_mult+0x4c>
		result[k] = r0;
   343e0:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	*r2 += (r01 < p);
   343e4:	4645      	mov	r5, r8
   343e6:	f10c 0c01 	add.w	ip, ip, #1
	*r1 = r01 >> uECC_WORD_BITS;
   343ea:	463c      	mov	r4, r7
   343ec:	e7c2      	b.n	34374 <uECC_vli_mult+0xc>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   343ee:	3601      	adds	r6, #1
   343f0:	46a9      	mov	r9, r5
   343f2:	b276      	sxtb	r6, r6
   343f4:	eb02 0a8e 	add.w	sl, r2, lr, lsl #2
   343f8:	2500      	movs	r5, #0
   343fa:	b277      	sxtb	r7, r6
   343fc:	42bb      	cmp	r3, r7
   343fe:	dc05      	bgt.n	3440c <uECC_vli_mult+0xa4>
		result[k] = r0;
   34400:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   34404:	f108 0801 	add.w	r8, r8, #1
		result[k] = r0;
   34408:	464c      	mov	r4, r9
   3440a:	e7be      	b.n	3438a <uECC_vli_mult+0x22>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   3440c:	f06f 0703 	mvn.w	r7, #3
   34410:	4377      	muls	r7, r6
	uECC_dword_t p = (uECC_dword_t)a * b;
   34412:	f851 c026 	ldr.w	ip, [r1, r6, lsl #2]
   34416:	f85a 7007 	ldr.w	r7, [sl, r7]
   3441a:	fba7 7c0c 	umull	r7, ip, r7, ip
   3441e:	193f      	adds	r7, r7, r4
   34420:	eb5c 0c09 	adcs.w	ip, ip, r9
   34424:	f04f 0b00 	mov.w	fp, #0
   34428:	bf28      	it	cs
   3442a:	f04f 0b01 	movcs.w	fp, #1
	*r2 += (r01 < p);
   3442e:	445d      	add	r5, fp
	*r1 = r01 >> uECC_WORD_BITS;
   34430:	46e1      	mov	r9, ip
	*r0 = (uECC_word_t)r01;
   34432:	463c      	mov	r4, r7
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   34434:	3601      	adds	r6, #1
   34436:	e7e0      	b.n	343fa <uECC_vli_mult+0x92>

00034438 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   34438:	2300      	movs	r3, #0
{
   3443a:	b510      	push	{r4, lr}
		 vli[i] = 0;
   3443c:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   3443e:	b25a      	sxtb	r2, r3
   34440:	4291      	cmp	r1, r2
   34442:	dc00      	bgt.n	34446 <uECC_vli_clear+0xe>
}
   34444:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   34446:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   3444a:	3301      	adds	r3, #1
   3444c:	e7f7      	b.n	3443e <uECC_vli_clear+0x6>

0003444e <uECC_vli_isZero>:
{
   3444e:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   34450:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   34452:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   34454:	b25c      	sxtb	r4, r3
   34456:	42a1      	cmp	r1, r4
   34458:	dc03      	bgt.n	34462 <uECC_vli_isZero+0x14>
}
   3445a:	fab2 f082 	clz	r0, r2
   3445e:	0940      	lsrs	r0, r0, #5
   34460:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   34462:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   34466:	3301      	adds	r3, #1
   34468:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   3446a:	e7f3      	b.n	34454 <uECC_vli_isZero+0x6>

0003446c <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   3446c:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   3446e:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   34470:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   34474:	f001 011f 	and.w	r1, r1, #31
   34478:	408b      	lsls	r3, r1
}
   3447a:	4018      	ands	r0, r3
   3447c:	4770      	bx	lr

0003447e <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   3447e:	1e4b      	subs	r3, r1, #1
{
   34480:	b510      	push	{r4, lr}
   34482:	b25b      	sxtb	r3, r3
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   34484:	1d04      	adds	r4, r0, #4
   34486:	061a      	lsls	r2, r3, #24
   34488:	d403      	bmi.n	34492 <uECC_vli_numBits+0x14>
   3448a:	1e5a      	subs	r2, r3, #1
   3448c:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
   34490:	b171      	cbz	r1, 344b0 <uECC_vli_numBits+0x32>
	return (i + 1);
   34492:	3301      	adds	r3, #1
   34494:	b25b      	sxtb	r3, r3
	if (num_digits == 0) {
   34496:	b183      	cbz	r3, 344ba <uECC_vli_numBits+0x3c>
	digit = vli[num_digits - 1];
   34498:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   3449c:	3a01      	subs	r2, #1
   3449e:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
	for (i = 0; digit; ++i) {
   344a2:	2200      	movs	r2, #0
   344a4:	b931      	cbnz	r1, 344b4 <uECC_vli_numBits+0x36>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   344a6:	3b01      	subs	r3, #1
   344a8:	eb02 1243 	add.w	r2, r2, r3, lsl #5
   344ac:	b210      	sxth	r0, r2
}
   344ae:	bd10      	pop	{r4, pc}
   344b0:	4613      	mov	r3, r2
   344b2:	e7e8      	b.n	34486 <uECC_vli_numBits+0x8>
		digit >>= 1;
   344b4:	0849      	lsrs	r1, r1, #1
	for (i = 0; digit; ++i) {
   344b6:	3201      	adds	r2, #1
   344b8:	e7f4      	b.n	344a4 <uECC_vli_numBits+0x26>
		return 0;
   344ba:	4618      	mov	r0, r3
   344bc:	e7f7      	b.n	344ae <uECC_vli_numBits+0x30>

000344be <uECC_vli_set>:
{
   344be:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   344c0:	2300      	movs	r3, #0
   344c2:	b25c      	sxtb	r4, r3
   344c4:	42a2      	cmp	r2, r4
   344c6:	dc00      	bgt.n	344ca <uECC_vli_set+0xc>
}
   344c8:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   344ca:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   344ce:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   344d2:	3301      	adds	r3, #1
   344d4:	e7f5      	b.n	344c2 <uECC_vli_set+0x4>

000344d6 <uECC_vli_cmp_unsafe>:
{
   344d6:	b510      	push	{r4, lr}
	for (i = num_words - 1; i >= 0; --i) {
   344d8:	3a01      	subs	r2, #1
   344da:	b252      	sxtb	r2, r2
   344dc:	0613      	lsls	r3, r2, #24
   344de:	d501      	bpl.n	344e4 <uECC_vli_cmp_unsafe+0xe>
	return 0;
   344e0:	2000      	movs	r0, #0
}
   344e2:	bd10      	pop	{r4, pc}
		if (left[i] > right[i]) {
   344e4:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   344e8:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   344ec:	429c      	cmp	r4, r3
   344ee:	d805      	bhi.n	344fc <uECC_vli_cmp_unsafe+0x26>
		} else if (left[i] < right[i]) {
   344f0:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
   344f4:	d2f2      	bcs.n	344dc <uECC_vli_cmp_unsafe+0x6>
			return -1;
   344f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   344fa:	e7f2      	b.n	344e2 <uECC_vli_cmp_unsafe+0xc>
			return 1;
   344fc:	2001      	movs	r0, #1
   344fe:	e7f0      	b.n	344e2 <uECC_vli_cmp_unsafe+0xc>

00034500 <uECC_vli_equal>:
{
   34500:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   34502:	3a01      	subs	r2, #1
   34504:	b252      	sxtb	r2, r2
	uECC_word_t diff = 0;
   34506:	2300      	movs	r3, #0
	for (i = num_words - 1; i >= 0; --i) {
   34508:	0614      	lsls	r4, r2, #24
   3450a:	d503      	bpl.n	34514 <uECC_vli_equal+0x14>
}
   3450c:	1e18      	subs	r0, r3, #0
   3450e:	bf18      	it	ne
   34510:	2001      	movne	r0, #1
   34512:	bd30      	pop	{r4, r5, pc}
		diff |= (left[i] ^ right[i]);
   34514:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   34518:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   3451c:	406c      	eors	r4, r5
   3451e:	4323      	orrs	r3, r4
	for (i = num_words - 1; i >= 0; --i) {
   34520:	3a01      	subs	r2, #1
   34522:	e7f1      	b.n	34508 <uECC_vli_equal+0x8>

00034524 <uECC_vli_sub>:
{
   34524:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   34526:	2400      	movs	r4, #0
{
   34528:	4606      	mov	r6, r0
   3452a:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   3452c:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   3452e:	b265      	sxtb	r5, r4
   34530:	4565      	cmp	r5, ip
   34532:	db00      	blt.n	34536 <uECC_vli_sub+0x12>
}
   34534:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   34536:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   3453a:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   3453e:	1a3d      	subs	r5, r7, r0
   34540:	1aed      	subs	r5, r5, r3
	return (p_true*(cond)) | (p_false*(!cond));
   34542:	42af      	cmp	r7, r5
   34544:	f000 0001 	and.w	r0, r0, #1
   34548:	bf18      	it	ne
   3454a:	2000      	movne	r0, #0
		result[i] = diff;
   3454c:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   34550:	bf38      	it	cc
   34552:	f040 0001 	orrcc.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   34556:	3401      	adds	r4, #1
   34558:	e7e9      	b.n	3452e <uECC_vli_sub+0xa>

0003455a <uECC_vli_modAdd>:
{
   3455a:	b570      	push	{r4, r5, r6, lr}
   3455c:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   34560:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   34562:	4633      	mov	r3, r6
{
   34564:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   34566:	f7ff feb8 	bl	342da <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   3456a:	b930      	cbnz	r0, 3457a <uECC_vli_modAdd+0x20>
   3456c:	4632      	mov	r2, r6
   3456e:	4621      	mov	r1, r4
   34570:	4628      	mov	r0, r5
   34572:	f7ff ffb0 	bl	344d6 <uECC_vli_cmp_unsafe>
   34576:	2801      	cmp	r0, #1
   34578:	d007      	beq.n	3458a <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   3457a:	4633      	mov	r3, r6
   3457c:	462a      	mov	r2, r5
   3457e:	4621      	mov	r1, r4
   34580:	4620      	mov	r0, r4
}
   34582:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   34586:	f7ff bfcd 	b.w	34524 <uECC_vli_sub>
}
   3458a:	bd70      	pop	{r4, r5, r6, pc}

0003458c <uECC_vli_modSub>:
{
   3458c:	b570      	push	{r4, r5, r6, lr}
   3458e:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   34592:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   34594:	4633      	mov	r3, r6
{
   34596:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   34598:	f7ff ffc4 	bl	34524 <uECC_vli_sub>
	if (l_borrow) {
   3459c:	b138      	cbz	r0, 345ae <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   3459e:	4633      	mov	r3, r6
   345a0:	462a      	mov	r2, r5
   345a2:	4621      	mov	r1, r4
   345a4:	4620      	mov	r0, r4
}
   345a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   345aa:	f7ff be96 	b.w	342da <uECC_vli_add>
}
   345ae:	bd70      	pop	{r4, r5, r6, pc}

000345b0 <uECC_vli_mmod>:
{
   345b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   345b4:	b0a5      	sub	sp, #148	; 0x94
   345b6:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   345b8:	ab14      	add	r3, sp, #80	; 0x50
   345ba:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   345be:	9001      	str	r0, [sp, #4]
			   uECC_vli_numBits(mod, num_words);
   345c0:	4629      	mov	r1, r5
   345c2:	4610      	mov	r0, r2
{
   345c4:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   345c6:	f7ff ff5a 	bl	3447e <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   345ca:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   345ce:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   345d0:	2c00      	cmp	r4, #0
   345d2:	4621      	mov	r1, r4
   345d4:	bfb8      	it	lt
   345d6:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   345da:	4263      	negs	r3, r4
   345dc:	f003 031f 	and.w	r3, r3, #31
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   345e0:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   345e4:	f004 061f 	and.w	r6, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   345e8:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   345ea:	bf58      	it	pl
   345ec:	425e      	negpl	r6, r3
	uECC_vli_clear(mod_multiple, word_shift);
   345ee:	f7ff ff23 	bl	34438 <uECC_vli_clear>
	if (bit_shift > 0) {
   345f2:	2e00      	cmp	r6, #0
   345f4:	ea4f 0081 	mov.w	r0, r1, lsl #2
   345f8:	dd2d      	ble.n	34656 <uECC_vli_mmod+0xa6>
   345fa:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   345fc:	2200      	movs	r2, #0
   345fe:	4418      	add	r0, r3
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   34600:	f1c6 0e20 	rsb	lr, r6, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   34604:	4613      	mov	r3, r2
   34606:	429d      	cmp	r5, r3
   34608:	d81a      	bhi.n	34640 <uECC_vli_mmod+0x90>
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   3460a:	ab04      	add	r3, sp, #16
   3460c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   34610:	9300      	str	r3, [sp, #0]
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   34612:	1e6f      	subs	r7, r5, #1
   34614:	ab24      	add	r3, sp, #144	; 0x90
		for (i = 0; i < num_words * 2; ++i) {
   34616:	ea4f 0845 	mov.w	r8, r5, lsl #1
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   3461a:	ea4f 0985 	mov.w	r9, r5, lsl #2
   3461e:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   34620:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   34624:	2c00      	cmp	r4, #0
   34626:	da53      	bge.n	346d0 <uECC_vli_mmod+0x120>
	uECC_vli_set(result, v[index], num_words);
   34628:	ab24      	add	r3, sp, #144	; 0x90
   3462a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   3462e:	9801      	ldr	r0, [sp, #4]
   34630:	f856 1c88 	ldr.w	r1, [r6, #-136]
   34634:	462a      	mov	r2, r5
   34636:	f7ff ff42 	bl	344be <uECC_vli_set>
}
   3463a:	b025      	add	sp, #148	; 0x94
   3463c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   34640:	f857 c023 	ldr.w	ip, [r7, r3, lsl #2]
   34644:	fa0c f106 	lsl.w	r1, ip, r6
   34648:	430a      	orrs	r2, r1
   3464a:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   3464e:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   34650:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   34654:	e7d7      	b.n	34606 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   34656:	ab04      	add	r3, sp, #16
   34658:	462a      	mov	r2, r5
   3465a:	4639      	mov	r1, r7
   3465c:	4418      	add	r0, r3
   3465e:	f7ff ff2e 	bl	344be <uECC_vli_set>
   34662:	e7d2      	b.n	3460a <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   34664:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   34668:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   3466c:	ab24      	add	r3, sp, #144	; 0x90
   3466e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   34672:	f10c 0c01 	add.w	ip, ip, #1
   34676:	f853 3c80 	ldr.w	r3, [r3, #-128]
   3467a:	440b      	add	r3, r1
   3467c:	1ad3      	subs	r3, r2, r3
   3467e:	bf34      	ite	cc
   34680:	f04f 0b01 	movcc.w	fp, #1
   34684:	f04f 0b00 	movcs.w	fp, #0
			if (diff != v[index][i]) {
   34688:	429a      	cmp	r2, r3
			v[1 - index][i] = diff;
   3468a:	f85e 2c88 	ldr.w	r2, [lr, #-136]
   3468e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
				borrow = (diff > v[index][i]);
   34692:	bf18      	it	ne
   34694:	4659      	movne	r1, fp
		for (i = 0; i < num_words * 2; ++i) {
   34696:	fa4f f08c 	sxtb.w	r0, ip
   3469a:	4540      	cmp	r0, r8
   3469c:	dbe2      	blt.n	34664 <uECC_vli_mmod+0xb4>
		index = !(index ^ borrow);
   3469e:	1a73      	subs	r3, r6, r1
   346a0:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   346a2:	4629      	mov	r1, r5
   346a4:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   346a6:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   346a8:	f7ff fe31 	bl	3430e <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   346ac:	f109 0390 	add.w	r3, r9, #144	; 0x90
   346b0:	446b      	add	r3, sp
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   346b2:	9800      	ldr	r0, [sp, #0]
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   346b4:	f853 2c80 	ldr.w	r2, [r3, #-128]
   346b8:	f857 3c80 	ldr.w	r3, [r7, #-128]
   346bc:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   346c0:	f847 3c80 	str.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   346c4:	4629      	mov	r1, r5
   346c6:	3c01      	subs	r4, #1
   346c8:	f7ff fe21 	bl	3430e <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   346cc:	b224      	sxth	r4, r4
   346ce:	e7a9      	b.n	34624 <uECC_vli_mmod+0x74>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   346d0:	ab24      	add	r3, sp, #144	; 0x90
   346d2:	f04f 0c00 	mov.w	ip, #0
			v[1 - index][i] = diff;
   346d6:	f1c6 0e01 	rsb	lr, r6, #1
		uECC_word_t borrow = 0;
   346da:	4661      	mov	r1, ip
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   346dc:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   346e0:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
   346e4:	e7d7      	b.n	34696 <uECC_vli_mmod+0xe6>

000346e6 <uECC_vli_modMult_fast>:
{
   346e6:	b530      	push	{r4, r5, lr}
   346e8:	461c      	mov	r4, r3
   346ea:	b091      	sub	sp, #68	; 0x44
   346ec:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   346ee:	f993 3000 	ldrsb.w	r3, [r3]
   346f2:	4668      	mov	r0, sp
   346f4:	f7ff fe38 	bl	34368 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   346f8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   346fc:	4669      	mov	r1, sp
   346fe:	4628      	mov	r0, r5
   34700:	4798      	blx	r3
}
   34702:	b011      	add	sp, #68	; 0x44
   34704:	bd30      	pop	{r4, r5, pc}

00034706 <uECC_vli_modSquare_fast>:
{
   34706:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   34708:	460a      	mov	r2, r1
   3470a:	f7ff bfec 	b.w	346e6 <uECC_vli_modMult_fast>

0003470e <double_jacobian_default>:
{
   3470e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   34712:	f993 6000 	ldrsb.w	r6, [r3]
{
   34716:	b092      	sub	sp, #72	; 0x48
   34718:	4604      	mov	r4, r0
   3471a:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   3471c:	4610      	mov	r0, r2
   3471e:	4631      	mov	r1, r6
{
   34720:	4615      	mov	r5, r2
   34722:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   34724:	f7ff fe93 	bl	3444e <uECC_vli_isZero>
   34728:	2800      	cmp	r0, #0
   3472a:	f040 8091 	bne.w	34850 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   3472e:	463a      	mov	r2, r7
   34730:	4649      	mov	r1, r9
   34732:	a802      	add	r0, sp, #8
   34734:	f7ff ffe7 	bl	34706 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   34738:	463b      	mov	r3, r7
   3473a:	aa02      	add	r2, sp, #8
   3473c:	4621      	mov	r1, r4
   3473e:	a80a      	add	r0, sp, #40	; 0x28
   34740:	f7ff ffd1 	bl	346e6 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   34744:	a902      	add	r1, sp, #8
   34746:	4608      	mov	r0, r1
   34748:	463a      	mov	r2, r7
   3474a:	f7ff ffdc 	bl	34706 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   3474e:	463b      	mov	r3, r7
   34750:	462a      	mov	r2, r5
   34752:	4649      	mov	r1, r9
   34754:	4648      	mov	r0, r9
   34756:	f7ff ffc6 	bl	346e6 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   3475a:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   3475e:	463a      	mov	r2, r7
   34760:	4629      	mov	r1, r5
   34762:	4628      	mov	r0, r5
   34764:	f7ff ffcf 	bl	34706 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   34768:	4643      	mov	r3, r8
   3476a:	462a      	mov	r2, r5
   3476c:	4621      	mov	r1, r4
   3476e:	4620      	mov	r0, r4
   34770:	9600      	str	r6, [sp, #0]
   34772:	f7ff fef2 	bl	3455a <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   34776:	4643      	mov	r3, r8
   34778:	462a      	mov	r2, r5
   3477a:	4629      	mov	r1, r5
   3477c:	4628      	mov	r0, r5
   3477e:	9600      	str	r6, [sp, #0]
   34780:	f7ff feeb 	bl	3455a <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   34784:	4643      	mov	r3, r8
   34786:	462a      	mov	r2, r5
   34788:	4621      	mov	r1, r4
   3478a:	4628      	mov	r0, r5
   3478c:	9600      	str	r6, [sp, #0]
   3478e:	f7ff fefd 	bl	3458c <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   34792:	463b      	mov	r3, r7
   34794:	462a      	mov	r2, r5
   34796:	4621      	mov	r1, r4
   34798:	4620      	mov	r0, r4
   3479a:	f7ff ffa4 	bl	346e6 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   3479e:	4643      	mov	r3, r8
   347a0:	4622      	mov	r2, r4
   347a2:	4621      	mov	r1, r4
   347a4:	4628      	mov	r0, r5
   347a6:	9600      	str	r6, [sp, #0]
   347a8:	f7ff fed7 	bl	3455a <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   347ac:	4643      	mov	r3, r8
   347ae:	9600      	str	r6, [sp, #0]
   347b0:	462a      	mov	r2, r5
   347b2:	4621      	mov	r1, r4
   347b4:	4620      	mov	r0, r4
   347b6:	f7ff fed0 	bl	3455a <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   347ba:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   347bc:	07db      	lsls	r3, r3, #31
   347be:	d54a      	bpl.n	34856 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   347c0:	4633      	mov	r3, r6
   347c2:	4642      	mov	r2, r8
   347c4:	4621      	mov	r1, r4
   347c6:	4620      	mov	r0, r4
   347c8:	f7ff fd87 	bl	342da <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   347cc:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   347ce:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   347d0:	4620      	mov	r0, r4
   347d2:	f7ff fd9c 	bl	3430e <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   347d6:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   347da:	3b01      	subs	r3, #1
   347dc:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   347e0:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   347e4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   347e8:	463a      	mov	r2, r7
   347ea:	4621      	mov	r1, r4
   347ec:	4628      	mov	r0, r5
   347ee:	f7ff ff8a 	bl	34706 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   347f2:	4643      	mov	r3, r8
   347f4:	aa0a      	add	r2, sp, #40	; 0x28
   347f6:	4629      	mov	r1, r5
   347f8:	4628      	mov	r0, r5
   347fa:	9600      	str	r6, [sp, #0]
   347fc:	f7ff fec6 	bl	3458c <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   34800:	4643      	mov	r3, r8
   34802:	aa0a      	add	r2, sp, #40	; 0x28
   34804:	4629      	mov	r1, r5
   34806:	4628      	mov	r0, r5
   34808:	9600      	str	r6, [sp, #0]
   3480a:	f7ff febf 	bl	3458c <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   3480e:	a90a      	add	r1, sp, #40	; 0x28
   34810:	4608      	mov	r0, r1
   34812:	4643      	mov	r3, r8
   34814:	462a      	mov	r2, r5
   34816:	9600      	str	r6, [sp, #0]
   34818:	f7ff feb8 	bl	3458c <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   3481c:	463b      	mov	r3, r7
   3481e:	aa0a      	add	r2, sp, #40	; 0x28
   34820:	4621      	mov	r1, r4
   34822:	4620      	mov	r0, r4
   34824:	f7ff ff5f 	bl	346e6 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   34828:	aa02      	add	r2, sp, #8
   3482a:	4643      	mov	r3, r8
   3482c:	4610      	mov	r0, r2
   3482e:	4621      	mov	r1, r4
   34830:	9600      	str	r6, [sp, #0]
   34832:	f7ff feab 	bl	3458c <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   34836:	4632      	mov	r2, r6
   34838:	4629      	mov	r1, r5
   3483a:	4620      	mov	r0, r4
   3483c:	f7ff fe3f 	bl	344be <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   34840:	4649      	mov	r1, r9
   34842:	4628      	mov	r0, r5
   34844:	f7ff fe3b 	bl	344be <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   34848:	a902      	add	r1, sp, #8
   3484a:	4648      	mov	r0, r9
   3484c:	f7ff fe37 	bl	344be <uECC_vli_set>
}
   34850:	b012      	add	sp, #72	; 0x48
   34852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   34856:	4631      	mov	r1, r6
   34858:	4620      	mov	r0, r4
   3485a:	f7ff fd58 	bl	3430e <uECC_vli_rshift1>
   3485e:	e7c3      	b.n	347e8 <double_jacobian_default+0xda>

00034860 <x_side_default>:
{
   34860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34864:	4615      	mov	r5, r2
   34866:	b08a      	sub	sp, #40	; 0x28
   34868:	4604      	mov	r4, r0
   3486a:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   3486c:	221c      	movs	r2, #28
   3486e:	2100      	movs	r1, #0
   34870:	a803      	add	r0, sp, #12
   34872:	f000 fe6b 	bl	3554c <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   34876:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   34878:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   3487c:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   3487e:	462a      	mov	r2, r5
   34880:	4631      	mov	r1, r6
   34882:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   34884:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   34886:	f7ff ff3e 	bl	34706 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   3488a:	463b      	mov	r3, r7
   3488c:	aa02      	add	r2, sp, #8
   3488e:	4621      	mov	r1, r4
   34890:	4620      	mov	r0, r4
   34892:	f8cd 8000 	str.w	r8, [sp]
   34896:	f7ff fe79 	bl	3458c <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   3489a:	462b      	mov	r3, r5
   3489c:	4632      	mov	r2, r6
   3489e:	4621      	mov	r1, r4
   348a0:	4620      	mov	r0, r4
   348a2:	f7ff ff20 	bl	346e6 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   348a6:	f8cd 8000 	str.w	r8, [sp]
   348aa:	463b      	mov	r3, r7
   348ac:	f105 0284 	add.w	r2, r5, #132	; 0x84
   348b0:	4621      	mov	r1, r4
   348b2:	4620      	mov	r0, r4
   348b4:	f7ff fe51 	bl	3455a <uECC_vli_modAdd>
}
   348b8:	b00a      	add	sp, #40	; 0x28
   348ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000348be <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   348be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   348c2:	b09a      	sub	sp, #104	; 0x68
   348c4:	4616      	mov	r6, r2
   348c6:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   348ca:	4644      	mov	r4, r8
{
   348cc:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   348ce:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   348d2:	9500      	str	r5, [sp, #0]
{
   348d4:	4607      	mov	r7, r0
   348d6:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   348d8:	4623      	mov	r3, r4
   348da:	4602      	mov	r2, r0
   348dc:	4631      	mov	r1, r6
   348de:	a802      	add	r0, sp, #8
   348e0:	f7ff fe54 	bl	3458c <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   348e4:	a902      	add	r1, sp, #8
   348e6:	4642      	mov	r2, r8
   348e8:	4608      	mov	r0, r1
   348ea:	f7ff ff0c 	bl	34706 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   348ee:	4643      	mov	r3, r8
   348f0:	aa02      	add	r2, sp, #8
   348f2:	4639      	mov	r1, r7
   348f4:	4638      	mov	r0, r7
   348f6:	f7ff fef6 	bl	346e6 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   348fa:	4643      	mov	r3, r8
   348fc:	aa02      	add	r2, sp, #8
   348fe:	4631      	mov	r1, r6
   34900:	4630      	mov	r0, r6
   34902:	f7ff fef0 	bl	346e6 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   34906:	4623      	mov	r3, r4
   34908:	4652      	mov	r2, sl
   3490a:	4649      	mov	r1, r9
   3490c:	a802      	add	r0, sp, #8
   3490e:	9500      	str	r5, [sp, #0]
   34910:	f7ff fe23 	bl	3455a <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   34914:	4623      	mov	r3, r4
   34916:	4652      	mov	r2, sl
   34918:	4649      	mov	r1, r9
   3491a:	4648      	mov	r0, r9
   3491c:	9500      	str	r5, [sp, #0]
   3491e:	f7ff fe35 	bl	3458c <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   34922:	4623      	mov	r3, r4
   34924:	463a      	mov	r2, r7
   34926:	4631      	mov	r1, r6
   34928:	a80a      	add	r0, sp, #40	; 0x28
   3492a:	9500      	str	r5, [sp, #0]
   3492c:	f7ff fe2e 	bl	3458c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   34930:	4643      	mov	r3, r8
   34932:	aa0a      	add	r2, sp, #40	; 0x28
   34934:	4651      	mov	r1, sl
   34936:	4650      	mov	r0, sl
   34938:	f7ff fed5 	bl	346e6 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   3493c:	4623      	mov	r3, r4
   3493e:	4632      	mov	r2, r6
   34940:	4639      	mov	r1, r7
   34942:	a80a      	add	r0, sp, #40	; 0x28
   34944:	9500      	str	r5, [sp, #0]
   34946:	f7ff fe08 	bl	3455a <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   3494a:	4642      	mov	r2, r8
   3494c:	4649      	mov	r1, r9
   3494e:	4630      	mov	r0, r6
   34950:	f7ff fed9 	bl	34706 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   34954:	4623      	mov	r3, r4
   34956:	aa0a      	add	r2, sp, #40	; 0x28
   34958:	4631      	mov	r1, r6
   3495a:	4630      	mov	r0, r6
   3495c:	9500      	str	r5, [sp, #0]
   3495e:	f7ff fe15 	bl	3458c <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   34962:	4623      	mov	r3, r4
   34964:	4632      	mov	r2, r6
   34966:	4639      	mov	r1, r7
   34968:	a812      	add	r0, sp, #72	; 0x48
   3496a:	9500      	str	r5, [sp, #0]
   3496c:	f7ff fe0e 	bl	3458c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   34970:	4643      	mov	r3, r8
   34972:	aa12      	add	r2, sp, #72	; 0x48
   34974:	4649      	mov	r1, r9
   34976:	4648      	mov	r0, r9
   34978:	f7ff feb5 	bl	346e6 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   3497c:	4623      	mov	r3, r4
   3497e:	4652      	mov	r2, sl
   34980:	4649      	mov	r1, r9
   34982:	4648      	mov	r0, r9
   34984:	9500      	str	r5, [sp, #0]
   34986:	f7ff fe01 	bl	3458c <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   3498a:	4642      	mov	r2, r8
   3498c:	a902      	add	r1, sp, #8
   3498e:	a812      	add	r0, sp, #72	; 0x48
   34990:	f7ff feb9 	bl	34706 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   34994:	a912      	add	r1, sp, #72	; 0x48
   34996:	4623      	mov	r3, r4
   34998:	aa0a      	add	r2, sp, #40	; 0x28
   3499a:	4608      	mov	r0, r1
   3499c:	9500      	str	r5, [sp, #0]
   3499e:	f7ff fdf5 	bl	3458c <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   349a2:	4623      	mov	r3, r4
   349a4:	463a      	mov	r2, r7
   349a6:	a912      	add	r1, sp, #72	; 0x48
   349a8:	a80a      	add	r0, sp, #40	; 0x28
   349aa:	9500      	str	r5, [sp, #0]
   349ac:	f7ff fdee 	bl	3458c <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   349b0:	a90a      	add	r1, sp, #40	; 0x28
   349b2:	4643      	mov	r3, r8
   349b4:	aa02      	add	r2, sp, #8
   349b6:	4608      	mov	r0, r1
   349b8:	f7ff fe95 	bl	346e6 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   349bc:	4623      	mov	r3, r4
   349be:	4652      	mov	r2, sl
   349c0:	a90a      	add	r1, sp, #40	; 0x28
   349c2:	4650      	mov	r0, sl
   349c4:	9500      	str	r5, [sp, #0]
   349c6:	f7ff fde1 	bl	3458c <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   349ca:	462a      	mov	r2, r5
   349cc:	a912      	add	r1, sp, #72	; 0x48
   349ce:	4638      	mov	r0, r7
   349d0:	f7ff fd75 	bl	344be <uECC_vli_set>
}
   349d4:	b01a      	add	sp, #104	; 0x68
   349d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000349da <uECC_vli_modInv>:
{
   349da:	b5f0      	push	{r4, r5, r6, r7, lr}
   349dc:	460f      	mov	r7, r1
   349de:	b0a1      	sub	sp, #132	; 0x84
   349e0:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   349e2:	4619      	mov	r1, r3
   349e4:	4638      	mov	r0, r7
{
   349e6:	4615      	mov	r5, r2
   349e8:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   349ea:	f7ff fd30 	bl	3444e <uECC_vli_isZero>
   349ee:	b128      	cbz	r0, 349fc <uECC_vli_modInv+0x22>
		uECC_vli_clear(result, num_words);
   349f0:	4630      	mov	r0, r6
}
   349f2:	b021      	add	sp, #132	; 0x84
   349f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		uECC_vli_clear(result, num_words);
   349f8:	f7ff bd1e 	b.w	34438 <uECC_vli_clear>
	uECC_vli_set(a, input, num_words);
   349fc:	4622      	mov	r2, r4
   349fe:	4639      	mov	r1, r7
   34a00:	4668      	mov	r0, sp
   34a02:	f7ff fd5c 	bl	344be <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   34a06:	4629      	mov	r1, r5
   34a08:	a808      	add	r0, sp, #32
   34a0a:	f7ff fd58 	bl	344be <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   34a0e:	a810      	add	r0, sp, #64	; 0x40
   34a10:	4621      	mov	r1, r4
   34a12:	f7ff fd11 	bl	34438 <uECC_vli_clear>
	u[0] = 1;
   34a16:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   34a18:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   34a1a:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   34a1c:	f7ff fd0c 	bl	34438 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   34a20:	4622      	mov	r2, r4
   34a22:	a908      	add	r1, sp, #32
   34a24:	4668      	mov	r0, sp
   34a26:	f7ff fd56 	bl	344d6 <uECC_vli_cmp_unsafe>
   34a2a:	b930      	cbnz	r0, 34a3a <uECC_vli_modInv+0x60>
  	uECC_vli_set(result, u, num_words);
   34a2c:	4622      	mov	r2, r4
   34a2e:	a910      	add	r1, sp, #64	; 0x40
   34a30:	4630      	mov	r0, r6
   34a32:	f7ff fd44 	bl	344be <uECC_vli_set>
}
   34a36:	b021      	add	sp, #132	; 0x84
   34a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (EVEN(a)) {
   34a3a:	9b00      	ldr	r3, [sp, #0]
   34a3c:	07da      	lsls	r2, r3, #31
   34a3e:	d409      	bmi.n	34a54 <uECC_vli_modInv+0x7a>
			uECC_vli_rshift1(a, num_words);
   34a40:	4621      	mov	r1, r4
   34a42:	4668      	mov	r0, sp
   34a44:	f7ff fc63 	bl	3430e <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   34a48:	4622      	mov	r2, r4
   34a4a:	4629      	mov	r1, r5
   34a4c:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   34a4e:	f7ff fc6b 	bl	34328 <vli_modInv_update>
   34a52:	e7e5      	b.n	34a20 <uECC_vli_modInv+0x46>
    		} else if (EVEN(b)) {
   34a54:	9b08      	ldr	r3, [sp, #32]
   34a56:	07db      	lsls	r3, r3, #31
   34a58:	d407      	bmi.n	34a6a <uECC_vli_modInv+0x90>
			uECC_vli_rshift1(b, num_words);
   34a5a:	4621      	mov	r1, r4
   34a5c:	a808      	add	r0, sp, #32
   34a5e:	f7ff fc56 	bl	3430e <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   34a62:	4622      	mov	r2, r4
   34a64:	4629      	mov	r1, r5
   34a66:	a818      	add	r0, sp, #96	; 0x60
   34a68:	e7f1      	b.n	34a4e <uECC_vli_modInv+0x74>
		} else if (cmpResult > 0) {
   34a6a:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   34a6c:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   34a6e:	dd1c      	ble.n	34aaa <uECC_vli_modInv+0xd0>
			uECC_vli_sub(a, a, b, num_words);
   34a70:	aa08      	add	r2, sp, #32
   34a72:	4669      	mov	r1, sp
   34a74:	4668      	mov	r0, sp
   34a76:	f7ff fd55 	bl	34524 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   34a7a:	4621      	mov	r1, r4
   34a7c:	4668      	mov	r0, sp
   34a7e:	f7ff fc46 	bl	3430e <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   34a82:	4622      	mov	r2, r4
   34a84:	a918      	add	r1, sp, #96	; 0x60
   34a86:	a810      	add	r0, sp, #64	; 0x40
   34a88:	f7ff fd25 	bl	344d6 <uECC_vli_cmp_unsafe>
   34a8c:	2800      	cmp	r0, #0
   34a8e:	da05      	bge.n	34a9c <uECC_vli_modInv+0xc2>
        			uECC_vli_add(u, u, mod, num_words);
   34a90:	a910      	add	r1, sp, #64	; 0x40
   34a92:	4623      	mov	r3, r4
   34a94:	462a      	mov	r2, r5
   34a96:	4608      	mov	r0, r1
   34a98:	f7ff fc1f 	bl	342da <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   34a9c:	a910      	add	r1, sp, #64	; 0x40
   34a9e:	4623      	mov	r3, r4
   34aa0:	aa18      	add	r2, sp, #96	; 0x60
   34aa2:	4608      	mov	r0, r1
   34aa4:	f7ff fd3e 	bl	34524 <uECC_vli_sub>
   34aa8:	e7ce      	b.n	34a48 <uECC_vli_modInv+0x6e>
      			uECC_vli_sub(b, b, a, num_words);
   34aaa:	466a      	mov	r2, sp
   34aac:	a808      	add	r0, sp, #32
   34aae:	f7ff fd39 	bl	34524 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   34ab2:	4621      	mov	r1, r4
   34ab4:	a808      	add	r0, sp, #32
   34ab6:	f7ff fc2a 	bl	3430e <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   34aba:	4622      	mov	r2, r4
   34abc:	a910      	add	r1, sp, #64	; 0x40
   34abe:	a818      	add	r0, sp, #96	; 0x60
   34ac0:	f7ff fd09 	bl	344d6 <uECC_vli_cmp_unsafe>
   34ac4:	2800      	cmp	r0, #0
   34ac6:	da05      	bge.n	34ad4 <uECC_vli_modInv+0xfa>
        			uECC_vli_add(v, v, mod, num_words);
   34ac8:	a918      	add	r1, sp, #96	; 0x60
   34aca:	4623      	mov	r3, r4
   34acc:	462a      	mov	r2, r5
   34ace:	4608      	mov	r0, r1
   34ad0:	f7ff fc03 	bl	342da <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   34ad4:	a918      	add	r1, sp, #96	; 0x60
   34ad6:	4623      	mov	r3, r4
   34ad8:	aa10      	add	r2, sp, #64	; 0x40
   34ada:	4608      	mov	r0, r1
   34adc:	f7ff fd22 	bl	34524 <uECC_vli_sub>
   34ae0:	e7bf      	b.n	34a62 <uECC_vli_modInv+0x88>

00034ae2 <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   34ae2:	7809      	ldrb	r1, [r1, #0]
   34ae4:	0049      	lsls	r1, r1, #1
   34ae6:	b249      	sxtb	r1, r1
   34ae8:	f7ff bcb1 	b.w	3444e <uECC_vli_isZero>

00034aec <apply_z>:
{
   34aec:	b5f0      	push	{r4, r5, r6, r7, lr}
   34aee:	4615      	mov	r5, r2
   34af0:	b089      	sub	sp, #36	; 0x24
   34af2:	461c      	mov	r4, r3
   34af4:	4607      	mov	r7, r0
   34af6:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   34af8:	461a      	mov	r2, r3
   34afa:	4629      	mov	r1, r5
   34afc:	4668      	mov	r0, sp
   34afe:	f7ff fe02 	bl	34706 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   34b02:	4623      	mov	r3, r4
   34b04:	466a      	mov	r2, sp
   34b06:	4639      	mov	r1, r7
   34b08:	4638      	mov	r0, r7
   34b0a:	f7ff fdec 	bl	346e6 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   34b0e:	4623      	mov	r3, r4
   34b10:	462a      	mov	r2, r5
   34b12:	4669      	mov	r1, sp
   34b14:	4668      	mov	r0, sp
   34b16:	f7ff fde6 	bl	346e6 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   34b1a:	4623      	mov	r3, r4
   34b1c:	466a      	mov	r2, sp
   34b1e:	4631      	mov	r1, r6
   34b20:	4630      	mov	r0, r6
   34b22:	f7ff fde0 	bl	346e6 <uECC_vli_modMult_fast>
}
   34b26:	b009      	add	sp, #36	; 0x24
   34b28:	bdf0      	pop	{r4, r5, r6, r7, pc}

00034b2a <XYcZ_add>:
{
   34b2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   34b2e:	b08a      	sub	sp, #40	; 0x28
   34b30:	4614      	mov	r4, r2
   34b32:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   34b36:	4655      	mov	r5, sl
{
   34b38:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   34b3a:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   34b3e:	9600      	str	r6, [sp, #0]
{
   34b40:	4680      	mov	r8, r0
   34b42:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   34b44:	462b      	mov	r3, r5
   34b46:	4602      	mov	r2, r0
   34b48:	4621      	mov	r1, r4
   34b4a:	a802      	add	r0, sp, #8
   34b4c:	f7ff fd1e 	bl	3458c <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   34b50:	a902      	add	r1, sp, #8
   34b52:	4652      	mov	r2, sl
   34b54:	4608      	mov	r0, r1
   34b56:	f7ff fdd6 	bl	34706 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   34b5a:	4653      	mov	r3, sl
   34b5c:	aa02      	add	r2, sp, #8
   34b5e:	4641      	mov	r1, r8
   34b60:	4640      	mov	r0, r8
   34b62:	f7ff fdc0 	bl	346e6 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   34b66:	4653      	mov	r3, sl
   34b68:	aa02      	add	r2, sp, #8
   34b6a:	4621      	mov	r1, r4
   34b6c:	4620      	mov	r0, r4
   34b6e:	f7ff fdba 	bl	346e6 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   34b72:	462b      	mov	r3, r5
   34b74:	464a      	mov	r2, r9
   34b76:	4639      	mov	r1, r7
   34b78:	4638      	mov	r0, r7
   34b7a:	9600      	str	r6, [sp, #0]
   34b7c:	f7ff fd06 	bl	3458c <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   34b80:	4652      	mov	r2, sl
   34b82:	4639      	mov	r1, r7
   34b84:	a802      	add	r0, sp, #8
   34b86:	f7ff fdbe 	bl	34706 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   34b8a:	a902      	add	r1, sp, #8
   34b8c:	462b      	mov	r3, r5
   34b8e:	4642      	mov	r2, r8
   34b90:	4608      	mov	r0, r1
   34b92:	9600      	str	r6, [sp, #0]
   34b94:	f7ff fcfa 	bl	3458c <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   34b98:	a902      	add	r1, sp, #8
   34b9a:	462b      	mov	r3, r5
   34b9c:	4622      	mov	r2, r4
   34b9e:	4608      	mov	r0, r1
   34ba0:	9600      	str	r6, [sp, #0]
   34ba2:	f7ff fcf3 	bl	3458c <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   34ba6:	462b      	mov	r3, r5
   34ba8:	4642      	mov	r2, r8
   34baa:	4621      	mov	r1, r4
   34bac:	4620      	mov	r0, r4
   34bae:	9600      	str	r6, [sp, #0]
   34bb0:	f7ff fcec 	bl	3458c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   34bb4:	4653      	mov	r3, sl
   34bb6:	4622      	mov	r2, r4
   34bb8:	4649      	mov	r1, r9
   34bba:	4648      	mov	r0, r9
   34bbc:	f7ff fd93 	bl	346e6 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   34bc0:	462b      	mov	r3, r5
   34bc2:	aa02      	add	r2, sp, #8
   34bc4:	4641      	mov	r1, r8
   34bc6:	4620      	mov	r0, r4
   34bc8:	9600      	str	r6, [sp, #0]
   34bca:	f7ff fcdf 	bl	3458c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   34bce:	4653      	mov	r3, sl
   34bd0:	4622      	mov	r2, r4
   34bd2:	4639      	mov	r1, r7
   34bd4:	4638      	mov	r0, r7
   34bd6:	f7ff fd86 	bl	346e6 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   34bda:	462b      	mov	r3, r5
   34bdc:	464a      	mov	r2, r9
   34bde:	4639      	mov	r1, r7
   34be0:	4638      	mov	r0, r7
   34be2:	9600      	str	r6, [sp, #0]
   34be4:	f7ff fcd2 	bl	3458c <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   34be8:	4632      	mov	r2, r6
   34bea:	a902      	add	r1, sp, #8
   34bec:	4620      	mov	r0, r4
   34bee:	f7ff fc66 	bl	344be <uECC_vli_set>
}
   34bf2:	b00a      	add	sp, #40	; 0x28
   34bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00034bf8 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   34bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34bfc:	b0af      	sub	sp, #188	; 0xbc
   34bfe:	4691      	mov	r9, r2
   34c00:	9c39      	ldr	r4, [sp, #228]	; 0xe4
   34c02:	9002      	str	r0, [sp, #8]
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   34c04:	f994 6000 	ldrsb.w	r6, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   34c08:	a816      	add	r0, sp, #88	; 0x58
   34c0a:	4632      	mov	r2, r6
{
   34c0c:	461d      	mov	r5, r3
	uECC_vli_set(Rx[1], point, num_words);
   34c0e:	f7ff fc56 	bl	344be <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   34c12:	00b3      	lsls	r3, r6, #2
   34c14:	9303      	str	r3, [sp, #12]
   34c16:	eb01 0386 	add.w	r3, r1, r6, lsl #2
{
   34c1a:	4688      	mov	r8, r1
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   34c1c:	a826      	add	r0, sp, #152	; 0x98
   34c1e:	4619      	mov	r1, r3
   34c20:	9304      	str	r3, [sp, #16]
   34c22:	f7ff fc4c 	bl	344be <uECC_vli_set>
	if (initial_Z) {
   34c26:	2d00      	cmp	r5, #0
   34c28:	f000 8081 	beq.w	34d2e <EccPoint_mult+0x136>
		uECC_vli_set(z, initial_Z, num_words);
   34c2c:	4629      	mov	r1, r5
   34c2e:	a806      	add	r0, sp, #24
   34c30:	f7ff fc45 	bl	344be <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   34c34:	4632      	mov	r2, r6
   34c36:	a916      	add	r1, sp, #88	; 0x58
   34c38:	a80e      	add	r0, sp, #56	; 0x38
   34c3a:	f7ff fc40 	bl	344be <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   34c3e:	a926      	add	r1, sp, #152	; 0x98
   34c40:	a81e      	add	r0, sp, #120	; 0x78
   34c42:	f7ff fc3c 	bl	344be <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   34c46:	4623      	mov	r3, r4
   34c48:	aa06      	add	r2, sp, #24
   34c4a:	a816      	add	r0, sp, #88	; 0x58
   34c4c:	f7ff ff4e 	bl	34aec <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   34c50:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   34c54:	4623      	mov	r3, r4
   34c56:	aa06      	add	r2, sp, #24
   34c58:	a926      	add	r1, sp, #152	; 0x98
   34c5a:	a816      	add	r0, sp, #88	; 0x58
   34c5c:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   34c5e:	4623      	mov	r3, r4
   34c60:	aa06      	add	r2, sp, #24
   34c62:	a91e      	add	r1, sp, #120	; 0x78
   34c64:	a80e      	add	r0, sp, #56	; 0x38
   34c66:	f7ff ff41 	bl	34aec <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   34c6a:	f9bd 50e0 	ldrsh.w	r5, [sp, #224]	; 0xe0
   34c6e:	3d02      	subs	r5, #2
   34c70:	b22d      	sxth	r5, r5
   34c72:	2d00      	cmp	r5, #0
   34c74:	dc62      	bgt.n	34d3c <EccPoint_mult+0x144>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   34c76:	f8d9 5000 	ldr.w	r5, [r9]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   34c7a:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   34c7c:	f005 0701 	and.w	r7, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   34c80:	ab0e      	add	r3, sp, #56	; 0x38
   34c82:	eb03 1947 	add.w	r9, r3, r7, lsl #5
   34c86:	43ed      	mvns	r5, r5
   34c88:	ab1e      	add	r3, sp, #120	; 0x78
   34c8a:	eb03 1747 	add.w	r7, r3, r7, lsl #5
   34c8e:	f005 0501 	and.w	r5, r5, #1
   34c92:	ab0e      	add	r3, sp, #56	; 0x38
   34c94:	eb03 1a45 	add.w	sl, r3, r5, lsl #5
   34c98:	ab1e      	add	r3, sp, #120	; 0x78
   34c9a:	eb03 1545 	add.w	r5, r3, r5, lsl #5
   34c9e:	462b      	mov	r3, r5
   34ca0:	4652      	mov	r2, sl
   34ca2:	4639      	mov	r1, r7
   34ca4:	4648      	mov	r0, r9

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   34ca6:	f104 0b04 	add.w	fp, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   34caa:	f7ff fe08 	bl	348be <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   34cae:	465b      	mov	r3, fp
   34cb0:	aa0e      	add	r2, sp, #56	; 0x38
   34cb2:	a916      	add	r1, sp, #88	; 0x58
   34cb4:	a806      	add	r0, sp, #24
   34cb6:	9600      	str	r6, [sp, #0]
   34cb8:	f7ff fc68 	bl	3458c <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   34cbc:	a906      	add	r1, sp, #24
   34cbe:	4623      	mov	r3, r4
   34cc0:	463a      	mov	r2, r7
   34cc2:	4608      	mov	r0, r1
   34cc4:	f7ff fd0f 	bl	346e6 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   34cc8:	a906      	add	r1, sp, #24
   34cca:	4623      	mov	r3, r4
   34ccc:	4642      	mov	r2, r8
   34cce:	4608      	mov	r0, r1
   34cd0:	f7ff fd09 	bl	346e6 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   34cd4:	a906      	add	r1, sp, #24
   34cd6:	4633      	mov	r3, r6
   34cd8:	465a      	mov	r2, fp
   34cda:	4608      	mov	r0, r1
   34cdc:	f7ff fe7d 	bl	349da <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   34ce0:	a906      	add	r1, sp, #24
   34ce2:	9a04      	ldr	r2, [sp, #16]
   34ce4:	4623      	mov	r3, r4
   34ce6:	4608      	mov	r0, r1
   34ce8:	f7ff fcfd 	bl	346e6 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   34cec:	a906      	add	r1, sp, #24
   34cee:	4623      	mov	r3, r4
   34cf0:	464a      	mov	r2, r9
   34cf2:	4608      	mov	r0, r1
   34cf4:	f7ff fcf7 	bl	346e6 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   34cf8:	463b      	mov	r3, r7
   34cfa:	464a      	mov	r2, r9
   34cfc:	4629      	mov	r1, r5
   34cfe:	4650      	mov	r0, sl
   34d00:	9400      	str	r4, [sp, #0]
   34d02:	f7ff ff12 	bl	34b2a <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   34d06:	4623      	mov	r3, r4
   34d08:	aa06      	add	r2, sp, #24
   34d0a:	a91e      	add	r1, sp, #120	; 0x78
   34d0c:	a80e      	add	r0, sp, #56	; 0x38
   34d0e:	f7ff feed 	bl	34aec <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   34d12:	9802      	ldr	r0, [sp, #8]
   34d14:	4632      	mov	r2, r6
   34d16:	a90e      	add	r1, sp, #56	; 0x38
   34d18:	f7ff fbd1 	bl	344be <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   34d1c:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
   34d20:	a91e      	add	r1, sp, #120	; 0x78
   34d22:	4418      	add	r0, r3
   34d24:	f7ff fbcb 	bl	344be <uECC_vli_set>
}
   34d28:	b02f      	add	sp, #188	; 0xbc
   34d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   34d2e:	4631      	mov	r1, r6
   34d30:	a806      	add	r0, sp, #24
   34d32:	f7ff fb81 	bl	34438 <uECC_vli_clear>
		z[0] = 1;
   34d36:	2301      	movs	r3, #1
   34d38:	9306      	str	r3, [sp, #24]
   34d3a:	e77b      	b.n	34c34 <EccPoint_mult+0x3c>
		nb = !uECC_vli_testBit(scalar, i);
   34d3c:	4629      	mov	r1, r5
   34d3e:	4648      	mov	r0, r9
   34d40:	f7ff fb94 	bl	3446c <uECC_vli_testBit>
   34d44:	fab0 f780 	clz	r7, r0
   34d48:	097f      	lsrs	r7, r7, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   34d4a:	f1c7 0101 	rsb	r1, r7, #1
   34d4e:	ab0e      	add	r3, sp, #56	; 0x38
   34d50:	eb03 1b41 	add.w	fp, r3, r1, lsl #5
   34d54:	ab1e      	add	r3, sp, #120	; 0x78
   34d56:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   34d5a:	ab0e      	add	r3, sp, #56	; 0x38
   34d5c:	eb03 1a47 	add.w	sl, r3, r7, lsl #5
   34d60:	ab1e      	add	r3, sp, #120	; 0x78
   34d62:	eb03 1747 	add.w	r7, r3, r7, lsl #5
   34d66:	463b      	mov	r3, r7
   34d68:	4652      	mov	r2, sl
   34d6a:	4658      	mov	r0, fp
   34d6c:	9400      	str	r4, [sp, #0]
   34d6e:	9105      	str	r1, [sp, #20]
   34d70:	f7ff fda5 	bl	348be <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   34d74:	9905      	ldr	r1, [sp, #20]
   34d76:	9400      	str	r4, [sp, #0]
   34d78:	460b      	mov	r3, r1
   34d7a:	465a      	mov	r2, fp
   34d7c:	4639      	mov	r1, r7
   34d7e:	4650      	mov	r0, sl
   34d80:	f7ff fed3 	bl	34b2a <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   34d84:	3d01      	subs	r5, #1
   34d86:	e773      	b.n	34c70 <EccPoint_mult+0x78>

00034d88 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   34d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   34d8c:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   34d90:	f119 061f 	adds.w	r6, r9, #31
   34d94:	bf48      	it	mi
   34d96:	f109 063e 	addmi.w	r6, r9, #62	; 0x3e
{
   34d9a:	460f      	mov	r7, r1

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   34d9c:	f103 0524 	add.w	r5, r3, #36	; 0x24
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   34da0:	f346 1647 	sbfx	r6, r6, #5, #8
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   34da4:	4601      	mov	r1, r0
{
   34da6:	4690      	mov	r8, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   34da8:	4633      	mov	r3, r6
   34daa:	462a      	mov	r2, r5
   34dac:	4638      	mov	r0, r7
   34dae:	f7ff fa94 	bl	342da <uECC_vli_add>
   34db2:	4604      	mov	r4, r0
   34db4:	b990      	cbnz	r0, 34ddc <regularize_k+0x54>
   34db6:	ebb9 1f46 	cmp.w	r9, r6, lsl #5
   34dba:	da06      	bge.n	34dca <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   34dbc:	4649      	mov	r1, r9
   34dbe:	4638      	mov	r0, r7
   34dc0:	f7ff fb54 	bl	3446c <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   34dc4:	1e04      	subs	r4, r0, #0
   34dc6:	bf18      	it	ne
   34dc8:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   34dca:	4633      	mov	r3, r6
   34dcc:	462a      	mov	r2, r5
   34dce:	4639      	mov	r1, r7
   34dd0:	4640      	mov	r0, r8
   34dd2:	f7ff fa82 	bl	342da <uECC_vli_add>

	return carry;
}
   34dd6:	4620      	mov	r0, r4
   34dd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   34ddc:	2401      	movs	r4, #1
   34dde:	e7f4      	b.n	34dca <regularize_k+0x42>

00034de0 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   34de0:	b530      	push	{r4, r5, lr}
   34de2:	4614      	mov	r4, r2
   34de4:	b095      	sub	sp, #84	; 0x54
   34de6:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   34de8:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   34dea:	4623      	mov	r3, r4
{
   34dec:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   34dee:	a904      	add	r1, sp, #16
   34df0:	9102      	str	r1, [sp, #8]
   34df2:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   34df4:	f7ff ffc8 	bl	34d88 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   34df8:	fab0 f380 	clz	r3, r0
   34dfc:	9401      	str	r4, [sp, #4]
   34dfe:	095b      	lsrs	r3, r3, #5
   34e00:	aa14      	add	r2, sp, #80	; 0x50
   34e02:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   34e06:	8863      	ldrh	r3, [r4, #2]
   34e08:	3301      	adds	r3, #1
   34e0a:	b21b      	sxth	r3, r3
   34e0c:	9300      	str	r3, [sp, #0]
   34e0e:	f852 2c48 	ldr.w	r2, [r2, #-72]
   34e12:	2300      	movs	r3, #0
   34e14:	f104 0144 	add.w	r1, r4, #68	; 0x44
   34e18:	4628      	mov	r0, r5
   34e1a:	f7ff feed 	bl	34bf8 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   34e1e:	4621      	mov	r1, r4
   34e20:	4628      	mov	r0, r5
   34e22:	f7ff fe5e 	bl	34ae2 <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   34e26:	fab0 f080 	clz	r0, r0
   34e2a:	0940      	lsrs	r0, r0, #5
   34e2c:	b015      	add	sp, #84	; 0x54
   34e2e:	bd30      	pop	{r4, r5, pc}

00034e30 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   34e30:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   34e32:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   34e34:	1e4f      	subs	r7, r1, #1
   34e36:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   34e38:	428c      	cmp	r4, r1
   34e3a:	f105 0501 	add.w	r5, r5, #1
   34e3e:	db00      	blt.n	34e42 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   34e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   34e42:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   34e44:	f023 0603 	bic.w	r6, r3, #3
   34e48:	f003 0303 	and.w	r3, r3, #3
   34e4c:	5996      	ldr	r6, [r2, r6]
   34e4e:	00db      	lsls	r3, r3, #3
   34e50:	fa26 f303 	lsr.w	r3, r6, r3
   34e54:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   34e56:	e7ee      	b.n	34e36 <uECC_vli_nativeToBytes+0x6>

00034e58 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   34e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34e5a:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   34e5c:	1cd1      	adds	r1, r2, #3
   34e5e:	bf48      	it	mi
   34e60:	1d91      	addmi	r1, r2, #6
   34e62:	f341 0187 	sbfx	r1, r1, #2, #8
{
   34e66:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   34e68:	f7ff fae6 	bl	34438 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   34e6c:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   34e6e:	1e67      	subs	r7, r4, #1
   34e70:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   34e72:	42a2      	cmp	r2, r4
   34e74:	f105 0501 	add.w	r5, r5, #1
   34e78:	db00      	blt.n	34e7c <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   34e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   34e7c:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   34e7e:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   34e82:	5cb2      	ldrb	r2, [r6, r2]
   34e84:	f003 0303 	and.w	r3, r3, #3
   34e88:	00db      	lsls	r3, r3, #3
   34e8a:	409a      	lsls	r2, r3
		native[b / uECC_WORD_SIZE] |=
   34e8c:	5843      	ldr	r3, [r0, r1]
   34e8e:	4313      	orrs	r3, r2
   34e90:	5043      	str	r3, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   34e92:	e7ed      	b.n	34e70 <uECC_vli_bytesToNative+0x18>

00034e94 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   34e94:	b5f0      	push	{r4, r5, r6, r7, lr}
   34e96:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   34e98:	f991 6000 	ldrsb.w	r6, [r1]
{
   34e9c:	4605      	mov	r5, r0
   34e9e:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   34ea0:	f7ff fe1f 	bl	34ae2 <EccPoint_isZero>
   34ea4:	bb28      	cbnz	r0, 34ef2 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   34ea6:	1d27      	adds	r7, r4, #4
   34ea8:	4632      	mov	r2, r6
   34eaa:	4629      	mov	r1, r5
   34eac:	4638      	mov	r0, r7
   34eae:	f7ff fb12 	bl	344d6 <uECC_vli_cmp_unsafe>
   34eb2:	2801      	cmp	r0, #1
   34eb4:	d120      	bne.n	34ef8 <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   34eb6:	4632      	mov	r2, r6
   34eb8:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   34ebc:	4638      	mov	r0, r7
   34ebe:	f7ff fb0a 	bl	344d6 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   34ec2:	2801      	cmp	r0, #1
   34ec4:	d118      	bne.n	34ef8 <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   34ec6:	4622      	mov	r2, r4
   34ec8:	4668      	mov	r0, sp
   34eca:	f7ff fc1c 	bl	34706 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   34ece:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   34ed2:	4622      	mov	r2, r4
   34ed4:	4629      	mov	r1, r5
   34ed6:	a808      	add	r0, sp, #32
   34ed8:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   34eda:	4632      	mov	r2, r6
   34edc:	a908      	add	r1, sp, #32
   34ede:	4668      	mov	r0, sp
   34ee0:	f7ff fb0e 	bl	34500 <uECC_vli_equal>
		return -3;

	return 0;
   34ee4:	2800      	cmp	r0, #0
   34ee6:	bf14      	ite	ne
   34ee8:	f06f 0002 	mvnne.w	r0, #2
   34eec:	2000      	moveq	r0, #0
}
   34eee:	b011      	add	sp, #68	; 0x44
   34ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   34ef2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34ef6:	e7fa      	b.n	34eee <uECC_valid_point+0x5a>
		return -2;
   34ef8:	f06f 0001 	mvn.w	r0, #1
   34efc:	e7f7      	b.n	34eee <uECC_valid_point+0x5a>

00034efe <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   34efe:	b5f0      	push	{r4, r5, r6, r7, lr}
   34f00:	460c      	mov	r4, r1

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   34f02:	f991 7001 	ldrsb.w	r7, [r1, #1]
{
   34f06:	b091      	sub	sp, #68	; 0x44
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   34f08:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   34f0a:	4601      	mov	r1, r0
{
   34f0c:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   34f0e:	463a      	mov	r2, r7
   34f10:	4668      	mov	r0, sp
   34f12:	f7ff ffa1 	bl	34e58 <uECC_vli_bytesToNative>
	_public + curve->num_words,
   34f16:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   34f1a:	463a      	mov	r2, r7
   34f1c:	19e9      	adds	r1, r5, r7
   34f1e:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   34f22:	f7ff ff99 	bl	34e58 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   34f26:	2210      	movs	r2, #16
   34f28:	4631      	mov	r1, r6
   34f2a:	4668      	mov	r0, sp
   34f2c:	f7ff fad3 	bl	344d6 <uECC_vli_cmp_unsafe>
   34f30:	b128      	cbz	r0, 34f3e <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   34f32:	4621      	mov	r1, r4
   34f34:	4668      	mov	r0, sp
   34f36:	f7ff ffad 	bl	34e94 <uECC_valid_point>
}
   34f3a:	b011      	add	sp, #68	; 0x44
   34f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -4;
   34f3e:	f06f 0003 	mvn.w	r0, #3
   34f42:	e7fa      	b.n	34f3a <uECC_valid_public_key+0x3c>

00034f44 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   34f44:	78cb      	ldrb	r3, [r1, #3]
   34f46:	7802      	ldrb	r2, [r0, #0]
   34f48:	4053      	eors	r3, r2
   34f4a:	7003      	strb	r3, [r0, #0]
   34f4c:	884b      	ldrh	r3, [r1, #2]
   34f4e:	7842      	ldrb	r2, [r0, #1]
   34f50:	4053      	eors	r3, r2
   34f52:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   34f54:	680a      	ldr	r2, [r1, #0]
   34f56:	7883      	ldrb	r3, [r0, #2]
   34f58:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   34f5c:	7083      	strb	r3, [r0, #2]
   34f5e:	680a      	ldr	r2, [r1, #0]
   34f60:	78c3      	ldrb	r3, [r0, #3]
   34f62:	4053      	eors	r3, r2
   34f64:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   34f66:	79cb      	ldrb	r3, [r1, #7]
   34f68:	7902      	ldrb	r2, [r0, #4]
   34f6a:	4053      	eors	r3, r2
   34f6c:	7103      	strb	r3, [r0, #4]
   34f6e:	88cb      	ldrh	r3, [r1, #6]
   34f70:	7942      	ldrb	r2, [r0, #5]
   34f72:	4053      	eors	r3, r2
   34f74:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   34f76:	684a      	ldr	r2, [r1, #4]
   34f78:	7983      	ldrb	r3, [r0, #6]
   34f7a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   34f7e:	7183      	strb	r3, [r0, #6]
   34f80:	684a      	ldr	r2, [r1, #4]
   34f82:	79c3      	ldrb	r3, [r0, #7]
   34f84:	4053      	eors	r3, r2
   34f86:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   34f88:	7acb      	ldrb	r3, [r1, #11]
   34f8a:	7a02      	ldrb	r2, [r0, #8]
   34f8c:	4053      	eors	r3, r2
   34f8e:	7203      	strb	r3, [r0, #8]
   34f90:	7a42      	ldrb	r2, [r0, #9]
   34f92:	894b      	ldrh	r3, [r1, #10]
   34f94:	4053      	eors	r3, r2
   34f96:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   34f98:	688a      	ldr	r2, [r1, #8]
   34f9a:	7a83      	ldrb	r3, [r0, #10]
   34f9c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   34fa0:	7283      	strb	r3, [r0, #10]
   34fa2:	688a      	ldr	r2, [r1, #8]
   34fa4:	7ac3      	ldrb	r3, [r0, #11]
   34fa6:	4053      	eors	r3, r2
   34fa8:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   34faa:	7bcb      	ldrb	r3, [r1, #15]
   34fac:	7b02      	ldrb	r2, [r0, #12]
   34fae:	4053      	eors	r3, r2
   34fb0:	7303      	strb	r3, [r0, #12]
   34fb2:	89cb      	ldrh	r3, [r1, #14]
   34fb4:	7b42      	ldrb	r2, [r0, #13]
   34fb6:	4053      	eors	r3, r2
   34fb8:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   34fba:	68ca      	ldr	r2, [r1, #12]
   34fbc:	7b83      	ldrb	r3, [r0, #14]
   34fbe:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   34fc2:	7383      	strb	r3, [r0, #14]
   34fc4:	68ca      	ldr	r2, [r1, #12]
   34fc6:	7bc3      	ldrb	r3, [r0, #15]
   34fc8:	4053      	eors	r3, r2
   34fca:	73c3      	strb	r3, [r0, #15]
}
   34fcc:	4770      	bx	lr

00034fce <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   34fce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   34fd0:	7802      	ldrb	r2, [r0, #0]
   34fd2:	f88d 2000 	strb.w	r2, [sp]
   34fd6:	7942      	ldrb	r2, [r0, #5]
   34fd8:	f88d 2001 	strb.w	r2, [sp, #1]
   34fdc:	7a82      	ldrb	r2, [r0, #10]
   34fde:	f88d 2002 	strb.w	r2, [sp, #2]
   34fe2:	7bc2      	ldrb	r2, [r0, #15]
   34fe4:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   34fe8:	7902      	ldrb	r2, [r0, #4]
   34fea:	f88d 2004 	strb.w	r2, [sp, #4]
   34fee:	7a42      	ldrb	r2, [r0, #9]
   34ff0:	f88d 2005 	strb.w	r2, [sp, #5]
   34ff4:	7b82      	ldrb	r2, [r0, #14]
   34ff6:	f88d 2006 	strb.w	r2, [sp, #6]
   34ffa:	78c2      	ldrb	r2, [r0, #3]
   34ffc:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   35000:	7a02      	ldrb	r2, [r0, #8]
   35002:	f88d 2008 	strb.w	r2, [sp, #8]
   35006:	7b42      	ldrb	r2, [r0, #13]
   35008:	f88d 2009 	strb.w	r2, [sp, #9]
   3500c:	7882      	ldrb	r2, [r0, #2]
   3500e:	f88d 200a 	strb.w	r2, [sp, #10]
   35012:	79c2      	ldrb	r2, [r0, #7]
   35014:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   35018:	7b02      	ldrb	r2, [r0, #12]
   3501a:	f88d 200c 	strb.w	r2, [sp, #12]
   3501e:	7842      	ldrb	r2, [r0, #1]
   35020:	7ac3      	ldrb	r3, [r0, #11]
   35022:	f88d 200d 	strb.w	r2, [sp, #13]
   35026:	7982      	ldrb	r2, [r0, #6]
   35028:	f88d 200e 	strb.w	r2, [sp, #14]
   3502c:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   35030:	2310      	movs	r3, #16
   35032:	466a      	mov	r2, sp
   35034:	4619      	mov	r1, r3
   35036:	f7ff f88c 	bl	34152 <_copy>
}
   3503a:	b005      	add	sp, #20
   3503c:	f85d fb04 	ldr.w	pc, [sp], #4

00035040 <mult_row_column>:
{
   35040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35042:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   35044:	7808      	ldrb	r0, [r1, #0]
{
   35046:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   35048:	f7ff f892 	bl	34170 <_double_byte>
   3504c:	4605      	mov	r5, r0
   3504e:	7860      	ldrb	r0, [r4, #1]
   35050:	f7ff f88e 	bl	34170 <_double_byte>
   35054:	78a2      	ldrb	r2, [r4, #2]
   35056:	7863      	ldrb	r3, [r4, #1]
   35058:	4053      	eors	r3, r2
   3505a:	78e2      	ldrb	r2, [r4, #3]
   3505c:	4053      	eors	r3, r2
   3505e:	405d      	eors	r5, r3
   35060:	4068      	eors	r0, r5
   35062:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   35064:	7860      	ldrb	r0, [r4, #1]
   35066:	7827      	ldrb	r7, [r4, #0]
   35068:	f7ff f882 	bl	34170 <_double_byte>
   3506c:	4605      	mov	r5, r0
   3506e:	78a0      	ldrb	r0, [r4, #2]
   35070:	f7ff f87e 	bl	34170 <_double_byte>
   35074:	78a3      	ldrb	r3, [r4, #2]
   35076:	405f      	eors	r7, r3
   35078:	78e3      	ldrb	r3, [r4, #3]
   3507a:	405f      	eors	r7, r3
   3507c:	407d      	eors	r5, r7
   3507e:	4068      	eors	r0, r5
   35080:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   35082:	7863      	ldrb	r3, [r4, #1]
   35084:	7827      	ldrb	r7, [r4, #0]
   35086:	78a0      	ldrb	r0, [r4, #2]
   35088:	405f      	eors	r7, r3
   3508a:	f7ff f871 	bl	34170 <_double_byte>
   3508e:	4605      	mov	r5, r0
   35090:	78e0      	ldrb	r0, [r4, #3]
   35092:	f7ff f86d 	bl	34170 <_double_byte>
   35096:	78e3      	ldrb	r3, [r4, #3]
   35098:	405f      	eors	r7, r3
   3509a:	407d      	eors	r5, r7
   3509c:	4068      	eors	r0, r5
   3509e:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   350a0:	7820      	ldrb	r0, [r4, #0]
   350a2:	f7ff f865 	bl	34170 <_double_byte>
   350a6:	7862      	ldrb	r2, [r4, #1]
   350a8:	7823      	ldrb	r3, [r4, #0]
   350aa:	4053      	eors	r3, r2
   350ac:	78a2      	ldrb	r2, [r4, #2]
   350ae:	4053      	eors	r3, r2
   350b0:	ea80 0503 	eor.w	r5, r0, r3
   350b4:	78e0      	ldrb	r0, [r4, #3]
   350b6:	f7ff f85b 	bl	34170 <_double_byte>
   350ba:	b2ed      	uxtb	r5, r5
   350bc:	4045      	eors	r5, r0
   350be:	70f5      	strb	r5, [r6, #3]
}
   350c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000350c2 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   350c2:	b570      	push	{r4, r5, r6, lr}
   350c4:	4614      	mov	r4, r2
   350c6:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   350c8:	4605      	mov	r5, r0
   350ca:	2800      	cmp	r0, #0
   350cc:	d049      	beq.n	35162 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   350ce:	2900      	cmp	r1, #0
   350d0:	d049      	beq.n	35166 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   350d2:	2a00      	cmp	r2, #0
   350d4:	d049      	beq.n	3516a <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   350d6:	2310      	movs	r3, #16
   350d8:	460a      	mov	r2, r1
   350da:	4668      	mov	r0, sp
   350dc:	4619      	mov	r1, r3
   350de:	f7ff f838 	bl	34152 <_copy>
	add_round_key(state, s->words);
   350e2:	4621      	mov	r1, r4
   350e4:	4668      	mov	r0, sp
   350e6:	f7ff ff2d 	bl	34f44 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   350ea:	3410      	adds	r4, #16
   350ec:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   350f0:	4668      	mov	r0, sp
   350f2:	f7df fb13 	bl	1471c <sub_bytes>
		shift_rows(state);
   350f6:	4668      	mov	r0, sp
   350f8:	f7ff ff69 	bl	34fce <shift_rows>
	mult_row_column(t, s);
   350fc:	4669      	mov	r1, sp
   350fe:	a804      	add	r0, sp, #16
   35100:	f7ff ff9e 	bl	35040 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   35104:	a901      	add	r1, sp, #4
   35106:	a805      	add	r0, sp, #20
   35108:	f7ff ff9a 	bl	35040 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   3510c:	a902      	add	r1, sp, #8
   3510e:	a806      	add	r0, sp, #24
   35110:	f7ff ff96 	bl	35040 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   35114:	a903      	add	r1, sp, #12
   35116:	a807      	add	r0, sp, #28
   35118:	f7ff ff92 	bl	35040 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   3511c:	2310      	movs	r3, #16
   3511e:	4619      	mov	r1, r3
   35120:	eb0d 0203 	add.w	r2, sp, r3
   35124:	4668      	mov	r0, sp
   35126:	f7ff f814 	bl	34152 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   3512a:	4621      	mov	r1, r4
   3512c:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   3512e:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   35130:	f7ff ff08 	bl	34f44 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   35134:	42b4      	cmp	r4, r6
   35136:	d1db      	bne.n	350f0 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   35138:	f7df faf0 	bl	1471c <sub_bytes>
	shift_rows(state);
   3513c:	4668      	mov	r0, sp
   3513e:	f7ff ff46 	bl	34fce <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   35142:	4621      	mov	r1, r4
   35144:	4668      	mov	r0, sp
   35146:	f7ff fefd 	bl	34f44 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   3514a:	2310      	movs	r3, #16
   3514c:	4619      	mov	r1, r3
   3514e:	466a      	mov	r2, sp
   35150:	4628      	mov	r0, r5
   35152:	f7fe fffe 	bl	34152 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   35156:	4668      	mov	r0, sp
   35158:	2210      	movs	r2, #16
   3515a:	2100      	movs	r1, #0
   3515c:	f7ff f806 	bl	3416c <_set>

	return TC_CRYPTO_SUCCESS;
   35160:	2001      	movs	r0, #1
}
   35162:	b008      	add	sp, #32
   35164:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   35166:	4608      	mov	r0, r1
   35168:	e7fb      	b.n	35162 <tc_aes_encrypt+0xa0>
   3516a:	4610      	mov	r0, r2
   3516c:	e7f9      	b.n	35162 <tc_aes_encrypt+0xa0>

0003516e <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   3516e:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   35170:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   35172:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   35174:	f912 3b10 	ldrsb.w	r3, [r2], #16
   35178:	2b00      	cmp	r3, #0
   3517a:	bfac      	ite	ge
   3517c:	2300      	movge	r3, #0
   3517e:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   35180:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   35184:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   35188:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   3518a:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   3518e:	d002      	beq.n	35196 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   35190:	7813      	ldrb	r3, [r2, #0]
   35192:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   35194:	e7f4      	b.n	35180 <gf_double+0x12>
	}
}
   35196:	bd10      	pop	{r4, pc}

00035198 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   35198:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   3519a:	b120      	cbz	r0, 351a6 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   3519c:	2258      	movs	r2, #88	; 0x58
   3519e:	2100      	movs	r1, #0
   351a0:	f7fe ffe4 	bl	3416c <_set>
   351a4:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   351a6:	bd08      	pop	{r3, pc}

000351a8 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   351a8:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   351aa:	4604      	mov	r4, r0
   351ac:	b188      	cbz	r0, 351d2 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   351ae:	2210      	movs	r2, #16
   351b0:	2100      	movs	r1, #0
   351b2:	f7fe ffdb 	bl	3416c <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   351b6:	2210      	movs	r2, #16
   351b8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   351bc:	2100      	movs	r1, #0
   351be:	f7fe ffd5 	bl	3416c <_set>
	s->leftover_offset = 0;
   351c2:	2300      	movs	r3, #0
   351c4:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   351c6:	2200      	movs	r2, #0
   351c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   351cc:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   351d0:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   351d2:	bd10      	pop	{r4, pc}

000351d4 <tc_cmac_setup>:
{
   351d4:	b570      	push	{r4, r5, r6, lr}
   351d6:	4604      	mov	r4, r0
   351d8:	460d      	mov	r5, r1
   351da:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   351dc:	b310      	cbz	r0, 35224 <tc_cmac_setup+0x50>
   351de:	b311      	cbz	r1, 35226 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   351e0:	2258      	movs	r2, #88	; 0x58
   351e2:	2100      	movs	r1, #0
   351e4:	f7fe ffc2 	bl	3416c <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   351e8:	4629      	mov	r1, r5
	s->sched = sched;
   351ea:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   351ec:	4630      	mov	r0, r6
   351ee:	f7df faa1 	bl	14734 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   351f2:	2210      	movs	r2, #16
   351f4:	2100      	movs	r1, #0
   351f6:	4620      	mov	r0, r4
   351f8:	f7fe ffb8 	bl	3416c <_set>
	gf_double (s->K1, s->iv);
   351fc:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   35200:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   35202:	4621      	mov	r1, r4
   35204:	4620      	mov	r0, r4
   35206:	f7ff ff5c 	bl	350c2 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   3520a:	4621      	mov	r1, r4
   3520c:	4628      	mov	r0, r5
   3520e:	f7ff ffae 	bl	3516e <gf_double>
	gf_double (s->K2, s->K1);
   35212:	4629      	mov	r1, r5
   35214:	f104 0020 	add.w	r0, r4, #32
   35218:	f7ff ffa9 	bl	3516e <gf_double>
	tc_cmac_init(s);
   3521c:	4620      	mov	r0, r4
   3521e:	f7ff ffc3 	bl	351a8 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   35222:	2001      	movs	r0, #1
}
   35224:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   35226:	4608      	mov	r0, r1
   35228:	e7fc      	b.n	35224 <tc_cmac_setup+0x50>

0003522a <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   3522a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3522e:	460e      	mov	r6, r1
   35230:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   35232:	4604      	mov	r4, r0
   35234:	2800      	cmp	r0, #0
   35236:	d060      	beq.n	352fa <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   35238:	b1fa      	cbz	r2, 3527a <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   3523a:	2900      	cmp	r1, #0
   3523c:	d05d      	beq.n	352fa <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   3523e:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   35242:	ea53 0102 	orrs.w	r1, r3, r2
   35246:	d058      	beq.n	352fa <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   35248:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   3524a:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   3524e:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   35252:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   35256:	f1b8 0f00 	cmp.w	r8, #0
   3525a:	d02c      	beq.n	352b6 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   3525c:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   35260:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   35264:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   35266:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   35268:	d20a      	bcs.n	35280 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   3526a:	462b      	mov	r3, r5
   3526c:	4632      	mov	r2, r6
   3526e:	4629      	mov	r1, r5
   35270:	f7fe ff6f 	bl	34152 <_copy>
			s->leftover_offset += data_length;
   35274:	6c63      	ldr	r3, [r4, #68]	; 0x44
   35276:	442b      	add	r3, r5
   35278:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   3527a:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   3527c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   35280:	463b      	mov	r3, r7
   35282:	4632      	mov	r2, r6
   35284:	4639      	mov	r1, r7
   35286:	f7fe ff64 	bl	34152 <_copy>
		data_length -= remaining_space;
   3528a:	3d10      	subs	r5, #16
		s->leftover_offset = 0;
   3528c:	2300      	movs	r3, #0
   3528e:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   35290:	4445      	add	r5, r8
		data += remaining_space;
   35292:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   35294:	1e63      	subs	r3, r4, #1
   35296:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   3529a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   3529e:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   352a2:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   352a4:	ea82 0200 	eor.w	r2, r2, r0
   352a8:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   352aa:	d1f6      	bne.n	3529a <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   352ac:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   352ae:	4621      	mov	r1, r4
   352b0:	4620      	mov	r0, r4
   352b2:	f7ff ff06 	bl	350c2 <tc_aes_encrypt>
   352b6:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   352ba:	2d10      	cmp	r5, #16
   352bc:	d80a      	bhi.n	352d4 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   352be:	2d00      	cmp	r5, #0
   352c0:	d0db      	beq.n	3527a <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   352c2:	462b      	mov	r3, r5
   352c4:	4632      	mov	r2, r6
   352c6:	4629      	mov	r1, r5
   352c8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   352cc:	f7fe ff41 	bl	34152 <_copy>
		s->leftover_offset = data_length;
   352d0:	6465      	str	r5, [r4, #68]	; 0x44
   352d2:	e7d2      	b.n	3527a <tc_cmac_update+0x50>
   352d4:	1e63      	subs	r3, r4, #1
   352d6:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   352d8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   352dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   352e0:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   352e2:	ea82 0200 	eor.w	r2, r2, r0
   352e6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   352e8:	d1f6      	bne.n	352d8 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   352ea:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   352ec:	4621      	mov	r1, r4
   352ee:	4620      	mov	r0, r4
   352f0:	f7ff fee7 	bl	350c2 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   352f4:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   352f6:	3d10      	subs	r5, #16
   352f8:	e7df      	b.n	352ba <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   352fa:	2000      	movs	r0, #0
   352fc:	e7be      	b.n	3527c <tc_cmac_update+0x52>

000352fe <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   352fe:	b570      	push	{r4, r5, r6, lr}
   35300:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   35302:	4605      	mov	r5, r0
   35304:	b1e8      	cbz	r0, 35342 <tc_cmac_final+0x44>
   35306:	b369      	cbz	r1, 35364 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   35308:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   3530a:	2a10      	cmp	r2, #16
   3530c:	d11a      	bne.n	35344 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   3530e:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   35310:	1e63      	subs	r3, r4, #1
   35312:	3901      	subs	r1, #1
   35314:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   35318:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   3531c:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   35320:	4072      	eors	r2, r6
   35322:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   35326:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   35328:	ea82 0206 	eor.w	r2, r2, r6
   3532c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   3532e:	d1f3      	bne.n	35318 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   35330:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   35332:	4621      	mov	r1, r4
   35334:	4628      	mov	r0, r5
   35336:	f7ff fec4 	bl	350c2 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   3533a:	4620      	mov	r0, r4
   3533c:	f7ff ff2c 	bl	35198 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   35340:	2001      	movs	r0, #1
}
   35342:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   35344:	f102 0030 	add.w	r0, r2, #48	; 0x30
   35348:	2100      	movs	r1, #0
   3534a:	f1c2 0210 	rsb	r2, r2, #16
   3534e:	4420      	add	r0, r4
   35350:	f7fe ff0c 	bl	3416c <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   35354:	6c63      	ldr	r3, [r4, #68]	; 0x44
   35356:	4423      	add	r3, r4
   35358:	2280      	movs	r2, #128	; 0x80
   3535a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   3535e:	f104 0120 	add.w	r1, r4, #32
   35362:	e7d5      	b.n	35310 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   35364:	4608      	mov	r0, r1
   35366:	e7ec      	b.n	35342 <tc_cmac_final+0x44>

00035368 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   35368:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   3536a:	6800      	ldr	r0, [r0, #0]
   3536c:	f7df ba52 	b.w	14814 <z_arm_fatal_error>

00035370 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   35370:	2100      	movs	r1, #0
   35372:	2001      	movs	r0, #1
   35374:	f7df ba4e 	b.w	14814 <z_arm_fatal_error>

00035378 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   35378:	b508      	push	{r3, lr}
	handler();
   3537a:	f7df fb0f 	bl	1499c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   3537e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   35382:	f7df bbef 	b.w	14b64 <z_arm_exc_exit>

00035386 <z_log_msg_static_create.constprop.0>:
   35386:	2300      	movs	r3, #0
   35388:	f7dd bef4 	b.w	13174 <z_impl_z_log_msg_static_create>

0003538c <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   3538c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35390:	4684      	mov	ip, r0
   35392:	460f      	mov	r7, r1
	register const char *s = nptr;
   35394:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   35396:	4621      	mov	r1, r4
   35398:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   3539c:	2b20      	cmp	r3, #32
   3539e:	d0fa      	beq.n	35396 <strtoul+0xa>
   353a0:	f1a3 0009 	sub.w	r0, r3, #9
   353a4:	2804      	cmp	r0, #4
   353a6:	d9f6      	bls.n	35396 <strtoul+0xa>
	} while (isspace((unsigned char)c));
	if (c == '-') {
   353a8:	2b2d      	cmp	r3, #45	; 0x2d
   353aa:	d125      	bne.n	353f8 <strtoul+0x6c>
		neg = 1;
		c = *s++;
   353ac:	784b      	ldrb	r3, [r1, #1]
   353ae:	1c8c      	adds	r4, r1, #2
		neg = 1;
   353b0:	f04f 0e01 	mov.w	lr, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   353b4:	bb3a      	cbnz	r2, 35406 <strtoul+0x7a>
   353b6:	2b30      	cmp	r3, #48	; 0x30
   353b8:	d032      	beq.n	35420 <strtoul+0x94>
		s += 2;
		base = 16;
	}

	if (base == 0) {
		base = c == '0' ? 8 : 10;
   353ba:	220a      	movs	r2, #10
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   353bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   353c0:	2500      	movs	r5, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   353c2:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   353c6:	fb02 f801 	mul.w	r8, r2, r1
   353ca:	ea6f 0808 	mvn.w	r8, r8
	for (acc = 0, any = 0;; c = *s++) {
   353ce:	4628      	mov	r0, r5
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   353d0:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
		if (isdigit((unsigned char)c)) {
   353d4:	2e09      	cmp	r6, #9
   353d6:	d82a      	bhi.n	3542e <strtoul+0xa2>
			c -= '0';
   353d8:	4633      	mov	r3, r6
		} else if (isalpha((unsigned char)c)) {
			c -= isupper((unsigned char)c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   353da:	429a      	cmp	r2, r3
   353dc:	dd37      	ble.n	3544e <strtoul+0xc2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   353de:	1c6e      	adds	r6, r5, #1
   353e0:	d007      	beq.n	353f2 <strtoul+0x66>
   353e2:	4288      	cmp	r0, r1
   353e4:	d830      	bhi.n	35448 <strtoul+0xbc>
   353e6:	d101      	bne.n	353ec <strtoul+0x60>
   353e8:	4543      	cmp	r3, r8
   353ea:	dc2d      	bgt.n	35448 <strtoul+0xbc>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   353ec:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   353f0:	2501      	movs	r5, #1
	for (acc = 0, any = 0;; c = *s++) {
   353f2:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit((unsigned char)c)) {
   353f6:	e7eb      	b.n	353d0 <strtoul+0x44>
	} else if (c == '+') {
   353f8:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   353fa:	bf04      	itt	eq
   353fc:	784b      	ldrbeq	r3, [r1, #1]
   353fe:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   35400:	f04f 0e00 	mov.w	lr, #0
   35404:	e7d6      	b.n	353b4 <strtoul+0x28>
	if ((base == 0 || base == 16) &&
   35406:	2a10      	cmp	r2, #16
   35408:	d1d8      	bne.n	353bc <strtoul+0x30>
   3540a:	2b30      	cmp	r3, #48	; 0x30
   3540c:	d1d6      	bne.n	353bc <strtoul+0x30>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   3540e:	7821      	ldrb	r1, [r4, #0]
   35410:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   35414:	2958      	cmp	r1, #88	; 0x58
   35416:	d1d1      	bne.n	353bc <strtoul+0x30>
		c = s[1];
   35418:	7863      	ldrb	r3, [r4, #1]
		base = 16;
   3541a:	2210      	movs	r2, #16
		s += 2;
   3541c:	3402      	adds	r4, #2
	if (base == 0) {
   3541e:	e7cd      	b.n	353bc <strtoul+0x30>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   35420:	7822      	ldrb	r2, [r4, #0]
   35422:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   35426:	2a58      	cmp	r2, #88	; 0x58
   35428:	d0f6      	beq.n	35418 <strtoul+0x8c>
		base = c == '0' ? 8 : 10;
   3542a:	2208      	movs	r2, #8
   3542c:	e7c6      	b.n	353bc <strtoul+0x30>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   3542e:	f043 0620 	orr.w	r6, r3, #32
   35432:	3e61      	subs	r6, #97	; 0x61
		} else if (isalpha((unsigned char)c)) {
   35434:	2e19      	cmp	r6, #25
   35436:	d80a      	bhi.n	3544e <strtoul+0xc2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   35438:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
			c -= isupper((unsigned char)c) ? 'A' - 10 : 'a' - 10;
   3543c:	2e1a      	cmp	r6, #26
   3543e:	bf34      	ite	cc
   35440:	2637      	movcc	r6, #55	; 0x37
   35442:	2657      	movcs	r6, #87	; 0x57
   35444:	1b9b      	subs	r3, r3, r6
   35446:	e7c8      	b.n	353da <strtoul+0x4e>
			any = -1;
   35448:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3544c:	e7d1      	b.n	353f2 <strtoul+0x66>
		}
	}
	if (any < 0) {
   3544e:	1c6b      	adds	r3, r5, #1
   35450:	d107      	bne.n	35462 <strtoul+0xd6>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   35452:	f7fb ff93 	bl	3137c <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   35456:	2322      	movs	r3, #34	; 0x22
   35458:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   3545a:	4628      	mov	r0, r5
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   3545c:	b947      	cbnz	r7, 35470 <strtoul+0xe4>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   3545e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   35462:	f1be 0f00 	cmp.w	lr, #0
   35466:	d000      	beq.n	3546a <strtoul+0xde>
		acc = -acc;
   35468:	4240      	negs	r0, r0
	if (endptr != NULL) {
   3546a:	2f00      	cmp	r7, #0
   3546c:	d0f7      	beq.n	3545e <strtoul+0xd2>
		*endptr = (char *)(any ? s - 1 : nptr);
   3546e:	b10d      	cbz	r5, 35474 <strtoul+0xe8>
   35470:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   35474:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   35478:	e7f1      	b.n	3545e <strtoul+0xd2>

0003547a <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   3547a:	3901      	subs	r1, #1
   3547c:	4603      	mov	r3, r0
   3547e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   35482:	b90a      	cbnz	r2, 35488 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   35484:	701a      	strb	r2, [r3, #0]

	return dest;
}
   35486:	4770      	bx	lr
		*d = *s;
   35488:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   3548c:	e7f7      	b.n	3547e <strcpy+0x4>

0003548e <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
   3548e:	b510      	push	{r4, lr}
   35490:	3901      	subs	r1, #1
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   35492:	4603      	mov	r3, r0
   35494:	b922      	cbnz	r2, 354a0 <strncpy+0x12>
   35496:	441a      	add	r2, r3
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   35498:	2100      	movs	r1, #0
	while (n > 0) {
   3549a:	4293      	cmp	r3, r2
   3549c:	d108      	bne.n	354b0 <strncpy+0x22>
		d++;
		n--;
	}

	return dest;
}
   3549e:	bd10      	pop	{r4, pc}
	while ((n > 0) && *s != '\0') {
   354a0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   354a4:	2c00      	cmp	r4, #0
   354a6:	d0f6      	beq.n	35496 <strncpy+0x8>
		*d = *s;
   354a8:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   354ac:	3a01      	subs	r2, #1
   354ae:	e7f1      	b.n	35494 <strncpy+0x6>
		*d = '\0';
   354b0:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   354b4:	e7f1      	b.n	3549a <strncpy+0xc>

000354b6 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   354b6:	4603      	mov	r3, r0
	size_t n = 0;
   354b8:	2000      	movs	r0, #0

	while (*s != '\0') {
   354ba:	5c1a      	ldrb	r2, [r3, r0]
   354bc:	b902      	cbnz	r2, 354c0 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   354be:	4770      	bx	lr
		n++;
   354c0:	3001      	adds	r0, #1
   354c2:	e7fa      	b.n	354ba <strlen+0x4>

000354c4 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   354c4:	4603      	mov	r3, r0
	size_t n = 0;
   354c6:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   354c8:	5c1a      	ldrb	r2, [r3, r0]
   354ca:	b10a      	cbz	r2, 354d0 <strnlen+0xc>
   354cc:	4288      	cmp	r0, r1
   354ce:	d100      	bne.n	354d2 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   354d0:	4770      	bx	lr
		n++;
   354d2:	3001      	adds	r0, #1
   354d4:	e7f8      	b.n	354c8 <strnlen+0x4>

000354d6 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   354d6:	1e43      	subs	r3, r0, #1
   354d8:	3901      	subs	r1, #1
   354da:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   354de:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   354e2:	4282      	cmp	r2, r0
   354e4:	d101      	bne.n	354ea <strcmp+0x14>
   354e6:	2a00      	cmp	r2, #0
   354e8:	d1f7      	bne.n	354da <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   354ea:	1a10      	subs	r0, r2, r0
   354ec:	4770      	bx	lr

000354ee <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   354ee:	b570      	push	{r4, r5, r6, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   354f0:	460b      	mov	r3, r1
   354f2:	4605      	mov	r5, r0
   354f4:	b16a      	cbz	r2, 35512 <strncmp+0x24>
   354f6:	f810 6b01 	ldrb.w	r6, [r0], #1
   354fa:	781c      	ldrb	r4, [r3, #0]
   354fc:	42b4      	cmp	r4, r6
   354fe:	f101 0101 	add.w	r1, r1, #1
   35502:	d100      	bne.n	35506 <strncmp+0x18>
   35504:	b91c      	cbnz	r4, 3550e <strncmp+0x20>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   35506:	782a      	ldrb	r2, [r5, #0]
   35508:	781b      	ldrb	r3, [r3, #0]
   3550a:	1ad0      	subs	r0, r2, r3
   3550c:	e002      	b.n	35514 <strncmp+0x26>
		n--;
   3550e:	3a01      	subs	r2, #1
   35510:	e7ee      	b.n	354f0 <strncmp+0x2>
	return (n == 0) ? 0 : (*s1 - *s2);
   35512:	4610      	mov	r0, r2
}
   35514:	bd70      	pop	{r4, r5, r6, pc}

00035516 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   35516:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   35518:	b15a      	cbz	r2, 35532 <memcmp+0x1c>
   3551a:	3901      	subs	r1, #1
   3551c:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   3551e:	f810 2b01 	ldrb.w	r2, [r0], #1
   35522:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   35526:	42a0      	cmp	r0, r4
   35528:	d001      	beq.n	3552e <memcmp+0x18>
   3552a:	429a      	cmp	r2, r3
   3552c:	d0f7      	beq.n	3551e <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   3552e:	1ad0      	subs	r0, r2, r3
}
   35530:	bd10      	pop	{r4, pc}
		return 0;
   35532:	4610      	mov	r0, r2
   35534:	e7fc      	b.n	35530 <memcmp+0x1a>

00035536 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   35536:	b510      	push	{r4, lr}
   35538:	1e43      	subs	r3, r0, #1
   3553a:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   3553c:	4291      	cmp	r1, r2
   3553e:	d100      	bne.n	35542 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   35540:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   35542:	f811 4b01 	ldrb.w	r4, [r1], #1
   35546:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   3554a:	e7f7      	b.n	3553c <memcpy+0x6>

0003554c <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   3554c:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   3554e:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   35550:	4603      	mov	r3, r0
	while (n > 0) {
   35552:	4293      	cmp	r3, r2
   35554:	d100      	bne.n	35558 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   35556:	4770      	bx	lr
		*(d_byte++) = c_byte;
   35558:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   3555c:	e7f9      	b.n	35552 <memset+0x6>

0003555e <_stdout_hook_default>:
}
   3555e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   35562:	4770      	bx	lr

00035564 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   35564:	2806      	cmp	r0, #6
   35566:	d108      	bne.n	3557a <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   35568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3556c:	2201      	movs	r2, #1
   3556e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   35572:	f3bf 8f4f 	dsb	sy
        __WFE();
   35576:	bf20      	wfe
    while (true)
   35578:	e7fd      	b.n	35576 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   3557a:	4770      	bx	lr

0003557c <pm_state_exit_post_ops>:
   3557c:	2300      	movs	r3, #0
   3557e:	f383 8811 	msr	BASEPRI, r3
   35582:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   35586:	4770      	bx	lr

00035588 <gpio_pin_configure_dt>:
{
   35588:	b4f0      	push	{r4, r5, r6, r7}
   3558a:	4603      	mov	r3, r0
   3558c:	460a      	mov	r2, r1
				  spec->pin,
   3558e:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   35590:	88db      	ldrh	r3, [r3, #6]
	return gpio_pin_configure(spec->port,
   35592:	6800      	ldr	r0, [r0, #0]
   35594:	4313      	orrs	r3, r2
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   35596:	02dc      	lsls	r4, r3, #11
	const struct gpio_driver_api *api =
   35598:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
   3559a:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   3559c:	d506      	bpl.n	355ac <gpio_pin_configure_dt+0x24>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   3559e:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
   355a2:	d003      	beq.n	355ac <gpio_pin_configure_dt+0x24>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   355a4:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   355a6:	bf48      	it	mi
   355a8:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   355ac:	6834      	ldr	r4, [r6, #0]
   355ae:	2501      	movs	r5, #1
   355b0:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   355b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   355b6:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   355b8:	bf4c      	ite	mi
   355ba:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   355bc:	43ac      	bicpl	r4, r5
   355be:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
   355c0:	683b      	ldr	r3, [r7, #0]
}
   355c2:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
   355c4:	4718      	bx	r3

000355c6 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   355c6:	b530      	push	{r4, r5, lr}
   355c8:	b085      	sub	sp, #20
   355ca:	4604      	mov	r4, r0
   355cc:	4615      	mov	r5, r2

	LOG_DBG("irk %s", bt_hex(irk, 16));
	LOG_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   355ce:	4668      	mov	r0, sp
   355d0:	2203      	movs	r2, #3
   355d2:	f7ff ffb0 	bl	35536 <memcpy>
	(void)memset(res + 3, 0, 13);
   355d6:	220d      	movs	r2, #13
   355d8:	2100      	movs	r1, #0
   355da:	f10d 0003 	add.w	r0, sp, #3
   355de:	f7ff ffb5 	bl	3554c <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   355e2:	4620      	mov	r0, r4
   355e4:	466a      	mov	r2, sp
   355e6:	4669      	mov	r1, sp
   355e8:	f7ec fdb8 	bl	2215c <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   355ec:	4604      	mov	r4, r0
   355ee:	b920      	cbnz	r0, 355fa <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   355f0:	2203      	movs	r2, #3
   355f2:	4669      	mov	r1, sp
   355f4:	4628      	mov	r0, r5
   355f6:	f7ff ff9e 	bl	35536 <memcpy>

	return 0;
}
   355fa:	4620      	mov	r0, r4
   355fc:	b005      	add	sp, #20
   355fe:	bd30      	pop	{r4, r5, pc}

00035600 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   35600:	b513      	push	{r0, r1, r4, lr}
   35602:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	LOG_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   35604:	aa01      	add	r2, sp, #4
   35606:	3103      	adds	r1, #3
   35608:	f7ff ffdd 	bl	355c6 <ah>
	if (err) {
   3560c:	b948      	cbnz	r0, 35622 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   3560e:	2203      	movs	r2, #3
   35610:	a901      	add	r1, sp, #4
   35612:	4620      	mov	r0, r4
   35614:	f7ff ff7f 	bl	35516 <memcmp>
   35618:	fab0 f080 	clz	r0, r0
   3561c:	0940      	lsrs	r0, r0, #5
}
   3561e:	b002      	add	sp, #8
   35620:	bd10      	pop	{r4, pc}
		return false;
   35622:	2000      	movs	r0, #0
   35624:	e7fb      	b.n	3561e <bt_rpa_irk_matches+0x1e>

00035626 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   35626:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   35628:	1cce      	adds	r6, r1, #3
{
   3562a:	4605      	mov	r5, r0
   3562c:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   3562e:	4630      	mov	r0, r6
   35630:	2103      	movs	r1, #3
   35632:	f7ec fd91 	bl	22158 <bt_rand>
	if (err) {
   35636:	b960      	cbnz	r0, 35652 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   35638:	7963      	ldrb	r3, [r4, #5]
   3563a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3563e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   35642:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   35644:	4622      	mov	r2, r4
   35646:	4631      	mov	r1, r6
   35648:	4628      	mov	r0, r5
	}

	LOG_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   3564a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   3564e:	f7ff bfba 	b.w	355c6 <ah>
}
   35652:	bd70      	pop	{r4, r5, r6, pc}

00035654 <send_cmd_status>:
{
   35654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   35658:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   3565c:	4606      	mov	r6, r0
   3565e:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   35660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35664:	2100      	movs	r1, #0
   35666:	200f      	movs	r0, #15
   35668:	f7e0 fbde 	bl	15e28 <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   3566c:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   3566e:	f100 080c 	add.w	r8, r0, #12
   35672:	4604      	mov	r4, r0
   35674:	7607      	strb	r7, [r0, #24]
   35676:	2102      	movs	r1, #2
   35678:	4640      	mov	r0, r8
   3567a:	f002 f9f9 	bl	37a70 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   3567e:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   35680:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   35682:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   35684:	7041      	strb	r1, [r0, #1]
   35686:	4640      	mov	r0, r8
   35688:	f002 f9f2 	bl	37a70 <net_buf_simple_add>
	evt->ncmd = 1U;
   3568c:	7047      	strb	r7, [r0, #1]
	evt->opcode = sys_cpu_to_le16(opcode);
   3568e:	8046      	strh	r6, [r0, #2]
	evt->status = status;
   35690:	7005      	strb	r5, [r0, #0]
		bt_recv_prio(buf);
   35692:	4620      	mov	r0, r4
}
   35694:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   35698:	f7e1 bed2 	b.w	17440 <bt_recv_prio>

0003569c <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   3569c:	f101 0320 	add.w	r3, r1, #32
   356a0:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   356a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   356a6:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   356aa:	428b      	cmp	r3, r1
   356ac:	d1f9      	bne.n	356a2 <sys_memcpy_swap.constprop.0+0x6>
}
   356ae:	4770      	bx	lr

000356b0 <bt_hci_ecc_supported_commands>:
void bt_hci_ecc_supported_commands(uint8_t *supported_commands)
{
	/* LE Read Local P-256 Public Key */
	supported_commands[34] |= BIT(1);
	/* LE Generate DH Key v1 */
	supported_commands[34] |= BIT(2);
   356b0:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   356b4:	f043 0306 	orr.w	r3, r3, #6
   356b8:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	/* LE Generate DH Key v2 */
	supported_commands[41] |= BIT(2);
   356bc:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   356c0:	f043 0304 	orr.w	r3, r3, #4
   356c4:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   356c8:	4770      	bx	lr

000356ca <default_CSPRNG>:

int default_CSPRNG(uint8_t *dst, unsigned int len)
{
   356ca:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   356cc:	f7ec fd44 	bl	22158 <bt_rand>
}
   356d0:	fab0 f080 	clz	r0, r0
   356d4:	0940      	lsrs	r0, r0, #5
   356d6:	bd08      	pop	{r3, pc}

000356d8 <z_log_msg_static_create.constprop.0>:
   356d8:	2300      	movs	r3, #0
   356da:	f7dd bd4b 	b.w	13174 <z_impl_z_log_msg_static_create>

000356de <bt_settings_decode_key>:
{
   356de:	b570      	push	{r4, r5, r6, lr}
   356e0:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   356e2:	2100      	movs	r1, #0
{
   356e4:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   356e6:	f7fe fc65 	bl	33fb4 <settings_name_next>
   356ea:	280d      	cmp	r0, #13
   356ec:	d118      	bne.n	35720 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   356ee:	7b23      	ldrb	r3, [r4, #12]
   356f0:	2b30      	cmp	r3, #48	; 0x30
   356f2:	d013      	beq.n	3571c <bt_settings_decode_key+0x3e>
	} else if (key[12] == '1') {
   356f4:	2b31      	cmp	r3, #49	; 0x31
   356f6:	d113      	bne.n	35720 <bt_settings_decode_key+0x42>
   356f8:	2301      	movs	r3, #1
		addr->type = BT_ADDR_LE_PUBLIC;
   356fa:	f805 3b06 	strb.w	r3, [r5], #6
   356fe:	f104 060c 	add.w	r6, r4, #12
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   35702:	462a      	mov	r2, r5
   35704:	4620      	mov	r0, r4
   35706:	2301      	movs	r3, #1
   35708:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   3570a:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   3570c:	f7fd fae2 	bl	32cd4 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   35710:	42b4      	cmp	r4, r6
   35712:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   35716:	d1f4      	bne.n	35702 <bt_settings_decode_key+0x24>
	return 0;
   35718:	2000      	movs	r0, #0
}
   3571a:	bd70      	pop	{r4, r5, r6, pc}
   3571c:	2300      	movs	r3, #0
   3571e:	e7ec      	b.n	356fa <bt_settings_decode_key+0x1c>
		return -EINVAL;
   35720:	f06f 0015 	mvn.w	r0, #21
   35724:	e7f9      	b.n	3571a <bt_settings_decode_key+0x3c>

00035726 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   35726:	b510      	push	{r4, lr}
   35728:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   3572a:	7801      	ldrb	r1, [r0, #0]
   3572c:	7822      	ldrb	r2, [r4, #0]
   3572e:	428a      	cmp	r2, r1
{
   35730:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   35732:	d00f      	beq.n	35754 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   35734:	4669      	mov	r1, sp
   35736:	f7e0 fb17 	bl	15d68 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   3573a:	a905      	add	r1, sp, #20
   3573c:	4620      	mov	r0, r4
   3573e:	f7e0 fb13 	bl	15d68 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   35742:	2210      	movs	r2, #16
   35744:	f10d 0115 	add.w	r1, sp, #21
   35748:	f10d 0001 	add.w	r0, sp, #1
   3574c:	f7ff fee3 	bl	35516 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   35750:	b00a      	add	sp, #40	; 0x28
   35752:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   35754:	2a01      	cmp	r2, #1
   35756:	d006      	beq.n	35766 <bt_uuid_cmp+0x40>
   35758:	2a02      	cmp	r2, #2
   3575a:	d007      	beq.n	3576c <bt_uuid_cmp+0x46>
   3575c:	b972      	cbnz	r2, 3577c <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   3575e:	8840      	ldrh	r0, [r0, #2]
   35760:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   35762:	1ac0      	subs	r0, r0, r3
   35764:	e7f4      	b.n	35750 <bt_uuid_cmp+0x2a>
   35766:	6840      	ldr	r0, [r0, #4]
   35768:	6863      	ldr	r3, [r4, #4]
   3576a:	e7fa      	b.n	35762 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   3576c:	2210      	movs	r2, #16
   3576e:	1c61      	adds	r1, r4, #1
   35770:	3001      	adds	r0, #1
}
   35772:	b00a      	add	sp, #40	; 0x28
   35774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   35778:	f7ff becd 	b.w	35516 <memcmp>
	switch (u1->type) {
   3577c:	f06f 0015 	mvn.w	r0, #21
   35780:	e7e6      	b.n	35750 <bt_uuid_cmp+0x2a>

00035782 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   35782:	2a04      	cmp	r2, #4
{
   35784:	b510      	push	{r4, lr}
	switch (data_len) {
   35786:	d00a      	beq.n	3579e <bt_uuid_create+0x1c>
   35788:	2a10      	cmp	r2, #16
   3578a:	d00d      	beq.n	357a8 <bt_uuid_create+0x26>
   3578c:	2a02      	cmp	r2, #2
   3578e:	f04f 0300 	mov.w	r3, #0
   35792:	d10f      	bne.n	357b4 <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   35794:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   35796:	880b      	ldrh	r3, [r1, #0]
   35798:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   3579a:	2001      	movs	r0, #1
}
   3579c:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   3579e:	2301      	movs	r3, #1
   357a0:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   357a2:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   357a4:	6043      	str	r3, [r0, #4]
		break;
   357a6:	e7f8      	b.n	3579a <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   357a8:	2302      	movs	r3, #2
   357aa:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   357ae:	f7ff fec2 	bl	35536 <memcpy>
		break;
   357b2:	e7f2      	b.n	3579a <bt_uuid_create+0x18>
	switch (data_len) {
   357b4:	4618      	mov	r0, r3
   357b6:	e7f1      	b.n	3579c <bt_uuid_create+0x1a>

000357b8 <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   357b8:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   357ba:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   357bc:	2106      	movs	r1, #6
{
   357be:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   357c0:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   357c4:	f7ec fcc8 	bl	22158 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   357c8:	b918      	cbnz	r0, 357d2 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   357ca:	79a3      	ldrb	r3, [r4, #6]
   357cc:	f063 033f 	orn	r3, r3, #63	; 0x3f
   357d0:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   357d2:	bd10      	pop	{r4, pc}

000357d4 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   357d4:	280f      	cmp	r0, #15
   357d6:	d807      	bhi.n	357e8 <bt_hci_evt_get_flags+0x14>
   357d8:	280d      	cmp	r0, #13
   357da:	d80b      	bhi.n	357f4 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   357dc:	2805      	cmp	r0, #5
   357de:	bf08      	it	eq
   357e0:	2003      	moveq	r0, #3
   357e2:	bf18      	it	ne
   357e4:	2002      	movne	r0, #2
   357e6:	4770      	bx	lr
	switch (evt) {
   357e8:	2813      	cmp	r0, #19
   357ea:	d003      	beq.n	357f4 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   357ec:	281a      	cmp	r0, #26
   357ee:	bf08      	it	eq
   357f0:	2001      	moveq	r0, #1
   357f2:	e7f6      	b.n	357e2 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   357f4:	2001      	movs	r0, #1
	}
}
   357f6:	4770      	bx	lr

000357f8 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   357f8:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   357fc:	b183      	cbz	r3, 35820 <update_sec_level+0x28>
   357fe:	7b5a      	ldrb	r2, [r3, #13]
   35800:	07d1      	lsls	r1, r2, #31
   35802:	d50d      	bpl.n	35820 <update_sec_level+0x28>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   35804:	06d2      	lsls	r2, r2, #27
   35806:	d50d      	bpl.n	35824 <update_sec_level+0x2c>
   35808:	7b1b      	ldrb	r3, [r3, #12]
   3580a:	2b10      	cmp	r3, #16
   3580c:	bf14      	ite	ne
   3580e:	2303      	movne	r3, #3
   35810:	2304      	moveq	r3, #4
			conn->sec_level = BT_SECURITY_L3;
   35812:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   35814:	7a80      	ldrb	r0, [r0, #10]
}
   35816:	4298      	cmp	r0, r3
   35818:	bf8c      	ite	hi
   3581a:	2000      	movhi	r0, #0
   3581c:	2001      	movls	r0, #1
   3581e:	4770      	bx	lr
   35820:	2302      	movs	r3, #2
   35822:	e7f6      	b.n	35812 <update_sec_level+0x1a>
   35824:	2303      	movs	r3, #3
   35826:	e7f4      	b.n	35812 <update_sec_level+0x1a>

00035828 <hci_vendor_event>:
}
   35828:	4770      	bx	lr

0003582a <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   3582a:	2207      	movs	r2, #7
   3582c:	f7ff be83 	b.w	35536 <memcpy>

00035830 <atomic_or>:
{
   35830:	b510      	push	{r4, lr}
   35832:	4603      	mov	r3, r0
}
   35834:	f3bf 8f5b 	dmb	ish
   35838:	e853 0f00 	ldrex	r0, [r3]
   3583c:	ea40 0201 	orr.w	r2, r0, r1
   35840:	e843 2400 	strex	r4, r2, [r3]
   35844:	2c00      	cmp	r4, #0
   35846:	d1f7      	bne.n	35838 <atomic_or+0x8>
   35848:	f3bf 8f5b 	dmb	ish
   3584c:	bd10      	pop	{r4, pc}

0003584e <unpair_remote>:
{
   3584e:	460b      	mov	r3, r1
	unpair(*id, &info->addr);
   35850:	4601      	mov	r1, r0
   35852:	7818      	ldrb	r0, [r3, #0]
   35854:	f7e0 bb30 	b.w	15eb8 <unpair>

00035858 <z_log_msg_static_create.constprop.0>:
   35858:	2300      	movs	r3, #0
   3585a:	f7dd bc8b 	b.w	13174 <z_impl_z_log_msg_static_create>

0003585e <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3585e:	f3bf 8f5b 	dmb	ish
   35862:	e850 3f00 	ldrex	r3, [r0]
   35866:	400b      	ands	r3, r1
   35868:	e840 3200 	strex	r2, r3, [r0]
   3586c:	2a00      	cmp	r2, #0
   3586e:	d1f8      	bne.n	35862 <atomic_and.isra.0+0x4>
   35870:	f3bf 8f5b 	dmb	ish
}
   35874:	4770      	bx	lr

00035876 <sys_put_le64>:
	dst[1] = val >> 8;
   35876:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   3587a:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   3587c:	0e00      	lsrs	r0, r0, #24
   3587e:	7053      	strb	r3, [r2, #1]
   35880:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   35882:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   35884:	f3c1 2007 	ubfx	r0, r1, #8, #8
   35888:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   3588a:	7093      	strb	r3, [r2, #2]
   3588c:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   3588e:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   35890:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   35892:	71d1      	strb	r1, [r2, #7]
}
   35894:	4770      	bx	lr

00035896 <le_conn_param_neg_reply>:
{
   35896:	b570      	push	{r4, r5, r6, lr}
   35898:	4606      	mov	r6, r0
   3589a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   3589c:	f242 0021 	movw	r0, #8225	; 0x2021
   358a0:	2103      	movs	r1, #3
   358a2:	f7e0 ffab 	bl	167fc <bt_hci_cmd_create>
	if (!buf) {
   358a6:	4604      	mov	r4, r0
   358a8:	b918      	cbnz	r0, 358b2 <le_conn_param_neg_reply+0x1c>
}
   358aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   358ae:	f7e0 bb99 	b.w	15fe4 <le_conn_param_neg_reply.part.0>
   358b2:	2103      	movs	r1, #3
   358b4:	300c      	adds	r0, #12
   358b6:	f002 f8db 	bl	37a70 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   358ba:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   358bc:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   358be:	4621      	mov	r1, r4
   358c0:	f242 0021 	movw	r0, #8225	; 0x2021
}
   358c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   358c8:	f7e0 bfd2 	b.w	16870 <bt_hci_cmd_send>

000358cc <bt_hci_disconnect>:
{
   358cc:	b570      	push	{r4, r5, r6, lr}
   358ce:	4606      	mov	r6, r0
   358d0:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   358d2:	f240 4006 	movw	r0, #1030	; 0x406
   358d6:	2103      	movs	r1, #3
   358d8:	f7e0 ff90 	bl	167fc <bt_hci_cmd_create>
	if (!buf) {
   358dc:	4604      	mov	r4, r0
   358de:	b168      	cbz	r0, 358fc <bt_hci_disconnect+0x30>
   358e0:	2103      	movs	r1, #3
   358e2:	300c      	adds	r0, #12
   358e4:	f002 f8c4 	bl	37a70 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   358e8:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   358ea:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   358ec:	4621      	mov	r1, r4
   358ee:	2200      	movs	r2, #0
}
   358f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   358f4:	f240 4006 	movw	r0, #1030	; 0x406
   358f8:	f7e1 b8dc 	b.w	16ab4 <bt_hci_cmd_send_sync>
}
   358fc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   35900:	bd70      	pop	{r4, r5, r6, pc}

00035902 <bt_le_set_data_len>:
{
   35902:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35904:	4607      	mov	r7, r0
   35906:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   35908:	f242 0022 	movw	r0, #8226	; 0x2022
   3590c:	2106      	movs	r1, #6
{
   3590e:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   35910:	f7e0 ff74 	bl	167fc <bt_hci_cmd_create>
	if (!buf) {
   35914:	4604      	mov	r4, r0
   35916:	b178      	cbz	r0, 35938 <bt_le_set_data_len+0x36>
   35918:	2106      	movs	r1, #6
   3591a:	300c      	adds	r0, #12
   3591c:	f002 f8a8 	bl	37a70 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   35920:	883b      	ldrh	r3, [r7, #0]
   35922:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   35924:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   35926:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   35928:	4621      	mov	r1, r4
   3592a:	2200      	movs	r2, #0
}
   3592c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   35930:	f242 0022 	movw	r0, #8226	; 0x2022
   35934:	f7e1 b8be 	b.w	16ab4 <bt_hci_cmd_send_sync>
}
   35938:	f06f 0068 	mvn.w	r0, #104	; 0x68
   3593c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003593e <bt_le_set_phy>:
{
   3593e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   35942:	4681      	mov	r9, r0
   35944:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   35946:	f242 0032 	movw	r0, #8242	; 0x2032
   3594a:	2107      	movs	r1, #7
{
   3594c:	f89d a020 	ldrb.w	sl, [sp, #32]
   35950:	4617      	mov	r7, r2
   35952:	461e      	mov	r6, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   35954:	f7e0 ff52 	bl	167fc <bt_hci_cmd_create>
	if (!buf) {
   35958:	4605      	mov	r5, r0
   3595a:	b1a0      	cbz	r0, 35986 <bt_le_set_phy+0x48>
   3595c:	2107      	movs	r1, #7
   3595e:	300c      	adds	r0, #12
   35960:	f002 f886 	bl	37a70 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   35964:	f8b9 3000 	ldrh.w	r3, [r9]
   35968:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   3596a:	f880 8002 	strb.w	r8, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   3596e:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   35970:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   35972:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   35976:	4629      	mov	r1, r5
   35978:	2200      	movs	r2, #0
}
   3597a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   3597e:	f242 0032 	movw	r0, #8242	; 0x2032
   35982:	f7e1 b897 	b.w	16ab4 <bt_hci_cmd_send_sync>
}
   35986:	f06f 0068 	mvn.w	r0, #104	; 0x68
   3598a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0003598e <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   3598e:	68c0      	ldr	r0, [r0, #12]
   35990:	f7e1 b96e 	b.w	16c70 <bt_hci_le_enh_conn_complete>

00035994 <bt_le_conn_params_valid>:
{
   35994:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   35996:	8803      	ldrh	r3, [r0, #0]
   35998:	8842      	ldrh	r2, [r0, #2]
   3599a:	4293      	cmp	r3, r2
   3599c:	d819      	bhi.n	359d2 <bt_le_conn_params_valid+0x3e>
   3599e:	2b05      	cmp	r3, #5
   359a0:	d917      	bls.n	359d2 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   359a2:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   359a6:	d814      	bhi.n	359d2 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   359a8:	8883      	ldrh	r3, [r0, #4]
   359aa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   359ae:	d210      	bcs.n	359d2 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   359b0:	88c0      	ldrh	r0, [r0, #6]
   359b2:	f1a0 010a 	sub.w	r1, r0, #10
   359b6:	b289      	uxth	r1, r1
   359b8:	f640 4476 	movw	r4, #3190	; 0xc76
   359bc:	42a1      	cmp	r1, r4
   359be:	d808      	bhi.n	359d2 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   359c0:	3301      	adds	r3, #1
   359c2:	b29b      	uxth	r3, r3
   359c4:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   359c6:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   359ca:	bf34      	ite	cc
   359cc:	2001      	movcc	r0, #1
   359ce:	2000      	movcs	r0, #0
}
   359d0:	bd10      	pop	{r4, pc}
		return false;
   359d2:	2000      	movs	r0, #0
   359d4:	e7fc      	b.n	359d0 <bt_le_conn_params_valid+0x3c>

000359d6 <bt_send>:
		return bt_hci_ecc_send(buf);
   359d6:	f7df bf55 	b.w	15884 <bt_hci_ecc_send>

000359da <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   359da:	f240 3041 	movw	r0, #833	; 0x341
   359de:	4770      	bx	lr

000359e0 <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   359e0:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   359e2:	f7e9 fa51 	bl	1ee88 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   359e6:	b118      	cbz	r0, 359f0 <bt_addr_le_is_bonded+0x10>
   359e8:	89c0      	ldrh	r0, [r0, #14]
   359ea:	3800      	subs	r0, #0
   359ec:	bf18      	it	ne
   359ee:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   359f0:	bd08      	pop	{r3, pc}

000359f2 <bt_hci_evt_create>:
#include <stdint.h>
#include <zephyr/sys/byteorder.h>
#include <zephyr/drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   359f2:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   359f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   359f8:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   359fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   359fe:	2100      	movs	r1, #0
{
   35a00:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   35a02:	f7e0 fa11 	bl	15e28 <bt_buf_get_evt>
   35a06:	2102      	movs	r1, #2
   35a08:	4604      	mov	r4, r0
   35a0a:	300c      	adds	r0, #12
   35a0c:	f002 f830 	bl	37a70 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   35a10:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   35a12:	7045      	strb	r5, [r0, #1]

	return buf;
}
   35a14:	4620      	mov	r0, r4
   35a16:	bd70      	pop	{r4, r5, r6, pc}

00035a18 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   35a18:	3103      	adds	r1, #3
{
   35a1a:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   35a1c:	b2c9      	uxtb	r1, r1
{
   35a1e:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   35a20:	200e      	movs	r0, #14
   35a22:	f7ff ffe6 	bl	359f2 <bt_hci_evt_create>
   35a26:	2103      	movs	r1, #3
   35a28:	4604      	mov	r4, r0
   35a2a:	300c      	adds	r0, #12
   35a2c:	f002 f820 	bl	37a70 <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   35a30:	2301      	movs	r3, #1
   35a32:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   35a34:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   35a38:	4620      	mov	r0, r4
   35a3a:	bd38      	pop	{r3, r4, r5, pc}

00035a3c <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   35a3c:	b570      	push	{r4, r5, r6, lr}
   35a3e:	4605      	mov	r5, r0
   35a40:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   35a42:	200f      	movs	r0, #15
   35a44:	2104      	movs	r1, #4
   35a46:	f7ff ffd4 	bl	359f2 <bt_hci_evt_create>
   35a4a:	2104      	movs	r1, #4
   35a4c:	4604      	mov	r4, r0
   35a4e:	300c      	adds	r0, #12
   35a50:	f002 f80e 	bl	37a70 <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   35a54:	2201      	movs	r2, #1
	cs->status = status;
   35a56:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   35a58:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   35a5a:	8045      	strh	r5, [r0, #2]

	return buf;
}
   35a5c:	4620      	mov	r0, r4
   35a5e:	bd70      	pop	{r4, r5, r6, pc}

00035a60 <bt_addr_le_eq>:
{
   35a60:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   35a62:	2207      	movs	r2, #7
   35a64:	f7ff fd57 	bl	35516 <memcmp>
}
   35a68:	fab0 f080 	clz	r0, r0
   35a6c:	0940      	lsrs	r0, r0, #5
   35a6e:	bd08      	pop	{r3, pc}

00035a70 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   35a70:	2207      	movs	r2, #7
   35a72:	f7ff bd60 	b.w	35536 <memcpy>

00035a76 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   35a76:	f3bf 8f5b 	dmb	ish
   35a7a:	6800      	ldr	r0, [r0, #0]
   35a7c:	f3bf 8f5b 	dmb	ish
}
   35a80:	4770      	bx	lr

00035a82 <atomic_test_bit>:
{
   35a82:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   35a84:	f7ff fff7 	bl	35a76 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   35a88:	4108      	asrs	r0, r1
}
   35a8a:	f000 0001 	and.w	r0, r0, #1
   35a8e:	bd08      	pop	{r3, pc}

00035a90 <adv_is_private_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   35a90:	f100 0210 	add.w	r2, r0, #16
{
   35a94:	b510      	push	{r4, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   35a96:	4610      	mov	r0, r2
{
   35a98:	460c      	mov	r4, r1
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   35a9a:	2107      	movs	r1, #7
   35a9c:	f7ff fff1 	bl	35a82 <atomic_test_bit>
   35aa0:	b130      	cbz	r0, 35ab0 <adv_is_private_enabled+0x20>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   35aa2:	210d      	movs	r1, #13
   35aa4:	4610      	mov	r0, r2
   35aa6:	f7ff ffec 	bl	35a82 <atomic_test_bit>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   35aaa:	b908      	cbnz	r0, 35ab0 <adv_is_private_enabled+0x20>
		*adv_enabled = true;
   35aac:	2301      	movs	r3, #1
   35aae:	7023      	strb	r3, [r4, #0]
}
   35ab0:	bd10      	pop	{r4, pc}

00035ab2 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   35ab2:	7a03      	ldrb	r3, [r0, #8]
   35ab4:	075b      	lsls	r3, r3, #29
{
   35ab6:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   35ab8:	d505      	bpl.n	35ac6 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   35aba:	4601      	mov	r1, r0
   35abc:	322a      	adds	r2, #42	; 0x2a
   35abe:	f811 0b01 	ldrb.w	r0, [r1], #1
   35ac2:	f7e1 befb 	b.w	178bc <hci_id_add>
}
   35ac6:	4770      	bx	lr

00035ac8 <z_log_msg_static_create.constprop.0>:
   35ac8:	2300      	movs	r3, #0
   35aca:	f7dd bb53 	b.w	13174 <z_impl_z_log_msg_static_create>

00035ace <addr_res_enable>:
{
   35ace:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   35ad0:	2101      	movs	r1, #1
{
   35ad2:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   35ad4:	f242 002d 	movw	r0, #8237	; 0x202d
   35ad8:	f7e0 fe90 	bl	167fc <bt_hci_cmd_create>
	if (!buf) {
   35adc:	4604      	mov	r4, r0
   35ade:	b158      	cbz	r0, 35af8 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   35ae0:	4629      	mov	r1, r5
   35ae2:	300c      	adds	r0, #12
   35ae4:	f001 ffd3 	bl	37a8e <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   35ae8:	4621      	mov	r1, r4
   35aea:	2200      	movs	r2, #0
}
   35aec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   35af0:	f242 002d 	movw	r0, #8237	; 0x202d
   35af4:	f7e0 bfde 	b.w	16ab4 <bt_hci_cmd_send_sync>
}
   35af8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   35afc:	bd38      	pop	{r3, r4, r5, pc}

00035afe <atomic_or.isra.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   35afe:	f3bf 8f5b 	dmb	ish
   35b02:	e850 3f00 	ldrex	r3, [r0]
   35b06:	430b      	orrs	r3, r1
   35b08:	e840 3200 	strex	r2, r3, [r0]
   35b0c:	2a00      	cmp	r2, #0
   35b0e:	d1f8      	bne.n	35b02 <atomic_or.isra.0+0x4>
   35b10:	f3bf 8f5b 	dmb	ish
}
   35b14:	4770      	bx	lr

00035b16 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   35b16:	f100 0210 	add.w	r2, r0, #16
{
   35b1a:	b510      	push	{r4, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   35b1c:	2107      	movs	r1, #7
{
   35b1e:	4604      	mov	r4, r0
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   35b20:	4610      	mov	r0, r2
   35b22:	f7ff ffae 	bl	35a82 <atomic_test_bit>
   35b26:	b150      	cbz	r0, 35b3e <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   35b28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   35b2c:	4610      	mov	r0, r2
   35b2e:	f7ff ffe6 	bl	35afe <atomic_or.isra.0>
		bt_le_adv_set_enable(adv, false);
   35b32:	4620      	mov	r0, r4
   35b34:	2100      	movs	r1, #0
}
   35b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_set_enable(adv, false);
   35b3a:	f000 b975 	b.w	35e28 <bt_le_adv_set_enable>
}
   35b3e:	bd10      	pop	{r4, pc}

00035b40 <find_rl_conflict>:
{
   35b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conflict->found) {
   35b44:	684f      	ldr	r7, [r1, #4]
{
   35b46:	b086      	sub	sp, #24
   35b48:	4605      	mov	r5, r0
   35b4a:	460c      	mov	r4, r1
	if (conflict->found) {
   35b4c:	b9c7      	cbnz	r7, 35b80 <find_rl_conflict+0x40>
	if ((resident->state & BT_KEYS_ID_ADDED) == 0) {
   35b4e:	7a03      	ldrb	r3, [r0, #8]
   35b50:	075b      	lsls	r3, r3, #29
   35b52:	d515      	bpl.n	35b80 <find_rl_conflict+0x40>
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   35b54:	6808      	ldr	r0, [r1, #0]
   35b56:	1c69      	adds	r1, r5, #1
   35b58:	3001      	adds	r0, #1
   35b5a:	f7ff ff81 	bl	35a60 <bt_addr_le_eq>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   35b5e:	f8d4 8000 	ldr.w	r8, [r4]
   35b62:	2216      	movs	r2, #22
   35b64:	4639      	mov	r1, r7
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   35b66:	4606      	mov	r6, r0
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   35b68:	4668      	mov	r0, sp
   35b6a:	f7ff fcef 	bl	3554c <memset>
	bt_addr_t               rpa;
};

static inline bool bt_irk_eq(struct bt_irk const *a, struct bt_irk const *b)
{
	return (memcmp(a->val, b->val, sizeof(a->val)) == 0);
   35b6e:	2210      	movs	r2, #16
   35b70:	4669      	mov	r1, sp
   35b72:	f108 002a 	add.w	r0, r8, #42	; 0x2a
   35b76:	f7ff fcce 	bl	35516 <memcmp>
   35b7a:	b920      	cbnz	r0, 35b86 <find_rl_conflict+0x46>
	if (addr_conflict || irk_conflict) {
   35b7c:	b106      	cbz	r6, 35b80 <find_rl_conflict+0x40>
		conflict->found = resident;
   35b7e:	6065      	str	r5, [r4, #4]
}
   35b80:	b006      	add	sp, #24
   35b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   35b86:	6820      	ldr	r0, [r4, #0]
   35b88:	2210      	movs	r2, #16
   35b8a:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   35b8e:	302a      	adds	r0, #42	; 0x2a
   35b90:	f7ff fcc1 	bl	35516 <memcmp>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   35b94:	2800      	cmp	r0, #0
   35b96:	d0f2      	beq.n	35b7e <find_rl_conflict+0x3e>
   35b98:	e7f0      	b.n	35b7c <find_rl_conflict+0x3c>

00035b9a <adv_unpause_enabled>:
{
   35b9a:	b410      	push	{r4}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   35b9c:	f100 0310 	add.w	r3, r0, #16
   35ba0:	f3bf 8f5b 	dmb	ish
   35ba4:	e853 2f00 	ldrex	r2, [r3]
   35ba8:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   35bac:	e843 1400 	strex	r4, r1, [r3]
   35bb0:	2c00      	cmp	r4, #0
   35bb2:	d1f7      	bne.n	35ba4 <adv_unpause_enabled+0xa>
   35bb4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   35bb8:	0413      	lsls	r3, r2, #16
   35bba:	d503      	bpl.n	35bc4 <adv_unpause_enabled+0x2a>
}
   35bbc:	bc10      	pop	{r4}
		bt_le_adv_set_enable(adv, true);
   35bbe:	2101      	movs	r1, #1
   35bc0:	f000 b932 	b.w	35e28 <bt_le_adv_set_enable>
}
   35bc4:	bc10      	pop	{r4}
   35bc6:	4770      	bx	lr

00035bc8 <adv_rpa_invalidate>:
	if (!atomic_test_bit(adv->flags, BT_ADV_LIMITED) &&
   35bc8:	f100 0210 	add.w	r2, r0, #16
{
   35bcc:	b508      	push	{r3, lr}
	if (!atomic_test_bit(adv->flags, BT_ADV_LIMITED) &&
   35bce:	2106      	movs	r1, #6
   35bd0:	4610      	mov	r0, r2
   35bd2:	f7ff ff56 	bl	35a82 <atomic_test_bit>
   35bd6:	b980      	cbnz	r0, 35bfa <adv_rpa_invalidate+0x32>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   35bd8:	210d      	movs	r1, #13
   35bda:	4610      	mov	r0, r2
   35bdc:	f7ff ff51 	bl	35a82 <atomic_test_bit>
	if (!atomic_test_bit(adv->flags, BT_ADV_LIMITED) &&
   35be0:	b958      	cbnz	r0, 35bfa <adv_rpa_invalidate+0x32>
   35be2:	f3bf 8f5b 	dmb	ish
   35be6:	e852 3f00 	ldrex	r3, [r2]
   35bea:	f023 0310 	bic.w	r3, r3, #16
   35bee:	e842 3100 	strex	r1, r3, [r2]
   35bf2:	2900      	cmp	r1, #0
   35bf4:	d1f7      	bne.n	35be6 <adv_rpa_invalidate+0x1e>
   35bf6:	f3bf 8f5b 	dmb	ish
}
   35bfa:	bd08      	pop	{r3, pc}

00035bfc <bt_lookup_id_addr>:
{
   35bfc:	b510      	push	{r4, lr}
   35bfe:	460c      	mov	r4, r1
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   35c00:	b930      	cbnz	r0, 35c10 <bt_lookup_id_addr+0x14>
   35c02:	b119      	cbz	r1, 35c0c <bt_lookup_id_addr+0x10>
		keys = bt_keys_find_irk(id, addr);
   35c04:	f7e9 f8fc 	bl	1ee00 <bt_keys_find_irk>
		if (keys) {
   35c08:	b100      	cbz	r0, 35c0c <bt_lookup_id_addr+0x10>
			return &keys->addr;
   35c0a:	1c44      	adds	r4, r0, #1
}
   35c0c:	4620      	mov	r0, r4
   35c0e:	bd10      	pop	{r4, pc}
		return NULL;
   35c10:	2400      	movs	r4, #0
   35c12:	e7fb      	b.n	35c0c <bt_lookup_id_addr+0x10>

00035c14 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   35c14:	b118      	cbz	r0, 35c1e <bt_id_set_adv_random_addr+0xa>
   35c16:	b111      	cbz	r1, 35c1e <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   35c18:	4608      	mov	r0, r1
   35c1a:	f7e1 bfbf 	b.w	17b9c <set_random_address>
}
   35c1e:	f06f 0015 	mvn.w	r0, #21
   35c22:	4770      	bx	lr

00035c24 <bt_id_set_adv_private_addr>:
	CHECKIF(adv == NULL) {
   35c24:	b110      	cbz	r0, 35c2c <bt_id_set_adv_private_addr+0x8>
		return bt_id_set_private_addr(adv->id);
   35c26:	7800      	ldrb	r0, [r0, #0]
   35c28:	f7e2 b87a 	b.w	17d20 <bt_id_set_private_addr>
}
   35c2c:	f06f 0015 	mvn.w	r0, #21
   35c30:	4770      	bx	lr

00035c32 <bt_id_adv_random_addr_check>:
}
   35c32:	3800      	subs	r0, #0
   35c34:	bf18      	it	ne
   35c36:	2001      	movne	r0, #1
   35c38:	4770      	bx	lr

00035c3a <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   35c3a:	7a03      	ldrb	r3, [r0, #8]
   35c3c:	07d9      	lsls	r1, r3, #31
   35c3e:	d504      	bpl.n	35c4a <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   35c40:	f023 0301 	bic.w	r3, r3, #1
   35c44:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   35c46:	f7e2 b925 	b.w	17e94 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   35c4a:	0799      	lsls	r1, r3, #30
   35c4c:	d504      	bpl.n	35c58 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   35c4e:	f023 0302 	bic.w	r3, r3, #2
   35c52:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   35c54:	f7e2 b938 	b.w	17ec8 <bt_id_del>
}
   35c58:	4770      	bx	lr

00035c5a <get_adv_channel_map>:
{
   35c5a:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   35c5c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   35c60:	bf0c      	ite	eq
   35c62:	2007      	moveq	r0, #7
   35c64:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   35c66:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   35c68:	bf48      	it	mi
   35c6a:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   35c6e:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   35c70:	bf48      	it	mi
   35c72:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   35c76:	4770      	bx	lr

00035c78 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   35c78:	f3bf 8f5b 	dmb	ish
   35c7c:	6800      	ldr	r0, [r0, #0]
   35c7e:	f3bf 8f5b 	dmb	ish
}
   35c82:	4770      	bx	lr

00035c84 <atomic_and>:
{
   35c84:	b510      	push	{r4, lr}
   35c86:	4603      	mov	r3, r0
}
   35c88:	f3bf 8f5b 	dmb	ish
   35c8c:	e853 0f00 	ldrex	r0, [r3]
   35c90:	ea00 0201 	and.w	r2, r0, r1
   35c94:	e843 2400 	strex	r4, r2, [r3]
   35c98:	2c00      	cmp	r4, #0
   35c9a:	d1f7      	bne.n	35c8c <atomic_and+0x8>
   35c9c:	f3bf 8f5b 	dmb	ish
   35ca0:	bd10      	pop	{r4, pc}

00035ca2 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   35ca2:	2301      	movs	r3, #1
{
   35ca4:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   35ca6:	fa03 f101 	lsl.w	r1, r3, r1
{
   35caa:	4604      	mov	r4, r0
	if (val) {
   35cac:	b162      	cbz	r2, 35cc8 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   35cae:	f3bf 8f5b 	dmb	ish
   35cb2:	e854 3f00 	ldrex	r3, [r4]
   35cb6:	430b      	orrs	r3, r1
   35cb8:	e844 3200 	strex	r2, r3, [r4]
   35cbc:	2a00      	cmp	r2, #0
   35cbe:	d1f8      	bne.n	35cb2 <atomic_set_bit_to+0x10>
   35cc0:	f3bf 8f5b 	dmb	ish
	}
}
   35cc4:	bc10      	pop	{r4}
   35cc6:	4770      	bx	lr
   35cc8:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   35cca:	43c9      	mvns	r1, r1
   35ccc:	f7ff bfda 	b.w	35c84 <atomic_and>

00035cd0 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   35cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35cd4:	b087      	sub	sp, #28
   35cd6:	4605      	mov	r5, r0
   35cd8:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   35cdc:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   35ce0:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   35ce4:	460c      	mov	r4, r1
   35ce6:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   35ce8:	2100      	movs	r1, #0
   35cea:	2210      	movs	r2, #16
   35cec:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   35cee:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   35cf0:	f7ff fc2c 	bl	3554c <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   35cf4:	b9ee      	cbnz	r6, 35d32 <le_adv_update.constprop.0+0x62>
		d[0].len = ad_len;
   35cf6:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   35cfa:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   35cfc:	a902      	add	r1, sp, #8
   35cfe:	f242 0008 	movw	r0, #8200	; 0x2008
   35d02:	f7e2 fb43 	bl	1838c <hci_set_ad>
		if (err) {
   35d06:	4604      	mov	r4, r0
   35d08:	b978      	cbnz	r0, 35d2a <le_adv_update.constprop.0+0x5a>
	if (scannable) {
   35d0a:	f1ba 0f00 	cmp.w	sl, #0
   35d0e:	d13e      	bne.n	35d8e <le_adv_update.constprop.0+0xbe>
   35d10:	3510      	adds	r5, #16
   35d12:	f3bf 8f5b 	dmb	ish
   35d16:	e855 3f00 	ldrex	r3, [r5]
   35d1a:	f043 0304 	orr.w	r3, r3, #4
   35d1e:	e845 3200 	strex	r2, r3, [r5]
   35d22:	2a00      	cmp	r2, #0
   35d24:	d1f7      	bne.n	35d16 <le_adv_update.constprop.0+0x46>
   35d26:	f3bf 8f5b 	dmb	ish
}
   35d2a:	4620      	mov	r0, r4
   35d2c:	b007      	add	sp, #28
   35d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   35d32:	f7e1 fd73 	bl	1781c <bt_get_name>
   35d36:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   35d38:	b9e4      	cbnz	r4, 35d74 <le_adv_update.constprop.0+0xa4>
   35d3a:	bb37      	cbnz	r7, 35d8a <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   35d3c:	4658      	mov	r0, fp
   35d3e:	f7ff fbba 	bl	354b6 <strlen>
   35d42:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   35d44:	2e01      	cmp	r6, #1
		d[0].data = ad;
   35d46:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   35d4a:	f88d 3000 	strb.w	r3, [sp]
   35d4e:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   35d52:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   35d56:	d1d0      	bne.n	35cfa <le_adv_update.constprop.0+0x2a>
			d[1].data = &data;
   35d58:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   35d5c:	9605      	str	r6, [sp, #20]
			d_len = 2;
   35d5e:	2202      	movs	r2, #2
   35d60:	e7cc      	b.n	35cfc <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   35d62:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   35d66:	3a08      	subs	r2, #8
   35d68:	2a01      	cmp	r2, #1
   35d6a:	d925      	bls.n	35db8 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   35d6c:	3301      	adds	r3, #1
   35d6e:	4598      	cmp	r8, r3
   35d70:	d1f7      	bne.n	35d62 <le_adv_update.constprop.0+0x92>
   35d72:	e7e2      	b.n	35d3a <le_adv_update.constprop.0+0x6a>
   35d74:	2300      	movs	r3, #0
   35d76:	e7fa      	b.n	35d6e <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   35d78:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   35d7c:	3a08      	subs	r2, #8
   35d7e:	2a01      	cmp	r2, #1
   35d80:	d91a      	bls.n	35db8 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   35d82:	3301      	adds	r3, #1
   35d84:	4599      	cmp	r9, r3
   35d86:	d1f7      	bne.n	35d78 <le_adv_update.constprop.0+0xa8>
   35d88:	e7d8      	b.n	35d3c <le_adv_update.constprop.0+0x6c>
   35d8a:	2300      	movs	r3, #0
   35d8c:	e7fa      	b.n	35d84 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   35d8e:	2e02      	cmp	r6, #2
   35d90:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   35d94:	bf08      	it	eq
   35d96:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   35d98:	a902      	add	r1, sp, #8
			d_len = 2;
   35d9a:	bf08      	it	eq
   35d9c:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   35d9e:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   35da2:	bf08      	it	eq
   35da4:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   35da8:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   35dac:	f7e2 faee 	bl	1838c <hci_set_ad>
		if (err) {
   35db0:	2800      	cmp	r0, #0
   35db2:	d0ad      	beq.n	35d10 <le_adv_update.constprop.0+0x40>
   35db4:	4604      	mov	r4, r0
   35db6:	e7b8      	b.n	35d2a <le_adv_update.constprop.0+0x5a>
			return -EINVAL;
   35db8:	f06f 0415 	mvn.w	r4, #21
   35dbc:	e7b5      	b.n	35d2a <le_adv_update.constprop.0+0x5a>

00035dbe <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   35dbe:	6843      	ldr	r3, [r0, #4]
   35dc0:	f013 0008 	ands.w	r0, r3, #8
   35dc4:	d00a      	beq.n	35ddc <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   35dc6:	035a      	lsls	r2, r3, #13
   35dc8:	d407      	bmi.n	35dda <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   35dca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   35dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   35dd2:	bf14      	ite	ne
   35dd4:	2002      	movne	r0, #2
   35dd6:	2001      	moveq	r0, #1
   35dd8:	4770      	bx	lr
   35dda:	2001      	movs	r0, #1
}
   35ddc:	4770      	bx	lr

00035dde <bt_le_adv_set_enable_legacy>:
{
   35dde:	b570      	push	{r4, r5, r6, lr}
   35de0:	4606      	mov	r6, r0
   35de2:	b086      	sub	sp, #24
   35de4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   35de6:	f242 000a 	movw	r0, #8202	; 0x200a
   35dea:	2101      	movs	r1, #1
   35dec:	f7e0 fd06 	bl	167fc <bt_hci_cmd_create>
	if (!buf) {
   35df0:	4604      	mov	r4, r0
   35df2:	b1b0      	cbz	r0, 35e22 <bt_le_adv_set_enable_legacy+0x44>
   35df4:	300c      	adds	r0, #12
	if (enable) {
   35df6:	b195      	cbz	r5, 35e1e <bt_le_adv_set_enable_legacy+0x40>
   35df8:	2101      	movs	r1, #1
   35dfa:	f001 fe48 	bl	37a8e <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   35dfe:	f106 0210 	add.w	r2, r6, #16
   35e02:	a903      	add	r1, sp, #12
   35e04:	4620      	mov	r0, r4
   35e06:	9500      	str	r5, [sp, #0]
   35e08:	2307      	movs	r3, #7
   35e0a:	f7e0 fce5 	bl	167d8 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   35e0e:	2200      	movs	r2, #0
   35e10:	4621      	mov	r1, r4
   35e12:	f242 000a 	movw	r0, #8202	; 0x200a
   35e16:	f7e0 fe4d 	bl	16ab4 <bt_hci_cmd_send_sync>
}
   35e1a:	b006      	add	sp, #24
   35e1c:	bd70      	pop	{r4, r5, r6, pc}
   35e1e:	4629      	mov	r1, r5
   35e20:	e7eb      	b.n	35dfa <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   35e22:	f06f 0068 	mvn.w	r0, #104	; 0x68
   35e26:	e7f8      	b.n	35e1a <bt_le_adv_set_enable_legacy+0x3c>

00035e28 <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   35e28:	f7ff bfd9 	b.w	35dde <bt_le_adv_set_enable_legacy>

00035e2c <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   35e2c:	3018      	adds	r0, #24
   35e2e:	f002 be1c 	b.w	38a6a <k_work_cancel_delayable>

00035e32 <sys_slist_find_and_remove>:
	return list->head;
   35e32:	6803      	ldr	r3, [r0, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   35e34:	2200      	movs	r2, #0
   35e36:	b90b      	cbnz	r3, 35e3c <sys_slist_find_and_remove+0xa>
   35e38:	4618      	mov	r0, r3
   35e3a:	4770      	bx	lr
   35e3c:	428b      	cmp	r3, r1
   35e3e:	d110      	bne.n	35e62 <sys_slist_find_and_remove+0x30>
	return node->next;
   35e40:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   35e42:	b942      	cbnz	r2, 35e56 <sys_slist_find_and_remove+0x24>
   35e44:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   35e46:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   35e48:	4291      	cmp	r1, r2
   35e4a:	d100      	bne.n	35e4e <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   35e4c:	6043      	str	r3, [r0, #4]
	parent->next = child;
   35e4e:	2300      	movs	r3, #0
   35e50:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   35e52:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   35e54:	4770      	bx	lr
	parent->next = child;
   35e56:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   35e58:	6843      	ldr	r3, [r0, #4]
   35e5a:	4299      	cmp	r1, r3
	list->tail = node;
   35e5c:	bf08      	it	eq
   35e5e:	6042      	streq	r2, [r0, #4]
}
   35e60:	e7f5      	b.n	35e4e <sys_slist_find_and_remove+0x1c>
	return node->next;
   35e62:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   35e64:	681b      	ldr	r3, [r3, #0]
   35e66:	e7e6      	b.n	35e36 <sys_slist_find_and_remove+0x4>

00035e68 <atomic_and>:
{
   35e68:	b510      	push	{r4, lr}
   35e6a:	4603      	mov	r3, r0
}
   35e6c:	f3bf 8f5b 	dmb	ish
   35e70:	e853 0f00 	ldrex	r0, [r3]
   35e74:	ea00 0201 	and.w	r2, r0, r1
   35e78:	e843 2400 	strex	r4, r2, [r3]
   35e7c:	2c00      	cmp	r4, #0
   35e7e:	d1f7      	bne.n	35e70 <atomic_and+0x8>
   35e80:	f3bf 8f5b 	dmb	ish
   35e84:	bd10      	pop	{r4, pc}

00035e86 <z_log_msg_static_create.constprop.0>:
   35e86:	2300      	movs	r3, #0
   35e88:	f7dd b974 	b.w	13174 <z_impl_z_log_msg_static_create>

00035e8c <tx_complete_work>:
	tx_notify(conn);
   35e8c:	3828      	subs	r0, #40	; 0x28
   35e8e:	f7e2 bf8d 	b.w	18dac <tx_notify>

00035e92 <bt_conn_reset_rx_state>:
{
   35e92:	b510      	push	{r4, lr}
   35e94:	4604      	mov	r4, r0
	if (!conn->rx) {
   35e96:	6900      	ldr	r0, [r0, #16]
   35e98:	b118      	cbz	r0, 35ea2 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   35e9a:	f7f7 fce1 	bl	2d860 <net_buf_unref>
	conn->rx = NULL;
   35e9e:	2300      	movs	r3, #0
   35ea0:	6123      	str	r3, [r4, #16]
}
   35ea2:	bd10      	pop	{r4, pc}

00035ea4 <conn_cleanup>:
{
   35ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35ea8:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   35eaa:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   35eac:	f104 0638 	add.w	r6, r4, #56	; 0x38
   35eb0:	2300      	movs	r3, #0
   35eb2:	2200      	movs	r2, #0
   35eb4:	4630      	mov	r0, r6
   35eb6:	f001 fd74 	bl	379a2 <net_buf_get>
   35eba:	4603      	mov	r3, r0
   35ebc:	b950      	cbnz	r0, 35ed4 <conn_cleanup+0x30>
	bt_conn_reset_rx_state(conn);
   35ebe:	4620      	mov	r0, r4
   35ec0:	f7ff ffe7 	bl	35e92 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   35ec4:	f104 0058 	add.w	r0, r4, #88	; 0x58
   35ec8:	2200      	movs	r2, #0
}
   35eca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   35ece:	2300      	movs	r3, #0
   35ed0:	f7fc b83a 	b.w	31f48 <k_work_reschedule>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   35ed4:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   35ed6:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   35ed8:	f7f7 fcc2 	bl	2d860 <net_buf_unref>
		if (tx) {
   35edc:	2d00      	cmp	r5, #0
   35ede:	d0e7      	beq.n	35eb0 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   35ee0:	4629      	mov	r1, r5
   35ee2:	4620      	mov	r0, r4
   35ee4:	f7e2 ff92 	bl	18e0c <conn_tx_destroy>
   35ee8:	e7e0      	b.n	35eac <conn_cleanup+0x8>

00035eea <bt_conn_ref>:
{
   35eea:	b510      	push	{r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   35eec:	f3bf 8f5b 	dmb	ish
   35ef0:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   35ef4:	f3bf 8f5b 	dmb	ish
		old = atomic_get(&conn->ref);
   35ef8:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
		if (!old) {
   35efc:	b17b      	cbz	r3, 35f1e <bt_conn_ref+0x34>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   35efe:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   35f02:	1c59      	adds	r1, r3, #1
   35f04:	e852 4f00 	ldrex	r4, [r2]
   35f08:	429c      	cmp	r4, r3
   35f0a:	d104      	bne.n	35f16 <bt_conn_ref+0x2c>
   35f0c:	e842 1c00 	strex	ip, r1, [r2]
   35f10:	f1bc 0f00 	cmp.w	ip, #0
   35f14:	d1f6      	bne.n	35f04 <bt_conn_ref+0x1a>
   35f16:	f3bf 8f5b 	dmb	ish
   35f1a:	d1e7      	bne.n	35eec <bt_conn_ref+0x2>
}
   35f1c:	bd10      	pop	{r4, pc}
			return NULL;
   35f1e:	4618      	mov	r0, r3
   35f20:	e7fc      	b.n	35f1c <bt_conn_ref+0x32>

00035f22 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   35f22:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   35f26:	f3bf 8f5b 	dmb	ish
   35f2a:	e853 1f00 	ldrex	r1, [r3]
   35f2e:	3901      	subs	r1, #1
   35f30:	e843 1200 	strex	r2, r1, [r3]
   35f34:	2a00      	cmp	r2, #0
   35f36:	d1f8      	bne.n	35f2a <bt_conn_unref+0x8>
   35f38:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   35f3c:	8842      	ldrh	r2, [r0, #2]
   35f3e:	f240 1301 	movw	r3, #257	; 0x101
   35f42:	429a      	cmp	r2, r3
   35f44:	d108      	bne.n	35f58 <bt_conn_unref+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   35f46:	f3bf 8f5b 	dmb	ish
   35f4a:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   35f4e:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   35f52:	b90b      	cbnz	r3, 35f58 <bt_conn_unref+0x36>
		bt_le_adv_resume();
   35f54:	f7e2 bcf2 	b.w	1893c <bt_le_adv_resume>
}
   35f58:	4770      	bx	lr

00035f5a <conn_lookup_handle>:
{
   35f5a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   35f5e:	4607      	mov	r7, r0
   35f60:	460e      	mov	r6, r1
   35f62:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   35f64:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   35f66:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   35f6a:	42b4      	cmp	r4, r6
   35f6c:	d103      	bne.n	35f76 <conn_lookup_handle+0x1c>
	return NULL;
   35f6e:	2300      	movs	r3, #0
}
   35f70:	4618      	mov	r0, r3
   35f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   35f76:	fb09 7004 	mla	r0, r9, r4, r7
   35f7a:	f7ff ffb6 	bl	35eea <bt_conn_ref>
   35f7e:	4603      	mov	r3, r0
		if (!conn) {
   35f80:	b158      	cbz	r0, 35f9a <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   35f82:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   35f84:	2d01      	cmp	r5, #1
   35f86:	d002      	beq.n	35f8e <conn_lookup_handle+0x34>
   35f88:	3d07      	subs	r5, #7
   35f8a:	2d01      	cmp	r5, #1
   35f8c:	d803      	bhi.n	35f96 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   35f8e:	881a      	ldrh	r2, [r3, #0]
   35f90:	4542      	cmp	r2, r8
   35f92:	d0ed      	beq.n	35f70 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   35f94:	4618      	mov	r0, r3
   35f96:	f7ff ffc4 	bl	35f22 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   35f9a:	3401      	adds	r4, #1
   35f9c:	e7e5      	b.n	35f6a <conn_lookup_handle+0x10>

00035f9e <bt_conn_connected>:
{
   35f9e:	b510      	push	{r4, lr}
   35fa0:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   35fa2:	f7e3 fe4d 	bl	19c40 <bt_l2cap_connected>
	notify_connected(conn);
   35fa6:	4620      	mov	r0, r4
}
   35fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   35fac:	f7e2 bec6 	b.w	18d3c <notify_connected>

00035fb0 <bt_conn_disconnect>:
{
   35fb0:	b510      	push	{r4, lr}
	switch (conn->state) {
   35fb2:	7b43      	ldrb	r3, [r0, #13]
   35fb4:	3b02      	subs	r3, #2
{
   35fb6:	4604      	mov	r4, r0
	switch (conn->state) {
   35fb8:	2b06      	cmp	r3, #6
   35fba:	d816      	bhi.n	35fea <bt_conn_disconnect+0x3a>
   35fbc:	e8df f003 	tbb	[pc, r3]
   35fc0:	15151504 	.word	0x15151504
   35fc4:	0b09      	.short	0x0b09
   35fc6:	09          	.byte	0x09
   35fc7:	00          	.byte	0x00
		conn->err = reason;
   35fc8:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   35fca:	2100      	movs	r1, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   35fcc:	4620      	mov	r0, r4
   35fce:	f7e3 f9bf 	bl	19350 <bt_conn_set_state>
{
   35fd2:	2000      	movs	r0, #0
}
   35fd4:	bd10      	pop	{r4, pc}
	err = bt_hci_disconnect(conn->handle, reason);
   35fd6:	8800      	ldrh	r0, [r0, #0]
   35fd8:	f7ff fc78 	bl	358cc <bt_hci_disconnect>
	if (err) {
   35fdc:	2800      	cmp	r0, #0
   35fde:	d1f9      	bne.n	35fd4 <bt_conn_disconnect+0x24>
	if (conn->state == BT_CONN_CONNECTED) {
   35fe0:	7b63      	ldrb	r3, [r4, #13]
   35fe2:	2b07      	cmp	r3, #7
   35fe4:	d1f5      	bne.n	35fd2 <bt_conn_disconnect+0x22>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   35fe6:	2108      	movs	r1, #8
   35fe8:	e7f0      	b.n	35fcc <bt_conn_disconnect+0x1c>
		return -ENOTCONN;
   35fea:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   35fee:	e7f1      	b.n	35fd4 <bt_conn_disconnect+0x24>

00035ff0 <bt_conn_set_security>:
{
   35ff0:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   35ff2:	7b43      	ldrb	r3, [r0, #13]
   35ff4:	2b07      	cmp	r3, #7
{
   35ff6:	4604      	mov	r4, r0
   35ff8:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   35ffa:	d126      	bne.n	3604a <bt_conn_set_security+0x5a>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   35ffc:	7a43      	ldrb	r3, [r0, #9]
   35ffe:	428b      	cmp	r3, r1
   36000:	d219      	bcs.n	36036 <bt_conn_set_security+0x46>
   36002:	7a83      	ldrb	r3, [r0, #10]
   36004:	428b      	cmp	r3, r1
   36006:	d216      	bcs.n	36036 <bt_conn_set_security+0x46>
	if (val) {
   36008:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   3600a:	f100 0004 	add.w	r0, r0, #4
   3600e:	d514      	bpl.n	3603a <bt_conn_set_security+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   36010:	f3bf 8f5b 	dmb	ish
   36014:	e850 3f00 	ldrex	r3, [r0]
   36018:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   3601c:	e840 3200 	strex	r2, r3, [r0]
   36020:	2a00      	cmp	r2, #0
   36022:	d1f7      	bne.n	36014 <bt_conn_set_security+0x24>
   36024:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   36028:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   3602c:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   3602e:	4620      	mov	r0, r4
   36030:	f7e7 ff52 	bl	1ded8 <bt_smp_start_security>
	if (err) {
   36034:	b930      	cbnz	r0, 36044 <bt_conn_set_security+0x54>
		return -ENOTCONN;
   36036:	2000      	movs	r0, #0
}
   36038:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   3603a:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   3603e:	f7ff ff13 	bl	35e68 <atomic_and>
   36042:	e7f1      	b.n	36028 <bt_conn_set_security+0x38>
		conn->required_sec_level = conn->sec_level;
   36044:	7a63      	ldrb	r3, [r4, #9]
   36046:	72a3      	strb	r3, [r4, #10]
   36048:	e7f6      	b.n	36038 <bt_conn_set_security+0x48>
		return -ENOTCONN;
   3604a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   3604e:	e7f3      	b.n	36038 <bt_conn_set_security+0x48>

00036050 <bt_conn_get_security>:
}
   36050:	7a40      	ldrb	r0, [r0, #9]
   36052:	4770      	bx	lr

00036054 <bt_conn_is_peer_addr_le>:
{
   36054:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   36056:	7a03      	ldrb	r3, [r0, #8]
   36058:	428b      	cmp	r3, r1
{
   3605a:	4604      	mov	r4, r0
   3605c:	4615      	mov	r5, r2
	if (id != conn->id) {
   3605e:	d115      	bne.n	3608c <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   36060:	f100 0188 	add.w	r1, r0, #136	; 0x88
   36064:	2207      	movs	r2, #7
   36066:	4628      	mov	r0, r5
   36068:	f7ff fa55 	bl	35516 <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   3606c:	b180      	cbz	r0, 36090 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   3606e:	78e3      	ldrb	r3, [r4, #3]
   36070:	2207      	movs	r2, #7
   36072:	b943      	cbnz	r3, 36086 <bt_conn_is_peer_addr_le+0x32>
   36074:	f104 0196 	add.w	r1, r4, #150	; 0x96
   36078:	4628      	mov	r0, r5
   3607a:	f7ff fa4c 	bl	35516 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   3607e:	fab0 f080 	clz	r0, r0
   36082:	0940      	lsrs	r0, r0, #5
}
   36084:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   36086:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   3608a:	e7f5      	b.n	36078 <bt_conn_is_peer_addr_le+0x24>
		return false;
   3608c:	2000      	movs	r0, #0
   3608e:	e7f9      	b.n	36084 <bt_conn_is_peer_addr_le+0x30>
		return true;
   36090:	2001      	movs	r0, #1
   36092:	e7f7      	b.n	36084 <bt_conn_is_peer_addr_le+0x30>

00036094 <bt_conn_get_dst>:
}
   36094:	3088      	adds	r0, #136	; 0x88
   36096:	4770      	bx	lr

00036098 <bt_conn_le_conn_update>:
{
   36098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3609a:	4607      	mov	r7, r0
   3609c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   3609e:	f242 0013 	movw	r0, #8211	; 0x2013
   360a2:	210e      	movs	r1, #14
   360a4:	f7e0 fbaa 	bl	167fc <bt_hci_cmd_create>
	if (!buf) {
   360a8:	4606      	mov	r6, r0
   360aa:	b1d0      	cbz	r0, 360e2 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   360ac:	210e      	movs	r1, #14
   360ae:	300c      	adds	r0, #12
   360b0:	f001 fcde 	bl	37a70 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   360b4:	220e      	movs	r2, #14
   360b6:	4604      	mov	r4, r0
   360b8:	2100      	movs	r1, #0
   360ba:	f7ff fa47 	bl	3554c <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   360be:	883b      	ldrh	r3, [r7, #0]
   360c0:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   360c2:	882b      	ldrh	r3, [r5, #0]
   360c4:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   360c6:	886b      	ldrh	r3, [r5, #2]
   360c8:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   360ca:	88ab      	ldrh	r3, [r5, #4]
   360cc:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   360ce:	88eb      	ldrh	r3, [r5, #6]
   360d0:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   360d2:	4631      	mov	r1, r6
   360d4:	2200      	movs	r2, #0
}
   360d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   360da:	f242 0013 	movw	r0, #8211	; 0x2013
   360de:	f7e0 bce9 	b.w	16ab4 <bt_hci_cmd_send_sync>
}
   360e2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   360e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000360e8 <l2cap_connected>:
}
   360e8:	4770      	bx	lr

000360ea <z_log_msg_static_create.constprop.0>:
   360ea:	2300      	movs	r3, #0
   360ec:	f7dd b842 	b.w	13174 <z_impl_z_log_msg_static_create>

000360f0 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   360f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   360f2:	4605      	mov	r5, r0
   360f4:	460f      	mov	r7, r1
   360f6:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   360f8:	2300      	movs	r3, #0
   360fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   360fe:	2104      	movs	r1, #4
   36100:	2000      	movs	r0, #0
   36102:	f7e3 fa45 	bl	19590 <bt_conn_create_pdu_timeout>
	if (!buf) {
   36106:	4604      	mov	r4, r0
   36108:	b920      	cbnz	r0, 36114 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   3610a:	4628      	mov	r0, r5
}
   3610c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   36110:	f7e3 bd52 	b.w	19bb8 <l2cap_create_le_sig_pdu.part.0>
   36114:	2104      	movs	r1, #4
   36116:	300c      	adds	r0, #12
   36118:	f001 fcaa 	bl	37a70 <net_buf_simple_add>
	hdr->code = code;
   3611c:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   3611e:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   36120:	8046      	strh	r6, [r0, #2]
}
   36122:	4620      	mov	r0, r4
   36124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00036126 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   36126:	4770      	bx	lr

00036128 <bt_l2cap_chan_del>:
{
   36128:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   3612a:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   3612e:	4604      	mov	r4, r0
	if (!chan->conn) {
   36130:	b123      	cbz	r3, 3613c <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   36132:	686b      	ldr	r3, [r5, #4]
   36134:	b103      	cbz	r3, 36138 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   36136:	4798      	blx	r3
	chan->conn = NULL;
   36138:	2300      	movs	r3, #0
   3613a:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   3613c:	68e3      	ldr	r3, [r4, #12]
   3613e:	b10b      	cbz	r3, 36144 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   36140:	4620      	mov	r0, r4
   36142:	4798      	blx	r3
	if (ops->released) {
   36144:	6a2b      	ldr	r3, [r5, #32]
   36146:	b11b      	cbz	r3, 36150 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   36148:	4620      	mov	r0, r4
}
   3614a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   3614e:	4718      	bx	r3
}
   36150:	bd70      	pop	{r4, r5, r6, pc}

00036152 <bt_l2cap_disconnected>:
{
   36152:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   36154:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   36156:	b130      	cbz	r0, 36166 <bt_l2cap_disconnected+0x14>
	return node->next;
   36158:	f850 4908 	ldr.w	r4, [r0], #-8
   3615c:	b104      	cbz	r4, 36160 <bt_l2cap_disconnected+0xe>
   3615e:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   36160:	f7ff ffe2 	bl	36128 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   36164:	b904      	cbnz	r4, 36168 <bt_l2cap_disconnected+0x16>
}
   36166:	bd38      	pop	{r3, r4, r5, pc}
   36168:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   3616a:	b12d      	cbz	r5, 36178 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   3616c:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   3616e:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   36170:	f7ff ffda 	bl	36128 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   36174:	462c      	mov	r4, r5
   36176:	e7f7      	b.n	36168 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   36178:	4620      	mov	r0, r4
}
   3617a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   3617e:	f7ff bfd3 	b.w	36128 <bt_l2cap_chan_del>

00036182 <bt_l2cap_security_changed>:
{
   36182:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   36184:	6d03      	ldr	r3, [r0, #80]	; 0x50
   36186:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   36188:	b1bb      	cbz	r3, 361ba <bt_l2cap_security_changed+0x38>
   3618a:	4618      	mov	r0, r3
	return node->next;
   3618c:	f850 4908 	ldr.w	r4, [r0], #-8
   36190:	b104      	cbz	r4, 36194 <bt_l2cap_security_changed+0x12>
   36192:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   36194:	f853 3c04 	ldr.w	r3, [r3, #-4]
   36198:	689b      	ldr	r3, [r3, #8]
   3619a:	b10b      	cbz	r3, 361a0 <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   3619c:	4629      	mov	r1, r5
   3619e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   361a0:	b15c      	cbz	r4, 361ba <bt_l2cap_security_changed+0x38>
   361a2:	4620      	mov	r0, r4
   361a4:	68a4      	ldr	r4, [r4, #8]
   361a6:	6843      	ldr	r3, [r0, #4]
   361a8:	b124      	cbz	r4, 361b4 <bt_l2cap_security_changed+0x32>
		if (chan->ops->encrypt_change) {
   361aa:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   361ac:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   361ae:	2b00      	cmp	r3, #0
   361b0:	d1f4      	bne.n	3619c <bt_l2cap_security_changed+0x1a>
   361b2:	e7f6      	b.n	361a2 <bt_l2cap_security_changed+0x20>
   361b4:	689b      	ldr	r3, [r3, #8]
   361b6:	2b00      	cmp	r3, #0
   361b8:	d1f0      	bne.n	3619c <bt_l2cap_security_changed+0x1a>
}
   361ba:	bd38      	pop	{r3, r4, r5, pc}

000361bc <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   361bc:	3104      	adds	r1, #4
   361be:	f7e3 b9e7 	b.w	19590 <bt_conn_create_pdu_timeout>

000361c2 <bt_l2cap_send_cb>:
{
   361c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   361c6:	4614      	mov	r4, r2
   361c8:	4605      	mov	r5, r0
   361ca:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   361cc:	f102 000c 	add.w	r0, r2, #12
   361d0:	2104      	movs	r1, #4
   361d2:	461e      	mov	r6, r3
   361d4:	f8dd 8018 	ldr.w	r8, [sp, #24]
   361d8:	f001 fc61 	bl	37a9e <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   361dc:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   361de:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   361e0:	3a04      	subs	r2, #4
   361e2:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   361e4:	4643      	mov	r3, r8
   361e6:	4632      	mov	r2, r6
   361e8:	4621      	mov	r1, r4
   361ea:	4628      	mov	r0, r5
}
   361ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   361f0:	f7e2 bfe2 	b.w	191b8 <bt_conn_send_cb>

000361f4 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   361f4:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   361f6:	b130      	cbz	r0, 36206 <bt_l2cap_le_lookup_tx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   361f8:	8b83      	ldrh	r3, [r0, #28]
   361fa:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   361fc:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   36200:	d001      	beq.n	36206 <bt_l2cap_le_lookup_tx_cid+0x12>
	return node->next;
   36202:	6880      	ldr	r0, [r0, #8]
   36204:	e7f7      	b.n	361f6 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   36206:	4770      	bx	lr

00036208 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   36208:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   3620a:	b130      	cbz	r0, 3621a <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   3620c:	8983      	ldrh	r3, [r0, #12]
   3620e:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   36210:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   36214:	d001      	beq.n	3621a <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   36216:	6880      	ldr	r0, [r0, #8]
   36218:	e7f7      	b.n	3620a <bt_l2cap_le_lookup_rx_cid+0x2>
}
   3621a:	4770      	bx	lr

0003621c <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   3621c:	4770      	bx	lr

0003621e <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   3621e:	4603      	mov	r3, r0
	return list->head;
   36220:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   36222:	b128      	cbz	r0, 36230 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   36224:	6859      	ldr	r1, [r3, #4]
	return node->next;
   36226:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   36228:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   3622a:	4288      	cmp	r0, r1
	list->tail = node;
   3622c:	bf08      	it	eq
   3622e:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   36230:	4770      	bx	lr

00036232 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   36232:	4603      	mov	r3, r0
	size_t bytes = 0;
   36234:	2000      	movs	r0, #0

	while (buf) {
   36236:	b903      	cbnz	r3, 3623a <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   36238:	4770      	bx	lr
		bytes += buf->len;
   3623a:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   3623c:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   3623e:	4410      	add	r0, r2
		buf = buf->frags;
   36240:	e7f9      	b.n	36236 <net_buf_frags_len+0x4>

00036242 <attr_read_type_cb>:
{
   36242:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   36244:	68d4      	ldr	r4, [r2, #12]
   36246:	7823      	ldrb	r3, [r4, #0]
   36248:	3102      	adds	r1, #2
   3624a:	b913      	cbnz	r3, 36252 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   3624c:	7021      	strb	r1, [r4, #0]
	return true;
   3624e:	2001      	movs	r0, #1
}
   36250:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   36252:	428b      	cmp	r3, r1
   36254:	d0fb      	beq.n	3624e <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   36256:	8a03      	ldrh	r3, [r0, #16]
   36258:	3b02      	subs	r3, #2
   3625a:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   3625c:	2000      	movs	r0, #0
   3625e:	6110      	str	r0, [r2, #16]
		return false;
   36260:	e7f6      	b.n	36250 <attr_read_type_cb+0xe>

00036262 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   36262:	f3bf 8f5b 	dmb	ish
   36266:	6800      	ldr	r0, [r0, #0]
   36268:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   3626c:	4108      	asrs	r0, r1
}
   3626e:	f000 0001 	and.w	r0, r0, #1
   36272:	4770      	bx	lr

00036274 <write_cb>:
{
   36274:	b573      	push	{r0, r1, r4, r5, r6, lr}
   36276:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   36278:	4601      	mov	r1, r0
{
   3627a:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   3627c:	f44f 7295 	mov.w	r2, #298	; 0x12a
   36280:	6820      	ldr	r0, [r4, #0]
   36282:	f000 fea6 	bl	36fd2 <bt_gatt_check_perm>
   36286:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   36288:	bb00      	cbnz	r0, 362cc <write_cb+0x58>
	if (!data->req) {
   3628a:	7a23      	ldrb	r3, [r4, #8]
   3628c:	b1b3      	cbz	r3, 362bc <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   3628e:	f1a3 0218 	sub.w	r2, r3, #24
   36292:	4253      	negs	r3, r2
   36294:	4153      	adcs	r3, r2
   36296:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   36298:	9301      	str	r3, [sp, #4]
   3629a:	8a63      	ldrh	r3, [r4, #18]
   3629c:	9300      	str	r3, [sp, #0]
   3629e:	68ae      	ldr	r6, [r5, #8]
   362a0:	8a23      	ldrh	r3, [r4, #16]
   362a2:	68e2      	ldr	r2, [r4, #12]
   362a4:	6820      	ldr	r0, [r4, #0]
   362a6:	4629      	mov	r1, r5
   362a8:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   362aa:	2800      	cmp	r0, #0
   362ac:	db08      	blt.n	362c0 <write_cb+0x4c>
   362ae:	8a23      	ldrh	r3, [r4, #16]
   362b0:	4298      	cmp	r0, r3
   362b2:	d10e      	bne.n	362d2 <write_cb+0x5e>
	data->err = 0U;
   362b4:	2300      	movs	r3, #0
   362b6:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   362b8:	2001      	movs	r0, #1
   362ba:	e008      	b.n	362ce <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   362bc:	2302      	movs	r3, #2
   362be:	e7eb      	b.n	36298 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   362c0:	f110 0fff 	cmn.w	r0, #255	; 0xff
   362c4:	d305      	bcc.n	362d2 <write_cb+0x5e>
		return -err;
   362c6:	4240      	negs	r0, r0
   362c8:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   362ca:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   362cc:	2000      	movs	r0, #0
}
   362ce:	b002      	add	sp, #8
   362d0:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   362d2:	200e      	movs	r0, #14
   362d4:	e7f9      	b.n	362ca <write_cb+0x56>

000362d6 <bt_gatt_foreach_attr>:
{
   362d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   362d8:	e9cd 2301 	strd	r2, r3, [sp, #4]
   362dc:	2300      	movs	r3, #0
   362de:	9300      	str	r3, [sp, #0]
   362e0:	461a      	mov	r2, r3
   362e2:	f7e5 fe6b 	bl	1bfbc <bt_gatt_foreach_attr_type>
}
   362e6:	b005      	add	sp, #20
   362e8:	f85d fb04 	ldr.w	pc, [sp], #4

000362ec <find_info_cb>:
{
   362ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   362ee:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   362f0:	6817      	ldr	r7, [r2, #0]
{
   362f2:	4605      	mov	r5, r0
   362f4:	460e      	mov	r6, r1
   362f6:	4614      	mov	r4, r2
	if (!data->rsp) {
   362f8:	b963      	cbnz	r3, 36314 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   362fa:	6850      	ldr	r0, [r2, #4]
   362fc:	2101      	movs	r1, #1
   362fe:	300c      	adds	r0, #12
   36300:	f001 fbb6 	bl	37a70 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   36304:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   36306:	682b      	ldr	r3, [r5, #0]
   36308:	781b      	ldrb	r3, [r3, #0]
   3630a:	2b00      	cmp	r3, #0
   3630c:	bf14      	ite	ne
   3630e:	2302      	movne	r3, #2
   36310:	2301      	moveq	r3, #1
   36312:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   36314:	68a3      	ldr	r3, [r4, #8]
   36316:	781b      	ldrb	r3, [r3, #0]
   36318:	2b01      	cmp	r3, #1
   3631a:	d003      	beq.n	36324 <find_info_cb+0x38>
   3631c:	2b02      	cmp	r3, #2
   3631e:	d019      	beq.n	36354 <find_info_cb+0x68>
   36320:	2000      	movs	r0, #0
   36322:	e016      	b.n	36352 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   36324:	682b      	ldr	r3, [r5, #0]
   36326:	781b      	ldrb	r3, [r3, #0]
   36328:	2b00      	cmp	r3, #0
   3632a:	d1f9      	bne.n	36320 <find_info_cb+0x34>
   3632c:	6860      	ldr	r0, [r4, #4]
   3632e:	2104      	movs	r1, #4
   36330:	300c      	adds	r0, #12
   36332:	f001 fb9d 	bl	37a70 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   36336:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   36338:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   3633a:	682a      	ldr	r2, [r5, #0]
   3633c:	68e3      	ldr	r3, [r4, #12]
   3633e:	8852      	ldrh	r2, [r2, #2]
   36340:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   36342:	6863      	ldr	r3, [r4, #4]
   36344:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   36346:	8a1b      	ldrh	r3, [r3, #16]
   36348:	1ac0      	subs	r0, r0, r3
   3634a:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   3634c:	bf94      	ite	ls
   3634e:	2000      	movls	r0, #0
   36350:	2001      	movhi	r0, #1
}
   36352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   36354:	682b      	ldr	r3, [r5, #0]
   36356:	781b      	ldrb	r3, [r3, #0]
   36358:	2b02      	cmp	r3, #2
   3635a:	d1e1      	bne.n	36320 <find_info_cb+0x34>
   3635c:	6860      	ldr	r0, [r4, #4]
   3635e:	2112      	movs	r1, #18
   36360:	300c      	adds	r0, #12
   36362:	f001 fb85 	bl	37a70 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   36366:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   36368:	8006      	strh	r6, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   3636a:	6829      	ldr	r1, [r5, #0]
   3636c:	68e0      	ldr	r0, [r4, #12]
   3636e:	2210      	movs	r2, #16
   36370:	3101      	adds	r1, #1
   36372:	3002      	adds	r0, #2
   36374:	f7ff f8df 	bl	35536 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   36378:	6863      	ldr	r3, [r4, #4]
   3637a:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   3637c:	8a1b      	ldrh	r3, [r3, #16]
   3637e:	1ac0      	subs	r0, r0, r3
   36380:	2812      	cmp	r0, #18
   36382:	e7e3      	b.n	3634c <find_info_cb+0x60>

00036384 <att_chan_mtu_updated>:
{
   36384:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   36386:	6805      	ldr	r5, [r0, #0]
	return list->head;
   36388:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   3638a:	b352      	cbz	r2, 363e2 <att_chan_mtu_updated+0x5e>
	return node->next;
   3638c:	6813      	ldr	r3, [r2, #0]
   3638e:	b103      	cbz	r3, 36392 <att_chan_mtu_updated+0xe>
   36390:	3be0      	subs	r3, #224	; 0xe0
   36392:	f1a2 04e0 	sub.w	r4, r2, #224	; 0xe0
   36396:	2200      	movs	r2, #0
   36398:	4611      	mov	r1, r2
   3639a:	e000      	b.n	3639e <att_chan_mtu_updated+0x1a>
   3639c:	3be0      	subs	r3, #224	; 0xe0
		if (chan == updated_chan) {
   3639e:	4284      	cmp	r4, r0
   363a0:	d007      	beq.n	363b2 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   363a2:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   363a4:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   363a6:	42b1      	cmp	r1, r6
   363a8:	bf38      	it	cc
   363aa:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   363ac:	42a2      	cmp	r2, r4
   363ae:	bf38      	it	cc
   363b0:	4622      	movcc	r2, r4
   363b2:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   363b4:	b12b      	cbz	r3, 363c2 <att_chan_mtu_updated+0x3e>
   363b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   363ba:	2b00      	cmp	r3, #0
   363bc:	d1ee      	bne.n	3639c <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   363be:	4284      	cmp	r4, r0
   363c0:	d1ef      	bne.n	363a2 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   363c2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   363c4:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   363c6:	428b      	cmp	r3, r1
   363c8:	d801      	bhi.n	363ce <att_chan_mtu_updated+0x4a>
   363ca:	4290      	cmp	r0, r2
   363cc:	d90b      	bls.n	363e6 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   363ce:	4282      	cmp	r2, r0
   363d0:	bf38      	it	cc
   363d2:	4602      	movcc	r2, r0
   363d4:	4299      	cmp	r1, r3
   363d6:	6828      	ldr	r0, [r5, #0]
   363d8:	bf38      	it	cc
   363da:	4619      	movcc	r1, r3
}
   363dc:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   363de:	f7e6 bba7 	b.w	1cb30 <bt_gatt_att_max_mtu_changed>
   363e2:	4611      	mov	r1, r2
   363e4:	e7ed      	b.n	363c2 <att_chan_mtu_updated+0x3e>
}
   363e6:	bc70      	pop	{r4, r5, r6}
   363e8:	4770      	bx	lr

000363ea <attr_read_group_cb>:
	if (!data->rsp->len) {
   363ea:	68d0      	ldr	r0, [r2, #12]
   363ec:	7803      	ldrb	r3, [r0, #0]
   363ee:	3104      	adds	r1, #4
   363f0:	b913      	cbnz	r3, 363f8 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   363f2:	7001      	strb	r1, [r0, #0]
	return true;
   363f4:	2001      	movs	r0, #1
   363f6:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   363f8:	428b      	cmp	r3, r1
   363fa:	d0fb      	beq.n	363f4 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   363fc:	6891      	ldr	r1, [r2, #8]
   363fe:	8a0b      	ldrh	r3, [r1, #16]
		data->group = NULL;
   36400:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   36402:	3b04      	subs	r3, #4
   36404:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   36406:	6110      	str	r0, [r2, #16]
}
   36408:	4770      	bx	lr

0003640a <z_log_msg_static_create.constprop.0>:
   3640a:	2300      	movs	r3, #0
   3640c:	f7dc beb2 	b.w	13174 <z_impl_z_log_msg_static_create>

00036410 <chan_req_send>:
{
   36410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36412:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   36414:	6888      	ldr	r0, [r1, #8]
   36416:	f7ff ff0c 	bl	36232 <net_buf_frags_len>
   3641a:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
   3641c:	4283      	cmp	r3, r0
{
   3641e:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   36420:	d30d      	bcc.n	3643e <chan_req_send+0x2e>
	chan->req = req;
   36422:	f8c5 1094 	str.w	r1, [r5, #148]	; 0x94
	buf = req->buf;
   36426:	688f      	ldr	r7, [r1, #8]
	req->buf = NULL;
   36428:	2600      	movs	r6, #0
   3642a:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   3642c:	4628      	mov	r0, r5
   3642e:	4639      	mov	r1, r7
   36430:	f7e3 fe6a 	bl	1a108 <chan_send>
	if (err) {
   36434:	b110      	cbz	r0, 3643c <chan_req_send+0x2c>
		req->buf = buf;
   36436:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   36438:	f8c5 6094 	str.w	r6, [r5, #148]	; 0x94
}
   3643c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   3643e:	f06f 0079 	mvn.w	r0, #121	; 0x79
   36442:	e7fb      	b.n	3643c <chan_req_send+0x2c>

00036444 <process_queue>:
{
   36444:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   36446:	2200      	movs	r2, #0
{
   36448:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   3644a:	2300      	movs	r3, #0
   3644c:	4608      	mov	r0, r1
{
   3644e:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   36450:	f001 faa7 	bl	379a2 <net_buf_get>
	if (buf) {
   36454:	4605      	mov	r5, r0
   36456:	b158      	cbz	r0, 36470 <process_queue+0x2c>
	return chan_send(chan, buf);
   36458:	4601      	mov	r1, r0
   3645a:	4620      	mov	r0, r4
   3645c:	f7e3 fe54 	bl	1a108 <chan_send>
		if (err) {
   36460:	4604      	mov	r4, r0
   36462:	b118      	cbz	r0, 3646c <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   36464:	4629      	mov	r1, r5
   36466:	4630      	mov	r0, r6
   36468:	f002 fa1d 	bl	388a6 <k_queue_prepend>
}
   3646c:	4620      	mov	r0, r4
   3646e:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   36470:	f06f 0401 	mvn.w	r4, #1
   36474:	e7fa      	b.n	3646c <process_queue+0x28>

00036476 <bt_att_chan_send_rsp>:
{
   36476:	b538      	push	{r3, r4, r5, lr}
   36478:	4604      	mov	r4, r0
   3647a:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   3647c:	f7e3 fe44 	bl	1a108 <chan_send>
	if (err) {
   36480:	b130      	cbz	r0, 36490 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   36482:	4629      	mov	r1, r5
   36484:	f104 0098 	add.w	r0, r4, #152	; 0x98
}
   36488:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   3648c:	f001 babc 	b.w	37a08 <net_buf_put>
}
   36490:	bd38      	pop	{r3, r4, r5, pc}

00036492 <sys_slist_find_and_remove.isra.0>:
	return list->head;
   36492:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   36494:	2200      	movs	r2, #0
   36496:	b903      	cbnz	r3, 3649a <sys_slist_find_and_remove.isra.0+0x8>
   36498:	4770      	bx	lr
   3649a:	428b      	cmp	r3, r1
   3649c:	d10f      	bne.n	364be <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   3649e:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   364a0:	b93a      	cbnz	r2, 364b2 <sys_slist_find_and_remove.isra.0+0x20>
   364a2:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   364a4:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   364a6:	4291      	cmp	r1, r2
   364a8:	d100      	bne.n	364ac <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   364aa:	6043      	str	r3, [r0, #4]
	parent->next = child;
   364ac:	2300      	movs	r3, #0
   364ae:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   364b0:	4770      	bx	lr
	parent->next = child;
   364b2:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   364b4:	6843      	ldr	r3, [r0, #4]
   364b6:	4299      	cmp	r1, r3
	list->tail = node;
   364b8:	bf08      	it	eq
   364ba:	6042      	streq	r2, [r0, #4]
}
   364bc:	e7f6      	b.n	364ac <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   364be:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   364c0:	681b      	ldr	r3, [r3, #0]
   364c2:	e7e8      	b.n	36496 <sys_slist_find_and_remove.isra.0+0x4>

000364c4 <atomic_test_and_set_bit>:
{
   364c4:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   364c6:	2301      	movs	r3, #1
   364c8:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   364cc:	f3bf 8f5b 	dmb	ish
   364d0:	e850 3f00 	ldrex	r3, [r0]
   364d4:	ea43 0201 	orr.w	r2, r3, r1
   364d8:	e840 2400 	strex	r4, r2, [r0]
   364dc:	2c00      	cmp	r4, #0
   364de:	d1f7      	bne.n	364d0 <atomic_test_and_set_bit+0xc>
   364e0:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   364e4:	4219      	tst	r1, r3
}
   364e6:	bf14      	ite	ne
   364e8:	2001      	movne	r0, #1
   364ea:	2000      	moveq	r0, #0
   364ec:	bd10      	pop	{r4, pc}

000364ee <att_chan_read>:
{
   364ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   364f2:	4680      	mov	r8, r0
   364f4:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   364f6:	4610      	mov	r0, r2
{
   364f8:	4699      	mov	r9, r3
   364fa:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   364fc:	f7ff fe99 	bl	36232 <net_buf_frags_len>
   36500:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   36504:	4283      	cmp	r3, r0
{
   36506:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   36508:	d97a      	bls.n	36600 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   3650a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   3650e:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   36510:	4630      	mov	r0, r6
   36512:	f001 fa7f 	bl	37a14 <net_buf_frag_last>
	size_t len, total = 0;
   36516:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   3651a:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   3651c:	4630      	mov	r0, r6
   3651e:	f7ff fe88 	bl	36232 <net_buf_frags_len>
   36522:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   36526:	f105 070c 	add.w	r7, r5, #12
   3652a:	1a24      	subs	r4, r4, r0
   3652c:	4638      	mov	r0, r7
   3652e:	f001 fada 	bl	37ae6 <net_buf_simple_tailroom>
   36532:	4284      	cmp	r4, r0
   36534:	d211      	bcs.n	3655a <att_chan_read+0x6c>
   36536:	4630      	mov	r0, r6
   36538:	f7ff fe7b 	bl	36232 <net_buf_frags_len>
   3653c:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   36540:	1a24      	subs	r4, r4, r0
		if (!len) {
   36542:	bb34      	cbnz	r4, 36592 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   36544:	7ab0      	ldrb	r0, [r6, #10]
   36546:	f7f7 f8c9 	bl	2d6dc <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   3654a:	2200      	movs	r2, #0
   3654c:	2300      	movs	r3, #0
   3654e:	f001 fa23 	bl	37998 <net_buf_alloc_fixed>
			if (!frag) {
   36552:	4605      	mov	r5, r0
   36554:	b930      	cbnz	r0, 36564 <att_chan_read+0x76>
	return total;
   36556:	4657      	mov	r7, sl
   36558:	e02c      	b.n	365b4 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   3655a:	4638      	mov	r0, r7
   3655c:	f001 fac3 	bl	37ae6 <net_buf_simple_tailroom>
   36560:	4604      	mov	r4, r0
   36562:	e7ee      	b.n	36542 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   36564:	4601      	mov	r1, r0
   36566:	4630      	mov	r0, r6
   36568:	f001 fa65 	bl	37a36 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   3656c:	4630      	mov	r0, r6
   3656e:	f7ff fe60 	bl	36232 <net_buf_frags_len>
   36572:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   36576:	f105 070c 	add.w	r7, r5, #12
   3657a:	1a24      	subs	r4, r4, r0
   3657c:	4638      	mov	r0, r7
   3657e:	f001 fab2 	bl	37ae6 <net_buf_simple_tailroom>
   36582:	4284      	cmp	r4, r0
   36584:	d21a      	bcs.n	365bc <att_chan_read+0xce>
   36586:	4630      	mov	r0, r6
   36588:	f7ff fe53 	bl	36232 <net_buf_frags_len>
   3658c:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   36590:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   36592:	68e9      	ldr	r1, [r5, #12]
   36594:	8a2a      	ldrh	r2, [r5, #16]
   36596:	f8cd 9000 	str.w	r9, [sp]
   3659a:	f8db 7004 	ldr.w	r7, [fp, #4]
   3659e:	9803      	ldr	r0, [sp, #12]
   365a0:	440a      	add	r2, r1
   365a2:	b2a3      	uxth	r3, r4
   365a4:	4659      	mov	r1, fp
   365a6:	47b8      	blx	r7
		if (read < 0) {
   365a8:	1e07      	subs	r7, r0, #0
   365aa:	da0c      	bge.n	365c6 <att_chan_read+0xd8>
				return total;
   365ac:	f1ba 0f00 	cmp.w	sl, #0
   365b0:	bf18      	it	ne
   365b2:	4657      	movne	r7, sl
}
   365b4:	4638      	mov	r0, r7
   365b6:	b005      	add	sp, #20
   365b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   365bc:	4638      	mov	r0, r7
   365be:	f001 fa92 	bl	37ae6 <net_buf_simple_tailroom>
   365c2:	4604      	mov	r4, r0
   365c4:	e7e5      	b.n	36592 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   365c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   365c8:	b993      	cbnz	r3, 365f0 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   365ca:	4639      	mov	r1, r7
   365cc:	f105 000c 	add.w	r0, r5, #12
   365d0:	f001 fa4e 	bl	37a70 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   365d4:	4630      	mov	r0, r6
   365d6:	f7ff fe2c 	bl	36232 <net_buf_frags_len>
   365da:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   365de:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   365e0:	4283      	cmp	r3, r0
		total += read;
   365e2:	44ba      	add	sl, r7
		offset += read;
   365e4:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   365e8:	d9b5      	bls.n	36556 <att_chan_read+0x68>
   365ea:	42a7      	cmp	r7, r4
   365ec:	d096      	beq.n	3651c <att_chan_read+0x2e>
   365ee:	e7b2      	b.n	36556 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   365f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   365f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   365f4:	4639      	mov	r1, r7
   365f6:	4628      	mov	r0, r5
   365f8:	4798      	blx	r3
   365fa:	2800      	cmp	r0, #0
   365fc:	d1e5      	bne.n	365ca <att_chan_read+0xdc>
   365fe:	e7aa      	b.n	36556 <att_chan_read+0x68>
		return 0;
   36600:	2700      	movs	r7, #0
   36602:	e7d7      	b.n	365b4 <att_chan_read+0xc6>

00036604 <read_cb>:
{
   36604:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   36606:	6816      	ldr	r6, [r2, #0]
{
   36608:	4605      	mov	r5, r0
	data->err = 0x00;
   3660a:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   3660c:	6870      	ldr	r0, [r6, #4]
	data->err = 0x00;
   3660e:	7313      	strb	r3, [r2, #12]
{
   36610:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   36612:	4629      	mov	r1, r5
   36614:	2295      	movs	r2, #149	; 0x95
   36616:	f000 fcdc 	bl	36fd2 <bt_gatt_check_perm>
   3661a:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   3661c:	b980      	cbnz	r0, 36640 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   3661e:	e9cd 0000 	strd	r0, r0, [sp]
   36622:	4629      	mov	r1, r5
   36624:	88a3      	ldrh	r3, [r4, #4]
   36626:	68a2      	ldr	r2, [r4, #8]
   36628:	4630      	mov	r0, r6
   3662a:	f7ff ff60 	bl	364ee <att_chan_read>
	if (ret < 0) {
   3662e:	2800      	cmp	r0, #0
   36630:	da09      	bge.n	36646 <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   36632:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   36636:	bf26      	itte	cs
   36638:	4240      	negcs	r0, r0
   3663a:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   3663c:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   3663e:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   36640:	2000      	movs	r0, #0
}
   36642:	b002      	add	sp, #8
   36644:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   36646:	2001      	movs	r0, #1
   36648:	e7fb      	b.n	36642 <read_cb+0x3e>

0003664a <read_vl_cb>:
{
   3664a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   3664e:	f8d2 8000 	ldr.w	r8, [r2]
{
   36652:	4606      	mov	r6, r0
	data->err = 0x00;
   36654:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   36656:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   3665a:	7313      	strb	r3, [r2, #12]
{
   3665c:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   3665e:	4631      	mov	r1, r6
   36660:	2295      	movs	r2, #149	; 0x95
   36662:	f000 fcb6 	bl	36fd2 <bt_gatt_check_perm>
   36666:	4605      	mov	r5, r0
   36668:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   3666a:	b9e0      	cbnz	r0, 366a6 <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   3666c:	68a0      	ldr	r0, [r4, #8]
   3666e:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   36672:	8a02      	ldrh	r2, [r0, #16]
   36674:	1a9b      	subs	r3, r3, r2
   36676:	2b01      	cmp	r3, #1
   36678:	dd15      	ble.n	366a6 <read_vl_cb+0x5c>
   3667a:	2102      	movs	r1, #2
   3667c:	300c      	adds	r0, #12
   3667e:	f001 f9f7 	bl	37a70 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   36682:	e9cd 5500 	strd	r5, r5, [sp]
   36686:	4607      	mov	r7, r0
   36688:	88a3      	ldrh	r3, [r4, #4]
   3668a:	68a2      	ldr	r2, [r4, #8]
   3668c:	4631      	mov	r1, r6
   3668e:	4640      	mov	r0, r8
   36690:	f7ff ff2d 	bl	364ee <att_chan_read>
	if (read < 0) {
   36694:	1e03      	subs	r3, r0, #0
   36696:	da0a      	bge.n	366ae <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   36698:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   3669c:	bf26      	itte	cs
   3669e:	425b      	negcs	r3, r3
   366a0:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   366a2:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   366a4:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   366a6:	2000      	movs	r0, #0
}
   366a8:	b002      	add	sp, #8
   366aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   366ae:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   366b0:	2001      	movs	r0, #1
   366b2:	e7f9      	b.n	366a8 <read_vl_cb+0x5e>

000366b4 <bt_att_sent>:
{
   366b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   366b6:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   366b8:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   366ba:	f100 038c 	add.w	r3, r0, #140	; 0x8c
	struct bt_att *att = chan->att;
   366be:	f850 4c04 	ldr.w	r4, [r0, #-4]
   366c2:	f3bf 8f5b 	dmb	ish
   366c6:	e853 1f00 	ldrex	r1, [r3]
   366ca:	f021 0110 	bic.w	r1, r1, #16
   366ce:	e843 1200 	strex	r2, r1, [r3]
   366d2:	2a00      	cmp	r2, #0
   366d4:	d1f7      	bne.n	366c6 <bt_att_sent+0x12>
   366d6:	f3bf 8f5b 	dmb	ish
	if (!att) {
   366da:	b30c      	cbz	r4, 36720 <bt_att_sent+0x6c>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   366dc:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   366e0:	b98b      	cbnz	r3, 36706 <bt_att_sent+0x52>
   366e2:	6863      	ldr	r3, [r4, #4]
   366e4:	b17b      	cbz	r3, 36706 <bt_att_sent+0x52>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   366e6:	1d20      	adds	r0, r4, #4
   366e8:	f7ff fd99 	bl	3621e <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   366ec:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   366ee:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   366f0:	4638      	mov	r0, r7
   366f2:	f7ff fe8d 	bl	36410 <chan_req_send>
   366f6:	2800      	cmp	r0, #0
   366f8:	da12      	bge.n	36720 <bt_att_sent+0x6c>
	return list->head;
   366fa:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   366fc:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   366fe:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   36700:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   36702:	b903      	cbnz	r3, 36706 <bt_att_sent+0x52>
	list->tail = node;
   36704:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   36706:	f105 0194 	add.w	r1, r5, #148	; 0x94
   3670a:	4638      	mov	r0, r7
   3670c:	f7ff fe9a 	bl	36444 <process_queue>
	if (!err) {
   36710:	b130      	cbz	r0, 36720 <bt_att_sent+0x6c>
	(void)process_queue(chan, &att->tx_queue);
   36712:	f104 010c 	add.w	r1, r4, #12
   36716:	4638      	mov	r0, r7
}
   36718:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   3671c:	f7ff be92 	b.w	36444 <process_queue>
}
   36720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00036722 <att_req_send_process>:
{
   36722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   36726:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
   36728:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   3672a:	2c00      	cmp	r4, #0
   3672c:	d03b      	beq.n	367a6 <att_req_send_process+0x84>
	return node->next;
   3672e:	f854 69e0 	ldr.w	r6, [r4], #-224
   36732:	b106      	cbz	r6, 36736 <att_req_send_process+0x14>
   36734:	3ee0      	subs	r6, #224	; 0xe0
{
   36736:	2300      	movs	r3, #0
   36738:	461d      	mov	r5, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   3673a:	f108 0704 	add.w	r7, r8, #4
   3673e:	e013      	b.n	36768 <att_req_send_process+0x46>
		if (!req && prev &&
   36740:	b1c3      	cbz	r3, 36774 <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   36742:	2103      	movs	r1, #3
   36744:	f104 0090 	add.w	r0, r4, #144	; 0x90
   36748:	f7ff fd8b 	bl	36262 <atomic_test_bit>
   3674c:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   3674e:	f103 0090 	add.w	r0, r3, #144	; 0x90
   36752:	f7ff fd86 	bl	36262 <atomic_test_bit>
		if (!req && prev &&
   36756:	4282      	cmp	r2, r0
   36758:	d10c      	bne.n	36774 <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   3675a:	b326      	cbz	r6, 367a6 <att_req_send_process+0x84>
   3675c:	f8d6 20e0 	ldr.w	r2, [r6, #224]	; 0xe0
   36760:	b102      	cbz	r2, 36764 <att_req_send_process+0x42>
   36762:	3ae0      	subs	r2, #224	; 0xe0
{
   36764:	4634      	mov	r4, r6
   36766:	4616      	mov	r6, r2
		if (chan->req) {
   36768:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   3676c:	2a00      	cmp	r2, #0
   3676e:	d1f4      	bne.n	3675a <att_req_send_process+0x38>
		if (!req && prev &&
   36770:	2d00      	cmp	r5, #0
   36772:	d0e5      	beq.n	36740 <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   36774:	4638      	mov	r0, r7
   36776:	f7ff fd52 	bl	3621e <sys_slist_get>
	if (node) {
   3677a:	4605      	mov	r5, r0
   3677c:	b908      	cbnz	r0, 36782 <att_req_send_process+0x60>
   3677e:	4623      	mov	r3, r4
   36780:	e7eb      	b.n	3675a <att_req_send_process+0x38>
	return chan_req_send(chan, req);
   36782:	4601      	mov	r1, r0
   36784:	4620      	mov	r0, r4
   36786:	f7ff fe43 	bl	36410 <chan_req_send>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   3678a:	2800      	cmp	r0, #0
   3678c:	da0b      	bge.n	367a6 <att_req_send_process+0x84>
	return list->head;
   3678e:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   36792:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   36794:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   36798:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   3679c:	2b00      	cmp	r3, #0
   3679e:	d1ee      	bne.n	3677e <att_req_send_process+0x5c>
	list->tail = node;
   367a0:	f8c8 5008 	str.w	r5, [r8, #8]
}
   367a4:	e7eb      	b.n	3677e <att_req_send_process+0x5c>
}
   367a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000367aa <bt_att_status>:
{
   367aa:	b538      	push	{r3, r4, r5, lr}
   367ac:	4605      	mov	r5, r0
   367ae:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   367b0:	2100      	movs	r1, #0
   367b2:	f7ff fd56 	bl	36262 <atomic_test_bit>
   367b6:	b1c0      	cbz	r0, 367ea <bt_att_status+0x40>
	if (!chan->att) {
   367b8:	f855 0c04 	ldr.w	r0, [r5, #-4]
   367bc:	b1a8      	cbz	r0, 367ea <bt_att_status+0x40>
	if (chan->req) {
   367be:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   367c2:	b993      	cbnz	r3, 367ea <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   367c4:	3004      	adds	r0, #4
   367c6:	f7ff fd2a 	bl	3621e <sys_slist_get>
	if (!node) {
   367ca:	4604      	mov	r4, r0
   367cc:	b168      	cbz	r0, 367ea <bt_att_status+0x40>
	return chan_req_send(chan, req);
   367ce:	4601      	mov	r1, r0
   367d0:	1f28      	subs	r0, r5, #4
   367d2:	f7ff fe1d 	bl	36410 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   367d6:	2800      	cmp	r0, #0
   367d8:	da07      	bge.n	367ea <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   367da:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   367de:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   367e0:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   367e2:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   367e4:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   367e6:	b902      	cbnz	r2, 367ea <bt_att_status+0x40>
	list->tail = node;
   367e8:	609c      	str	r4, [r3, #8]
}
   367ea:	bd38      	pop	{r3, r4, r5, pc}

000367ec <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   367ec:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   367ee:	6883      	ldr	r3, [r0, #8]
   367f0:	699b      	ldr	r3, [r3, #24]
   367f2:	b10b      	cbz	r3, 367f8 <att_sent+0xc>
		chan->ops->sent(chan);
   367f4:	3004      	adds	r0, #4
   367f6:	4718      	bx	r3
}
   367f8:	4770      	bx	lr

000367fa <att_unknown>:
{
   367fa:	b510      	push	{r4, lr}
   367fc:	460c      	mov	r4, r1
	if (!err) {
   367fe:	b90a      	cbnz	r2, 36804 <att_unknown+0xa>
		att_sent(conn, user_data);
   36800:	f7ff fff4 	bl	367ec <att_sent>
	tx_meta_data_free(user_data);
   36804:	4620      	mov	r0, r4
}
   36806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   3680a:	f7e3 bba9 	b.w	19f60 <tx_meta_data_free>

0003680e <att_tx_complete>:
{
   3680e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   36812:	4606      	mov	r6, r0
   36814:	460d      	mov	r5, r1
	if (!err) {
   36816:	4614      	mov	r4, r2
   36818:	b122      	cbz	r2, 36824 <att_tx_complete+0x16>
}
   3681a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   3681e:	4608      	mov	r0, r1
   36820:	f7e3 bb9e 	b.w	19f60 <tx_meta_data_free>
		att_sent(conn, user_data);
   36824:	f7ff ffe2 	bl	367ec <att_sent>
	bt_gatt_complete_func_t func = data->func;
   36828:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   3682a:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   3682e:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   36832:	4628      	mov	r0, r5
   36834:	f7e3 fb94 	bl	19f60 <tx_meta_data_free>
	if (!err && func) {
   36838:	b92f      	cbnz	r7, 36846 <att_tx_complete+0x38>
}
   3683a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   3683e:	4649      	mov	r1, r9
   36840:	4630      	mov	r0, r6
   36842:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   36844:	3401      	adds	r4, #1
   36846:	b2a3      	uxth	r3, r4
   36848:	4543      	cmp	r3, r8
   3684a:	d3f8      	bcc.n	3683e <att_tx_complete+0x30>
   3684c:	e7f5      	b.n	3683a <att_tx_complete+0x2c>

0003684e <att_req_sent>:
{
   3684e:	b510      	push	{r4, lr}
   36850:	460c      	mov	r4, r1
	if (!err) {
   36852:	b90a      	cbnz	r2, 36858 <att_req_sent+0xa>
		att_sent(conn, user_data);
   36854:	f7ff ffca 	bl	367ec <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   36858:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   3685a:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   3685e:	b12b      	cbz	r3, 3686c <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   36860:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   36864:	2300      	movs	r3, #0
   36866:	30b0      	adds	r0, #176	; 0xb0
   36868:	f7fb fb6e 	bl	31f48 <k_work_reschedule>
	tx_meta_data_free(user_data);
   3686c:	4620      	mov	r0, r4
}
   3686e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   36872:	f7e3 bb75 	b.w	19f60 <tx_meta_data_free>

00036876 <att_cfm_sent>:
{
   36876:	b510      	push	{r4, lr}
   36878:	460c      	mov	r4, r1
	if (!err) {
   3687a:	b90a      	cbnz	r2, 36880 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   3687c:	f7ff ffb6 	bl	367ec <att_sent>
   36880:	6823      	ldr	r3, [r4, #0]
   36882:	f3bf 8f5b 	dmb	ish
   36886:	3390      	adds	r3, #144	; 0x90
   36888:	e853 1f00 	ldrex	r1, [r3]
   3688c:	f021 0102 	bic.w	r1, r1, #2
   36890:	e843 1200 	strex	r2, r1, [r3]
   36894:	2a00      	cmp	r2, #0
   36896:	d1f7      	bne.n	36888 <att_cfm_sent+0x12>
   36898:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   3689c:	4620      	mov	r0, r4
}
   3689e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   368a2:	f7e3 bb5d 	b.w	19f60 <tx_meta_data_free>

000368a6 <att_rsp_sent>:
{
   368a6:	b510      	push	{r4, lr}
   368a8:	460c      	mov	r4, r1
	if (!err) {
   368aa:	b90a      	cbnz	r2, 368b0 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   368ac:	f7ff ff9e 	bl	367ec <att_sent>
   368b0:	6823      	ldr	r3, [r4, #0]
   368b2:	f3bf 8f5b 	dmb	ish
   368b6:	3390      	adds	r3, #144	; 0x90
   368b8:	e853 1f00 	ldrex	r1, [r3]
   368bc:	f021 0101 	bic.w	r1, r1, #1
   368c0:	e843 1200 	strex	r2, r1, [r3]
   368c4:	2a00      	cmp	r2, #0
   368c6:	d1f7      	bne.n	368b8 <att_rsp_sent+0x12>
   368c8:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   368cc:	4620      	mov	r0, r4
}
   368ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   368d2:	f7e3 bb45 	b.w	19f60 <tx_meta_data_free>

000368d6 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   368d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   368da:	4688      	mov	r8, r1
   368dc:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   368de:	2101      	movs	r1, #1
   368e0:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   368e2:	4605      	mov	r5, r0
   368e4:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   368e6:	f7e3 fe45 	bl	1a574 <bt_att_chan_create_pdu>
	if (!buf) {
   368ea:	4604      	mov	r4, r0
   368ec:	b170      	cbz	r0, 3690c <send_err_rsp.part.0+0x36>
   368ee:	2104      	movs	r1, #4
   368f0:	300c      	adds	r0, #12
   368f2:	f001 f8bd 	bl	37a70 <net_buf_simple_add>
	rsp->request = req;
   368f6:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   368fa:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   368fe:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   36900:	4621      	mov	r1, r4
   36902:	4628      	mov	r0, r5
}
   36904:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   36908:	f7ff bdb5 	b.w	36476 <bt_att_chan_send_rsp>
}
   3690c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00036910 <att_write_cmd>:
{
   36910:	b530      	push	{r4, r5, lr}
   36912:	460c      	mov	r4, r1
   36914:	b085      	sub	sp, #20
   36916:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   36918:	f101 000c 	add.w	r0, r1, #12
   3691c:	f001 f8d7 	bl	37ace <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   36920:	8a22      	ldrh	r2, [r4, #16]
   36922:	9202      	str	r2, [sp, #8]
   36924:	68e2      	ldr	r2, [r4, #12]
   36926:	9201      	str	r2, [sp, #4]
   36928:	2200      	movs	r2, #0
   3692a:	4603      	mov	r3, r0
   3692c:	9200      	str	r2, [sp, #0]
   3692e:	4611      	mov	r1, r2
   36930:	4628      	mov	r0, r5
   36932:	f7e3 ff53 	bl	1a7dc <att_write_rsp>
}
   36936:	b005      	add	sp, #20
   36938:	bd30      	pop	{r4, r5, pc}

0003693a <att_write_req>:
{
   3693a:	b530      	push	{r4, r5, lr}
   3693c:	460c      	mov	r4, r1
   3693e:	b085      	sub	sp, #20
   36940:	4605      	mov	r5, r0
   36942:	f101 000c 	add.w	r0, r1, #12
   36946:	f001 f8c2 	bl	37ace <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   3694a:	8a22      	ldrh	r2, [r4, #16]
   3694c:	9202      	str	r2, [sp, #8]
   3694e:	68e2      	ldr	r2, [r4, #12]
   36950:	9201      	str	r2, [sp, #4]
   36952:	2200      	movs	r2, #0
   36954:	4603      	mov	r3, r0
   36956:	9200      	str	r2, [sp, #0]
   36958:	2112      	movs	r1, #18
   3695a:	2213      	movs	r2, #19
   3695c:	4628      	mov	r0, r5
   3695e:	f7e3 ff3d 	bl	1a7dc <att_write_rsp>
}
   36962:	b005      	add	sp, #20
   36964:	bd30      	pop	{r4, r5, pc}

00036966 <att_read_blob_req>:
{
   36966:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   36968:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   3696a:	8813      	ldrh	r3, [r2, #0]
   3696c:	8852      	ldrh	r2, [r2, #2]
   3696e:	9200      	str	r2, [sp, #0]
   36970:	210c      	movs	r1, #12
   36972:	220d      	movs	r2, #13
   36974:	f7e4 fa5c 	bl	1ae30 <att_read_rsp>
}
   36978:	b003      	add	sp, #12
   3697a:	f85d fb04 	ldr.w	pc, [sp], #4

0003697e <att_read_req>:
{
   3697e:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   36980:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   36982:	2200      	movs	r2, #0
   36984:	881b      	ldrh	r3, [r3, #0]
   36986:	9200      	str	r2, [sp, #0]
   36988:	210a      	movs	r1, #10
   3698a:	220b      	movs	r2, #11
   3698c:	f7e4 fa50 	bl	1ae30 <att_read_rsp>
}
   36990:	b003      	add	sp, #12
   36992:	f85d fb04 	ldr.w	pc, [sp], #4

00036996 <att_mtu_req>:
{
   36996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36998:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   3699a:	f850 2b90 	ldr.w	r2, [r0], #144
{
   3699e:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   369a0:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   369a2:	6817      	ldr	r7, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   369a4:	f7ff fc5d 	bl	36262 <atomic_test_bit>
   369a8:	4604      	mov	r4, r0
   369aa:	b9f0      	cbnz	r0, 369ea <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   369ac:	68db      	ldr	r3, [r3, #12]
   369ae:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   369b0:	2e16      	cmp	r6, #22
   369b2:	d91c      	bls.n	369ee <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   369b4:	4638      	mov	r0, r7
   369b6:	2202      	movs	r2, #2
   369b8:	f7e3 ffc2 	bl	1a940 <bt_att_create_pdu>
	if (!pdu) {
   369bc:	4607      	mov	r7, r0
   369be:	b1c0      	cbz	r0, 369f2 <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
   369c0:	2102      	movs	r1, #2
   369c2:	300c      	adds	r0, #12
   369c4:	f001 f854 	bl	37a70 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   369c8:	2341      	movs	r3, #65	; 0x41
   369ca:	7003      	strb	r3, [r0, #0]
   369cc:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   369ce:	4639      	mov	r1, r7
   369d0:	4628      	mov	r0, r5
   369d2:	f7ff fd50 	bl	36476 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   369d6:	2e41      	cmp	r6, #65	; 0x41
   369d8:	bf28      	it	cs
   369da:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   369dc:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   369de:	836e      	strh	r6, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   369e0:	856e      	strh	r6, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   369e2:	f7ff fccf 	bl	36384 <att_chan_mtu_updated>
	return 0;
   369e6:	4620      	mov	r0, r4
}
   369e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   369ea:	2006      	movs	r0, #6
   369ec:	e7fc      	b.n	369e8 <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   369ee:	2004      	movs	r0, #4
   369f0:	e7fa      	b.n	369e8 <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   369f2:	200e      	movs	r0, #14
   369f4:	e7f8      	b.n	369e8 <att_mtu_req+0x52>

000369f6 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   369f6:	8a0a      	ldrh	r2, [r1, #16]
   369f8:	68c9      	ldr	r1, [r1, #12]
   369fa:	2300      	movs	r3, #0
   369fc:	f7e4 bbc4 	b.w	1b188 <att_handle_rsp>

00036a00 <bt_att_encrypt_change>:
{
   36a00:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   36a02:	4606      	mov	r6, r0
	if (!att_chan->att) {
   36a04:	f850 3c04 	ldr.w	r3, [r0, #-4]
	struct bt_conn *conn = le_chan->chan.conn;
   36a08:	f856 5904 	ldr.w	r5, [r6], #-4
{
   36a0c:	4604      	mov	r4, r0
	if (!att_chan->att) {
   36a0e:	2b00      	cmp	r3, #0
   36a10:	d038      	beq.n	36a84 <bt_att_encrypt_change+0x84>
	if (hci_status) {
   36a12:	b141      	cbz	r1, 36a26 <bt_att_encrypt_change+0x26>
		if (att_chan->req && att_chan->req->retrying) {
   36a14:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
   36a18:	2b00      	cmp	r3, #0
   36a1a:	d033      	beq.n	36a84 <bt_att_encrypt_change+0x84>
   36a1c:	7c1b      	ldrb	r3, [r3, #16]
   36a1e:	07da      	lsls	r2, r3, #31
   36a20:	d530      	bpl.n	36a84 <bt_att_encrypt_change+0x84>
		return BT_ATT_ERR_AUTHENTICATION;
   36a22:	2305      	movs	r3, #5
   36a24:	e021      	b.n	36a6a <bt_att_encrypt_change+0x6a>
	bt_gatt_encrypt_change(conn);
   36a26:	4628      	mov	r0, r5
   36a28:	f7e6 f896 	bl	1cb58 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   36a2c:	7a6b      	ldrb	r3, [r5, #9]
   36a2e:	2b01      	cmp	r3, #1
   36a30:	d028      	beq.n	36a84 <bt_att_encrypt_change+0x84>
	if (!(att_chan->req && att_chan->req->retrying)) {
   36a32:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
   36a36:	b32d      	cbz	r5, 36a84 <bt_att_encrypt_change+0x84>
   36a38:	7c2b      	ldrb	r3, [r5, #16]
   36a3a:	07db      	lsls	r3, r3, #31
   36a3c:	d522      	bpl.n	36a84 <bt_att_encrypt_change+0x84>
	if (!req->encode) {
   36a3e:	68eb      	ldr	r3, [r5, #12]
   36a40:	2b00      	cmp	r3, #0
   36a42:	d0ee      	beq.n	36a22 <bt_att_encrypt_change+0x22>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   36a44:	696a      	ldr	r2, [r5, #20]
   36a46:	7c69      	ldrb	r1, [r5, #17]
   36a48:	4630      	mov	r0, r6
   36a4a:	f7e3 fd93 	bl	1a574 <bt_att_chan_create_pdu>
	if (!buf) {
   36a4e:	4604      	mov	r4, r0
   36a50:	b150      	cbz	r0, 36a68 <bt_att_encrypt_change+0x68>
	if (req->encode(buf, req->len, req->user_data)) {
   36a52:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   36a56:	68eb      	ldr	r3, [r5, #12]
   36a58:	4798      	blx	r3
   36a5a:	b168      	cbz	r0, 36a78 <bt_att_encrypt_change+0x78>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   36a5c:	69a0      	ldr	r0, [r4, #24]
   36a5e:	f7e3 fa7f 	bl	19f60 <tx_meta_data_free>
		net_buf_unref(buf);
   36a62:	4620      	mov	r0, r4
   36a64:	f7f6 fefc 	bl	2d860 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   36a68:	230e      	movs	r3, #14
		att_handle_rsp(att_chan, NULL, 0, err);
   36a6a:	2200      	movs	r2, #0
   36a6c:	4630      	mov	r0, r6
   36a6e:	4611      	mov	r1, r2
}
   36a70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   36a74:	f7e4 bb88 	b.w	1b188 <att_handle_rsp>
	if (chan_send(att_chan, buf)) {
   36a78:	4621      	mov	r1, r4
   36a7a:	4630      	mov	r0, r6
   36a7c:	f7e3 fb44 	bl	1a108 <chan_send>
   36a80:	2800      	cmp	r0, #0
   36a82:	d1eb      	bne.n	36a5c <bt_att_encrypt_change+0x5c>
}
   36a84:	bd70      	pop	{r4, r5, r6, pc}

00036a86 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   36a86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36a88:	460d      	mov	r5, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   36a8a:	f7e3 fba3 	bl	1a1d4 <att_get>
	if (!att) {
   36a8e:	4604      	mov	r4, r0
   36a90:	b940      	cbnz	r0, 36aa4 <bt_att_send+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   36a92:	69a8      	ldr	r0, [r5, #24]
   36a94:	f7e3 fa64 	bl	19f60 <tx_meta_data_free>
		net_buf_unref(buf);
   36a98:	4628      	mov	r0, r5
   36a9a:	f7f6 fee1 	bl	2d860 <net_buf_unref>
		return -ENOTCONN;
   36a9e:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   36aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   36aa4:	f100 060c 	add.w	r6, r0, #12
   36aa8:	4629      	mov	r1, r5
   36aaa:	4630      	mov	r0, r6
   36aac:	f000 ffac 	bl	37a08 <net_buf_put>
	return list->head;
   36ab0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   36ab2:	b14d      	cbz	r5, 36ac8 <bt_att_send+0x42>
	return node->next;
   36ab4:	f855 49e0 	ldr.w	r4, [r5], #-224
   36ab8:	b104      	cbz	r4, 36abc <bt_att_send+0x36>
   36aba:	3ce0      	subs	r4, #224	; 0xe0
		err = process_queue(chan, &att->tx_queue);
   36abc:	4631      	mov	r1, r6
   36abe:	4628      	mov	r0, r5
   36ac0:	f7ff fcc0 	bl	36444 <process_queue>
		if (!err) {
   36ac4:	4603      	mov	r3, r0
   36ac6:	b980      	cbnz	r0, 36aea <bt_att_send+0x64>
	return 0;
   36ac8:	2000      	movs	r0, #0
   36aca:	e7ea      	b.n	36aa2 <bt_att_send+0x1c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   36acc:	2103      	movs	r1, #3
   36ace:	f104 0090 	add.w	r0, r4, #144	; 0x90
   36ad2:	f7ff fbc6 	bl	36262 <atomic_test_bit>
   36ad6:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   36ad8:	f105 0090 	add.w	r0, r5, #144	; 0x90
   36adc:	f7ff fbc1 	bl	36262 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   36ae0:	4287      	cmp	r7, r0
   36ae2:	f06f 0301 	mvn.w	r3, #1
   36ae6:	d107      	bne.n	36af8 <bt_att_send+0x72>
   36ae8:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   36aea:	2c00      	cmp	r4, #0
   36aec:	d0ec      	beq.n	36ac8 <bt_att_send+0x42>
   36aee:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
   36af2:	b922      	cbnz	r2, 36afe <bt_att_send+0x78>
		if (err == -ENOENT && prev &&
   36af4:	3302      	adds	r3, #2
   36af6:	d0e9      	beq.n	36acc <bt_att_send+0x46>
{
   36af8:	4625      	mov	r5, r4
   36afa:	4614      	mov	r4, r2
   36afc:	e7de      	b.n	36abc <bt_att_send+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   36afe:	3ae0      	subs	r2, #224	; 0xe0
   36b00:	e7f8      	b.n	36af4 <bt_att_send+0x6e>

00036b02 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   36b02:	b510      	push	{r4, lr}
   36b04:	460c      	mov	r4, r1
	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   36b06:	f7e3 fb65 	bl	1a1d4 <att_get>
	if (!att) {
   36b0a:	b160      	cbz	r0, 36b26 <bt_att_req_send+0x24>
	parent->next = child;
   36b0c:	2300      	movs	r3, #0
   36b0e:	6023      	str	r3, [r4, #0]
	return list->tail;
   36b10:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   36b12:	b92b      	cbnz	r3, 36b20 <bt_att_req_send+0x1e>
	list->head = node;
   36b14:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   36b18:	f7ff fe03 	bl	36722 <att_req_send_process>

	return 0;
   36b1c:	2000      	movs	r0, #0
}
   36b1e:	bd10      	pop	{r4, pc}
	parent->next = child;
   36b20:	601c      	str	r4, [r3, #0]
	list->tail = node;
   36b22:	6084      	str	r4, [r0, #8]
}
   36b24:	e7f8      	b.n	36b18 <bt_att_req_send+0x16>
		return -ENOTCONN;
   36b26:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   36b2a:	e7f8      	b.n	36b1e <bt_att_req_send+0x1c>

00036b2c <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   36b2c:	2001      	movs	r0, #1
   36b2e:	4770      	bx	lr

00036b30 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   36b30:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   36b32:	f7e3 fb4f 	bl	1a1d4 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   36b36:	b198      	cbz	r0, 36b60 <bt_att_clear_out_of_sync_sent+0x30>
	return list->head;
   36b38:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   36b3a:	b18b      	cbz	r3, 36b60 <bt_att_clear_out_of_sync_sent+0x30>
   36b3c:	f3bf 8f5b 	dmb	ish
   36b40:	3be0      	subs	r3, #224	; 0xe0
   36b42:	f103 0290 	add.w	r2, r3, #144	; 0x90
   36b46:	e852 0f00 	ldrex	r0, [r2]
   36b4a:	f020 0020 	bic.w	r0, r0, #32
   36b4e:	e842 0100 	strex	r1, r0, [r2]
   36b52:	2900      	cmp	r1, #0
   36b54:	d1f7      	bne.n	36b46 <bt_att_clear_out_of_sync_sent+0x16>
   36b56:	f3bf 8f5b 	dmb	ish
	return node->next;
   36b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   36b5e:	e7ec      	b.n	36b3a <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   36b60:	bd08      	pop	{r3, pc}

00036b62 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   36b62:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   36b64:	2104      	movs	r1, #4
   36b66:	f7ff fb4f 	bl	36208 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   36b6a:	b128      	cbz	r0, 36b78 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   36b6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   36b70:	2105      	movs	r1, #5
   36b72:	308c      	adds	r0, #140	; 0x8c
   36b74:	f7ff bb75 	b.w	36262 <atomic_test_bit>
}
   36b78:	bd08      	pop	{r3, pc}

00036b7a <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   36b7a:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   36b7c:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   36b80:	2201      	movs	r2, #1
   36b82:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   36b84:	7403      	strb	r3, [r0, #16]
}
   36b86:	4770      	bx	lr

00036b88 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   36b88:	6010      	str	r0, [r2, #0]
}
   36b8a:	2000      	movs	r0, #0
   36b8c:	4770      	bx	lr

00036b8e <gatt_ccc_changed>:
{
   36b8e:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   36b90:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   36b92:	895a      	ldrh	r2, [r3, #10]
   36b94:	428a      	cmp	r2, r1
   36b96:	d003      	beq.n	36ba0 <gatt_ccc_changed+0x12>
		ccc->value = value;
   36b98:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   36b9a:	68db      	ldr	r3, [r3, #12]
   36b9c:	b103      	cbz	r3, 36ba0 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   36b9e:	4718      	bx	r3
}
   36ba0:	4770      	bx	lr

00036ba2 <gatt_indicate_rsp>:
{
   36ba2:	b510      	push	{r4, lr}
   36ba4:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   36ba6:	68a3      	ldr	r3, [r4, #8]
{
   36ba8:	460a      	mov	r2, r1
	if (params->func) {
   36baa:	b10b      	cbz	r3, 36bb0 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   36bac:	4621      	mov	r1, r4
   36bae:	4798      	blx	r3
	params->_ref--;
   36bb0:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   36bb2:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   36bb4:	3b01      	subs	r3, #1
   36bb6:	b2db      	uxtb	r3, r3
   36bb8:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   36bba:	b122      	cbz	r2, 36bc6 <gatt_indicate_rsp+0x24>
   36bbc:	b91b      	cbnz	r3, 36bc6 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   36bbe:	4620      	mov	r0, r4
}
   36bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   36bc4:	4710      	bx	r2
}
   36bc6:	bd10      	pop	{r4, pc}

00036bc8 <match_uuid>:
	data->attr = attr;
   36bc8:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   36bca:	8091      	strh	r1, [r2, #4]
}
   36bcc:	2000      	movs	r0, #0
   36bce:	4770      	bx	lr

00036bd0 <ccc_set_cb>:
}
   36bd0:	2000      	movs	r0, #0
   36bd2:	4770      	bx	lr

00036bd4 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   36bd4:	2207      	movs	r2, #7
   36bd6:	f7fe bcae 	b.w	35536 <memcpy>

00036bda <write_name>:
{
   36bda:	b570      	push	{r4, r5, r6, lr}
   36bdc:	b092      	sub	sp, #72	; 0x48
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   36bde:	2100      	movs	r1, #0
{
   36be0:	f8bd 5058 	ldrh.w	r5, [sp, #88]	; 0x58
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   36be4:	9101      	str	r1, [sp, #4]
{
   36be6:	4616      	mov	r6, r2
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   36be8:	a802      	add	r0, sp, #8
   36bea:	223d      	movs	r2, #61	; 0x3d
{
   36bec:	461c      	mov	r4, r3
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   36bee:	f7fe fcad 	bl	3554c <memset>
	if (offset >= sizeof(value)) {
   36bf2:	2d40      	cmp	r5, #64	; 0x40
   36bf4:	d80d      	bhi.n	36c12 <write_name+0x38>
	if (offset + len >= sizeof(value)) {
   36bf6:	4425      	add	r5, r4
   36bf8:	2d40      	cmp	r5, #64	; 0x40
   36bfa:	dc0d      	bgt.n	36c18 <write_name+0x3e>
	memcpy(value, buf, len);
   36bfc:	4622      	mov	r2, r4
   36bfe:	4631      	mov	r1, r6
   36c00:	a801      	add	r0, sp, #4
   36c02:	f7fe fc98 	bl	35536 <memcpy>
	bt_set_name(value);
   36c06:	a801      	add	r0, sp, #4
   36c08:	f7e0 fdc8 	bl	1779c <bt_set_name>
}
   36c0c:	4620      	mov	r0, r4
   36c0e:	b012      	add	sp, #72	; 0x48
   36c10:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   36c12:	f06f 0406 	mvn.w	r4, #6
   36c16:	e7f9      	b.n	36c0c <write_name+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   36c18:	f06f 040c 	mvn.w	r4, #12
   36c1c:	e7f6      	b.n	36c0c <write_name+0x32>

00036c1e <gen_hash_m>:
{
   36c1e:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   36c20:	6807      	ldr	r7, [r0, #0]
   36c22:	783d      	ldrb	r5, [r7, #0]
{
   36c24:	b089      	sub	sp, #36	; 0x24
   36c26:	4606      	mov	r6, r0
   36c28:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   36c2a:	b9dd      	cbnz	r5, 36c64 <gen_hash_m+0x46>
	switch (u16->val) {
   36c2c:	887b      	ldrh	r3, [r7, #2]
   36c2e:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   36c32:	d004      	beq.n	36c3e <gen_hash_m+0x20>
   36c34:	d810      	bhi.n	36c58 <gen_hash_m+0x3a>
   36c36:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   36c3a:	2b03      	cmp	r3, #3
   36c3c:	d812      	bhi.n	36c64 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   36c3e:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   36c42:	2202      	movs	r2, #2
   36c44:	f10d 010a 	add.w	r1, sp, #10
   36c48:	4620      	mov	r0, r4
   36c4a:	f7fe faee 	bl	3522a <tc_cmac_update>
   36c4e:	b968      	cbnz	r0, 36c6c <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   36c50:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   36c54:	65a2      	str	r2, [r4, #88]	; 0x58
   36c56:	e006      	b.n	36c66 <gen_hash_m+0x48>
	switch (u16->val) {
   36c58:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   36c5c:	33ff      	adds	r3, #255	; 0xff
   36c5e:	b29b      	uxth	r3, r3
   36c60:	2b04      	cmp	r3, #4
   36c62:	d91e      	bls.n	36ca2 <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   36c64:	2501      	movs	r5, #1
}
   36c66:	4628      	mov	r0, r5
   36c68:	b009      	add	sp, #36	; 0x24
   36c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   36c6c:	887b      	ldrh	r3, [r7, #2]
   36c6e:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   36c72:	2202      	movs	r2, #2
   36c74:	f10d 010a 	add.w	r1, sp, #10
   36c78:	4620      	mov	r0, r4
   36c7a:	f7fe fad6 	bl	3522a <tc_cmac_update>
   36c7e:	2800      	cmp	r0, #0
   36c80:	d0e6      	beq.n	36c50 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   36c82:	2000      	movs	r0, #0
   36c84:	9000      	str	r0, [sp, #0]
   36c86:	aa03      	add	r2, sp, #12
   36c88:	6877      	ldr	r7, [r6, #4]
   36c8a:	2313      	movs	r3, #19
   36c8c:	4631      	mov	r1, r6
   36c8e:	47b8      	blx	r7
		if (len < 0) {
   36c90:	1e02      	subs	r2, r0, #0
   36c92:	dbdf      	blt.n	36c54 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   36c94:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   36c96:	4620      	mov	r0, r4
   36c98:	f7fe fac7 	bl	3522a <tc_cmac_update>
   36c9c:	2800      	cmp	r0, #0
   36c9e:	d1e1      	bne.n	36c64 <gen_hash_m+0x46>
   36ca0:	e7d6      	b.n	36c50 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   36ca2:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   36ca6:	2202      	movs	r2, #2
   36ca8:	f10d 010a 	add.w	r1, sp, #10
   36cac:	4620      	mov	r0, r4
   36cae:	f7fe fabc 	bl	3522a <tc_cmac_update>
   36cb2:	2800      	cmp	r0, #0
   36cb4:	d0cc      	beq.n	36c50 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   36cb6:	887b      	ldrh	r3, [r7, #2]
   36cb8:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   36cbc:	2202      	movs	r2, #2
   36cbe:	f10d 010a 	add.w	r1, sp, #10
   36cc2:	e7e8      	b.n	36c96 <gen_hash_m+0x78>

00036cc4 <bt_addr_le_eq>:
{
   36cc4:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   36cc6:	2207      	movs	r2, #7
   36cc8:	f7fe fc25 	bl	35516 <memcmp>
}
   36ccc:	fab0 f080 	clz	r0, r0
   36cd0:	0940      	lsrs	r0, r0, #5
   36cd2:	bd08      	pop	{r3, pc}

00036cd4 <ccc_find_cfg>:
{
   36cd4:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   36cd6:	7803      	ldrb	r3, [r0, #0]
   36cd8:	4293      	cmp	r3, r2
{
   36cda:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   36cdc:	d105      	bne.n	36cea <ccc_find_cfg+0x16>
		    bt_addr_le_eq(&ccc->cfg[i].peer, addr)) {
   36cde:	3001      	adds	r0, #1
   36ce0:	f7ff fff0 	bl	36cc4 <bt_addr_le_eq>
		if (id == ccc->cfg[i].id &&
   36ce4:	b108      	cbz	r0, 36cea <ccc_find_cfg+0x16>
			return &ccc->cfg[i];
   36ce6:	4620      	mov	r0, r4
}
   36ce8:	bd10      	pop	{r4, pc}
	return NULL;
   36cea:	2000      	movs	r0, #0
   36cec:	e7fc      	b.n	36ce8 <ccc_find_cfg+0x14>

00036cee <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   36cee:	f3bf 8f5b 	dmb	ish
   36cf2:	6800      	ldr	r0, [r0, #0]
   36cf4:	f3bf 8f5b 	dmb	ish
}
   36cf8:	4770      	bx	lr

00036cfa <atomic_or>:
{
   36cfa:	b510      	push	{r4, lr}
   36cfc:	4603      	mov	r3, r0
}
   36cfe:	f3bf 8f5b 	dmb	ish
   36d02:	e853 0f00 	ldrex	r0, [r3]
   36d06:	ea40 0201 	orr.w	r2, r0, r1
   36d0a:	e843 2400 	strex	r4, r2, [r3]
   36d0e:	2c00      	cmp	r4, #0
   36d10:	d1f7      	bne.n	36d02 <atomic_or+0x8>
   36d12:	f3bf 8f5b 	dmb	ish
   36d16:	bd10      	pop	{r4, pc}

00036d18 <atomic_and>:
{
   36d18:	b510      	push	{r4, lr}
   36d1a:	4603      	mov	r3, r0
}
   36d1c:	f3bf 8f5b 	dmb	ish
   36d20:	e853 0f00 	ldrex	r0, [r3]
   36d24:	ea00 0201 	and.w	r2, r0, r1
   36d28:	e843 2400 	strex	r4, r2, [r3]
   36d2c:	2c00      	cmp	r4, #0
   36d2e:	d1f7      	bne.n	36d20 <atomic_and+0x8>
   36d30:	f3bf 8f5b 	dmb	ish
   36d34:	bd10      	pop	{r4, pc}

00036d36 <z_log_msg_static_create.constprop.0>:
   36d36:	2300      	movs	r3, #0
   36d38:	f7dc ba1c 	b.w	13174 <z_impl_z_log_msg_static_create>

00036d3c <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   36d3c:	2a02      	cmp	r2, #2
{
   36d3e:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   36d40:	d108      	bne.n	36d54 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   36d42:	2300      	movs	r3, #0
   36d44:	f100 0188 	add.w	r1, r0, #136	; 0x88
   36d48:	461a      	mov	r2, r3
   36d4a:	7a00      	ldrb	r0, [r0, #8]
   36d4c:	f7e4 fcfa 	bl	1b744 <sc_save>
}
   36d50:	2002      	movs	r0, #2
   36d52:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   36d54:	f7e4 ff20 	bl	1bb98 <sc_clear>
   36d58:	e7fa      	b.n	36d50 <sc_ccc_cfg_write+0x14>

00036d5a <read_appearance>:
{
   36d5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   36d5c:	4615      	mov	r5, r2
   36d5e:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   36d62:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   36d64:	f7fe fe39 	bl	359da <bt_get_appearance>
	if (offset > value_len) {
   36d68:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   36d6a:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   36d6e:	d80e      	bhi.n	36d8e <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   36d70:	f1c6 0402 	rsb	r4, r6, #2
   36d74:	42bc      	cmp	r4, r7
   36d76:	bfa8      	it	ge
   36d78:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   36d7a:	f10d 0306 	add.w	r3, sp, #6
   36d7e:	4622      	mov	r2, r4
   36d80:	1999      	adds	r1, r3, r6
   36d82:	4628      	mov	r0, r5
   36d84:	f7fe fbd7 	bl	35536 <memcpy>
}
   36d88:	4620      	mov	r0, r4
   36d8a:	b003      	add	sp, #12
   36d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   36d8e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   36d92:	e7f9      	b.n	36d88 <read_appearance+0x2e>

00036d94 <read_name>:
{
   36d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36d98:	4698      	mov	r8, r3
   36d9a:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   36d9e:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   36da0:	f7e0 fd3c 	bl	1781c <bt_get_name>
   36da4:	4607      	mov	r7, r0
				 strlen(name));
   36da6:	f7fe fb86 	bl	354b6 <strlen>
	if (offset > value_len) {
   36daa:	b283      	uxth	r3, r0
   36dac:	42b3      	cmp	r3, r6
   36dae:	d30c      	bcc.n	36dca <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   36db0:	1b9c      	subs	r4, r3, r6
   36db2:	4544      	cmp	r4, r8
   36db4:	bfa8      	it	ge
   36db6:	4644      	movge	r4, r8
   36db8:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   36dba:	4622      	mov	r2, r4
   36dbc:	19b9      	adds	r1, r7, r6
   36dbe:	4628      	mov	r0, r5
   36dc0:	f7fe fbb9 	bl	35536 <memcpy>
}
   36dc4:	4620      	mov	r0, r4
   36dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   36dca:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   36dce:	e7f9      	b.n	36dc4 <read_name+0x30>

00036dd0 <cf_read>:
{
   36dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   36dd2:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   36dd4:	2300      	movs	r3, #0
{
   36dd6:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   36dda:	f88d 3004 	strb.w	r3, [sp, #4]
{
   36dde:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   36de0:	f7e4 fab4 	bl	1b34c <find_cf_cfg>
	if (cfg) {
   36de4:	b128      	cbz	r0, 36df2 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   36de6:	f100 0108 	add.w	r1, r0, #8
   36dea:	2201      	movs	r2, #1
   36dec:	a801      	add	r0, sp, #4
   36dee:	f7fe fba2 	bl	35536 <memcpy>
	if (offset > value_len) {
   36df2:	2e01      	cmp	r6, #1
   36df4:	d80d      	bhi.n	36e12 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   36df6:	f1c6 0401 	rsb	r4, r6, #1
   36dfa:	42bc      	cmp	r4, r7
   36dfc:	bfa8      	it	ge
   36dfe:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   36e00:	ab01      	add	r3, sp, #4
   36e02:	4622      	mov	r2, r4
   36e04:	1999      	adds	r1, r3, r6
   36e06:	4628      	mov	r0, r5
   36e08:	f7fe fb95 	bl	35536 <memcpy>
}
   36e0c:	4620      	mov	r0, r4
   36e0e:	b003      	add	sp, #12
   36e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   36e12:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   36e16:	e7f9      	b.n	36e0c <cf_read+0x3c>

00036e18 <bt_gatt_attr_read_service>:
{
   36e18:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   36e1a:	68c9      	ldr	r1, [r1, #12]
{
   36e1c:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   36e1e:	780a      	ldrb	r2, [r1, #0]
{
   36e20:	461c      	mov	r4, r3
   36e22:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   36e26:	b992      	cbnz	r2, 36e4e <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   36e28:	884a      	ldrh	r2, [r1, #2]
   36e2a:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   36e2e:	2b02      	cmp	r3, #2
   36e30:	d818      	bhi.n	36e64 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   36e32:	f1c3 0202 	rsb	r2, r3, #2
   36e36:	4294      	cmp	r4, r2
   36e38:	bfa8      	it	ge
   36e3a:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   36e3c:	4622      	mov	r2, r4
   36e3e:	f10d 0106 	add.w	r1, sp, #6
   36e42:	4419      	add	r1, r3
   36e44:	f7fe fb77 	bl	35536 <memcpy>
}
   36e48:	4620      	mov	r0, r4
   36e4a:	b002      	add	sp, #8
   36e4c:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   36e4e:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   36e50:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   36e54:	d806      	bhi.n	36e64 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   36e56:	f1c3 0210 	rsb	r2, r3, #16
   36e5a:	4294      	cmp	r4, r2
   36e5c:	bfa8      	it	ge
   36e5e:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   36e60:	4622      	mov	r2, r4
   36e62:	e7ee      	b.n	36e42 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   36e64:	f06f 0406 	mvn.w	r4, #6
   36e68:	e7ee      	b.n	36e48 <bt_gatt_attr_read_service+0x30>

00036e6a <bt_gatt_attr_read_ccc>:
{
   36e6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   36e6c:	68c9      	ldr	r1, [r1, #12]
{
   36e6e:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   36e72:	4615      	mov	r5, r2
   36e74:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   36e76:	f7e4 fab9 	bl	1b3ec <find_ccc_cfg>
	if (cfg) {
   36e7a:	b100      	cbz	r0, 36e7e <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   36e7c:	8900      	ldrh	r0, [r0, #8]
   36e7e:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   36e82:	2e02      	cmp	r6, #2
   36e84:	d80e      	bhi.n	36ea4 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   36e86:	f1c6 0402 	rsb	r4, r6, #2
   36e8a:	42bc      	cmp	r4, r7
   36e8c:	bfa8      	it	ge
   36e8e:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   36e90:	f10d 0306 	add.w	r3, sp, #6
   36e94:	4622      	mov	r2, r4
   36e96:	1999      	adds	r1, r3, r6
   36e98:	4628      	mov	r0, r5
   36e9a:	f7fe fb4c 	bl	35536 <memcpy>
}
   36e9e:	4620      	mov	r0, r4
   36ea0:	b003      	add	sp, #12
   36ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   36ea4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   36ea8:	e7f9      	b.n	36e9e <bt_gatt_attr_read_ccc+0x34>

00036eaa <sc_restore_rsp>:
{
   36eaa:	b538      	push	{r3, r4, r5, lr}
   36eac:	4604      	mov	r4, r0
   36eae:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   36eb0:	f7ff fe3c 	bl	36b2c <bt_att_fixed_chan_only>
   36eb4:	b150      	cbz	r0, 36ecc <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   36eb6:	4620      	mov	r0, r4
   36eb8:	f7e4 fa48 	bl	1b34c <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   36ebc:	b130      	cbz	r0, 36ecc <sc_restore_rsp+0x22>
   36ebe:	7a03      	ldrb	r3, [r0, #8]
   36ec0:	07db      	lsls	r3, r3, #31
   36ec2:	d503      	bpl.n	36ecc <sc_restore_rsp+0x22>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   36ec4:	2101      	movs	r1, #1
   36ec6:	300c      	adds	r0, #12
   36ec8:	f7ff ff17 	bl	36cfa <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   36ecc:	b985      	cbnz	r5, 36ef0 <sc_restore_rsp+0x46>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   36ece:	7a20      	ldrb	r0, [r4, #8]
   36ed0:	f104 0188 	add.w	r1, r4, #136	; 0x88
   36ed4:	f7e4 fa68 	bl	1b3a8 <find_sc_cfg>
		if (sc_cfg) {
   36ed8:	4604      	mov	r4, r0
   36eda:	b148      	cbz	r0, 36ef0 <sc_restore_rsp+0x46>
	memset(&cfg->data, 0, sizeof(cfg->data));
   36edc:	4629      	mov	r1, r5
   36ede:	2204      	movs	r2, #4
   36ee0:	3008      	adds	r0, #8
   36ee2:	f7fe fb33 	bl	3554c <memset>
		sc_store(cfg);
   36ee6:	4620      	mov	r0, r4
}
   36ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   36eec:	f7e4 bbf2 	b.w	1b6d4 <sc_store>
}
   36ef0:	bd38      	pop	{r3, r4, r5, pc}

00036ef2 <bt_gatt_attr_read>:
{
   36ef2:	b510      	push	{r4, lr}
   36ef4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   36ef8:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   36efc:	42a1      	cmp	r1, r4
{
   36efe:	4610      	mov	r0, r2
	if (offset > value_len) {
   36f00:	d80b      	bhi.n	36f1a <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   36f02:	1a64      	subs	r4, r4, r1
   36f04:	429c      	cmp	r4, r3
   36f06:	bfa8      	it	ge
   36f08:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   36f0a:	9b03      	ldr	r3, [sp, #12]
   36f0c:	b2a4      	uxth	r4, r4
   36f0e:	4622      	mov	r2, r4
   36f10:	4419      	add	r1, r3
   36f12:	f7fe fb10 	bl	35536 <memcpy>
}
   36f16:	4620      	mov	r0, r4
   36f18:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   36f1a:	f06f 0406 	mvn.w	r4, #6
   36f1e:	e7fa      	b.n	36f16 <bt_gatt_attr_read+0x24>

00036f20 <bt_gatt_attr_value_handle>:
{
   36f20:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   36f22:	4604      	mov	r4, r0
   36f24:	b910      	cbnz	r0, 36f2c <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   36f26:	2000      	movs	r0, #0
}
   36f28:	b002      	add	sp, #8
   36f2a:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   36f2c:	2300      	movs	r3, #0
   36f2e:	f88d 3004 	strb.w	r3, [sp, #4]
   36f32:	6800      	ldr	r0, [r0, #0]
   36f34:	f642 0303 	movw	r3, #10243	; 0x2803
   36f38:	a901      	add	r1, sp, #4
   36f3a:	f8ad 3006 	strh.w	r3, [sp, #6]
   36f3e:	f7fe fbf2 	bl	35726 <bt_uuid_cmp>
   36f42:	2800      	cmp	r0, #0
   36f44:	d1ef      	bne.n	36f26 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   36f46:	68e3      	ldr	r3, [r4, #12]
   36f48:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   36f4a:	2800      	cmp	r0, #0
   36f4c:	d1ec      	bne.n	36f28 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   36f4e:	4620      	mov	r0, r4
   36f50:	f7e5 f804 	bl	1bf5c <bt_gatt_attr_get_handle>
   36f54:	3001      	adds	r0, #1
   36f56:	b280      	uxth	r0, r0
	return handle;
   36f58:	e7e6      	b.n	36f28 <bt_gatt_attr_value_handle+0x8>

00036f5a <bt_gatt_attr_read_chrc>:
{
   36f5a:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   36f5c:	68cc      	ldr	r4, [r1, #12]
{
   36f5e:	b087      	sub	sp, #28
   36f60:	4608      	mov	r0, r1
   36f62:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   36f64:	79a3      	ldrb	r3, [r4, #6]
   36f66:	f88d 3004 	strb.w	r3, [sp, #4]
{
   36f6a:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   36f6e:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   36f70:	f7ff ffd6 	bl	36f20 <bt_gatt_attr_value_handle>
   36f74:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   36f78:	6821      	ldr	r1, [r4, #0]
   36f7a:	780b      	ldrb	r3, [r1, #0]
   36f7c:	b99b      	cbnz	r3, 36fa6 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   36f7e:	884b      	ldrh	r3, [r1, #2]
   36f80:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   36f84:	2405      	movs	r4, #5
	if (offset > value_len) {
   36f86:	42b4      	cmp	r4, r6
   36f88:	d315      	bcc.n	36fb6 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   36f8a:	1ba4      	subs	r4, r4, r6
   36f8c:	42bc      	cmp	r4, r7
   36f8e:	bfa8      	it	ge
   36f90:	463c      	movge	r4, r7
   36f92:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   36f94:	ab01      	add	r3, sp, #4
   36f96:	4622      	mov	r2, r4
   36f98:	1999      	adds	r1, r3, r6
   36f9a:	4628      	mov	r0, r5
   36f9c:	f7fe facb 	bl	35536 <memcpy>
}
   36fa0:	4620      	mov	r0, r4
   36fa2:	b007      	add	sp, #28
   36fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   36fa6:	2210      	movs	r2, #16
   36fa8:	3101      	adds	r1, #1
   36faa:	f10d 0007 	add.w	r0, sp, #7
   36fae:	f7fe fac2 	bl	35536 <memcpy>
		value_len += 16U;
   36fb2:	2413      	movs	r4, #19
   36fb4:	e7e7      	b.n	36f86 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   36fb6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   36fba:	e7f1      	b.n	36fa0 <bt_gatt_attr_read_chrc+0x46>

00036fbc <bt_gatt_foreach_attr>:
{
   36fbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   36fbe:	e9cd 2301 	strd	r2, r3, [sp, #4]
   36fc2:	2300      	movs	r3, #0
   36fc4:	9300      	str	r3, [sp, #0]
   36fc6:	461a      	mov	r2, r3
   36fc8:	f7e4 fff8 	bl	1bfbc <bt_gatt_foreach_attr_type>
}
   36fcc:	b005      	add	sp, #20
   36fce:	f85d fb04 	ldr.w	pc, [sp], #4

00036fd2 <bt_gatt_check_perm>:
{
   36fd2:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   36fd4:	07d4      	lsls	r4, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   36fd6:	8a4b      	ldrh	r3, [r1, #18]
{
   36fd8:	4605      	mov	r5, r0
	if ((mask & BT_GATT_PERM_READ) &&
   36fda:	d504      	bpl.n	36fe6 <bt_gatt_check_perm+0x14>
   36fdc:	f013 0f95 	tst.w	r3, #149	; 0x95
   36fe0:	d027      	beq.n	37032 <bt_gatt_check_perm+0x60>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   36fe2:	6848      	ldr	r0, [r1, #4]
   36fe4:	b328      	cbz	r0, 37032 <bt_gatt_check_perm+0x60>
	if ((mask & BT_GATT_PERM_WRITE) &&
   36fe6:	0790      	lsls	r0, r2, #30
   36fe8:	d504      	bpl.n	36ff4 <bt_gatt_check_perm+0x22>
   36fea:	f413 7f95 	tst.w	r3, #298	; 0x12a
   36fee:	d022      	beq.n	37036 <bt_gatt_check_perm+0x64>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   36ff0:	6889      	ldr	r1, [r1, #8]
   36ff2:	b301      	cbz	r1, 37036 <bt_gatt_check_perm+0x64>
	mask &= attr->perm;
   36ff4:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   36ff8:	f414 7fc0 	tst.w	r4, #384	; 0x180
   36ffc:	d007      	beq.n	3700e <bt_gatt_check_perm+0x3c>
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   36ffe:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   37002:	b90b      	cbnz	r3, 37008 <bt_gatt_check_perm+0x36>
			return BT_ATT_ERR_AUTHENTICATION;
   37004:	2005      	movs	r0, #5
}
   37006:	bd38      	pop	{r3, r4, r5, pc}
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   37008:	7b5b      	ldrb	r3, [r3, #13]
   3700a:	06db      	lsls	r3, r3, #27
   3700c:	d5fa      	bpl.n	37004 <bt_gatt_check_perm+0x32>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   3700e:	f014 0f30 	tst.w	r4, #48	; 0x30
   37012:	d108      	bne.n	37026 <bt_gatt_check_perm+0x54>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   37014:	f014 000c 	ands.w	r0, r4, #12
   37018:	d0f5      	beq.n	37006 <bt_gatt_check_perm+0x34>
		if (!conn->encrypt) {
   3701a:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   3701c:	2b00      	cmp	r3, #0
   3701e:	bf14      	ite	ne
   37020:	2000      	movne	r0, #0
   37022:	200f      	moveq	r0, #15
   37024:	e7ef      	b.n	37006 <bt_gatt_check_perm+0x34>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   37026:	4628      	mov	r0, r5
   37028:	f7ff f812 	bl	36050 <bt_conn_get_security>
   3702c:	2802      	cmp	r0, #2
   3702e:	d8f1      	bhi.n	37014 <bt_gatt_check_perm+0x42>
   37030:	e7e8      	b.n	37004 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   37032:	2002      	movs	r0, #2
   37034:	e7e7      	b.n	37006 <bt_gatt_check_perm+0x34>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   37036:	2003      	movs	r0, #3
   37038:	e7e5      	b.n	37006 <bt_gatt_check_perm+0x34>

0003703a <bt_gatt_is_subscribed>:
{
   3703a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   3703e:	7b43      	ldrb	r3, [r0, #13]
   37040:	2b07      	cmp	r3, #7
{
   37042:	4605      	mov	r5, r0
   37044:	460c      	mov	r4, r1
   37046:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   37048:	d110      	bne.n	3706c <bt_gatt_is_subscribed+0x32>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   3704a:	2300      	movs	r3, #0
   3704c:	f88d 300c 	strb.w	r3, [sp, #12]
   37050:	6820      	ldr	r0, [r4, #0]
   37052:	f642 0303 	movw	r3, #10243	; 0x2803
   37056:	a903      	add	r1, sp, #12
   37058:	f8ad 300e 	strh.w	r3, [sp, #14]
   3705c:	f7fe fb63 	bl	35726 <bt_uuid_cmp>
   37060:	b960      	cbnz	r0, 3707c <bt_gatt_is_subscribed+0x42>
		if (!(chrc->properties &
   37062:	68e3      	ldr	r3, [r4, #12]
   37064:	799b      	ldrb	r3, [r3, #6]
   37066:	f013 0f30 	tst.w	r3, #48	; 0x30
   3706a:	d103      	bne.n	37074 <bt_gatt_is_subscribed+0x3a>
		return false;
   3706c:	2000      	movs	r0, #0
}
   3706e:	b004      	add	sp, #16
   37070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   37074:	4620      	mov	r0, r4
   37076:	f7e5 f98d 	bl	1c394 <bt_gatt_attr_next>
   3707a:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   3707c:	2300      	movs	r3, #0
   3707e:	6820      	ldr	r0, [r4, #0]
   37080:	f88d 300c 	strb.w	r3, [sp, #12]
   37084:	a903      	add	r1, sp, #12
   37086:	f642 1302 	movw	r3, #10498	; 0x2902
   3708a:	f8ad 300e 	strh.w	r3, [sp, #14]
   3708e:	f7fe fb4a 	bl	35726 <bt_uuid_cmp>
   37092:	b118      	cbz	r0, 3709c <bt_gatt_is_subscribed+0x62>
		attr = bt_gatt_attr_next(attr);
   37094:	4620      	mov	r0, r4
   37096:	f7e5 f97d 	bl	1c394 <bt_gatt_attr_next>
   3709a:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   3709c:	2600      	movs	r6, #0
   3709e:	f642 1802 	movw	r8, #10498	; 0x2902
   370a2:	6820      	ldr	r0, [r4, #0]
   370a4:	f88d 6000 	strb.w	r6, [sp]
   370a8:	4669      	mov	r1, sp
   370aa:	f8ad 8002 	strh.w	r8, [sp, #2]
   370ae:	f7fe fb3a 	bl	35726 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   370b2:	b9d8      	cbnz	r0, 370ec <bt_gatt_is_subscribed+0xb2>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   370b4:	2300      	movs	r3, #0
   370b6:	6820      	ldr	r0, [r4, #0]
   370b8:	f88d 300c 	strb.w	r3, [sp, #12]
   370bc:	a903      	add	r1, sp, #12
   370be:	f642 1302 	movw	r3, #10498	; 0x2902
   370c2:	f8ad 300e 	strh.w	r3, [sp, #14]
   370c6:	f7fe fb2e 	bl	35726 <bt_uuid_cmp>
   370ca:	2800      	cmp	r0, #0
   370cc:	d1ce      	bne.n	3706c <bt_gatt_is_subscribed+0x32>
	ccc = attr->user_data;
   370ce:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   370d0:	4622      	mov	r2, r4
   370d2:	4628      	mov	r0, r5
   370d4:	f812 1b01 	ldrb.w	r1, [r2], #1
   370d8:	f7fe ffbc 	bl	36054 <bt_conn_is_peer_addr_le>
   370dc:	2800      	cmp	r0, #0
   370de:	d0c5      	beq.n	3706c <bt_gatt_is_subscribed+0x32>
   370e0:	8923      	ldrh	r3, [r4, #8]
   370e2:	421f      	tst	r7, r3
   370e4:	bf14      	ite	ne
   370e6:	2001      	movne	r0, #1
   370e8:	2000      	moveq	r0, #0
   370ea:	e7c0      	b.n	3706e <bt_gatt_is_subscribed+0x34>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   370ec:	6820      	ldr	r0, [r4, #0]
   370ee:	f88d 6004 	strb.w	r6, [sp, #4]
   370f2:	f642 0303 	movw	r3, #10243	; 0x2803
   370f6:	a901      	add	r1, sp, #4
   370f8:	f8ad 3006 	strh.w	r3, [sp, #6]
   370fc:	f7fe fb13 	bl	35726 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   37100:	2800      	cmp	r0, #0
   37102:	d0d7      	beq.n	370b4 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   37104:	6820      	ldr	r0, [r4, #0]
   37106:	f88d 6008 	strb.w	r6, [sp, #8]
   3710a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   3710e:	a902      	add	r1, sp, #8
   37110:	f8ad 300a 	strh.w	r3, [sp, #10]
   37114:	f7fe fb07 	bl	35726 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   37118:	2800      	cmp	r0, #0
   3711a:	d0cb      	beq.n	370b4 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   3711c:	6820      	ldr	r0, [r4, #0]
   3711e:	f88d 600c 	strb.w	r6, [sp, #12]
   37122:	f642 0301 	movw	r3, #10241	; 0x2801
   37126:	a903      	add	r1, sp, #12
   37128:	f8ad 300e 	strh.w	r3, [sp, #14]
   3712c:	f7fe fafb 	bl	35726 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   37130:	2800      	cmp	r0, #0
   37132:	d0bf      	beq.n	370b4 <bt_gatt_is_subscribed+0x7a>
		attr = bt_gatt_attr_next(attr);
   37134:	4620      	mov	r0, r4
   37136:	f7e5 f92d 	bl	1c394 <bt_gatt_attr_next>
		if (!attr) {
   3713a:	4604      	mov	r4, r0
   3713c:	2800      	cmp	r0, #0
   3713e:	d1b0      	bne.n	370a2 <bt_gatt_is_subscribed+0x68>
   37140:	e794      	b.n	3706c <bt_gatt_is_subscribed+0x32>

00037142 <bt_gatt_change_aware>:
{
   37142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37144:	4605      	mov	r5, r0
   37146:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   37148:	f7e4 f900 	bl	1b34c <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   3714c:	b1d0      	cbz	r0, 37184 <bt_gatt_change_aware+0x42>
   3714e:	7a03      	ldrb	r3, [r0, #8]
   37150:	07db      	lsls	r3, r3, #31
   37152:	d517      	bpl.n	37184 <bt_gatt_change_aware+0x42>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   37154:	f100 040c 	add.w	r4, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   37158:	4620      	mov	r0, r4
   3715a:	f7ff fdc8 	bl	36cee <atomic_get>
   3715e:	f010 0601 	ands.w	r6, r0, #1
   37162:	d10f      	bne.n	37184 <bt_gatt_change_aware+0x42>
	if (!req) {
   37164:	b17f      	cbz	r7, 37186 <bt_gatt_change_aware+0x44>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   37166:	f06f 0102 	mvn.w	r1, #2
   3716a:	4620      	mov	r0, r4
   3716c:	f7ff fdd4 	bl	36d18 <atomic_and>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   37170:	f010 0f02 	tst.w	r0, #2
		bt_att_clear_out_of_sync_sent(conn);
   37174:	4628      	mov	r0, r5
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   37176:	d008      	beq.n	3718a <bt_gatt_change_aware+0x48>
		bt_att_clear_out_of_sync_sent(conn);
   37178:	f7ff fcda 	bl	36b30 <bt_att_clear_out_of_sync_sent>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   3717c:	2101      	movs	r1, #1
   3717e:	4620      	mov	r0, r4
   37180:	f7ff fdbb 	bl	36cfa <atomic_or>
		return true;
   37184:	2601      	movs	r6, #1
}
   37186:	4630      	mov	r0, r6
   37188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   3718a:	f7ff fccf 	bl	36b2c <bt_att_fixed_chan_only>
   3718e:	2800      	cmp	r0, #0
   37190:	d0f9      	beq.n	37186 <bt_gatt_change_aware+0x44>
   37192:	4628      	mov	r0, r5
   37194:	f7ff fce5 	bl	36b62 <bt_att_out_of_sync_sent_on_fixed>
   37198:	2800      	cmp	r0, #0
   3719a:	d0f4      	beq.n	37186 <bt_gatt_change_aware+0x44>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   3719c:	f06f 0102 	mvn.w	r1, #2
   371a0:	4620      	mov	r0, r4
   371a2:	f7ff fdb9 	bl	36d18 <atomic_and>
		bt_att_clear_out_of_sync_sent(conn);
   371a6:	4628      	mov	r0, r5
   371a8:	e7e6      	b.n	37178 <bt_gatt_change_aware+0x36>

000371aa <ccc_delayed_store>:
{
   371aa:	b570      	push	{r4, r5, r6, lr}
		struct bt_conn *conn = ccc_store->conn_list[i];
   371ac:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   371b0:	4605      	mov	r5, r0
		if (!conn) {
   371b2:	b184      	cbz	r4, 371d6 <ccc_delayed_store+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   371b4:	f104 0688 	add.w	r6, r4, #136	; 0x88
   371b8:	7a20      	ldrb	r0, [r4, #8]
   371ba:	4631      	mov	r1, r6
   371bc:	f7fe fc10 	bl	359e0 <bt_addr_le_is_bonded>
   371c0:	b148      	cbz	r0, 371d6 <ccc_delayed_store+0x2c>
			ccc_store->conn_list[i] = NULL;
   371c2:	2300      	movs	r3, #0
   371c4:	f845 3c08 	str.w	r3, [r5, #-8]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   371c8:	7a20      	ldrb	r0, [r4, #8]
   371ca:	4631      	mov	r1, r6
   371cc:	f7e5 fcd4 	bl	1cb78 <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   371d0:	4620      	mov	r0, r4
   371d2:	f7fe fea6 	bl	35f22 <bt_conn_unref>
}
   371d6:	bd70      	pop	{r4, r5, r6, pc}

000371d8 <sys_mem_swap>:
{
   371d8:	b510      	push	{r4, lr}
   371da:	1843      	adds	r3, r0, r1
   371dc:	eb00 0151 	add.w	r1, r0, r1, lsr #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   371e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
		uint8_t tmp = ((uint8_t *)buf)[i];
   371e4:	7802      	ldrb	r2, [r0, #0]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   371e6:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0; i < (length/2); i++) {
   371ea:	4288      	cmp	r0, r1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   371ec:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   371ee:	d1f7      	bne.n	371e0 <sys_mem_swap+0x8>
	}
}
   371f0:	bd10      	pop	{r4, pc}

000371f2 <smp_pairing_rsp>:
}
   371f2:	2007      	movs	r0, #7
   371f4:	4770      	bx	lr

000371f6 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   371f6:	f3bf 8f5b 	dmb	ish
   371fa:	6800      	ldr	r0, [r0, #0]
   371fc:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   37200:	4108      	asrs	r0, r1
}
   37202:	f000 0001 	and.w	r0, r0, #1
   37206:	4770      	bx	lr

00037208 <update_keys_check>:
{
   37208:	b510      	push	{r4, lr}
   3720a:	4603      	mov	r3, r0
	if (!keys ||
   3720c:	b1d9      	cbz	r1, 37246 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   3720e:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   37210:	f010 0f24 	tst.w	r0, #36	; 0x24
   37214:	d017      	beq.n	37246 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   37216:	7d1a      	ldrb	r2, [r3, #20]
   37218:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   3721a:	7b09      	ldrb	r1, [r1, #12]
   3721c:	42a2      	cmp	r2, r4
   3721e:	bf28      	it	cs
   37220:	4622      	movcs	r2, r4
   37222:	4291      	cmp	r1, r2
   37224:	d901      	bls.n	3722a <update_keys_check+0x22>
			return false;
   37226:	2000      	movs	r0, #0
}
   37228:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   3722a:	0682      	lsls	r2, r0, #26
   3722c:	d404      	bmi.n	37238 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   3722e:	7a18      	ldrb	r0, [r3, #8]
   37230:	3800      	subs	r0, #0
   37232:	bf18      	it	ne
   37234:	2001      	movne	r0, #1
   37236:	e7f7      	b.n	37228 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   37238:	2105      	movs	r1, #5
   3723a:	1d18      	adds	r0, r3, #4
   3723c:	f7ff ffdb 	bl	371f6 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   37240:	2800      	cmp	r0, #0
   37242:	d1f4      	bne.n	3722e <update_keys_check+0x26>
   37244:	e7ef      	b.n	37226 <update_keys_check+0x1e>
	return true;
   37246:	2001      	movs	r0, #1
   37248:	e7ee      	b.n	37228 <update_keys_check+0x20>

0003724a <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   3724a:	2301      	movs	r3, #1
   3724c:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   3724e:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   37250:	f3bf 8f5b 	dmb	ish
   37254:	e850 2f00 	ldrex	r2, [r0]
   37258:	401a      	ands	r2, r3
   3725a:	e840 2100 	strex	r1, r2, [r0]
   3725e:	2900      	cmp	r1, #0
   37260:	d1f8      	bne.n	37254 <atomic_clear_bit+0xa>
   37262:	f3bf 8f5b 	dmb	ish
}
   37266:	4770      	bx	lr

00037268 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   37268:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3726a:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   3726c:	2200      	movs	r2, #0
   3726e:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   37270:	4604      	mov	r4, r0
   37272:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   37274:	460a      	mov	r2, r1
   37276:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   3727a:	2106      	movs	r1, #6
   3727c:	f7fe ffa1 	bl	361c2 <bt_l2cap_send_cb>
   37280:	b128      	cbz	r0, 3728e <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   37282:	4628      	mov	r0, r5
}
   37284:	b003      	add	sp, #12
   37286:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   3728a:	f7f6 bae9 	b.w	2d860 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   3728e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   37292:	2300      	movs	r3, #0
   37294:	f504 70bc 	add.w	r0, r4, #376	; 0x178
}
   37298:	b003      	add	sp, #12
   3729a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   3729e:	f7fa be53 	b.w	31f48 <k_work_reschedule>

000372a2 <z_log_msg_static_create.constprop.0>:
   372a2:	2300      	movs	r3, #0
   372a4:	f7db bf66 	b.w	13174 <z_impl_z_log_msg_static_create>

000372a8 <smp_chan_get>:
{
   372a8:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   372aa:	2106      	movs	r1, #6
   372ac:	f7fe ffac 	bl	36208 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   372b0:	b918      	cbnz	r0, 372ba <smp_chan_get+0x12>
}
   372b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   372b6:	f7e5 be1d 	b.w	1cef4 <smp_chan_get.part.0>
   372ba:	38ec      	subs	r0, #236	; 0xec
   372bc:	bd08      	pop	{r3, pc}

000372be <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   372be:	2301      	movs	r3, #1
   372c0:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   372c2:	f3bf 8f5b 	dmb	ish
   372c6:	e850 2f00 	ldrex	r2, [r0]
   372ca:	431a      	orrs	r2, r3
   372cc:	e840 2100 	strex	r1, r2, [r0]
   372d0:	2900      	cmp	r1, #0
   372d2:	d1f8      	bne.n	372c6 <atomic_set_bit+0x8>
   372d4:	f3bf 8f5b 	dmb	ish
}
   372d8:	4770      	bx	lr

000372da <smp_keypress_notif>:
{
   372da:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   372dc:	210e      	movs	r1, #14
   372de:	f7ff ffee 	bl	372be <atomic_set_bit>
}
   372e2:	2000      	movs	r0, #0
   372e4:	bd08      	pop	{r3, pc}

000372e6 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   372e6:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   372e8:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   372ea:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   372ec:	4628      	mov	r0, r5
   372ee:	2104      	movs	r1, #4
   372f0:	f7ff ff81 	bl	371f6 <atomic_test_bit>
   372f4:	b168      	cbz	r0, 37312 <smp_create_pdu.constprop.0+0x2c>
		timeout = K_NO_WAIT;
   372f6:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   372f8:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   372fa:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   372fc:	4608      	mov	r0, r1
   372fe:	f7fe ff5d 	bl	361bc <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   37302:	4604      	mov	r4, r0
   37304:	b940      	cbnz	r0, 37318 <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   37306:	2104      	movs	r1, #4
   37308:	4628      	mov	r0, r5
   3730a:	f7ff ffd8 	bl	372be <atomic_set_bit>
}
   3730e:	4620      	mov	r0, r4
   37310:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   37312:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   37316:	e7ef      	b.n	372f8 <smp_create_pdu.constprop.0+0x12>
   37318:	2101      	movs	r1, #1
   3731a:	300c      	adds	r0, #12
   3731c:	f000 fba8 	bl	37a70 <net_buf_simple_add>
	hdr->code = op;
   37320:	7006      	strb	r6, [r0, #0]
	return buf;
   37322:	e7f4      	b.n	3730e <smp_create_pdu.constprop.0+0x28>

00037324 <send_pairing_rsp>:
{
   37324:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   37326:	2102      	movs	r1, #2
{
   37328:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   3732a:	f7ff ffdc 	bl	372e6 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   3732e:	4604      	mov	r4, r0
   37330:	b178      	cbz	r0, 37352 <send_pairing_rsp+0x2e>
   37332:	2106      	movs	r1, #6
   37334:	300c      	adds	r0, #12
   37336:	f000 fb9b 	bl	37a70 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   3733a:	2206      	movs	r2, #6
   3733c:	f105 0111 	add.w	r1, r5, #17
   37340:	f7fe f8f9 	bl	35536 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   37344:	4628      	mov	r0, r5
   37346:	2200      	movs	r2, #0
   37348:	4621      	mov	r1, r4
   3734a:	f7ff ff8d 	bl	37268 <smp_send.constprop.0>
	return 0;
   3734e:	2000      	movs	r0, #0
}
   37350:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   37352:	2008      	movs	r0, #8
   37354:	e7fc      	b.n	37350 <send_pairing_rsp+0x2c>

00037356 <smp_send_pairing_random>:
{
   37356:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   37358:	2104      	movs	r1, #4
{
   3735a:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   3735c:	f7ff ffc3 	bl	372e6 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   37360:	4604      	mov	r4, r0
   37362:	b178      	cbz	r0, 37384 <smp_send_pairing_random+0x2e>
   37364:	2110      	movs	r1, #16
   37366:	300c      	adds	r0, #12
   37368:	f000 fb82 	bl	37a70 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   3736c:	2210      	movs	r2, #16
   3736e:	f105 0127 	add.w	r1, r5, #39	; 0x27
   37372:	f7fe f8e0 	bl	35536 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   37376:	4628      	mov	r0, r5
   37378:	2200      	movs	r2, #0
   3737a:	4621      	mov	r1, r4
   3737c:	f7ff ff74 	bl	37268 <smp_send.constprop.0>
	return 0;
   37380:	2000      	movs	r0, #0
}
   37382:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   37384:	2008      	movs	r0, #8
   37386:	e7fc      	b.n	37382 <smp_send_pairing_random+0x2c>

00037388 <smp_dhkey_check>:
{
   37388:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   3738a:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   3738e:	78db      	ldrb	r3, [r3, #3]
   37390:	2b01      	cmp	r3, #1
{
   37392:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   37394:	d114      	bne.n	373c0 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   37396:	68ce      	ldr	r6, [r1, #12]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   37398:	1d05      	adds	r5, r0, #4
   3739a:	2110      	movs	r1, #16
   3739c:	4628      	mov	r0, r5
   3739e:	f7ff ff54 	bl	3724a <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   373a2:	4631      	mov	r1, r6
   373a4:	2210      	movs	r2, #16
   373a6:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   373aa:	f7fe f8c4 	bl	35536 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   373ae:	2107      	movs	r1, #7
   373b0:	4628      	mov	r0, r5
   373b2:	f7ff ff20 	bl	371f6 <atomic_test_bit>
   373b6:	b128      	cbz	r0, 373c4 <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   373b8:	2109      	movs	r1, #9
   373ba:	4628      	mov	r0, r5
   373bc:	f7ff ff7f 	bl	372be <atomic_set_bit>
}
   373c0:	2000      	movs	r0, #0
   373c2:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   373c4:	210a      	movs	r1, #10
   373c6:	4628      	mov	r0, r5
   373c8:	f7ff ff15 	bl	371f6 <atomic_test_bit>
   373cc:	2800      	cmp	r0, #0
   373ce:	d1f3      	bne.n	373b8 <smp_dhkey_check+0x30>
		return compute_and_check_and_send_periph_dhcheck(smp);
   373d0:	4620      	mov	r0, r4
}
   373d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   373d6:	f7e6 ba39 	b.w	1d84c <compute_and_check_and_send_periph_dhcheck>

000373da <smp_security_request>:
static uint8_t smp_security_request(struct bt_smp *smp, struct net_buf *buf)
   373da:	2007      	movs	r0, #7
   373dc:	4770      	bx	lr

000373de <atomic_test_and_clear_bit>:
{
   373de:	b530      	push	{r4, r5, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   373e0:	2301      	movs	r3, #1
   373e2:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   373e6:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   373e8:	f3bf 8f5b 	dmb	ish
   373ec:	e850 3f00 	ldrex	r3, [r0]
   373f0:	ea03 0402 	and.w	r4, r3, r2
   373f4:	e840 4500 	strex	r5, r4, [r0]
   373f8:	2d00      	cmp	r5, #0
   373fa:	d1f7      	bne.n	373ec <atomic_test_and_clear_bit+0xe>
   373fc:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   37400:	4219      	tst	r1, r3
}
   37402:	bf14      	ite	ne
   37404:	2001      	movne	r0, #1
   37406:	2000      	moveq	r0, #0
   37408:	bd30      	pop	{r4, r5, pc}

0003740a <smp_reset>:
{
   3740a:	b538      	push	{r3, r4, r5, lr}
   3740c:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   3740e:	1d03      	adds	r3, r0, #4
   37410:	2500      	movs	r5, #0
   37412:	f3bf 8f5b 	dmb	ish
   37416:	e853 2f00 	ldrex	r2, [r3]
   3741a:	e843 5100 	strex	r1, r5, [r3]
   3741e:	2900      	cmp	r1, #0
   37420:	d1f9      	bne.n	37416 <smp_reset+0xc>
   37422:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   37426:	f504 70bc 	add.w	r0, r4, #376	; 0x178
   3742a:	f001 fb1e 	bl	38a6a <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   3742e:	7225      	strb	r5, [r4, #8]
   37430:	f3bf 8f5b 	dmb	ish
   37434:	e854 3f00 	ldrex	r3, [r4]
   37438:	e844 5200 	strex	r2, r5, [r4]
   3743c:	2a00      	cmp	r2, #0
   3743e:	d1f9      	bne.n	37434 <smp_reset+0x2a>
   37440:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   37444:	4620      	mov	r0, r4
   37446:	2101      	movs	r1, #1
}
   37448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   3744c:	f7ff bf37 	b.w	372be <atomic_set_bit>

00037450 <smp_c1>:
{
   37450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   37454:	b089      	sub	sp, #36	; 0x24
   37456:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   3745a:	4699      	mov	r9, r3
	p1[0] = ia->type;
   3745c:	783b      	ldrb	r3, [r7, #0]
{
   3745e:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   37460:	f88d 3000 	strb.w	r3, [sp]
{
   37464:	460c      	mov	r4, r1
	p1[1] = ra->type;
   37466:	f898 3000 	ldrb.w	r3, [r8]
   3746a:	f88d 3001 	strb.w	r3, [sp, #1]
{
   3746e:	4611      	mov	r1, r2
   37470:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   37472:	2207      	movs	r2, #7
   37474:	f10d 0002 	add.w	r0, sp, #2
   37478:	f7fe f85d 	bl	35536 <memcpy>
	memcpy(p1 + 9, pres, 7);
   3747c:	2207      	movs	r2, #7
   3747e:	4649      	mov	r1, r9
   37480:	f10d 0009 	add.w	r0, sp, #9
   37484:	f7fe f857 	bl	35536 <memcpy>
	while (len--) {
   37488:	f104 0010 	add.w	r0, r4, #16
	memcpy(p1 + 9, pres, 7);
   3748c:	462a      	mov	r2, r5
   3748e:	4669      	mov	r1, sp
		*r++ = *p++ ^ *q++;
   37490:	f814 3b01 	ldrb.w	r3, [r4], #1
   37494:	f811 cb01 	ldrb.w	ip, [r1], #1
	while (len--) {
   37498:	4284      	cmp	r4, r0
		*r++ = *p++ ^ *q++;
   3749a:	ea83 030c 	eor.w	r3, r3, ip
   3749e:	f802 3b01 	strb.w	r3, [r2], #1
	while (len--) {
   374a2:	d1f5      	bne.n	37490 <smp_c1+0x40>
	err = bt_encrypt_le(k, enc_data, enc_data);
   374a4:	462a      	mov	r2, r5
   374a6:	4629      	mov	r1, r5
   374a8:	4630      	mov	r0, r6
   374aa:	f7ea fe57 	bl	2215c <bt_encrypt_le>
	if (err) {
   374ae:	4604      	mov	r4, r0
   374b0:	bb20      	cbnz	r0, 374fc <smp_c1+0xac>
	memcpy(p2, ra->a.val, 6);
   374b2:	2206      	movs	r2, #6
   374b4:	f108 0101 	add.w	r1, r8, #1
   374b8:	a804      	add	r0, sp, #16
   374ba:	f7fe f83c 	bl	35536 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   374be:	2206      	movs	r2, #6
   374c0:	1c79      	adds	r1, r7, #1
   374c2:	f10d 0016 	add.w	r0, sp, #22
   374c6:	f7fe f836 	bl	35536 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   374ca:	2204      	movs	r2, #4
   374cc:	4621      	mov	r1, r4
   374ce:	a807      	add	r0, sp, #28
   374d0:	f7fe f83c 	bl	3554c <memset>
	while (len--) {
   374d4:	f105 0010 	add.w	r0, r5, #16
	(void)memset(p2 + 12, 0, 4);
   374d8:	462a      	mov	r2, r5
   374da:	ab04      	add	r3, sp, #16
		*r++ = *p++ ^ *q++;
   374dc:	f812 1b01 	ldrb.w	r1, [r2], #1
   374e0:	f813 4b01 	ldrb.w	r4, [r3], #1
	while (len--) {
   374e4:	4282      	cmp	r2, r0
		*r++ = *p++ ^ *q++;
   374e6:	ea81 0104 	eor.w	r1, r1, r4
   374ea:	f802 1c01 	strb.w	r1, [r2, #-1]
	while (len--) {
   374ee:	d1f5      	bne.n	374dc <smp_c1+0x8c>
	return bt_encrypt_le(k, enc_data, enc_data);
   374f0:	462a      	mov	r2, r5
   374f2:	4629      	mov	r1, r5
   374f4:	4630      	mov	r0, r6
   374f6:	f7ea fe31 	bl	2215c <bt_encrypt_le>
   374fa:	4604      	mov	r4, r0
}
   374fc:	4620      	mov	r0, r4
   374fe:	b009      	add	sp, #36	; 0x24
   37500:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00037504 <legacy_pairing_confirm>:
{
   37504:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   37506:	1d07      	adds	r7, r0, #4
{
   37508:	b085      	sub	sp, #20
   3750a:	4604      	mov	r4, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   3750c:	210a      	movs	r1, #10
   3750e:	4638      	mov	r0, r7
   37510:	f7ff fe71 	bl	371f6 <atomic_test_bit>
   37514:	bb88      	cbnz	r0, 3757a <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   37516:	2104      	movs	r1, #4
   37518:	4620      	mov	r0, r4
   3751a:	f7ff fed0 	bl	372be <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   3751e:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   37520:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   37524:	f7ff fedf 	bl	372e6 <smp_create_pdu.constprop.0>
	if (!buf) {
   37528:	4605      	mov	r5, r0
   3752a:	b1c0      	cbz	r0, 3755e <legacy_pairing_confirm+0x5a>
   3752c:	2110      	movs	r1, #16
   3752e:	300c      	adds	r0, #12
   37530:	f000 fa9e 	bl	37a70 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   37534:	f106 0396 	add.w	r3, r6, #150	; 0x96
   37538:	368f      	adds	r6, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   3753a:	9002      	str	r0, [sp, #8]
   3753c:	9301      	str	r3, [sp, #4]
   3753e:	9600      	str	r6, [sp, #0]
   37540:	f104 0310 	add.w	r3, r4, #16
   37544:	f104 0209 	add.w	r2, r4, #9
   37548:	f104 0127 	add.w	r1, r4, #39	; 0x27
   3754c:	f104 0047 	add.w	r0, r4, #71	; 0x47
   37550:	f7ff ff7e 	bl	37450 <smp_c1>
   37554:	4606      	mov	r6, r0
   37556:	b128      	cbz	r0, 37564 <legacy_pairing_confirm+0x60>
		net_buf_unref(buf);
   37558:	4628      	mov	r0, r5
   3755a:	f7f6 f981 	bl	2d860 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   3755e:	2008      	movs	r0, #8
}
   37560:	b005      	add	sp, #20
   37562:	bdf0      	pop	{r4, r5, r6, r7, pc}
	smp_send(smp, buf, NULL, NULL);
   37564:	4602      	mov	r2, r0
   37566:	4629      	mov	r1, r5
   37568:	4620      	mov	r0, r4
   3756a:	f7ff fe7d 	bl	37268 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   3756e:	4631      	mov	r1, r6
   37570:	4638      	mov	r0, r7
   37572:	f7ff fe6a 	bl	3724a <atomic_clear_bit>
	return 0;
   37576:	2000      	movs	r0, #0
   37578:	e7f2      	b.n	37560 <legacy_pairing_confirm+0x5c>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   3757a:	2100      	movs	r1, #0
   3757c:	4638      	mov	r0, r7
   3757e:	f7ff fe9e 	bl	372be <atomic_set_bit>
	return 0;
   37582:	e7f8      	b.n	37576 <legacy_pairing_confirm+0x72>

00037584 <bt_smp_request_ltk>:
{
   37584:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   37588:	9f09      	ldr	r7, [sp, #36]	; 0x24
   3758a:	e9cd 2300 	strd	r2, r3, [sp]
   3758e:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   37590:	f7ff fe8a 	bl	372a8 <smp_chan_get>
	if (!smp) {
   37594:	4605      	mov	r5, r0
   37596:	2800      	cmp	r0, #0
   37598:	d07c      	beq.n	37694 <bt_smp_request_ltk+0x110>
	if (ediv == 0U && rand == 0U &&
   3759a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   3759e:	1d06      	adds	r6, r0, #4
	if (ediv == 0U && rand == 0U &&
   375a0:	f1b8 0f00 	cmp.w	r8, #0
   375a4:	d128      	bne.n	375f8 <bt_smp_request_ltk+0x74>
   375a6:	e9dd 3200 	ldrd	r3, r2, [sp]
   375aa:	4313      	orrs	r3, r2
   375ac:	d124      	bne.n	375f8 <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   375ae:	2103      	movs	r1, #3
   375b0:	4630      	mov	r0, r6
   375b2:	f7ff fe20 	bl	371f6 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   375b6:	b1f8      	cbz	r0, 375f8 <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   375b8:	2101      	movs	r1, #1
   375ba:	4630      	mov	r0, r6
   375bc:	f7ff fe1b 	bl	371f6 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   375c0:	b1d0      	cbz	r0, 375f8 <bt_smp_request_ltk+0x74>
	return MIN(req->max_key_size, rsp->max_key_size);
   375c2:	7d2c      	ldrb	r4, [r5, #20]
   375c4:	7b6b      	ldrb	r3, [r5, #13]
   375c6:	429c      	cmp	r4, r3
   375c8:	bf28      	it	cs
   375ca:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   375cc:	4622      	mov	r2, r4
   375ce:	f105 0147 	add.w	r1, r5, #71	; 0x47
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   375d2:	4638      	mov	r0, r7
   375d4:	f7fd ffaf 	bl	35536 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   375d8:	2c0f      	cmp	r4, #15
   375da:	d805      	bhi.n	375e8 <bt_smp_request_ltk+0x64>
			(void)memset(ltk + enc_size, 0,
   375dc:	f1c4 0210 	rsb	r2, r4, #16
   375e0:	4641      	mov	r1, r8
   375e2:	1938      	adds	r0, r7, r4
   375e4:	f7fd ffb2 	bl	3554c <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   375e8:	4630      	mov	r0, r6
   375ea:	2101      	movs	r1, #1
   375ec:	f7ff fe67 	bl	372be <atomic_set_bit>
		return true;
   375f0:	2001      	movs	r0, #1
}
   375f2:	b002      	add	sp, #8
   375f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   375f8:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   375fc:	b983      	cbnz	r3, 37620 <bt_smp_request_ltk+0x9c>
					     &conn->le.dst);
   375fe:	f104 0888 	add.w	r8, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   37602:	7a21      	ldrb	r1, [r4, #8]
   37604:	4642      	mov	r2, r8
   37606:	2020      	movs	r0, #32
   37608:	f7e7 fbd8 	bl	1edbc <bt_keys_find>
   3760c:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		if (!conn->le.keys) {
   37610:	b930      	cbnz	r0, 37620 <bt_smp_request_ltk+0x9c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   37612:	7a21      	ldrb	r1, [r4, #8]
   37614:	4642      	mov	r2, r8
   37616:	2001      	movs	r0, #1
   37618:	f7e7 fbd0 	bl	1edbc <bt_keys_find>
   3761c:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	if (ediv == 0U && rand == 0U &&
   37620:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   37624:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
	if (ediv == 0U && rand == 0U &&
   37628:	f1b8 0f00 	cmp.w	r8, #0
   3762c:	d10c      	bne.n	37648 <bt_smp_request_ltk+0xc4>
   3762e:	e9dd 3200 	ldrd	r3, r2, [sp]
   37632:	4313      	orrs	r3, r2
   37634:	d108      	bne.n	37648 <bt_smp_request_ltk+0xc4>
   37636:	b300      	cbz	r0, 3767a <bt_smp_request_ltk+0xf6>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   37638:	89c3      	ldrh	r3, [r0, #14]
   3763a:	069a      	lsls	r2, r3, #26
   3763c:	d505      	bpl.n	3764a <bt_smp_request_ltk+0xc6>
		enc_size = conn->le.keys->enc_size;
   3763e:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   37640:	f100 011a 	add.w	r1, r0, #26
   37644:	4622      	mov	r2, r4
   37646:	e7c4      	b.n	375d2 <bt_smp_request_ltk+0x4e>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   37648:	b1b8      	cbz	r0, 3767a <bt_smp_request_ltk+0xf6>
   3764a:	89c3      	ldrh	r3, [r0, #14]
   3764c:	07db      	lsls	r3, r3, #31
   3764e:	d514      	bpl.n	3767a <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   37650:	2208      	movs	r2, #8
   37652:	4669      	mov	r1, sp
   37654:	3068      	adds	r0, #104	; 0x68
   37656:	f7fd ff5e 	bl	35516 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   3765a:	b970      	cbnz	r0, 3767a <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   3765c:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   37660:	2202      	movs	r2, #2
   37662:	a908      	add	r1, sp, #32
   37664:	3070      	adds	r0, #112	; 0x70
   37666:	f7fd ff56 	bl	35516 <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   3766a:	4680      	mov	r8, r0
   3766c:	b928      	cbnz	r0, 3767a <bt_smp_request_ltk+0xf6>
		enc_size = conn->le.keys->enc_size;
   3766e:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
   37672:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   37674:	3172      	adds	r1, #114	; 0x72
   37676:	4622      	mov	r2, r4
   37678:	e7ab      	b.n	375d2 <bt_smp_request_ltk+0x4e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   3767a:	210f      	movs	r1, #15
   3767c:	4630      	mov	r0, r6
   3767e:	f7ff fdba 	bl	371f6 <atomic_test_bit>
   37682:	b120      	cbz	r0, 3768e <bt_smp_request_ltk+0x10a>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   37684:	2202      	movs	r2, #2
   37686:	2106      	movs	r1, #6
   37688:	4620      	mov	r0, r4
   3768a:	f7e2 f843 	bl	19714 <bt_conn_security_changed>
	smp_reset(smp);
   3768e:	4628      	mov	r0, r5
   37690:	f7ff febb 	bl	3740a <smp_reset>
		return false;
   37694:	2000      	movs	r0, #0
   37696:	e7ac      	b.n	375f2 <bt_smp_request_ltk+0x6e>

00037698 <bt_smp_irk_get>:
{
   37698:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t invalid_ir[16] = { 0 };
   3769a:	2500      	movs	r5, #0
{
   3769c:	460c      	mov	r4, r1
	if (!memcmp(ir, invalid_ir, 16)) {
   3769e:	2210      	movs	r2, #16
   376a0:	4669      	mov	r1, sp
	uint8_t invalid_ir[16] = { 0 };
   376a2:	e9cd 5500 	strd	r5, r5, [sp]
   376a6:	e9cd 5502 	strd	r5, r5, [sp, #8]
{
   376aa:	4606      	mov	r6, r0
	if (!memcmp(ir, invalid_ir, 16)) {
   376ac:	f7fd ff33 	bl	35516 <memcmp>
   376b0:	b180      	cbz	r0, 376d4 <bt_smp_irk_get+0x3c>
	dst[0] = val;
   376b2:	2301      	movs	r3, #1
	memset(&res[4], 0, 16 - 4);
   376b4:	220c      	movs	r2, #12
   376b6:	4629      	mov	r1, r5
   376b8:	7023      	strb	r3, [r4, #0]
	dst[1] = val >> 8;
   376ba:	7065      	strb	r5, [r4, #1]
	dst[0] = val;
   376bc:	70a5      	strb	r5, [r4, #2]
	dst[1] = val >> 8;
   376be:	70e5      	strb	r5, [r4, #3]
   376c0:	1d20      	adds	r0, r4, #4
   376c2:	f7fd ff43 	bl	3554c <memset>
	err = bt_encrypt_le(key, res, res);
   376c6:	4622      	mov	r2, r4
   376c8:	4621      	mov	r1, r4
   376ca:	4630      	mov	r0, r6
   376cc:	f7ea fd46 	bl	2215c <bt_encrypt_le>
}
   376d0:	b004      	add	sp, #16
   376d2:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   376d4:	f06f 0015 	mvn.w	r0, #21
   376d8:	e7fa      	b.n	376d0 <bt_smp_irk_get+0x38>

000376da <bt_smp_dhkey_ready>:
{
   376da:	b570      	push	{r4, r5, r6, lr}
   376dc:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   376de:	2008      	movs	r0, #8
   376e0:	f7e5 fb80 	bl	1cde4 <smp_find>
	if (smp) {
   376e4:	4604      	mov	r4, r0
   376e6:	b1b8      	cbz	r0, 37718 <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   376e8:	1d05      	adds	r5, r0, #4
   376ea:	2108      	movs	r1, #8
   376ec:	4628      	mov	r0, r5
   376ee:	f7ff fdac 	bl	3724a <atomic_clear_bit>
	if (!dhkey) {
   376f2:	b38e      	cbz	r6, 37758 <bt_smp_dhkey_ready+0x7e>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   376f4:	2107      	movs	r1, #7
   376f6:	f7ff fda8 	bl	3724a <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   376fa:	4631      	mov	r1, r6
   376fc:	2220      	movs	r2, #32
   376fe:	f104 0097 	add.w	r0, r4, #151	; 0x97
   37702:	f7fd ff18 	bl	35536 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   37706:	210a      	movs	r1, #10
   37708:	4628      	mov	r0, r5
   3770a:	f7ff fd74 	bl	371f6 <atomic_test_bit>
   3770e:	b168      	cbz	r0, 3772c <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   37710:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   37712:	4628      	mov	r0, r5
   37714:	f7ff fdd3 	bl	372be <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   37718:	2007      	movs	r0, #7
   3771a:	f7e5 fb63 	bl	1cde4 <smp_find>
		if (smp) {
   3771e:	4604      	mov	r4, r0
   37720:	b118      	cbz	r0, 3772a <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   37722:	f7e5 fc9f 	bl	1d064 <smp_dhkey_generate>
			if (err) {
   37726:	4601      	mov	r1, r0
   37728:	b990      	cbnz	r0, 37750 <bt_smp_dhkey_ready+0x76>
}
   3772a:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   3772c:	2110      	movs	r1, #16
   3772e:	4628      	mov	r0, r5
   37730:	f7ff fd61 	bl	371f6 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   37734:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   37736:	2800      	cmp	r0, #0
   37738:	d1eb      	bne.n	37712 <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   3773a:	4628      	mov	r0, r5
   3773c:	f7ff fd5b 	bl	371f6 <atomic_test_bit>
   37740:	2800      	cmp	r0, #0
   37742:	d0e9      	beq.n	37718 <bt_smp_dhkey_ready+0x3e>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   37744:	4620      	mov	r0, r4
   37746:	f7e6 f881 	bl	1d84c <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   3774a:	4601      	mov	r1, r0
   3774c:	2800      	cmp	r0, #0
   3774e:	d0e3      	beq.n	37718 <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   37750:	4620      	mov	r0, r4
   37752:	f7e6 fd0b 	bl	1e16c <smp_error>
   37756:	e7df      	b.n	37718 <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   37758:	210b      	movs	r1, #11
   3775a:	e7f9      	b.n	37750 <bt_smp_dhkey_ready+0x76>

0003775c <smp_check_complete>:
{
   3775c:	b510      	push	{r4, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   3775e:	7883      	ldrb	r3, [r0, #2]
   37760:	2b01      	cmp	r3, #1
{
   37762:	460c      	mov	r4, r1
	if (conn->type == BT_CONN_TYPE_LE) {
   37764:	d110      	bne.n	37788 <smp_check_complete+0x2c>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   37766:	2106      	movs	r1, #6
   37768:	f7fe fd44 	bl	361f4 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   3776c:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   37770:	ea23 0104 	bic.w	r1, r3, r4
   37774:	f800 1c04 	strb.w	r1, [r0, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   37778:	f830 1c04 	ldrh.w	r1, [r0, #-4]
   3777c:	b921      	cbnz	r1, 37788 <smp_check_complete+0x2c>
}
   3777e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   37782:	38ec      	subs	r0, #236	; 0xec
   37784:	f7e6 bc6e 	b.w	1e064 <smp_pairing_complete>
}
   37788:	bd10      	pop	{r4, pc}

0003778a <smp_sign_info_sent>:
	if (!err) {
   3778a:	b912      	cbnz	r2, 37792 <smp_sign_info_sent+0x8>
		smp_check_complete(conn, BT_SMP_DIST_SIGN);
   3778c:	2104      	movs	r1, #4
   3778e:	f7ff bfe5 	b.w	3775c <smp_check_complete>
}
   37792:	4770      	bx	lr

00037794 <smp_id_sent>:
	if (!err) {
   37794:	b912      	cbnz	r2, 3779c <smp_id_sent+0x8>
		smp_check_complete(conn, BT_SMP_DIST_ID_KEY);
   37796:	2102      	movs	r1, #2
   37798:	f7ff bfe0 	b.w	3775c <smp_check_complete>
}
   3779c:	4770      	bx	lr

0003779e <smp_ident_sent>:
	if (!err) {
   3779e:	b912      	cbnz	r2, 377a6 <smp_ident_sent+0x8>
		smp_check_complete(conn, BT_SMP_DIST_ENC_KEY);
   377a0:	2101      	movs	r1, #1
   377a2:	f7ff bfdb 	b.w	3775c <smp_check_complete>
}
   377a6:	4770      	bx	lr

000377a8 <bt_smp_disconnected>:
{
   377a8:	b570      	push	{r4, r5, r6, lr}
   377aa:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   377ac:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   377b0:	f850 3b8c 	ldr.w	r3, [r0], #140
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   377b4:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   377b6:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
	(void)k_work_cancel_delayable(&smp->work);
   377ba:	f001 f956 	bl	38a6a <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   377be:	2103      	movs	r1, #3
   377c0:	4620      	mov	r0, r4
   377c2:	f7ff fd18 	bl	371f6 <atomic_test_bit>
   377c6:	b1a0      	cbz	r0, 377f2 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   377c8:	2108      	movs	r1, #8
   377ca:	4630      	mov	r0, r6
   377cc:	f7e6 fc4a 	bl	1e064 <smp_pairing_complete>
	if (keys) {
   377d0:	b13d      	cbz	r5, 377e2 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   377d2:	89eb      	ldrh	r3, [r5, #14]
   377d4:	b113      	cbz	r3, 377dc <bt_smp_disconnected+0x34>
   377d6:	7b6b      	ldrb	r3, [r5, #13]
   377d8:	079b      	lsls	r3, r3, #30
   377da:	d502      	bpl.n	377e2 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   377dc:	4628      	mov	r0, r5
   377de:	f7e7 fb7d 	bl	1eedc <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   377e2:	4630      	mov	r0, r6
   377e4:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
}
   377e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   377ec:	2100      	movs	r1, #0
   377ee:	f7fd bead 	b.w	3554c <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   377f2:	2101      	movs	r1, #1
   377f4:	4620      	mov	r0, r4
   377f6:	f7ff fcfe 	bl	371f6 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   377fa:	2800      	cmp	r0, #0
   377fc:	d1e4      	bne.n	377c8 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   377fe:	210f      	movs	r1, #15
   37800:	4620      	mov	r0, r4
   37802:	f7ff fcf8 	bl	371f6 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   37806:	2800      	cmp	r0, #0
   37808:	d1de      	bne.n	377c8 <bt_smp_disconnected+0x20>
   3780a:	e7e1      	b.n	377d0 <bt_smp_disconnected+0x28>

0003780c <bt_addr_le_eq>:
{
   3780c:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   3780e:	2207      	movs	r2, #7
   37810:	f7fd fe81 	bl	35516 <memcmp>
}
   37814:	fab0 f080 	clz	r0, r0
   37818:	0940      	lsrs	r0, r0, #5
   3781a:	bd08      	pop	{r3, pc}

0003781c <id_add>:
	bt_id_add(keys);
   3781c:	f7e0 bb3a 	b.w	17e94 <bt_id_add>

00037820 <bt_keys_get_type>:
{
   37820:	b570      	push	{r4, r5, r6, lr}
   37822:	4604      	mov	r4, r0
   37824:	460d      	mov	r5, r1
   37826:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   37828:	f7e7 fac8 	bl	1edbc <bt_keys_find>
	if (keys) {
   3782c:	b938      	cbnz	r0, 3783e <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   3782e:	4631      	mov	r1, r6
   37830:	4628      	mov	r0, r5
   37832:	f7e7 fa3f 	bl	1ecb4 <bt_keys_get_addr>
	if (!keys) {
   37836:	b110      	cbz	r0, 3783e <bt_keys_get_type+0x1e>
	keys->keys |= type;
   37838:	89c3      	ldrh	r3, [r0, #14]
   3783a:	431c      	orrs	r4, r3
   3783c:	81c4      	strh	r4, [r0, #14]
}
   3783e:	bd70      	pop	{r4, r5, r6, pc}

00037840 <bt_keys_add_type>:
	keys->keys |= type;
   37840:	89c3      	ldrh	r3, [r0, #14]
   37842:	4319      	orrs	r1, r3
   37844:	81c1      	strh	r1, [r0, #14]
}
   37846:	4770      	bx	lr

00037848 <sys_memcpy_swap>:
	psrc += length - 1;
   37848:	1e53      	subs	r3, r2, #1
   3784a:	4419      	add	r1, r3
	for (; length > 0; length--) {
   3784c:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   3784e:	f811 3901 	ldrb.w	r3, [r1], #-1
   37852:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   37856:	4290      	cmp	r0, r2
   37858:	d1f9      	bne.n	3784e <sys_memcpy_swap+0x6>
}
   3785a:	4770      	bx	lr

0003785c <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   3785c:	b510      	push	{r4, lr}
   3785e:	1e43      	subs	r3, r0, #1
   37860:	f100 0210 	add.w	r2, r0, #16
   37864:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   37866:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   3786a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   3786e:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   37870:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   37872:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   37874:	d1f7      	bne.n	37866 <sys_mem_swap.constprop.0+0xa>
}
   37876:	bd10      	pop	{r4, pc}

00037878 <bt_crypto_aes_cmac>:
{
   37878:	b570      	push	{r4, r5, r6, lr}
   3787a:	b0c2      	sub	sp, #264	; 0x108
   3787c:	460d      	mov	r5, r1
   3787e:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   37880:	4601      	mov	r1, r0
   37882:	aa16      	add	r2, sp, #88	; 0x58
   37884:	4668      	mov	r0, sp
{
   37886:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   37888:	f7fd fca4 	bl	351d4 <tc_cmac_setup>
   3788c:	b918      	cbnz	r0, 37896 <bt_crypto_aes_cmac+0x1e>
		return -EIO;
   3788e:	f06f 0004 	mvn.w	r0, #4
}
   37892:	b042      	add	sp, #264	; 0x108
   37894:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   37896:	4632      	mov	r2, r6
   37898:	4629      	mov	r1, r5
   3789a:	4668      	mov	r0, sp
   3789c:	f7fd fcc5 	bl	3522a <tc_cmac_update>
   378a0:	2800      	cmp	r0, #0
   378a2:	d0f4      	beq.n	3788e <bt_crypto_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   378a4:	4669      	mov	r1, sp
   378a6:	4620      	mov	r0, r4
   378a8:	f7fd fd29 	bl	352fe <tc_cmac_final>
   378ac:	2800      	cmp	r0, #0
   378ae:	d0ee      	beq.n	3788e <bt_crypto_aes_cmac+0x16>
	return 0;
   378b0:	2000      	movs	r0, #0
   378b2:	e7ee      	b.n	37892 <bt_crypto_aes_cmac+0x1a>

000378b4 <bt_crypto_f4>:
{
   378b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   378b6:	b097      	sub	sp, #92	; 0x5c
   378b8:	4614      	mov	r4, r2
   378ba:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   378bc:	2220      	movs	r2, #32
   378be:	4601      	mov	r1, r0
   378c0:	a805      	add	r0, sp, #20
{
   378c2:	461d      	mov	r5, r3
   378c4:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   378c6:	f7ff ffbf 	bl	37848 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   378ca:	2220      	movs	r2, #32
   378cc:	4631      	mov	r1, r6
   378ce:	a80d      	add	r0, sp, #52	; 0x34
   378d0:	f7ff ffba 	bl	37848 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   378d4:	4621      	mov	r1, r4
   378d6:	2210      	movs	r2, #16
   378d8:	a801      	add	r0, sp, #4
	m[64] = z;
   378da:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   378de:	f7ff ffb3 	bl	37848 <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), res);
   378e2:	463b      	mov	r3, r7
   378e4:	2241      	movs	r2, #65	; 0x41
   378e6:	a905      	add	r1, sp, #20
   378e8:	a801      	add	r0, sp, #4
   378ea:	f7ff ffc5 	bl	37878 <bt_crypto_aes_cmac>
	if (err) {
   378ee:	4604      	mov	r4, r0
   378f0:	b910      	cbnz	r0, 378f8 <bt_crypto_f4+0x44>
	sys_mem_swap(res, 16);
   378f2:	4638      	mov	r0, r7
   378f4:	f7ff ffb2 	bl	3785c <sys_mem_swap.constprop.0>
}
   378f8:	4620      	mov	r0, r4
   378fa:	b017      	add	sp, #92	; 0x5c
   378fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000378fe <bt_crypto_f6>:
{
   378fe:	b5f0      	push	{r4, r5, r6, r7, lr}
   37900:	b097      	sub	sp, #92	; 0x5c
   37902:	4605      	mov	r5, r0
   37904:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   37906:	a805      	add	r0, sp, #20
   37908:	2210      	movs	r2, #16
{
   3790a:	461c      	mov	r4, r3
   3790c:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   3790e:	f7ff ff9b 	bl	37848 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   37912:	2210      	movs	r2, #16
   37914:	4631      	mov	r1, r6
   37916:	a809      	add	r0, sp, #36	; 0x24
   37918:	f7ff ff96 	bl	37848 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   3791c:	4621      	mov	r1, r4
   3791e:	2210      	movs	r2, #16
   37920:	a80d      	add	r0, sp, #52	; 0x34
   37922:	f7ff ff91 	bl	37848 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   37926:	991c      	ldr	r1, [sp, #112]	; 0x70
   37928:	2203      	movs	r2, #3
   3792a:	a811      	add	r0, sp, #68	; 0x44
   3792c:	f7ff ff8c 	bl	37848 <sys_memcpy_swap>
	m[51] = a1->type;
   37930:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   37932:	f814 3b01 	ldrb.w	r3, [r4], #1
   37936:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   3793a:	4621      	mov	r1, r4
   3793c:	2206      	movs	r2, #6
   3793e:	a812      	add	r0, sp, #72	; 0x48
   37940:	f7fd fdf9 	bl	35536 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   37944:	4621      	mov	r1, r4
   37946:	2206      	movs	r2, #6
   37948:	a812      	add	r0, sp, #72	; 0x48
   3794a:	f7ff ff7d 	bl	37848 <sys_memcpy_swap>
	m[58] = a2->type;
   3794e:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   37950:	f814 3b01 	ldrb.w	r3, [r4], #1
   37954:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   37958:	4621      	mov	r1, r4
   3795a:	2206      	movs	r2, #6
   3795c:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   37960:	f7fd fde9 	bl	35536 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   37964:	4621      	mov	r1, r4
   37966:	2206      	movs	r2, #6
   37968:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   3796c:	f7ff ff6c 	bl	37848 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   37970:	2210      	movs	r2, #16
   37972:	4629      	mov	r1, r5
   37974:	a801      	add	r0, sp, #4
   37976:	f7ff ff67 	bl	37848 <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(ws, m, sizeof(m), check);
   3797a:	463b      	mov	r3, r7
   3797c:	2241      	movs	r2, #65	; 0x41
   3797e:	a905      	add	r1, sp, #20
   37980:	a801      	add	r0, sp, #4
   37982:	f7ff ff79 	bl	37878 <bt_crypto_aes_cmac>
	if (err) {
   37986:	4604      	mov	r4, r0
   37988:	b910      	cbnz	r0, 37990 <bt_crypto_f6+0x92>
	sys_mem_swap(check, 16);
   3798a:	4638      	mov	r0, r7
   3798c:	f7ff ff66 	bl	3785c <sys_mem_swap.constprop.0>
}
   37990:	4620      	mov	r0, r4
   37992:	b017      	add	sp, #92	; 0x5c
   37994:	bdf0      	pop	{r4, r5, r6, r7, pc}

00037996 <fixed_data_unref>:
}
   37996:	4770      	bx	lr

00037998 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   37998:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   3799a:	6849      	ldr	r1, [r1, #4]
   3799c:	6809      	ldr	r1, [r1, #0]
   3799e:	f7f5 becd 	b.w	2d73c <net_buf_alloc_len>

000379a2 <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   379a2:	f7fa b863 	b.w	31a6c <z_impl_k_queue_get>

000379a6 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   379a6:	6883      	ldr	r3, [r0, #8]
   379a8:	440b      	add	r3, r1
   379aa:	6003      	str	r3, [r0, #0]
}
   379ac:	4770      	bx	lr

000379ae <net_buf_slist_put>:
	__asm__ volatile(
   379ae:	f04f 0320 	mov.w	r3, #32
   379b2:	f3ef 8211 	mrs	r2, BASEPRI
   379b6:	f383 8812 	msr	BASEPRI_MAX, r3
   379ba:	f3bf 8f6f 	isb	sy
	parent->next = child;
   379be:	2300      	movs	r3, #0
   379c0:	600b      	str	r3, [r1, #0]
	return list->tail;
   379c2:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   379c4:	b933      	cbnz	r3, 379d4 <net_buf_slist_put+0x26>
	list->head = node;
   379c6:	e9c0 1100 	strd	r1, r1, [r0]
	__asm__ volatile(
   379ca:	f382 8811 	msr	BASEPRI, r2
   379ce:	f3bf 8f6f 	isb	sy
}
   379d2:	4770      	bx	lr
	parent->next = child;
   379d4:	6019      	str	r1, [r3, #0]
	list->tail = node;
   379d6:	6041      	str	r1, [r0, #4]
}
   379d8:	e7f7      	b.n	379ca <net_buf_slist_put+0x1c>

000379da <net_buf_slist_get>:
{
   379da:	b510      	push	{r4, lr}
   379dc:	4603      	mov	r3, r0
	__asm__ volatile(
   379de:	f04f 0220 	mov.w	r2, #32
   379e2:	f3ef 8111 	mrs	r1, BASEPRI
   379e6:	f382 8812 	msr	BASEPRI_MAX, r2
   379ea:	f3bf 8f6f 	isb	sy
	return list->head;
   379ee:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   379f0:	b128      	cbz	r0, 379fe <net_buf_slist_get+0x24>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   379f2:	685c      	ldr	r4, [r3, #4]
	return node->next;
   379f4:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   379f6:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   379f8:	42a0      	cmp	r0, r4
	list->tail = node;
   379fa:	bf08      	it	eq
   379fc:	605a      	streq	r2, [r3, #4]
	__asm__ volatile(
   379fe:	f381 8811 	msr	BASEPRI, r1
   37a02:	f3bf 8f6f 	isb	sy
}
   37a06:	bd10      	pop	{r4, pc}

00037a08 <net_buf_put>:
	k_fifo_put(fifo, buf);
   37a08:	f000 bf42 	b.w	38890 <k_queue_append>

00037a0c <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   37a0c:	7a02      	ldrb	r2, [r0, #8]
   37a0e:	3201      	adds	r2, #1
   37a10:	7202      	strb	r2, [r0, #8]
	return buf;
}
   37a12:	4770      	bx	lr

00037a14 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   37a14:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   37a16:	4618      	mov	r0, r3
   37a18:	685b      	ldr	r3, [r3, #4]
   37a1a:	2b00      	cmp	r3, #0
   37a1c:	d1fb      	bne.n	37a16 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   37a1e:	4770      	bx	lr

00037a20 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   37a20:	6842      	ldr	r2, [r0, #4]
{
   37a22:	b510      	push	{r4, lr}
	if (parent->frags) {
   37a24:	b12a      	cbz	r2, 37a32 <net_buf_frag_insert+0x12>
   37a26:	460b      	mov	r3, r1
	while (buf->frags) {
   37a28:	461c      	mov	r4, r3
   37a2a:	685b      	ldr	r3, [r3, #4]
   37a2c:	2b00      	cmp	r3, #0
   37a2e:	d1fb      	bne.n	37a28 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   37a30:	6062      	str	r2, [r4, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   37a32:	6041      	str	r1, [r0, #4]
}
   37a34:	bd10      	pop	{r4, pc}

00037a36 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   37a36:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   37a38:	4604      	mov	r4, r0
   37a3a:	b920      	cbnz	r0, 37a46 <net_buf_frag_add+0x10>
	buf->ref++;
   37a3c:	7a0b      	ldrb	r3, [r1, #8]
   37a3e:	3301      	adds	r3, #1
   37a40:	720b      	strb	r3, [r1, #8]
		return net_buf_ref(frag);
   37a42:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   37a44:	bd10      	pop	{r4, pc}
   37a46:	4603      	mov	r3, r0
	while (buf->frags) {
   37a48:	4618      	mov	r0, r3
   37a4a:	685b      	ldr	r3, [r3, #4]
   37a4c:	2b00      	cmp	r3, #0
   37a4e:	d1fb      	bne.n	37a48 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   37a50:	f7ff ffe6 	bl	37a20 <net_buf_frag_insert>
   37a54:	4620      	mov	r0, r4
   37a56:	e7f5      	b.n	37a44 <net_buf_frag_add+0xe>

00037a58 <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   37a58:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);

	if (parent) {
   37a5a:	b108      	cbz	r0, 37a60 <net_buf_frag_del+0x8>
		__ASSERT_NO_MSG(parent->frags);
		__ASSERT_NO_MSG(parent->frags == frag);
		parent->frags = frag->frags;
   37a5c:	684b      	ldr	r3, [r1, #4]
   37a5e:	6043      	str	r3, [r0, #4]
	}

	next_frag = frag->frags;
   37a60:	684c      	ldr	r4, [r1, #4]

	frag->frags = NULL;
   37a62:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   37a64:	4608      	mov	r0, r1
	frag->frags = NULL;
   37a66:	604b      	str	r3, [r1, #4]
	net_buf_unref(frag);
   37a68:	f7f5 fefa 	bl	2d860 <net_buf_unref>
#endif

	return next_frag;
}
   37a6c:	4620      	mov	r0, r4
   37a6e:	bd10      	pop	{r4, pc}

00037a70 <net_buf_simple_add>:
	return buf->data + buf->len;
   37a70:	8883      	ldrh	r3, [r0, #4]
   37a72:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   37a74:	4419      	add	r1, r3
   37a76:	8081      	strh	r1, [r0, #4]
	return tail;
}
   37a78:	18d0      	adds	r0, r2, r3
   37a7a:	4770      	bx	lr

00037a7c <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   37a7c:	b430      	push	{r4, r5}
   37a7e:	8884      	ldrh	r4, [r0, #4]
   37a80:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   37a82:	18a3      	adds	r3, r4, r2
   37a84:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   37a86:	1928      	adds	r0, r5, r4
}
   37a88:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   37a8a:	f7fd bd54 	b.w	35536 <memcpy>

00037a8e <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   37a8e:	b510      	push	{r4, lr}
   37a90:	8883      	ldrh	r3, [r0, #4]
   37a92:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
   37a94:	1c5c      	adds	r4, r3, #1
   37a96:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   37a98:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   37a9a:	18d0      	adds	r0, r2, r3
   37a9c:	bd10      	pop	{r4, pc}

00037a9e <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   37a9e:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   37aa0:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   37aa2:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   37aa4:	1a40      	subs	r0, r0, r1
	buf->len += len;
   37aa6:	4411      	add	r1, r2
	buf->data -= len;
   37aa8:	6018      	str	r0, [r3, #0]
	buf->len += len;
   37aaa:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   37aac:	4770      	bx	lr

00037aae <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   37aae:	8882      	ldrh	r2, [r0, #4]
   37ab0:	1a52      	subs	r2, r2, r1
{
   37ab2:	4603      	mov	r3, r0
	buf->len -= len;
   37ab4:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   37ab6:	6800      	ldr	r0, [r0, #0]
   37ab8:	4408      	add	r0, r1
   37aba:	6018      	str	r0, [r3, #0]
}
   37abc:	4770      	bx	lr

00037abe <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   37abe:	4603      	mov	r3, r0
	void *data = buf->data;
   37ac0:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   37ac2:	889a      	ldrh	r2, [r3, #4]
   37ac4:	1a52      	subs	r2, r2, r1
	buf->data += len;
   37ac6:	4401      	add	r1, r0
	buf->len -= len;
   37ac8:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   37aca:	6019      	str	r1, [r3, #0]

	return data;
}
   37acc:	4770      	bx	lr

00037ace <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   37ace:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   37ad0:	6803      	ldr	r3, [r0, #0]
   37ad2:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   37ad4:	2102      	movs	r1, #2
   37ad6:	f7ff ffea 	bl	37aae <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   37ada:	4620      	mov	r0, r4
   37adc:	bd10      	pop	{r4, pc}

00037ade <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   37ade:	6802      	ldr	r2, [r0, #0]
   37ae0:	6880      	ldr	r0, [r0, #8]
}
   37ae2:	1a10      	subs	r0, r2, r0
   37ae4:	4770      	bx	lr

00037ae6 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   37ae6:	8883      	ldrh	r3, [r0, #4]
   37ae8:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   37aea:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   37aec:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   37aee:	6803      	ldr	r3, [r0, #0]
   37af0:	1a5b      	subs	r3, r3, r1
}
   37af2:	1ad0      	subs	r0, r2, r3
   37af4:	4770      	bx	lr

00037af6 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   37af6:	6903      	ldr	r3, [r0, #16]
   37af8:	b2c9      	uxtb	r1, r1
   37afa:	220c      	movs	r2, #12
   37afc:	fb01 3302 	mla	r3, r1, r2, r3
   37b00:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   37b02:	f000 0007 	and.w	r0, r0, #7
   37b06:	4770      	bx	lr

00037b08 <set_on_state>:
	__asm__ volatile(
   37b08:	f04f 0320 	mov.w	r3, #32
   37b0c:	f3ef 8211 	mrs	r2, BASEPRI
   37b10:	f383 8812 	msr	BASEPRI_MAX, r3
   37b14:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   37b18:	6803      	ldr	r3, [r0, #0]
   37b1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   37b1e:	f043 0302 	orr.w	r3, r3, #2
   37b22:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   37b24:	f382 8811 	msr	BASEPRI, r2
   37b28:	f3bf 8f6f 	isb	sy
}
   37b2c:	4770      	bx	lr

00037b2e <stop>:
{
   37b2e:	b570      	push	{r4, r5, r6, lr}
   37b30:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   37b32:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   37b34:	f04f 0420 	mov.w	r4, #32
   37b38:	f3ef 8511 	mrs	r5, BASEPRI
   37b3c:	f384 8812 	msr	BASEPRI_MAX, r4
   37b40:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   37b44:	260c      	movs	r6, #12
   37b46:	fb06 3401 	mla	r4, r6, r1, r3
   37b4a:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   37b4c:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   37b50:	d008      	beq.n	37b64 <stop+0x36>
   37b52:	42a2      	cmp	r2, r4
   37b54:	d006      	beq.n	37b64 <stop+0x36>
	__asm__ volatile(
   37b56:	f385 8811 	msr	BASEPRI, r5
   37b5a:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   37b5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   37b62:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   37b64:	4371      	muls	r1, r6
   37b66:	440b      	add	r3, r1
   37b68:	2201      	movs	r2, #1
   37b6a:	641a      	str	r2, [r3, #64]	; 0x40
   37b6c:	f385 8811 	msr	BASEPRI, r5
   37b70:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   37b74:	6843      	ldr	r3, [r0, #4]
   37b76:	440b      	add	r3, r1
   37b78:	685b      	ldr	r3, [r3, #4]
   37b7a:	4798      	blx	r3
	return 0;
   37b7c:	2000      	movs	r0, #0
   37b7e:	e7f0      	b.n	37b62 <stop+0x34>

00037b80 <api_stop>:
	return stop(dev, subsys, CTX_API);
   37b80:	2280      	movs	r2, #128	; 0x80
   37b82:	f7ff bfd4 	b.w	37b2e <stop>

00037b86 <async_start>:
{
   37b86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37b88:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   37b8a:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   37b8c:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   37b8e:	f04f 0520 	mov.w	r5, #32
   37b92:	f3ef 8611 	mrs	r6, BASEPRI
   37b96:	f385 8812 	msr	BASEPRI_MAX, r5
   37b9a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   37b9e:	250c      	movs	r5, #12
   37ba0:	4369      	muls	r1, r5
   37ba2:	440c      	add	r4, r1
   37ba4:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   37ba6:	f005 0c07 	and.w	ip, r5, #7
   37baa:	f1bc 0f01 	cmp.w	ip, #1
   37bae:	d10b      	bne.n	37bc8 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   37bb0:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   37bb2:	f386 8811 	msr	BASEPRI, r6
   37bb6:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   37bba:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   37bbe:	6843      	ldr	r3, [r0, #4]
   37bc0:	585b      	ldr	r3, [r3, r1]
   37bc2:	4798      	blx	r3
	return 0;
   37bc4:	2000      	movs	r0, #0
}
   37bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   37bc8:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   37bcc:	42af      	cmp	r7, r5
   37bce:	f386 8811 	msr	BASEPRI, r6
   37bd2:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   37bd6:	bf0c      	ite	eq
   37bd8:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   37bdc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   37be0:	e7f1      	b.n	37bc6 <async_start+0x40>

00037be2 <api_start>:
{
   37be2:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   37be4:	2480      	movs	r4, #128	; 0x80
   37be6:	9400      	str	r4, [sp, #0]
   37be8:	f7ff ffcd 	bl	37b86 <async_start>
}
   37bec:	b002      	add	sp, #8
   37bee:	bd10      	pop	{r4, pc}

00037bf0 <onoff_started_callback>:
{
   37bf0:	b410      	push	{r4}
	return &data->mgr[type];
   37bf2:	6900      	ldr	r0, [r0, #16]
   37bf4:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   37bf6:	241c      	movs	r4, #28
   37bf8:	fb03 0004 	mla	r0, r3, r4, r0
   37bfc:	2100      	movs	r1, #0
}
   37bfe:	bc10      	pop	{r4}
	notify(mgr, 0);
   37c00:	4710      	bx	r2

00037c02 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   37c02:	2000      	movs	r0, #0
   37c04:	f000 bba0 	b.w	38348 <nrfx_clock_start>

00037c08 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   37c08:	2000      	movs	r0, #0
   37c0a:	f000 bbd9 	b.w	383c0 <nrfx_clock_stop>

00037c0e <blocking_start_callback>:
{
   37c0e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   37c10:	f7f9 bf60 	b.w	31ad4 <z_impl_k_sem_give>

00037c14 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   37c14:	6843      	ldr	r3, [r0, #4]
   37c16:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   37c18:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   37c1c:	600b      	str	r3, [r1, #0]
}
   37c1e:	2000      	movs	r0, #0
   37c20:	4770      	bx	lr

00037c22 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   37c22:	6843      	ldr	r3, [r0, #4]
   37c24:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   37c26:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   37c2a:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   37c2e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   37c32:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   37c36:	2000      	movs	r0, #0
   37c38:	4770      	bx	lr

00037c3a <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   37c3a:	6843      	ldr	r3, [r0, #4]
   37c3c:	685b      	ldr	r3, [r3, #4]
}
   37c3e:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   37c40:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   37c44:	4770      	bx	lr

00037c46 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   37c46:	6843      	ldr	r3, [r0, #4]
   37c48:	685b      	ldr	r3, [r3, #4]
}
   37c4a:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   37c4c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   37c50:	4770      	bx	lr

00037c52 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   37c52:	6843      	ldr	r3, [r0, #4]
   37c54:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   37c56:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   37c5a:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   37c5e:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   37c60:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   37c64:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   37c68:	2000      	movs	r0, #0
   37c6a:	4770      	bx	lr

00037c6c <gpio_nrfx_manage_callback>:
{
   37c6c:	b510      	push	{r4, lr}
	return port->data;
   37c6e:	6903      	ldr	r3, [r0, #16]
	return list->head;
   37c70:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   37c72:	b1f8      	cbz	r0, 37cb4 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   37c74:	4288      	cmp	r0, r1
   37c76:	d119      	bne.n	37cac <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   37c78:	689c      	ldr	r4, [r3, #8]
	return node->next;
   37c7a:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   37c7c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   37c7e:	42a1      	cmp	r1, r4
   37c80:	d100      	bne.n	37c84 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   37c82:	6098      	str	r0, [r3, #8]
	parent->next = child;
   37c84:	2000      	movs	r0, #0
   37c86:	6008      	str	r0, [r1, #0]
	if (set) {
   37c88:	b12a      	cbz	r2, 37c96 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   37c8a:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   37c8c:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   37c8e:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   37c90:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   37c92:	b902      	cbnz	r2, 37c96 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   37c94:	6099      	str	r1, [r3, #8]
	return 0;
   37c96:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   37c98:	e010      	b.n	37cbc <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   37c9a:	4281      	cmp	r1, r0
   37c9c:	d106      	bne.n	37cac <gpio_nrfx_manage_callback+0x40>
	return node->next;
   37c9e:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   37ca0:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   37ca2:	6898      	ldr	r0, [r3, #8]
   37ca4:	4281      	cmp	r1, r0
   37ca6:	d1ed      	bne.n	37c84 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   37ca8:	609c      	str	r4, [r3, #8]
}
   37caa:	e7eb      	b.n	37c84 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   37cac:	4604      	mov	r4, r0
   37cae:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   37cb0:	2800      	cmp	r0, #0
   37cb2:	d1f2      	bne.n	37c9a <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   37cb4:	2a00      	cmp	r2, #0
   37cb6:	d1e8      	bne.n	37c8a <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   37cb8:	f06f 0015 	mvn.w	r0, #21
}
   37cbc:	bd10      	pop	{r4, pc}

00037cbe <irq_connect0>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
   37cbe:	2200      	movs	r2, #0
   37cc0:	2101      	movs	r1, #1
   37cc2:	2003      	movs	r0, #3
   37cc4:	f7dc be44 	b.w	14950 <z_arm_irq_priority_set>

00037cc8 <irq_connect1>:
#endif

#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
   37cc8:	2200      	movs	r2, #0
   37cca:	2101      	movs	r1, #1
   37ccc:	2004      	movs	r0, #4
   37cce:	f7dc be3f 	b.w	14950 <z_arm_irq_priority_set>

00037cd2 <pinctrl_apply_state.constprop.0>:
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
   37cd2:	b513      	push	{r0, r1, r4, lr}
	ret = pinctrl_lookup_state(config, id, &state);
   37cd4:	2100      	movs	r1, #0
   37cd6:	aa01      	add	r2, sp, #4
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
   37cd8:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
   37cda:	f000 fb12 	bl	38302 <pinctrl_lookup_state>
	if (ret < 0) {
   37cde:	2800      	cmp	r0, #0
   37ce0:	db05      	blt.n	37cee <pinctrl_apply_state.constprop.0+0x1c>
	return pinctrl_apply_state_direct(config, state);
   37ce2:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   37ce4:	6822      	ldr	r2, [r4, #0]
   37ce6:	7919      	ldrb	r1, [r3, #4]
   37ce8:	6818      	ldr	r0, [r3, #0]
   37cea:	f7f7 ffe9 	bl	2fcc0 <pinctrl_configure_pins>
}
   37cee:	b002      	add	sp, #8
   37cf0:	bd10      	pop	{r4, pc}

00037cf2 <z_log_msg_static_create.constprop.0>:
   37cf2:	2300      	movs	r3, #0
   37cf4:	f7db ba3e 	b.w	13174 <z_impl_z_log_msg_static_create>

00037cf8 <bme280_reg_write.isra.0>:
	return cfg->bus_io->write(&cfg->bus, reg, val);
   37cf8:	6883      	ldr	r3, [r0, #8]
   37cfa:	689b      	ldr	r3, [r3, #8]
   37cfc:	4718      	bx	r3

00037cfe <bme280_reg_read.isra.0>:
static inline int bme280_reg_read(const struct device *dev,
   37cfe:	b410      	push	{r4}
	return cfg->bus_io->read(&cfg->bus, start, buf, size);
   37d00:	6884      	ldr	r4, [r0, #8]
   37d02:	6864      	ldr	r4, [r4, #4]
   37d04:	46a4      	mov	ip, r4
}
   37d06:	bc10      	pop	{r4}
	return cfg->bus_io->read(&cfg->bus, start, buf, size);
   37d08:	4760      	bx	ip

00037d0a <bme280_wait_until_ready>:
{
   37d0a:	b513      	push	{r0, r1, r4, lr}
	uint8_t status = 0;
   37d0c:	2300      	movs	r3, #0
{
   37d0e:	4604      	mov	r4, r0
	uint8_t status = 0;
   37d10:	f88d 3007 	strb.w	r3, [sp, #7]
	return z_impl_k_sleep(timeout);
   37d14:	2100      	movs	r1, #0
   37d16:	2063      	movs	r0, #99	; 0x63
   37d18:	f7fa fbe4 	bl	324e4 <z_impl_k_sleep>
		ret = bme280_reg_read(dev, BME280_REG_STATUS, &status, 1);
   37d1c:	6860      	ldr	r0, [r4, #4]
   37d1e:	2301      	movs	r3, #1
   37d20:	f10d 0207 	add.w	r2, sp, #7
   37d24:	21f3      	movs	r1, #243	; 0xf3
   37d26:	f7ff ffea 	bl	37cfe <bme280_reg_read.isra.0>
		if (ret < 0) {
   37d2a:	2800      	cmp	r0, #0
   37d2c:	db04      	blt.n	37d38 <bme280_wait_until_ready+0x2e>
	} while (status & (BME280_STATUS_MEASURING | BME280_STATUS_IM_UPDATE));
   37d2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   37d32:	f013 0009 	ands.w	r0, r3, #9
   37d36:	d1ed      	bne.n	37d14 <bme280_wait_until_ready+0xa>
}
   37d38:	b002      	add	sp, #8
   37d3a:	bd10      	pop	{r4, pc}

00037d3c <bme280_sample_fetch>:
{
   37d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37d40:	b085      	sub	sp, #20
	struct bme280_data *data = dev->data;
   37d42:	6906      	ldr	r6, [r0, #16]
{
   37d44:	4604      	mov	r4, r0
	ret = bme280_wait_until_ready(dev);
   37d46:	f7ff ffe0 	bl	37d0a <bme280_wait_until_ready>
	if (ret < 0) {
   37d4a:	2800      	cmp	r0, #0
   37d4c:	f2c0 80d9 	blt.w	37f02 <bme280_sample_fetch+0x1c6>
	if (data->chip_id == BME280_CHIP_ID) {
   37d50:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
	ret = bme280_reg_read(dev, BME280_REG_PRESS_MSB, buf, size);
   37d54:	6860      	ldr	r0, [r4, #4]
	int size = 6;
   37d56:	2b60      	cmp	r3, #96	; 0x60
	ret = bme280_reg_read(dev, BME280_REG_PRESS_MSB, buf, size);
   37d58:	bf0c      	ite	eq
   37d5a:	2308      	moveq	r3, #8
   37d5c:	2306      	movne	r3, #6
   37d5e:	aa02      	add	r2, sp, #8
   37d60:	21f7      	movs	r1, #247	; 0xf7
   37d62:	f7ff ffcc 	bl	37cfe <bme280_reg_read.isra.0>
	if (ret < 0) {
   37d66:	2800      	cmp	r0, #0
   37d68:	f2c0 80cb 	blt.w	37f02 <bme280_sample_fetch+0x1c6>
	adc_press = (buf[0] << 12) | (buf[1] << 4) | (buf[2] >> 4);
   37d6c:	f89d 3008 	ldrb.w	r3, [sp, #8]
	adc_temp = (buf[3] << 12) | (buf[4] << 4) | (buf[5] >> 4);
   37d70:	f89d 500c 	ldrb.w	r5, [sp, #12]
	adc_press = (buf[0] << 12) | (buf[1] << 4) | (buf[2] >> 4);
   37d74:	9300      	str	r3, [sp, #0]
	adc_temp = (buf[3] << 12) | (buf[4] << 4) | (buf[5] >> 4);
   37d76:	f89d 300b 	ldrb.w	r3, [sp, #11]
   37d7a:	f89d 200d 	ldrb.w	r2, [sp, #13]
	adc_press = (buf[0] << 12) | (buf[1] << 4) | (buf[2] >> 4);
   37d7e:	f89d a009 	ldrb.w	sl, [sp, #9]
   37d82:	f89d 100a 	ldrb.w	r1, [sp, #10]
	var2 = var1 * var1 * (int64_t)data->dig_p6;
   37d86:	f9b6 c010 	ldrsh.w	ip, [r6, #16]
	var2 = var2 + ((var1 * (int64_t)data->dig_p5) << 17);
   37d8a:	f9b6 000e 	ldrsh.w	r0, [r6, #14]
	var2 = var2 + (((int64_t)data->dig_p4) << 35);
   37d8e:	f9b6 b00c 	ldrsh.w	fp, [r6, #12]
	adc_temp = (buf[3] << 12) | (buf[4] << 4) | (buf[5] >> 4);
   37d92:	012d      	lsls	r5, r5, #4
   37d94:	ea45 3503 	orr.w	r5, r5, r3, lsl #12
	var1 = (((adc_temp >> 3) - ((int32_t)data->dig_t1 << 1)) *
   37d98:	8833      	ldrh	r3, [r6, #0]
	adc_temp = (buf[3] << 12) | (buf[4] << 4) | (buf[5] >> 4);
   37d9a:	ea45 1212 	orr.w	r2, r5, r2, lsr #4
	var2 = (((((adc_temp >> 4) - ((int32_t)data->dig_t1)) *
   37d9e:	ebc3 1515 	rsb	r5, r3, r5, lsr #4
	var1 = (((adc_temp >> 3) - ((int32_t)data->dig_t1 << 1)) *
   37da2:	005b      	lsls	r3, r3, #1
   37da4:	ebc3 03d2 	rsb	r3, r3, r2, lsr #3
		((int32_t)data->dig_t2)) >> 11;
   37da8:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
	var2 = (((((adc_temp >> 4) - ((int32_t)data->dig_t1)) *
   37dac:	436d      	muls	r5, r5
	var1 = (((adc_temp >> 3) - ((int32_t)data->dig_t1 << 1)) *
   37dae:	4353      	muls	r3, r2
		((int32_t)data->dig_t3)) >> 14;
   37db0:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
		  ((adc_temp >> 4) - ((int32_t)data->dig_t1))) >> 12) *
   37db4:	132d      	asrs	r5, r5, #12
   37db6:	4355      	muls	r5, r2
	var2 = (((((adc_temp >> 4) - ((int32_t)data->dig_t1)) *
   37db8:	13ad      	asrs	r5, r5, #14
	data->t_fine = var1 + var2;
   37dba:	eb05 25e3 	add.w	r5, r5, r3, asr #11
	data->comp_temp = (data->t_fine * 5 + 128) >> 8;
   37dbe:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   37dc2:	3380      	adds	r3, #128	; 0x80
   37dc4:	121b      	asrs	r3, r3, #8
   37dc6:	f5a5 37fa 	sub.w	r7, r5, #128000	; 0x1f400
   37dca:	6273      	str	r3, [r6, #36]	; 0x24
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
   37dcc:	f9b6 300a 	ldrsh.w	r3, [r6, #10]
	data->t_fine = var1 + var2;
   37dd0:	6335      	str	r5, [r6, #48]	; 0x30
	var2 = var1 * var1 * (int64_t)data->dig_p6;
   37dd2:	fb87 e807 	smull	lr, r8, r7, r7
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
   37dd6:	17da      	asrs	r2, r3, #31
   37dd8:	fb03 f408 	mul.w	r4, r3, r8
   37ddc:	fb0e 4402 	mla	r4, lr, r2, r4
   37de0:	fba3 320e 	umull	r3, r2, r3, lr
   37de4:	4414      	add	r4, r2
		((var1 * (int64_t)data->dig_p2) << 12);
   37de6:	f9b6 2008 	ldrsh.w	r2, [r6, #8]
   37dea:	fb82 9207 	smull	r9, r2, r2, r7
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
   37dee:	0a1b      	lsrs	r3, r3, #8
		((var1 * (int64_t)data->dig_p2) << 12);
   37df0:	0312      	lsls	r2, r2, #12
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
   37df2:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
		((var1 * (int64_t)data->dig_p2) << 12);
   37df6:	ea42 5219 	orr.w	r2, r2, r9, lsr #20
   37dfa:	ea4f 3909 	mov.w	r9, r9, lsl #12
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
   37dfe:	eb13 0309 	adds.w	r3, r3, r9
   37e02:	eb42 2224 	adc.w	r2, r2, r4, asr #8
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)data->dig_p1) >> 33;
   37e06:	f8b6 9006 	ldrh.w	r9, [r6, #6]
   37e0a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   37e0e:	9201      	str	r2, [sp, #4]
   37e10:	fba3 2309 	umull	r2, r3, r3, r9
   37e14:	9a01      	ldr	r2, [sp, #4]
   37e16:	fb09 3902 	mla	r9, r9, r2, r3
   37e1a:	ea4f 73e9 	mov.w	r3, r9, asr #31
   37e1e:	ea4f 0269 	mov.w	r2, r9, asr #1
	if (var1 == 0) {
   37e22:	ea53 0969 	orrs.w	r9, r3, r9, asr #1
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)data->dig_p1) >> 33;
   37e26:	f04f 0400 	mov.w	r4, #0
	if (var1 == 0) {
   37e2a:	d064      	beq.n	37ef6 <bme280_sample_fetch+0x1ba>
	var2 = var1 * var1 * (int64_t)data->dig_p6;
   37e2c:	ea4f 79ec 	mov.w	r9, ip, asr #31
   37e30:	fb0c f808 	mul.w	r8, ip, r8
   37e34:	fb0e 8809 	mla	r8, lr, r9, r8
   37e38:	fbac 9c0e 	umull	r9, ip, ip, lr
	var2 = var2 + ((var1 * (int64_t)data->dig_p5) << 17);
   37e3c:	fb80 e707 	smull	lr, r7, r0, r7
   37e40:	047f      	lsls	r7, r7, #17
   37e42:	ea47 37de 	orr.w	r7, r7, lr, lsr #15
   37e46:	ea4f 4e4e 	mov.w	lr, lr, lsl #17
   37e4a:	eb1e 0e09 	adds.w	lr, lr, r9
	var2 = var1 * var1 * (int64_t)data->dig_p6;
   37e4e:	44c4      	add	ip, r8
	var2 = var2 + ((var1 * (int64_t)data->dig_p5) << 17);
   37e50:	eb4c 0c07 	adc.w	ip, ip, r7
	adc_press = (buf[0] << 12) | (buf[1] << 4) | (buf[2] >> 4);
   37e54:	090f      	lsrs	r7, r1, #4
   37e56:	9900      	ldr	r1, [sp, #0]
   37e58:	ea47 170a 	orr.w	r7, r7, sl, lsl #4
   37e5c:	ea47 3701 	orr.w	r7, r7, r1, lsl #12
	p = 1048576 - adc_press;
   37e60:	f5c7 1780 	rsb	r7, r7, #1048576	; 0x100000
	var2 = var2 + (((int64_t)data->dig_p4) << 35);
   37e64:	eb14 0e0e 	adds.w	lr, r4, lr
	p = (((p << 31) - var2) * 3125) / var1;
   37e68:	f007 4100 	and.w	r1, r7, #2147483648	; 0x80000000
   37e6c:	07f8      	lsls	r0, r7, #31
   37e6e:	ebb0 000e 	subs.w	r0, r0, lr
	var2 = var2 + (((int64_t)data->dig_p4) << 35);
   37e72:	eb0c 0ccb 	add.w	ip, ip, fp, lsl #3
	p = (((p << 31) - var2) * 3125) / var1;
   37e76:	f640 4435 	movw	r4, #3125	; 0xc35
   37e7a:	ea41 0157 	orr.w	r1, r1, r7, lsr #1
   37e7e:	eb61 010c 	sbc.w	r1, r1, ip
   37e82:	fba0 0704 	umull	r0, r7, r0, r4
   37e86:	fb04 7101 	mla	r1, r4, r1, r7
   37e8a:	f7d8 f939 	bl	10100 <__aeabi_ldivmod>
   37e8e:	4607      	mov	r7, r0
	var1 = (((int64_t)data->dig_p9) * (p >> 13) * (p >> 13)) >> 25;
   37e90:	f9b6 4016 	ldrsh.w	r4, [r6, #22]
   37e94:	0b7b      	lsrs	r3, r7, #13
   37e96:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
	p = (((p << 31) - var2) * 3125) / var1;
   37e9a:	4608      	mov	r0, r1
	var1 = (((int64_t)data->dig_p9) * (p >> 13) * (p >> 13)) >> 25;
   37e9c:	1349      	asrs	r1, r1, #13
   37e9e:	fb04 fc01 	mul.w	ip, r4, r1
   37ea2:	ea4f 7ee4 	mov.w	lr, r4, asr #31
   37ea6:	fb03 cc0e 	mla	ip, r3, lr, ip
   37eaa:	fba4 4e03 	umull	r4, lr, r4, r3
   37eae:	44f4      	add	ip, lr
   37eb0:	4361      	muls	r1, r4
   37eb2:	fb03 110c 	mla	r1, r3, ip, r1
   37eb6:	fba4 4303 	umull	r4, r3, r4, r3
   37eba:	440b      	add	r3, r1
   37ebc:	0e64      	lsrs	r4, r4, #25
   37ebe:	ea44 14c3 	orr.w	r4, r4, r3, lsl #7
	p = ((p + var1 + var2) >> 8) + (((int64_t)data->dig_p7) << 4);
   37ec2:	19e4      	adds	r4, r4, r7
   37ec4:	eb40 6163 	adc.w	r1, r0, r3, asr #25
	var2 = (((int64_t)data->dig_p8) * p) >> 19;
   37ec8:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
   37ecc:	ea4f 7ce3 	mov.w	ip, r3, asr #31
   37ed0:	4358      	muls	r0, r3
   37ed2:	fb0c 0007 	mla	r0, ip, r7, r0
   37ed6:	fba3 3207 	umull	r3, r2, r3, r7
   37eda:	4410      	add	r0, r2
   37edc:	0cdb      	lsrs	r3, r3, #19
   37ede:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
	p = ((p + var1 + var2) >> 8) + (((int64_t)data->dig_p7) << 4);
   37ee2:	18e4      	adds	r4, r4, r3
   37ee4:	eb41 43e0 	adc.w	r3, r1, r0, asr #19
   37ee8:	0a24      	lsrs	r4, r4, #8
   37eea:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
   37eee:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
	data->comp_press = (uint32_t)p;
   37ef2:	eb04 1403 	add.w	r4, r4, r3, lsl #4
	if (data->chip_id == BME280_CHIP_ID) {
   37ef6:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
   37efa:	62b4      	str	r4, [r6, #40]	; 0x28
   37efc:	2b60      	cmp	r3, #96	; 0x60
   37efe:	d003      	beq.n	37f08 <bme280_sample_fetch+0x1cc>
	return 0;
   37f00:	2000      	movs	r0, #0
}
   37f02:	b005      	add	sp, #20
   37f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	h = ((((adc_humidity << 14) - (((int32_t)data->dig_h4) << 20) -
   37f08:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   37f0c:	f9b6 301e 	ldrsh.w	r3, [r6, #30]
		(((((((h * ((int32_t)data->dig_h6)) >> 10) * (((h *
   37f10:	f996 1022 	ldrsb.w	r1, [r6, #34]	; 0x22
	h = ((((adc_humidity << 14) - (((int32_t)data->dig_h4) << 20) -
   37f14:	ba52      	rev16	r2, r2
   37f16:	b292      	uxth	r2, r2
   37f18:	051b      	lsls	r3, r3, #20
   37f1a:	ebc3 3382 	rsb	r3, r3, r2, lsl #14
		(((int32_t)data->dig_h5) * h)) + ((int32_t)16384)) >> 15) *
   37f1e:	f9b6 2020 	ldrsh.w	r2, [r6, #32]
	h = (data->t_fine - ((int32_t)76800));
   37f22:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
	h = ((((adc_humidity << 14) - (((int32_t)data->dig_h4) << 20) -
   37f26:	fb05 3312 	mls	r3, r5, r2, r3
		(((int32_t)data->dig_h5) * h)) + ((int32_t)16384)) >> 15) *
   37f2a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   37f2e:	13da      	asrs	r2, r3, #15
		((int32_t)data->dig_h3)) >> 11) + ((int32_t)32768))) >> 10) +
   37f30:	7f33      	ldrb	r3, [r6, #28]
		(((((((h * ((int32_t)data->dig_h6)) >> 10) * (((h *
   37f32:	436b      	muls	r3, r5
		((int32_t)data->dig_h3)) >> 11) + ((int32_t)32768))) >> 10) +
   37f34:	12db      	asrs	r3, r3, #11
		(((((((h * ((int32_t)data->dig_h6)) >> 10) * (((h *
   37f36:	4369      	muls	r1, r5
   37f38:	1289      	asrs	r1, r1, #10
		((int32_t)data->dig_h3)) >> 11) + ((int32_t)32768))) >> 10) +
   37f3a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
		(((((((h * ((int32_t)data->dig_h6)) >> 10) * (((h *
   37f3e:	434b      	muls	r3, r1
		((int32_t)data->dig_h3)) >> 11) + ((int32_t)32768))) >> 10) +
   37f40:	129b      	asrs	r3, r3, #10
		((int32_t)2097152)) * ((int32_t)data->dig_h2) + 8192) >> 14);
   37f42:	f9b6 101a 	ldrsh.w	r1, [r6, #26]
		((int32_t)data->dig_h3)) >> 11) + ((int32_t)32768))) >> 10) +
   37f46:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
		((int32_t)2097152)) * ((int32_t)data->dig_h2) + 8192) >> 14);
   37f4a:	434b      	muls	r3, r1
   37f4c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   37f50:	139b      	asrs	r3, r3, #14
	h = ((((adc_humidity << 14) - (((int32_t)data->dig_h4) << 20) -
   37f52:	4353      	muls	r3, r2
	h = (h - (((((h >> 15) * (h >> 15)) >> 7) *
   37f54:	13da      	asrs	r2, r3, #15
		((int32_t)data->dig_h1)) >> 4));
   37f56:	7e31      	ldrb	r1, [r6, #24]
	h = (h - (((((h >> 15) * (h >> 15)) >> 7) *
   37f58:	4352      	muls	r2, r2
   37f5a:	11d2      	asrs	r2, r2, #7
   37f5c:	434a      	muls	r2, r1
   37f5e:	eba3 1322 	sub.w	r3, r3, r2, asr #4
	h = (h > 419430400 ? 419430400 : h);
   37f62:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   37f66:	bfa8      	it	ge
   37f68:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
	data->comp_humidity = (uint32_t)(h >> 12);
   37f6c:	131b      	asrs	r3, r3, #12
   37f6e:	62f3      	str	r3, [r6, #44]	; 0x2c
}
   37f70:	e7c6      	b.n	37f00 <bme280_sample_fetch+0x1c4>

00037f72 <bme280_bus_check_i2c>:

#include "bme280.h"

#if BME280_BUS_I2C
static int bme280_bus_check_i2c(const union bme280_bus *bus)
{
   37f72:	b508      	push	{r3, lr}
	return device_is_ready(bus->i2c.bus) ? 0 : -ENODEV;
   37f74:	6800      	ldr	r0, [r0, #0]
   37f76:	f000 fb01 	bl	3857c <z_device_is_ready>
   37f7a:	2800      	cmp	r0, #0
}
   37f7c:	bf0c      	ite	eq
   37f7e:	f06f 0012 	mvneq.w	r0, #18
   37f82:	2000      	movne	r0, #0
   37f84:	bd08      	pop	{r3, pc}

00037f86 <bme280_reg_read_i2c>:

static int bme280_reg_read_i2c(const union bme280_bus *bus,
			       uint8_t start, uint8_t *buf, int size)
{
   37f86:	b530      	push	{r4, r5, lr}
   37f88:	b089      	sub	sp, #36	; 0x24
   37f8a:	4604      	mov	r4, r0
	return i2c_burst_read_dt(&bus->i2c, start, buf, size);
   37f8c:	f88d 1007 	strb.w	r1, [sp, #7]
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
   37f90:	f10d 0107 	add.w	r1, sp, #7
{
   37f94:	461d      	mov	r5, r3
   37f96:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
   37f98:	2101      	movs	r1, #1
	msg[0].flags = I2C_MSG_WRITE;

	msg[1].buf = (uint8_t *)read_buf;
	msg[1].len = num_read;
   37f9a:	e9cd 2505 	strd	r2, r5, [sp, #20]
	msg[0].len = num_write;
   37f9e:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   37fa0:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   37fa2:	2100      	movs	r1, #0
static inline int i2c_burst_read_dt(const struct i2c_dt_spec *spec,
				    uint8_t start_addr,
				    uint8_t *buf,
				    uint32_t num_bytes)
{
	return i2c_burst_read(spec->bus, spec->addr,
   37fa4:	6800      	ldr	r0, [r0, #0]
   37fa6:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
   37fa8:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   37fac:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   37fb0:	6882      	ldr	r2, [r0, #8]
   37fb2:	a902      	add	r1, sp, #8
   37fb4:	6894      	ldr	r4, [r2, #8]
   37fb6:	2202      	movs	r2, #2
   37fb8:	47a0      	blx	r4
}
   37fba:	b009      	add	sp, #36	; 0x24
   37fbc:	bd30      	pop	{r4, r5, pc}

00037fbe <bme280_reg_write_i2c>:

static int bme280_reg_write_i2c(const union bme280_bus *bus,
				uint8_t reg, uint8_t val)
{
   37fbe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   37fc0:	4603      	mov	r3, r0
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
   37fc2:	f88d 2001 	strb.w	r2, [sp, #1]
	msg.len = num_bytes;
   37fc6:	2202      	movs	r2, #2
 * @return a value from i2c_reg_write_byte()
 */
static inline int i2c_reg_write_byte_dt(const struct i2c_dt_spec *spec,
					uint8_t reg_addr, uint8_t value)
{
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
   37fc8:	6800      	ldr	r0, [r0, #0]
   37fca:	889b      	ldrh	r3, [r3, #4]
	uint8_t tx_buf[2] = {reg_addr, value};
   37fcc:	f88d 1000 	strb.w	r1, [sp]
	msg.buf = (uint8_t *)buf;
   37fd0:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
   37fd4:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   37fd6:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   37fda:	6882      	ldr	r2, [r0, #8]
   37fdc:	a901      	add	r1, sp, #4
   37fde:	6894      	ldr	r4, [r2, #8]
   37fe0:	2201      	movs	r2, #1
   37fe2:	47a0      	blx	r4
	return i2c_reg_write_byte_dt(&bus->i2c, reg, val);
}
   37fe4:	b004      	add	sp, #16
   37fe6:	bd10      	pop	{r4, pc}

00037fe8 <irq_connect2>:
#ifdef CONFIG_SPI_1_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(1);
#endif

#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(2);
   37fe8:	2200      	movs	r2, #0
   37fea:	2101      	movs	r1, #1
   37fec:	2023      	movs	r0, #35	; 0x23
   37fee:	f7dc bcaf 	b.w	14950 <z_arm_irq_priority_set>

00037ff2 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   37ff2:	b510      	push	{r4, lr}
	while (*count) {
   37ff4:	680b      	ldr	r3, [r1, #0]
   37ff6:	b913      	cbnz	r3, 37ffe <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
   37ff8:	6013      	str	r3, [r2, #0]
	return NULL;
   37ffa:	4618      	mov	r0, r3
   37ffc:	e005      	b.n	3800a <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
   37ffe:	6803      	ldr	r3, [r0, #0]
   38000:	685c      	ldr	r4, [r3, #4]
   38002:	b11c      	cbz	r4, 3800c <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
   38004:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
   38006:	6803      	ldr	r3, [r0, #0]
   38008:	6818      	ldr	r0, [r3, #0]
}
   3800a:	bd10      	pop	{r4, pc}
		++(*current);
   3800c:	3308      	adds	r3, #8
   3800e:	6003      	str	r3, [r0, #0]
		--(*count);
   38010:	680b      	ldr	r3, [r1, #0]
   38012:	3b01      	subs	r3, #1
   38014:	600b      	str	r3, [r1, #0]
   38016:	e7ed      	b.n	37ff4 <spi_context_get_next_buf.constprop.0+0x2>

00038018 <z_log_msg_static_create.constprop.0>:
   38018:	2300      	movs	r3, #0
   3801a:	f7db b8ab 	b.w	13174 <z_impl_z_log_msg_static_create>

0003801e <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   3801e:	4603      	mov	r3, r0
   38020:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
   38022:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   38024:	7919      	ldrb	r1, [r3, #4]
   38026:	2301      	movs	r3, #1
   38028:	fa03 f101 	lsl.w	r1, r3, r1
   3802c:	6903      	ldr	r3, [r0, #16]
   3802e:	681b      	ldr	r3, [r3, #0]
   38030:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   38032:	bf18      	it	ne
   38034:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   38038:	b112      	cbz	r2, 38040 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
   3803a:	6883      	ldr	r3, [r0, #8]
   3803c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   3803e:	4718      	bx	r3
   38040:	6883      	ldr	r3, [r0, #8]
   38042:	691b      	ldr	r3, [r3, #16]
   38044:	e7fb      	b.n	3803e <gpio_pin_set_dt.isra.0+0x20>

00038046 <_spi_context_cs_control>:
{
   38046:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   38048:	6803      	ldr	r3, [r0, #0]
{
   3804a:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   3804c:	b1e3      	cbz	r3, 38088 <_spi_context_cs_control+0x42>
   3804e:	6898      	ldr	r0, [r3, #8]
   38050:	b1d0      	cbz	r0, 38088 <_spi_context_cs_control+0x42>
   38052:	6805      	ldr	r5, [r0, #0]
   38054:	b1c5      	cbz	r5, 38088 <_spi_context_cs_control+0x42>
		if (on) {
   38056:	b149      	cbz	r1, 3806c <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   38058:	2101      	movs	r1, #1
   3805a:	f7ff ffe0 	bl	3801e <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   3805e:	6823      	ldr	r3, [r4, #0]
   38060:	689b      	ldr	r3, [r3, #8]
   38062:	6898      	ldr	r0, [r3, #8]
}
   38064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   38068:	f000 bea1 	b.w	38dae <z_impl_k_busy_wait>
			if (!force_off &&
   3806c:	b912      	cbnz	r2, 38074 <_spi_context_cs_control+0x2e>
   3806e:	889b      	ldrh	r3, [r3, #4]
   38070:	04db      	lsls	r3, r3, #19
   38072:	d409      	bmi.n	38088 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
   38074:	6880      	ldr	r0, [r0, #8]
   38076:	f000 fe9a 	bl	38dae <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   3807a:	6823      	ldr	r3, [r4, #0]
   3807c:	2100      	movs	r1, #0
   3807e:	6898      	ldr	r0, [r3, #8]
}
   38080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   38084:	f7ff bfcb 	b.w	3801e <gpio_pin_set_dt.isra.0>
}
   38088:	bd38      	pop	{r3, r4, r5, pc}

0003808a <spi_context_unlock_unconditionally>:
{
   3808a:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   3808c:	2201      	movs	r2, #1
   3808e:	2100      	movs	r1, #0
{
   38090:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   38092:	f7ff ffd8 	bl	38046 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   38096:	69a3      	ldr	r3, [r4, #24]
   38098:	b933      	cbnz	r3, 380a8 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   3809a:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   3809c:	f104 0010 	add.w	r0, r4, #16
}
   380a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   380a4:	f7f9 bd16 	b.w	31ad4 <z_impl_k_sem_give>
   380a8:	bd10      	pop	{r4, pc}

000380aa <spi_nrfx_release>:
{
   380aa:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   380ac:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   380ae:	6803      	ldr	r3, [r0, #0]
   380b0:	428b      	cmp	r3, r1
   380b2:	d106      	bne.n	380c2 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   380b4:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   380b8:	b934      	cbnz	r4, 380c8 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   380ba:	f7ff ffe6 	bl	3808a <spi_context_unlock_unconditionally>
	return 0;
   380be:	4620      	mov	r0, r4
}
   380c0:	bd10      	pop	{r4, pc}
		return -EINVAL;
   380c2:	f06f 0015 	mvn.w	r0, #21
   380c6:	e7fb      	b.n	380c0 <spi_nrfx_release+0x16>
		return -EBUSY;
   380c8:	f06f 000f 	mvn.w	r0, #15
   380cc:	e7f8      	b.n	380c0 <spi_nrfx_release+0x16>

000380ce <regulator_common_data_init>:
 */

#include <zephyr/drivers/regulator.h>

void regulator_common_data_init(const struct device *dev)
{
   380ce:	b510      	push	{r4, lr}
	struct regulator_common_data *data = dev->data;
   380d0:	6904      	ldr	r4, [r0, #16]
	return z_impl_k_mutex_init(mutex);
   380d2:	4620      	mov	r0, r4
   380d4:	f000 fb37 	bl	38746 <z_impl_k_mutex_init>

	(void)k_mutex_init(&data->lock);
	data->refcnt = 0;
   380d8:	2300      	movs	r3, #0
   380da:	6163      	str	r3, [r4, #20]
}
   380dc:	bd10      	pop	{r4, pc}

000380de <regulator_is_enabled>:

	return ret;
}

bool regulator_is_enabled(const struct device *dev)
{
   380de:	b538      	push	{r3, r4, r5, lr}
	const struct regulator_common_config *config = dev->config;
	struct regulator_common_data *data = dev->data;
	bool enabled;

	if ((config->flags & REGULATOR_ALWAYS_ON) != 0U) {
   380e0:	6843      	ldr	r3, [r0, #4]
   380e2:	7d9b      	ldrb	r3, [r3, #22]
   380e4:	07db      	lsls	r3, r3, #31
   380e6:	d410      	bmi.n	3810a <regulator_is_enabled+0x2c>
	struct regulator_common_data *data = dev->data;
   380e8:	6905      	ldr	r5, [r0, #16]
	return z_impl_k_mutex_lock(mutex, timeout);
   380ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   380ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   380f2:	4628      	mov	r0, r5
   380f4:	f7f9 fc04 	bl	31900 <z_impl_k_mutex_lock>
		enabled = true;
	} else {
		(void)k_mutex_lock(&data->lock, K_FOREVER);
		enabled = data->refcnt != 0;
   380f8:	696c      	ldr	r4, [r5, #20]
   380fa:	3c00      	subs	r4, #0
   380fc:	bf18      	it	ne
   380fe:	2401      	movne	r4, #1
	return z_impl_k_mutex_unlock(mutex);
   38100:	4628      	mov	r0, r5
   38102:	f7f9 fc77 	bl	319f4 <z_impl_k_mutex_unlock>
		k_mutex_unlock(&data->lock);
	}

	return enabled;
}
   38106:	4620      	mov	r0, r4
   38108:	bd38      	pop	{r3, r4, r5, pc}
		enabled = true;
   3810a:	2401      	movs	r4, #1
   3810c:	e7fb      	b.n	38106 <regulator_is_enabled+0x28>

0003810e <regulator_set_mode>:

	return api->set_current_limit(dev, min_ua, max_ua);
}

int regulator_set_mode(const struct device *dev, regulator_mode_t mode)
{
   3810e:	b470      	push	{r4, r5, r6}
	const struct regulator_common_config *config = dev->config;
	const struct regulator_driver_api *api = dev->api;

	if (api->set_mode == NULL) {
   38110:	e9d0 6201 	ldrd	r6, r2, [r0, #4]
   38114:	6a15      	ldr	r5, [r2, #32]
{
   38116:	4603      	mov	r3, r0
   38118:	460c      	mov	r4, r1
	if (api->set_mode == NULL) {
   3811a:	b19d      	cbz	r5, 38144 <regulator_set_mode+0x36>
		return -ENOSYS;
	}

	/* no mode restrictions */
	if (config->allowed_modes_cnt == 0U) {
   3811c:	7d32      	ldrb	r2, [r6, #20]
   3811e:	b912      	cbnz	r2, 38126 <regulator_set_mode+0x18>
	}

	/* check if mode is allowed, apply if it is */
	for (uint8_t i = 0U; i < config->allowed_modes_cnt; i++) {
		if (mode == config->allowed_modes[i]) {
			return api->set_mode(dev, mode);
   38120:	462b      	mov	r3, r5
		}
	}

	return -ENOTSUP;
}
   38122:	bc70      	pop	{r4, r5, r6}
			return api->set_mode(dev, mode);
   38124:	4718      	bx	r3
   38126:	6930      	ldr	r0, [r6, #16]
   38128:	4402      	add	r2, r0
		if (mode == config->allowed_modes[i]) {
   3812a:	f810 1b01 	ldrb.w	r1, [r0], #1
   3812e:	42a1      	cmp	r1, r4
   38130:	d102      	bne.n	38138 <regulator_set_mode+0x2a>
			return api->set_mode(dev, mode);
   38132:	4621      	mov	r1, r4
   38134:	4618      	mov	r0, r3
   38136:	e7f3      	b.n	38120 <regulator_set_mode+0x12>
	for (uint8_t i = 0U; i < config->allowed_modes_cnt; i++) {
   38138:	4290      	cmp	r0, r2
   3813a:	d1f6      	bne.n	3812a <regulator_set_mode+0x1c>
	return -ENOTSUP;
   3813c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   38140:	bc70      	pop	{r4, r5, r6}
   38142:	4770      	bx	lr
		return -ENOSYS;
   38144:	f06f 0057 	mvn.w	r0, #87	; 0x57
   38148:	e7fa      	b.n	38140 <regulator_set_mode+0x32>

0003814a <regulator_common_init_enable>:
{
   3814a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct regulator_common_config *config = dev->config;
   3814c:	e9d0 6701 	ldrd	r6, r7, [r0, #4]
	if (config->initial_mode != REGULATOR_INITIAL_MODE_UNKNOWN) {
   38150:	7d71      	ldrb	r1, [r6, #21]
	struct regulator_common_data *data = dev->data;
   38152:	6905      	ldr	r5, [r0, #16]
	if (config->initial_mode != REGULATOR_INITIAL_MODE_UNKNOWN) {
   38154:	29ff      	cmp	r1, #255	; 0xff
{
   38156:	4604      	mov	r4, r0
	if (config->initial_mode != REGULATOR_INITIAL_MODE_UNKNOWN) {
   38158:	d104      	bne.n	38164 <regulator_common_init_enable+0x1a>
	if ((config->flags & REGULATOR_INIT_ENABLED) != 0U) {
   3815a:	7db3      	ldrb	r3, [r6, #22]
   3815c:	079b      	lsls	r3, r3, #30
   3815e:	d106      	bne.n	3816e <regulator_common_init_enable+0x24>
	return 0;
   38160:	2000      	movs	r0, #0
}
   38162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ret = regulator_set_mode(dev, config->initial_mode);
   38164:	f7ff ffd3 	bl	3810e <regulator_set_mode>
		if (ret < 0) {
   38168:	2800      	cmp	r0, #0
   3816a:	daf6      	bge.n	3815a <regulator_common_init_enable+0x10>
   3816c:	e7f9      	b.n	38162 <regulator_common_init_enable+0x18>
		ret = api->enable(dev);
   3816e:	683b      	ldr	r3, [r7, #0]
   38170:	4620      	mov	r0, r4
   38172:	4798      	blx	r3
		if (ret < 0) {
   38174:	2800      	cmp	r0, #0
   38176:	dbf4      	blt.n	38162 <regulator_common_init_enable+0x18>
		data->refcnt++;
   38178:	696b      	ldr	r3, [r5, #20]
   3817a:	3301      	adds	r3, #1
   3817c:	616b      	str	r3, [r5, #20]
   3817e:	e7ef      	b.n	38160 <regulator_common_init_enable+0x16>

00038180 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   38180:	2301      	movs	r3, #1
   38182:	fa03 f101 	lsl.w	r1, r3, r1
   38186:	6903      	ldr	r3, [r0, #16]
   38188:	681b      	ldr	r3, [r3, #0]
   3818a:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   3818c:	bf18      	it	ne
   3818e:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   38192:	b112      	cbz	r2, 3819a <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   38194:	6883      	ldr	r3, [r0, #8]
   38196:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   38198:	4718      	bx	r3
   3819a:	6883      	ldr	r3, [r0, #8]
   3819c:	691b      	ldr	r3, [r3, #16]
   3819e:	e7fb      	b.n	38198 <gpio_pin_set+0x18>

000381a0 <regulator_fixed_disable>:
	const struct regulator_fixed_config *cfg = dev->config;
   381a0:	6843      	ldr	r3, [r0, #4]
	return gpio_pin_set(spec->port, spec->pin, value);
   381a2:	2200      	movs	r2, #0
   381a4:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   381a8:	6a18      	ldr	r0, [r3, #32]
   381aa:	f7ff bfe9 	b.w	38180 <gpio_pin_set>

000381ae <is_regular_addr_valid>:
{
   381ae:	b538      	push	{r3, r4, r5, lr}
   381b0:	4605      	mov	r5, r0
   381b2:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   381b4:	f000 f95e 	bl	38474 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   381b8:	2d00      	cmp	r5, #0
   381ba:	db07      	blt.n	381cc <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   381bc:	42a8      	cmp	r0, r5
   381be:	d905      	bls.n	381cc <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   381c0:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   381c2:	4284      	cmp	r4, r0
   381c4:	bf8c      	ite	hi
   381c6:	2000      	movhi	r0, #0
   381c8:	2001      	movls	r0, #1
}
   381ca:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   381cc:	2000      	movs	r0, #0
   381ce:	e7fc      	b.n	381ca <is_regular_addr_valid+0x1c>

000381d0 <flash_nrf_read>:
{
   381d0:	b570      	push	{r4, r5, r6, lr}
   381d2:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   381d4:	4628      	mov	r0, r5
   381d6:	4619      	mov	r1, r3
{
   381d8:	4616      	mov	r6, r2
   381da:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   381dc:	f7ff ffe7 	bl	381ae <is_regular_addr_valid>
   381e0:	b928      	cbnz	r0, 381ee <flash_nrf_read+0x1e>
   381e2:	4621      	mov	r1, r4
   381e4:	4628      	mov	r0, r5
}
   381e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   381ea:	f7f6 be1d 	b.w	2ee28 <flash_nrf_read.part.0>
	if (!len) {
   381ee:	b124      	cbz	r4, 381fa <flash_nrf_read+0x2a>
	memcpy(data, (void *)addr, len);
   381f0:	4622      	mov	r2, r4
   381f2:	4629      	mov	r1, r5
   381f4:	4630      	mov	r0, r6
   381f6:	f7fd f99e 	bl	35536 <memcpy>
}
   381fa:	2000      	movs	r0, #0
   381fc:	bd70      	pop	{r4, r5, r6, pc}

000381fe <nrf_flash_sync_is_required>:
	return ticker_is_initialized(0);
   381fe:	2000      	movs	r0, #0
   38200:	f7e8 b96e 	b.w	204e0 <ticker_is_initialized>

00038204 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   38204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   38206:	461c      	mov	r4, r3
   38208:	4616      	mov	r6, r2
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   3820a:	2300      	movs	r3, #0
	const struct flash_driver_api *api = dev->api;
   3820c:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
   3820e:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   38210:	60a3      	str	r3, [r4, #8]

	api->page_layout(dev, &layout, &layout_size);
   38212:	6913      	ldr	r3, [r2, #16]
{
   38214:	460d      	mov	r5, r1
	api->page_layout(dev, &layout, &layout_size);
   38216:	aa01      	add	r2, sp, #4
   38218:	4669      	mov	r1, sp
   3821a:	4798      	blx	r3

	while (layout_size--) {
   3821c:	9b01      	ldr	r3, [sp, #4]
   3821e:	1e5a      	subs	r2, r3, #1
   38220:	9201      	str	r2, [sp, #4]
   38222:	b91b      	cbnz	r3, 3822c <flash_get_page_info+0x28>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   38224:	f06f 0015 	mvn.w	r0, #21
}
   38228:	b003      	add	sp, #12
   3822a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info->size = layout->pages_size;
   3822c:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
   3822e:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
   38230:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
   38232:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
   38234:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
   38236:	b985      	cbnz	r5, 3825a <flash_get_page_info+0x56>
			index_jmp = index - info->index;
   38238:	1ab3      	subs	r3, r6, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
   3823a:	f8d0 c000 	ldr.w	ip, [r0]
   3823e:	4563      	cmp	r3, ip
   38240:	bf28      	it	cs
   38242:	4663      	movcs	r3, ip
		info->index += index_jmp;
   38244:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
   38246:	fb03 1107 	mla	r1, r3, r7, r1
   3824a:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
   3824c:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   3824e:	6802      	ldr	r2, [r0, #0]
   38250:	429a      	cmp	r2, r3
   38252:	d806      	bhi.n	38262 <flash_get_page_info+0x5e>
		layout++;
   38254:	3008      	adds	r0, #8
   38256:	9000      	str	r0, [sp, #0]
   38258:	e7e0      	b.n	3821c <flash_get_page_info+0x18>
			index_jmp = (offs - info->start_offset) / info->size;
   3825a:	1a6b      	subs	r3, r5, r1
   3825c:	fbb3 f3f7 	udiv	r3, r3, r7
   38260:	e7eb      	b.n	3823a <flash_get_page_info+0x36>
			return 0;
   38262:	2000      	movs	r0, #0
   38264:	e7e0      	b.n	38228 <flash_get_page_info+0x24>

00038266 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   38266:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   38268:	2200      	movs	r2, #0
   3826a:	f7ff bfcb 	b.w	38204 <flash_get_page_info>

0003826e <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   3826e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   38272:	6883      	ldr	r3, [r0, #8]
{
   38274:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   38276:	691b      	ldr	r3, [r3, #16]
{
   38278:	4688      	mov	r8, r1
   3827a:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   3827c:	a901      	add	r1, sp, #4
   3827e:	aa02      	add	r2, sp, #8
   38280:	4798      	blx	r3
	off_t off = 0;
   38282:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   38284:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   38286:	4625      	mov	r5, r4
   38288:	9b02      	ldr	r3, [sp, #8]
   3828a:	42ab      	cmp	r3, r5
   3828c:	d802      	bhi.n	38294 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   3828e:	b006      	add	sp, #24
   38290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   38294:	9f01      	ldr	r7, [sp, #4]
   38296:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   3829a:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   3829c:	687b      	ldr	r3, [r7, #4]
   3829e:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   382a0:	683a      	ldr	r2, [r7, #0]
   382a2:	42b2      	cmp	r2, r6
   382a4:	eb0a 0306 	add.w	r3, sl, r6
   382a8:	d802      	bhi.n	382b0 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   382aa:	3501      	adds	r5, #1
   382ac:	469a      	mov	sl, r3
   382ae:	e7eb      	b.n	38288 <flash_page_foreach+0x1a>
			page_info.start_offset = off;
   382b0:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   382b2:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   382b4:	4649      	mov	r1, r9
   382b6:	a803      	add	r0, sp, #12
   382b8:	47c0      	blx	r8
   382ba:	2800      	cmp	r0, #0
   382bc:	d0e7      	beq.n	3828e <flash_page_foreach+0x20>
			off += page_info.size;
   382be:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   382c0:	3601      	adds	r6, #1
			off += page_info.size;
   382c2:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   382c4:	e7ec      	b.n	382a0 <flash_page_foreach+0x32>

000382c6 <uart_nrfx_config_get>:
	struct uart_nrfx_data *data = dev->data;
   382c6:	6902      	ldr	r2, [r0, #16]
{
   382c8:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   382ca:	e892 0003 	ldmia.w	r2, {r0, r1}
   382ce:	e883 0003 	stmia.w	r3, {r0, r1}
}
   382d2:	2000      	movs	r0, #0
   382d4:	4770      	bx	lr

000382d6 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   382d6:	2000      	movs	r0, #0
   382d8:	4770      	bx	lr

000382da <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   382da:	b538      	push	{r3, r4, r5, lr}
   382dc:	460c      	mov	r4, r1
   382de:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   382e0:	f7df fa50 	bl	17784 <bt_is_ready>
   382e4:	b128      	cbz	r0, 382f2 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   382e6:	4629      	mov	r1, r5
   382e8:	4620      	mov	r0, r4
}
   382ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   382ee:	f7de bc93 	b.w	16c18 <bt_hci_le_rand>
}
   382f2:	f06f 000a 	mvn.w	r0, #10
   382f6:	bd38      	pop	{r3, r4, r5, pc}

000382f8 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   382f8:	4770      	bx	lr

000382fa <sys_clock_cycle_get_32>:
{
   382fa:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   382fc:	f7f7 fb24 	bl	2f948 <z_nrf_rtc_timer_read>
}
   38300:	bd08      	pop	{r3, pc}

00038302 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   38302:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   38304:	6843      	ldr	r3, [r0, #4]
   38306:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   38308:	7a05      	ldrb	r5, [r0, #8]
   3830a:	6844      	ldr	r4, [r0, #4]
   3830c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   38310:	42a3      	cmp	r3, r4
   38312:	d302      	bcc.n	3831a <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   38314:	f06f 0001 	mvn.w	r0, #1
}
   38318:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   3831a:	795c      	ldrb	r4, [r3, #5]
   3831c:	428c      	cmp	r4, r1
   3831e:	d001      	beq.n	38324 <pinctrl_lookup_state+0x22>
		(*state)++;
   38320:	3308      	adds	r3, #8
   38322:	e7f0      	b.n	38306 <pinctrl_lookup_state+0x4>
			return 0;
   38324:	2000      	movs	r0, #0
   38326:	e7f7      	b.n	38318 <pinctrl_lookup_state+0x16>

00038328 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   38328:	4700      	bx	r0

0003832a <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   3832a:	f000 bd40 	b.w	38dae <z_impl_k_busy_wait>

0003832e <nrfx_clock_enable>:
{
   3832e:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   38330:	2000      	movs	r0, #0
   38332:	f7dc faff 	bl	14934 <arch_irq_is_enabled>
   38336:	b908      	cbnz	r0, 3833c <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   38338:	f7dc fada 	bl	148f0 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   3833c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   38340:	2200      	movs	r2, #0
   38342:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   38346:	bd08      	pop	{r3, pc}

00038348 <nrfx_clock_start>:
{
   38348:	b508      	push	{r3, lr}
    switch (domain)
   3834a:	b110      	cbz	r0, 38352 <nrfx_clock_start+0xa>
   3834c:	2801      	cmp	r0, #1
   3834e:	d02c      	beq.n	383aa <nrfx_clock_start+0x62>
}
   38350:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   38352:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   38356:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   3835a:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   3835e:	03c8      	lsls	r0, r1, #15
   38360:	d40b      	bmi.n	3837a <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   38362:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   38366:	07d9      	lsls	r1, r3, #31
   38368:	d50f      	bpl.n	3838a <nrfx_clock_start+0x42>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   3836a:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   3836e:	079b      	lsls	r3, r3, #30
   38370:	d408      	bmi.n	38384 <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
   38372:	2302      	movs	r3, #2
   38374:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
   38378:	e7ea      	b.n	38350 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   3837a:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   3837e:	2b01      	cmp	r3, #1
   38380:	d004      	beq.n	3838c <nrfx_clock_start+0x44>
   38382:	b113      	cbz	r3, 3838a <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   38384:	2000      	movs	r0, #0
   38386:	f7f7 fe79 	bl	3007c <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   3838a:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
   3838c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   38390:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   38394:	2300      	movs	r3, #0
   38396:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   3839a:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   3839e:	2302      	movs	r3, #2
   383a0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   383a4:	2301      	movs	r3, #1
   383a6:	6093      	str	r3, [r2, #8]
}
   383a8:	e7d2      	b.n	38350 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   383aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   383ae:	2200      	movs	r2, #0
   383b0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   383b4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   383b8:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   383bc:	6018      	str	r0, [r3, #0]
}
   383be:	e7c7      	b.n	38350 <nrfx_clock_start+0x8>

000383c0 <nrfx_clock_stop>:
    clock_stop(domain);
   383c0:	f7f7 be5c 	b.w	3007c <clock_stop>

000383c4 <nrf_gpio_reconfigure>:
{
   383c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   383c6:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   383c8:	a801      	add	r0, sp, #4
{
   383ca:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   383ce:	4616      	mov	r6, r2
   383d0:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   383d2:	f7f7 fefb 	bl	301cc <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   383d6:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   383d8:	f1b6 0c00 	subs.w	ip, r6, #0
   383dc:	bf18      	it	ne
   383de:	f04f 0c01 	movne.w	ip, #1
   383e2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   383e6:	1e0b      	subs	r3, r1, #0
   383e8:	bf18      	it	ne
   383ea:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   383ec:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   383ee:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   383f2:	bf14      	ite	ne
   383f4:	f04f 0c0c 	movne.w	ip, #12
   383f8:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   383fc:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   383fe:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   38402:	bf14      	ite	ne
   38404:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   38408:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   3840c:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   3840e:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   38412:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   38416:	bf14      	ite	ne
   38418:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   3841c:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   38420:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   38424:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   38428:	b101      	cbz	r1, 3842c <nrf_gpio_reconfigure+0x68>
   3842a:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   3842c:	b10e      	cbz	r6, 38432 <nrf_gpio_reconfigure+0x6e>
   3842e:	7836      	ldrb	r6, [r6, #0]
   38430:	0076      	lsls	r6, r6, #1
   38432:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   38434:	b10d      	cbz	r5, 3843a <nrf_gpio_reconfigure+0x76>
   38436:	782d      	ldrb	r5, [r5, #0]
   38438:	00ad      	lsls	r5, r5, #2
   3843a:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   3843c:	b10c      	cbz	r4, 38442 <nrf_gpio_reconfigure+0x7e>
   3843e:	7824      	ldrb	r4, [r4, #0]
   38440:	0224      	lsls	r4, r4, #8
   38442:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   38444:	b10f      	cbz	r7, 3844a <nrf_gpio_reconfigure+0x86>
   38446:	783f      	ldrb	r7, [r7, #0]
   38448:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   3844a:	430c      	orrs	r4, r1
   3844c:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   3844e:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   38452:	b003      	add	sp, #12
   38454:	bdf0      	pop	{r4, r5, r6, r7, pc}

00038456 <nrf_gpio_cfg_sense_set>:
{
   38456:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   38458:	f10d 030f 	add.w	r3, sp, #15
   3845c:	9301      	str	r3, [sp, #4]
   3845e:	2300      	movs	r3, #0
{
   38460:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   38464:	9300      	str	r3, [sp, #0]
   38466:	461a      	mov	r2, r3
   38468:	4619      	mov	r1, r3
   3846a:	f7ff ffab 	bl	383c4 <nrf_gpio_reconfigure>
}
   3846e:	b005      	add	sp, #20
   38470:	f85d fb04 	ldr.w	pc, [sp], #4

00038474 <nrfx_nvmc_flash_size_get>:
   38474:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   38478:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   3847a:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   3847c:	4350      	muls	r0, r2
   3847e:	4770      	bx	lr

00038480 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   38480:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   38484:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   38486:	4770      	bx	lr

00038488 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   38488:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3848c:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   3848e:	4770      	bx	lr

00038490 <nrf_gpio_cfg_default>:
{
   38490:	b507      	push	{r0, r1, r2, lr}
   38492:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   38494:	a801      	add	r0, sp, #4
   38496:	f7f8 fa3b 	bl	30910 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   3849a:	9b01      	ldr	r3, [sp, #4]
   3849c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   384a0:	2202      	movs	r2, #2
   384a2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   384a6:	b003      	add	sp, #12
   384a8:	f85d fb04 	ldr.w	pc, [sp], #4

000384ac <nrf_gpio_pin_set>:
{
   384ac:	b507      	push	{r0, r1, r2, lr}
   384ae:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   384b0:	a801      	add	r0, sp, #4
   384b2:	f7f8 fa2d 	bl	30910 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   384b6:	9a01      	ldr	r2, [sp, #4]
   384b8:	2301      	movs	r3, #1
   384ba:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   384bc:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   384c0:	b003      	add	sp, #12
   384c2:	f85d fb04 	ldr.w	pc, [sp], #4

000384c6 <nrf_gpio_pin_clear>:
{
   384c6:	b507      	push	{r0, r1, r2, lr}
   384c8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   384ca:	a801      	add	r0, sp, #4
   384cc:	f7f8 fa20 	bl	30910 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   384d0:	9a01      	ldr	r2, [sp, #4]
   384d2:	2301      	movs	r3, #1
   384d4:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   384d6:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   384da:	b003      	add	sp, #12
   384dc:	f85d fb04 	ldr.w	pc, [sp], #4

000384e0 <set_ss_pin_state>:
    if (p_cb->use_hw_ss)
   384e0:	7f83      	ldrb	r3, [r0, #30]
   384e2:	075a      	lsls	r2, r3, #29
   384e4:	d40b      	bmi.n	384fe <set_ss_pin_state+0x1e>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   384e6:	7fc0      	ldrb	r0, [r0, #31]
   384e8:	28ff      	cmp	r0, #255	; 0xff
   384ea:	d008      	beq.n	384fe <set_ss_pin_state+0x1e>
        nrf_gpio_pin_write(p_cb->ss_pin,
   384ec:	079b      	lsls	r3, r3, #30
   384ee:	bf58      	it	pl
   384f0:	f081 0101 	eorpl.w	r1, r1, #1
    if (value == 0)
   384f4:	b909      	cbnz	r1, 384fa <set_ss_pin_state+0x1a>
        nrf_gpio_pin_clear(pin_number);
   384f6:	f7ff bfe6 	b.w	384c6 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   384fa:	f7ff bfd7 	b.w	384ac <nrf_gpio_pin_set>
}
   384fe:	4770      	bx	lr

00038500 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   38500:	7b0a      	ldrb	r2, [r1, #12]
{
   38502:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
   38504:	2a03      	cmp	r2, #3
   38506:	d829      	bhi.n	3855c <xfer_completeness_check+0x5c>
   38508:	e8df f002 	tbb	[pc, r2]
   3850c:	02192521 	.word	0x02192521
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   38510:	688a      	ldr	r2, [r1, #8]
   38512:	0350      	lsls	r0, r2, #13
   38514:	d504      	bpl.n	38520 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
   38516:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
   3851a:	6908      	ldr	r0, [r1, #16]
   3851c:	4290      	cmp	r0, r2
   3851e:	d107      	bne.n	38530 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   38520:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   38522:	0352      	lsls	r2, r2, #13
   38524:	d41a      	bmi.n	3855c <xfer_completeness_check+0x5c>
   38526:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   3852a:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   3852c:	4291      	cmp	r1, r2
   3852e:	d015      	beq.n	3855c <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   38530:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   38532:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   38534:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   38538:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   3853c:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   3853e:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   38542:	6908      	ldr	r0, [r1, #16]
   38544:	4290      	cmp	r0, r2
   38546:	d1f3      	bne.n	38530 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
   38548:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   3854c:	e7ed      	b.n	3852a <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
   3854e:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   38552:	6909      	ldr	r1, [r1, #16]
   38554:	e7ea      	b.n	3852c <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
   38556:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   3855a:	e7fa      	b.n	38552 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   3855c:	2001      	movs	r0, #1
}
   3855e:	4770      	bx	lr

00038560 <nrf_gpio_pin_set>:
{
   38560:	b507      	push	{r0, r1, r2, lr}
   38562:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   38564:	a801      	add	r0, sp, #4
   38566:	f7f8 fe97 	bl	31298 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   3856a:	9a01      	ldr	r2, [sp, #4]
   3856c:	2301      	movs	r3, #1
   3856e:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   38570:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   38574:	b003      	add	sp, #12
   38576:	f85d fb04 	ldr.w	pc, [sp], #4

0003857a <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   3857a:	4770      	bx	lr

0003857c <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   3857c:	b140      	cbz	r0, 38590 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   3857e:	68c3      	ldr	r3, [r0, #12]
   38580:	7858      	ldrb	r0, [r3, #1]
   38582:	f010 0001 	ands.w	r0, r0, #1
   38586:	bf1e      	ittt	ne
   38588:	7818      	ldrbne	r0, [r3, #0]
   3858a:	fab0 f080 	clzne	r0, r0
   3858e:	0940      	lsrne	r0, r0, #5
}
   38590:	4770      	bx	lr

00038592 <arch_system_halt>:
	__asm__ volatile(
   38592:	f04f 0220 	mov.w	r2, #32
   38596:	f3ef 8311 	mrs	r3, BASEPRI
   3859a:	f382 8812 	msr	BASEPRI_MAX, r2
   3859e:	f3bf 8f6f 	isb	sy
	for (;;) {
   385a2:	e7fe      	b.n	385a2 <arch_system_halt+0x10>

000385a4 <z_early_memset>:
	(void) memset(dst, c, n);
   385a4:	f7fc bfd2 	b.w	3554c <memset>

000385a8 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   385a8:	f7fc bfc5 	b.w	35536 <memcpy>

000385ac <k_heap_init>:
{
   385ac:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   385ae:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   385b2:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   385b6:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   385b8:	f7fa bd8c 	b.w	330d4 <sys_heap_init>

000385bc <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   385bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   385c0:	b085      	sub	sp, #20
   385c2:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   385c6:	4607      	mov	r7, r0
   385c8:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   385ca:	4650      	mov	r0, sl
   385cc:	4621      	mov	r1, r4
{
   385ce:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   385d0:	f000 fbf1 	bl	38db6 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   385d4:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   385d8:	bf08      	it	eq
   385da:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   385de:	4605      	mov	r5, r0
   385e0:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   385e2:	bf04      	itt	eq
   385e4:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
   385e8:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   385ec:	f107 0a14 	add.w	sl, r7, #20
   385f0:	f04f 0320 	mov.w	r3, #32
   385f4:	f3ef 8411 	mrs	r4, BASEPRI
   385f8:	f383 8812 	msr	BASEPRI_MAX, r3
   385fc:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   38600:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   38604:	464a      	mov	r2, r9
   38606:	4641      	mov	r1, r8
   38608:	4638      	mov	r0, r7
   3860a:	f7fa fcfc 	bl	33006 <sys_heap_aligned_alloc>
   3860e:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   38610:	f7fa f93a 	bl	32888 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   38614:	9b03      	ldr	r3, [sp, #12]
   38616:	b13b      	cbz	r3, 38628 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   38618:	f384 8811 	msr	BASEPRI, r4
   3861c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   38620:	4618      	mov	r0, r3
   38622:	b005      	add	sp, #20
   38624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   38628:	1a28      	subs	r0, r5, r0
   3862a:	eb66 0101 	sbc.w	r1, r6, r1
   3862e:	2801      	cmp	r0, #1
   38630:	f171 0200 	sbcs.w	r2, r1, #0
   38634:	dbf0      	blt.n	38618 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   38636:	e9cd 0100 	strd	r0, r1, [sp]
   3863a:	465a      	mov	r2, fp
   3863c:	4621      	mov	r1, r4
   3863e:	4650      	mov	r0, sl
   38640:	f7f9 fdcc 	bl	321dc <z_pend_curr>
	__asm__ volatile(
   38644:	f04f 0320 	mov.w	r3, #32
   38648:	f3ef 8411 	mrs	r4, BASEPRI
   3864c:	f383 8812 	msr	BASEPRI_MAX, r3
   38650:	f3bf 8f6f 	isb	sy
	return k;
   38654:	e7d6      	b.n	38604 <k_heap_aligned_alloc+0x48>

00038656 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   38656:	b538      	push	{r3, r4, r5, lr}
   38658:	4604      	mov	r4, r0
   3865a:	f04f 0320 	mov.w	r3, #32
   3865e:	f3ef 8511 	mrs	r5, BASEPRI
   38662:	f383 8812 	msr	BASEPRI_MAX, r3
   38666:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   3866a:	f7fa fc94 	bl	32f96 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   3866e:	f104 000c 	add.w	r0, r4, #12
   38672:	f000 fb21 	bl	38cb8 <z_unpend_all>
   38676:	b130      	cbz	r0, 38686 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   38678:	4629      	mov	r1, r5
   3867a:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   3867e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   38682:	f7f9 be0f 	b.w	322a4 <z_reschedule>
	__asm__ volatile(
   38686:	f385 8811 	msr	BASEPRI, r5
   3868a:	f3bf 8f6f 	isb	sy
}
   3868e:	bd38      	pop	{r3, r4, r5, pc}

00038690 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   38690:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   38694:	4313      	orrs	r3, r2
   38696:	f013 0303 	ands.w	r3, r3, #3
   3869a:	d10c      	bne.n	386b6 <create_free_list+0x26>
	slab->free_list = NULL;
   3869c:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   3869e:	6881      	ldr	r1, [r0, #8]
   386a0:	4299      	cmp	r1, r3
   386a2:	d801      	bhi.n	386a8 <create_free_list+0x18>
	return 0;
   386a4:	2000      	movs	r0, #0
   386a6:	4770      	bx	lr
		*(char **)p = slab->free_list;
   386a8:	6941      	ldr	r1, [r0, #20]
   386aa:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   386ac:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   386ae:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   386b0:	3301      	adds	r3, #1
		p += slab->block_size;
   386b2:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   386b4:	e7f3      	b.n	3869e <create_free_list+0xe>
		return -EINVAL;
   386b6:	f06f 0015 	mvn.w	r0, #21
}
   386ba:	4770      	bx	lr

000386bc <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   386bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   386be:	4604      	mov	r4, r0
   386c0:	460d      	mov	r5, r1
	__asm__ volatile(
   386c2:	f04f 0320 	mov.w	r3, #32
   386c6:	f3ef 8611 	mrs	r6, BASEPRI
   386ca:	f383 8812 	msr	BASEPRI_MAX, r3
   386ce:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   386d2:	6947      	ldr	r7, [r0, #20]
   386d4:	b977      	cbnz	r7, 386f4 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   386d6:	f000 faa9 	bl	38c2c <z_unpend_first_thread>

		if (pending_thread != NULL) {
   386da:	b158      	cbz	r0, 386f4 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   386dc:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   386de:	6142      	str	r2, [r0, #20]
   386e0:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   386e2:	f000 fa6c 	bl	38bbe <z_ready_thread>
			z_reschedule(&slab->lock, key);
   386e6:	4631      	mov	r1, r6
   386e8:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   386ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   386f0:	f7f9 bdd8 	b.w	322a4 <z_reschedule>
	**(char ***) mem = slab->free_list;
   386f4:	682b      	ldr	r3, [r5, #0]
   386f6:	6962      	ldr	r2, [r4, #20]
   386f8:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   386fa:	682b      	ldr	r3, [r5, #0]
   386fc:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   386fe:	69a3      	ldr	r3, [r4, #24]
   38700:	3b01      	subs	r3, #1
   38702:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   38704:	f386 8811 	msr	BASEPRI, r6
   38708:	f3bf 8f6f 	isb	sy
}
   3870c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003870e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   3870e:	f3ef 8005 	mrs	r0, IPSR
}
   38712:	3800      	subs	r0, #0
   38714:	bf18      	it	ne
   38716:	2001      	movne	r0, #1
   38718:	4770      	bx	lr

0003871a <z_impl_k_thread_name_set>:
}
   3871a:	f06f 0057 	mvn.w	r0, #87	; 0x57
   3871e:	4770      	bx	lr

00038720 <k_thread_name_get>:
}
   38720:	2000      	movs	r0, #0
   38722:	4770      	bx	lr

00038724 <z_impl_k_thread_start>:
	z_sched_start(thread);
   38724:	f7f9 bdd0 	b.w	322c8 <z_sched_start>

00038728 <z_pm_save_idle_exit>:
{
   38728:	b508      	push	{r3, lr}
	pm_system_resume();
   3872a:	f7db fe25 	bl	14378 <pm_system_resume>
}
   3872e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   38732:	f7ff bde1 	b.w	382f8 <sys_clock_idle_exit>

00038736 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   38736:	f990 300e 	ldrsb.w	r3, [r0, #14]
   3873a:	428b      	cmp	r3, r1
   3873c:	d001      	beq.n	38742 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   3873e:	f7f9 bd6b 	b.w	32218 <z_set_prio>
}
   38742:	2000      	movs	r0, #0
   38744:	4770      	bx	lr

00038746 <z_impl_k_mutex_init>:
{
   38746:	4603      	mov	r3, r0
	mutex->owner = NULL;
   38748:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   3874a:	e9c3 0002 	strd	r0, r0, [r3, #8]
   3874e:	e9c3 3300 	strd	r3, r3, [r3]
}
   38752:	4770      	bx	lr

00038754 <queue_insert>:
{
   38754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   38758:	4699      	mov	r9, r3
   3875a:	4604      	mov	r4, r0
   3875c:	f89d 3020 	ldrb.w	r3, [sp, #32]
   38760:	460d      	mov	r5, r1
   38762:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   38764:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   38768:	f04f 0220 	mov.w	r2, #32
   3876c:	f3ef 8711 	mrs	r7, BASEPRI
   38770:	f382 8812 	msr	BASEPRI_MAX, r2
   38774:	f3bf 8f6f 	isb	sy
	if (is_append) {
   38778:	b103      	cbz	r3, 3877c <queue_insert+0x28>
	return list->tail;
   3877a:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   3877c:	4630      	mov	r0, r6
   3877e:	f000 fa55 	bl	38c2c <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   38782:	b158      	cbz	r0, 3879c <queue_insert+0x48>
   38784:	2300      	movs	r3, #0
   38786:	67c3      	str	r3, [r0, #124]	; 0x7c
   38788:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   3878c:	f000 fa17 	bl	38bbe <z_ready_thread>
	z_reschedule(&queue->lock, key);
   38790:	4630      	mov	r0, r6
   38792:	4639      	mov	r1, r7
   38794:	f7f9 fd86 	bl	322a4 <z_reschedule>
		return 0;
   38798:	2000      	movs	r0, #0
   3879a:	e00c      	b.n	387b6 <queue_insert+0x62>
	if (alloc) {
   3879c:	f1b9 0f00 	cmp.w	r9, #0
   387a0:	d01b      	beq.n	387da <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   387a2:	2108      	movs	r1, #8
   387a4:	f7fa f9c4 	bl	32b30 <z_thread_aligned_alloc>
		if (anode == NULL) {
   387a8:	b938      	cbnz	r0, 387ba <queue_insert+0x66>
	__asm__ volatile(
   387aa:	f387 8811 	msr	BASEPRI, r7
   387ae:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   387b2:	f06f 000b 	mvn.w	r0, #11
}
   387b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   387ba:	2201      	movs	r2, #1
		anode->data = data;
   387bc:	f8c0 8004 	str.w	r8, [r0, #4]
   387c0:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   387c2:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   387c4:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   387c8:	b95d      	cbnz	r5, 387e2 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   387ca:	6822      	ldr	r2, [r4, #0]
   387cc:	430a      	orrs	r2, r1
   387ce:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   387d0:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   387d2:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   387d4:	b96a      	cbnz	r2, 387f2 <queue_insert+0x9e>
	list->tail = node;
   387d6:	6060      	str	r0, [r4, #4]
}
   387d8:	e00b      	b.n	387f2 <queue_insert+0x9e>
	node->next_and_flags = flags;
   387da:	f8c8 9000 	str.w	r9, [r8]
}
   387de:	4640      	mov	r0, r8
   387e0:	e7ef      	b.n	387c2 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   387e2:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   387e4:	2a03      	cmp	r2, #3
   387e6:	d810      	bhi.n	3880a <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   387e8:	6001      	str	r1, [r0, #0]
	return list->tail;
   387ea:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   387ec:	b939      	cbnz	r1, 387fe <queue_insert+0xaa>
	list->head = node;
   387ee:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   387f2:	2104      	movs	r1, #4
   387f4:	f104 0010 	add.w	r0, r4, #16
   387f8:	f000 fc68 	bl	390cc <z_handle_obj_poll_events>
   387fc:	e7c8      	b.n	38790 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   387fe:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   38800:	f002 0203 	and.w	r2, r2, #3
   38804:	4302      	orrs	r2, r0
   38806:	600a      	str	r2, [r1, #0]
   38808:	e7e5      	b.n	387d6 <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3880a:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   3880e:	430a      	orrs	r2, r1
   38810:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   38812:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   38814:	f002 0203 	and.w	r2, r2, #3
   38818:	ea40 0302 	orr.w	r3, r0, r2
   3881c:	602b      	str	r3, [r5, #0]
}
   3881e:	e7e8      	b.n	387f2 <queue_insert+0x9e>

00038820 <z_queue_node_peek>:
{
   38820:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   38822:	4604      	mov	r4, r0
   38824:	b130      	cbz	r0, 38834 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   38826:	6802      	ldr	r2, [r0, #0]
   38828:	0793      	lsls	r3, r2, #30
   3882a:	d003      	beq.n	38834 <z_queue_node_peek+0x14>
		ret = anode->data;
   3882c:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   3882e:	b109      	cbz	r1, 38834 <z_queue_node_peek+0x14>
			k_free(anode);
   38830:	f000 fc5f 	bl	390f2 <k_free>
}
   38834:	4620      	mov	r0, r4
   38836:	bd10      	pop	{r4, pc}

00038838 <z_impl_k_queue_init>:
	list->head = NULL;
   38838:	2300      	movs	r3, #0
	list->tail = NULL;
   3883a:	e9c0 3300 	strd	r3, r3, [r0]
   3883e:	f100 0308 	add.w	r3, r0, #8
   38842:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   38846:	f100 0310 	add.w	r3, r0, #16
   3884a:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   3884e:	4770      	bx	lr

00038850 <z_impl_k_queue_cancel_wait>:
{
   38850:	b570      	push	{r4, r5, r6, lr}
   38852:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   38854:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   38858:	f04f 0320 	mov.w	r3, #32
   3885c:	f3ef 8611 	mrs	r6, BASEPRI
   38860:	f383 8812 	msr	BASEPRI_MAX, r3
   38864:	f3bf 8f6f 	isb	sy
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   38868:	4628      	mov	r0, r5
   3886a:	f000 f9df 	bl	38c2c <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   3886e:	b120      	cbz	r0, 3887a <z_impl_k_queue_cancel_wait+0x2a>
   38870:	2200      	movs	r2, #0
   38872:	67c2      	str	r2, [r0, #124]	; 0x7c
	thread->base.swap_data = data;
   38874:	6142      	str	r2, [r0, #20]
	z_ready_thread(thread);
   38876:	f000 f9a2 	bl	38bbe <z_ready_thread>
	z_handle_obj_poll_events(&queue->poll_events, state);
   3887a:	f104 0010 	add.w	r0, r4, #16
   3887e:	2108      	movs	r1, #8
   38880:	f000 fc24 	bl	390cc <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   38884:	4631      	mov	r1, r6
   38886:	4628      	mov	r0, r5
}
   38888:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&queue->lock, key);
   3888c:	f7f9 bd0a 	b.w	322a4 <z_reschedule>

00038890 <k_queue_append>:
{
   38890:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   38892:	2301      	movs	r3, #1
   38894:	9300      	str	r3, [sp, #0]
   38896:	2300      	movs	r3, #0
{
   38898:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   3889a:	4619      	mov	r1, r3
   3889c:	f7ff ff5a 	bl	38754 <queue_insert>
}
   388a0:	b003      	add	sp, #12
   388a2:	f85d fb04 	ldr.w	pc, [sp], #4

000388a6 <k_queue_prepend>:
{
   388a6:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   388a8:	2300      	movs	r3, #0
{
   388aa:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   388ac:	9300      	str	r3, [sp, #0]
   388ae:	4619      	mov	r1, r3
   388b0:	f7ff ff50 	bl	38754 <queue_insert>
}
   388b4:	b003      	add	sp, #12
   388b6:	f85d fb04 	ldr.w	pc, [sp], #4

000388ba <z_impl_k_queue_peek_head>:
	return true;
}

void *z_impl_k_queue_peek_head(struct k_queue *queue)
{
	void *ret = z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
   388ba:	6800      	ldr	r0, [r0, #0]
   388bc:	2100      	movs	r1, #0
   388be:	f7ff bfaf 	b.w	38820 <z_queue_node_peek>

000388c2 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   388c2:	b15a      	cbz	r2, 388dc <z_impl_k_sem_init+0x1a>
   388c4:	428a      	cmp	r2, r1
   388c6:	d309      	bcc.n	388dc <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   388c8:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   388cc:	e9c0 1202 	strd	r1, r2, [r0, #8]
   388d0:	e9c0 0000 	strd	r0, r0, [r0]
   388d4:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   388d8:	2000      	movs	r0, #0
   388da:	4770      	bx	lr
		return -EINVAL;
   388dc:	f06f 0015 	mvn.w	r0, #21
}
   388e0:	4770      	bx	lr

000388e2 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   388e2:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   388e4:	2301      	movs	r3, #1
   388e6:	408b      	lsls	r3, r1
   388e8:	ea22 0303 	bic.w	r3, r2, r3
   388ec:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   388ee:	fa22 f001 	lsr.w	r0, r2, r1
}
   388f2:	f000 0001 	and.w	r0, r0, #1
   388f6:	4770      	bx	lr

000388f8 <unschedule_locked>:
{
   388f8:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   388fa:	2103      	movs	r1, #3
{
   388fc:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   388fe:	300c      	adds	r0, #12
   38900:	f7ff ffef 	bl	388e2 <flag_test_and_clear>
   38904:	4604      	mov	r4, r0
   38906:	b118      	cbz	r0, 38910 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   38908:	f105 0010 	add.w	r0, r5, #16
   3890c:	f000 fa07 	bl	38d1e <z_abort_timeout>
}
   38910:	4620      	mov	r0, r4
   38912:	bd38      	pop	{r3, r4, r5, pc}

00038914 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   38914:	b120      	cbz	r0, 38920 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   38916:	2200      	movs	r2, #0
   38918:	4611      	mov	r1, r2
   3891a:	3088      	adds	r0, #136	; 0x88
   3891c:	f000 b9dc 	b.w	38cd8 <z_sched_wake>
}
   38920:	4770      	bx	lr

00038922 <cancel_async_locked>:
{
   38922:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   38924:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   38926:	f3c3 0640 	ubfx	r6, r3, #1, #1
   3892a:	079b      	lsls	r3, r3, #30
{
   3892c:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   3892e:	d416      	bmi.n	3895e <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   38930:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   38932:	2102      	movs	r1, #2
   38934:	300c      	adds	r0, #12
   38936:	f7ff ffd4 	bl	388e2 <flag_test_and_clear>
   3893a:	b180      	cbz	r0, 3895e <cancel_async_locked+0x3c>
	return list->head;
   3893c:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   38940:	b16a      	cbz	r2, 3895e <cancel_async_locked+0x3c>
   38942:	4294      	cmp	r4, r2
   38944:	d11d      	bne.n	38982 <cancel_async_locked+0x60>
	return node->next;
   38946:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   38948:	b99e      	cbnz	r6, 38972 <cancel_async_locked+0x50>
   3894a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
	list->head = node;
   3894e:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   38952:	429c      	cmp	r4, r3
   38954:	d101      	bne.n	3895a <cancel_async_locked+0x38>
	list->tail = node;
   38956:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
	parent->next = child;
   3895a:	2300      	movs	r3, #0
   3895c:	6023      	str	r3, [r4, #0]
	return *flagp;
   3895e:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   38960:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   38964:	bf1e      	ittt	ne
   38966:	f043 0302 	orrne.w	r3, r3, #2
   3896a:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   3896c:	f040 0002 	orrne.w	r0, r0, #2
}
   38970:	bd70      	pop	{r4, r5, r6, pc}
   38972:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   38974:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
   38978:	4294      	cmp	r4, r2
	list->tail = node;
   3897a:	bf08      	it	eq
   3897c:	f8c5 6084 	streq.w	r6, [r5, #132]	; 0x84
}
   38980:	e7eb      	b.n	3895a <cancel_async_locked+0x38>
	return node->next;
   38982:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   38984:	6812      	ldr	r2, [r2, #0]
   38986:	e7db      	b.n	38940 <cancel_async_locked+0x1e>

00038988 <work_timeout>:
{
   38988:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3898a:	4604      	mov	r4, r0
   3898c:	f04f 0320 	mov.w	r3, #32
   38990:	f3ef 8511 	mrs	r5, BASEPRI
   38994:	f383 8812 	msr	BASEPRI_MAX, r3
   38998:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   3899c:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   3899e:	f1a0 0610 	sub.w	r6, r0, #16
   389a2:	2103      	movs	r1, #3
   389a4:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   389a6:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   389a8:	f7ff ff9b 	bl	388e2 <flag_test_and_clear>
   389ac:	b128      	cbz	r0, 389ba <work_timeout+0x32>
		queue = dw->queue;
   389ae:	69a3      	ldr	r3, [r4, #24]
   389b0:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   389b2:	a901      	add	r1, sp, #4
   389b4:	4630      	mov	r0, r6
   389b6:	f7f9 f9d1 	bl	31d5c <submit_to_queue_locked>
	__asm__ volatile(
   389ba:	f385 8811 	msr	BASEPRI, r5
   389be:	f3bf 8f6f 	isb	sy
}
   389c2:	b002      	add	sp, #8
   389c4:	bd70      	pop	{r4, r5, r6, pc}

000389c6 <k_work_init>:
{
   389c6:	b538      	push	{r3, r4, r5, lr}
   389c8:	4604      	mov	r4, r0
   389ca:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   389cc:	2210      	movs	r2, #16
   389ce:	2100      	movs	r1, #0
   389d0:	f7fc fdbc 	bl	3554c <memset>
   389d4:	6065      	str	r5, [r4, #4]
}
   389d6:	bd38      	pop	{r3, r4, r5, pc}

000389d8 <k_work_busy_get>:
	__asm__ volatile(
   389d8:	f04f 0220 	mov.w	r2, #32
   389dc:	f3ef 8311 	mrs	r3, BASEPRI
   389e0:	f382 8812 	msr	BASEPRI_MAX, r2
   389e4:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   389e8:	68c0      	ldr	r0, [r0, #12]
   389ea:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   389ee:	f383 8811 	msr	BASEPRI, r3
   389f2:	f3bf 8f6f 	isb	sy
}
   389f6:	4770      	bx	lr

000389f8 <z_work_submit_to_queue>:
{
   389f8:	b513      	push	{r0, r1, r4, lr}
   389fa:	9001      	str	r0, [sp, #4]
   389fc:	4608      	mov	r0, r1
	__asm__ volatile(
   389fe:	f04f 0320 	mov.w	r3, #32
   38a02:	f3ef 8411 	mrs	r4, BASEPRI
   38a06:	f383 8812 	msr	BASEPRI_MAX, r3
   38a0a:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   38a0e:	a901      	add	r1, sp, #4
   38a10:	f7f9 f9a4 	bl	31d5c <submit_to_queue_locked>
	__asm__ volatile(
   38a14:	f384 8811 	msr	BASEPRI, r4
   38a18:	f3bf 8f6f 	isb	sy
}
   38a1c:	b002      	add	sp, #8
   38a1e:	bd10      	pop	{r4, pc}

00038a20 <k_work_submit_to_queue>:
{
   38a20:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   38a22:	f7ff ffe9 	bl	389f8 <z_work_submit_to_queue>
	if (ret > 0) {
   38a26:	1e04      	subs	r4, r0, #0
   38a28:	dd09      	ble.n	38a3e <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   38a2a:	f04f 0320 	mov.w	r3, #32
   38a2e:	f3ef 8011 	mrs	r0, BASEPRI
   38a32:	f383 8812 	msr	BASEPRI_MAX, r3
   38a36:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   38a3a:	f000 f927 	bl	38c8c <z_reschedule_irqlock>
}
   38a3e:	4620      	mov	r0, r4
   38a40:	bd10      	pop	{r4, pc}

00038a42 <k_work_queue_init>:
{
   38a42:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   38a44:	22a0      	movs	r2, #160	; 0xa0
   38a46:	2100      	movs	r1, #0
   38a48:	f7fc fd80 	bl	3554c <memset>
}
   38a4c:	bd08      	pop	{r3, pc}

00038a4e <k_work_init_delayable>:
{
   38a4e:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   38a50:	2230      	movs	r2, #48	; 0x30
{
   38a52:	4604      	mov	r4, r0
   38a54:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   38a56:	2100      	movs	r1, #0
   38a58:	f7fc fd78 	bl	3554c <memset>
   38a5c:	f44f 7380 	mov.w	r3, #256	; 0x100
   38a60:	6065      	str	r5, [r4, #4]
   38a62:	60e3      	str	r3, [r4, #12]
}
   38a64:	bd38      	pop	{r3, r4, r5, pc}

00038a66 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   38a66:	f7ff bfb7 	b.w	389d8 <k_work_busy_get>

00038a6a <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   38a6a:	b538      	push	{r3, r4, r5, lr}
   38a6c:	4604      	mov	r4, r0
   38a6e:	f04f 0320 	mov.w	r3, #32
   38a72:	f3ef 8511 	mrs	r5, BASEPRI
   38a76:	f383 8812 	msr	BASEPRI_MAX, r3
   38a7a:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   38a7e:	f7ff ff3b 	bl	388f8 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   38a82:	4620      	mov	r0, r4
   38a84:	f7ff ff4d 	bl	38922 <cancel_async_locked>
	__asm__ volatile(
   38a88:	f385 8811 	msr	BASEPRI, r5
   38a8c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   38a90:	bd38      	pop	{r3, r4, r5, pc}

00038a92 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   38a92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38a94:	4604      	mov	r4, r0
   38a96:	460d      	mov	r5, r1
	__asm__ volatile(
   38a98:	f04f 0320 	mov.w	r3, #32
   38a9c:	f3ef 8611 	mrs	r6, BASEPRI
   38aa0:	f383 8812 	msr	BASEPRI_MAX, r3
   38aa4:	f3bf 8f6f 	isb	sy
	return *flagp;
   38aa8:	68c3      	ldr	r3, [r0, #12]
   38aaa:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   38aae:	2b00      	cmp	r3, #0
   38ab0:	bf14      	ite	ne
   38ab2:	2701      	movne	r7, #1
   38ab4:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   38ab6:	d105      	bne.n	38ac4 <k_work_cancel_delayable_sync+0x32>
	__asm__ volatile(
   38ab8:	f386 8811 	msr	BASEPRI, r6
   38abc:	f3bf 8f6f 	isb	sy
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   38ac0:	4638      	mov	r0, r7
   38ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	(void)unschedule_locked(dwork);
   38ac4:	f7ff ff18 	bl	388f8 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   38ac8:	4620      	mov	r0, r4
   38aca:	f7ff ff2a 	bl	38922 <cancel_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   38ace:	4629      	mov	r1, r5
   38ad0:	4620      	mov	r0, r4
   38ad2:	f7f9 f925 	bl	31d20 <cancel_sync_locked>
   38ad6:	f386 8811 	msr	BASEPRI, r6
   38ada:	f3bf 8f6f 	isb	sy
	if (need_wait) {
   38ade:	2800      	cmp	r0, #0
   38ae0:	d0ee      	beq.n	38ac0 <k_work_cancel_delayable_sync+0x2e>
	return z_impl_k_sem_take(sem, timeout);
   38ae2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   38ae6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   38aea:	f105 0008 	add.w	r0, r5, #8
   38aee:	f7f9 f817 	bl	31b20 <z_impl_k_sem_take>
   38af2:	e7e5      	b.n	38ac0 <k_work_cancel_delayable_sync+0x2e>

00038af4 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   38af4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   38af8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   38afa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   38afc:	2300      	movs	r3, #0
	node->prev = NULL;
   38afe:	e9c0 3300 	strd	r3, r3, [r0]
}
   38b02:	4770      	bx	lr

00038b04 <unpend_thread_no_timeout>:
{
   38b04:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   38b06:	f7ff fff5 	bl	38af4 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   38b0a:	7b43      	ldrb	r3, [r0, #13]
   38b0c:	f023 0302 	bic.w	r3, r3, #2
   38b10:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   38b12:	2300      	movs	r3, #0
   38b14:	6083      	str	r3, [r0, #8]
}
   38b16:	bd08      	pop	{r3, pc}

00038b18 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   38b18:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   38b1c:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   38b20:	4283      	cmp	r3, r0
		return b2 - b1;
   38b22:	bf14      	ite	ne
   38b24:	1ac0      	subne	r0, r0, r3
	return 0;
   38b26:	2000      	moveq	r0, #0
}
   38b28:	4770      	bx	lr

00038b2a <z_thread_timeout>:
{
   38b2a:	b510      	push	{r4, lr}
   38b2c:	4601      	mov	r1, r0
	__asm__ volatile(
   38b2e:	f04f 0320 	mov.w	r3, #32
   38b32:	f3ef 8411 	mrs	r4, BASEPRI
   38b36:	f383 8812 	msr	BASEPRI_MAX, r3
   38b3a:	f3bf 8f6f 	isb	sy
		if (!killed) {
   38b3e:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   38b42:	f013 0f28 	tst.w	r3, #40	; 0x28
   38b46:	d10d      	bne.n	38b64 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   38b48:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   38b4c:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   38b4e:	b10b      	cbz	r3, 38b54 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   38b50:	f7ff ffd8 	bl	38b04 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   38b54:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   38b58:	f023 0314 	bic.w	r3, r3, #20
   38b5c:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   38b60:	f7f9 fa64 	bl	3202c <ready_thread>
	__asm__ volatile(
   38b64:	f384 8811 	msr	BASEPRI, r4
   38b68:	f3bf 8f6f 	isb	sy
}
   38b6c:	bd10      	pop	{r4, pc}

00038b6e <add_to_waitq_locked>:
{
   38b6e:	b538      	push	{r3, r4, r5, lr}
   38b70:	4604      	mov	r4, r0
   38b72:	460d      	mov	r5, r1
	unready_thread(thread);
   38b74:	f7f9 fa8e 	bl	32094 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   38b78:	7b63      	ldrb	r3, [r4, #13]
   38b7a:	f043 0302 	orr.w	r3, r3, #2
   38b7e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   38b80:	b1e5      	cbz	r5, 38bbc <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   38b82:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   38b84:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38b86:	429d      	cmp	r5, r3
   38b88:	d109      	bne.n	38b9e <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   38b8a:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   38b8c:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   38b90:	601c      	str	r4, [r3, #0]
	list->tail = node;
   38b92:	606c      	str	r4, [r5, #4]
}
   38b94:	e012      	b.n	38bbc <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   38b96:	686a      	ldr	r2, [r5, #4]
   38b98:	4293      	cmp	r3, r2
   38b9a:	d0f6      	beq.n	38b8a <add_to_waitq_locked+0x1c>
   38b9c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   38b9e:	2b00      	cmp	r3, #0
   38ba0:	d0f3      	beq.n	38b8a <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   38ba2:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   38ba6:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   38baa:	428a      	cmp	r2, r1
   38bac:	d0f3      	beq.n	38b96 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   38bae:	4291      	cmp	r1, r2
   38bb0:	ddf1      	ble.n	38b96 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   38bb2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   38bb4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   38bb8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   38bba:	605c      	str	r4, [r3, #4]
}
   38bbc:	bd38      	pop	{r3, r4, r5, pc}

00038bbe <z_ready_thread>:
{
   38bbe:	b510      	push	{r4, lr}
	__asm__ volatile(
   38bc0:	f04f 0320 	mov.w	r3, #32
   38bc4:	f3ef 8411 	mrs	r4, BASEPRI
   38bc8:	f383 8812 	msr	BASEPRI_MAX, r3
   38bcc:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   38bd0:	f7f9 fa2c 	bl	3202c <ready_thread>
	__asm__ volatile(
   38bd4:	f384 8811 	msr	BASEPRI, r4
   38bd8:	f3bf 8f6f 	isb	sy
}
   38bdc:	bd10      	pop	{r4, pc}

00038bde <z_unpend_thread_no_timeout>:
{
   38bde:	b508      	push	{r3, lr}
	__asm__ volatile(
   38be0:	f04f 0320 	mov.w	r3, #32
   38be4:	f3ef 8111 	mrs	r1, BASEPRI
   38be8:	f383 8812 	msr	BASEPRI_MAX, r3
   38bec:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   38bf0:	f7ff ff88 	bl	38b04 <unpend_thread_no_timeout>
	__asm__ volatile(
   38bf4:	f381 8811 	msr	BASEPRI, r1
   38bf8:	f3bf 8f6f 	isb	sy
}
   38bfc:	bd08      	pop	{r3, pc}

00038bfe <z_unpend1_no_timeout>:
{
   38bfe:	b508      	push	{r3, lr}
   38c00:	4603      	mov	r3, r0
	__asm__ volatile(
   38c02:	f04f 0220 	mov.w	r2, #32
   38c06:	f3ef 8111 	mrs	r1, BASEPRI
   38c0a:	f382 8812 	msr	BASEPRI_MAX, r2
   38c0e:	f3bf 8f6f 	isb	sy
	return list->head == list;
   38c12:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38c14:	4283      	cmp	r3, r0
   38c16:	d007      	beq.n	38c28 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   38c18:	b108      	cbz	r0, 38c1e <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   38c1a:	f7ff ff73 	bl	38b04 <unpend_thread_no_timeout>
	__asm__ volatile(
   38c1e:	f381 8811 	msr	BASEPRI, r1
   38c22:	f3bf 8f6f 	isb	sy
}
   38c26:	bd08      	pop	{r3, pc}
   38c28:	2000      	movs	r0, #0
   38c2a:	e7f8      	b.n	38c1e <z_unpend1_no_timeout+0x20>

00038c2c <z_unpend_first_thread>:
{
   38c2c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   38c2e:	f04f 0320 	mov.w	r3, #32
   38c32:	f3ef 8511 	mrs	r5, BASEPRI
   38c36:	f383 8812 	msr	BASEPRI_MAX, r3
   38c3a:	f3bf 8f6f 	isb	sy
	return list->head == list;
   38c3e:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38c40:	42a0      	cmp	r0, r4
   38c42:	d00d      	beq.n	38c60 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   38c44:	b134      	cbz	r4, 38c54 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   38c46:	4620      	mov	r0, r4
   38c48:	f7ff ff5c 	bl	38b04 <unpend_thread_no_timeout>
   38c4c:	f104 0018 	add.w	r0, r4, #24
   38c50:	f000 f865 	bl	38d1e <z_abort_timeout>
	__asm__ volatile(
   38c54:	f385 8811 	msr	BASEPRI, r5
   38c58:	f3bf 8f6f 	isb	sy
}
   38c5c:	4620      	mov	r0, r4
   38c5e:	bd38      	pop	{r3, r4, r5, pc}
   38c60:	2400      	movs	r4, #0
   38c62:	e7f7      	b.n	38c54 <z_unpend_first_thread+0x28>

00038c64 <z_unpend_thread>:
{
   38c64:	b510      	push	{r4, lr}
	__asm__ volatile(
   38c66:	f04f 0320 	mov.w	r3, #32
   38c6a:	f3ef 8411 	mrs	r4, BASEPRI
   38c6e:	f383 8812 	msr	BASEPRI_MAX, r3
   38c72:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   38c76:	f7ff ff45 	bl	38b04 <unpend_thread_no_timeout>
	__asm__ volatile(
   38c7a:	f384 8811 	msr	BASEPRI, r4
   38c7e:	f3bf 8f6f 	isb	sy
}
   38c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   38c86:	3018      	adds	r0, #24
   38c88:	f000 b849 	b.w	38d1e <z_abort_timeout>

00038c8c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   38c8c:	4603      	mov	r3, r0
   38c8e:	b920      	cbnz	r0, 38c9a <z_reschedule_irqlock+0xe>
   38c90:	f3ef 8205 	mrs	r2, IPSR
   38c94:	b90a      	cbnz	r2, 38c9a <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   38c96:	f7db bea9 	b.w	149ec <arch_swap>
   38c9a:	f383 8811 	msr	BASEPRI, r3
   38c9e:	f3bf 8f6f 	isb	sy
}
   38ca2:	4770      	bx	lr

00038ca4 <z_reschedule_unlocked>:
	__asm__ volatile(
   38ca4:	f04f 0320 	mov.w	r3, #32
   38ca8:	f3ef 8011 	mrs	r0, BASEPRI
   38cac:	f383 8812 	msr	BASEPRI_MAX, r3
   38cb0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   38cb4:	f7ff bfea 	b.w	38c8c <z_reschedule_irqlock>

00038cb8 <z_unpend_all>:
{
   38cb8:	b538      	push	{r3, r4, r5, lr}
   38cba:	4605      	mov	r5, r0
	int need_sched = 0;
   38cbc:	2000      	movs	r0, #0
	return list->head == list;
   38cbe:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38cc0:	42a5      	cmp	r5, r4
   38cc2:	d000      	beq.n	38cc6 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   38cc4:	b904      	cbnz	r4, 38cc8 <z_unpend_all+0x10>
}
   38cc6:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   38cc8:	4620      	mov	r0, r4
   38cca:	f7ff ffcb 	bl	38c64 <z_unpend_thread>
		z_ready_thread(thread);
   38cce:	4620      	mov	r0, r4
   38cd0:	f7ff ff75 	bl	38bbe <z_ready_thread>
		need_sched = 1;
   38cd4:	2001      	movs	r0, #1
   38cd6:	e7f2      	b.n	38cbe <z_unpend_all+0x6>

00038cd8 <z_sched_wake>:
{
   38cd8:	b538      	push	{r3, r4, r5, lr}
   38cda:	f04f 0320 	mov.w	r3, #32
   38cde:	f3ef 8511 	mrs	r5, BASEPRI
   38ce2:	f383 8812 	msr	BASEPRI_MAX, r3
   38ce6:	f3bf 8f6f 	isb	sy
	return list->head == list;
   38cea:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38cec:	42a0      	cmp	r0, r4
   38cee:	d012      	beq.n	38d16 <z_sched_wake+0x3e>
		if (thread != NULL) {
   38cf0:	b19c      	cbz	r4, 38d1a <z_sched_wake+0x42>
   38cf2:	67e1      	str	r1, [r4, #124]	; 0x7c
   38cf4:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   38cf6:	4620      	mov	r0, r4
   38cf8:	f7ff ff04 	bl	38b04 <unpend_thread_no_timeout>
   38cfc:	f104 0018 	add.w	r0, r4, #24
   38d00:	f000 f80d 	bl	38d1e <z_abort_timeout>
			ready_thread(thread);
   38d04:	4620      	mov	r0, r4
   38d06:	f7f9 f991 	bl	3202c <ready_thread>
			ret = true;
   38d0a:	2001      	movs	r0, #1
	__asm__ volatile(
   38d0c:	f385 8811 	msr	BASEPRI, r5
   38d10:	f3bf 8f6f 	isb	sy
}
   38d14:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   38d16:	2000      	movs	r0, #0
   38d18:	e7f8      	b.n	38d0c <z_sched_wake+0x34>
   38d1a:	4620      	mov	r0, r4
   38d1c:	e7f6      	b.n	38d0c <z_sched_wake+0x34>

00038d1e <z_abort_timeout>:
{
   38d1e:	b510      	push	{r4, lr}
	__asm__ volatile(
   38d20:	f04f 0220 	mov.w	r2, #32
   38d24:	f3ef 8411 	mrs	r4, BASEPRI
   38d28:	f382 8812 	msr	BASEPRI_MAX, r2
   38d2c:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   38d30:	6803      	ldr	r3, [r0, #0]
   38d32:	b13b      	cbz	r3, 38d44 <z_abort_timeout+0x26>
			remove_timeout(to);
   38d34:	f7f9 fcb4 	bl	326a0 <remove_timeout>
			ret = 0;
   38d38:	2000      	movs	r0, #0
	__asm__ volatile(
   38d3a:	f384 8811 	msr	BASEPRI, r4
   38d3e:	f3bf 8f6f 	isb	sy
}
   38d42:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   38d44:	f06f 0015 	mvn.w	r0, #21
   38d48:	e7f7      	b.n	38d3a <z_abort_timeout+0x1c>

00038d4a <z_get_next_timeout_expiry>:
{
   38d4a:	b510      	push	{r4, lr}
	__asm__ volatile(
   38d4c:	f04f 0320 	mov.w	r3, #32
   38d50:	f3ef 8411 	mrs	r4, BASEPRI
   38d54:	f383 8812 	msr	BASEPRI_MAX, r3
   38d58:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   38d5c:	f7f9 fc78 	bl	32650 <next_timeout>
	__asm__ volatile(
   38d60:	f384 8811 	msr	BASEPRI, r4
   38d64:	f3bf 8f6f 	isb	sy
}
   38d68:	bd10      	pop	{r4, pc}

00038d6a <z_set_timeout_expiry>:
{
   38d6a:	b570      	push	{r4, r5, r6, lr}
   38d6c:	4604      	mov	r4, r0
   38d6e:	460d      	mov	r5, r1
	__asm__ volatile(
   38d70:	f04f 0320 	mov.w	r3, #32
   38d74:	f3ef 8611 	mrs	r6, BASEPRI
   38d78:	f383 8812 	msr	BASEPRI_MAX, r3
   38d7c:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   38d80:	f7f9 fc66 	bl	32650 <next_timeout>
			      || (ticks <= next_to);
   38d84:	2801      	cmp	r0, #1
   38d86:	dd07      	ble.n	38d98 <z_set_timeout_expiry+0x2e>
   38d88:	42a0      	cmp	r0, r4
   38d8a:	db05      	blt.n	38d98 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   38d8c:	42a0      	cmp	r0, r4
   38d8e:	4629      	mov	r1, r5
   38d90:	bfa8      	it	ge
   38d92:	4620      	movge	r0, r4
   38d94:	f7f6 ff58 	bl	2fc48 <sys_clock_set_timeout>
	__asm__ volatile(
   38d98:	f386 8811 	msr	BASEPRI, r6
   38d9c:	f3bf 8f6f 	isb	sy
}
   38da0:	bd70      	pop	{r4, r5, r6, pc}

00038da2 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   38da2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   38da4:	f7f9 fd70 	bl	32888 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   38da8:	bd08      	pop	{r3, pc}

00038daa <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   38daa:	f7f9 bd6d 	b.w	32888 <sys_clock_tick_get>

00038dae <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   38dae:	b108      	cbz	r0, 38db4 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   38db0:	f7dc bb9c 	b.w	154ec <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   38db4:	4770      	bx	lr

00038db6 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   38db6:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   38dba:	bf08      	it	eq
   38dbc:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   38dc0:	b538      	push	{r3, r4, r5, lr}
   38dc2:	460c      	mov	r4, r1
   38dc4:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   38dc6:	d014      	beq.n	38df2 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   38dc8:	4308      	orrs	r0, r1
   38dca:	d103      	bne.n	38dd4 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   38dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   38dd0:	f7f9 bd5a 	b.w	32888 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   38dd4:	f06f 0001 	mvn.w	r0, #1
   38dd8:	1b40      	subs	r0, r0, r5
   38dda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   38dde:	eb63 0101 	sbc.w	r1, r3, r1
   38de2:	2900      	cmp	r1, #0
   38de4:	da04      	bge.n	38df0 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   38de6:	f7f9 fd4f 	bl	32888 <sys_clock_tick_get>
   38dea:	1940      	adds	r0, r0, r5
   38dec:	eb41 0104 	adc.w	r1, r1, r4
}
   38df0:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   38df2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   38df6:	4601      	mov	r1, r0
   38df8:	e7fa      	b.n	38df0 <sys_clock_timeout_end_calc+0x3a>

00038dfa <k_timer_init>:
	timer->status = 0U;
   38dfa:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   38dfc:	e9c0 1208 	strd	r1, r2, [r0, #32]
   38e00:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   38e04:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   38e08:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   38e0c:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   38e0e:	6343      	str	r3, [r0, #52]	; 0x34
}
   38e10:	4770      	bx	lr

00038e12 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   38e12:	b510      	push	{r4, lr}
   38e14:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   38e16:	f7ff ff82 	bl	38d1e <z_abort_timeout>

	if (inactive) {
   38e1a:	b9b0      	cbnz	r0, 38e4a <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   38e1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   38e1e:	b10b      	cbz	r3, 38e24 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   38e20:	4620      	mov	r0, r4
   38e22:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   38e24:	f104 0018 	add.w	r0, r4, #24
   38e28:	f7ff fee9 	bl	38bfe <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   38e2c:	b168      	cbz	r0, 38e4a <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   38e2e:	f7ff fec6 	bl	38bbe <z_ready_thread>
	__asm__ volatile(
   38e32:	f04f 0320 	mov.w	r3, #32
   38e36:	f3ef 8011 	mrs	r0, BASEPRI
   38e3a:	f383 8812 	msr	BASEPRI_MAX, r3
   38e3e:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   38e42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   38e46:	f7ff bf21 	b.w	38c8c <z_reschedule_irqlock>
   38e4a:	bd10      	pop	{r4, pc}

00038e4c <add_event>:
{
   38e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38e4e:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   38e50:	e9d0 1300 	ldrd	r1, r3, [r0]
   38e54:	4288      	cmp	r0, r1
   38e56:	4604      	mov	r4, r0
   38e58:	d105      	bne.n	38e66 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   38e5a:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   38e5c:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   38e60:	601d      	str	r5, [r3, #0]
	list->tail = node;
   38e62:	6065      	str	r5, [r4, #4]
   38e64:	e01d      	b.n	38ea2 <add_event+0x56>
	if ((pending == NULL) ||
   38e66:	2b00      	cmp	r3, #0
   38e68:	d0f7      	beq.n	38e5a <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   38e6a:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   38e6c:	b100      	cbz	r0, 38e70 <add_event+0x24>
   38e6e:	3860      	subs	r0, #96	; 0x60
   38e70:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   38e74:	4639      	mov	r1, r7
   38e76:	f7ff fe4f 	bl	38b18 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   38e7a:	2800      	cmp	r0, #0
   38e7c:	dced      	bgt.n	38e5a <add_event+0xe>
	return list->head == list;
   38e7e:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38e80:	42b4      	cmp	r4, r6
   38e82:	d0ea      	beq.n	38e5a <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   38e84:	2e00      	cmp	r6, #0
   38e86:	d0e8      	beq.n	38e5a <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   38e88:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   38e8a:	b101      	cbz	r1, 38e8e <add_event+0x42>
   38e8c:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   38e8e:	4638      	mov	r0, r7
   38e90:	f7ff fe42 	bl	38b18 <z_sched_prio_cmp>
   38e94:	2800      	cmp	r0, #0
   38e96:	dd05      	ble.n	38ea4 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   38e98:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   38e9a:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   38e9e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   38ea0:	6075      	str	r5, [r6, #4]
}
   38ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   38ea4:	6863      	ldr	r3, [r4, #4]
   38ea6:	429e      	cmp	r6, r3
   38ea8:	d0d7      	beq.n	38e5a <add_event+0xe>
   38eaa:	6836      	ldr	r6, [r6, #0]
   38eac:	e7ea      	b.n	38e84 <add_event+0x38>

00038eae <register_events>:
{
   38eae:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   38eb2:	2500      	movs	r5, #0
{
   38eb4:	468b      	mov	fp, r1
   38eb6:	4614      	mov	r4, r2
   38eb8:	461f      	mov	r7, r3
   38eba:	4682      	mov	sl, r0
	int events_registered = 0;
   38ebc:	462e      	mov	r6, r5
	event->poller = NULL;
   38ebe:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   38ec0:	455d      	cmp	r5, fp
   38ec2:	db02      	blt.n	38eca <register_events+0x1c>
}
   38ec4:	4630      	mov	r0, r6
   38ec6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38eca:	f04f 0320 	mov.w	r3, #32
   38ece:	f3ef 8911 	mrs	r9, BASEPRI
   38ed2:	f383 8812 	msr	BASEPRI_MAX, r3
   38ed6:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   38eda:	f89a 300d 	ldrb.w	r3, [sl, #13]
   38ede:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   38ee2:	3b01      	subs	r3, #1
   38ee4:	2b07      	cmp	r3, #7
   38ee6:	d80f      	bhi.n	38f08 <register_events+0x5a>
   38ee8:	e8df f003 	tbb	[pc, r3]
   38eec:	0a0e041e 	.word	0x0a0e041e
   38ef0:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   38ef4:	f8da 3010 	ldr.w	r3, [sl, #16]
   38ef8:	689b      	ldr	r3, [r3, #8]
   38efa:	b12b      	cbz	r3, 38f08 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   38efc:	2302      	movs	r3, #2
   38efe:	e020      	b.n	38f42 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   38f00:	f8da 3010 	ldr.w	r3, [sl, #16]
   38f04:	681b      	ldr	r3, [r3, #0]
   38f06:	bb8b      	cbnz	r3, 38f6c <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   38f08:	bb47      	cbnz	r7, 38f5c <register_events+0xae>
   38f0a:	7823      	ldrb	r3, [r4, #0]
   38f0c:	b333      	cbz	r3, 38f5c <register_events+0xae>
	switch (event->type) {
   38f0e:	f89a 300d 	ldrb.w	r3, [sl, #13]
   38f12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   38f16:	3b01      	subs	r3, #1
   38f18:	2b07      	cmp	r3, #7
   38f1a:	d830      	bhi.n	38f7e <register_events+0xd0>
   38f1c:	e8df f003 	tbb	[pc, r3]
   38f20:	282f2833 	.word	0x282f2833
   38f24:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   38f28:	f8da 3010 	ldr.w	r3, [sl, #16]
   38f2c:	689b      	ldr	r3, [r3, #8]
   38f2e:	2b00      	cmp	r3, #0
   38f30:	d0ea      	beq.n	38f08 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   38f32:	2301      	movs	r3, #1
   38f34:	e005      	b.n	38f42 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   38f36:	f8da 3010 	ldr.w	r3, [sl, #16]
   38f3a:	6a1b      	ldr	r3, [r3, #32]
   38f3c:	2b00      	cmp	r3, #0
   38f3e:	d0e3      	beq.n	38f08 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   38f40:	2310      	movs	r3, #16
	event->state |= state;
   38f42:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   38f46:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   38f4a:	f3c2 3186 	ubfx	r1, r2, #14, #7
   38f4e:	430b      	orrs	r3, r1
   38f50:	f363 3294 	bfi	r2, r3, #14, #7
   38f54:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   38f58:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   38f5c:	f389 8811 	msr	BASEPRI, r9
   38f60:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   38f64:	3501      	adds	r5, #1
   38f66:	f10a 0a14 	add.w	sl, sl, #20
   38f6a:	e7a9      	b.n	38ec0 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   38f6c:	2304      	movs	r3, #4
   38f6e:	e7e8      	b.n	38f42 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   38f70:	f8da 0010 	ldr.w	r0, [sl, #16]
   38f74:	4622      	mov	r2, r4
   38f76:	4651      	mov	r1, sl
   38f78:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   38f7a:	f7ff ff67 	bl	38e4c <add_event>
	event->poller = poller;
   38f7e:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   38f82:	3601      	adds	r6, #1
   38f84:	e7ea      	b.n	38f5c <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   38f86:	f8da 0010 	ldr.w	r0, [sl, #16]
   38f8a:	4622      	mov	r2, r4
   38f8c:	4651      	mov	r1, sl
   38f8e:	e7f4      	b.n	38f7a <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   38f90:	f8da 0010 	ldr.w	r0, [sl, #16]
   38f94:	4622      	mov	r2, r4
   38f96:	4651      	mov	r1, sl
   38f98:	3024      	adds	r0, #36	; 0x24
   38f9a:	e7ee      	b.n	38f7a <register_events+0xcc>

00038f9c <signal_poll_event>:
{
   38f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   38fa0:	6884      	ldr	r4, [r0, #8]
{
   38fa2:	4605      	mov	r5, r0
   38fa4:	460e      	mov	r6, r1
	if (poller != NULL) {
   38fa6:	b144      	cbz	r4, 38fba <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   38fa8:	7863      	ldrb	r3, [r4, #1]
   38faa:	2b01      	cmp	r3, #1
   38fac:	d12e      	bne.n	3900c <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   38fae:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   38fb2:	f013 0302 	ands.w	r3, r3, #2
   38fb6:	d10a      	bne.n	38fce <signal_poll_event+0x32>
		poller->is_polling = false;
   38fb8:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   38fba:	68eb      	ldr	r3, [r5, #12]
   38fbc:	f3c3 3286 	ubfx	r2, r3, #14, #7
   38fc0:	4316      	orrs	r6, r2
	event->poller = NULL;
   38fc2:	2000      	movs	r0, #0
	event->state |= state;
   38fc4:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   38fc8:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   38fca:	60eb      	str	r3, [r5, #12]
	return retcode;
   38fcc:	e03e      	b.n	3904c <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   38fce:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   38fd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   38fd6:	bf08      	it	eq
   38fd8:	f112 0f02 	cmneq.w	r2, #2
   38fdc:	d032      	beq.n	39044 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   38fde:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   38fe2:	4640      	mov	r0, r8
   38fe4:	f7ff fe3e 	bl	38c64 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   38fe8:	2e08      	cmp	r6, #8
   38fea:	bf0c      	ite	eq
   38fec:	f06f 0303 	mvneq.w	r3, #3
   38ff0:	2300      	movne	r3, #0
   38ff2:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   38ff4:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   38ff8:	06db      	lsls	r3, r3, #27
   38ffa:	d109      	bne.n	39010 <signal_poll_event+0x74>
   38ffc:	f854 7c48 	ldr.w	r7, [r4, #-72]
   39000:	b937      	cbnz	r7, 39010 <signal_poll_event+0x74>
	z_ready_thread(thread);
   39002:	4640      	mov	r0, r8
   39004:	f7ff fddb 	bl	38bbe <z_ready_thread>
		poller->is_polling = false;
   39008:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   3900a:	e7d6      	b.n	38fba <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   3900c:	2b02      	cmp	r3, #2
   3900e:	d001      	beq.n	39014 <signal_poll_event+0x78>
		poller->is_polling = false;
   39010:	2300      	movs	r3, #0
   39012:	e7d1      	b.n	38fb8 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   39014:	7823      	ldrb	r3, [r4, #0]
   39016:	2b00      	cmp	r3, #0
   39018:	d0cf      	beq.n	38fba <signal_poll_event+0x1e>
   3901a:	f854 7c04 	ldr.w	r7, [r4, #-4]
   3901e:	2f00      	cmp	r7, #0
   39020:	d0f2      	beq.n	39008 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   39022:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   39026:	f1a4 0914 	sub.w	r9, r4, #20
   3902a:	f104 0014 	add.w	r0, r4, #20
   3902e:	f7ff fe76 	bl	38d1e <z_abort_timeout>
		twork->poll_result = 0;
   39032:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   39036:	4649      	mov	r1, r9
   39038:	4638      	mov	r0, r7
   3903a:	f7ff fcdd 	bl	389f8 <z_work_submit_to_queue>
		poller->is_polling = false;
   3903e:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   39042:	e7ba      	b.n	38fba <signal_poll_event+0x1e>
		poller->is_polling = false;
   39044:	2300      	movs	r3, #0
   39046:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   39048:	f06f 000a 	mvn.w	r0, #10
}
   3904c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00039050 <clear_event_registrations>:
	while (num_events--) {
   39050:	2314      	movs	r3, #20
{
   39052:	b5f0      	push	{r4, r5, r6, r7, lr}
   39054:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   39058:	2400      	movs	r4, #0
	switch (event->type) {
   3905a:	f44f 768b 	mov.w	r6, #278	; 0x116
	while (num_events--) {
   3905e:	b901      	cbnz	r1, 39062 <clear_event_registrations+0x12>
}
   39060:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   39062:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   39066:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   3906a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3906e:	2b08      	cmp	r3, #8
   39070:	f1a0 0714 	sub.w	r7, r0, #20
   39074:	d80c      	bhi.n	39090 <clear_event_registrations+0x40>
   39076:	fa26 f303 	lsr.w	r3, r6, r3
   3907a:	07db      	lsls	r3, r3, #31
   3907c:	d508      	bpl.n	39090 <clear_event_registrations+0x40>
	return node->next != NULL;
   3907e:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   39082:	b12b      	cbz	r3, 39090 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   39084:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   39088:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   3908a:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   3908c:	e940 4405 	strd	r4, r4, [r0, #-20]
   39090:	f382 8811 	msr	BASEPRI, r2
   39094:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   39098:	f04f 0320 	mov.w	r3, #32
   3909c:	f3ef 8211 	mrs	r2, BASEPRI
   390a0:	f383 8812 	msr	BASEPRI_MAX, r3
   390a4:	f3bf 8f6f 	isb	sy
   390a8:	3901      	subs	r1, #1
   390aa:	4638      	mov	r0, r7
   390ac:	e7d7      	b.n	3905e <clear_event_registrations+0xe>

000390ae <k_poll_event_init>:
{
   390ae:	b510      	push	{r4, lr}
	event->type = type;
   390b0:	0552      	lsls	r2, r2, #21
   390b2:	0209      	lsls	r1, r1, #8
   390b4:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   390b8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
   390bc:	430a      	orrs	r2, r1
   390be:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   390c0:	2400      	movs	r4, #0
	event->type = type;
   390c2:	430a      	orrs	r2, r1
	event->obj = obj;
   390c4:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   390c8:	6084      	str	r4, [r0, #8]
}
   390ca:	bd10      	pop	{r4, pc}

000390cc <z_handle_obj_poll_events>:
{
   390cc:	4603      	mov	r3, r0
	return list->head == list;
   390ce:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   390d0:	4283      	cmp	r3, r0
   390d2:	d008      	beq.n	390e6 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   390d4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   390d8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   390da:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   390dc:	2300      	movs	r3, #0
	node->prev = NULL;
   390de:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   390e2:	f7ff bf5b 	b.w	38f9c <signal_poll_event>
}
   390e6:	4770      	bx	lr

000390e8 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   390e8:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   390ea:	e9c0 0000 	strd	r0, r0, [r0]
   390ee:	6083      	str	r3, [r0, #8]
}
   390f0:	4770      	bx	lr

000390f2 <k_free>:
	if (ptr != NULL) {
   390f2:	b120      	cbz	r0, 390fe <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   390f4:	1f01      	subs	r1, r0, #4
   390f6:	f850 0c04 	ldr.w	r0, [r0, #-4]
   390fa:	f7ff baac 	b.w	38656 <k_heap_free>
}
   390fe:	4770      	bx	lr
